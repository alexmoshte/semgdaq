
semgdaq_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005374  08005374  00027854  2**0
                  CONTENTS
  4 .ARM          00000000  08005374  08005374  00027854  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005374  08005374  00027854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007854  20000000  0800537c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20007854  0800cbd0  00027854  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007c68  0800cbd0  00027c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027854  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00027884  2**0
                  CONTENTS, READONLY
 13 .debug_info   000144d4  00000000  00000000  0002793c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d77  00000000  00000000  0003be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5c  00000000  00000000  0003ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215aa  00000000  00000000  00040f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160b2  00000000  00000000  000624be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1841  00000000  00000000  00078570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000554c  00000000  00000000  00159db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0015f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d34  00000000  00000000  0015f37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001600ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20007854 	.word	0x20007854
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800534c 	.word	0x0800534c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20007858 	.word	0x20007858
 8000214:	0800534c 	.word	0x0800534c

08000218 <init_ADC1_IN1_struct>:
extern ADC3_DMA_sort*ADC3_DMA_sort_ptr;


// INITIALIZING THE STRUCT INSTANCE
void init_ADC1_IN1_struct(void)
  {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);  // Typecasting. Assigned at runtime
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <init_ADC1_IN1_struct+0x1c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000224:	3314      	adds	r3, #20
 8000226:	4a04      	ldr	r2, [pc, #16]	; (8000238 <init_ADC1_IN1_struct+0x20>)
 8000228:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	20007c50 	.word	0x20007c50
 8000238:	20000028 	.word	0x20000028

0800023c <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8000242:	7819      	ldrb	r1, [r3, #0]
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8000246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 800024a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <init_ADC1_IN1_FO_biquad_filter+0x20>)
 800024e:	f005 f845 	bl	80052dc <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000028 	.word	0x20000028
 800025c:	20001400 	.word	0x20001400

08000260 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000266:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 800026a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800026e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000278:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 800027e:	f004 fe71 	bl	8004f64 <arm_biquad_cascade_df2T_f32>
   }
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028
 800028c:	20001400 	.word	0x20001400

08000290 <init_ADC1_IN2_struct>:



void init_ADC1_IN2_struct(void)
  {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);  // Typecasting. Assigned at runtime
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <init_ADC1_IN2_struct+0x1c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800029c:	3320      	adds	r3, #32
 800029e:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <init_ADC1_IN2_struct+0x20>)
 80002a0:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	20007c50 	.word	0x20007c50
 80002b0:	20001434 	.word	0x20001434

080002b4 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80002ba:	7819      	ldrb	r1, [r3, #0]
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80002be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 80002c6:	f005 f809 	bl	80052dc <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,  // Pointer to the instance
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN2_NF_arg.ADC1_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20001434 	.word	0x20001434
 80002d4:	2000280c 	.word	0x2000280c

080002d8 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 80002de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 80002e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002e6:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 80002ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80002f4:	4803      	ldr	r0, [pc, #12]	; (8000304 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 80002f6:	f004 fe35 	bl	8004f64 <arm_biquad_cascade_df2T_f32>
   }
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20001434 	.word	0x20001434
 8000304:	2000280c 	.word	0x2000280c

08000308 <init_ADC2_IN3_struct>:



void init_ADC2_IN3_struct(void)
  {
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);  // Typecasting. Assigned at runtime
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <init_ADC2_IN3_struct+0x1c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000314:	3314      	adds	r3, #20
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <init_ADC2_IN3_struct+0x20>)
 8000318:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	20007c54 	.word	0x20007c54
 8000328:	20002840 	.word	0x20002840

0800032c <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000332:	7819      	ldrb	r1, [r3, #0]
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 800033a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <init_ADC2_IN3_FO_biquad_filter+0x20>)
 800033e:	f004 ffcd 	bl	80052dc <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState                                         // Pointer to the state buffer
	 );
  }
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20002840 	.word	0x20002840
 800034c:	20003c18 	.word	0x20003c18

08000350 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000356:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 800035a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800035e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000368:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 800036e:	f004 fdf9 	bl	8004f64 <arm_biquad_cascade_df2T_f32>
   }
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20002840 	.word	0x20002840
 800037c:	20003c18 	.word	0x20003c18

08000380 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);  // Typecasting. Assigned at runtime
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <init_ADC2_IN4_struct+0x1c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800038c:	3320      	adds	r3, #32
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <init_ADC2_IN4_struct+0x20>)
 8000390:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	20007c54 	.word	0x20007c54
 80003a0:	20003c4c 	.word	0x20003c4c

080003a4 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80003aa:	7819      	ldrb	r1, [r3, #0]
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80003ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80003b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 80003b6:	f004 ff91 	bl	80052dc <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,  // Pointer to the instance
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN4_NF_arg.ADC2_IN4_pState                                         // Pointer to the state buffer
	 );
  }
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20003c4c 	.word	0x20003c4c
 80003c4:	20005024 	.word	0x20005024

080003c8 <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80003ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80003d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003d6:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80003dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 80003e6:	f004 fdbd 	bl	8004f64 <arm_biquad_cascade_df2T_f32>
   }
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20003c4c 	.word	0x20003c4c
 80003f4:	20005024 	.word	0x20005024

080003f8 <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);  // Typecasting. Assigned at runtime
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <init_ADC3_IN1_struct+0x1c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000404:	3314      	adds	r3, #20
 8000406:	4a04      	ldr	r2, [pc, #16]	; (8000418 <init_ADC3_IN1_struct+0x20>)
 8000408:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	20007c58 	.word	0x20007c58
 8000418:	20005058 	.word	0x20005058

0800041c <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000422:	7819      	ldrb	r1, [r3, #0]
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800042a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <init_ADC3_IN1_FO_biquad_filter+0x20>)
 800042e:	f004 ff55 	bl	80052dc <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,  // Pointer to the instance
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN1_NF_arg.ADC3_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20005058 	.word	0x20005058
 800043c:	20006430 	.word	0x20006430

08000440 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000446:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800044a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800044e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000458:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 800045e:	f004 fd81 	bl	8004f64 <arm_biquad_cascade_df2T_f32>
   }
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20005058 	.word	0x20005058
 800046c:	20006430 	.word	0x20006430

08000470 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <init_ADC3_IN2_struct+0x1c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 800047c:	3320      	adds	r3, #32
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <init_ADC3_IN2_struct+0x20>)
 8000480:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	20007c58 	.word	0x20007c58
 8000490:	20006464 	.word	0x20006464

08000494 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 800049a:	7819      	ldrb	r1, [r3, #0]
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 800049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80004a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 80004a6:	f004 ff19 	bl	80052dc <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20006464 	.word	0x20006464
 80004b4:	2000783c 	.word	0x2000783c

080004b8 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80004be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80004c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004c6:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80004cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 80004d6:	f004 fd45 	bl	8004f64 <arm_biquad_cascade_df2T_f32>
   }
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20006464 	.word	0x20006464
 80004e4:	2000783c 	.word	0x2000783c

080004e8 <ADC1_DMA_sort_uhb>:
 *  Defines all the functions that implement the sorting algorithm for all ADCs
 */
#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	e038      	b.n	8000566 <ADC1_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d004      	beq.n	8000504 <ADC1_DMA_sort_uhb+0x1c>
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	2b00      	cmp	r3, #0
 8000502:	d117      	bne.n	8000534 <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	e00f      	b.n	800052a <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <ADC1_DMA_sort_uhb+0x94>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <ADC1_DMA_sort_uhb+0x94>)
 8000510:	6811      	ldr	r1, [r2, #0]
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	440b      	add	r3, r1
 8000522:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	3301      	adds	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000530:	d3eb      	bcc.n	800050a <ADC1_DMA_sort_uhb+0x22>
 8000532:	e015      	b.n	8000560 <ADC1_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	e00e      	b.n	8000558 <ADC1_DMA_sort_uhb+0x70>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <ADC1_DMA_sort_uhb+0x94>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <ADC1_DMA_sort_uhb+0x94>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68f9      	ldr	r1, [r7, #12]
 8000544:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 800054e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	3301      	adds	r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800055e:	d3ec      	bcc.n	800053a <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800056c:	d9c2      	bls.n	80004f4 <ADC1_DMA_sort_uhb+0xc>
			}
		}
    }

};
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	20007c50 	.word	0x20007c50

08000580 <ADC1_DMA_sort_lhb>:

void ADC1_DMA_sort_lhb (void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8000586:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e03a      	b.n	8000604 <ADC1_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d004      	beq.n	800059e <ADC1_DMA_sort_lhb+0x1e>
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d118      	bne.n	80005d0 <ADC1_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800059e:	f240 2371 	movw	r3, #625	; 0x271
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	e00f      	b.n	80005c6 <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <ADC1_DMA_sort_lhb+0x9c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <ADC1_DMA_sort_lhb+0x9c>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	440b      	add	r3, r1
 80005be:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80005cc:	d9eb      	bls.n	80005a6 <ADC1_DMA_sort_lhb+0x26>
 80005ce:	e016      	b.n	80005fe <ADC1_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80005d0:	f240 2371 	movw	r3, #625	; 0x271
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	e00e      	b.n	80005f6 <ADC1_DMA_sort_lhb+0x76>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <ADC1_DMA_sort_lhb+0x9c>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <ADC1_DMA_sort_lhb+0x9c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	68f9      	ldr	r1, [r7, #12]
 80005e2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80005ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3301      	adds	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80005fc:	d9ec      	bls.n	80005d8 <ADC1_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3301      	adds	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f640 12c2 	movw	r2, #2498	; 0x9c2
 800060a:	4293      	cmp	r3, r2
 800060c:	d9bf      	bls.n	800058e <ADC1_DMA_sort_lhb+0xe>
			}
		}
    }

};
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20007c50 	.word	0x20007c50

08000620 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e038      	b.n	800069e <ADC2_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <ADC2_DMA_sort_uhb+0x1c>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d117      	bne.n	800066c <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e00f      	b.n	8000662 <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <ADC2_DMA_sort_uhb+0x94>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <ADC2_DMA_sort_uhb+0x94>)
 8000648:	6811      	ldr	r1, [r2, #0]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	440b      	add	r3, r1
 800065a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	3301      	adds	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000668:	d3eb      	bcc.n	8000642 <ADC2_DMA_sort_uhb+0x22>
 800066a:	e015      	b.n	8000698 <ADC2_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	e00e      	b.n	8000690 <ADC2_DMA_sort_uhb+0x70>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <ADC2_DMA_sort_uhb+0x94>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <ADC2_DMA_sort_uhb+0x94>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68f9      	ldr	r1, [r7, #12]
 800067c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000696:	d3ec      	bcc.n	8000672 <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80006a4:	d9c2      	bls.n	800062c <ADC2_DMA_sort_uhb+0xc>
			}
		}
    }

};
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20007c54 	.word	0x20007c54

080006b8 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80006be:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e03a      	b.n	800073c <ADC2_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d004      	beq.n	80006d6 <ADC2_DMA_sort_lhb+0x1e>
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d118      	bne.n	8000708 <ADC2_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80006d6:	f240 2371 	movw	r3, #625	; 0x271
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	e00f      	b.n	80006fe <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <ADC2_DMA_sort_lhb+0x9c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <ADC2_DMA_sort_lhb+0x9c>)
 80006e4:	6811      	ldr	r1, [r2, #0]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000704:	d9eb      	bls.n	80006de <ADC2_DMA_sort_lhb+0x26>
 8000706:	e016      	b.n	8000736 <ADC2_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8000708:	f240 2371 	movw	r3, #625	; 0x271
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	e00e      	b.n	800072e <ADC2_DMA_sort_lhb+0x76>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <ADC2_DMA_sort_lhb+0x9c>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <ADC2_DMA_sort_lhb+0x9c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68f9      	ldr	r1, [r7, #12]
 800071a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000734:	d9ec      	bls.n	8000710 <ADC2_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3301      	adds	r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8000742:	4293      	cmp	r3, r2
 8000744:	d9bf      	bls.n	80006c6 <ADC2_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20007c54 	.word	0x20007c54

08000758 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e038      	b.n	80007d6 <ADC3_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d004      	beq.n	8000774 <ADC3_DMA_sort_uhb+0x1c>
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d117      	bne.n	80007a4 <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	e00f      	b.n	800079a <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <ADC3_DMA_sort_uhb+0x94>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <ADC3_DMA_sort_uhb+0x94>)
 8000780:	6811      	ldr	r1, [r2, #0]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	3301      	adds	r3, #1
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80007a0:	d3eb      	bcc.n	800077a <ADC3_DMA_sort_uhb+0x22>
 80007a2:	e015      	b.n	80007d0 <ADC3_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	e00e      	b.n	80007c8 <ADC3_DMA_sort_uhb+0x70>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <ADC3_DMA_sort_uhb+0x94>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <ADC3_DMA_sort_uhb+0x94>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80007be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3301      	adds	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80007ce:	d3ec      	bcc.n	80007aa <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80007dc:	d9c2      	bls.n	8000764 <ADC3_DMA_sort_uhb+0xc>
			}
		}
    }

};
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	20007c58 	.word	0x20007c58

080007f0 <ADC3_DMA_sort_lhb>:

void ADC3_DMA_sort_lhb (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80007f6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e03a      	b.n	8000874 <ADC3_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d004      	beq.n	800080e <ADC3_DMA_sort_lhb+0x1e>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d118      	bne.n	8000840 <ADC3_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800080e:	f240 2371 	movw	r3, #625	; 0x271
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	e00f      	b.n	8000836 <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <ADC3_DMA_sort_lhb+0x9c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <ADC3_DMA_sort_lhb+0x9c>)
 800081c:	6811      	ldr	r1, [r2, #0]
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	440b      	add	r3, r1
 800082e:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	3301      	adds	r3, #1
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800083c:	d9eb      	bls.n	8000816 <ADC3_DMA_sort_lhb+0x26>
 800083e:	e016      	b.n	800086e <ADC3_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8000840:	f240 2371 	movw	r3, #625	; 0x271
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	e00e      	b.n	8000866 <ADC3_DMA_sort_lhb+0x76>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <ADC3_DMA_sort_lhb+0x9c>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <ADC3_DMA_sort_lhb+0x9c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	68f9      	ldr	r1, [r7, #12]
 8000852:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 800085c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3301      	adds	r3, #1
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800086c:	d9ec      	bls.n	8000848 <ADC3_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f640 12c2 	movw	r2, #2498	; 0x9c2
 800087a:	4293      	cmp	r3, r2
 800087c:	d9bf      	bls.n	80007fe <ADC3_DMA_sort_lhb+0xe>
			}
		}
    }

};
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	20007c58 	.word	0x20007c58

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 ff3f 	bl	8001716 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct();
 8000898:	f7ff fcbe 	bl	8000218 <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();
 800089c:	f7ff fcce 	bl	800023c <init_ADC1_IN1_FO_biquad_filter>

  init_ADC1_IN2_struct();
 80008a0:	f7ff fcf6 	bl	8000290 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 80008a4:	f7ff fd06 	bl	80002b4 <init_ADC1_IN2_FO_biquad_filter>

  init_ADC2_IN3_struct();
 80008a8:	f7ff fd2e 	bl	8000308 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 80008ac:	f7ff fd3e 	bl	800032c <init_ADC2_IN3_FO_biquad_filter>

  init_ADC2_IN4_struct();
 80008b0:	f7ff fd66 	bl	8000380 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 80008b4:	f7ff fd76 	bl	80003a4 <init_ADC2_IN4_FO_biquad_filter>

  init_ADC3_IN1_struct();
 80008b8:	f7ff fd9e 	bl	80003f8 <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 80008bc:	f7ff fdae 	bl	800041c <init_ADC3_IN1_FO_biquad_filter>

  init_ADC3_IN2_struct();
 80008c0:	f7ff fdd6 	bl	8000470 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 80008c4:	f7ff fde6 	bl	8000494 <init_ADC3_IN2_FO_biquad_filter>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f852 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 fb22 	bl	8000f14 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d0:	f000 fae6 	bl	8000ea0 <MX_DMA_Init>
  MX_ADC1_Init();
 80008d4:	f000 f896 	bl	8000a04 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008d8:	f000 f91e 	bl	8000b18 <MX_ADC2_Init>
  MX_ADC3_Init();
 80008dc:	f000 f994 	bl	8000c08 <MX_ADC3_Init>
  MX_FMAC_Init();
 80008e0:	f000 fa0a 	bl	8000cf8 <MX_FMAC_Init>
  MX_TIM6_Init();
 80008e4:	f000 fa1c 	bl	8000d20 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008e8:	f000 fa50 	bl	8000d8c <MX_TIM7_Init>
  MX_TIM20_Init();
 80008ec:	f000 fa84 	bl	8000df8 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
    ADC_status=HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr,ADC_DMA_BUFFERSIZE);
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <main+0xc4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <main+0xc8>)
 80008fc:	f001 fb48 	bl	8001f90 <HAL_ADC_Start_DMA>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <main+0xcc>)
 8000906:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
    ADC_status=HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr,ADC_DMA_BUFFERSIZE);
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <main+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <main+0xd4>)
 8000914:	f001 fb3c 	bl	8001f90 <HAL_ADC_Start_DMA>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <main+0xcc>)
 800091e:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
    ADC_status=HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr,ADC_DMA_BUFFERSIZE);
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <main+0xd8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000928:	4619      	mov	r1, r3
 800092a:	4810      	ldr	r0, [pc, #64]	; (800096c <main+0xdc>)
 800092c:	f001 fb30 	bl	8001f90 <HAL_ADC_Start_DMA>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <main+0xcc>)
 8000936:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_ADC1_IN1_FO_biquad_filter();
 8000938:	f7ff fc92 	bl	8000260 <update_ADC1_IN1_FO_biquad_filter>
	  update_ADC1_IN2_FO_biquad_filter();
 800093c:	f7ff fccc 	bl	80002d8 <update_ADC1_IN2_FO_biquad_filter>

	  update_ADC2_IN3_FO_biquad_filter();
 8000940:	f7ff fd06 	bl	8000350 <update_ADC2_IN3_FO_biquad_filter>
	  update_ADC2_IN4_FO_biquad_filter();
 8000944:	f7ff fd40 	bl	80003c8 <update_ADC2_IN4_FO_biquad_filter>

	  update_ADC3_IN1_FO_biquad_filter();
 8000948:	f7ff fd7a 	bl	8000440 <update_ADC3_IN1_FO_biquad_filter>
	  update_ADC3_IN2_FO_biquad_filter();
 800094c:	f7ff fdb4 	bl	80004b8 <update_ADC3_IN2_FO_biquad_filter>
	  update_ADC1_IN1_FO_biquad_filter();
 8000950:	e7f2      	b.n	8000938 <main+0xa8>
 8000952:	bf00      	nop
 8000954:	20007c50 	.word	0x20007c50
 8000958:	200078d0 	.word	0x200078d0
 800095c:	20007c5c 	.word	0x20007c5c
 8000960:	20007c54 	.word	0x20007c54
 8000964:	2000793c 	.word	0x2000793c
 8000968:	20007c58 	.word	0x20007c58
 800096c:	200079a8 	.word	0x200079a8

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	2238      	movs	r2, #56	; 0x38
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fcb8 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000996:	f002 ffe3 	bl	8003960 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a8:	2303      	movs	r3, #3
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009b0:	2308      	movs	r3, #8
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 f87f 	bl	8003ac8 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80009d0:	f000 fbfe 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2303      	movs	r3, #3
 80009da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2102      	movs	r1, #2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fb7d 	bl	80040ec <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009f8:	f000 fbea 	bl	80011d0 <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3750      	adds	r7, #80	; 0x50
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2220      	movs	r2, #32
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 fc69 	bl	80052f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a38:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a50:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a56:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a6c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a90:	481e      	ldr	r0, [pc, #120]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000a92:	f001 f8cf 	bl	8001c34 <HAL_ADC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a9c:	f000 fb98 	bl	80011d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4818      	ldr	r0, [pc, #96]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000aac:	f002 f8c0 	bl	8002c30 <HAL_ADCEx_MultiModeConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000ab6:	f000 fb8b 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_ADC1_Init+0x10c>)
 8000abc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000abe:	2306      	movs	r3, #6
 8000ac0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac6:	237f      	movs	r3, #127	; 0x7f
 8000ac8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aca:	2304      	movs	r3, #4
 8000acc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000ad8:	f001 fb2e 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ae2:	f000 fb75 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_ADC1_Init+0x110>)
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000aea:	230c      	movs	r3, #12
 8000aec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_ADC1_Init+0x108>)
 8000af4:	f001 fb20 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000afe:	f000 fb67 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200078d0 	.word	0x200078d0
 8000b10:	04300002 	.word	0x04300002
 8000b14:	08600004 	.word	0x08600004

08000b18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2220      	movs	r2, #32
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 fbe5 	bl	80052f4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b2c:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <MX_ADC2_Init+0xe4>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b38:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b72:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000b98:	f001 f84c 	bl	8001c34 <HAL_ADC_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000ba2:	f000 fb15 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_ADC2_Init+0xe8>)
 8000ba8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000baa:	2306      	movs	r3, #6
 8000bac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb2:	237f      	movs	r3, #127	; 0x7f
 8000bb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000bc4:	f001 fab8 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000bce:	f000 faff 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_ADC2_Init+0xec>)
 8000bd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_ADC2_Init+0xe0>)
 8000be0:	f001 faaa 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000bea:	f000 faf1 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000793c 	.word	0x2000793c
 8000bfc:	50000100 	.word	0x50000100
 8000c00:	0c900008 	.word	0x0c900008
 8000c04:	10c00010 	.word	0x10c00010

08000c08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2220      	movs	r2, #32
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fb6d 	bl	80052f4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c1c:	4a33      	ldr	r2, [pc, #204]	; (8000cec <MX_ADC3_Init+0xe4>)
 8000c1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c26:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c42:	2204      	movs	r2, #4
 8000c44:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c62:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c86:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000c88:	f000 ffd4 	bl	8001c34 <HAL_ADC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000c92:	f000 fa9d 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_ADC3_Init+0xe8>)
 8000c98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca2:	237f      	movs	r3, #127	; 0x7f
 8000ca4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000cb4:	f001 fa40 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8000cbe:	f000 fa87 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_ADC3_Init+0xec>)
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_ADC3_Init+0xe0>)
 8000cd0:	f001 fa32 	bl	8002138 <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8000cda:	f000 fa79 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200079a8 	.word	0x200079a8
 8000cec:	50000400 	.word	0x50000400
 8000cf0:	04300002 	.word	0x04300002
 8000cf4:	08600004 	.word	0x08600004

08000cf8 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_FMAC_Init+0x20>)
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <MX_FMAC_Init+0x24>)
 8000d00:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_FMAC_Init+0x20>)
 8000d04:	f002 fbfe 	bl	8003504 <HAL_FMAC_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000d0e:	f000 fa5f 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20007b34 	.word	0x20007b34
 8000d1c:	40021400 	.word	0x40021400

08000d20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <MX_TIM6_Init+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d50:	f003 fde8 	bl	8004924 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d5a:	f000 fa39 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_TIM6_Init+0x64>)
 8000d6c:	f004 f86c 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d76:	f000 fa2b 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20007b6c 	.word	0x20007b6c
 8000d88:	40001000 	.word	0x40001000

08000d8c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_TIM7_Init+0x64>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <MX_TIM7_Init+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_TIM7_Init+0x64>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_TIM7_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_TIM7_Init+0x64>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_TIM7_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_TIM7_Init+0x64>)
 8000dbc:	f003 fdb2 	bl	8004924 <HAL_TIM_Base_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000dc6:	f000 fa03 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_TIM7_Init+0x64>)
 8000dd8:	f004 f836 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000de2:	f000 f9f5 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20007bb8 	.word	0x20007bb8
 8000df4:	40001400 	.word	0x40001400

08000df8 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <MX_TIM20_Init+0xa4>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8000e42:	4815      	ldr	r0, [pc, #84]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e44:	f003 fd6e 	bl	8004924 <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8000e4e:	f000 f9bf 	bl	80011d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e62:	f003 fdb6 	bl	80049d2 <HAL_TIM_SlaveConfigSynchro>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8000e6c:	f000 f9b0 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e70:	2320      	movs	r3, #32
 8000e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_TIM20_Init+0xa0>)
 8000e82:	f003 ffe1 	bl	8004e48 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8000e8c:	f000 f9a0 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20007c04 	.word	0x20007c04
 8000e9c:	40015000 	.word	0x40015000

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_DMA_Init+0x70>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <MX_DMA_Init+0x70>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6493      	str	r3, [r2, #72]	; 0x48
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_DMA_Init+0x70>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_DMA_Init+0x70>)
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec2:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <MX_DMA_Init+0x70>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6493      	str	r3, [r2, #72]	; 0x48
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_DMA_Init+0x70>)
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	200b      	movs	r0, #11
 8000edc:	f002 f86b 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f002 f882 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	200c      	movs	r0, #12
 8000eec:	f002 f863 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ef0:	200c      	movs	r0, #12
 8000ef2:	f002 f87a 	bl	8002fea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	200d      	movs	r0, #13
 8000efc:	f002 f85b 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f00:	200d      	movs	r0, #13
 8000f02:	f002 f872 	bl	8002fea <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_GPIO_Init+0x74>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9c:	d123      	bne.n	8000fe6 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8000f9e:	f7ff faa3 	bl	80004e8 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8000fae:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000fb2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8000fb6:	4b37      	ldr	r3, [pc, #220]	; (8001094 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a36      	ldr	r2, [pc, #216]	; (8001094 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fc2:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8000fc6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8000fca:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a30      	ldr	r2, [pc, #192]	; (8001094 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000fda:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8000fde:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8000fe2:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2b      	ldr	r2, [pc, #172]	; (8001098 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d123      	bne.n	8001038 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8000ff0:	f7ff fb16 	bl	8000620 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8001000:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001004:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a23      	ldr	r2, [pc, #140]	; (800109c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001014:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8001018:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800101c:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800102c:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8001030:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001034:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d123      	bne.n	800108a <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8001042:	f7ff fb89 	bl	8000758 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8001052:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001056:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001066:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 800106a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800106e:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800107e:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8001082:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001086:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20007c50 	.word	0x20007c50
 8001098:	50000100 	.word	0x50000100
 800109c:	20007c54 	.word	0x20007c54
 80010a0:	50000400 	.word	0x50000400
 80010a4:	20007c58 	.word	0x20007c58

080010a8 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b8:	d125      	bne.n	8001106 <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 80010ba:	f7ff fa61 	bl	8000580 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_ADC_ConvCpltCallback+0x114>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a3e      	ldr	r2, [pc, #248]	; (80011bc <HAL_ADC_ConvCpltCallback+0x114>)
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ca:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80010ce:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80010d2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80010d6:	4b39      	ldr	r3, [pc, #228]	; (80011bc <HAL_ADC_ConvCpltCallback+0x114>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a38      	ldr	r2, [pc, #224]	; (80011bc <HAL_ADC_ConvCpltCallback+0x114>)
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80010e2:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80010e6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80010ea:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <HAL_ADC_ConvCpltCallback+0x114>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a32      	ldr	r2, [pc, #200]	; (80011bc <HAL_ADC_ConvCpltCallback+0x114>)
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80010fa:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 80010fe:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001102:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x118>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d125      	bne.n	800115c <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 8001110:	f7ff fad2 	bl	80006b8 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <HAL_ADC_ConvCpltCallback+0x11c>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001120:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001124:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001128:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_ADC_ConvCpltCallback+0x11c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001138:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800113c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001140:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_ADC_ConvCpltCallback+0x11c>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001150:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8001154:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001158:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_ADC_ConvCpltCallback+0x120>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d125      	bne.n	80011b2 <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 8001166:	f7ff fb43 	bl	80007f0 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_ADC_ConvCpltCallback+0x124>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_ADC_ConvCpltCallback+0x124>)
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001176:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800117a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800117e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_ADC_ConvCpltCallback+0x124>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_ADC_ConvCpltCallback+0x124>)
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800118e:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8001192:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001196:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_ADC_ConvCpltCallback+0x124>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_ADC_ConvCpltCallback+0x124>)
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80011a6:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 80011aa:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80011ae:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20007c50 	.word	0x20007c50
 80011c0:	50000100 	.word	0x50000100
 80011c4:	20007c54 	.word	0x20007c54
 80011c8:	50000400 	.word	0x50000400
 80011cc:	20007c58 	.word	0x20007c58

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_MspInit+0x44>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6613      	str	r3, [r2, #96]	; 0x60
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_MspInit+0x44>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_MspInit+0x44>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6593      	str	r3, [r2, #88]	; 0x58
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_MspInit+0x44>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001212:	f002 fc49 	bl	8003aa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a2      	sub	sp, #136	; 0x88
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2250      	movs	r2, #80	; 0x50
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f004 f855 	bl	80052f4 <memset>
  if(hadc->Instance==ADC1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001252:	d169      	bne.n	8001328 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800125a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800125e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4618      	mov	r0, r3
 8001266:	f003 f921 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001270:	f7ff ffae 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001274:	4b64      	ldr	r3, [pc, #400]	; (8001408 <HAL_ADC_MspInit+0x1e4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_ADC_MspInit+0x1e4>)
 800127c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800127e:	4b62      	ldr	r3, [pc, #392]	; (8001408 <HAL_ADC_MspInit+0x1e4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d10b      	bne.n	800129e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001286:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 800128c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b5b      	ldr	r3, [pc, #364]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b58      	ldr	r3, [pc, #352]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b6:	2303      	movs	r3, #3
 80012b8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f002 f9c6 	bl	800365c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 80012d2:	4a50      	ldr	r2, [pc, #320]	; (8001414 <HAL_ADC_MspInit+0x1f0>)
 80012d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012d6:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 80012d8:	2205      	movs	r2, #5
 80012da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e2:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e8:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 80012f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 80012f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 8001300:	2220      	movs	r2, #32
 8001302:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800130a:	4841      	ldr	r0, [pc, #260]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 800130c:	f001 fe88 	bl	8003020 <HAL_DMA_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001316:	f7ff ff5b 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a3c      	ldr	r2, [pc, #240]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 800131e:	655a      	str	r2, [r3, #84]	; 0x54
 8001320:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <HAL_ADC_MspInit+0x1ec>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001326:	e0fa      	b.n	800151e <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a3a      	ldr	r2, [pc, #232]	; (8001418 <HAL_ADC_MspInit+0x1f4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d178      	bne.n	8001424 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001338:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800133c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4618      	mov	r0, r3
 8001344:	f003 f8b2 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800134e:	f7ff ff3f 	bl	80011d0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_ADC_MspInit+0x1e4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a2b      	ldr	r2, [pc, #172]	; (8001408 <HAL_ADC_MspInit+0x1e4>)
 800135a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_ADC_MspInit+0x1e4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10b      	bne.n	800137c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 800136a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a22      	ldr	r2, [pc, #136]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_ADC_MspInit+0x1e8>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001398:	2303      	movs	r3, #3
 800139a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f002 f957 	bl	800365c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_ADC_MspInit+0x1fc>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013da:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013de:	2220      	movs	r2, #32
 80013e0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013ea:	f001 fe19 	bl	8003020 <HAL_DMA_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80013f4:	f7ff feec 	bl	80011d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_ADC_MspInit+0x1f8>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001404:	e08b      	b.n	800151e <HAL_ADC_MspInit+0x2fa>
 8001406:	bf00      	nop
 8001408:	20007c60 	.word	0x20007c60
 800140c:	40021000 	.word	0x40021000
 8001410:	20007a14 	.word	0x20007a14
 8001414:	40020008 	.word	0x40020008
 8001418:	50000100 	.word	0x50000100
 800141c:	20007a74 	.word	0x20007a74
 8001420:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC3)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a3f      	ldr	r2, [pc, #252]	; (8001528 <HAL_ADC_MspInit+0x304>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d177      	bne.n	800151e <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800142e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001438:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f834 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 800144a:	f7ff fec1 	bl	80011d0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_ADC_MspInit+0x308>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_ADC_MspInit+0x308>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b34      	ldr	r3, [pc, #208]	; (800152c <HAL_ADC_MspInit+0x308>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_ADC_MspInit+0x308>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a30      	ldr	r2, [pc, #192]	; (800152c <HAL_ADC_MspInit+0x308>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_ADC_MspInit+0x308>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_ADC_MspInit+0x308>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_ADC_MspInit+0x308>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <HAL_ADC_MspInit+0x308>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001496:	2302      	movs	r3, #2
 8001498:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014a6:	4619      	mov	r1, r3
 80014a8:	4821      	ldr	r0, [pc, #132]	; (8001530 <HAL_ADC_MspInit+0x30c>)
 80014aa:	f002 f8d7 	bl	800365c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b4:	2303      	movs	r3, #3
 80014b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014c0:	4619      	mov	r1, r3
 80014c2:	481c      	ldr	r0, [pc, #112]	; (8001534 <HAL_ADC_MspInit+0x310>)
 80014c4:	f002 f8ca 	bl	800365c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014ca:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_ADC_MspInit+0x318>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014d0:	2225      	movs	r2, #37	; 0x25
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014f8:	2220      	movs	r2, #32
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_ADC_MspInit+0x314>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_ADC_MspInit+0x314>)
 8001504:	f001 fd8c 	bl	8003020 <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 800150e:	f7ff fe5f 	bl	80011d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_ADC_MspInit+0x314>)
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_ADC_MspInit+0x314>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800151e:	bf00      	nop
 8001520:	3788      	adds	r7, #136	; 0x88
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	50000400 	.word	0x50000400
 800152c:	40021000 	.word	0x40021000
 8001530:	48000400 	.word	0x48000400
 8001534:	48001000 	.word	0x48001000
 8001538:	20007ad4 	.word	0x20007ad4
 800153c:	40020030 	.word	0x40020030

08001540 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_FMAC_MspInit+0x38>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10b      	bne.n	800156a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_FMAC_MspInit+0x3c>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_FMAC_MspInit+0x3c>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6493      	str	r3, [r2, #72]	; 0x48
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_FMAC_MspInit+0x3c>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021400 	.word	0x40021400
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_TIM_Base_MspInit+0x80>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10c      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6593      	str	r3, [r2, #88]	; 0x58
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80015aa:	e022      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_TIM_Base_MspInit+0x88>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10c      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	6593      	str	r3, [r2, #88]	; 0x58
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
}
 80015ce:	e010      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_TIM_Base_MspInit+0x8c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10b      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 80015e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015e4:	6613      	str	r3, [r2, #96]	; 0x60
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_TIM_Base_MspInit+0x84>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40001000 	.word	0x40001000
 8001604:	40021000 	.word	0x40021000
 8001608:	40001400 	.word	0x40001400
 800160c:	40015000 	.word	0x40015000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f8ae 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DMA1_Channel1_IRQHandler+0x10>)
 800166a:	f001 fdfc 	bl	8003266 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20007a14 	.word	0x20007a14

08001678 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Channel2_IRQHandler+0x10>)
 800167e:	f001 fdf2 	bl	8003266 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20007a74 	.word	0x20007a74

0800168c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Channel3_IRQHandler+0x10>)
 8001692:	f001 fde8 	bl	8003266 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20007ad4 	.word	0x20007ad4

080016a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016c8:	f7ff ffea 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	; (8001704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <LoopForever+0xe>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	; (8001710 <LoopForever+0x16>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f003 fe07 	bl	8005304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016f6:	f7ff f8cb 	bl	8000890 <main>

080016fa <LoopForever>:

LoopForever:
    b LoopForever
 80016fa:	e7fe      	b.n	80016fa <LoopForever>
  ldr   r0, =_estack
 80016fc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	20007854 	.word	0x20007854
  ldr r2, =_sidata
 8001708:	0800537c 	.word	0x0800537c
  ldr r2, =_sbss
 800170c:	20007854 	.word	0x20007854
  ldr r4, =_ebss
 8001710:	20007c68 	.word	0x20007c68

08001714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC1_2_IRQHandler>

08001716 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f001 fc3d 	bl	8002fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001726:	200f      	movs	r0, #15
 8001728:	f000 f80e 	bl	8001748 <HAL_InitTick>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	e001      	b.n	800173c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001738:	f7ff fd50 	bl	80011dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800173c:	79fb      	ldrb	r3, [r7, #7]

}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_InitTick+0x68>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d022      	beq.n	80017a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_InitTick+0x6c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_InitTick+0x68>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001768:	fbb1 f3f3 	udiv	r3, r1, r3
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fc48 	bl	8003006 <HAL_SYSTICK_Config>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10f      	bne.n	800179c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	d809      	bhi.n	8001796 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001782:	2200      	movs	r2, #0
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	f04f 30ff 	mov.w	r0, #4294967295
 800178a:	f001 fc14 	bl	8002fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_InitTick+0x70>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e007      	b.n	80017a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	e004      	b.n	80017a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e001      	b.n	80017a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20007850 	.word	0x20007850
 80017b4:	20007848 	.word	0x20007848
 80017b8:	2000784c 	.word	0x2000784c

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_IncTick+0x1c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x20>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <HAL_IncTick+0x1c>)
 80017cc:	6013      	str	r3, [r2, #0]
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20007c64 	.word	0x20007c64
 80017dc:	20007850 	.word	0x20007850

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20007c64 	.word	0x20007c64

080017f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3360      	adds	r3, #96	; 0x60
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <LL_ADC_SetOffset+0x44>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	4313      	orrs	r3, r2
 8001890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	03fff000 	.word	0x03fff000

080018a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	; 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3360      	adds	r3, #96	; 0x60
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800190a:	b480      	push	{r7}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3360      	adds	r3, #96	; 0x60
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	431a      	orrs	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3360      	adds	r3, #96	; 0x60
 8001950:	461a      	mov	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	615a      	str	r2, [r3, #20]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3330      	adds	r3, #48	; 0x30
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	4413      	add	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	211f      	movs	r1, #31
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	f003 011f 	and.w	r1, r3, #31
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b087      	sub	sp, #28
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3314      	adds	r3, #20
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0e5b      	lsrs	r3, r3, #25
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	4413      	add	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0d1b      	lsrs	r3, r3, #20
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2107      	movs	r1, #7
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	0d1b      	lsrs	r3, r3, #20
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0318 	and.w	r3, r3, #24
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a94:	40d9      	lsrs	r1, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	400b      	ands	r3, r1
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	0007ffff 	.word	0x0007ffff

08001ab8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6093      	str	r3, [r2, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <LL_ADC_IsEnabled+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_ADC_IsEnabled+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd2:	f043 0204 	orr.w	r2, r3, #4
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d101      	bne.n	8001bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d101      	bne.n	8001c24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e19b      	b.n	8001f86 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fae1 	bl	8001224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff3f 	bl	8001af8 <LL_ADC_IsDeepPowerDownEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff25 	bl	8001ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff5a 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff3e 	bl	8001b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca4:	4b97      	ldr	r3, [pc, #604]	; (8001f04 <HAL_ADC_Init+0x2d0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	4a97      	ldr	r2, [pc, #604]	; (8001f08 <HAL_ADC_Init+0x2d4>)
 8001cac:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb0:	099b      	lsrs	r3, r3, #6
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cb8:	e002      	b.n	8001cc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f9      	bne.n	8001cba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff3c 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff75 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 8001cfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 8134 	bne.w	8001f74 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 8130 	bne.w	8001f74 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d1c:	f043 0202 	orr.w	r2, r3, #2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff35 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d137      	bne.n	8001da4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3c:	d004      	beq.n	8001d48 <HAL_ADC_Init+0x114>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a72      	ldr	r2, [pc, #456]	; (8001f0c <HAL_ADC_Init+0x2d8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d10f      	bne.n	8001d68 <HAL_ADC_Init+0x134>
 8001d48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d4c:	f7ff ff24 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d50:	4604      	mov	r4, r0
 8001d52:	486e      	ldr	r0, [pc, #440]	; (8001f0c <HAL_ADC_Init+0x2d8>)
 8001d54:	f7ff ff20 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e008      	b.n	8001d7a <HAL_ADC_Init+0x146>
 8001d68:	4869      	ldr	r0, [pc, #420]	; (8001f10 <HAL_ADC_Init+0x2dc>)
 8001d6a:	f7ff ff15 	bl	8001b98 <LL_ADC_IsEnabled>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d86:	d004      	beq.n	8001d92 <HAL_ADC_Init+0x15e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5f      	ldr	r2, [pc, #380]	; (8001f0c <HAL_ADC_Init+0x2d8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0x162>
 8001d92:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <HAL_ADC_Init+0x2e0>)
 8001d94:	e000      	b.n	8001d98 <HAL_ADC_Init+0x164>
 8001d96:	4a60      	ldr	r2, [pc, #384]	; (8001f18 <HAL_ADC_Init+0x2e4>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f7ff fd2a 	bl	80017f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7f5b      	ldrb	r3, [r3, #29]
 8001da8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001db4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d106      	bne.n	8001de0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	045b      	lsls	r3, r3, #17
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_ADC_Init+0x2e8>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff feee 	bl	8001c0c <LL_ADC_INJ_IsConversionOngoing>
 8001e30:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d17b      	bne.n	8001f30 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d178      	bne.n	8001f30 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5a:	f023 0302 	bic.w	r3, r3, #2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d017      	beq.n	8001ea0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6911      	ldr	r1, [r2, #16]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001e9e:	e013      	b.n	8001ec8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d126      	bne.n	8001f20 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	e015      	b.n	8001f30 <HAL_ADC_Init+0x2fc>
 8001f04:	20007848 	.word	0x20007848
 8001f08:	053e2d63 	.word	0x053e2d63
 8001f0c:	50000100 	.word	0x50000100
 8001f10:	50000400 	.word	0x50000400
 8001f14:	50000300 	.word	0x50000300
 8001f18:	50000700 	.word	0x50000700
 8001f1c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10c      	bne.n	8001f52 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f023 010f 	bic.w	r1, r3, #15
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f50:	e007      	b.n	8001f62 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 020f 	bic.w	r2, r2, #15
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	f023 0303 	bic.w	r3, r3, #3
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f72:	e007      	b.n	8001f84 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	f043 0210 	orr.w	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop

08001f90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa4:	d004      	beq.n	8001fb0 <HAL_ADC_Start_DMA+0x20>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_ADC_Start_DMA+0x178>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_Start_DMA+0x24>
 8001fb0:	4b56      	ldr	r3, [pc, #344]	; (800210c <HAL_ADC_Start_DMA+0x17c>)
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADC_Start_DMA+0x26>
 8001fb4:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_ADC_Start_DMA+0x180>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd7e 	bl	8001ab8 <LL_ADC_GetMultimode>
 8001fbc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fe0f 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8094 	bne.w	80020f8 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start_DMA+0x4e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e08f      	b.n	80020fe <HAL_ADC_Start_DMA+0x16e>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_ADC_Start_DMA+0x184>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d008      	beq.n	8002002 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d002      	beq.n	8002002 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d173      	bne.n	80020ea <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fcc4 	bl	8002990 <ADC_Enable>
 8002008:	4603      	mov	r3, r0
 800200a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d166      	bne.n	80020e0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a37      	ldr	r2, [pc, #220]	; (8002108 <HAL_ADC_Start_DMA+0x178>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d002      	beq.n	8002036 <HAL_ADC_Start_DMA+0xa6>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	e001      	b.n	800203a <HAL_ADC_Start_DMA+0xaa>
 8002036:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4293      	cmp	r3, r2
 8002040:	d002      	beq.n	8002048 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	f023 0206 	bic.w	r2, r3, #6
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	661a      	str	r2, [r3, #96]	; 0x60
 800206c:	e002      	b.n	8002074 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_ADC_Start_DMA+0x188>)
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_ADC_Start_DMA+0x18c>)
 8002082:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <HAL_ADC_Start_DMA+0x190>)
 800208a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	221c      	movs	r2, #28
 8002092:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0210 	orr.w	r2, r2, #16
 80020aa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3340      	adds	r3, #64	; 0x40
 80020c6:	4619      	mov	r1, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f001 f850 	bl	8003170 <HAL_DMA_Start_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fd70 	bl	8001bbe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020de:	e00d      	b.n	80020fc <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80020e8:	e008      	b.n	80020fc <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80020f6:	e001      	b.n	80020fc <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	50000100 	.word	0x50000100
 800210c:	50000300 	.word	0x50000300
 8002110:	50000700 	.word	0x50000700
 8002114:	50000400 	.word	0x50000400
 8002118:	08002abd 	.word	0x08002abd
 800211c:	08002b95 	.word	0x08002b95
 8002120:	08002bb1 	.word	0x08002bb1

08002124 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0b6      	sub	sp, #216	; 0xd8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_ADC_ConfigChannel+0x24>
 8002156:	2302      	movs	r3, #2
 8002158:	f000 bc04 	b.w	8002964 <HAL_ADC_ConfigChannel+0x82c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fd3c 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 83e8 	bne.w	8002946 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	f7ff fc1d 	bl	80019c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fd2a 	bl	8001be6 <LL_ADC_REG_IsConversionOngoing>
 8002192:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fd36 	bl	8001c0c <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 81d9 	bne.w	8002560 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 81d4 	bne.w	8002560 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021c0:	d10f      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7ff fc24 	bl	8001a1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fbcb 	bl	8001976 <LL_ADC_SetSamplingTimeCommonConfig>
 80021e0:	e00e      	b.n	8002200 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	461a      	mov	r2, r3
 80021f0:	f7ff fc13 	bl	8001a1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fbbb 	bl	8001976 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d022      	beq.n	8002268 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002232:	f7ff fb15 	bl	8001860 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6919      	ldr	r1, [r3, #16]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	461a      	mov	r2, r3
 8002244:	f7ff fb61 	bl	800190a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002254:	2b01      	cmp	r3, #1
 8002256:	d102      	bne.n	800225e <HAL_ADC_ConfigChannel+0x126>
 8002258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225c:	e000      	b.n	8002260 <HAL_ADC_ConfigChannel+0x128>
 800225e:	2300      	movs	r3, #0
 8002260:	461a      	mov	r2, r3
 8002262:	f7ff fb6d 	bl	8001940 <LL_ADC_SetOffsetSaturation>
 8002266:	e17b      	b.n	8002560 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fb1a 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10a      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x15c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fb0f 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	e01e      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x19a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fb04 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80022c2:	2320      	movs	r3, #32
 80022c4:	e004      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80022c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x1b2>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	e018      	b.n	800231c <HAL_ADC_ConfigChannel+0x1e4>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800230e:	2320      	movs	r3, #32
 8002310:	e004      	b.n	800231c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800231c:	429a      	cmp	r2, r3
 800231e:	d106      	bne.n	800232e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fad3 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fab7 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <HAL_ADC_ConfigChannel+0x222>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff faac 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	e01e      	b.n	8002398 <HAL_ADC_ConfigChannel+0x260>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff faa1 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002378:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800237c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e004      	b.n	8002396 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800238c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x278>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	e018      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x2aa>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e004      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2101      	movs	r1, #1
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fa70 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fa54 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x2e8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2102      	movs	r1, #2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fa49 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	f003 021f 	and.w	r2, r3, #31
 800241e:	e01e      	b.n	800245e <HAL_ADC_ConfigChannel+0x326>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2102      	movs	r1, #2
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fa3e 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800243e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e004      	b.n	800245c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x33e>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	e016      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x36c>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002488:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800248a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800248e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800249a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa0f 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2103      	movs	r1, #3
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f9f3 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x3aa>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2103      	movs	r1, #3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f9e8 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e017      	b.n	8002512 <HAL_ADC_ConfigChannel+0x3da>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2103      	movs	r1, #3
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f9dd 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e003      	b.n	8002510 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_ADC_ConfigChannel+0x3f2>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	0e9b      	lsrs	r3, r3, #26
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	e011      	b.n	800254e <HAL_ADC_ConfigChannel+0x416>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800253c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800254e:	429a      	cmp	r2, r3
 8002550:	d106      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2200      	movs	r2, #0
 8002558:	2103      	movs	r1, #3
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f9ba 	bl	80018d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb17 	bl	8001b98 <LL_ADC_IsEnabled>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 813d 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	461a      	mov	r2, r3
 8002580:	f7ff fa76 	bl	8001a70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4aa2      	ldr	r2, [pc, #648]	; (8002814 <HAL_ADC_ConfigChannel+0x6dc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	f040 812e 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x480>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	3301      	adds	r3, #1
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2b09      	cmp	r3, #9
 80025ae:	bf94      	ite	ls
 80025b0:	2301      	movls	r3, #1
 80025b2:	2300      	movhi	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e019      	b.n	80025ec <HAL_ADC_ConfigChannel+0x4b4>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	bf94      	ite	ls
 80025e6:	2301      	movls	r3, #1
 80025e8:	2300      	movhi	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d079      	beq.n	80026e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_ADC_ConfigChannel+0x4d4>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	069b      	lsls	r3, r3, #26
 8002606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260a:	e015      	b.n	8002638 <HAL_ADC_ConfigChannel+0x500>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800261a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800261e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002624:	2320      	movs	r3, #32
 8002626:	e003      	b.n	8002630 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3301      	adds	r3, #1
 8002632:	069b      	lsls	r3, r3, #26
 8002634:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x520>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	3301      	adds	r3, #1
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	e017      	b.n	8002688 <HAL_ADC_ConfigChannel+0x550>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800266a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e003      	b.n	800267c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	ea42 0103 	orr.w	r1, r2, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x576>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	051b      	lsls	r3, r3, #20
 80026ac:	e018      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x5a8>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e003      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80026ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e0:	430b      	orrs	r3, r1
 80026e2:	e07e      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x5c8>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	3301      	adds	r3, #1
 80026f8:	069b      	lsls	r3, r3, #26
 80026fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fe:	e015      	b.n	800272c <HAL_ADC_ConfigChannel+0x5f4>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002718:	2320      	movs	r3, #32
 800271a:	e003      	b.n	8002724 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	069b      	lsls	r3, r3, #26
 8002728:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_ADC_ConfigChannel+0x614>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0e9b      	lsrs	r3, r3, #26
 800273e:	3301      	adds	r3, #1
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	e017      	b.n	800277c <HAL_ADC_ConfigChannel+0x644>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	61fb      	str	r3, [r7, #28]
  return result;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002764:	2320      	movs	r3, #32
 8002766:	e003      	b.n	8002770 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	ea42 0103 	orr.w	r1, r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10d      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x670>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	3301      	adds	r3, #1
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	3b1e      	subs	r3, #30
 80027a0:	051b      	lsls	r3, r3, #20
 80027a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a6:	e01b      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x6a8>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	613b      	str	r3, [r7, #16]
  return result;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	3b1e      	subs	r3, #30
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7ff f917 	bl	8001a1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_ADC_ConfigChannel+0x6e0>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80af 	beq.w	8002958 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002802:	d004      	beq.n	800280e <HAL_ADC_ConfigChannel+0x6d6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_ADC_ConfigChannel+0x6e4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10a      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x6ec>
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <HAL_ADC_ConfigChannel+0x6e8>)
 8002810:	e009      	b.n	8002826 <HAL_ADC_ConfigChannel+0x6ee>
 8002812:	bf00      	nop
 8002814:	407f0000 	.word	0x407f0000
 8002818:	80080000 	.word	0x80080000
 800281c:	50000100 	.word	0x50000100
 8002820:	50000300 	.word	0x50000300
 8002824:	4b51      	ldr	r3, [pc, #324]	; (800296c <HAL_ADC_ConfigChannel+0x834>)
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f80c 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 800282c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a4e      	ldr	r2, [pc, #312]	; (8002970 <HAL_ADC_ConfigChannel+0x838>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x70c>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a4d      	ldr	r2, [pc, #308]	; (8002974 <HAL_ADC_ConfigChannel+0x83c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d134      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d12e      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002858:	d17e      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002862:	d004      	beq.n	800286e <HAL_ADC_ConfigChannel+0x736>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a43      	ldr	r2, [pc, #268]	; (8002978 <HAL_ADC_ConfigChannel+0x840>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x73a>
 800286e:	4a43      	ldr	r2, [pc, #268]	; (800297c <HAL_ADC_ConfigChannel+0x844>)
 8002870:	e000      	b.n	8002874 <HAL_ADC_ConfigChannel+0x73c>
 8002872:	4a3e      	ldr	r2, [pc, #248]	; (800296c <HAL_ADC_ConfigChannel+0x834>)
 8002874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f7fe ffcd 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002884:	4b3e      	ldr	r3, [pc, #248]	; (8002980 <HAL_ADC_ConfigChannel+0x848>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	4a3e      	ldr	r2, [pc, #248]	; (8002984 <HAL_ADC_ConfigChannel+0x84c>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800289e:	e002      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ac:	e054      	b.n	8002958 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a35      	ldr	r2, [pc, #212]	; (8002988 <HAL_ADC_ConfigChannel+0x850>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d120      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d11a      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028cc:	d144      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x7aa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_ADC_ConfigChannel+0x840>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x7ae>
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <HAL_ADC_ConfigChannel+0x844>)
 80028e4:	e000      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x7b0>
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <HAL_ADC_ConfigChannel+0x834>)
 80028e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f7fe ff93 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f8:	e02e      	b.n	8002958 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a23      	ldr	r2, [pc, #140]	; (800298c <HAL_ADC_ConfigChannel+0x854>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d129      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d123      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_ADC_ConfigChannel+0x840>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01e      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002922:	d004      	beq.n	800292e <HAL_ADC_ConfigChannel+0x7f6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a13      	ldr	r2, [pc, #76]	; (8002978 <HAL_ADC_ConfigChannel+0x840>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x7fa>
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <HAL_ADC_ConfigChannel+0x844>)
 8002930:	e000      	b.n	8002934 <HAL_ADC_ConfigChannel+0x7fc>
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_ADC_ConfigChannel+0x834>)
 8002934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f7fe ff6d 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
 8002944:	e008      	b.n	8002958 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002960:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002964:	4618      	mov	r0, r3
 8002966:	37d8      	adds	r7, #216	; 0xd8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	50000700 	.word	0x50000700
 8002970:	c3210000 	.word	0xc3210000
 8002974:	90c00010 	.word	0x90c00010
 8002978:	50000100 	.word	0x50000100
 800297c:	50000300 	.word	0x50000300
 8002980:	20007848 	.word	0x20007848
 8002984:	053e2d63 	.word	0x053e2d63
 8002988:	c7520000 	.word	0xc7520000
 800298c:	cb840000 	.word	0xcb840000

08002990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f8f9 	bl	8001b98 <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d176      	bne.n	8002a9a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <ADC_Enable+0x114>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e062      	b.n	8002a9c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f8c8 	bl	8001b70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e8:	d004      	beq.n	80029f4 <ADC_Enable+0x64>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <ADC_Enable+0x118>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <ADC_Enable+0x68>
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <ADC_Enable+0x11c>)
 80029f6:	e000      	b.n	80029fa <ADC_Enable+0x6a>
 80029f8:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <ADC_Enable+0x120>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe ff22 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 8002a00:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <ADC_Enable+0x124>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	099b      	lsrs	r3, r3, #6
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <ADC_Enable+0x128>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a24:	e002      	b.n	8002a2c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a32:	f7fe fed5 	bl	80017e0 <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a38:	e028      	b.n	8002a8c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f8aa 	bl	8001b98 <LL_ADC_IsEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d104      	bne.n	8002a54 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f88e 	bl	8001b70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a54:	f7fe fec4 	bl	80017e0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d914      	bls.n	8002a8c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d00d      	beq.n	8002a8c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d1cf      	bne.n	8002a3a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	8000003f 	.word	0x8000003f
 8002aa8:	50000100 	.word	0x50000100
 8002aac:	50000300 	.word	0x50000300
 8002ab0:	50000700 	.word	0x50000700
 8002ab4:	20007848 	.word	0x20007848
 8002ab8:	053e2d63 	.word	0x053e2d63

08002abc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d14b      	bne.n	8002b6e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d021      	beq.n	8002b34 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe ff51 	bl	800199c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d032      	beq.n	8002b66 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d12b      	bne.n	8002b66 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11f      	bne.n	8002b66 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b32:	e018      	b.n	8002b66 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d111      	bne.n	8002b66 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7fe fa9e 	bl	80010a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b6c:	e00e      	b.n	8002b8c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff fad2 	bl	8002124 <HAL_ADC_ErrorCallback>
}
 8002b80:	e004      	b.n	8002b8c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7fe f9f2 	bl	8000f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bce:	f043 0204 	orr.w	r2, r3, #4
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7ff faa4 	bl	8002124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <LL_ADC_IsEnabled>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_IsEnabled+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_IsEnabled+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_REG_IsConversionOngoing>:
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d101      	bne.n	8002c22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b0a1      	sub	sp, #132	; 0x84
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0cb      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c56:	2300      	movs	r3, #0
 8002c58:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c66:	d102      	bne.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	e001      	b.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0aa      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ffb9 	bl	8002c0a <LL_ADC_REG_IsConversionOngoing>
 8002c98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ffb3 	bl	8002c0a <LL_ADC_REG_IsConversionOngoing>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f040 808c 	bne.w	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 8088 	bne.w	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbc:	d004      	beq.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4b      	ldr	r2, [pc, #300]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002cca:	e000      	b.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8002cce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d041      	beq.n	8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cea:	035b      	lsls	r3, r3, #13
 8002cec:	430b      	orrs	r3, r1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfc:	d004      	beq.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10f      	bne.n	8002d28 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8002d08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d0c:	f7ff ff6a 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d10:	4604      	mov	r4, r0
 8002d12:	4837      	ldr	r0, [pc, #220]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002d14:	f7ff ff66 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4323      	orrs	r3, r4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e008      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8002d28:	4834      	ldr	r0, [pc, #208]	; (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002d2a:	f7ff ff5b 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d04c      	beq.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d46:	f023 030f 	bic.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	6811      	ldr	r1, [r2, #0]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	6892      	ldr	r2, [r2, #8]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	431a      	orrs	r2, r3
 8002d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d58:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5a:	e03d      	b.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d70:	d004      	beq.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d10f      	bne.n	8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002d7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d80:	f7ff ff30 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d84:	4604      	mov	r4, r0
 8002d86:	481a      	ldr	r0, [pc, #104]	; (8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002d88:	f7ff ff2c 	bl	8002be4 <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4323      	orrs	r3, r4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e008      	b.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8002d9c:	4817      	ldr	r0, [pc, #92]	; (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002d9e:	f7ff ff21 	bl	8002be4 <LL_ADC_IsEnabled>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dba:	f023 030f 	bic.w	r3, r3, #15
 8002dbe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002dc0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc2:	e009      	b.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002dd6:	e000      	b.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002de2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3784      	adds	r7, #132	; 0x84
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
 8002dee:	bf00      	nop
 8002df0:	50000100 	.word	0x50000100
 8002df4:	50000300 	.word	0x50000300
 8002df8:	50000700 	.word	0x50000700
 8002dfc:	50000400 	.word	0x50000400

08002e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <__NVIC_GetPriorityGrouping+0x18>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 0307 	and.w	r3, r3, #7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db0b      	blt.n	8002e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4907      	ldr	r1, [pc, #28]	; (8002e9c <__NVIC_EnableIRQ+0x38>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2001      	movs	r0, #1
 8002e86:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e100 	.word	0xe000e100

08002ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db0a      	blt.n	8002eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	490c      	ldr	r1, [pc, #48]	; (8002eec <__NVIC_SetPriority+0x4c>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec8:	e00a      	b.n	8002ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <__NVIC_SetPriority+0x50>)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3b04      	subs	r3, #4
 8002ed8:	0112      	lsls	r2, r2, #4
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	440b      	add	r3, r1
 8002ede:	761a      	strb	r2, [r3, #24]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f1c3 0307 	rsb	r3, r3, #7
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	bf28      	it	cs
 8002f12:	2304      	movcs	r3, #4
 8002f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d902      	bls.n	8002f24 <NVIC_EncodePriority+0x30>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3b03      	subs	r3, #3
 8002f22:	e000      	b.n	8002f26 <NVIC_EncodePriority+0x32>
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43d9      	mvns	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	4313      	orrs	r3, r2
         );
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f6c:	d301      	bcc.n	8002f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00f      	b.n	8002f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <SysTick_Config+0x40>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f7ff ff8e 	bl	8002ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <SysTick_Config+0x40>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <SysTick_Config+0x40>)
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	e000e010 	.word	0xe000e010

08002fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff29 	bl	8002e00 <__NVIC_SetPriorityGrouping>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc4:	f7ff ff40 	bl	8002e48 <__NVIC_GetPriorityGrouping>
 8002fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7ff ff90 	bl	8002ef4 <NVIC_EncodePriority>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff5f 	bl	8002ea0 <__NVIC_SetPriority>
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff33 	bl	8002e64 <__NVIC_EnableIRQ>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffa4 	bl	8002f5c <SysTick_Config>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e08d      	b.n	800314e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_DMA_Init+0x138>)
 800303a:	429a      	cmp	r2, r3
 800303c:	d80f      	bhi.n	800305e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	4b45      	ldr	r3, [pc, #276]	; (800315c <HAL_DMA_Init+0x13c>)
 8003046:	4413      	add	r3, r2
 8003048:	4a45      	ldr	r2, [pc, #276]	; (8003160 <HAL_DMA_Init+0x140>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	009a      	lsls	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a42      	ldr	r2, [pc, #264]	; (8003164 <HAL_DMA_Init+0x144>)
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
 800305c:	e00e      	b.n	800307c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_DMA_Init+0x148>)
 8003066:	4413      	add	r3, r2
 8003068:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <HAL_DMA_Init+0x140>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	009a      	lsls	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a3c      	ldr	r2, [pc, #240]	; (800316c <HAL_DMA_Init+0x14c>)
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f9b6 	bl	8003440 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030dc:	d102      	bne.n	80030e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_DMA_Init+0x104>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d80c      	bhi.n	8003124 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9d6 	bl	80034bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e008      	b.n	8003136 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40020407 	.word	0x40020407
 800315c:	bffdfff8 	.word	0xbffdfff8
 8003160:	cccccccd 	.word	0xcccccccd
 8003164:	40020000 	.word	0x40020000
 8003168:	bffdfbf8 	.word	0xbffdfbf8
 800316c:	40020400 	.word	0x40020400

08003170 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_DMA_Start_IT+0x20>
 800318c:	2302      	movs	r3, #2
 800318e:	e066      	b.n	800325e <HAL_DMA_Start_IT+0xee>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d155      	bne.n	8003250 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f8fb 	bl	80033c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 020e 	orr.w	r2, r2, #14
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e00f      	b.n	8003208 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0204 	bic.w	r2, r2, #4
 80031f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 020a 	orr.w	r2, r2, #10
 8003206:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e005      	b.n	800325c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003258:	2302      	movs	r3, #2
 800325a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800325c:	7dfb      	ldrb	r3, [r7, #23]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2204      	movs	r2, #4
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d026      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x7a>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d021      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0204 	bic.w	r2, r2, #4
 80032b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f003 021f 	and.w	r2, r3, #31
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2104      	movs	r1, #4
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d071      	beq.n	80033ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032de:	e06c      	b.n	80033ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2202      	movs	r2, #2
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d02e      	beq.n	8003352 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d029      	beq.n	8003352 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020a 	bic.w	r2, r2, #10
 800331a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2102      	movs	r1, #2
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d038      	beq.n	80033ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003350:	e033      	b.n	80033ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2208      	movs	r2, #8
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d02a      	beq.n	80033bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d025      	beq.n	80033bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020e 	bic.w	r2, r2, #14
 800337e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
}
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f003 021f 	and.w	r2, r3, #31
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b10      	cmp	r3, #16
 8003410:	d108      	bne.n	8003424 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003422:	e007      	b.n	8003434 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	60da      	str	r2, [r3, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003450:	429a      	cmp	r2, r3
 8003452:	d802      	bhi.n	800345a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003454:	4b15      	ldr	r3, [pc, #84]	; (80034ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e001      	b.n	800345e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800345c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	3b08      	subs	r3, #8
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800346c:	fba2 2303 	umull	r2, r3, r2, r3
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	009a      	lsls	r2, r3, #2
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	461a      	mov	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800348a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2201      	movs	r2, #1
 8003494:	409a      	lsls	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	651a      	str	r2, [r3, #80]	; 0x50
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40020407 	.word	0x40020407
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020820 	.word	0x40020820
 80034b4:	cccccccd 	.word	0xcccccccd
 80034b8:	40020880 	.word	0x40020880

080034bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	461a      	mov	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a08      	ldr	r2, [pc, #32]	; (8003500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034de:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	1000823f 	.word	0x1000823f
 8003500:	40020940 	.word	0x40020940

08003504 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e033      	b.n	800357e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe f808 	bl	8001540 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f854 	bl	80035e4 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f822 	bl	8003586 <FMAC_Reset>
 8003542:	4603      	mov	r3, r0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d10c      	bne.n	8003562 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	22a0      	movs	r2, #160	; 0xa0
 8003558:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e008      	b.n	8003574 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358e:	f7fe f927 	bl	80017e0 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035a2:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80035a4:	e00f      	b.n	80035c6 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80035a6:	f7fe f91b 	bl	80017e0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035b4:	d907      	bls.n	80035c6 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00a      	b.n	80035dc <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e8      	bne.n	80035a6 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f807 	bl	8003600 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f81b 	bl	800362e <FMAC_ResetOutputStateAndDataPointers>
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800366a:	e15a      	b.n	8003922 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 814c 	beq.w	800391c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d005      	beq.n	800369c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003698:	2b02      	cmp	r3, #2
 800369a:	d130      	bne.n	80036fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	2203      	movs	r2, #3
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036d2:	2201      	movs	r2, #1
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f003 0201 	and.w	r2, r3, #1
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d017      	beq.n	800373a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d123      	bne.n	800378e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	08da      	lsrs	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	220f      	movs	r2, #15
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	6939      	ldr	r1, [r7, #16]
 800378a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	2203      	movs	r2, #3
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0203 	and.w	r2, r3, #3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80a6 	beq.w	800391c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d0:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <HAL_GPIO_Init+0x2e4>)
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	4a5a      	ldr	r2, [pc, #360]	; (8003940 <HAL_GPIO_Init+0x2e4>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6613      	str	r3, [r2, #96]	; 0x60
 80037dc:	4b58      	ldr	r3, [pc, #352]	; (8003940 <HAL_GPIO_Init+0x2e4>)
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e8:	4a56      	ldr	r2, [pc, #344]	; (8003944 <HAL_GPIO_Init+0x2e8>)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003812:	d01f      	beq.n	8003854 <HAL_GPIO_Init+0x1f8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a4c      	ldr	r2, [pc, #304]	; (8003948 <HAL_GPIO_Init+0x2ec>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d019      	beq.n	8003850 <HAL_GPIO_Init+0x1f4>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_GPIO_Init+0x2f0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_GPIO_Init+0x1f0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_GPIO_Init+0x2f4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00d      	beq.n	8003848 <HAL_GPIO_Init+0x1ec>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a49      	ldr	r2, [pc, #292]	; (8003954 <HAL_GPIO_Init+0x2f8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <HAL_GPIO_Init+0x1e8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a48      	ldr	r2, [pc, #288]	; (8003958 <HAL_GPIO_Init+0x2fc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_GPIO_Init+0x1e4>
 800383c:	2305      	movs	r3, #5
 800383e:	e00a      	b.n	8003856 <HAL_GPIO_Init+0x1fa>
 8003840:	2306      	movs	r3, #6
 8003842:	e008      	b.n	8003856 <HAL_GPIO_Init+0x1fa>
 8003844:	2304      	movs	r3, #4
 8003846:	e006      	b.n	8003856 <HAL_GPIO_Init+0x1fa>
 8003848:	2303      	movs	r3, #3
 800384a:	e004      	b.n	8003856 <HAL_GPIO_Init+0x1fa>
 800384c:	2302      	movs	r3, #2
 800384e:	e002      	b.n	8003856 <HAL_GPIO_Init+0x1fa>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_GPIO_Init+0x1fa>
 8003854:	2300      	movs	r3, #0
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	f002 0203 	and.w	r2, r2, #3
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	4093      	lsls	r3, r2
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003866:	4937      	ldr	r1, [pc, #220]	; (8003944 <HAL_GPIO_Init+0x2e8>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_GPIO_Init+0x300>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003898:	4a30      	ldr	r2, [pc, #192]	; (800395c <HAL_GPIO_Init+0x300>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <HAL_GPIO_Init+0x300>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038c2:	4a26      	ldr	r2, [pc, #152]	; (800395c <HAL_GPIO_Init+0x300>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_GPIO_Init+0x300>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ec:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_GPIO_Init+0x300>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <HAL_GPIO_Init+0x300>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <HAL_GPIO_Init+0x300>)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f ae9d 	bne.w	800366c <HAL_GPIO_Init+0x10>
  }
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000
 8003948:	48000400 	.word	0x48000400
 800394c:	48000800 	.word	0x48000800
 8003950:	48000c00 	.word	0x48000c00
 8003954:	48001000 	.word	0x48001000
 8003958:	48001400 	.word	0x48001400
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d141      	bne.n	80039f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800396e:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397a:	d131      	bne.n	80039e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800397c:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003982:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800398c:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003994:	4a41      	ldr	r2, [pc, #260]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800399a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800399c:	4b40      	ldr	r3, [pc, #256]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2232      	movs	r2, #50	; 0x32
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	4a3f      	ldr	r2, [pc, #252]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	0c9b      	lsrs	r3, r3, #18
 80039ae:	3301      	adds	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039b2:	e002      	b.n	80039ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d102      	bne.n	80039ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f2      	bne.n	80039b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ce:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039da:	d158      	bne.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e057      	b.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e0:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e6:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039f0:	e04d      	b.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f8:	d141      	bne.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d131      	bne.n	8003a6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a08:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0e:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a20:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2232      	movs	r2, #50	; 0x32
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	0c9b      	lsrs	r3, r3, #18
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a3e:	e002      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d102      	bne.n	8003a5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f2      	bne.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a66:	d112      	bne.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e011      	b.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a7c:	e007      	b.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	20007848 	.word	0x20007848
 8003aa4:	431bde83 	.word	0x431bde83

08003aa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab6:	6093      	str	r3, [r2, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40007000 	.word	0x40007000

08003ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e2fe      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d075      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae6:	4b97      	ldr	r3, [pc, #604]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af0:	4b94      	ldr	r3, [pc, #592]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	d102      	bne.n	8003b06 <HAL_RCC_OscConfig+0x3e>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_OscConfig+0x44>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d10b      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	4b8d      	ldr	r3, [pc, #564]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d05b      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x108>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d157      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e2d9      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCC_OscConfig+0x74>
 8003b2e:	4b85      	ldr	r3, [pc, #532]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a84      	ldr	r2, [pc, #528]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e01d      	b.n	8003b78 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x98>
 8003b46:	4b7f      	ldr	r3, [pc, #508]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a7e      	ldr	r2, [pc, #504]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b7c      	ldr	r3, [pc, #496]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7b      	ldr	r2, [pc, #492]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0xb0>
 8003b60:	4b78      	ldr	r3, [pc, #480]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a77      	ldr	r2, [pc, #476]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b75      	ldr	r3, [pc, #468]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a74      	ldr	r2, [pc, #464]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd fe2e 	bl	80017e0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd fe2a 	bl	80017e0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e29e      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0xc0>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fe1a 	bl	80017e0 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fe16 	bl	80017e0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e28a      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	4b60      	ldr	r3, [pc, #384]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xe8>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d075      	beq.n	8003cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bde:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be8:	4b56      	ldr	r3, [pc, #344]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCC_OscConfig+0x136>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d002      	beq.n	8003c04 <HAL_RCC_OscConfig+0x13c>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d11f      	bne.n	8003c44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c04:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x154>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e25d      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4946      	ldr	r1, [pc, #280]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c30:	4b45      	ldr	r3, [pc, #276]	; (8003d48 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fd fd87 	bl	8001748 <HAL_InitTick>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d043      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e249      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d023      	beq.n	8003c94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4c:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3c      	ldr	r2, [pc, #240]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fd fdc2 	bl	80017e0 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c60:	f7fd fdbe 	bl	80017e0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e232      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c72:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	492d      	ldr	r1, [pc, #180]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
 8003c92:	e01a      	b.n	8003cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fd9e 	bl	80017e0 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fd fd9a 	bl	80017e0 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e20e      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1e0>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d041      	beq.n	8003d5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce4:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fd fd77 	bl	80017e0 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fd fd73 	bl	80017e0 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1e7      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ef      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x22e>
 8003d16:	e020      	b.n	8003d5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fd fd5a 	bl	80017e0 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2e:	e00d      	b.n	8003d4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fd fd56 	bl	80017e0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d906      	bls.n	8003d4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1ca      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	2000784c 	.word	0x2000784c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d4c:	4b8c      	ldr	r3, [pc, #560]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ea      	bne.n	8003d30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80a6 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d6c:	4b84      	ldr	r3, [pc, #528]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_OscConfig+0x2b4>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x2b6>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	4b7f      	ldr	r3, [pc, #508]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4a7e      	ldr	r2, [pc, #504]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8e:	4b7c      	ldr	r3, [pc, #496]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9e:	4b79      	ldr	r3, [pc, #484]	; (8003f84 <HAL_RCC_OscConfig+0x4bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d118      	bne.n	8003ddc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003daa:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x4bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a75      	ldr	r2, [pc, #468]	; (8003f84 <HAL_RCC_OscConfig+0x4bc>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db6:	f7fd fd13 	bl	80017e0 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbe:	f7fd fd0f 	bl	80017e0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e183      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd0:	4b6c      	ldr	r3, [pc, #432]	; (8003f84 <HAL_RCC_OscConfig+0x4bc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d108      	bne.n	8003df6 <HAL_RCC_OscConfig+0x32e>
 8003de4:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a65      	ldr	r2, [pc, #404]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df4:	e024      	b.n	8003e40 <HAL_RCC_OscConfig+0x378>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d110      	bne.n	8003e20 <HAL_RCC_OscConfig+0x358>
 8003dfe:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	4a5e      	ldr	r2, [pc, #376]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0e:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	4a5a      	ldr	r2, [pc, #360]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e1e:	e00f      	b.n	8003e40 <HAL_RCC_OscConfig+0x378>
 8003e20:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a56      	ldr	r2, [pc, #344]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d016      	beq.n	8003e76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fd fcca 	bl	80017e0 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fd fcc6 	bl	80017e0 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e138      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e66:	4b46      	ldr	r3, [pc, #280]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ed      	beq.n	8003e50 <HAL_RCC_OscConfig+0x388>
 8003e74:	e015      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fd fcb3 	bl	80017e0 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fd fcaf 	bl	80017e0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e121      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e94:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ed      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea2:	7ffb      	ldrb	r3, [r7, #31]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03c      	beq.n	8003f3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01c      	beq.n	8003f02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ece:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7fd fc82 	bl	80017e0 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee0:	f7fd fc7e 	bl	80017e0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0f2      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x418>
 8003f00:	e01b      	b.n	8003f3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f02:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fd fc65 	bl	80017e0 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f1a:	f7fd fc61 	bl	80017e0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0d5      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ef      	bne.n	8003f1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80c9 	beq.w	80040d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	f000 8083 	beq.w	8004058 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d15e      	bne.n	8004018 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <HAL_RCC_OscConfig+0x4b8>)
 8003f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f66:	f7fd fc3b 	bl	80017e0 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	e00c      	b.n	8003f88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fd fc37 	bl	80017e0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d905      	bls.n	8003f88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e0ab      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f88:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ec      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f94:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	4b52      	ldr	r3, [pc, #328]	; (80040e4 <HAL_RCC_OscConfig+0x61c>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6a11      	ldr	r1, [r2, #32]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	0112      	lsls	r2, r2, #4
 8003fa8:	4311      	orrs	r1, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003fae:	0212      	lsls	r2, r2, #8
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fb6:	0852      	lsrs	r2, r2, #1
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	0552      	lsls	r2, r2, #21
 8003fbc:	4311      	orrs	r1, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fc2:	0852      	lsrs	r2, r2, #1
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	0652      	lsls	r2, r2, #25
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fce:	06d2      	lsls	r2, r2, #27
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	4943      	ldr	r1, [pc, #268]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fe4:	4b3e      	ldr	r3, [pc, #248]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8003fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fbf6 	bl	80017e0 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd fbf2 	bl	80017e0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e066      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x530>
 8004016:	e05e      	b.n	80040d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 800401e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd fbdc 	bl	80017e0 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd fbd8 	bl	80017e0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e04c      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403e:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800404a:	4b25      	ldr	r3, [pc, #148]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	4924      	ldr	r1, [pc, #144]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <HAL_RCC_OscConfig+0x620>)
 8004052:	4013      	ands	r3, r2
 8004054:	60cb      	str	r3, [r1, #12]
 8004056:	e03e      	b.n	80040d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e039      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004064:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_OscConfig+0x618>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0203 	and.w	r2, r3, #3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	429a      	cmp	r2, r3
 8004076:	d12c      	bne.n	80040d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	3b01      	subs	r3, #1
 8004084:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d123      	bne.n	80040d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d11b      	bne.n	80040d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d113      	bne.n	80040d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d109      	bne.n	80040d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	019f800c 	.word	0x019f800c
 80040e8:	feeefffc 	.word	0xfeeefffc

080040ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e11e      	b.n	8004342 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004104:	4b91      	ldr	r3, [pc, #580]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d910      	bls.n	8004134 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b8e      	ldr	r3, [pc, #568]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 020f 	bic.w	r2, r3, #15
 800411a:	498c      	ldr	r1, [pc, #560]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b8a      	ldr	r3, [pc, #552]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e106      	b.n	8004342 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d073      	beq.n	8004228 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d129      	bne.n	800419c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004148:	4b81      	ldr	r3, [pc, #516]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0f4      	b.n	8004342 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004158:	f000 f964 	bl	8004424 <RCC_GetSysClockFreqFromPLLSource>
 800415c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4a7c      	ldr	r2, [pc, #496]	; (8004354 <HAL_RCC_ClockConfig+0x268>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d93f      	bls.n	80041e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004166:	4b7a      	ldr	r3, [pc, #488]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800417a:	2b00      	cmp	r3, #0
 800417c:	d033      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004182:	2b00      	cmp	r3, #0
 8004184:	d12f      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004186:	4b72      	ldr	r3, [pc, #456]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800418e:	4a70      	ldr	r2, [pc, #448]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e024      	b.n	80041e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a4:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0c6      	b.n	8004342 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b4:	4b66      	ldr	r3, [pc, #408]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0be      	b.n	8004342 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041c4:	f000 f8ce 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4a61      	ldr	r2, [pc, #388]	; (8004354 <HAL_RCC_ClockConfig+0x268>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d909      	bls.n	80041e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041d2:	4b5f      	ldr	r3, [pc, #380]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041da:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b5a      	ldr	r3, [pc, #360]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4957      	ldr	r1, [pc, #348]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fd faf2 	bl	80017e0 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7fd faee 	bl	80017e0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e095      	b.n	8004342 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b4e      	ldr	r3, [pc, #312]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004240:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a42      	ldr	r2, [pc, #264]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800424a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004258:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004260:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004266:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4936      	ldr	r1, [pc, #216]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004276:	4313      	orrs	r3, r2
 8004278:	608b      	str	r3, [r1, #8]
 800427a:	e008      	b.n	800428e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d105      	bne.n	800428e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004282:	4b33      	ldr	r3, [pc, #204]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	4a32      	ldr	r2, [pc, #200]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800428e:	4b2f      	ldr	r3, [pc, #188]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d21d      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429c:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 020f 	bic.w	r2, r3, #15
 80042a4:	4929      	ldr	r1, [pc, #164]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042ac:	f7fd fa98 	bl	80017e0 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fd fa94 	bl	80017e0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e03b      	b.n	8004342 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_ClockConfig+0x260>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1ed      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4917      	ldr	r1, [pc, #92]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	490f      	ldr	r1, [pc, #60]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004316:	f000 f825 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 800431a:	4602      	mov	r2, r0
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <HAL_RCC_ClockConfig+0x264>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	490c      	ldr	r1, [pc, #48]	; (8004358 <HAL_RCC_ClockConfig+0x26c>)
 8004328:	5ccb      	ldrb	r3, [r1, r3]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <HAL_RCC_ClockConfig+0x270>)
 8004334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCC_ClockConfig+0x274>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd fa04 	bl	8001748 <HAL_InitTick>
 8004340:	4603      	mov	r3, r0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40022000 	.word	0x40022000
 8004350:	40021000 	.word	0x40021000
 8004354:	04c4b400 	.word	0x04c4b400
 8004358:	08005364 	.word	0x08005364
 800435c:	20007848 	.word	0x20007848
 8004360:	2000784c 	.word	0x2000784c

08004364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800436a:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d102      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e047      	b.n	800440c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d102      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_RCC_GetSysClockFreq+0xbc>)
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e03e      	b.n	800440c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d136      	bne.n	8004408 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	3301      	adds	r3, #1
 80043b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c2:	68d2      	ldr	r2, [r2, #12]
 80043c4:	0a12      	lsrs	r2, r2, #8
 80043c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	617b      	str	r3, [r7, #20]
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043dc:	68d2      	ldr	r2, [r2, #12]
 80043de:	0a12      	lsrs	r2, r2, #8
 80043e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]
      break;
 80043ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	0e5b      	lsrs	r3, r3, #25
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	e001      	b.n	800440c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800440c:	693b      	ldr	r3, [r7, #16]
}
 800440e:	4618      	mov	r0, r3
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
 8004420:	00f42400 	.word	0x00f42400

08004424 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800442a:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d10c      	bne.n	8004462 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004452:	68d2      	ldr	r2, [r2, #12]
 8004454:	0a12      	lsrs	r2, r2, #8
 8004456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	617b      	str	r3, [r7, #20]
    break;
 8004460:	e00c      	b.n	800447c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004462:	4a11      	ldr	r2, [pc, #68]	; (80044a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	4a0e      	ldr	r2, [pc, #56]	; (80044a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800446c:	68d2      	ldr	r2, [r2, #12]
 800446e:	0a12      	lsrs	r2, r2, #8
 8004470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
    break;
 800447a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	0e5b      	lsrs	r3, r3, #25
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	3301      	adds	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004496:	687b      	ldr	r3, [r7, #4]
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40021000 	.word	0x40021000
 80044a8:	00f42400 	.word	0x00f42400

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044b4:	2300      	movs	r3, #0
 80044b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044b8:	2300      	movs	r3, #0
 80044ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8098 	beq.w	80045fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	4a3f      	ldr	r2, [pc, #252]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6593      	str	r3, [r2, #88]	; 0x58
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f2:	2301      	movs	r3, #1
 80044f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f6:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a39      	ldr	r2, [pc, #228]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004502:	f7fd f96d 	bl	80017e0 <HAL_GetTick>
 8004506:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004508:	e009      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fd f969 	bl	80017e0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d902      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	74fb      	strb	r3, [r7, #19]
        break;
 800451c:	e005      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451e:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ef      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d159      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01e      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	429a      	cmp	r2, r3
 800454a:	d019      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004568:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fd f929 	bl	80017e0 <HAL_GetTick>
 800458e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004590:	e00b      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fd f925 	bl	80017e0 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d902      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	74fb      	strb	r3, [r7, #19]
            break;
 80045a8:	e006      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ec      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	4903      	ldr	r1, [pc, #12]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045d4:	e008      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	74bb      	strb	r3, [r7, #18]
 80045da:	e005      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e8:	7c7b      	ldrb	r3, [r7, #17]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ee:	4ba7      	ldr	r3, [pc, #668]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	4aa6      	ldr	r2, [pc, #664]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004606:	4ba1      	ldr	r3, [pc, #644]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f023 0203 	bic.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	499d      	ldr	r1, [pc, #628]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004628:	4b98      	ldr	r3, [pc, #608]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 020c 	bic.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4995      	ldr	r1, [pc, #596]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800464a:	4b90      	ldr	r3, [pc, #576]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	498c      	ldr	r1, [pc, #560]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800466c:	4b87      	ldr	r3, [pc, #540]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	4984      	ldr	r1, [pc, #528]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800468e:	4b7f      	ldr	r3, [pc, #508]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	497b      	ldr	r1, [pc, #492]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046b0:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	4973      	ldr	r1, [pc, #460]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d2:	4b6e      	ldr	r3, [pc, #440]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	496a      	ldr	r1, [pc, #424]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f4:	4b65      	ldr	r3, [pc, #404]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4962      	ldr	r1, [pc, #392]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004716:	4b5d      	ldr	r3, [pc, #372]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	4959      	ldr	r1, [pc, #356]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004738:	4b54      	ldr	r3, [pc, #336]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	4951      	ldr	r1, [pc, #324]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004756:	2b00      	cmp	r3, #0
 8004758:	d015      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800475a:	4b4c      	ldr	r3, [pc, #304]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4948      	ldr	r1, [pc, #288]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004778:	d105      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477a:	4b44      	ldr	r3, [pc, #272]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4a43      	ldr	r2, [pc, #268]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004784:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	2b00      	cmp	r3, #0
 8004790:	d015      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004792:	4b3e      	ldr	r3, [pc, #248]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	493a      	ldr	r1, [pc, #232]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b0:	d105      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b2:	4b36      	ldr	r3, [pc, #216]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	4a35      	ldr	r2, [pc, #212]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047bc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047ca:	4b30      	ldr	r3, [pc, #192]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	492c      	ldr	r1, [pc, #176]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e8:	d105      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	491e      	ldr	r1, [pc, #120]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004820:	d105      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004822:	4b1a      	ldr	r3, [pc, #104]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800482c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d015      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	4910      	ldr	r1, [pc, #64]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004858:	d105      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004864:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d018      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	4902      	ldr	r1, [pc, #8]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	e001      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800488c:	40021000 	.word	0x40021000
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004896:	d105      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004898:	4b21      	ldr	r3, [pc, #132]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a20      	ldr	r2, [pc, #128]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	4918      	ldr	r1, [pc, #96]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d105      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048d0:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d015      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048e8:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80048ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	490a      	ldr	r1, [pc, #40]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004906:	d105      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800490e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004912:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004914:	7cbb      	ldrb	r3, [r7, #18]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000

08004924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e049      	b.n	80049ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc fe18 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f000 f878 	bl	8004a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_SlaveConfigSynchro+0x18>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e031      	b.n	8004a4e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8d5 	bl	8004bac <TIM_SlaveTimer_SetConfig>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e018      	b.n	8004a4e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a3a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a48      	ldr	r2, [pc, #288]	; (8004b8c <TIM_Base_SetConfig+0x134>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d00f      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a45      	ldr	r2, [pc, #276]	; (8004b90 <TIM_Base_SetConfig+0x138>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a44      	ldr	r2, [pc, #272]	; (8004b94 <TIM_Base_SetConfig+0x13c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a43      	ldr	r2, [pc, #268]	; (8004b98 <TIM_Base_SetConfig+0x140>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <TIM_Base_SetConfig+0x144>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d108      	bne.n	8004aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a37      	ldr	r2, [pc, #220]	; (8004b8c <TIM_Base_SetConfig+0x134>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01f      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d01b      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a34      	ldr	r2, [pc, #208]	; (8004b90 <TIM_Base_SetConfig+0x138>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d017      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a33      	ldr	r2, [pc, #204]	; (8004b94 <TIM_Base_SetConfig+0x13c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <TIM_Base_SetConfig+0x140>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a32      	ldr	r2, [pc, #200]	; (8004ba0 <TIM_Base_SetConfig+0x148>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a31      	ldr	r2, [pc, #196]	; (8004ba4 <TIM_Base_SetConfig+0x14c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a30      	ldr	r2, [pc, #192]	; (8004ba8 <TIM_Base_SetConfig+0x150>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <TIM_Base_SetConfig+0x144>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d108      	bne.n	8004b04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <TIM_Base_SetConfig+0x134>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <TIM_Base_SetConfig+0x100>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <TIM_Base_SetConfig+0x140>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00f      	beq.n	8004b58 <TIM_Base_SetConfig+0x100>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a19      	ldr	r2, [pc, #100]	; (8004ba0 <TIM_Base_SetConfig+0x148>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00b      	beq.n	8004b58 <TIM_Base_SetConfig+0x100>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <TIM_Base_SetConfig+0x14c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <TIM_Base_SetConfig+0x100>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <TIM_Base_SetConfig+0x150>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0x100>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <TIM_Base_SetConfig+0x144>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d103      	bne.n	8004b60 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d105      	bne.n	8004b7e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	611a      	str	r2, [r3, #16]
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40015000 	.word	0x40015000
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800

08004bac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bde:	f023 0307 	bic.w	r3, r3, #7
 8004be2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4a4e      	ldr	r2, [pc, #312]	; (8004d34 <TIM_SlaveTimer_SetConfig+0x188>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f000 8092 	beq.w	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c02:	4a4c      	ldr	r2, [pc, #304]	; (8004d34 <TIM_SlaveTimer_SetConfig+0x188>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	f200 808b 	bhi.w	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c0a:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <TIM_SlaveTimer_SetConfig+0x18c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	f000 808a 	beq.w	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c12:	4a49      	ldr	r2, [pc, #292]	; (8004d38 <TIM_SlaveTimer_SetConfig+0x18c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	f200 8083 	bhi.w	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c1a:	4a48      	ldr	r2, [pc, #288]	; (8004d3c <TIM_SlaveTimer_SetConfig+0x190>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	f000 8082 	beq.w	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c22:	4a46      	ldr	r2, [pc, #280]	; (8004d3c <TIM_SlaveTimer_SetConfig+0x190>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d87b      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c28:	4a45      	ldr	r2, [pc, #276]	; (8004d40 <TIM_SlaveTimer_SetConfig+0x194>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d07b      	beq.n	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c2e:	4a44      	ldr	r2, [pc, #272]	; (8004d40 <TIM_SlaveTimer_SetConfig+0x194>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d875      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c34:	4a43      	ldr	r2, [pc, #268]	; (8004d44 <TIM_SlaveTimer_SetConfig+0x198>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d075      	beq.n	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c3a:	4a42      	ldr	r2, [pc, #264]	; (8004d44 <TIM_SlaveTimer_SetConfig+0x198>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d86f      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c44:	d06f      	beq.n	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c46:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c4a:	d869      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c4c:	2b70      	cmp	r3, #112	; 0x70
 8004c4e:	d01a      	beq.n	8004c86 <TIM_SlaveTimer_SetConfig+0xda>
 8004c50:	2b70      	cmp	r3, #112	; 0x70
 8004c52:	d865      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c54:	2b60      	cmp	r3, #96	; 0x60
 8004c56:	d059      	beq.n	8004d0c <TIM_SlaveTimer_SetConfig+0x160>
 8004c58:	2b60      	cmp	r3, #96	; 0x60
 8004c5a:	d861      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d04b      	beq.n	8004cf8 <TIM_SlaveTimer_SetConfig+0x14c>
 8004c60:	2b50      	cmp	r3, #80	; 0x50
 8004c62:	d85d      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d019      	beq.n	8004c9c <TIM_SlaveTimer_SetConfig+0xf0>
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d859      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d05a      	beq.n	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c70:	2b30      	cmp	r3, #48	; 0x30
 8004c72:	d855      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d056      	beq.n	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d851      	bhi.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d052      	beq.n	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d050      	beq.n	8004d26 <TIM_SlaveTimer_SetConfig+0x17a>
 8004c84:	e04c      	b.n	8004d20 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004c96:	f000 f8b6 	bl	8004e06 <TIM_ETR_SetConfig>
      break;
 8004c9a:	e045      	b.n	8004d28 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d004      	beq.n	8004cae <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8004ca8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8004cac:	d101      	bne.n	8004cb2 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e03b      	b.n	8004d2a <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
      break;
 8004cf6:	e017      	b.n	8004d28 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d04:	461a      	mov	r2, r3
 8004d06:	f000 f81f 	bl	8004d48 <TIM_TI1_ConfigInputStage>
      break;
 8004d0a:	e00d      	b.n	8004d28 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f000 f844 	bl	8004da6 <TIM_TI2_ConfigInputStage>
      break;
 8004d1e:	e003      	b.n	8004d28 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	75fb      	strb	r3, [r7, #23]
      break;
 8004d24:	e000      	b.n	8004d28 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8004d26:	bf00      	nop
  }

  return status;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	00100070 	.word	0x00100070
 8004d38:	00100050 	.word	0x00100050
 8004d3c:	00100040 	.word	0x00100040
 8004d40:	00100030 	.word	0x00100030
 8004d44:	00100020 	.word	0x00100020

08004d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f023 0201 	bic.w	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 030a 	bic.w	r3, r3, #10
 8004d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0210 	bic.w	r2, r3, #16
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	031b      	lsls	r3, r3, #12
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b087      	sub	sp, #28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	021a      	lsls	r2, r3, #8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	609a      	str	r2, [r3, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e06f      	b.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a31      	ldr	r2, [pc, #196]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a30      	ldr	r2, [pc, #192]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2e      	ldr	r2, [pc, #184]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ea4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d01d      	beq.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d018      	beq.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a11      	ldr	r2, [pc, #68]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10c      	bne.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40015000 	.word	0x40015000
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40014000 	.word	0x40014000

08004f64 <arm_biquad_cascade_df2T_f32>:
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	7807      	ldrb	r7, [r0, #0]
 8004f6a:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8004f6e:	6885      	ldr	r5, [r0, #8]
 8004f70:	3514      	adds	r5, #20
 8004f72:	6846      	ldr	r6, [r0, #4]
 8004f74:	3608      	adds	r6, #8
 8004f76:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8004f7a:	eb02 0b09 	add.w	fp, r2, r9
 8004f7e:	f003 080f 	and.w	r8, r3, #15
 8004f82:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8004f86:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8004f8a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8004f8e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8004f92:	ed15 6a02 	vldr	s12, [r5, #-8]
 8004f96:	ed55 5a01 	vldr	s11, [r5, #-4]
 8004f9a:	46b4      	mov	ip, r6
 8004f9c:	ed56 3a02 	vldr	s7, [r6, #-8]
 8004fa0:	ed16 4a01 	vldr	s8, [r6, #-4]
 8004fa4:	f1be 0f00 	cmp.w	lr, #0
 8004fa8:	f000 8195 	beq.w	80052d6 <arm_biquad_cascade_df2T_f32+0x372>
 8004fac:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8004fb0:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004fb4:	4674      	mov	r4, lr
 8004fb6:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8004fba:	ee27 5a83 	vmul.f32	s10, s15, s6
 8004fbe:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004fc2:	ee67 4a03 	vmul.f32	s9, s14, s6
 8004fc6:	ee34 4a84 	vadd.f32	s8, s9, s8
 8004fca:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004fce:	ee34 4a84 	vadd.f32	s8, s9, s8
 8004fd2:	ee26 3a83 	vmul.f32	s6, s13, s6
 8004fd6:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8004fda:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8004fde:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8004fe2:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004fe6:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004fea:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004fee:	ee27 4a23 	vmul.f32	s8, s14, s7
 8004ff2:	ee35 5a04 	vadd.f32	s10, s10, s8
 8004ff6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8004ffa:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004ffe:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8005002:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8005006:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800500a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800500e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005012:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005016:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800501a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800501e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005022:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005026:	ee33 3a24 	vadd.f32	s6, s6, s9
 800502a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800502e:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8005032:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8005036:	ee67 4a84 	vmul.f32	s9, s15, s8
 800503a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800503e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005042:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005046:	ee67 3a04 	vmul.f32	s7, s14, s8
 800504a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800504e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005052:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005056:	ee66 3a84 	vmul.f32	s7, s13, s8
 800505a:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800505e:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8005062:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005066:	ee35 5a03 	vadd.f32	s10, s10, s6
 800506a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800506e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005072:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005076:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800507a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800507e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005082:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005086:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800508a:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800508e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005092:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005096:	ee25 5a85 	vmul.f32	s10, s11, s10
 800509a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800509e:	ee67 3a04 	vmul.f32	s7, s14, s8
 80050a2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80050a6:	ee26 3a24 	vmul.f32	s6, s12, s9
 80050aa:	ee33 3a05 	vadd.f32	s6, s6, s10
 80050ae:	ee66 3a84 	vmul.f32	s7, s13, s8
 80050b2:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 80050b6:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 80050ba:	ee27 5a84 	vmul.f32	s10, s15, s8
 80050be:	ee35 5a03 	vadd.f32	s10, s10, s6
 80050c2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80050c6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80050ca:	ee67 3a04 	vmul.f32	s7, s14, s8
 80050ce:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80050d2:	ee26 3a05 	vmul.f32	s6, s12, s10
 80050d6:	ee33 3a24 	vadd.f32	s6, s6, s9
 80050da:	ee66 3a84 	vmul.f32	s7, s13, s8
 80050de:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 80050e2:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 80050e6:	ee67 4a84 	vmul.f32	s9, s15, s8
 80050ea:	ee74 4a83 	vadd.f32	s9, s9, s6
 80050ee:	ee25 5a85 	vmul.f32	s10, s11, s10
 80050f2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80050f6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80050fa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80050fe:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005102:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005106:	ee66 3a84 	vmul.f32	s7, s13, s8
 800510a:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800510e:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8005112:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005116:	ee35 5a03 	vadd.f32	s10, s10, s6
 800511a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800511e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005122:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005126:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800512a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800512e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005132:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005136:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800513a:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800513e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005142:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005146:	ee25 5a85 	vmul.f32	s10, s11, s10
 800514a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800514e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005152:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005156:	ee26 3a24 	vmul.f32	s6, s12, s9
 800515a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800515e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005162:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8005166:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800516a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800516e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005172:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005176:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800517a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800517e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005182:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005186:	ee33 3a24 	vadd.f32	s6, s6, s9
 800518a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800518e:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8005192:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8005196:	ee67 4a84 	vmul.f32	s9, s15, s8
 800519a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800519e:	ee25 5a85 	vmul.f32	s10, s11, s10
 80051a2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80051a6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80051aa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80051ae:	ee26 3a24 	vmul.f32	s6, s12, s9
 80051b2:	ee33 3a05 	vadd.f32	s6, s6, s10
 80051b6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80051ba:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 80051be:	ed10 4a04 	vldr	s8, [r0, #-16]
 80051c2:	ee27 5a84 	vmul.f32	s10, s15, s8
 80051c6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80051ca:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80051ce:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80051d2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80051d6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80051da:	ee26 3a05 	vmul.f32	s6, s12, s10
 80051de:	ee33 3a24 	vadd.f32	s6, s6, s9
 80051e2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80051e6:	ed03 5a04 	vstr	s10, [r3, #-16]
 80051ea:	ed10 4a03 	vldr	s8, [r0, #-12]
 80051ee:	ee67 4a84 	vmul.f32	s9, s15, s8
 80051f2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80051f6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80051fa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80051fe:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005202:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005206:	ee26 3a24 	vmul.f32	s6, s12, s9
 800520a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800520e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005212:	ed43 4a03 	vstr	s9, [r3, #-12]
 8005216:	ed10 4a02 	vldr	s8, [r0, #-8]
 800521a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800521e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005222:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005226:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800522a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800522e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005232:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005236:	ee33 3a24 	vadd.f32	s6, s6, s9
 800523a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800523e:	ed03 5a02 	vstr	s10, [r3, #-8]
 8005242:	ed10 4a01 	vldr	s8, [r0, #-4]
 8005246:	ee67 4a84 	vmul.f32	s9, s15, s8
 800524a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800524e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005252:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005256:	ee67 3a04 	vmul.f32	s7, s14, s8
 800525a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800525e:	ee66 3a24 	vmul.f32	s7, s12, s9
 8005262:	ee73 3a85 	vadd.f32	s7, s7, s10
 8005266:	ee26 5a84 	vmul.f32	s10, s13, s8
 800526a:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800526e:	ee34 4a05 	vadd.f32	s8, s8, s10
 8005272:	ed43 4a01 	vstr	s9, [r3, #-4]
 8005276:	3040      	adds	r0, #64	; 0x40
 8005278:	3340      	adds	r3, #64	; 0x40
 800527a:	3c01      	subs	r4, #1
 800527c:	f47f ae9b 	bne.w	8004fb6 <arm_biquad_cascade_df2T_f32+0x52>
 8005280:	4449      	add	r1, r9
 8005282:	465b      	mov	r3, fp
 8005284:	f1b8 0f00 	cmp.w	r8, #0
 8005288:	d019      	beq.n	80052be <arm_biquad_cascade_df2T_f32+0x35a>
 800528a:	eb01 000a 	add.w	r0, r1, sl
 800528e:	ecf1 2a01 	vldmia	r1!, {s5}
 8005292:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8005296:	ee33 3a23 	vadd.f32	s6, s6, s7
 800529a:	ee67 3a22 	vmul.f32	s7, s14, s5
 800529e:	ee33 4a84 	vadd.f32	s8, s7, s8
 80052a2:	ee26 5a03 	vmul.f32	s10, s12, s6
 80052a6:	ee75 3a04 	vadd.f32	s7, s10, s8
 80052aa:	ee66 2aa2 	vmul.f32	s5, s13, s5
 80052ae:	ee25 4a83 	vmul.f32	s8, s11, s6
 80052b2:	ee34 4a22 	vadd.f32	s8, s8, s5
 80052b6:	eca3 3a01 	vstmia	r3!, {s6}
 80052ba:	4281      	cmp	r1, r0
 80052bc:	d1e7      	bne.n	800528e <arm_biquad_cascade_df2T_f32+0x32a>
 80052be:	ed4c 3a02 	vstr	s7, [ip, #-8]
 80052c2:	ed0c 4a01 	vstr	s8, [ip, #-4]
 80052c6:	3514      	adds	r5, #20
 80052c8:	3608      	adds	r6, #8
 80052ca:	4611      	mov	r1, r2
 80052cc:	3f01      	subs	r7, #1
 80052ce:	f47f ae5a 	bne.w	8004f86 <arm_biquad_cascade_df2T_f32+0x22>
 80052d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d6:	4613      	mov	r3, r2
 80052d8:	e7d4      	b.n	8005284 <arm_biquad_cascade_df2T_f32+0x320>
	...

080052dc <arm_biquad_cascade_df2T_init_f32>:
 80052dc:	b510      	push	{r4, lr}
 80052de:	6082      	str	r2, [r0, #8]
 80052e0:	7001      	strb	r1, [r0, #0]
 80052e2:	4604      	mov	r4, r0
 80052e4:	00ca      	lsls	r2, r1, #3
 80052e6:	4618      	mov	r0, r3
 80052e8:	2100      	movs	r1, #0
 80052ea:	f000 f803 	bl	80052f4 <memset>
 80052ee:	6060      	str	r0, [r4, #4]
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	bf00      	nop

080052f4 <memset>:
 80052f4:	4402      	add	r2, r0
 80052f6:	4603      	mov	r3, r0
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <__libc_init_array>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4d0d      	ldr	r5, [pc, #52]	; (800533c <__libc_init_array+0x38>)
 8005308:	4c0d      	ldr	r4, [pc, #52]	; (8005340 <__libc_init_array+0x3c>)
 800530a:	1b64      	subs	r4, r4, r5
 800530c:	10a4      	asrs	r4, r4, #2
 800530e:	2600      	movs	r6, #0
 8005310:	42a6      	cmp	r6, r4
 8005312:	d109      	bne.n	8005328 <__libc_init_array+0x24>
 8005314:	4d0b      	ldr	r5, [pc, #44]	; (8005344 <__libc_init_array+0x40>)
 8005316:	4c0c      	ldr	r4, [pc, #48]	; (8005348 <__libc_init_array+0x44>)
 8005318:	f000 f818 	bl	800534c <_init>
 800531c:	1b64      	subs	r4, r4, r5
 800531e:	10a4      	asrs	r4, r4, #2
 8005320:	2600      	movs	r6, #0
 8005322:	42a6      	cmp	r6, r4
 8005324:	d105      	bne.n	8005332 <__libc_init_array+0x2e>
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	f855 3b04 	ldr.w	r3, [r5], #4
 800532c:	4798      	blx	r3
 800532e:	3601      	adds	r6, #1
 8005330:	e7ee      	b.n	8005310 <__libc_init_array+0xc>
 8005332:	f855 3b04 	ldr.w	r3, [r5], #4
 8005336:	4798      	blx	r3
 8005338:	3601      	adds	r6, #1
 800533a:	e7f2      	b.n	8005322 <__libc_init_array+0x1e>
 800533c:	08005374 	.word	0x08005374
 8005340:	08005374 	.word	0x08005374
 8005344:	08005374 	.word	0x08005374
 8005348:	08005378 	.word	0x08005378

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
