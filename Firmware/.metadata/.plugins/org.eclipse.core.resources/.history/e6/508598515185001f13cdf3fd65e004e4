/*
 * _ADCn_INx_AR.c
 *
 * Created on: Oct 7, 2024
 * Author: Mwangi Alex. W
 */

//INCLUDES
#include "_ADCn_INx_AR.h"

//VARIABLES
float32_t AutoCorr_1[AR_ORDER + 1]; // Buffer holding R0 to R10, e.g., autocorr_buffer[0] = R0, ..., autocorr_buffer[10] = R10
float32_t AutoCorr_2[AR_ORDER + 1];
float32_t AutoCorr_3[AR_ORDER + 1];
float32_t AutoCorr_4[AR_ORDER + 1];
float32_t AutoCorr_5[AR_ORDER + 1];
float32_t AutoCorr_6[AR_ORDER + 1];

ADC1_IN1_MA AR_ADC1_IN1; // Declaring an instance of Auto-regression feature
ADC1_IN2_MA AR_ADC1_IN2;
ADC2_IN3_MA AR_ADC2_IN3;
ADC2_IN4_MA AR_ADC2_IN4;
ADC3_IN1_MA AR_ADC3_IN1;
ADC3_IN2_MA AR_ADC3_IN2;


arm_matrix_instance_f32 ADC1_IN1_YW_mtx; //Creating a matrix instance for the CMSIS DSP matrix initialization function
arm_matrix_instance_f32 ADC1_IN2_YW_mtx;
arm_matrix_instance_f32 ADC2_IN3_YW_mtx;
arm_matrix_instance_f32 ADC2_IN4_YW_mtx;
arm_matrix_instance_f32 ADC3_IN1_YW_mtx;
arm_matrix_instance_f32 ADC3_IN2_YW_mtx;


arm_matrix_instance_f32 ADC1_IN1_Inv_YW_mtx; //Creating a inverse matrix instance for the CMSIS DSP matrix initialization function
arm_matrix_instance_f32 ADC1_IN2_Inv_YW_mtx;
arm_matrix_instance_f32 ADC2_IN3_Inv_YW_mtx;
arm_matrix_instance_f32 ADC2_IN4_Inv_YW_mtx;
arm_matrix_instance_f32 ADC3_IN1_Inv_YW_mtx;
arm_matrix_instance_f32 ADC3_IN2_Inv_YW_mtx;

arm_matrix_instance_f32 ADC1_IN1_AC_mtx;
arm_matrix_instance_f32 ADC1_IN2_AC_mtx;
arm_matrix_instance_f32 ADC2_IN3_AC_mtx;
arm_matrix_instance_f32 ADC2_IN4_AC_mtx;
arm_matrix_instance_f32 ADC3_IN1_AC_mtx;
arm_matrix_instance_f32 ADC3_IN2_AC_mtx;

arm_matrix_instance_f32 ADC1_IN1_coeffs_mtx;
arm_matrix_instance_f32 ADC1_IN2_coeffs_mtx;
arm_matrix_instance_f32 ADC2_IN3_coeffs_mtx;
arm_matrix_instance_f32 ADC2_IN3_coeffs_mtx;
arm_matrix_instance_f32 ADC3_IN1_coeffs_mtx;
arm_matrix_instance_f32 ADC3_IN2_coeffs_mtx;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1);

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
	}
}

void AD1_IN1_autoreg_coeffs(void)
{
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1);


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; //Array that hold the matrix data (100 elements)

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer */
	for (int r = 0; r < AR_ORDER; r++)
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1);


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER];

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1);

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
	{
		float32_t AR_Coeffs_1[AR_ORDER];
		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1);

        arm_status StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
	}
	else
	{
         // Do something to indicate that the process has failed
	}

}

void ADC1_IN1_autoreg_calc()
{
	if (StatusCoeffs_1 == ARM_MATH_SUCCESS)
	{

	}
}


void ADC1_IN2_autocorr_calc(void)
{
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
	}
}


void ADC2_IN3_autocorr_calc(void)
{
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
	}
}


void ADC2_IN4_autocorr_calc(void)
{
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
	}
}


void ADC3_IN1_autocorr_calc(void)
{
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
	}
}


void ADC3_IN2_autocorr_calc(void)
{
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
	}
}
