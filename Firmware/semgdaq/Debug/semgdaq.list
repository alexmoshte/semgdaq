
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013058  0800c6c0  0800c6c0  0001c6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f718  0801f718  000378d8  2**0
                  CONTENTS
  4 .ARM          00000000  0801f718  0801f718  000378d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f718  0801f718  000378d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f718  0801f718  0002f718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f71c  0801f71c  0002f71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078d8  20000000  0801f720  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013f88  200078d8  08026ff8  000378d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b860  08026ff8  0003b860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000378d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00037908  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d18  00000000  00000000  000379c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051f2  00000000  00000000  0005d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  000628d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011de  00000000  00000000  000641f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023451  00000000  00000000  000653ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021668  00000000  00000000  0008881f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6be0  00000000  00000000  000a9e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e10  00000000  00000000  00190a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00197878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004cd8  00000000  00000000  00197903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000118  00000000  00000000  0019c5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200078d8 	.word	0x200078d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c6a4 	.word	0x0800c6a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200078dc 	.word	0x200078dc
 8000214:	0800c6a4 	.word	0x0800c6a4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <ADC1_IN1_autocorr_calc>:
arm_status StatusCoeffs_5;
arm_status StatusCoeffs_6;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e01e      	b.n	8000c6a <ADC1_IN1_autocorr_calc+0x4a>
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag  for the data set*/
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000c32:	23a5      	movs	r3, #165	; 0xa5
 8000c34:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1); // A CMSIS DSP function for computing dot products
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <ADC1_IN1_autocorr_calc+0x5c>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	1d18      	adds	r0, r3, #4
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <ADC1_IN1_autocorr_calc+0x60>)
 8000c48:	f00a f890 	bl	800ad6c <arm_dot_prod_f32>

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c50:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000c84 <ADC1_IN1_autocorr_calc+0x64>
 8000c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <ADC1_IN1_autocorr_calc+0x68>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b0a      	cmp	r3, #10
 8000c6e:	d9dd      	bls.n	8000c2c <ADC1_IN1_autocorr_calc+0xc>
	}
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20007aec 	.word	0x20007aec
 8000c80:	20007b10 	.word	0x20007b10
 8000c84:	432f0000 	.word	0x432f0000
 8000c88:	200078f4 	.word	0x200078f4

08000c8c <ADC1_IN1_autoreg_coeffs>:

float32_t* ADC1_IN1_autoreg_coeffs(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000c92:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c9a:	e013      	b.n	8000cc4 <ADC1_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000c9c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000cb4:	443b      	add	r3, r7
 8000cb6:	3b38      	subs	r3, #56	; 0x38
 8000cb8:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000cba:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000cc4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	d9e7      	bls.n	8000c9c <ADC1_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1); // Initializes the autocorrelations matrix
 8000ccc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	210a      	movs	r1, #10
 8000cd4:	4837      	ldr	r0, [pc, #220]	; (8000db4 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000cd6:	f009 fe7d 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000ce0:	e02f      	b.n	8000d42 <ADC1_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000ce8:	e022      	b.n	8000d30 <ADC1_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000cea:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000cee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000cf8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000cfc:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000d0e:	4413      	add	r3, r2
 8000d10:	4827      	ldr	r0, [pc, #156]	; (8000db0 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000d12:	008a      	lsls	r2, r1, #2
 8000d14:	4402      	add	r2, r0
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000d1c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000d26:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000d30:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	ddd8      	ble.n	8000cea <ADC1_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000d38:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000d42:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000d46:	2b09      	cmp	r3, #9
 8000d48:	ddcb      	ble.n	8000ce2 <ADC1_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1); // Initializes the Yule-Walker matrix
 8000d4a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d4e:	220a      	movs	r2, #10
 8000d50:	210a      	movs	r1, #10
 8000d52:	4819      	ldr	r0, [pc, #100]	; (8000db8 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d54:	f009 fe3e 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1); // Initializes the inverse Yule-Walker matrix
 8000d58:	463b      	mov	r3, r7
 8000d5a:	220a      	movs	r2, #10
 8000d5c:	210a      	movs	r1, #10
 8000d5e:	4817      	ldr	r0, [pc, #92]	; (8000dbc <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d60:	f009 fe38 	bl	800a9d4 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);
 8000d64:	4915      	ldr	r1, [pc, #84]	; (8000dbc <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d68:	f009 fd2e 	bl	800a7c8 <arm_mat_inverse_f32>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000d72:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d113      	bne.n	8000da2 <ADC1_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000d7a:	2228      	movs	r2, #40	; 0x28
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d80:	f00a fb0c 	bl	800b39c <memset>

		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1); //Initializes the coefficients Matrix
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	210a      	movs	r1, #10
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d8c:	f009 fe22 	bl	800a9d4 <arm_mat_init_f32>

        StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d96:	f009 fc77 	bl	800a688 <arm_mat_mult_f32>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <ADC1_IN1_autoreg_coeffs+0x13c>)
 8000da0:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_1;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <ADC1_IN1_autoreg_coeffs+0x134>)
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200078f4 	.word	0x200078f4
 8000db4:	20009cf4 	.word	0x20009cf4
 8000db8:	20009c94 	.word	0x20009c94
 8000dbc:	20009cc4 	.word	0x20009cc4
 8000dc0:	200079fc 	.word	0x200079fc
 8000dc4:	20009d24 	.word	0x20009d24
 8000dc8:	20009d54 	.word	0x20009d54

08000dcc <ADC1_IN2_autocorr_calc>:



void ADC1_IN2_autocorr_calc(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e01e      	b.n	8000e16 <ADC1_IN2_autocorr_calc+0x4a>
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000dde:	23a5      	movs	r3, #165	; 0xa5
 8000de0:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3308      	adds	r3, #8
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <ADC1_IN2_autocorr_calc+0x5c>)
 8000dea:	4413      	add	r3, r2
 8000dec:	1d18      	adds	r0, r3, #4
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <ADC1_IN2_autocorr_calc+0x60>)
 8000df4:	f009 ffba 	bl	800ad6c <arm_dot_prod_f32>

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000e30 <ADC1_IN2_autocorr_calc+0x64>
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <ADC1_IN2_autocorr_calc+0x68>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b09      	cmp	r3, #9
 8000e1a:	d9dd      	bls.n	8000dd8 <ADC1_IN2_autocorr_calc+0xc>
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20008088 	.word	0x20008088
 8000e2c:	200080ac 	.word	0x200080ac
 8000e30:	432f0000 	.word	0x432f0000
 8000e34:	20007920 	.word	0x20007920

08000e38 <ADC1_IN2_autoreg_coeffs>:

float32_t* ADC1_IN2_autoreg_coeffs(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000e3e:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_2 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e46:	e013      	b.n	8000e70 <ADC1_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_2[n] = AutoCorr_2[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000e48:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000e60:	443b      	add	r3, r7
 8000e62:	3b38      	subs	r3, #56	; 0x38
 8000e64:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e66:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e70:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e74:	2b09      	cmp	r3, #9
 8000e76:	d9e7      	bls.n	8000e48 <ADC1_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_2); //Initializes the autocorrelations matrix
 8000e78:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	210a      	movs	r1, #10
 8000e80:	4837      	ldr	r0, [pc, #220]	; (8000f60 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000e82:	f009 fda7 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_2[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000e8c:	e02f      	b.n	8000eee <ADC1_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e94:	e022      	b.n	8000edc <ADC1_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_2[r * 10 + c] = AutoCorr_2[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000e96:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e9a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000ea4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000ea8:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000eba:	4413      	add	r3, r2
 8000ebc:	4827      	ldr	r0, [pc, #156]	; (8000f5c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000ebe:	008a      	lsls	r2, r1, #2
 8000ec0:	4402      	add	r2, r0
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000ec8:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ed2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000edc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	ddd8      	ble.n	8000e96 <ADC1_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000ee4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000eee:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	ddcb      	ble.n	8000e8e <ADC1_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_2); // Initializes the Yule-Walker matrix
 8000ef6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000efa:	220a      	movs	r2, #10
 8000efc:	210a      	movs	r1, #10
 8000efe:	4819      	ldr	r0, [pc, #100]	; (8000f64 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000f00:	f009 fd68 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_2[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_2); // Initializes the inverse Yule-Walker matrix
 8000f04:	463b      	mov	r3, r7
 8000f06:	220a      	movs	r2, #10
 8000f08:	210a      	movs	r1, #10
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f0c:	f009 fd62 	bl	800a9d4 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_2 = arm_mat_inverse_f32(&ADC1_IN2_YW_mtx, &ADC1_IN2_Inv_YW_mtx);
 8000f10:	4915      	ldr	r1, [pc, #84]	; (8000f68 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000f14:	f009 fc58 	bl	800a7c8 <arm_mat_inverse_f32>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_2 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000f1e:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d113      	bne.n	8000f4e <ADC1_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_2, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000f26:	2228      	movs	r2, #40	; 0x28
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000f2c:	f00a fa36 	bl	800b39c <memset>

		arm_mat_init_f32(&ADC1_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_2); //Initializes the coefficients Matrix
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	210a      	movs	r1, #10
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000f38:	f009 fd4c 	bl	800a9d4 <arm_mat_init_f32>

        StatusCoeffs_2 = arm_mat_mult_f32( &ADC1_IN2_Inv_YW_mtx, &ADC1_IN2_AC_mtx, &ADC1_IN2_coeffs_mtx );
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f42:	f009 fba1 	bl	800a688 <arm_mat_mult_f32>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <ADC1_IN2_autoreg_coeffs+0x13c>)
 8000f4c:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_2;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <ADC1_IN2_autoreg_coeffs+0x134>)
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20007920 	.word	0x20007920
 8000f60:	20009cfc 	.word	0x20009cfc
 8000f64:	20009c9c 	.word	0x20009c9c
 8000f68:	20009ccc 	.word	0x20009ccc
 8000f6c:	20007a24 	.word	0x20007a24
 8000f70:	20009d2c 	.word	0x20009d2c
 8000f74:	20009d55 	.word	0x20009d55

08000f78 <ADC2_IN3_autocorr_calc>:



void ADC2_IN3_autocorr_calc(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e01e      	b.n	8000fc2 <ADC2_IN3_autocorr_calc+0x4a>
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000f8a:	23a5      	movs	r3, #165	; 0xa5
 8000f8c:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3308      	adds	r3, #8
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <ADC2_IN3_autocorr_calc+0x5c>)
 8000f96:	4413      	add	r3, r2
 8000f98:	1d18      	adds	r0, r3, #4
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <ADC2_IN3_autocorr_calc+0x60>)
 8000fa0:	f009 fee4 	bl	800ad6c <arm_dot_prod_f32>

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000fa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000fdc <ADC2_IN3_autocorr_calc+0x64>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <ADC2_IN3_autocorr_calc+0x68>)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	d9dd      	bls.n	8000f84 <ADC2_IN3_autocorr_calc+0xc>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20008624 	.word	0x20008624
 8000fd8:	20008648 	.word	0x20008648
 8000fdc:	432f0000 	.word	0x432f0000
 8000fe0:	2000794c 	.word	0x2000794c

08000fe4 <ADC2_IN3_autoreg_coeffs>:

float32_t* ADC2_IN3_autoreg_coeffs(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000fea:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_3 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000ff2:	e013      	b.n	800101c <ADC2_IN3_autoreg_coeffs+0x38>
	{
		AC_Matrix_3[n] = AutoCorr_3[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000ff4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a43      	ldr	r2, [pc, #268]	; (8001108 <ADC2_IN3_autoreg_coeffs+0x124>)
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800100c:	443b      	add	r3, r7
 800100e:	3b38      	subs	r3, #56	; 0x38
 8001010:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8001012:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800101c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001020:	2b09      	cmp	r3, #9
 8001022:	d9e7      	bls.n	8000ff4 <ADC2_IN3_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN3_AC_mtx, AR_ORDER, 1, AC_Matrix_3); //Initializes the autocorrelations matrix
 8001024:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001028:	2201      	movs	r2, #1
 800102a:	210a      	movs	r1, #10
 800102c:	4837      	ldr	r0, [pc, #220]	; (800110c <ADC2_IN3_autoreg_coeffs+0x128>)
 800102e:	f009 fcd1 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_3[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001038:	e02f      	b.n	800109a <ADC2_IN3_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001040:	e022      	b.n	8001088 <ADC2_IN3_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_3[r * 10 + c] = AutoCorr_3[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8001042:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001046:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001050:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001054:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	461a      	mov	r2, r3
 8001062:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001066:	4413      	add	r3, r2
 8001068:	4827      	ldr	r0, [pc, #156]	; (8001108 <ADC2_IN3_autoreg_coeffs+0x124>)
 800106a:	008a      	lsls	r2, r1, #2
 800106c:	4402      	add	r2, r0
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001074:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800107e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001082:	3301      	adds	r3, #1
 8001084:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001088:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800108c:	2b09      	cmp	r3, #9
 800108e:	ddd8      	ble.n	8001042 <ADC2_IN3_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001090:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001094:	3301      	adds	r3, #1
 8001096:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800109a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800109e:	2b09      	cmp	r3, #9
 80010a0:	ddcb      	ble.n	800103a <ADC2_IN3_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN3_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_3); // Initializes the Yule-Walker matrix
 80010a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80010a6:	220a      	movs	r2, #10
 80010a8:	210a      	movs	r1, #10
 80010aa:	4819      	ldr	r0, [pc, #100]	; (8001110 <ADC2_IN3_autoreg_coeffs+0x12c>)
 80010ac:	f009 fc92 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_3[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN3_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_3); // Initializes the inverse Yule-Walker matrix
 80010b0:	463b      	mov	r3, r7
 80010b2:	220a      	movs	r2, #10
 80010b4:	210a      	movs	r1, #10
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010b8:	f009 fc8c 	bl	800a9d4 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_3 = arm_mat_inverse_f32(&ADC2_IN3_YW_mtx, &ADC2_IN3_Inv_YW_mtx);
 80010bc:	4915      	ldr	r1, [pc, #84]	; (8001114 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <ADC2_IN3_autoreg_coeffs+0x12c>)
 80010c0:	f009 fb82 	bl	800a7c8 <arm_mat_inverse_f32>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_3 == ARM_MATH_SUCCESS) // Check if operation was successful
 80010ca:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d113      	bne.n	80010fa <ADC2_IN3_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_3, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80010d2:	2228      	movs	r2, #40	; 0x28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4810      	ldr	r0, [pc, #64]	; (8001118 <ADC2_IN3_autoreg_coeffs+0x134>)
 80010d8:	f00a f960 	bl	800b39c <memset>

		arm_mat_init_f32(&ADC2_IN3_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_3); //Initializes the coefficients Matrix
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <ADC2_IN3_autoreg_coeffs+0x134>)
 80010de:	2201      	movs	r2, #1
 80010e0:	210a      	movs	r1, #10
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <ADC2_IN3_autoreg_coeffs+0x138>)
 80010e4:	f009 fc76 	bl	800a9d4 <arm_mat_init_f32>

        StatusCoeffs_3 = arm_mat_mult_f32( &ADC2_IN3_Inv_YW_mtx, &ADC2_IN3_AC_mtx, &ADC2_IN3_coeffs_mtx );
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <ADC2_IN3_autoreg_coeffs+0x138>)
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <ADC2_IN3_autoreg_coeffs+0x128>)
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010ee:	f009 facb 	bl	800a688 <arm_mat_mult_f32>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <ADC2_IN3_autoreg_coeffs+0x13c>)
 80010f8:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_3;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <ADC2_IN3_autoreg_coeffs+0x134>)
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000794c 	.word	0x2000794c
 800110c:	20009d04 	.word	0x20009d04
 8001110:	20009ca4 	.word	0x20009ca4
 8001114:	20009cd4 	.word	0x20009cd4
 8001118:	20007a4c 	.word	0x20007a4c
 800111c:	20009d34 	.word	0x20009d34
 8001120:	20009d56 	.word	0x20009d56

08001124 <ADC2_IN4_autocorr_calc>:



void ADC2_IN4_autocorr_calc(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e01e      	b.n	800116e <ADC2_IN4_autocorr_calc+0x4a>
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001136:	23a5      	movs	r3, #165	; 0xa5
 8001138:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3308      	adds	r3, #8
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <ADC2_IN4_autocorr_calc+0x5c>)
 8001142:	4413      	add	r3, r2
 8001144:	1d18      	adds	r0, r3, #4
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <ADC2_IN4_autocorr_calc+0x60>)
 800114c:	f009 fe0e 	bl	800ad6c <arm_dot_prod_f32>

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001150:	ed97 7a01 	vldr	s14, [r7, #4]
 8001154:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001188 <ADC2_IN4_autocorr_calc+0x64>
 8001158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115c:	4a0b      	ldr	r2, [pc, #44]	; (800118c <ADC2_IN4_autocorr_calc+0x68>)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d9dd      	bls.n	8001130 <ADC2_IN4_autocorr_calc+0xc>
	}
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20008bc0 	.word	0x20008bc0
 8001184:	20008be4 	.word	0x20008be4
 8001188:	432f0000 	.word	0x432f0000
 800118c:	20007978 	.word	0x20007978

08001190 <ADC2_IN4_autoreg_coeffs>:

float32_t* ADC2_IN4_autoreg_coeffs(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001196:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_4 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800119e:	e013      	b.n	80011c8 <ADC2_IN4_autoreg_coeffs+0x38>
	{
		AC_Matrix_4[n] = AutoCorr_4[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80011a0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <ADC2_IN4_autoreg_coeffs+0x124>)
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80011b8:	443b      	add	r3, r7
 80011ba:	3b38      	subs	r3, #56	; 0x38
 80011bc:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80011be:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80011c8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d9e7      	bls.n	80011a0 <ADC2_IN4_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN4_AC_mtx, AR_ORDER, 1, AC_Matrix_4); //Initializes the autocorrelations matrix
 80011d0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80011d4:	2201      	movs	r2, #1
 80011d6:	210a      	movs	r1, #10
 80011d8:	4837      	ldr	r0, [pc, #220]	; (80012b8 <ADC2_IN4_autoreg_coeffs+0x128>)
 80011da:	f009 fbfb 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_4[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80011e4:	e02f      	b.n	8001246 <ADC2_IN4_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80011ec:	e022      	b.n	8001234 <ADC2_IN4_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_4[r * 10 + c] = AutoCorr_4[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80011ee:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80011f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011fc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001200:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	461a      	mov	r2, r3
 800120e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001212:	4413      	add	r3, r2
 8001214:	4827      	ldr	r0, [pc, #156]	; (80012b4 <ADC2_IN4_autoreg_coeffs+0x124>)
 8001216:	008a      	lsls	r2, r1, #2
 8001218:	4402      	add	r2, r0
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001220:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800122a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800122e:	3301      	adds	r3, #1
 8001230:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001234:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001238:	2b09      	cmp	r3, #9
 800123a:	ddd8      	ble.n	80011ee <ADC2_IN4_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 800123c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001240:	3301      	adds	r3, #1
 8001242:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001246:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800124a:	2b09      	cmp	r3, #9
 800124c:	ddcb      	ble.n	80011e6 <ADC2_IN4_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN4_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_4); // Initializes the Yule-Walker matrix
 800124e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001252:	220a      	movs	r2, #10
 8001254:	210a      	movs	r1, #10
 8001256:	4819      	ldr	r0, [pc, #100]	; (80012bc <ADC2_IN4_autoreg_coeffs+0x12c>)
 8001258:	f009 fbbc 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_4[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN4_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_4); // Initializes the inverse Yule-Walker matrix
 800125c:	463b      	mov	r3, r7
 800125e:	220a      	movs	r2, #10
 8001260:	210a      	movs	r1, #10
 8001262:	4817      	ldr	r0, [pc, #92]	; (80012c0 <ADC2_IN4_autoreg_coeffs+0x130>)
 8001264:	f009 fbb6 	bl	800a9d4 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_4 = arm_mat_inverse_f32(&ADC2_IN4_YW_mtx, &ADC2_IN4_Inv_YW_mtx);
 8001268:	4915      	ldr	r1, [pc, #84]	; (80012c0 <ADC2_IN4_autoreg_coeffs+0x130>)
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <ADC2_IN4_autoreg_coeffs+0x12c>)
 800126c:	f009 faac 	bl	800a7c8 <arm_mat_inverse_f32>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_4 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001276:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800127a:	2b00      	cmp	r3, #0
 800127c:	d113      	bne.n	80012a6 <ADC2_IN4_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_4, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800127e:	2228      	movs	r2, #40	; 0x28
 8001280:	2100      	movs	r1, #0
 8001282:	4810      	ldr	r0, [pc, #64]	; (80012c4 <ADC2_IN4_autoreg_coeffs+0x134>)
 8001284:	f00a f88a 	bl	800b39c <memset>

		arm_mat_init_f32(&ADC2_IN4_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_4); //Initializes the coefficients Matrix
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <ADC2_IN4_autoreg_coeffs+0x134>)
 800128a:	2201      	movs	r2, #1
 800128c:	210a      	movs	r1, #10
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001290:	f009 fba0 	bl	800a9d4 <arm_mat_init_f32>

        StatusCoeffs_4 = arm_mat_mult_f32( &ADC2_IN4_Inv_YW_mtx, &ADC2_IN4_AC_mtx, &ADC2_IN4_coeffs_mtx );
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <ADC2_IN4_autoreg_coeffs+0x128>)
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <ADC2_IN4_autoreg_coeffs+0x130>)
 800129a:	f009 f9f5 	bl	800a688 <arm_mat_mult_f32>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <ADC2_IN4_autoreg_coeffs+0x13c>)
 80012a4:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_4;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <ADC2_IN4_autoreg_coeffs+0x134>)
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20007978 	.word	0x20007978
 80012b8:	20009d0c 	.word	0x20009d0c
 80012bc:	20009cac 	.word	0x20009cac
 80012c0:	20009cdc 	.word	0x20009cdc
 80012c4:	20007a74 	.word	0x20007a74
 80012c8:	20009d3c 	.word	0x20009d3c
 80012cc:	20009d57 	.word	0x20009d57

080012d0 <ADC3_IN1_autocorr_calc>:



void ADC3_IN1_autocorr_calc(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e01e      	b.n	800131a <ADC3_IN1_autocorr_calc+0x4a>
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80012e2:	23a5      	movs	r3, #165	; 0xa5
 80012e4:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3308      	adds	r3, #8
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4a0f      	ldr	r2, [pc, #60]	; (800132c <ADC3_IN1_autocorr_calc+0x5c>)
 80012ee:	4413      	add	r3, r2
 80012f0:	1d18      	adds	r0, r3, #4
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	490e      	ldr	r1, [pc, #56]	; (8001330 <ADC3_IN1_autocorr_calc+0x60>)
 80012f8:	f009 fd38 	bl	800ad6c <arm_dot_prod_f32>

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80012fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001300:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001334 <ADC3_IN1_autocorr_calc+0x64>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <ADC3_IN1_autocorr_calc+0x68>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d9dd      	bls.n	80012dc <ADC3_IN1_autocorr_calc+0xc>
	}
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000915c 	.word	0x2000915c
 8001330:	20009180 	.word	0x20009180
 8001334:	432f0000 	.word	0x432f0000
 8001338:	200079a4 	.word	0x200079a4

0800133c <ADC3_IN1_autoreg_coeffs>:

float32_t* ADC3_IN1_autoreg_coeffs(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001342:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_5 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800134a:	e013      	b.n	8001374 <ADC3_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_5[n] = AutoCorr_5[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 800134c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001350:	3301      	adds	r3, #1
 8001352:	4a43      	ldr	r2, [pc, #268]	; (8001460 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001364:	443b      	add	r3, r7
 8001366:	3b38      	subs	r3, #56	; 0x38
 8001368:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800136a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001374:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001378:	2b09      	cmp	r3, #9
 800137a:	d9e7      	bls.n	800134c <ADC3_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_5); //Initializes the autocorrelations matrix
 800137c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001380:	2201      	movs	r2, #1
 8001382:	210a      	movs	r1, #10
 8001384:	4837      	ldr	r0, [pc, #220]	; (8001464 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001386:	f009 fb25 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_5[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001390:	e02f      	b.n	80013f2 <ADC3_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001398:	e022      	b.n	80013e0 <ADC3_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_5[r * 10 + c] = AutoCorr_5[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800139a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800139e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80013a8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80013ac:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	461a      	mov	r2, r3
 80013ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013be:	4413      	add	r3, r2
 80013c0:	4827      	ldr	r0, [pc, #156]	; (8001460 <ADC3_IN1_autoreg_coeffs+0x124>)
 80013c2:	008a      	lsls	r2, r1, #2
 80013c4:	4402      	add	r2, r0
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80013cc:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80013d6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013da:	3301      	adds	r3, #1
 80013dc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80013e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	ddd8      	ble.n	800139a <ADC3_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80013e8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013ec:	3301      	adds	r3, #1
 80013ee:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80013f2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	ddcb      	ble.n	8001392 <ADC3_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_5); // Initializes the Yule-Walker matrix
 80013fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013fe:	220a      	movs	r2, #10
 8001400:	210a      	movs	r1, #10
 8001402:	4819      	ldr	r0, [pc, #100]	; (8001468 <ADC3_IN1_autoreg_coeffs+0x12c>)
 8001404:	f009 fae6 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_5[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_5); // Initializes the inverse Yule-Walker matrix
 8001408:	463b      	mov	r3, r7
 800140a:	220a      	movs	r2, #10
 800140c:	210a      	movs	r1, #10
 800140e:	4817      	ldr	r0, [pc, #92]	; (800146c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001410:	f009 fae0 	bl	800a9d4 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_5 = arm_mat_inverse_f32(&ADC3_IN1_YW_mtx, &ADC3_IN1_Inv_YW_mtx);
 8001414:	4915      	ldr	r1, [pc, #84]	; (800146c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <ADC3_IN1_autoreg_coeffs+0x12c>)
 8001418:	f009 f9d6 	bl	800a7c8 <arm_mat_inverse_f32>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_5 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001422:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001426:	2b00      	cmp	r3, #0
 8001428:	d113      	bne.n	8001452 <ADC3_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800142a:	2228      	movs	r2, #40	; 0x28
 800142c:	2100      	movs	r1, #0
 800142e:	4810      	ldr	r0, [pc, #64]	; (8001470 <ADC3_IN1_autoreg_coeffs+0x134>)
 8001430:	f009 ffb4 	bl	800b39c <memset>

		arm_mat_init_f32(&ADC3_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_5); //Initializes the coefficients Matrix
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <ADC3_IN1_autoreg_coeffs+0x138>)
 8001436:	2201      	movs	r2, #1
 8001438:	210a      	movs	r1, #10
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <ADC3_IN1_autoreg_coeffs+0x13c>)
 800143c:	f009 faca 	bl	800a9d4 <arm_mat_init_f32>

        StatusCoeffs_5 = arm_mat_mult_f32( &ADC3_IN1_Inv_YW_mtx, &ADC3_IN1_AC_mtx, &ADC3_IN1_coeffs_mtx );
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <ADC3_IN1_autoreg_coeffs+0x13c>)
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001446:	f009 f91f 	bl	800a688 <arm_mat_mult_f32>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <ADC3_IN1_autoreg_coeffs+0x140>)
 8001450:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_5;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <ADC3_IN1_autoreg_coeffs+0x138>)
}
 8001454:	4618      	mov	r0, r3
 8001456:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200079a4 	.word	0x200079a4
 8001464:	20009d14 	.word	0x20009d14
 8001468:	20009cb4 	.word	0x20009cb4
 800146c:	20009ce4 	.word	0x20009ce4
 8001470:	200079fc 	.word	0x200079fc
 8001474:	20007a9c 	.word	0x20007a9c
 8001478:	20009d44 	.word	0x20009d44
 800147c:	20009d58 	.word	0x20009d58

08001480 <ADC3_IN2_autocorr_calc>:



void ADC3_IN2_autocorr_calc(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	e01e      	b.n	80014ca <ADC3_IN2_autocorr_calc+0x4a>
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001492:	23a5      	movs	r3, #165	; 0xa5
 8001494:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3308      	adds	r3, #8
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <ADC3_IN2_autocorr_calc+0x5c>)
 800149e:	4413      	add	r3, r2
 80014a0:	1d18      	adds	r0, r3, #4
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <ADC3_IN2_autocorr_calc+0x60>)
 80014a8:	f009 fc60 	bl	800ad6c <arm_dot_prod_f32>

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80014ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80014b0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014e4 <ADC3_IN2_autocorr_calc+0x64>
 80014b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <ADC3_IN2_autocorr_calc+0x68>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	d9dd      	bls.n	800148c <ADC3_IN2_autocorr_calc+0xc>
	}
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200096f8 	.word	0x200096f8
 80014e0:	2000971c 	.word	0x2000971c
 80014e4:	432f0000 	.word	0x432f0000
 80014e8:	200079d0 	.word	0x200079d0

080014ec <ADC3_IN2_autoreg_coeffs>:

float32_t* ADC3_IN2_autoreg_coeffs(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80014f2:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_6 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80014fa:	e013      	b.n	8001524 <ADC3_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_6[n] = AutoCorr_6[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80014fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001500:	3301      	adds	r3, #1
 8001502:	4a43      	ldr	r2, [pc, #268]	; (8001610 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001514:	443b      	add	r3, r7
 8001516:	3b38      	subs	r3, #56	; 0x38
 8001518:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800151a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001524:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001528:	2b09      	cmp	r3, #9
 800152a:	d9e7      	bls.n	80014fc <ADC3_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_6); //Initializes the autocorrelations matrix
 800152c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001530:	2201      	movs	r2, #1
 8001532:	210a      	movs	r1, #10
 8001534:	4837      	ldr	r0, [pc, #220]	; (8001614 <ADC3_IN2_autoreg_coeffs+0x128>)
 8001536:	f009 fa4d 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_6[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001540:	e02f      	b.n	80015a2 <ADC3_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001548:	e022      	b.n	8001590 <ADC3_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_6[r * 10 + c] = AutoCorr_6[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800154a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800154e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001558:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800155c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	461a      	mov	r2, r3
 800156a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800156e:	4413      	add	r3, r2
 8001570:	4827      	ldr	r0, [pc, #156]	; (8001610 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001572:	008a      	lsls	r2, r1, #2
 8001574:	4402      	add	r2, r0
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800157c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001586:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001590:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001594:	2b09      	cmp	r3, #9
 8001596:	ddd8      	ble.n	800154a <ADC3_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001598:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800159c:	3301      	adds	r3, #1
 800159e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80015a2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80015a6:	2b09      	cmp	r3, #9
 80015a8:	ddcb      	ble.n	8001542 <ADC3_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_6); // Initializes the Yule-Walker matrix
 80015aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80015ae:	220a      	movs	r2, #10
 80015b0:	210a      	movs	r1, #10
 80015b2:	4819      	ldr	r0, [pc, #100]	; (8001618 <ADC3_IN2_autoreg_coeffs+0x12c>)
 80015b4:	f009 fa0e 	bl	800a9d4 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_6[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_6); // Initializes the inverse Yule-Walker matrix
 80015b8:	463b      	mov	r3, r7
 80015ba:	220a      	movs	r2, #10
 80015bc:	210a      	movs	r1, #10
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <ADC3_IN2_autoreg_coeffs+0x130>)
 80015c0:	f009 fa08 	bl	800a9d4 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_6 = arm_mat_inverse_f32(&ADC3_IN2_YW_mtx, &ADC3_IN2_Inv_YW_mtx);
 80015c4:	4915      	ldr	r1, [pc, #84]	; (800161c <ADC3_IN2_autoreg_coeffs+0x130>)
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <ADC3_IN2_autoreg_coeffs+0x12c>)
 80015c8:	f009 f8fe 	bl	800a7c8 <arm_mat_inverse_f32>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_6 == ARM_MATH_SUCCESS) // Check if operation was successful
 80015d2:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d113      	bne.n	8001602 <ADC3_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_6, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015e0:	f009 fedc 	bl	800b39c <memset>

		arm_mat_init_f32(&ADC3_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_6); //Initializes the coefficients Matrix
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	210a      	movs	r1, #10
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015ec:	f009 f9f2 	bl	800a9d4 <arm_mat_init_f32>

        StatusCoeffs_6 = arm_mat_mult_f32( &ADC3_IN2_Inv_YW_mtx, &ADC3_IN2_AC_mtx, &ADC3_IN2_coeffs_mtx );
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <ADC3_IN2_autoreg_coeffs+0x128>)
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <ADC3_IN2_autoreg_coeffs+0x130>)
 80015f6:	f009 f847 	bl	800a688 <arm_mat_mult_f32>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <ADC3_IN2_autoreg_coeffs+0x13c>)
 8001600:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_6;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <ADC3_IN2_autoreg_coeffs+0x134>)
}
 8001604:	4618      	mov	r0, r3
 8001606:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200079d0 	.word	0x200079d0
 8001614:	20009d1c 	.word	0x20009d1c
 8001618:	20009cbc 	.word	0x20009cbc
 800161c:	20009cec 	.word	0x20009cec
 8001620:	20007ac4 	.word	0x20007ac4
 8001624:	20009d4c 	.word	0x20009d4c
 8001628:	20009d59 	.word	0x20009d59

0800162c <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e00a      	b.n	8001650 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3304      	adds	r3, #4
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	3301      	adds	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b07      	cmp	r3, #7
 8001654:	d9f1      	bls.n	800163a <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	e00b      	b.n	800167a <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3308      	adds	r3, #8
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3304      	adds	r3, #4
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3301      	adds	r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2bae      	cmp	r3, #174	; 0xae
 800167e:	d9f0      	bls.n	8001662 <MA_ADC1_IN1_Init+0x36>
	}
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e05a      	b.n	8001754 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4932      	ldr	r1, [pc, #200]	; (800176c <MA_ADC1_IN1_Update+0xdc>)
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	3212      	adds	r2, #18
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	440a      	add	r2, r1
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3304      	adds	r3, #4
 80016b6:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d102      	bne.n	80016d0 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3308      	adds	r3, #8
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e02c      	b.n	8001748 <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e001      	b.n	8001700 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 80016fc:	2307      	movs	r3, #7
 80016fe:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3308      	adds	r3, #8
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3304      	adds	r3, #4
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	4a17      	ldr	r2, [pc, #92]	; (8001770 <MA_ADC1_IN1_Update+0xe0>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	edd3 6a00 	vldr	s13, [r3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3308      	adds	r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b07      	cmp	r3, #7
 800174c:	d9cf      	bls.n	80016ee <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800175a:	4293      	cmp	r3, r2
 800175c:	d99f      	bls.n	800169e <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000048 	.word	0x20000048
 8001770:	20000000 	.word	0x20000000

08001774 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e00a      	b.n	8001798 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	3301      	adds	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b07      	cmp	r3, #7
 800179c:	d9f1      	bls.n	8001782 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	e00b      	b.n	80017c2 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	3308      	adds	r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	3301      	adds	r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2bae      	cmp	r3, #174	; 0xae
 80017c6:	d9f0      	bls.n	80017aa <MA_ADC1_IN2_Init+0x36>
	}
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e05a      	b.n	800189c <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4932      	ldr	r1, [pc, #200]	; (80018b4 <MA_ADC1_IN2_Update+0xdc>)
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	3212      	adds	r2, #18
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	440a      	add	r2, r1
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3304      	adds	r3, #4
 80017fe:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b08      	cmp	r3, #8
 8001810:	d102      	bne.n	8001818 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3308      	adds	r3, #8
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3304      	adds	r3, #4
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e02c      	b.n	8001890 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	3b01      	subs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e001      	b.n	8001848 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8001844:	2307      	movs	r3, #7
 8001846:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3308      	adds	r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3304      	adds	r3, #4
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <MA_ADC1_IN2_Update+0xe0>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	edd3 6a00 	vldr	s13, [r3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3304      	adds	r3, #4
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3308      	adds	r3, #8
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3304      	adds	r3, #4
 8001886:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b07      	cmp	r3, #7
 8001894:	d9cf      	bls.n	8001836 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d99f      	bls.n	80017e6 <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20001454 	.word	0x20001454
 80018b8:	20000000 	.word	0x20000000

080018bc <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e00a      	b.n	80018e0 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	d9f1      	bls.n	80018ca <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	e00b      	b.n	800190a <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3308      	adds	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3304      	adds	r3, #4
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3301      	adds	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2bae      	cmp	r3, #174	; 0xae
 800190e:	d9f0      	bls.n	80018f2 <MA_ADC2_IN3_Init+0x36>
	}
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e05a      	b.n	80019e4 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4932      	ldr	r1, [pc, #200]	; (80019fc <MA_ADC2_IN3_Update+0xdc>)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	3212      	adds	r2, #18
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	440a      	add	r2, r1
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3304      	adds	r3, #4
 8001946:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b08      	cmp	r3, #8
 8001958:	d102      	bne.n	8001960 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3308      	adds	r3, #8
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e02c      	b.n	80019d8 <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	3b01      	subs	r3, #1
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e001      	b.n	8001990 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 800198c:	2307      	movs	r3, #7
 800198e:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3308      	adds	r3, #8
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <MA_ADC2_IN3_Update+0xe0>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	edd3 6a00 	vldr	s13, [r3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3308      	adds	r3, #8
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3301      	adds	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b07      	cmp	r3, #7
 80019dc:	d9cf      	bls.n	800197e <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d99f      	bls.n	800192e <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	20002860 	.word	0x20002860
 8001a00:	20000000 	.word	0x20000000

08001a04 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e00a      	b.n	8001a28 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	d9f1      	bls.n	8001a12 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	e00b      	b.n	8001a52 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3308      	adds	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3304      	adds	r3, #4
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2bae      	cmp	r3, #174	; 0xae
 8001a56:	d9f0      	bls.n	8001a3a <MA_ADC2_IN4_Init+0x36>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e05a      	b.n	8001b2c <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4932      	ldr	r1, [pc, #200]	; (8001b44 <MA_ADC2_IN4_Update+0xdc>)
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	3212      	adds	r2, #18
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	440a      	add	r2, r1
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d102      	bne.n	8001aa8 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3308      	adds	r3, #8
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e02c      	b.n	8001b20 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e001      	b.n	8001ad8 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3308      	adds	r3, #8
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	ed93 7a00 	vldr	s14, [r3]
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <MA_ADC2_IN4_Update+0xe0>)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	edd3 6a00 	vldr	s13, [r3]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3304      	adds	r3, #4
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d9cf      	bls.n	8001ac6 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d99f      	bls.n	8001a76 <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20003c6c 	.word	0x20003c6c
 8001b48:	20000000 	.word	0x20000000

08001b4c <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e00a      	b.n	8001b70 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3304      	adds	r3, #4
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b07      	cmp	r3, #7
 8001b74:	d9f1      	bls.n	8001b5a <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	e00b      	b.n	8001b9a <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3308      	adds	r3, #8
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3301      	adds	r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2bae      	cmp	r3, #174	; 0xae
 8001b9e:	d9f0      	bls.n	8001b82 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e05a      	b.n	8001c74 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4932      	ldr	r1, [pc, #200]	; (8001c8c <MA_ADC3_IN1_Update+0xdc>)
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	3212      	adds	r2, #18
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	440a      	add	r2, r1
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d102      	bne.n	8001bf0 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e02c      	b.n	8001c68 <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e001      	b.n	8001c20 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3308      	adds	r3, #8
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <MA_ADC3_IN1_Update+0xe0>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	edd3 6a00 	vldr	s13, [r3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3308      	adds	r3, #8
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3301      	adds	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	d9cf      	bls.n	8001c0e <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d99f      	bls.n	8001bbe <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20005078 	.word	0x20005078
 8001c90:	20000000 	.word	0x20000000

08001c94 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e00a      	b.n	8001cb8 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3304      	adds	r3, #4
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d9f1      	bls.n	8001ca2 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	e00b      	b.n	8001ce2 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3308      	adds	r3, #8
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2bae      	cmp	r3, #174	; 0xae
 8001ce6:	d9f0      	bls.n	8001cca <MA_ADC3_IN2_Init+0x36>
	}
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e05a      	b.n	8001dbc <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4932      	ldr	r1, [pc, #200]	; (8001dd4 <MA_ADC3_IN2_Update+0xdc>)
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	3212      	adds	r2, #18
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	440a      	add	r2, r1
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d102      	bne.n	8001d38 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e02c      	b.n	8001db0 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e001      	b.n	8001d68 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8001d64:	2307      	movs	r3, #7
 8001d66:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3308      	adds	r3, #8
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	ed93 7a00 	vldr	s14, [r3]
 8001d78:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <MA_ADC3_IN2_Update+0xe0>)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	edd3 6a00 	vldr	s13, [r3]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	d9cf      	bls.n	8001d56 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d99f      	bls.n	8001d06 <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20006484 	.word	0x20006484
 8001dd8:	20000000 	.word	0x20000000

08001ddc <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <init_ADC1_IN1_struct+0x1c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001de8:	3314      	adds	r3, #20
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <init_ADC1_IN1_struct+0x20>)
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	2000bb30 	.word	0x2000bb30
 8001dfc:	20000048 	.word	0x20000048

08001e00 <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001e06:	7819      	ldrb	r1, [r3, #0]
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4803      	ldr	r0, [pc, #12]	; (8001e20 <init_ADC1_IN1_FO_biquad_filter+0x20>)
 8001e12:	f008 ff9f 	bl	800ad54 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000048 	.word	0x20000048
 8001e20:	20001420 	.word	0x20001420

08001e24 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001e2a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e32:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001e40:	4803      	ldr	r0, [pc, #12]	; (8001e50 <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8001e42:	f008 fdcb 	bl	800a9dc <arm_biquad_cascade_df2T_f32>
   }
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000048 	.word	0x20000048
 8001e50:	20001420 	.word	0x20001420

08001e54 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <init_ADC1_IN2_struct+0x1c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001e60:	3320      	adds	r3, #32
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <init_ADC1_IN2_struct+0x20>)
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	2000bb30 	.word	0x2000bb30
 8001e74:	20001454 	.word	0x20001454

08001e78 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e7e:	7819      	ldrb	r1, [r3, #0]
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8001e8a:	f008 ff63 	bl	800ad54 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20001454 	.word	0x20001454
 8001e98:	2000282c 	.word	0x2000282c

08001e9c <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001ea2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eaa:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 8001eba:	f008 fd8f 	bl	800a9dc <arm_biquad_cascade_df2T_f32>
   }
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20001454 	.word	0x20001454
 8001ec8:	2000282c 	.word	0x2000282c

08001ecc <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <init_ADC2_IN3_struct+0x1c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001ed8:	3314      	adds	r3, #20
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <init_ADC2_IN3_struct+0x20>)
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	2000bb34 	.word	0x2000bb34
 8001eec:	20002860 	.word	0x20002860

08001ef0 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001ef6:	7819      	ldrb	r1, [r3, #0]
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	4803      	ldr	r0, [pc, #12]	; (8001f10 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8001f02:	f008 ff27 	bl	800ad54 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20002860 	.word	0x20002860
 8001f10:	20003c38 	.word	0x20003c38

08001f14 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001f1a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f22:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8001f32:	f008 fd53 	bl	800a9dc <arm_biquad_cascade_df2T_f32>
   }
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20002860 	.word	0x20002860
 8001f40:	20003c38 	.word	0x20003c38

08001f44 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <init_ADC2_IN4_struct+0x1c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001f50:	3320      	adds	r3, #32
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <init_ADC2_IN4_struct+0x20>)
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	2000bb34 	.word	0x2000bb34
 8001f64:	20003c6c 	.word	0x20003c6c

08001f68 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f6e:	7819      	ldrb	r1, [r3, #0]
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 8001f7a:	f008 feeb 	bl	800ad54 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20003c6c 	.word	0x20003c6c
 8001f88:	20005044 	.word	0x20005044

08001f8c <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f92:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 8001faa:	f008 fd17 	bl	800a9dc <arm_biquad_cascade_df2T_f32>
   }
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20003c6c 	.word	0x20003c6c
 8001fb8:	20005044 	.word	0x20005044

08001fbc <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <init_ADC3_IN1_struct+0x1c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001fc8:	3314      	adds	r3, #20
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <init_ADC3_IN1_struct+0x20>)
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	2000bb38 	.word	0x2000bb38
 8001fdc:	20005078 	.word	0x20005078

08001fe0 <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001fe6:	7819      	ldrb	r1, [r3, #0]
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8001ff2:	f008 feaf 	bl	800ad54 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20005078 	.word	0x20005078
 8002000:	20006450 	.word	0x20006450

08002004 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800200a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8002018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8002022:	f008 fcdb 	bl	800a9dc <arm_biquad_cascade_df2T_f32>
   }
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20005078 	.word	0x20005078
 8002030:	20006450 	.word	0x20006450

08002034 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <init_ADC3_IN2_struct+0x1c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8002040:	3320      	adds	r3, #32
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <init_ADC3_IN2_struct+0x20>)
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	2000bb38 	.word	0x2000bb38
 8002054:	20006484 	.word	0x20006484

08002058 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 800205e:	7819      	ldrb	r1, [r3, #0]
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8002062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 800206a:	f008 fe73 	bl	800ad54 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20006484 	.word	0x20006484
 8002078:	2000785c 	.word	0x2000785c

0800207c <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002082:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 800209a:	f008 fc9f 	bl	800a9dc <arm_biquad_cascade_df2T_f32>
   }
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20006484 	.word	0x20006484
 80020a8:	2000785c 	.word	0x2000785c

080020ac <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	e010      	b.n	80020e2 <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3308      	adds	r3, #8
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2bae      	cmp	r3, #174	; 0xae
 80020e6:	d9eb      	bls.n	80020c0 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80020e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002108 <ADC1_IN1_OffsetCalc+0x5c>
 80020f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020f4:	eef0 7a66 	vmov.f32	s15, s13
}
 80020f8:	eeb0 0a67 	vmov.f32	s0, s15
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	432f0000 	.word	0x432f0000

0800210c <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	e010      	b.n	8002142 <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3308      	adds	r3, #8
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ed97 7a03 	vldr	s14, [r7, #12]
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2bae      	cmp	r3, #174	; 0xae
 8002146:	d9eb      	bls.n	8002120 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002148:	edd7 7a03 	vldr	s15, [r7, #12]
 800214c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002168 <ADC1_IN2_OffsetCalc+0x5c>
 8002150:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002154:	eef0 7a66 	vmov.f32	s15, s13
}
 8002158:	eeb0 0a67 	vmov.f32	s0, s15
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	432f0000 	.word	0x432f0000

0800216c <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	e010      	b.n	80021a2 <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3308      	adds	r3, #8
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ed97 7a03 	vldr	s14, [r7, #12]
 8002194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002198:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3301      	adds	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2bae      	cmp	r3, #174	; 0xae
 80021a6:	d9eb      	bls.n	8002180 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80021a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ac:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021c8 <ADC2_IN3_OffsetCalc+0x5c>
 80021b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021b4:	eef0 7a66 	vmov.f32	s15, s13
}
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	432f0000 	.word	0x432f0000

080021cc <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	e010      	b.n	8002202 <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3308      	adds	r3, #8
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80021f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3301      	adds	r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2bae      	cmp	r3, #174	; 0xae
 8002206:	d9eb      	bls.n	80021e0 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002208:	edd7 7a03 	vldr	s15, [r7, #12]
 800220c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002228 <ADC2_IN4_OffsetCalc+0x5c>
 8002210:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002214:	eef0 7a66 	vmov.f32	s15, s13
}
 8002218:	eeb0 0a67 	vmov.f32	s0, s15
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	432f0000 	.word	0x432f0000

0800222c <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	e010      	b.n	8002262 <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	3308      	adds	r3, #8
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3304      	adds	r3, #4
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ed97 7a03 	vldr	s14, [r7, #12]
 8002254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002258:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3301      	adds	r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2bae      	cmp	r3, #174	; 0xae
 8002266:	d9eb      	bls.n	8002240 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002268:	edd7 7a03 	vldr	s15, [r7, #12]
 800226c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002288 <ADC3_IN1_OffsetCalc+0x5c>
 8002270:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002274:	eef0 7a66 	vmov.f32	s15, s13
}
 8002278:	eeb0 0a67 	vmov.f32	s0, s15
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	432f0000 	.word	0x432f0000

0800228c <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	e010      	b.n	80022c2 <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3308      	adds	r3, #8
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3301      	adds	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2bae      	cmp	r3, #174	; 0xae
 80022c6:	d9eb      	bls.n	80022a0 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80022c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022e8 <ADC3_IN2_OffsetCalc+0x5c>
 80022d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80022d8:	eeb0 0a67 	vmov.f32	s0, s15
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	432f0000 	.word	0x432f0000

080022ec <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e01a      	b.n	800233a <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3308      	adds	r3, #8
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	edd7 7a00 	vldr	s15, [r7]
 8002318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 8002320:	edd7 7a03 	vldr	s15, [r7, #12]
 8002324:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002328:	ed97 7a05 	vldr	s14, [r7, #20]
 800232c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002330:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	3301      	adds	r3, #1
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2bae      	cmp	r3, #174	; 0xae
 800233e:	d9e1      	bls.n	8002304 <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002340:	ed97 7a05 	vldr	s14, [r7, #20]
 8002344:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002380 <ADC1_IN1_SD_BL+0x94>
 8002348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234c:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 8002350:	6978      	ldr	r0, [r7, #20]
 8002352:	f7fe f8c5 	bl	80004e0 <__aeabi_f2d>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	ec43 2b10 	vmov	d0, r2, r3
 800235e:	f009 f907 	bl	800b570 <sqrt>
 8002362:	ec53 2b10 	vmov	r2, r3, d0
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fc09 	bl	8000b80 <__aeabi_d2f>
 800236e:	4603      	mov	r3, r0
 8002370:	ee07 3a90 	vmov	s15, r3
}
 8002374:	eeb0 0a67 	vmov.f32	s0, s15
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	432f0000 	.word	0x432f0000

08002384 <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e01a      	b.n	80023d2 <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	3308      	adds	r3, #8
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	ed93 7a00 	vldr	s14, [r3]
 80023ac:	edd7 7a00 	vldr	s15, [r7]
 80023b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 80023b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	3301      	adds	r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2bae      	cmp	r3, #174	; 0xae
 80023d6:	d9e1      	bls.n	800239c <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80023d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023dc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002418 <ADC1_IN2_SD_BL+0x94>
 80023e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023e4:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f7fe f879 	bl	80004e0 <__aeabi_f2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	ec43 2b10 	vmov	d0, r2, r3
 80023f6:	f009 f8bb 	bl	800b570 <sqrt>
 80023fa:	ec53 2b10 	vmov	r2, r3, d0
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fbbd 	bl	8000b80 <__aeabi_d2f>
 8002406:	4603      	mov	r3, r0
 8002408:	ee07 3a90 	vmov	s15, r3

}
 800240c:	eeb0 0a67 	vmov.f32	s0, s15
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	432f0000 	.word	0x432f0000

0800241c <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e01a      	b.n	800246a <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	3308      	adds	r3, #8
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3304      	adds	r3, #4
 8002440:	ed93 7a00 	vldr	s14, [r3]
 8002444:	edd7 7a00 	vldr	s15, [r7]
 8002448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 8002450:	edd7 7a03 	vldr	s15, [r7, #12]
 8002454:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002458:	ed97 7a05 	vldr	s14, [r7, #20]
 800245c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002460:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	3301      	adds	r3, #1
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2bae      	cmp	r3, #174	; 0xae
 800246e:	d9e1      	bls.n	8002434 <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002470:	ed97 7a05 	vldr	s14, [r7, #20]
 8002474:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80024b0 <ADC2_IN3_SD_BL+0x94>
 8002478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800247c:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f7fe f82d 	bl	80004e0 <__aeabi_f2d>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	ec43 2b10 	vmov	d0, r2, r3
 800248e:	f009 f86f 	bl	800b570 <sqrt>
 8002492:	ec53 2b10 	vmov	r2, r3, d0
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fb71 	bl	8000b80 <__aeabi_d2f>
 800249e:	4603      	mov	r3, r0
 80024a0:	ee07 3a90 	vmov	s15, r3

}
 80024a4:	eeb0 0a67 	vmov.f32	s0, s15
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	432f0000 	.word	0x432f0000

080024b4 <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	e01a      	b.n	8002502 <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	3308      	adds	r3, #8
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3304      	adds	r3, #4
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	edd7 7a00 	vldr	s15, [r7]
 80024e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 80024e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	3301      	adds	r3, #1
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2bae      	cmp	r3, #174	; 0xae
 8002506:	d9e1      	bls.n	80024cc <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002508:	ed97 7a05 	vldr	s14, [r7, #20]
 800250c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002548 <ADC2_IN4_SD_BL+0x94>
 8002510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002514:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 8002518:	6978      	ldr	r0, [r7, #20]
 800251a:	f7fd ffe1 	bl	80004e0 <__aeabi_f2d>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	ec43 2b10 	vmov	d0, r2, r3
 8002526:	f009 f823 	bl	800b570 <sqrt>
 800252a:	ec53 2b10 	vmov	r2, r3, d0
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fb25 	bl	8000b80 <__aeabi_d2f>
 8002536:	4603      	mov	r3, r0
 8002538:	ee07 3a90 	vmov	s15, r3

}
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	432f0000 	.word	0x432f0000

0800254c <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e01a      	b.n	800259a <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	3308      	adds	r3, #8
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	ed93 7a00 	vldr	s14, [r3]
 8002574:	edd7 7a00 	vldr	s15, [r7]
 8002578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 8002580:	edd7 7a03 	vldr	s15, [r7, #12]
 8002584:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002588:	ed97 7a05 	vldr	s14, [r7, #20]
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	3301      	adds	r3, #1
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2bae      	cmp	r3, #174	; 0xae
 800259e:	d9e1      	bls.n	8002564 <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80025a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025a4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80025e0 <ADC3_IN1_SD_BL+0x94>
 80025a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ac:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 80025b0:	6978      	ldr	r0, [r7, #20]
 80025b2:	f7fd ff95 	bl	80004e0 <__aeabi_f2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b10 	vmov	d0, r2, r3
 80025be:	f008 ffd7 	bl	800b570 <sqrt>
 80025c2:	ec53 2b10 	vmov	r2, r3, d0
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe fad9 	bl	8000b80 <__aeabi_d2f>
 80025ce:	4603      	mov	r3, r0
 80025d0:	ee07 3a90 	vmov	s15, r3

}
 80025d4:	eeb0 0a67 	vmov.f32	s0, s15
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	432f0000 	.word	0x432f0000

080025e4 <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e01a      	b.n	8002632 <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	3308      	adds	r3, #8
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	3304      	adds	r3, #4
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	edd7 7a00 	vldr	s15, [r7]
 8002610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002614:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 8002618:	edd7 7a03 	vldr	s15, [r7, #12]
 800261c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002620:	ed97 7a05 	vldr	s14, [r7, #20]
 8002624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002628:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3301      	adds	r3, #1
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2bae      	cmp	r3, #174	; 0xae
 8002636:	d9e1      	bls.n	80025fc <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002638:	ed97 7a05 	vldr	s14, [r7, #20]
 800263c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002678 <ADC3_IN2_SD_BL+0x94>
 8002640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002644:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 8002648:	6978      	ldr	r0, [r7, #20]
 800264a:	f7fd ff49 	bl	80004e0 <__aeabi_f2d>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	ec43 2b10 	vmov	d0, r2, r3
 8002656:	f008 ff8b 	bl	800b570 <sqrt>
 800265a:	ec53 2b10 	vmov	r2, r3, d0
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fa8d 	bl	8000b80 <__aeabi_d2f>
 8002666:	4603      	mov	r3, r0
 8002668:	ee07 3a90 	vmov	s15, r3

}
 800266c:	eeb0 0a67 	vmov.f32	s0, s15
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	432f0000 	.word	0x432f0000

0800267c <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800268e:	2301      	movs	r3, #1
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	e055      	b.n	8002740 <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	3308      	adds	r3, #8
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3304      	adds	r3, #4
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	3308      	adds	r3, #8
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3304      	adds	r3, #4
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ba:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	3301      	adds	r3, #1
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	3308      	adds	r3, #8
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	3308      	adds	r3, #8
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e4:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 80026e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80026ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	dd1d      	ble.n	800273a <ADC1_IN1_SSC+0xbe>
 80026fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002702:	eef0 7ae7 	vabs.f32	s15, s15
 8002706:	ed97 7a00 	vldr	s14, [r7]
 800270a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	d40a      	bmi.n	800272a <ADC1_IN1_SSC+0xae>
 8002714:	edd7 7a02 	vldr	s15, [r7, #8]
 8002718:	eef0 7ae7 	vabs.f32	s15, s15
 800271c:	ed97 7a00 	vldr	s14, [r7]
 8002720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	d507      	bpl.n	800273a <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 800272a:	edd7 7a05 	vldr	s15, [r7, #20]
 800272e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002736:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3301      	adds	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2bae      	cmp	r3, #174	; 0xae
 8002744:	d9a6      	bls.n	8002694 <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	ee07 3a90 	vmov	s15, r3
}
 800274c:	eeb0 0a67 	vmov.f32	s0, s15
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 800275a:	b480      	push	{r7}
 800275c:	b087      	sub	sp, #28
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800276c:	2301      	movs	r3, #1
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	e055      	b.n	800281e <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	3308      	adds	r3, #8
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	3304      	adds	r3, #4
 800277e:	ed93 7a00 	vldr	s14, [r3]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3b01      	subs	r3, #1
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	3308      	adds	r3, #8
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3304      	adds	r3, #4
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002798:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	3301      	adds	r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	3308      	adds	r3, #8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	ed93 7a00 	vldr	s14, [r3]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	3308      	adds	r3, #8
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c2:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 80027c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80027ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	dd1d      	ble.n	8002818 <ADC1_IN2_SSC+0xbe>
 80027dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80027e0:	eef0 7ae7 	vabs.f32	s15, s15
 80027e4:	ed97 7a00 	vldr	s14, [r7]
 80027e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f0:	d40a      	bmi.n	8002808 <ADC1_IN2_SSC+0xae>
 80027f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f6:	eef0 7ae7 	vabs.f32	s15, s15
 80027fa:	ed97 7a00 	vldr	s14, [r7]
 80027fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	d507      	bpl.n	8002818 <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 8002808:	edd7 7a05 	vldr	s15, [r7, #20]
 800280c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002814:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3301      	adds	r3, #1
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2bae      	cmp	r3, #174	; 0xae
 8002822:	d9a6      	bls.n	8002772 <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	ee07 3a90 	vmov	s15, r3
}
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800284a:	2301      	movs	r3, #1
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e055      	b.n	80028fc <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	3308      	adds	r3, #8
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	3b01      	subs	r3, #1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	3308      	adds	r3, #8
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002876:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	3301      	adds	r3, #1
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	3308      	adds	r3, #8
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	3308      	adds	r3, #8
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3304      	adds	r3, #4
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a0:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 80028a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	dd1d      	ble.n	80028f6 <ADC2_IN3_SSC+0xbe>
 80028ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80028be:	eef0 7ae7 	vabs.f32	s15, s15
 80028c2:	ed97 7a00 	vldr	s14, [r7]
 80028c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d40a      	bmi.n	80028e6 <ADC2_IN3_SSC+0xae>
 80028d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d4:	eef0 7ae7 	vabs.f32	s15, s15
 80028d8:	ed97 7a00 	vldr	s14, [r7]
 80028dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d507      	bpl.n	80028f6 <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 80028e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028f2:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	3301      	adds	r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2bae      	cmp	r3, #174	; 0xae
 8002900:	d9a6      	bls.n	8002850 <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	ee07 3a90 	vmov	s15, r3
}
 8002908:	eeb0 0a67 	vmov.f32	s0, s15
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002928:	2301      	movs	r3, #1
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	e055      	b.n	80029da <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	3308      	adds	r3, #8
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3304      	adds	r3, #4
 800293a:	ed93 7a00 	vldr	s14, [r3]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	3b01      	subs	r3, #1
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	3308      	adds	r3, #8
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3304      	adds	r3, #4
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002954:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3301      	adds	r3, #1
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	3308      	adds	r3, #8
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	ed93 7a00 	vldr	s14, [r3]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	3308      	adds	r3, #8
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297e:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 8002982:	ed97 7a03 	vldr	s14, [r7, #12]
 8002986:	edd7 7a02 	vldr	s15, [r7, #8]
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd1d      	ble.n	80029d4 <ADC2_IN4_SSC+0xbe>
 8002998:	edd7 7a03 	vldr	s15, [r7, #12]
 800299c:	eef0 7ae7 	vabs.f32	s15, s15
 80029a0:	ed97 7a00 	vldr	s14, [r7]
 80029a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ac:	d40a      	bmi.n	80029c4 <ADC2_IN4_SSC+0xae>
 80029ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80029b2:	eef0 7ae7 	vabs.f32	s15, s15
 80029b6:	ed97 7a00 	vldr	s14, [r7]
 80029ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d507      	bpl.n	80029d4 <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 80029c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029d0:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	3301      	adds	r3, #1
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2bae      	cmp	r3, #174	; 0xae
 80029de:	d9a6      	bls.n	800292e <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	ee07 3a90 	vmov	s15, r3
}
 80029e6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002a06:	2301      	movs	r3, #1
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	e055      	b.n	8002ab8 <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	3308      	adds	r3, #8
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	ed93 7a00 	vldr	s14, [r3]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	3308      	adds	r3, #8
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a32:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	ed93 7a00 	vldr	s14, [r3]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3304      	adds	r3, #4
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5c:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 8002a60:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a74:	dd1d      	ble.n	8002ab2 <ADC3_IN1_SSC+0xbe>
 8002a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a7a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a7e:	ed97 7a00 	vldr	s14, [r7]
 8002a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	d40a      	bmi.n	8002aa2 <ADC3_IN1_SSC+0xae>
 8002a8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a90:	eef0 7ae7 	vabs.f32	s15, s15
 8002a94:	ed97 7a00 	vldr	s14, [r7]
 8002a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa0:	d507      	bpl.n	8002ab2 <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 8002aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aae:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2bae      	cmp	r3, #174	; 0xae
 8002abc:	d9a6      	bls.n	8002a0c <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	ee07 3a90 	vmov	s15, r3
}
 8002ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e055      	b.n	8002b96 <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	3308      	adds	r3, #8
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	ed93 7a00 	vldr	s14, [r3]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	3308      	adds	r3, #8
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b10:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	3301      	adds	r3, #1
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	ed93 7a00 	vldr	s14, [r3]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 8002b3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	dd1d      	ble.n	8002b90 <ADC3_IN2_SSC+0xbe>
 8002b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b58:	eef0 7ae7 	vabs.f32	s15, s15
 8002b5c:	ed97 7a00 	vldr	s14, [r7]
 8002b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	d40a      	bmi.n	8002b80 <ADC3_IN2_SSC+0xae>
 8002b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b6e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b72:	ed97 7a00 	vldr	s14, [r7]
 8002b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	d507      	bpl.n	8002b90 <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 8002b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b8c:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	3301      	adds	r3, #1
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2bae      	cmp	r3, #174	; 0xae
 8002b9a:	d9a6      	bls.n	8002aea <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	ee07 3a90 	vmov	s15, r3
}
 8002ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <ADC1_IN1_STFT_Update>:
float32_t FFT_Mag_Res_6[ADC_DMA_SIXTEENTHBUFFERSIZE / 2];


//FUNCTION DEFINITIONS
float32_t* ADC1_IN1_STFT_Update(ADC1_IN1_STFT_par*ADC1_IN1_STFT_par_ptr, ADC1_IN1_MA*ADC1_IN1_STFT_ptr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
	ADC1_IN1_STFT_par_ptr->Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a68      	ldr	r2, [pc, #416]	; (8002d60 <ADC1_IN1_STFT_Update+0x1b0>)
 8002bbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC1_IN1_STFT_par_ptr->mu_1 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f)); // To ensure symmetry
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a67      	ldr	r2, [pc, #412]	; (8002d64 <ADC1_IN1_STFT_Update+0x1b4>)
 8002bc6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e041      	b.n	8002c54 <ADC1_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_1 = -0.5f*(pow(((n - ADC1_IN1_STFT_par_ptr->mu_1)/ADC1_IN1_STFT_par_ptr->Sigma_1), 2));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8002be0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8002bea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bee:	ee16 0a90 	vmov	r0, s13
 8002bf2:	f7fd fc75 	bl	80004e0 <__aeabi_f2d>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8002d58 <ADC1_IN1_STFT_Update+0x1a8>
 8002bfe:	ec43 2b10 	vmov	d0, r2, r3
 8002c02:	f008 fc45 	bl	800b490 <pow>
 8002c06:	ec51 0b10 	vmov	r0, r1, d0
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <ADC1_IN1_STFT_Update+0x1b8>)
 8002c10:	f7fd fcbe 	bl	8000590 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ffb0 	bl	8000b80 <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	60bb      	str	r3, [r7, #8]
		ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[n] = exp(exponent_1);
 8002c24:	68b8      	ldr	r0, [r7, #8]
 8002c26:	f7fd fc5b 	bl	80004e0 <__aeabi_f2d>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	ec43 2b10 	vmov	d0, r2, r3
 8002c32:	f008 fbe5 	bl	800b400 <exp>
 8002c36:	ec53 2b10 	vmov	r2, r3, d0
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fd ff9f 	bl	8000b80 <__aeabi_d2f>
 8002c42:	4601      	mov	r1, r0
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3301      	adds	r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2bae      	cmp	r3, #174	; 0xae
 8002c58:	d9ba      	bls.n	8002bd0 <ADC1_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	e01a      	b.n	8002c96 <ADC1_IN1_STFT_Update+0xe6>
	{
		ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1[m] = ADC1_IN1_STFT_ptr->MA_ADC1_IN1_OutBfr[m] * ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[m];
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	3308      	adds	r3, #8
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	33b0      	adds	r3, #176	; 0xb0
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	3301      	adds	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2bae      	cmp	r3, #174	; 0xae
 8002c9a:	d9e1      	bls.n	8002c60 <ADC1_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_1 = arm_rfft_fast_init_f32 (&ADC1_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002c9c:	21af      	movs	r1, #175	; 0xaf
 8002c9e:	4833      	ldr	r0, [pc, #204]	; (8002d6c <ADC1_IN1_STFT_Update+0x1bc>)
 8002ca0:	f007 f830 	bl	8009d04 <arm_rfft_fast_init_f32>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_1 == ARM_MATH_SUCCESS)
 8002ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d14b      	bne.n	8002d48 <ADC1_IN1_STFT_Update+0x198>
	{
		arm_rfft_fast_f32 (&ADC1_IN1_FFT, ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1 , ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr, 0 );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	482b      	ldr	r0, [pc, #172]	; (8002d6c <ADC1_IN1_STFT_Update+0x1bc>)
 8002cc0:	f007 f904 	bl	8009ecc <arm_rfft_fast_f32>

		uint32_t mag_indx_1 = 0.0f; // Index to fill the frequency magnitude response buffer without skips
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	e039      	b.n	8002d42 <ADC1_IN1_STFT_Update+0x192>
		{
			FFT_Mag_Res_1[mag_indx_1] = sqrtf((ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p]) + (ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1])); // Calculates the magnitude response
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	edd3 6a00 	vldr	s13, [r3]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	3301      	adds	r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	edd3 7a00 	vldr	s15, [r3]
 8002d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d22:	f008 fc51 	bl	800b5c8 <sqrtf>
 8002d26:	eef0 7a40 	vmov.f32	s15, s0
 8002d2a:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <ADC1_IN1_STFT_Update+0x1c0>)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_1++;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	3302      	adds	r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2bae      	cmp	r3, #174	; 0xae
 8002d46:	d9c2      	bls.n	8002cce <ADC1_IN1_STFT_Update+0x11e>
		}
	}

	return FFT_Mag_Res_1;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <ADC1_IN1_STFT_Update+0x1c0>)
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	f3af 8000 	nop.w
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	40000000 	.word	0x40000000
 8002d60:	41e80000 	.word	0x41e80000
 8002d64:	42ae0000 	.word	0x42ae0000
 8002d68:	bfe00000 	.word	0xbfe00000
 8002d6c:	20009dbc 	.word	0x20009dbc
 8002d70:	20009e4c 	.word	0x20009e4c
 8002d74:	00000000 	.word	0x00000000

08002d78 <ADC1_IN2_STFT_Update>:

float32_t* ADC1_IN2_STFT_Update(ADC1_IN2_STFT_par*ADC1_IN2_STFT_par_ptr, ADC1_IN2_MA*ADC1_IN2_STFT_ptr)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
	ADC1_IN2_STFT_par_ptr->Sigma_2 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <ADC1_IN2_STFT_Update+0x1a8>)
 8002d86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC1_IN2_STFT_par_ptr->mu_2 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a65      	ldr	r2, [pc, #404]	; (8002f24 <ADC1_IN2_STFT_Update+0x1ac>)
 8002d8e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e041      	b.n	8002e1c <ADC1_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_2 = -0.5f*(pow(((n - ADC1_IN2_STFT_par_ptr->mu_2)/ADC1_IN2_STFT_par_ptr->Sigma_2), 2));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8002da8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8002db2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002db6:	ee16 0a90 	vmov	r0, s13
 8002dba:	f7fd fb91 	bl	80004e0 <__aeabi_f2d>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002f18 <ADC1_IN2_STFT_Update+0x1a0>
 8002dc6:	ec43 2b10 	vmov	d0, r2, r3
 8002dca:	f008 fb61 	bl	800b490 <pow>
 8002dce:	ec51 0b10 	vmov	r0, r1, d0
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <ADC1_IN2_STFT_Update+0x1b0>)
 8002dd8:	f7fd fbda 	bl	8000590 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd fecc 	bl	8000b80 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	60bb      	str	r3, [r7, #8]
		ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[n] = exp(exponent_2);
 8002dec:	68b8      	ldr	r0, [r7, #8]
 8002dee:	f7fd fb77 	bl	80004e0 <__aeabi_f2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	ec43 2b10 	vmov	d0, r2, r3
 8002dfa:	f008 fb01 	bl	800b400 <exp>
 8002dfe:	ec53 2b10 	vmov	r2, r3, d0
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fd febb 	bl	8000b80 <__aeabi_d2f>
 8002e0a:	4601      	mov	r1, r0
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2bae      	cmp	r3, #174	; 0xae
 8002e20:	d9ba      	bls.n	8002d98 <ADC1_IN2_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e01a      	b.n	8002e5e <ADC1_IN2_STFT_Update+0xe6>
	{
		ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2[m] = ADC1_IN2_STFT_ptr->MA_ADC1_IN2_OutBfr[m] * ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[m];
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	ed93 7a00 	vldr	s14, [r3]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	33b0      	adds	r3, #176	; 0xb0
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3304      	adds	r3, #4
 8002e54:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2bae      	cmp	r3, #174	; 0xae
 8002e62:	d9e1      	bls.n	8002e28 <ADC1_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_2 = arm_rfft_fast_init_f32 (&ADC1_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002e64:	21af      	movs	r1, #175	; 0xaf
 8002e66:	4831      	ldr	r0, [pc, #196]	; (8002f2c <ADC1_IN2_STFT_Update+0x1b4>)
 8002e68:	f006 ff4c 	bl	8009d04 <arm_rfft_fast_init_f32>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_2 == ARM_MATH_SUCCESS)
 8002e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d149      	bne.n	8002f0c <ADC1_IN2_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC1_IN2_FFT, ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2 , ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr, 0 );
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 8002e84:	2300      	movs	r3, #0
 8002e86:	4829      	ldr	r0, [pc, #164]	; (8002f2c <ADC1_IN2_STFT_Update+0x1b4>)
 8002e88:	f007 f820 	bl	8009ecc <arm_rfft_fast_f32>

		uint32_t mag_indx_2 = 0.0f;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002e90:	e039      	b.n	8002f06 <ADC1_IN2_STFT_Update+0x18e>
		{
			FFT_Mag_Res_2[mag_indx_2] = sqrtf((ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p]) + (ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1]));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	ed93 7a00 	vldr	s14, [r3]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	edd3 6a00 	vldr	s13, [r3]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	edd3 7a00 	vldr	s15, [r3]
 8002eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee6:	f008 fb6f 	bl	800b5c8 <sqrtf>
 8002eea:	eef0 7a40 	vmov.f32	s15, s0
 8002eee:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <ADC1_IN2_STFT_Update+0x1b8>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_2++;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	3302      	adds	r3, #2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2bae      	cmp	r3, #174	; 0xae
 8002f0a:	d9c2      	bls.n	8002e92 <ADC1_IN2_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_2;
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <ADC1_IN2_STFT_Update+0x1b8>)
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	40000000 	.word	0x40000000
 8002f20:	41e80000 	.word	0x41e80000
 8002f24:	42ae0000 	.word	0x42ae0000
 8002f28:	bfe00000 	.word	0xbfe00000
 8002f2c:	20009dd4 	.word	0x20009dd4
 8002f30:	20009fa8 	.word	0x20009fa8
 8002f34:	00000000 	.word	0x00000000

08002f38 <ADC2_IN3_STFT_Update>:

float32_t* ADC2_IN3_STFT_Update(ADC2_IN3_STFT_par*ADC2_IN3_STFT_par_ptr, ADC2_IN3_MA*ADC2_IN3_STFT_ptr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	ADC2_IN3_STFT_par_ptr->Sigma_3 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a66      	ldr	r2, [pc, #408]	; (80030e0 <ADC2_IN3_STFT_Update+0x1a8>)
 8002f46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC2_IN3_STFT_par_ptr->mu_3 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a65      	ldr	r2, [pc, #404]	; (80030e4 <ADC2_IN3_STFT_Update+0x1ac>)
 8002f4e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	e041      	b.n	8002fdc <ADC2_IN3_STFT_Update+0xa4>
	{
		float32_t exponent_3 = -0.5f*(pow(((n - ADC2_IN3_STFT_par_ptr->mu_3)/ADC2_IN3_STFT_par_ptr->Sigma_3), 2));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8002f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8002f72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f76:	ee16 0a90 	vmov	r0, s13
 8002f7a:	f7fd fab1 	bl	80004e0 <__aeabi_f2d>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80030d8 <ADC2_IN3_STFT_Update+0x1a0>
 8002f86:	ec43 2b10 	vmov	d0, r2, r3
 8002f8a:	f008 fa81 	bl	800b490 <pow>
 8002f8e:	ec51 0b10 	vmov	r0, r1, d0
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	4b54      	ldr	r3, [pc, #336]	; (80030e8 <ADC2_IN3_STFT_Update+0x1b0>)
 8002f98:	f7fd fafa 	bl	8000590 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fdec 	bl	8000b80 <__aeabi_d2f>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60bb      	str	r3, [r7, #8]
		ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[n] = exp(exponent_3);
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f7fd fa97 	bl	80004e0 <__aeabi_f2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	ec43 2b10 	vmov	d0, r2, r3
 8002fba:	f008 fa21 	bl	800b400 <exp>
 8002fbe:	ec53 2b10 	vmov	r2, r3, d0
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f7fd fddb 	bl	8000b80 <__aeabi_d2f>
 8002fca:	4601      	mov	r1, r0
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2bae      	cmp	r3, #174	; 0xae
 8002fe0:	d9ba      	bls.n	8002f58 <ADC2_IN3_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e01a      	b.n	800301e <ADC2_IN3_STFT_Update+0xe6>
	{
		ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3[m] = ADC2_IN3_STFT_ptr->MA_ADC2_IN3_OutBfr[m] * ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[m];
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	3308      	adds	r3, #8
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	ed93 7a00 	vldr	s14, [r3]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	33b0      	adds	r3, #176	; 0xb0
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	3301      	adds	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2bae      	cmp	r3, #174	; 0xae
 8003022:	d9e1      	bls.n	8002fe8 <ADC2_IN3_STFT_Update+0xb0>
	}

	arm_status FFT_status_3 = arm_rfft_fast_init_f32 (&ADC2_IN3_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003024:	21af      	movs	r1, #175	; 0xaf
 8003026:	4831      	ldr	r0, [pc, #196]	; (80030ec <ADC2_IN3_STFT_Update+0x1b4>)
 8003028:	f006 fe6c 	bl	8009d04 <arm_rfft_fast_init_f32>
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_3 == ARM_MATH_SUCCESS)
 8003030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d149      	bne.n	80030cc <ADC2_IN3_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC2_IN3_FFT, ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3 , ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr, 0 );
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 8003044:	2300      	movs	r3, #0
 8003046:	4829      	ldr	r0, [pc, #164]	; (80030ec <ADC2_IN3_STFT_Update+0x1b4>)
 8003048:	f006 ff40 	bl	8009ecc <arm_rfft_fast_f32>

		uint32_t mag_indx_3 = 0.0f;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003050:	e039      	b.n	80030c6 <ADC2_IN3_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_3] = sqrtf((ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p]) + (ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1]));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	ed93 7a00 	vldr	s14, [r3]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	3301      	adds	r3, #1
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	edd3 6a00 	vldr	s13, [r3]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3301      	adds	r3, #1
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	f008 fa8f 	bl	800b5c8 <sqrtf>
 80030aa:	eef0 7a40 	vmov.f32	s15, s0
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <ADC2_IN3_STFT_Update+0x1b8>)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_3++;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3301      	adds	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3302      	adds	r3, #2
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2bae      	cmp	r3, #174	; 0xae
 80030ca:	d9c2      	bls.n	8003052 <ADC2_IN3_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_3;
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <ADC2_IN3_STFT_Update+0x1b8>)
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3720      	adds	r7, #32
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	00000000 	.word	0x00000000
 80030dc:	40000000 	.word	0x40000000
 80030e0:	41e80000 	.word	0x41e80000
 80030e4:	42ae0000 	.word	0x42ae0000
 80030e8:	bfe00000 	.word	0xbfe00000
 80030ec:	20009dec 	.word	0x20009dec
 80030f0:	2000a104 	.word	0x2000a104
 80030f4:	00000000 	.word	0x00000000

080030f8 <ADC2_IN4_STFT_Update>:

float32_t* ADC2_IN4_STFT_Update(ADC2_IN4_STFT_par*ADC2_IN4_STFT_par_ptr, ADC2_IN4_MA*ADC2_IN4_STFT_ptr)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
	ADC2_IN4_STFT_par_ptr->Sigma_4 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a66      	ldr	r2, [pc, #408]	; (80032a0 <ADC2_IN4_STFT_Update+0x1a8>)
 8003106:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC2_IN4_STFT_par_ptr->mu_4 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <ADC2_IN4_STFT_Update+0x1ac>)
 800310e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e041      	b.n	800319c <ADC2_IN4_STFT_Update+0xa4>
	{
		float32_t exponent_4 = -0.5f*(pow(((n - ADC2_IN4_STFT_par_ptr->mu_4)/ADC2_IN4_STFT_par_ptr->Sigma_4), 2));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8003128:	ee37 7a67 	vsub.f32	s14, s14, s15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 8003132:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003136:	ee16 0a90 	vmov	r0, s13
 800313a:	f7fd f9d1 	bl	80004e0 <__aeabi_f2d>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003298 <ADC2_IN4_STFT_Update+0x1a0>
 8003146:	ec43 2b10 	vmov	d0, r2, r3
 800314a:	f008 f9a1 	bl	800b490 <pow>
 800314e:	ec51 0b10 	vmov	r0, r1, d0
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <ADC2_IN4_STFT_Update+0x1b0>)
 8003158:	f7fd fa1a 	bl	8000590 <__aeabi_dmul>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fd0c 	bl	8000b80 <__aeabi_d2f>
 8003168:	4603      	mov	r3, r0
 800316a:	60bb      	str	r3, [r7, #8]
		ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[n] = exp(exponent_4);
 800316c:	68b8      	ldr	r0, [r7, #8]
 800316e:	f7fd f9b7 	bl	80004e0 <__aeabi_f2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	ec43 2b10 	vmov	d0, r2, r3
 800317a:	f008 f941 	bl	800b400 <exp>
 800317e:	ec53 2b10 	vmov	r2, r3, d0
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f7fd fcfb 	bl	8000b80 <__aeabi_d2f>
 800318a:	4601      	mov	r1, r0
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3301      	adds	r3, #1
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2bae      	cmp	r3, #174	; 0xae
 80031a0:	d9ba      	bls.n	8003118 <ADC2_IN4_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e01a      	b.n	80031de <ADC2_IN4_STFT_Update+0xe6>
	{
		ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4[m] = ADC2_IN4_STFT_ptr->MA_ADC2_IN4_OutBfr[m] * ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[m];
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	3308      	adds	r3, #8
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	ed93 7a00 	vldr	s14, [r3]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	33b0      	adds	r3, #176	; 0xb0
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	3301      	adds	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2bae      	cmp	r3, #174	; 0xae
 80031e2:	d9e1      	bls.n	80031a8 <ADC2_IN4_STFT_Update+0xb0>
	}

	arm_status FFT_status_4 = arm_rfft_fast_init_f32 (&ADC2_IN4_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80031e4:	21af      	movs	r1, #175	; 0xaf
 80031e6:	4831      	ldr	r0, [pc, #196]	; (80032ac <ADC2_IN4_STFT_Update+0x1b4>)
 80031e8:	f006 fd8c 	bl	8009d04 <arm_rfft_fast_init_f32>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_4 == ARM_MATH_SUCCESS)
 80031f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d149      	bne.n	800328c <ADC2_IN4_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC2_IN4_FFT, ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4 , ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr, 0 );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 8003204:	2300      	movs	r3, #0
 8003206:	4829      	ldr	r0, [pc, #164]	; (80032ac <ADC2_IN4_STFT_Update+0x1b4>)
 8003208:	f006 fe60 	bl	8009ecc <arm_rfft_fast_f32>

		uint32_t mag_indx_4 = 0.0f;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003210:	e039      	b.n	8003286 <ADC2_IN4_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_4] = sqrtf((ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p]) + (ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1]));
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	ed93 7a00 	vldr	s14, [r3]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3301      	adds	r3, #1
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	edd3 6a00 	vldr	s13, [r3]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	3301      	adds	r3, #1
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003262:	eeb0 0a67 	vmov.f32	s0, s15
 8003266:	f008 f9af 	bl	800b5c8 <sqrtf>
 800326a:	eef0 7a40 	vmov.f32	s15, s0
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <ADC2_IN4_STFT_Update+0x1b8>)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_4++;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3301      	adds	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	3302      	adds	r3, #2
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2bae      	cmp	r3, #174	; 0xae
 800328a:	d9c2      	bls.n	8003212 <ADC2_IN4_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_4;
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <ADC2_IN4_STFT_Update+0x1bc>)
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	00000000 	.word	0x00000000
 800329c:	40000000 	.word	0x40000000
 80032a0:	41e80000 	.word	0x41e80000
 80032a4:	42ae0000 	.word	0x42ae0000
 80032a8:	bfe00000 	.word	0xbfe00000
 80032ac:	20009e04 	.word	0x20009e04
 80032b0:	2000a104 	.word	0x2000a104
 80032b4:	2000a260 	.word	0x2000a260

080032b8 <ADC3_IN1_STFT_Update>:

float32_t* ADC3_IN1_STFT_Update(ADC3_IN1_STFT_par*ADC3_IN1_STFT_par_ptr, ADC3_IN1_MA*ADC3_IN1_STFT_ptr)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
	ADC3_IN1_STFT_par_ptr->Sigma_5 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a66      	ldr	r2, [pc, #408]	; (8003460 <ADC3_IN1_STFT_Update+0x1a8>)
 80032c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC3_IN1_STFT_par_ptr->mu_5 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a65      	ldr	r2, [pc, #404]	; (8003464 <ADC3_IN1_STFT_Update+0x1ac>)
 80032ce:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e041      	b.n	800335c <ADC3_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_5 = -0.5f*(pow(((n - ADC3_IN1_STFT_par_ptr->mu_5)/ADC3_IN1_STFT_par_ptr->Sigma_5), 2));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80032e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 80032f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032f6:	ee16 0a90 	vmov	r0, s13
 80032fa:	f7fd f8f1 	bl	80004e0 <__aeabi_f2d>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003458 <ADC3_IN1_STFT_Update+0x1a0>
 8003306:	ec43 2b10 	vmov	d0, r2, r3
 800330a:	f008 f8c1 	bl	800b490 <pow>
 800330e:	ec51 0b10 	vmov	r0, r1, d0
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	4b54      	ldr	r3, [pc, #336]	; (8003468 <ADC3_IN1_STFT_Update+0x1b0>)
 8003318:	f7fd f93a 	bl	8000590 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	f7fd fc2c 	bl	8000b80 <__aeabi_d2f>
 8003328:	4603      	mov	r3, r0
 800332a:	60bb      	str	r3, [r7, #8]
		ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[n] = exp(exponent_5);
 800332c:	68b8      	ldr	r0, [r7, #8]
 800332e:	f7fd f8d7 	bl	80004e0 <__aeabi_f2d>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	ec43 2b10 	vmov	d0, r2, r3
 800333a:	f008 f861 	bl	800b400 <exp>
 800333e:	ec53 2b10 	vmov	r2, r3, d0
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	f7fd fc1b 	bl	8000b80 <__aeabi_d2f>
 800334a:	4601      	mov	r1, r0
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3301      	adds	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2bae      	cmp	r3, #174	; 0xae
 8003360:	d9ba      	bls.n	80032d8 <ADC3_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	e01a      	b.n	800339e <ADC3_IN1_STFT_Update+0xe6>
	{
		ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5[m] = ADC3_IN1_STFT_ptr->MA_ADC3_IN1_OutBfr[m] * ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[m];
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	3308      	adds	r3, #8
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3304      	adds	r3, #4
 8003374:	ed93 7a00 	vldr	s14, [r3]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	33b0      	adds	r3, #176	; 0xb0
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	3301      	adds	r3, #1
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2bae      	cmp	r3, #174	; 0xae
 80033a2:	d9e1      	bls.n	8003368 <ADC3_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_5 = arm_rfft_fast_init_f32 (&ADC3_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80033a4:	21af      	movs	r1, #175	; 0xaf
 80033a6:	4831      	ldr	r0, [pc, #196]	; (800346c <ADC3_IN1_STFT_Update+0x1b4>)
 80033a8:	f006 fcac 	bl	8009d04 <arm_rfft_fast_init_f32>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_5 == ARM_MATH_SUCCESS)
 80033b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d149      	bne.n	800344c <ADC3_IN1_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC3_IN1_FFT, ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5 , ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr, 0 );
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 80033c4:	2300      	movs	r3, #0
 80033c6:	4829      	ldr	r0, [pc, #164]	; (800346c <ADC3_IN1_STFT_Update+0x1b4>)
 80033c8:	f006 fd80 	bl	8009ecc <arm_rfft_fast_f32>

		uint32_t mag_indx_5 = 0.0f;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80033d0:	e039      	b.n	8003446 <ADC3_IN1_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_5] = sqrtf((ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p]) + (ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1]));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	ed93 7a00 	vldr	s14, [r3]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	3301      	adds	r3, #1
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	edd3 6a00 	vldr	s13, [r3]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3301      	adds	r3, #1
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003422:	eeb0 0a67 	vmov.f32	s0, s15
 8003426:	f008 f8cf 	bl	800b5c8 <sqrtf>
 800342a:	eef0 7a40 	vmov.f32	s15, s0
 800342e:	4a10      	ldr	r2, [pc, #64]	; (8003470 <ADC3_IN1_STFT_Update+0x1b8>)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_5++;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3301      	adds	r3, #1
 800343e:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3302      	adds	r3, #2
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2bae      	cmp	r3, #174	; 0xae
 800344a:	d9c2      	bls.n	80033d2 <ADC3_IN1_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_5;
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <ADC3_IN1_STFT_Update+0x1bc>)
}
 800344e:	4618      	mov	r0, r3
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00000000 	.word	0x00000000
 800345c:	40000000 	.word	0x40000000
 8003460:	41e80000 	.word	0x41e80000
 8003464:	42ae0000 	.word	0x42ae0000
 8003468:	bfe00000 	.word	0xbfe00000
 800346c:	20009e1c 	.word	0x20009e1c
 8003470:	2000a104 	.word	0x2000a104
 8003474:	2000a3bc 	.word	0x2000a3bc

08003478 <ADC3_IN2_STFT_Update>:

float32_t* ADC3_IN2_STFT_Update(ADC3_IN2_STFT_par*ADC3_IN2_STFT_par_ptr, ADC3_IN2_MA*ADC3_IN2_STFT_ptr)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	ADC3_IN2_STFT_par_ptr->Sigma_6 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a66      	ldr	r2, [pc, #408]	; (8003620 <ADC3_IN2_STFT_Update+0x1a8>)
 8003486:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	ADC3_IN2_STFT_par_ptr->mu_6 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <ADC3_IN2_STFT_Update+0x1ac>)
 800348e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e041      	b.n	800351c <ADC3_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_6 = -0.5f*(pow(((n - ADC3_IN2_STFT_par_ptr->mu_6)/ADC3_IN2_STFT_par_ptr->Sigma_6), 2));
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80034a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	edd3 7aaf 	vldr	s15, [r3, #700]	; 0x2bc
 80034b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034b6:	ee16 0a90 	vmov	r0, s13
 80034ba:	f7fd f811 	bl	80004e0 <__aeabi_f2d>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003618 <ADC3_IN2_STFT_Update+0x1a0>
 80034c6:	ec43 2b10 	vmov	d0, r2, r3
 80034ca:	f007 ffe1 	bl	800b490 <pow>
 80034ce:	ec51 0b10 	vmov	r0, r1, d0
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	4b54      	ldr	r3, [pc, #336]	; (8003628 <ADC3_IN2_STFT_Update+0x1b0>)
 80034d8:	f7fd f85a 	bl	8000590 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fd fb4c 	bl	8000b80 <__aeabi_d2f>
 80034e8:	4603      	mov	r3, r0
 80034ea:	60bb      	str	r3, [r7, #8]
		ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[n] = exp(exponent_6);
 80034ec:	68b8      	ldr	r0, [r7, #8]
 80034ee:	f7fc fff7 	bl	80004e0 <__aeabi_f2d>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	ec43 2b10 	vmov	d0, r2, r3
 80034fa:	f007 ff81 	bl	800b400 <exp>
 80034fe:	ec53 2b10 	vmov	r2, r3, d0
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fb3b 	bl	8000b80 <__aeabi_d2f>
 800350a:	4601      	mov	r1, r0
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3301      	adds	r3, #1
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2bae      	cmp	r3, #174	; 0xae
 8003520:	d9ba      	bls.n	8003498 <ADC3_IN2_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e01a      	b.n	800355e <ADC3_IN2_STFT_Update+0xe6>
	{
		ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6[m] = ADC3_IN2_STFT_ptr->MA_ADC3_IN2_OutBfr[m] * ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[m];
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	3308      	adds	r3, #8
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	ed93 7a00 	vldr	s14, [r3]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	33b0      	adds	r3, #176	; 0xb0
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	3301      	adds	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2bae      	cmp	r3, #174	; 0xae
 8003562:	d9e1      	bls.n	8003528 <ADC3_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_6 = arm_rfft_fast_init_f32 (&ADC3_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003564:	21af      	movs	r1, #175	; 0xaf
 8003566:	4831      	ldr	r0, [pc, #196]	; (800362c <ADC3_IN2_STFT_Update+0x1b4>)
 8003568:	f006 fbcc 	bl	8009d04 <arm_rfft_fast_init_f32>
 800356c:	4603      	mov	r3, r0
 800356e:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_6 == ARM_MATH_SUCCESS)
 8003570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d149      	bne.n	800360c <ADC3_IN2_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC3_IN2_FFT, ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6 , ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr, 0 );
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 62b0 	add.w	r2, r3, #1408	; 0x580
 8003584:	2300      	movs	r3, #0
 8003586:	4829      	ldr	r0, [pc, #164]	; (800362c <ADC3_IN2_STFT_Update+0x1b4>)
 8003588:	f006 fca0 	bl	8009ecc <arm_rfft_fast_f32>

		uint32_t mag_indx_6 = 0.0f;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003590:	e039      	b.n	8003606 <ADC3_IN2_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_6] = sqrtf((ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p]) + (ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1]));
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	ed93 7a00 	vldr	s14, [r3]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	3301      	adds	r3, #1
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	edd3 6a00 	vldr	s13, [r3]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	3301      	adds	r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e2:	eeb0 0a67 	vmov.f32	s0, s15
 80035e6:	f007 ffef 	bl	800b5c8 <sqrtf>
 80035ea:	eef0 7a40 	vmov.f32	s15, s0
 80035ee:	4a10      	ldr	r2, [pc, #64]	; (8003630 <ADC3_IN2_STFT_Update+0x1b8>)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_6++;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3302      	adds	r3, #2
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2bae      	cmp	r3, #174	; 0xae
 800360a:	d9c2      	bls.n	8003592 <ADC3_IN2_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_6;
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <ADC3_IN2_STFT_Update+0x1bc>)
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	00000000 	.word	0x00000000
 800361c:	40000000 	.word	0x40000000
 8003620:	41e80000 	.word	0x41e80000
 8003624:	42ae0000 	.word	0x42ae0000
 8003628:	bfe00000 	.word	0xbfe00000
 800362c:	20009e34 	.word	0x20009e34
 8003630:	2000a104 	.word	0x2000a104
 8003634:	2000a518 	.word	0x2000a518

08003638 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08c      	sub	sp, #48	; 0x30
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003644:	2301      	movs	r3, #1
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003648:	e030      	b.n	80036ac <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	3308      	adds	r3, #8
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	ed93 7a00 	vldr	s14, [r3]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	3308      	adds	r3, #8
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	3b01      	subs	r3, #1
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	3308      	adds	r3, #8
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	3304      	adds	r3, #4
 800367c:	edd3 6a00 	vldr	s13, [r3]
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	3301      	adds	r3, #1
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	3308      	adds	r3, #8
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369a:	4a47      	ldr	r2, [pc, #284]	; (80037b8 <ADC1_IN1_TKEO+0x180>)
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	3301      	adds	r3, #1
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	2bad      	cmp	r3, #173	; 0xad
 80036b0:	d9cb      	bls.n	800364a <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <ADC1_IN1_TKEO+0x180>)
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <ADC1_IN1_TKEO+0x180>)
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	e00e      	b.n	8003704 <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 80036e6:	4a34      	ldr	r2, [pc, #208]	; (80037b8 <ADC1_IN1_TKEO+0x180>)
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80036f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	3301      	adds	r3, #1
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	2bae      	cmp	r3, #174	; 0xae
 8003708:	d9ed      	bls.n	80036e6 <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800370a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800370e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80037bc <ADC1_IN1_TKEO+0x184>
 8003712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003716:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e018      	b.n	8003752 <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 8003720:	4a25      	ldr	r2, [pc, #148]	; (80037b8 <ADC1_IN1_TKEO+0x180>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	ed93 7a00 	vldr	s14, [r3]
 800372c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003734:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 8003738:	edd7 7a03 	vldr	s15, [r7, #12]
 800373c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003740:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003748:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2bae      	cmp	r3, #174	; 0xae
 8003756:	d9e3      	bls.n	8003720 <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003758:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800375c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80037bc <ADC1_IN1_TKEO+0x184>
 8003760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003764:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8003768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800376a:	f7fc feb9 	bl	80004e0 <__aeabi_f2d>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	ec43 2b10 	vmov	d0, r2, r3
 8003776:	f007 fefb 	bl	800b570 <sqrt>
 800377a:	ec53 2b10 	vmov	r2, r3, d0
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	f7fd f9fd 	bl	8000b80 <__aeabi_d2f>
 8003786:	4603      	mov	r3, r0
 8003788:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 800378a:	edd7 7a00 	vldr	s15, [r7]
 800378e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003796:	ed97 7a05 	vldr	s14, [r7, #20]
 800379a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a2:	dd03      	ble.n	80037ac <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	e000      	b.n	80037ae <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 80037ac:	2300      	movs	r3, #0
  }


}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3730      	adds	r7, #48	; 0x30
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000a674 	.word	0x2000a674
 80037bc:	432f0000 	.word	0x432f0000

080037c0 <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	; 0x30
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80037cc:	2301      	movs	r3, #1
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d0:	e030      	b.n	8003834 <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	3308      	adds	r3, #8
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	3304      	adds	r3, #4
 80037de:	ed93 7a00 	vldr	s14, [r3]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	3308      	adds	r3, #8
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	3304      	adds	r3, #4
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	3b01      	subs	r3, #1
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	3308      	adds	r3, #8
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	3304      	adds	r3, #4
 8003804:	edd3 6a00 	vldr	s13, [r3]
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	3301      	adds	r3, #1
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	3308      	adds	r3, #8
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800381e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003822:	4a47      	ldr	r2, [pc, #284]	; (8003940 <ADC1_IN2_TKEO+0x180>)
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	3301      	adds	r3, #1
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2bad      	cmp	r3, #173	; 0xad
 8003838:	d9cb      	bls.n	80037d2 <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <ADC1_IN2_TKEO+0x180>)
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003842:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <ADC1_IN2_TKEO+0x180>)
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_2 = 0.0f;
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003868:	2300      	movs	r3, #0
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	e00e      	b.n	800388c <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 800386e:	4a34      	ldr	r2, [pc, #208]	; (8003940 <ADC1_IN2_TKEO+0x180>)
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	edd3 7a00 	vldr	s15, [r3]
 800387a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800387e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003882:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	3301      	adds	r3, #1
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2bae      	cmp	r3, #174	; 0xae
 8003890:	d9ed      	bls.n	800386e <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003892:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003896:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003944 <ADC1_IN2_TKEO+0x184>
 800389a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800389e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e018      	b.n	80038da <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <ADC1_IN2_TKEO+0x180>)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	ed93 7a00 	vldr	s14, [r3]
 80038b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038bc:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 80038c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80038c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2bae      	cmp	r3, #174	; 0xae
 80038de:	d9e3      	bls.n	80038a8 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80038e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038e4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003944 <ADC1_IN2_TKEO+0x184>
 80038e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 80038f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038f2:	f7fc fdf5 	bl	80004e0 <__aeabi_f2d>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	ec43 2b10 	vmov	d0, r2, r3
 80038fe:	f007 fe37 	bl	800b570 <sqrt>
 8003902:	ec53 2b10 	vmov	r2, r3, d0
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f7fd f939 	bl	8000b80 <__aeabi_d2f>
 800390e:	4603      	mov	r3, r0
 8003910:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 8003912:	edd7 7a00 	vldr	s15, [r7]
 8003916:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800391a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800391e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392a:	dd03      	ble.n	8003934 <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 800392c:	2301      	movs	r3, #1
 800392e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	e000      	b.n	8003936 <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003934:	2300      	movs	r3, #0
  }


}
 8003936:	4618      	mov	r0, r3
 8003938:	3730      	adds	r7, #48	; 0x30
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000a930 	.word	0x2000a930
 8003944:	432f0000 	.word	0x432f0000

08003948 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	; 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003954:	2301      	movs	r3, #1
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003958:	e030      	b.n	80039bc <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	3308      	adds	r3, #8
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	ed93 7a00 	vldr	s14, [r3]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	3308      	adds	r3, #8
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	3304      	adds	r3, #4
 8003976:	edd3 7a00 	vldr	s15, [r3]
 800397a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	3b01      	subs	r3, #1
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	3308      	adds	r3, #8
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	edd3 6a00 	vldr	s13, [r3]
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	3301      	adds	r3, #1
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	3308      	adds	r3, #8
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	3304      	adds	r3, #4
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039aa:	4a47      	ldr	r2, [pc, #284]	; (8003ac8 <ADC2_IN3_TKEO+0x180>)
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	3301      	adds	r3, #1
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	2bad      	cmp	r3, #173	; 0xad
 80039c0:	d9cb      	bls.n	800395a <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <ADC2_IN3_TKEO+0x180>)
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <ADC2_IN3_TKEO+0x180>)
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_3 = 0.0f;
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	e00e      	b.n	8003a14 <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 80039f6:	4a34      	ldr	r2, [pc, #208]	; (8003ac8 <ADC2_IN3_TKEO+0x180>)
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	3301      	adds	r3, #1
 8003a12:	623b      	str	r3, [r7, #32]
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	2bae      	cmp	r3, #174	; 0xae
 8003a18:	d9ed      	bls.n	80039f6 <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003a1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a1e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003acc <ADC2_IN3_TKEO+0x184>
 8003a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a26:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e018      	b.n	8003a62 <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <ADC2_IN3_TKEO+0x180>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	ed93 7a00 	vldr	s14, [r3]
 8003a3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a44:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8003a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2bae      	cmp	r3, #174	; 0xae
 8003a66:	d9e3      	bls.n	8003a30 <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003a68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a6c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003acc <ADC2_IN3_TKEO+0x184>
 8003a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8003a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a7a:	f7fc fd31 	bl	80004e0 <__aeabi_f2d>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	ec43 2b10 	vmov	d0, r2, r3
 8003a86:	f007 fd73 	bl	800b570 <sqrt>
 8003a8a:	ec53 2b10 	vmov	r2, r3, d0
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	f7fd f875 	bl	8000b80 <__aeabi_d2f>
 8003a96:	4603      	mov	r3, r0
 8003a98:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8003a9a:	edd7 7a00 	vldr	s15, [r7]
 8003a9e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aa6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	dd03      	ble.n	8003abc <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	e000      	b.n	8003abe <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003abc:	2300      	movs	r3, #0
  }


}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3730      	adds	r7, #48	; 0x30
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000abec 	.word	0x2000abec
 8003acc:	432f0000 	.word	0x432f0000

08003ad0 <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003adc:	2301      	movs	r3, #1
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae0:	e030      	b.n	8003b44 <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	3304      	adds	r3, #4
 8003aee:	ed93 7a00 	vldr	s14, [r3]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	3308      	adds	r3, #8
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	3304      	adds	r3, #4
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	edd3 6a00 	vldr	s13, [r3]
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b32:	4a47      	ldr	r2, [pc, #284]	; (8003c50 <ADC2_IN4_TKEO+0x180>)
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	3301      	adds	r3, #1
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	2bad      	cmp	r3, #173	; 0xad
 8003b48:	d9cb      	bls.n	8003ae2 <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <ADC2_IN4_TKEO+0x180>)
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003b52:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <ADC2_IN4_TKEO+0x180>)
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_4 = 0.0f;
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
 8003b7c:	e00e      	b.n	8003b9c <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 8003b7e:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <ADC2_IN4_TKEO+0x180>)
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b92:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	623b      	str	r3, [r7, #32]
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2bae      	cmp	r3, #174	; 0xae
 8003ba0:	d9ed      	bls.n	8003b7e <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003ba2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ba6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003c54 <ADC2_IN4_TKEO+0x184>
 8003baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bae:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e018      	b.n	8003bea <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 8003bb8:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <ADC2_IN4_TKEO+0x180>)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	ed93 7a00 	vldr	s14, [r3]
 8003bc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bcc:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 8003bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bd8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2bae      	cmp	r3, #174	; 0xae
 8003bee:	d9e3      	bls.n	8003bb8 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003bf0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bf4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003c54 <ADC2_IN4_TKEO+0x184>
 8003bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bfc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 8003c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c02:	f7fc fc6d 	bl	80004e0 <__aeabi_f2d>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	ec43 2b10 	vmov	d0, r2, r3
 8003c0e:	f007 fcaf 	bl	800b570 <sqrt>
 8003c12:	ec53 2b10 	vmov	r2, r3, d0
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f7fc ffb1 	bl	8000b80 <__aeabi_d2f>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 8003c22:	edd7 7a00 	vldr	s15, [r7]
 8003c26:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	dd03      	ble.n	8003c44 <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	e000      	b.n	8003c46 <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003c44:	2300      	movs	r3, #0
  }


}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3730      	adds	r7, #48	; 0x30
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2000aea8 	.word	0x2000aea8
 8003c54:	432f0000 	.word	0x432f0000

08003c58 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003c64:	2301      	movs	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c68:	e030      	b.n	8003ccc <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	3308      	adds	r3, #8
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	3304      	adds	r3, #4
 8003c76:	ed93 7a00 	vldr	s14, [r3]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	3308      	adds	r3, #8
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	3304      	adds	r3, #4
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	3b01      	subs	r3, #1
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	3308      	adds	r3, #8
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	edd3 6a00 	vldr	s13, [r3]
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cba:	4a47      	ldr	r2, [pc, #284]	; (8003dd8 <ADC3_IN1_TKEO+0x180>)
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	3301      	adds	r3, #1
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2bad      	cmp	r3, #173	; 0xad
 8003cd0:	d9cb      	bls.n	8003c6a <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <ADC3_IN1_TKEO+0x180>)
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003cda:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <ADC3_IN1_TKEO+0x180>)
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	e00e      	b.n	8003d24 <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 8003d06:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <ADC3_IN1_TKEO+0x180>)
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	3301      	adds	r3, #1
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2bae      	cmp	r3, #174	; 0xae
 8003d28:	d9ed      	bls.n	8003d06 <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003d2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d2e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003ddc <ADC3_IN1_TKEO+0x184>
 8003d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d36:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e018      	b.n	8003d72 <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <ADC3_IN1_TKEO+0x180>)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	ed93 7a00 	vldr	s14, [r3]
 8003d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d54:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 8003d58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2bae      	cmp	r3, #174	; 0xae
 8003d76:	d9e3      	bls.n	8003d40 <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003d78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d7c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003ddc <ADC3_IN1_TKEO+0x184>
 8003d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 8003d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d8a:	f7fc fba9 	bl	80004e0 <__aeabi_f2d>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	ec43 2b10 	vmov	d0, r2, r3
 8003d96:	f007 fbeb 	bl	800b570 <sqrt>
 8003d9a:	ec53 2b10 	vmov	r2, r3, d0
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	f7fc feed 	bl	8000b80 <__aeabi_d2f>
 8003da6:	4603      	mov	r3, r0
 8003da8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8003daa:	edd7 7a00 	vldr	s15, [r7]
 8003dae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc2:	dd03      	ble.n	8003dcc <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	e000      	b.n	8003dce <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003dcc:	2300      	movs	r3, #0
  }


}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3730      	adds	r7, #48	; 0x30
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000b164 	.word	0x2000b164
 8003ddc:	432f0000 	.word	0x432f0000

08003de0 <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003dec:	2301      	movs	r3, #1
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df0:	e030      	b.n	8003e54 <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	3308      	adds	r3, #8
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	ed93 7a00 	vldr	s14, [r3]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	3308      	adds	r3, #8
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	edd3 6a00 	vldr	s13, [r3]
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e42:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <ADC3_IN2_TKEO+0x180>)
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	3301      	adds	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	2bad      	cmp	r3, #173	; 0xad
 8003e58:	d9cb      	bls.n	8003df2 <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 8003e5a:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <ADC3_IN2_TKEO+0x180>)
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003e62:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <ADC3_IN2_TKEO+0x180>)
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8


  float32_t Tkeo_Sum_6 = 0.0f;
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	e00e      	b.n	8003eac <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 8003e8e:	4a34      	ldr	r2, [pc, #208]	; (8003f60 <ADC3_IN2_TKEO+0x180>)
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2bae      	cmp	r3, #174	; 0xae
 8003eb0:	d9ed      	bls.n	8003e8e <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003eb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003eb6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003f64 <ADC3_IN2_TKEO+0x184>
 8003eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ebe:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e018      	b.n	8003efa <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <ADC3_IN2_TKEO+0x180>)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	ed93 7a00 	vldr	s14, [r3]
 8003ed4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003edc:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 8003ee0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ee4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ee8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2bae      	cmp	r3, #174	; 0xae
 8003efe:	d9e3      	bls.n	8003ec8 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003f00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f04:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003f64 <ADC3_IN2_TKEO+0x184>
 8003f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 8003f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f12:	f7fc fae5 	bl	80004e0 <__aeabi_f2d>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	ec43 2b10 	vmov	d0, r2, r3
 8003f1e:	f007 fb27 	bl	800b570 <sqrt>
 8003f22:	ec53 2b10 	vmov	r2, r3, d0
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f7fc fe29 	bl	8000b80 <__aeabi_d2f>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 8003f32:	edd7 7a00 	vldr	s15, [r7]
 8003f36:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	dd03      	ble.n	8003f54 <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	e000      	b.n	8003f56 <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003f54:	2300      	movs	r3, #0
  }


}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3730      	adds	r7, #48	; 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	2000b420 	.word	0x2000b420
 8003f64:	432f0000 	.word	0x432f0000

08003f68 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e056      	b.n	8004022 <ADC1_DMA_sort_uhb+0xba>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <ADC1_DMA_sort_uhb+0x1c>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d126      	bne.n	8003fd2 <ADC1_DMA_sort_uhb+0x6a>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	e01e      	b.n	8003fc8 <ADC1_DMA_sort_uhb+0x60>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8003f8a:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <ADC1_DMA_sort_uhb+0xd8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc fa81 	bl	800049c <__aeabi_ui2d>
 8003f9a:	a327      	add	r3, pc, #156	; (adr r3, 8004038 <ADC1_DMA_sort_uhb+0xd0>)
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	f7fc faf6 	bl	8000590 <__aeabi_dmul>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4925      	ldr	r1, [pc, #148]	; (8004040 <ADC1_DMA_sort_uhb+0xd8>)
 8003faa:	680c      	ldr	r4, [r1, #0]
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f7fc fdc6 	bl	8000b40 <__aeabi_d2uiz>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4423      	add	r3, r4
 8003fc0:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003fce:	d3dc      	bcc.n	8003f8a <ADC1_DMA_sort_uhb+0x22>
 8003fd0:	e024      	b.n	800401c <ADC1_DMA_sort_uhb+0xb4>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	e01d      	b.n	8004014 <ADC1_DMA_sort_uhb+0xac>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <ADC1_DMA_sort_uhb+0xd8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fa5a 	bl	800049c <__aeabi_ui2d>
 8003fe8:	a313      	add	r3, pc, #76	; (adr r3, 8004038 <ADC1_DMA_sort_uhb+0xd0>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc facf 	bl	8000590 <__aeabi_dmul>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4912      	ldr	r1, [pc, #72]	; (8004040 <ADC1_DMA_sort_uhb+0xd8>)
 8003ff8:	680c      	ldr	r4, [r1, #0]
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f7fc fd9f 	bl	8000b40 <__aeabi_d2uiz>
 8004002:	4602      	mov	r2, r0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 800400a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3301      	adds	r3, #1
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800401a:	d3dd      	bcc.n	8003fd8 <ADC1_DMA_sort_uhb+0x70>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004028:	d9a4      	bls.n	8003f74 <ADC1_DMA_sort_uhb+0xc>
			}
		}
     }

};
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	bd90      	pop	{r4, r7, pc}
 8004034:	f3af 8000 	nop.w
 8004038:	66666666 	.word	0x66666666
 800403c:	3f4a6666 	.word	0x3f4a6666
 8004040:	2000bb30 	.word	0x2000bb30
 8004044:	00000000 	.word	0x00000000

08004048 <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 800404e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e058      	b.n	8004108 <ADC1_DMA_sort_lhb+0xc0>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <ADC1_DMA_sort_lhb+0x1e>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d127      	bne.n	80040b6 <ADC1_DMA_sort_lhb+0x6e>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8004066:	f240 2371 	movw	r3, #625	; 0x271
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	e01e      	b.n	80040ac <ADC1_DMA_sort_lhb+0x64>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <ADC1_DMA_sort_lhb+0xe0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fa0f 	bl	800049c <__aeabi_ui2d>
 800407e:	a328      	add	r3, pc, #160	; (adr r3, 8004120 <ADC1_DMA_sort_lhb+0xd8>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc fa84 	bl	8000590 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4926      	ldr	r1, [pc, #152]	; (8004128 <ADC1_DMA_sort_lhb+0xe0>)
 800408e:	680c      	ldr	r4, [r1, #0]
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	f7fc fd54 	bl	8000b40 <__aeabi_d2uiz>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4423      	add	r3, r4
 80040a4:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80040b2:	d9dc      	bls.n	800406e <ADC1_DMA_sort_lhb+0x26>
 80040b4:	e025      	b.n	8004102 <ADC1_DMA_sort_lhb+0xba>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 80040b6:	f240 2371 	movw	r3, #625	; 0x271
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e01d      	b.n	80040fa <ADC1_DMA_sort_lhb+0xb2>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80040be:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <ADC1_DMA_sort_lhb+0xe0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc f9e7 	bl	800049c <__aeabi_ui2d>
 80040ce:	a314      	add	r3, pc, #80	; (adr r3, 8004120 <ADC1_DMA_sort_lhb+0xd8>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fa5c 	bl	8000590 <__aeabi_dmul>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4912      	ldr	r1, [pc, #72]	; (8004128 <ADC1_DMA_sort_lhb+0xe0>)
 80040de:	680c      	ldr	r4, [r1, #0]
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7fc fd2c 	bl	8000b40 <__aeabi_d2uiz>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80040f0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3301      	adds	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004100:	d9dd      	bls.n	80040be <ADC1_DMA_sort_lhb+0x76>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3301      	adds	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f640 12c2 	movw	r2, #2498	; 0x9c2
 800410e:	4293      	cmp	r3, r2
 8004110:	d9a1      	bls.n	8004056 <ADC1_DMA_sort_lhb+0xe>
			}
		}
     }

};
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bd90      	pop	{r4, r7, pc}
 800411c:	f3af 8000 	nop.w
 8004120:	66666666 	.word	0x66666666
 8004124:	3f4a6666 	.word	0x3f4a6666
 8004128:	2000bb30 	.word	0x2000bb30
 800412c:	00000000 	.word	0x00000000

08004130 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e056      	b.n	80041ea <ADC2_DMA_sort_uhb+0xba>
	{
		if(m==0 || (m%2==0))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <ADC2_DMA_sort_uhb+0x1c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d126      	bne.n	800419a <ADC2_DMA_sort_uhb+0x6a>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800414c:	2300      	movs	r3, #0
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	e01e      	b.n	8004190 <ADC2_DMA_sort_uhb+0x60>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <ADC2_DMA_sort_uhb+0xd8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc f99d 	bl	800049c <__aeabi_ui2d>
 8004162:	a327      	add	r3, pc, #156	; (adr r3, 8004200 <ADC2_DMA_sort_uhb+0xd0>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f7fc fa12 	bl	8000590 <__aeabi_dmul>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4925      	ldr	r1, [pc, #148]	; (8004208 <ADC2_DMA_sort_uhb+0xd8>)
 8004172:	680c      	ldr	r4, [r1, #0]
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	f7fc fce2 	bl	8000b40 <__aeabi_d2uiz>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4423      	add	r3, r4
 8004188:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3301      	adds	r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004196:	d3dc      	bcc.n	8004152 <ADC2_DMA_sort_uhb+0x22>
 8004198:	e024      	b.n	80041e4 <ADC2_DMA_sort_uhb+0xb4>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	e01d      	b.n	80041dc <ADC2_DMA_sort_uhb+0xac>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <ADC2_DMA_sort_uhb+0xd8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc f976 	bl	800049c <__aeabi_ui2d>
 80041b0:	a313      	add	r3, pc, #76	; (adr r3, 8004200 <ADC2_DMA_sort_uhb+0xd0>)
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f7fc f9eb 	bl	8000590 <__aeabi_dmul>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4912      	ldr	r1, [pc, #72]	; (8004208 <ADC2_DMA_sort_uhb+0xd8>)
 80041c0:	680c      	ldr	r4, [r1, #0]
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7fc fcbb 	bl	8000b40 <__aeabi_d2uiz>
 80041ca:	4602      	mov	r2, r0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80041d2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3301      	adds	r3, #1
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80041e2:	d3dd      	bcc.n	80041a0 <ADC2_DMA_sort_uhb+0x70>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80041f0:	d9a4      	bls.n	800413c <ADC2_DMA_sort_uhb+0xc>
			}
		}
     }

};
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd90      	pop	{r4, r7, pc}
 80041fc:	f3af 8000 	nop.w
 8004200:	66666666 	.word	0x66666666
 8004204:	3f4a6666 	.word	0x3f4a6666
 8004208:	2000bb34 	.word	0x2000bb34
 800420c:	00000000 	.word	0x00000000

08004210 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004216:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e058      	b.n	80042d0 <ADC2_DMA_sort_lhb+0xc0>
	{
		if(m==0||(m%2==0))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <ADC2_DMA_sort_lhb+0x1e>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d127      	bne.n	800427e <ADC2_DMA_sort_lhb+0x6e>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800422e:	f240 2371 	movw	r3, #625	; 0x271
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	e01e      	b.n	8004274 <ADC2_DMA_sort_lhb+0x64>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004236:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <ADC2_DMA_sort_lhb+0xe0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f92b 	bl	800049c <__aeabi_ui2d>
 8004246:	a328      	add	r3, pc, #160	; (adr r3, 80042e8 <ADC2_DMA_sort_lhb+0xd8>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc f9a0 	bl	8000590 <__aeabi_dmul>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4926      	ldr	r1, [pc, #152]	; (80042f0 <ADC2_DMA_sort_lhb+0xe0>)
 8004256:	680c      	ldr	r4, [r1, #0]
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	f7fc fc70 	bl	8000b40 <__aeabi_d2uiz>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4423      	add	r3, r4
 800426c:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	3301      	adds	r3, #1
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800427a:	d9dc      	bls.n	8004236 <ADC2_DMA_sort_lhb+0x26>
 800427c:	e025      	b.n	80042ca <ADC2_DMA_sort_lhb+0xba>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 800427e:	f240 2371 	movw	r3, #625	; 0x271
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	e01d      	b.n	80042c2 <ADC2_DMA_sort_lhb+0xb2>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004286:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <ADC2_DMA_sort_lhb+0xe0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc f903 	bl	800049c <__aeabi_ui2d>
 8004296:	a314      	add	r3, pc, #80	; (adr r3, 80042e8 <ADC2_DMA_sort_lhb+0xd8>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fc f978 	bl	8000590 <__aeabi_dmul>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4912      	ldr	r1, [pc, #72]	; (80042f0 <ADC2_DMA_sort_lhb+0xe0>)
 80042a6:	680c      	ldr	r4, [r1, #0]
 80042a8:	4610      	mov	r0, r2
 80042aa:	4619      	mov	r1, r3
 80042ac:	f7fc fc48 	bl	8000b40 <__aeabi_d2uiz>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80042b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3301      	adds	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80042c8:	d9dd      	bls.n	8004286 <ADC2_DMA_sort_lhb+0x76>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3301      	adds	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d9a1      	bls.n	800421e <ADC2_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}
 80042e4:	f3af 8000 	nop.w
 80042e8:	66666666 	.word	0x66666666
 80042ec:	3f4a6666 	.word	0x3f4a6666
 80042f0:	2000bb34 	.word	0x2000bb34
 80042f4:	00000000 	.word	0x00000000

080042f8 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	e056      	b.n	80043b2 <ADC3_DMA_sort_uhb+0xba>
	{
		if(m==0 || (m%2==0))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <ADC3_DMA_sort_uhb+0x1c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d126      	bne.n	8004362 <ADC3_DMA_sort_uhb+0x6a>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	e01e      	b.n	8004358 <ADC3_DMA_sort_uhb+0x60>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <ADC3_DMA_sort_uhb+0xd8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f8b9 	bl	800049c <__aeabi_ui2d>
 800432a:	a327      	add	r3, pc, #156	; (adr r3, 80043c8 <ADC3_DMA_sort_uhb+0xd0>)
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fc f92e 	bl	8000590 <__aeabi_dmul>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4925      	ldr	r1, [pc, #148]	; (80043d0 <ADC3_DMA_sort_uhb+0xd8>)
 800433a:	680c      	ldr	r4, [r1, #0]
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	f7fc fbfe 	bl	8000b40 <__aeabi_d2uiz>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4423      	add	r3, r4
 8004350:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3301      	adds	r3, #1
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800435e:	d3dc      	bcc.n	800431a <ADC3_DMA_sort_uhb+0x22>
 8004360:	e024      	b.n	80043ac <ADC3_DMA_sort_uhb+0xb4>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	e01d      	b.n	80043a4 <ADC3_DMA_sort_uhb+0xac>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <ADC3_DMA_sort_uhb+0xd8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fc f892 	bl	800049c <__aeabi_ui2d>
 8004378:	a313      	add	r3, pc, #76	; (adr r3, 80043c8 <ADC3_DMA_sort_uhb+0xd0>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f7fc f907 	bl	8000590 <__aeabi_dmul>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4912      	ldr	r1, [pc, #72]	; (80043d0 <ADC3_DMA_sort_uhb+0xd8>)
 8004388:	680c      	ldr	r4, [r1, #0]
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	f7fc fbd7 	bl	8000b40 <__aeabi_d2uiz>
 8004392:	4602      	mov	r2, r0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 800439a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3301      	adds	r3, #1
 80043a2:	607b      	str	r3, [r7, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80043aa:	d3dd      	bcc.n	8004368 <ADC3_DMA_sort_uhb+0x70>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80043b8:	d9a4      	bls.n	8004304 <ADC3_DMA_sort_uhb+0xc>
			}
		}
     }

};
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd90      	pop	{r4, r7, pc}
 80043c4:	f3af 8000 	nop.w
 80043c8:	66666666 	.word	0x66666666
 80043cc:	3f4a6666 	.word	0x3f4a6666
 80043d0:	2000bb38 	.word	0x2000bb38
 80043d4:	00000000 	.word	0x00000000

080043d8 <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80043de:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e058      	b.n	8004498 <ADC3_DMA_sort_lhb+0xc0>
	{
		if(m==0||(m%2==0))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <ADC3_DMA_sort_lhb+0x1e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d127      	bne.n	8004446 <ADC3_DMA_sort_lhb+0x6e>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80043f6:	f240 2371 	movw	r3, #625	; 0x271
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	e01e      	b.n	800443c <ADC3_DMA_sort_lhb+0x64>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80043fe:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <ADC3_DMA_sort_lhb+0xe0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc f847 	bl	800049c <__aeabi_ui2d>
 800440e:	a328      	add	r3, pc, #160	; (adr r3, 80044b0 <ADC3_DMA_sort_lhb+0xd8>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fc f8bc 	bl	8000590 <__aeabi_dmul>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4926      	ldr	r1, [pc, #152]	; (80044b8 <ADC3_DMA_sort_lhb+0xe0>)
 800441e:	680c      	ldr	r4, [r1, #0]
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f7fc fb8c 	bl	8000b40 <__aeabi_d2uiz>
 8004428:	4602      	mov	r2, r0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4423      	add	r3, r4
 8004434:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004442:	d9dc      	bls.n	80043fe <ADC3_DMA_sort_lhb+0x26>
 8004444:	e025      	b.n	8004492 <ADC3_DMA_sort_lhb+0xba>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004446:	f240 2371 	movw	r3, #625	; 0x271
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	e01d      	b.n	800448a <ADC3_DMA_sort_lhb+0xb2>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <ADC3_DMA_sort_lhb+0xe0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f81f 	bl	800049c <__aeabi_ui2d>
 800445e:	a314      	add	r3, pc, #80	; (adr r3, 80044b0 <ADC3_DMA_sort_lhb+0xd8>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fc f894 	bl	8000590 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4912      	ldr	r1, [pc, #72]	; (80044b8 <ADC3_DMA_sort_lhb+0xe0>)
 800446e:	680c      	ldr	r4, [r1, #0]
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f7fc fb64 	bl	8000b40 <__aeabi_d2uiz>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 8004480:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3301      	adds	r3, #1
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004490:	d9dd      	bls.n	800444e <ADC3_DMA_sort_lhb+0x76>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f640 12c2 	movw	r2, #2498	; 0x9c2
 800449e:	4293      	cmp	r3, r2
 80044a0:	d9a1      	bls.n	80043e6 <ADC3_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	f3af 8000 	nop.w
 80044b0:	66666666 	.word	0x66666666
 80044b4:	3f4a6666 	.word	0x3f4a6666
 80044b8:	2000bb38 	.word	0x2000bb38

080044bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044c2:	f001 fcf8 	bl	8005eb6 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 80044c6:	f7fd fc89 	bl	8001ddc <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 80044ca:	f7fd fc99 	bl	8001e00 <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 80044ce:	48a2      	ldr	r0, [pc, #648]	; (8004758 <main+0x29c>)
 80044d0:	f7fd f8ac 	bl	800162c <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 80044d4:	f7fd fcbe 	bl	8001e54 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 80044d8:	f7fd fcce 	bl	8001e78 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 80044dc:	489f      	ldr	r0, [pc, #636]	; (800475c <main+0x2a0>)
 80044de:	f7fd f949 	bl	8001774 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 80044e2:	f7fd fcf3 	bl	8001ecc <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 80044e6:	f7fd fd03 	bl	8001ef0 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 80044ea:	489d      	ldr	r0, [pc, #628]	; (8004760 <main+0x2a4>)
 80044ec:	f7fd f9e6 	bl	80018bc <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 80044f0:	f7fd fd28 	bl	8001f44 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 80044f4:	f7fd fd38 	bl	8001f68 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 80044f8:	489a      	ldr	r0, [pc, #616]	; (8004764 <main+0x2a8>)
 80044fa:	f7fd fa83 	bl	8001a04 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 80044fe:	f7fd fd5d 	bl	8001fbc <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8004502:	f7fd fd6d 	bl	8001fe0 <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8004506:	4898      	ldr	r0, [pc, #608]	; (8004768 <main+0x2ac>)
 8004508:	f7fd fb20 	bl	8001b4c <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 800450c:	f7fd fd92 	bl	8002034 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 8004510:	f7fd fda2 	bl	8002058 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8004514:	4895      	ldr	r0, [pc, #596]	; (800476c <main+0x2b0>)
 8004516:	f7fd fbbd 	bl	8001c94 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800451a:	f000 fa97 	bl	8004a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800451e:	f000 fdc9 	bl	80050b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004522:	f000 fd71 	bl	8005008 <MX_DMA_Init>
  MX_ADC1_Init();
 8004526:	f000 fadb 	bl	8004ae0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800452a:	f000 fb63 	bl	8004bf4 <MX_ADC2_Init>
  MX_ADC3_Init();
 800452e:	f000 fbd9 	bl	8004ce4 <MX_ADC3_Init>
  MX_FMAC_Init();
 8004532:	f000 fc95 	bl	8004e60 <MX_FMAC_Init>
  MX_TIM6_Init();
 8004536:	f000 fca7 	bl	8004e88 <MX_TIM6_Init>
  MX_TIM7_Init();
 800453a:	f000 fcdb 	bl	8004ef4 <MX_TIM7_Init>
  MX_TIM20_Init();
 800453e:	f000 fd0f 	bl	8004f60 <MX_TIM20_Init>
  MX_DAC1_Init();
 8004542:	f000 fc47 	bl	8004dd4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  // Enable the EXTI line 2 interrupt
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);  // Set priority
 8004546:	2200      	movs	r2, #0
 8004548:	2102      	movs	r1, #2
 800454a:	2008      	movs	r0, #8
 800454c:	f003 f925 	bl	800779a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn); // Enable the interrupt in NVIC (Interrupt is triggered by pressing the push button)
 8004550:	2008      	movs	r0, #8
 8004552:	f003 f93c 	bl	80077ce <HAL_NVIC_EnableIRQ>

  EXT12_IRQHandler(); // When the push button is pressed - starts all ADCs with DMA, starts the sorting algorithm for each ADC, calculates the offset from the baseline and the standard deviation from the baseline data (for all channels). Finally, it toggles the status LED to indicate that acquisition has started
 8004556:	f000 fe11 	bl	800517c <EXT12_IRQHandler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 800455a:	f7fd fc63 	bl	8001e24 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 800455e:	487e      	ldr	r0, [pc, #504]	; (8004758 <main+0x29c>)
 8004560:	f7fd f896 	bl	8001690 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e017      	b.n	800459a <main+0xde>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtracts the stored offset
 800456a:	4a7b      	ldr	r2, [pc, #492]	; (8004758 <main+0x29c>)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3308      	adds	r3, #8
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	ed93 7a00 	vldr	s14, [r3]
 800457a:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <main+0x2b4>)
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004584:	4a74      	ldr	r2, [pc, #464]	; (8004758 <main+0x29c>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3308      	adds	r3, #8
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3301      	adds	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2bae      	cmp	r3, #174	; 0xae
 800459e:	d9e4      	bls.n	800456a <main+0xae>
      #ifdef MONITOR_CHANNEL_1_LEFT
	  ADC1_IN1_DAC_Update(&DAC1_ADC1_IN1); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 80045a0:	4b74      	ldr	r3, [pc, #464]	; (8004774 <main+0x2b8>)
 80045a2:	edd3 7a00 	vldr	s15, [r3]
 80045a6:	eeb0 0a67 	vmov.f32	s0, s15
 80045aa:	4873      	ldr	r0, [pc, #460]	; (8004778 <main+0x2bc>)
 80045ac:	f7ff f844 	bl	8003638 <ADC1_IN1_TKEO>
 80045b0:	4603      	mov	r3, r0
 80045b2:	461a      	mov	r2, r3
 80045b4:	4b71      	ldr	r3, [pc, #452]	; (800477c <main+0x2c0>)
 80045b6:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 80045b8:	4b70      	ldr	r3, [pc, #448]	; (800477c <main+0x2c0>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d11e      	bne.n	80045fe <main+0x142>
      {
      /* Slope sign change */
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 80045c0:	4b6b      	ldr	r3, [pc, #428]	; (8004770 <main+0x2b4>)
 80045c2:	edd3 7a00 	vldr	s15, [r3]
 80045c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045ce:	eeb0 0a67 	vmov.f32	s0, s15
 80045d2:	486b      	ldr	r0, [pc, #428]	; (8004780 <main+0x2c4>)
 80045d4:	f7fe f852 	bl	800267c <ADC1_IN1_SSC>
 80045d8:	eef0 7a40 	vmov.f32	s15, s0
 80045dc:	4b69      	ldr	r3, [pc, #420]	; (8004784 <main+0x2c8>)
 80045de:	edc3 7a00 	vstr	s15, [r3]
      /*Computes the autocorrelation values and the autoregression coefficients and returns the latter*/
      ADC1_IN1_autocorr_calc();
 80045e2:	f7fc fb1d 	bl	8000c20 <ADC1_IN1_autocorr_calc>
      AR_1 = ADC1_IN1_autoreg_coeffs();
 80045e6:	f7fc fb51 	bl	8000c8c <ADC1_IN1_autoreg_coeffs>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a66      	ldr	r2, [pc, #408]	; (8004788 <main+0x2cc>)
 80045ee:	6013      	str	r3, [r2, #0]
      /* Computes the Short Time Fourier Transform from the moving average buffer */
      STFT_1 = ADC1_IN1_STFT_Update(&STFT_par_ADC1_IN1, &STFT_ADC1_IN1);
 80045f0:	4966      	ldr	r1, [pc, #408]	; (800478c <main+0x2d0>)
 80045f2:	4867      	ldr	r0, [pc, #412]	; (8004790 <main+0x2d4>)
 80045f4:	f7fe fadc 	bl	8002bb0 <ADC1_IN1_STFT_Update>
 80045f8:	4603      	mov	r3, r0
 80045fa:	4a66      	ldr	r2, [pc, #408]	; (8004794 <main+0x2d8>)
 80045fc:	6013      	str	r3, [r2, #0]
      }


	  update_ADC1_IN2_FO_biquad_filter();
 80045fe:	f7fd fc4d 	bl	8001e9c <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8004602:	4856      	ldr	r0, [pc, #344]	; (800475c <main+0x2a0>)
 8004604:	f7fd f8e8 	bl	80017d8 <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	e017      	b.n	800463e <main+0x182>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 800460e:	4a53      	ldr	r2, [pc, #332]	; (800475c <main+0x2a0>)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3308      	adds	r3, #8
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	ed93 7a00 	vldr	s14, [r3]
 800461e:	4b5e      	ldr	r3, [pc, #376]	; (8004798 <main+0x2dc>)
 8004620:	edd3 7a00 	vldr	s15, [r3]
 8004624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004628:	4a4c      	ldr	r2, [pc, #304]	; (800475c <main+0x2a0>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	3308      	adds	r3, #8
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	3304      	adds	r3, #4
 8004634:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	3301      	adds	r3, #1
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2bae      	cmp	r3, #174	; 0xae
 8004642:	d9e4      	bls.n	800460e <main+0x152>
      #ifdef MONITOR_CHANNEL_4_RIGHT
	  ADC1_IN2_DAC_Update(&DAC1_ADC1_IN2);
      #endif


	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 8004644:	4b55      	ldr	r3, [pc, #340]	; (800479c <main+0x2e0>)
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	eeb0 0a67 	vmov.f32	s0, s15
 800464e:	4854      	ldr	r0, [pc, #336]	; (80047a0 <main+0x2e4>)
 8004650:	f7ff f8b6 	bl	80037c0 <ADC1_IN2_TKEO>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	4b52      	ldr	r3, [pc, #328]	; (80047a4 <main+0x2e8>)
 800465a:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 800465c:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <main+0x2e8>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d11e      	bne.n	80046a2 <main+0x1e6>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 8004664:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <main+0x2dc>)
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800466e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004672:	eeb0 0a67 	vmov.f32	s0, s15
 8004676:	484c      	ldr	r0, [pc, #304]	; (80047a8 <main+0x2ec>)
 8004678:	f7fe f86f 	bl	800275a <ADC1_IN2_SSC>
 800467c:	eef0 7a40 	vmov.f32	s15, s0
 8004680:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <main+0x2f0>)
 8004682:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_IN2_autocorr_calc();
 8004686:	f7fc fba1 	bl	8000dcc <ADC1_IN2_autocorr_calc>
	  AR_2 = ADC1_IN2_autoreg_coeffs();
 800468a:	f7fc fbd5 	bl	8000e38 <ADC1_IN2_autoreg_coeffs>
 800468e:	4603      	mov	r3, r0
 8004690:	4a47      	ldr	r2, [pc, #284]	; (80047b0 <main+0x2f4>)
 8004692:	6013      	str	r3, [r2, #0]
	  STFT_2 = ADC1_IN2_STFT_Update(&STFT_par_ADC1_IN2, &STFT_ADC1_IN2);
 8004694:	4947      	ldr	r1, [pc, #284]	; (80047b4 <main+0x2f8>)
 8004696:	4848      	ldr	r0, [pc, #288]	; (80047b8 <main+0x2fc>)
 8004698:	f7fe fb6e 	bl	8002d78 <ADC1_IN2_STFT_Update>
 800469c:	4603      	mov	r3, r0
 800469e:	4a47      	ldr	r2, [pc, #284]	; (80047bc <main+0x300>)
 80046a0:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN3_FO_biquad_filter();
 80046a2:	f7fd fc37 	bl	8001f14 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 80046a6:	482e      	ldr	r0, [pc, #184]	; (8004760 <main+0x2a4>)
 80046a8:	f7fd f93a 	bl	8001920 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e017      	b.n	80046e2 <main+0x226>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 80046b2:	4a2b      	ldr	r2, [pc, #172]	; (8004760 <main+0x2a4>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3308      	adds	r3, #8
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	3304      	adds	r3, #4
 80046be:	ed93 7a00 	vldr	s14, [r3]
 80046c2:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <main+0x304>)
 80046c4:	edd3 7a00 	vldr	s15, [r3]
 80046c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046cc:	4a24      	ldr	r2, [pc, #144]	; (8004760 <main+0x2a4>)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3308      	adds	r3, #8
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	3304      	adds	r3, #4
 80046d8:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2bae      	cmp	r3, #174	; 0xae
 80046e6:	d9e4      	bls.n	80046b2 <main+0x1f6>

      #ifdef MONITOR_CHANNEL_2_LEFT
	  ADC2_IN3_DAC_Update(&DAC1_ADC2_IN3);
      #endif

	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <main+0x308>)
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	eeb0 0a67 	vmov.f32	s0, s15
 80046f2:	4835      	ldr	r0, [pc, #212]	; (80047c8 <main+0x30c>)
 80046f4:	f7ff f928 	bl	8003948 <ADC2_IN3_TKEO>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <main+0x310>)
 80046fe:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 8004700:	4b32      	ldr	r3, [pc, #200]	; (80047cc <main+0x310>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d11e      	bne.n	8004746 <main+0x28a>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <main+0x304>)
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	482d      	ldr	r0, [pc, #180]	; (80047d0 <main+0x314>)
 800471c:	f7fe f88c 	bl	8002838 <ADC2_IN3_SSC>
 8004720:	eef0 7a40 	vmov.f32	s15, s0
 8004724:	4b2b      	ldr	r3, [pc, #172]	; (80047d4 <main+0x318>)
 8004726:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN3_autocorr_calc();
 800472a:	f7fc fc25 	bl	8000f78 <ADC2_IN3_autocorr_calc>
	  AR_3 = ADC2_IN3_autoreg_coeffs();
 800472e:	f7fc fc59 	bl	8000fe4 <ADC2_IN3_autoreg_coeffs>
 8004732:	4603      	mov	r3, r0
 8004734:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <main+0x31c>)
 8004736:	6013      	str	r3, [r2, #0]
	  STFT_3 = ADC2_IN3_STFT_Update(&STFT_par_ADC2_IN3, &STFT_ADC2_IN3);
 8004738:	4928      	ldr	r1, [pc, #160]	; (80047dc <main+0x320>)
 800473a:	4829      	ldr	r0, [pc, #164]	; (80047e0 <main+0x324>)
 800473c:	f7fe fbfc 	bl	8002f38 <ADC2_IN3_STFT_Update>
 8004740:	4603      	mov	r3, r0
 8004742:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <main+0x328>)
 8004744:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 8004746:	f7fd fc21 	bl	8001f8c <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 800474a:	4806      	ldr	r0, [pc, #24]	; (8004764 <main+0x2a8>)
 800474c:	f7fd f98c 	bl	8001a68 <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	e060      	b.n	8004818 <main+0x35c>
 8004756:	bf00      	nop
 8004758:	2000bb3c 	.word	0x2000bb3c
 800475c:	2000c0d8 	.word	0x2000c0d8
 8004760:	2000c674 	.word	0x2000c674
 8004764:	2000cc10 	.word	0x2000cc10
 8004768:	2000d1ac 	.word	0x2000d1ac
 800476c:	2000d748 	.word	0x2000d748
 8004770:	2001b698 	.word	0x2001b698
 8004774:	2001b6b8 	.word	0x2001b6b8
 8004778:	20012034 	.word	0x20012034
 800477c:	2001b6d0 	.word	0x2001b6d0
 8004780:	200141dc 	.word	0x200141dc
 8004784:	2001b6d8 	.word	0x2001b6d8
 8004788:	2001b6f0 	.word	0x2001b6f0
 800478c:	20016384 	.word	0x20016384
 8004790:	2001852c 	.word	0x2001852c
 8004794:	2001b708 	.word	0x2001b708
 8004798:	2001b69c 	.word	0x2001b69c
 800479c:	2001b6bc 	.word	0x2001b6bc
 80047a0:	200125d0 	.word	0x200125d0
 80047a4:	2001b6d1 	.word	0x2001b6d1
 80047a8:	20014778 	.word	0x20014778
 80047ac:	2001b6dc 	.word	0x2001b6dc
 80047b0:	2001b6f4 	.word	0x2001b6f4
 80047b4:	20016920 	.word	0x20016920
 80047b8:	20018d68 	.word	0x20018d68
 80047bc:	2001b70c 	.word	0x2001b70c
 80047c0:	2001b6a0 	.word	0x2001b6a0
 80047c4:	2001b6c0 	.word	0x2001b6c0
 80047c8:	20012b6c 	.word	0x20012b6c
 80047cc:	2001b6d2 	.word	0x2001b6d2
 80047d0:	20014d14 	.word	0x20014d14
 80047d4:	2001b6e0 	.word	0x2001b6e0
 80047d8:	2001b6f8 	.word	0x2001b6f8
 80047dc:	20016ebc 	.word	0x20016ebc
 80047e0:	200195a4 	.word	0x200195a4
 80047e4:	2001b710 	.word	0x2001b710
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 80047e8:	4a77      	ldr	r2, [pc, #476]	; (80049c8 <main+0x50c>)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3308      	adds	r3, #8
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	ed93 7a00 	vldr	s14, [r3]
 80047f8:	4b74      	ldr	r3, [pc, #464]	; (80049cc <main+0x510>)
 80047fa:	edd3 7a00 	vldr	s15, [r3]
 80047fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004802:	4a71      	ldr	r2, [pc, #452]	; (80049c8 <main+0x50c>)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	3308      	adds	r3, #8
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	3301      	adds	r3, #1
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2bae      	cmp	r3, #174	; 0xae
 800481c:	d9e4      	bls.n	80047e8 <main+0x32c>

      #ifdef MONITOR_CHANNEL_5_RIGHT
	  ADC2_IN4_DAC_Update(&DAC1_ADC2_IN4);
      #endif

	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 800481e:	4b6c      	ldr	r3, [pc, #432]	; (80049d0 <main+0x514>)
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	eeb0 0a67 	vmov.f32	s0, s15
 8004828:	486a      	ldr	r0, [pc, #424]	; (80049d4 <main+0x518>)
 800482a:	f7ff f951 	bl	8003ad0 <ADC2_IN4_TKEO>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	4b69      	ldr	r3, [pc, #420]	; (80049d8 <main+0x51c>)
 8004834:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 8004836:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <main+0x51c>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d11e      	bne.n	800487c <main+0x3c0>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 800483e:	4b63      	ldr	r3, [pc, #396]	; (80049cc <main+0x510>)
 8004840:	edd3 7a00 	vldr	s15, [r3]
 8004844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800484c:	eeb0 0a67 	vmov.f32	s0, s15
 8004850:	4862      	ldr	r0, [pc, #392]	; (80049dc <main+0x520>)
 8004852:	f7fe f860 	bl	8002916 <ADC2_IN4_SSC>
 8004856:	eef0 7a40 	vmov.f32	s15, s0
 800485a:	4b61      	ldr	r3, [pc, #388]	; (80049e0 <main+0x524>)
 800485c:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN4_autocorr_calc();
 8004860:	f7fc fc60 	bl	8001124 <ADC2_IN4_autocorr_calc>
	  AR_4 = ADC2_IN4_autoreg_coeffs();
 8004864:	f7fc fc94 	bl	8001190 <ADC2_IN4_autoreg_coeffs>
 8004868:	4603      	mov	r3, r0
 800486a:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <main+0x528>)
 800486c:	6013      	str	r3, [r2, #0]
	  STFT_4 = ADC2_IN4_STFT_Update(&STFT_par_ADC2_IN4, &STFT_ADC2_IN4);
 800486e:	495e      	ldr	r1, [pc, #376]	; (80049e8 <main+0x52c>)
 8004870:	485e      	ldr	r0, [pc, #376]	; (80049ec <main+0x530>)
 8004872:	f7fe fc41 	bl	80030f8 <ADC2_IN4_STFT_Update>
 8004876:	4603      	mov	r3, r0
 8004878:	4a5d      	ldr	r2, [pc, #372]	; (80049f0 <main+0x534>)
 800487a:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC3_IN1_FO_biquad_filter();
 800487c:	f7fd fbc2 	bl	8002004 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 8004880:	485c      	ldr	r0, [pc, #368]	; (80049f4 <main+0x538>)
 8004882:	f7fd f995 	bl	8001bb0 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	e017      	b.n	80048bc <main+0x400>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 800488c:	4a59      	ldr	r2, [pc, #356]	; (80049f4 <main+0x538>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3308      	adds	r3, #8
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	3304      	adds	r3, #4
 8004898:	ed93 7a00 	vldr	s14, [r3]
 800489c:	4b56      	ldr	r3, [pc, #344]	; (80049f8 <main+0x53c>)
 800489e:	edd3 7a00 	vldr	s15, [r3]
 80048a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048a6:	4a53      	ldr	r2, [pc, #332]	; (80049f4 <main+0x538>)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3308      	adds	r3, #8
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	3304      	adds	r3, #4
 80048b2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3301      	adds	r3, #1
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2bae      	cmp	r3, #174	; 0xae
 80048c0:	d9e4      	bls.n	800488c <main+0x3d0>
      #ifdef MONITOR_CHANNEL_3_LEFT
	  ADC3_IN1_DAC_Update(&DAC1_ADC3_IN1);
      #endif


	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 80048c2:	4b4e      	ldr	r3, [pc, #312]	; (80049fc <main+0x540>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	eeb0 0a67 	vmov.f32	s0, s15
 80048cc:	484c      	ldr	r0, [pc, #304]	; (8004a00 <main+0x544>)
 80048ce:	f7ff f9c3 	bl	8003c58 <ADC3_IN1_TKEO>
 80048d2:	4603      	mov	r3, r0
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <main+0x548>)
 80048d8:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 80048da:	4b4a      	ldr	r3, [pc, #296]	; (8004a04 <main+0x548>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d11e      	bne.n	8004920 <main+0x464>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 80048e2:	4b45      	ldr	r3, [pc, #276]	; (80049f8 <main+0x53c>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048f0:	eeb0 0a67 	vmov.f32	s0, s15
 80048f4:	4844      	ldr	r0, [pc, #272]	; (8004a08 <main+0x54c>)
 80048f6:	f7fe f87d 	bl	80029f4 <ADC3_IN1_SSC>
 80048fa:	eef0 7a40 	vmov.f32	s15, s0
 80048fe:	4b43      	ldr	r3, [pc, #268]	; (8004a0c <main+0x550>)
 8004900:	edc3 7a00 	vstr	s15, [r3]
	  ADC3_IN1_autocorr_calc();
 8004904:	f7fc fce4 	bl	80012d0 <ADC3_IN1_autocorr_calc>
	  AR_5 = ADC3_IN1_autoreg_coeffs();
 8004908:	f7fc fd18 	bl	800133c <ADC3_IN1_autoreg_coeffs>
 800490c:	4603      	mov	r3, r0
 800490e:	4a40      	ldr	r2, [pc, #256]	; (8004a10 <main+0x554>)
 8004910:	6013      	str	r3, [r2, #0]
	  STFT_5 = ADC3_IN1_STFT_Update(&STFT_par_ADC3_IN1, &STFT_ADC3_IN1);
 8004912:	4940      	ldr	r1, [pc, #256]	; (8004a14 <main+0x558>)
 8004914:	4840      	ldr	r0, [pc, #256]	; (8004a18 <main+0x55c>)
 8004916:	f7fe fccf 	bl	80032b8 <ADC3_IN1_STFT_Update>
 800491a:	4603      	mov	r3, r0
 800491c:	4a3f      	ldr	r2, [pc, #252]	; (8004a1c <main+0x560>)
 800491e:	6013      	str	r3, [r2, #0]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 8004920:	f7fd fbac 	bl	800207c <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 8004924:	483e      	ldr	r0, [pc, #248]	; (8004a20 <main+0x564>)
 8004926:	f7fd f9e7 	bl	8001cf8 <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 800492a:	2300      	movs	r3, #0
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	e017      	b.n	8004960 <main+0x4a4>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtracts the stored offset
 8004930:	4a3b      	ldr	r2, [pc, #236]	; (8004a20 <main+0x564>)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	ed93 7a00 	vldr	s14, [r3]
 8004940:	4b38      	ldr	r3, [pc, #224]	; (8004a24 <main+0x568>)
 8004942:	edd3 7a00 	vldr	s15, [r3]
 8004946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494a:	4a35      	ldr	r2, [pc, #212]	; (8004a20 <main+0x564>)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	3308      	adds	r3, #8
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2bae      	cmp	r3, #174	; 0xae
 8004964:	d9e4      	bls.n	8004930 <main+0x474>
      #ifdef MONITOR_CHANNEL_6_RIGHT
	  ADC3_IN2_DAC_Update(&DAC1_ADC3_IN2); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <main+0x56c>)
 8004968:	edd3 7a00 	vldr	s15, [r3]
 800496c:	eeb0 0a67 	vmov.f32	s0, s15
 8004970:	482e      	ldr	r0, [pc, #184]	; (8004a2c <main+0x570>)
 8004972:	f7ff fa35 	bl	8003de0 <ADC3_IN2_TKEO>
 8004976:	4603      	mov	r3, r0
 8004978:	461a      	mov	r2, r3
 800497a:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <main+0x574>)
 800497c:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 800497e:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <main+0x574>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	f47f ade9 	bne.w	800455a <main+0x9e>
	  {
	  /* Slope sign change */
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 8004988:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <main+0x568>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004996:	eeb0 0a67 	vmov.f32	s0, s15
 800499a:	4826      	ldr	r0, [pc, #152]	; (8004a34 <main+0x578>)
 800499c:	f7fe f899 	bl	8002ad2 <ADC3_IN2_SSC>
 80049a0:	eef0 7a40 	vmov.f32	s15, s0
 80049a4:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <main+0x57c>)
 80049a6:	edc3 7a00 	vstr	s15, [r3]
	  /* Computes the autocorrelation values and the autoregression coefficients and returns the latter */
	  ADC3_IN2_autocorr_calc();
 80049aa:	f7fc fd69 	bl	8001480 <ADC3_IN2_autocorr_calc>
	  AR_6 = ADC3_IN2_autoreg_coeffs();
 80049ae:	f7fc fd9d 	bl	80014ec <ADC3_IN2_autoreg_coeffs>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <main+0x580>)
 80049b6:	6013      	str	r3, [r2, #0]
	  /* Computes the Short Time Fourier Transform from the moving average buffer */
	  STFT_6 = ADC3_IN2_STFT_Update(&STFT_par_ADC3_IN2, &STFT_ADC3_IN2);
 80049b8:	4921      	ldr	r1, [pc, #132]	; (8004a40 <main+0x584>)
 80049ba:	4822      	ldr	r0, [pc, #136]	; (8004a44 <main+0x588>)
 80049bc:	f7fe fd5c 	bl	8003478 <ADC3_IN2_STFT_Update>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <main+0x58c>)
 80049c4:	6013      	str	r3, [r2, #0]
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80049c6:	e5c8      	b.n	800455a <main+0x9e>
 80049c8:	2000cc10 	.word	0x2000cc10
 80049cc:	2001b6a4 	.word	0x2001b6a4
 80049d0:	2001b6c4 	.word	0x2001b6c4
 80049d4:	20013108 	.word	0x20013108
 80049d8:	2001b6d3 	.word	0x2001b6d3
 80049dc:	200152b0 	.word	0x200152b0
 80049e0:	2001b6e4 	.word	0x2001b6e4
 80049e4:	2001b6fc 	.word	0x2001b6fc
 80049e8:	20017458 	.word	0x20017458
 80049ec:	20019de0 	.word	0x20019de0
 80049f0:	2001b714 	.word	0x2001b714
 80049f4:	2000d1ac 	.word	0x2000d1ac
 80049f8:	2001b6a8 	.word	0x2001b6a8
 80049fc:	2001b6c8 	.word	0x2001b6c8
 8004a00:	200136a4 	.word	0x200136a4
 8004a04:	2001b6d4 	.word	0x2001b6d4
 8004a08:	2001584c 	.word	0x2001584c
 8004a0c:	2001b6e8 	.word	0x2001b6e8
 8004a10:	2001b700 	.word	0x2001b700
 8004a14:	200179f4 	.word	0x200179f4
 8004a18:	2001a61c 	.word	0x2001a61c
 8004a1c:	2001b718 	.word	0x2001b718
 8004a20:	2000d748 	.word	0x2000d748
 8004a24:	2001b6ac 	.word	0x2001b6ac
 8004a28:	2001b6cc 	.word	0x2001b6cc
 8004a2c:	20013c40 	.word	0x20013c40
 8004a30:	2001b6d5 	.word	0x2001b6d5
 8004a34:	20015de8 	.word	0x20015de8
 8004a38:	2001b6ec 	.word	0x2001b6ec
 8004a3c:	2001b704 	.word	0x2001b704
 8004a40:	20017f90 	.word	0x20017f90
 8004a44:	2001ae58 	.word	0x2001ae58
 8004a48:	2001b71c 	.word	0x2001b71c

08004a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b094      	sub	sp, #80	; 0x50
 8004a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a52:	f107 0318 	add.w	r3, r7, #24
 8004a56:	2238      	movs	r2, #56	; 0x38
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f006 fc9e 	bl	800b39c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a72:	f003 fd71 	bl	8008558 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a80:	2302      	movs	r3, #2
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a84:	2303      	movs	r3, #3
 8004a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a90:	2302      	movs	r3, #2
 8004a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a94:	2302      	movs	r3, #2
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a9c:	f107 0318 	add.w	r3, r7, #24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f003 fe0d 	bl	80086c0 <HAL_RCC_OscConfig>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8004aac:	f000 feb0 	bl	8005810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ab0:	230f      	movs	r3, #15
 8004ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004ac4:	1d3b      	adds	r3, r7, #4
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f004 f90b 	bl	8008ce4 <HAL_RCC_ClockConfig>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004ad4:	f000 fe9c 	bl	8005810 <Error_Handler>
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3750      	adds	r7, #80	; 0x50
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	2220      	movs	r2, #32
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f006 fc4f 	bl	800b39c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004afe:	4b3a      	ldr	r3, [pc, #232]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004b04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004b06:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b14:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004b1a:	4b33      	ldr	r3, [pc, #204]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004b20:	4b31      	ldr	r3, [pc, #196]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b28:	2204      	movs	r2, #4
 8004b2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004b2c:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004b32:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8004b46:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b48:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8004b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b6c:	481e      	ldr	r0, [pc, #120]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b6e:	f001 fc53 	bl	8006418 <HAL_ADC_Init>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8004b78:	f000 fe4a 	bl	8005810 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b84:	4619      	mov	r1, r3
 8004b86:	4818      	ldr	r0, [pc, #96]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004b88:	f002 fc44 	bl	8007414 <HAL_ADCEx_MultiModeConfigChannel>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8004b92:	f000 fe3d 	bl	8005810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <MX_ADC1_Init+0x10c>)
 8004b98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b9a:	2306      	movs	r3, #6
 8004b9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004b9e:	2305      	movs	r3, #5
 8004ba0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004ba2:	237f      	movs	r3, #127	; 0x7f
 8004ba4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	480d      	ldr	r0, [pc, #52]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004bb4:	f001 feb2 	bl	800691c <HAL_ADC_ConfigChannel>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8004bbe:	f000 fe27 	bl	8005810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <MX_ADC1_Init+0x110>)
 8004bc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004bc6:	230c      	movs	r3, #12
 8004bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4806      	ldr	r0, [pc, #24]	; (8004be8 <MX_ADC1_Init+0x108>)
 8004bd0:	f001 fea4 	bl	800691c <HAL_ADC_ConfigChannel>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8004bda:	f000 fe19 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004bde:	bf00      	nop
 8004be0:	3730      	adds	r7, #48	; 0x30
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000b6dc 	.word	0x2000b6dc
 8004bec:	04300002 	.word	0x04300002
 8004bf0:	08600004 	.word	0x08600004

08004bf4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f006 fbcb 	bl	800b39c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004c06:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c08:	4a33      	ldr	r2, [pc, #204]	; (8004cd8 <MX_ADC2_Init+0xe4>)
 8004c0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004c0c:	4b31      	ldr	r3, [pc, #196]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004c14:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004c20:	4b2c      	ldr	r3, [pc, #176]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c26:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c2c:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c2e:	2204      	movs	r2, #4
 8004c30:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004c32:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004c38:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c40:	2202      	movs	r2, #2
 8004c42:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004c44:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8004c4c:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c4e:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8004c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004c54:	4b1f      	ldr	r3, [pc, #124]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004c5c:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004c72:	4818      	ldr	r0, [pc, #96]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004c74:	f001 fbd0 	bl	8006418 <HAL_ADC_Init>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8004c7e:	f000 fdc7 	bl	8005810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004c82:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <MX_ADC2_Init+0xe8>)
 8004c84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c86:	2306      	movs	r3, #6
 8004c88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004c8e:	237f      	movs	r3, #127	; 0x7f
 8004c90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004c92:	2304      	movs	r3, #4
 8004c94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004ca0:	f001 fe3c 	bl	800691c <HAL_ADC_ConfigChannel>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8004caa:	f000 fdb1 	bl	8005810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004cae:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <MX_ADC2_Init+0xec>)
 8004cb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cb2:	230c      	movs	r3, #12
 8004cb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4806      	ldr	r0, [pc, #24]	; (8004cd4 <MX_ADC2_Init+0xe0>)
 8004cbc:	f001 fe2e 	bl	800691c <HAL_ADC_ConfigChannel>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8004cc6:	f000 fda3 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004cca:	bf00      	nop
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	2000b748 	.word	0x2000b748
 8004cd8:	50000100 	.word	0x50000100
 8004cdc:	0c900008 	.word	0x0c900008
 8004ce0:	10c00010 	.word	0x10c00010

08004ce4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004cea:	463b      	mov	r3, r7
 8004cec:	2220      	movs	r2, #32
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f006 fb53 	bl	800b39c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004cf8:	4a33      	ldr	r2, [pc, #204]	; (8004dc8 <MX_ADC3_Init+0xe4>)
 8004cfa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004cfc:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d02:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8004d10:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004d16:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d1c:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d1e:	2204      	movs	r2, #4
 8004d20:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004d22:	4b28      	ldr	r3, [pc, #160]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004d28:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d30:	2202      	movs	r2, #2
 8004d32:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004d34:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d3e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004d44:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004d62:	4818      	ldr	r0, [pc, #96]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d64:	f001 fb58 	bl	8006418 <HAL_ADC_Init>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004d6e:	f000 fd4f 	bl	8005810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <MX_ADC3_Init+0xe8>)
 8004d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d76:	2306      	movs	r3, #6
 8004d78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d7e:	237f      	movs	r3, #127	; 0x7f
 8004d80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004d82:	2304      	movs	r3, #4
 8004d84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004d90:	f001 fdc4 	bl	800691c <HAL_ADC_ConfigChannel>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8004d9a:	f000 fd39 	bl	8005810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <MX_ADC3_Init+0xec>)
 8004da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004da2:	230c      	movs	r3, #12
 8004da4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004da6:	463b      	mov	r3, r7
 8004da8:	4619      	mov	r1, r3
 8004daa:	4806      	ldr	r0, [pc, #24]	; (8004dc4 <MX_ADC3_Init+0xe0>)
 8004dac:	f001 fdb6 	bl	800691c <HAL_ADC_ConfigChannel>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8004db6:	f000 fd2b 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004dba:	bf00      	nop
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000b7b4 	.word	0x2000b7b4
 8004dc8:	50000400 	.word	0x50000400
 8004dcc:	04300002 	.word	0x04300002
 8004dd0:	08600004 	.word	0x08600004

08004dd4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	; 0x30
 8004dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004dda:	463b      	mov	r3, r7
 8004ddc:	2230      	movs	r2, #48	; 0x30
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f006 fadb 	bl	800b39c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004de6:	4b1c      	ldr	r3, [pc, #112]	; (8004e58 <MX_DAC1_Init+0x84>)
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <MX_DAC1_Init+0x88>)
 8004dea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004dec:	481a      	ldr	r0, [pc, #104]	; (8004e58 <MX_DAC1_Init+0x84>)
 8004dee:	f002 fd08 	bl	8007802 <HAL_DAC_Init>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004df8:	f000 fd0a 	bl	8005810 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8004e0c:	231e      	movs	r3, #30
 8004e0e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004e20:	463b      	mov	r3, r7
 8004e22:	2200      	movs	r2, #0
 8004e24:	4619      	mov	r1, r3
 8004e26:	480c      	ldr	r0, [pc, #48]	; (8004e58 <MX_DAC1_Init+0x84>)
 8004e28:	f002 fd0e 	bl	8007848 <HAL_DAC_ConfigChannel>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8004e32:	f000 fced 	bl	8005810 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004e36:	230a      	movs	r3, #10
 8004e38:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	2210      	movs	r2, #16
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4805      	ldr	r0, [pc, #20]	; (8004e58 <MX_DAC1_Init+0x84>)
 8004e42:	f002 fd01 	bl	8007848 <HAL_DAC_ConfigChannel>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 8004e4c:	f000 fce0 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004e50:	bf00      	nop
 8004e52:	3730      	adds	r7, #48	; 0x30
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	2000b940 	.word	0x2000b940
 8004e5c:	50000800 	.word	0x50000800

08004e60 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <MX_FMAC_Init+0x20>)
 8004e66:	4a07      	ldr	r2, [pc, #28]	; (8004e84 <MX_FMAC_Init+0x24>)
 8004e68:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004e6a:	4805      	ldr	r0, [pc, #20]	; (8004e80 <MX_FMAC_Init+0x20>)
 8004e6c:	f003 f916 	bl	800809c <HAL_FMAC_Init>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8004e76:	f000 fccb 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000ba14 	.word	0x2000ba14
 8004e84:	40021400 	.word	0x40021400

08004e88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004e98:	4b14      	ldr	r3, [pc, #80]	; (8004eec <MX_TIM6_Init+0x64>)
 8004e9a:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <MX_TIM6_Init+0x68>)
 8004e9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <MX_TIM6_Init+0x64>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea4:	4b11      	ldr	r3, [pc, #68]	; (8004eec <MX_TIM6_Init+0x64>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <MX_TIM6_Init+0x64>)
 8004eac:	2207      	movs	r2, #7
 8004eae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <MX_TIM6_Init+0x64>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004eb6:	480d      	ldr	r0, [pc, #52]	; (8004eec <MX_TIM6_Init+0x64>)
 8004eb8:	f004 fb3c 	bl	8009534 <HAL_TIM_Base_Init>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004ec2:	f000 fca5 	bl	8005810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4806      	ldr	r0, [pc, #24]	; (8004eec <MX_TIM6_Init+0x64>)
 8004ed4:	f004 fdc0 	bl	8009a58 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004ede:	f000 fc97 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	2000ba4c 	.word	0x2000ba4c
 8004ef0:	40001000 	.word	0x40001000

08004ef4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004efa:	1d3b      	adds	r3, r7, #4
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004f04:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <MX_TIM7_Init+0x64>)
 8004f06:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <MX_TIM7_Init+0x68>)
 8004f08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <MX_TIM7_Init+0x64>)
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <MX_TIM7_Init+0x64>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <MX_TIM7_Init+0x64>)
 8004f18:	2207      	movs	r2, #7
 8004f1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <MX_TIM7_Init+0x64>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004f22:	480d      	ldr	r0, [pc, #52]	; (8004f58 <MX_TIM7_Init+0x64>)
 8004f24:	f004 fb06 	bl	8009534 <HAL_TIM_Base_Init>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004f2e:	f000 fc6f 	bl	8005810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004f32:	2320      	movs	r3, #32
 8004f34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4806      	ldr	r0, [pc, #24]	; (8004f58 <MX_TIM7_Init+0x64>)
 8004f40:	f004 fd8a 	bl	8009a58 <HAL_TIMEx_MasterConfigSynchronization>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004f4a:	f000 fc61 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2000ba98 	.word	0x2000ba98
 8004f5c:	40001400 	.word	0x40001400

08004f60 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	609a      	str	r2, [r3, #8]
 8004f72:	60da      	str	r2, [r3, #12]
 8004f74:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f76:	463b      	mov	r3, r7
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8004f80:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004f82:	4a20      	ldr	r2, [pc, #128]	; (8005004 <MX_TIM20_Init+0xa4>)
 8004f84:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8004f86:	4b1e      	ldr	r3, [pc, #120]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004f88:	2207      	movs	r2, #7
 8004f8a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004f94:	2207      	movs	r2, #7
 8004f96:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f98:	4b19      	ldr	r3, [pc, #100]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8004faa:	4815      	ldr	r0, [pc, #84]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004fac:	f004 fac2 	bl	8009534 <HAL_TIM_Base_Init>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8004fb6:	f000 fc2b 	bl	8005810 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8004fc2:	f107 030c 	add.w	r3, r7, #12
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	480d      	ldr	r0, [pc, #52]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004fca:	f004 fb0a 	bl	80095e2 <HAL_TIM_SlaveConfigSynchro>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8004fd4:	f000 fc1c 	bl	8005810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004fd8:	2320      	movs	r3, #32
 8004fda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4805      	ldr	r0, [pc, #20]	; (8005000 <MX_TIM20_Init+0xa0>)
 8004fea:	f004 fd35 	bl	8009a58 <HAL_TIMEx_MasterConfigSynchronization>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8004ff4:	f000 fc0c 	bl	8005810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2000bae4 	.word	0x2000bae4
 8005004:	40015000 	.word	0x40015000

08005008 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800500e:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <MX_DMA_Init+0xa8>)
 8005010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005012:	4a27      	ldr	r2, [pc, #156]	; (80050b0 <MX_DMA_Init+0xa8>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6493      	str	r3, [r2, #72]	; 0x48
 800501a:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <MX_DMA_Init+0xa8>)
 800501c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <MX_DMA_Init+0xa8>)
 8005028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502a:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <MX_DMA_Init+0xa8>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6493      	str	r3, [r2, #72]	; 0x48
 8005032:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <MX_DMA_Init+0xa8>)
 8005034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800503e:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <MX_DMA_Init+0xa8>)
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <MX_DMA_Init+0xa8>)
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	6493      	str	r3, [r2, #72]	; 0x48
 800504a:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <MX_DMA_Init+0xa8>)
 800504c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	200b      	movs	r0, #11
 800505c:	f002 fb9d 	bl	800779a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005060:	200b      	movs	r0, #11
 8005062:	f002 fbb4 	bl	80077ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005066:	2200      	movs	r2, #0
 8005068:	2100      	movs	r1, #0
 800506a:	200d      	movs	r0, #13
 800506c:	f002 fb95 	bl	800779a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005070:	200d      	movs	r0, #13
 8005072:	f002 fbac 	bl	80077ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005076:	2200      	movs	r2, #0
 8005078:	2100      	movs	r1, #0
 800507a:	2010      	movs	r0, #16
 800507c:	f002 fb8d 	bl	800779a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005080:	2010      	movs	r0, #16
 8005082:	f002 fba4 	bl	80077ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8005086:	2200      	movs	r2, #0
 8005088:	2100      	movs	r1, #0
 800508a:	2038      	movs	r0, #56	; 0x38
 800508c:	f002 fb85 	bl	800779a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005090:	2038      	movs	r0, #56	; 0x38
 8005092:	f002 fb9c 	bl	80077ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	2061      	movs	r0, #97	; 0x61
 800509c:	f002 fb7d 	bl	800779a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80050a0:	2061      	movs	r0, #97	; 0x61
 80050a2:	f002 fb94 	bl	80077ce <HAL_NVIC_EnableIRQ>

}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000

080050b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ba:	f107 0314 	add.w	r3, r7, #20
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	609a      	str	r2, [r3, #8]
 80050c6:	60da      	str	r2, [r3, #12]
 80050c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050ca:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <MX_GPIO_Init+0xc0>)
 80050cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ce:	4a29      	ldr	r2, [pc, #164]	; (8005174 <MX_GPIO_Init+0xc0>)
 80050d0:	f043 0310 	orr.w	r3, r3, #16
 80050d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050d6:	4b27      	ldr	r3, [pc, #156]	; (8005174 <MX_GPIO_Init+0xc0>)
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80050e2:	4b24      	ldr	r3, [pc, #144]	; (8005174 <MX_GPIO_Init+0xc0>)
 80050e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e6:	4a23      	ldr	r2, [pc, #140]	; (8005174 <MX_GPIO_Init+0xc0>)
 80050e8:	f043 0320 	orr.w	r3, r3, #32
 80050ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ee:	4b21      	ldr	r3, [pc, #132]	; (8005174 <MX_GPIO_Init+0xc0>)
 80050f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fa:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <MX_GPIO_Init+0xc0>)
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <MX_GPIO_Init+0xc0>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <MX_GPIO_Init+0xc0>)
 8005108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005112:	4b18      	ldr	r3, [pc, #96]	; (8005174 <MX_GPIO_Init+0xc0>)
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	4a17      	ldr	r2, [pc, #92]	; (8005174 <MX_GPIO_Init+0xc0>)
 8005118:	f043 0302 	orr.w	r3, r3, #2
 800511c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <MX_GPIO_Init+0xc0>)
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800512a:	2200      	movs	r2, #0
 800512c:	2120      	movs	r1, #32
 800512e:	4812      	ldr	r0, [pc, #72]	; (8005178 <MX_GPIO_Init+0xc4>)
 8005130:	f003 f9e2 	bl	80084f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_bgn_aqstn_Pin */
  GPIO_InitStruct.Pin = GPIO_bgn_aqstn_Pin;
 8005134:	2304      	movs	r3, #4
 8005136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005138:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800513c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800513e:	2302      	movs	r3, #2
 8005140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_bgn_aqstn_GPIO_Port, &GPIO_InitStruct);
 8005142:	f107 0314 	add.w	r3, r7, #20
 8005146:	4619      	mov	r1, r3
 8005148:	480b      	ldr	r0, [pc, #44]	; (8005178 <MX_GPIO_Init+0xc4>)
 800514a:	f003 f853 	bl	80081f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800514e:	2320      	movs	r3, #32
 8005150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005152:	2301      	movs	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800515a:	2300      	movs	r3, #0
 800515c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800515e:	f107 0314 	add.w	r3, r7, #20
 8005162:	4619      	mov	r1, r3
 8005164:	4804      	ldr	r0, [pc, #16]	; (8005178 <MX_GPIO_Init+0xc4>)
 8005166:	f003 f845 	bl	80081f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800516a:	bf00      	nop
 800516c:	3728      	adds	r7, #40	; 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000
 8005178:	48001000 	.word	0x48001000

0800517c <EXT12_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXT12_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0

	  /* ADC1 is started using timer 6 triggered conversions */
	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
      ADC_status = HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005182:	4bba      	ldr	r3, [pc, #744]	; (800546c <EXT12_IRQHandler+0x2f0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800518a:	4619      	mov	r1, r3
 800518c:	48b8      	ldr	r0, [pc, #736]	; (8005470 <EXT12_IRQHandler+0x2f4>)
 800518e:	f001 faf1 	bl	8006774 <HAL_ADC_Start_DMA>
 8005192:	4603      	mov	r3, r0
 8005194:	461a      	mov	r2, r3
 8005196:	4bb7      	ldr	r3, [pc, #732]	; (8005474 <EXT12_IRQHandler+0x2f8>)
 8005198:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc1);
 800519a:	48b5      	ldr	r0, [pc, #724]	; (8005470 <EXT12_IRQHandler+0x2f4>)
 800519c:	f000 fa16 	bl	80055cc <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 80051a0:	48b3      	ldr	r0, [pc, #716]	; (8005470 <EXT12_IRQHandler+0x2f4>)
 80051a2:	f000 faa1 	bl	80056e8 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
	  ADC_status = HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 80051a6:	4bb4      	ldr	r3, [pc, #720]	; (8005478 <EXT12_IRQHandler+0x2fc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80051ae:	4619      	mov	r1, r3
 80051b0:	48b2      	ldr	r0, [pc, #712]	; (800547c <EXT12_IRQHandler+0x300>)
 80051b2:	f001 fadf 	bl	8006774 <HAL_ADC_Start_DMA>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	4bae      	ldr	r3, [pc, #696]	; (8005474 <EXT12_IRQHandler+0x2f8>)
 80051bc:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc2);
 80051be:	48af      	ldr	r0, [pc, #700]	; (800547c <EXT12_IRQHandler+0x300>)
 80051c0:	f000 fa04 	bl	80055cc <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc2);
 80051c4:	48ad      	ldr	r0, [pc, #692]	; (800547c <EXT12_IRQHandler+0x300>)
 80051c6:	f000 fa8f 	bl	80056e8 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
	  ADC_status = HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 80051ca:	4bad      	ldr	r3, [pc, #692]	; (8005480 <EXT12_IRQHandler+0x304>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80051d2:	4619      	mov	r1, r3
 80051d4:	48ab      	ldr	r0, [pc, #684]	; (8005484 <EXT12_IRQHandler+0x308>)
 80051d6:	f001 facd 	bl	8006774 <HAL_ADC_Start_DMA>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	4ba5      	ldr	r3, [pc, #660]	; (8005474 <EXT12_IRQHandler+0x2f8>)
 80051e0:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc3);
 80051e2:	48a8      	ldr	r0, [pc, #672]	; (8005484 <EXT12_IRQHandler+0x308>)
 80051e4:	f000 f9f2 	bl	80055cc <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc3);
 80051e8:	48a6      	ldr	r0, [pc, #664]	; (8005484 <EXT12_IRQHandler+0x308>)
 80051ea:	f000 fa7d 	bl	80056e8 <HAL_ADC_ConvCpltCallback>

	/* Calculating the offset value and standard deviation for the base line signal for all the channels */
	if(Offset_1_Calculated==0)
 80051ee:	4ba6      	ldr	r3, [pc, #664]	; (8005488 <EXT12_IRQHandler+0x30c>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d13e      	bne.n	8005274 <EXT12_IRQHandler+0xf8>
	{
	  float32_t OffsetSum_1 = 0.0f;
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005202:	e01a      	b.n	800523a <EXT12_IRQHandler+0xbe>
		{
			/* Collects samples to fill the buffer */
			update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8005204:	f7fc fe0e 	bl	8001e24 <update_ADC1_IN1_FO_biquad_filter>
			MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 8005208:	48a0      	ldr	r0, [pc, #640]	; (800548c <EXT12_IRQHandler+0x310>)
 800520a:	f7fc fa41 	bl	8001690 <MA_ADC1_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 800520e:	48a0      	ldr	r0, [pc, #640]	; (8005490 <EXT12_IRQHandler+0x314>)
 8005210:	f7fc ff4c 	bl	80020ac <ADC1_IN1_OffsetCalc>
 8005214:	eef0 7a40 	vmov.f32	s15, s0
 8005218:	4b9e      	ldr	r3, [pc, #632]	; (8005494 <EXT12_IRQHandler+0x318>)
 800521a:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_1 += Offset_1;
 800521e:	4b9d      	ldr	r3, [pc, #628]	; (8005494 <EXT12_IRQHandler+0x318>)
 8005220:	edd3 7a00 	vldr	s15, [r3]
 8005224:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800522c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8005230:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005234:	3301      	adds	r3, #1
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800523e:	2b13      	cmp	r3, #19
 8005240:	d9e0      	bls.n	8005204 <EXT12_IRQHandler+0x88>
		}

	  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 8005242:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005246:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800524a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800524e:	4b91      	ldr	r3, [pc, #580]	; (8005494 <EXT12_IRQHandler+0x318>)
 8005250:	edc3 7a00 	vstr	s15, [r3]
	  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 8005254:	4b8c      	ldr	r3, [pc, #560]	; (8005488 <EXT12_IRQHandler+0x30c>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]

	  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 800525a:	4b8e      	ldr	r3, [pc, #568]	; (8005494 <EXT12_IRQHandler+0x318>)
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	eeb0 0a67 	vmov.f32	s0, s15
 8005264:	488c      	ldr	r0, [pc, #560]	; (8005498 <EXT12_IRQHandler+0x31c>)
 8005266:	f7fd f841 	bl	80022ec <ADC1_IN1_SD_BL>
 800526a:	eef0 7a40 	vmov.f32	s15, s0
 800526e:	4b8b      	ldr	r3, [pc, #556]	; (800549c <EXT12_IRQHandler+0x320>)
 8005270:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_2_Calculated==0)
 8005274:	4b8a      	ldr	r3, [pc, #552]	; (80054a0 <EXT12_IRQHandler+0x324>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d13b      	bne.n	80052f4 <EXT12_IRQHandler+0x178>
	{
	  float32_t OffsetSum_2;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e01a      	b.n	80052ba <EXT12_IRQHandler+0x13e>
		{

			update_ADC1_IN2_FO_biquad_filter();
 8005284:	f7fc fe0a 	bl	8001e9c <update_ADC1_IN2_FO_biquad_filter>
			MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8005288:	4886      	ldr	r0, [pc, #536]	; (80054a4 <EXT12_IRQHandler+0x328>)
 800528a:	f7fc faa5 	bl	80017d8 <MA_ADC1_IN2_Update>


			Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 800528e:	4886      	ldr	r0, [pc, #536]	; (80054a8 <EXT12_IRQHandler+0x32c>)
 8005290:	f7fc ff3c 	bl	800210c <ADC1_IN2_OffsetCalc>
 8005294:	eef0 7a40 	vmov.f32	s15, s0
 8005298:	4b84      	ldr	r3, [pc, #528]	; (80054ac <EXT12_IRQHandler+0x330>)
 800529a:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_2 += Offset_2;
 800529e:	4b83      	ldr	r3, [pc, #524]	; (80054ac <EXT12_IRQHandler+0x330>)
 80052a0:	edd3 7a00 	vldr	s15, [r3]
 80052a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80052a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80052b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052b4:	3301      	adds	r3, #1
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052be:	2b13      	cmp	r3, #19
 80052c0:	d9e0      	bls.n	8005284 <EXT12_IRQHandler+0x108>
		}

	  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 80052c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80052c6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80052ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052ce:	4b77      	ldr	r3, [pc, #476]	; (80054ac <EXT12_IRQHandler+0x330>)
 80052d0:	edc3 7a00 	vstr	s15, [r3]
	  Offset_2_Calculated = 1;
 80052d4:	4b72      	ldr	r3, [pc, #456]	; (80054a0 <EXT12_IRQHandler+0x324>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]

	  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 80052da:	4b74      	ldr	r3, [pc, #464]	; (80054ac <EXT12_IRQHandler+0x330>)
 80052dc:	edd3 7a00 	vldr	s15, [r3]
 80052e0:	eeb0 0a67 	vmov.f32	s0, s15
 80052e4:	4872      	ldr	r0, [pc, #456]	; (80054b0 <EXT12_IRQHandler+0x334>)
 80052e6:	f7fd f84d 	bl	8002384 <ADC1_IN2_SD_BL>
 80052ea:	eef0 7a40 	vmov.f32	s15, s0
 80052ee:	4b71      	ldr	r3, [pc, #452]	; (80054b4 <EXT12_IRQHandler+0x338>)
 80052f0:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_3_Calculated==0)
 80052f4:	4b70      	ldr	r3, [pc, #448]	; (80054b8 <EXT12_IRQHandler+0x33c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d137      	bne.n	800536c <EXT12_IRQHandler+0x1f0>
	{
	  float32_t OffsetSum_3;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80052fc:	2300      	movs	r3, #0
 80052fe:	76fb      	strb	r3, [r7, #27]
 8005300:	e018      	b.n	8005334 <EXT12_IRQHandler+0x1b8>
		{

			update_ADC2_IN3_FO_biquad_filter();
 8005302:	f7fc fe07 	bl	8001f14 <update_ADC2_IN3_FO_biquad_filter>
			MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8005306:	486d      	ldr	r0, [pc, #436]	; (80054bc <EXT12_IRQHandler+0x340>)
 8005308:	f7fc fb0a 	bl	8001920 <MA_ADC2_IN3_Update>


			Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 800530c:	486c      	ldr	r0, [pc, #432]	; (80054c0 <EXT12_IRQHandler+0x344>)
 800530e:	f7fc ff2d 	bl	800216c <ADC2_IN3_OffsetCalc>
 8005312:	eef0 7a40 	vmov.f32	s15, s0
 8005316:	4b6b      	ldr	r3, [pc, #428]	; (80054c4 <EXT12_IRQHandler+0x348>)
 8005318:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_3 += Offset_3;
 800531c:	4b69      	ldr	r3, [pc, #420]	; (80054c4 <EXT12_IRQHandler+0x348>)
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	ed97 7a07 	vldr	s14, [r7, #28]
 8005326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800532e:	7efb      	ldrb	r3, [r7, #27]
 8005330:	3301      	adds	r3, #1
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	7efb      	ldrb	r3, [r7, #27]
 8005336:	2b13      	cmp	r3, #19
 8005338:	d9e3      	bls.n	8005302 <EXT12_IRQHandler+0x186>
		}

	  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 800533a:	ed97 7a07 	vldr	s14, [r7, #28]
 800533e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <EXT12_IRQHandler+0x348>)
 8005348:	edc3 7a00 	vstr	s15, [r3]
	  Offset_3_Calculated = 1;
 800534c:	4b5a      	ldr	r3, [pc, #360]	; (80054b8 <EXT12_IRQHandler+0x33c>)
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]

	  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 8005352:	4b5c      	ldr	r3, [pc, #368]	; (80054c4 <EXT12_IRQHandler+0x348>)
 8005354:	edd3 7a00 	vldr	s15, [r3]
 8005358:	eeb0 0a67 	vmov.f32	s0, s15
 800535c:	485a      	ldr	r0, [pc, #360]	; (80054c8 <EXT12_IRQHandler+0x34c>)
 800535e:	f7fd f85d 	bl	800241c <ADC2_IN3_SD_BL>
 8005362:	eef0 7a40 	vmov.f32	s15, s0
 8005366:	4b59      	ldr	r3, [pc, #356]	; (80054cc <EXT12_IRQHandler+0x350>)
 8005368:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_4_Calculated==0)
 800536c:	4b58      	ldr	r3, [pc, #352]	; (80054d0 <EXT12_IRQHandler+0x354>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d137      	bne.n	80053e4 <EXT12_IRQHandler+0x268>
	{
	  float32_t OffsetSum_4;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005374:	2300      	movs	r3, #0
 8005376:	74fb      	strb	r3, [r7, #19]
 8005378:	e018      	b.n	80053ac <EXT12_IRQHandler+0x230>
		{

			update_ADC2_IN4_FO_biquad_filter();
 800537a:	f7fc fe07 	bl	8001f8c <update_ADC2_IN4_FO_biquad_filter>
			MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 800537e:	4855      	ldr	r0, [pc, #340]	; (80054d4 <EXT12_IRQHandler+0x358>)
 8005380:	f7fc fb72 	bl	8001a68 <MA_ADC2_IN4_Update>


			Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 8005384:	4854      	ldr	r0, [pc, #336]	; (80054d8 <EXT12_IRQHandler+0x35c>)
 8005386:	f7fc ff21 	bl	80021cc <ADC2_IN4_OffsetCalc>
 800538a:	eef0 7a40 	vmov.f32	s15, s0
 800538e:	4b53      	ldr	r3, [pc, #332]	; (80054dc <EXT12_IRQHandler+0x360>)
 8005390:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_4 += Offset_4;
 8005394:	4b51      	ldr	r3, [pc, #324]	; (80054dc <EXT12_IRQHandler+0x360>)
 8005396:	edd3 7a00 	vldr	s15, [r3]
 800539a:	ed97 7a05 	vldr	s14, [r7, #20]
 800539e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a2:	edc7 7a05 	vstr	s15, [r7, #20]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	3301      	adds	r3, #1
 80053aa:	74fb      	strb	r3, [r7, #19]
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b13      	cmp	r3, #19
 80053b0:	d9e3      	bls.n	800537a <EXT12_IRQHandler+0x1fe>
		}

	  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 80053b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80053b6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80053ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <EXT12_IRQHandler+0x360>)
 80053c0:	edc3 7a00 	vstr	s15, [r3]
	  Offset_4_Calculated = 1;
 80053c4:	4b42      	ldr	r3, [pc, #264]	; (80054d0 <EXT12_IRQHandler+0x354>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]

	  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 80053ca:	4b44      	ldr	r3, [pc, #272]	; (80054dc <EXT12_IRQHandler+0x360>)
 80053cc:	edd3 7a00 	vldr	s15, [r3]
 80053d0:	eeb0 0a67 	vmov.f32	s0, s15
 80053d4:	4842      	ldr	r0, [pc, #264]	; (80054e0 <EXT12_IRQHandler+0x364>)
 80053d6:	f7fd f86d 	bl	80024b4 <ADC2_IN4_SD_BL>
 80053da:	eef0 7a40 	vmov.f32	s15, s0
 80053de:	4b41      	ldr	r3, [pc, #260]	; (80054e4 <EXT12_IRQHandler+0x368>)
 80053e0:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_5_Calculated==0)
 80053e4:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <EXT12_IRQHandler+0x36c>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d137      	bne.n	800545c <EXT12_IRQHandler+0x2e0>
	{
	  float32_t OffsetSum_5;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80053ec:	2300      	movs	r3, #0
 80053ee:	72fb      	strb	r3, [r7, #11]
 80053f0:	e018      	b.n	8005424 <EXT12_IRQHandler+0x2a8>
		{
			/* Collects samples to fill the buffer */
			update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 80053f2:	f7fc fe07 	bl	8002004 <update_ADC3_IN1_FO_biquad_filter>
			MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 80053f6:	483d      	ldr	r0, [pc, #244]	; (80054ec <EXT12_IRQHandler+0x370>)
 80053f8:	f7fc fbda 	bl	8001bb0 <MA_ADC3_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 80053fc:	483c      	ldr	r0, [pc, #240]	; (80054f0 <EXT12_IRQHandler+0x374>)
 80053fe:	f7fc ff15 	bl	800222c <ADC3_IN1_OffsetCalc>
 8005402:	eef0 7a40 	vmov.f32	s15, s0
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <EXT12_IRQHandler+0x318>)
 8005408:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_5 += Offset_5;
 800540c:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <EXT12_IRQHandler+0x378>)
 800540e:	edd3 7a00 	vldr	s15, [r3]
 8005412:	ed97 7a03 	vldr	s14, [r7, #12]
 8005416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800541a:	edc7 7a03 	vstr	s15, [r7, #12]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	3301      	adds	r3, #1
 8005422:	72fb      	strb	r3, [r7, #11]
 8005424:	7afb      	ldrb	r3, [r7, #11]
 8005426:	2b13      	cmp	r3, #19
 8005428:	d9e3      	bls.n	80053f2 <EXT12_IRQHandler+0x276>
		}

	  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 800542a:	ed97 7a03 	vldr	s14, [r7, #12]
 800542e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005436:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <EXT12_IRQHandler+0x378>)
 8005438:	edc3 7a00 	vstr	s15, [r3]
	  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 800543c:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <EXT12_IRQHandler+0x36c>)
 800543e:	2201      	movs	r2, #1
 8005440:	701a      	strb	r2, [r3, #0]

	  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 8005442:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <EXT12_IRQHandler+0x378>)
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	eeb0 0a67 	vmov.f32	s0, s15
 800544c:	482a      	ldr	r0, [pc, #168]	; (80054f8 <EXT12_IRQHandler+0x37c>)
 800544e:	f7fd f87d 	bl	800254c <ADC3_IN1_SD_BL>
 8005452:	eef0 7a40 	vmov.f32	s15, s0
 8005456:	4b29      	ldr	r3, [pc, #164]	; (80054fc <EXT12_IRQHandler+0x380>)
 8005458:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_6_Calculated==0)
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <EXT12_IRQHandler+0x384>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f040 8084 	bne.w	800556e <EXT12_IRQHandler+0x3f2>
	{
	  float32_t OffsetSum_6;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005466:	2300      	movs	r3, #0
 8005468:	70fb      	strb	r3, [r7, #3]
 800546a:	e064      	b.n	8005536 <EXT12_IRQHandler+0x3ba>
 800546c:	2000bb30 	.word	0x2000bb30
 8005470:	2000b6dc 	.word	0x2000b6dc
 8005474:	2001b694 	.word	0x2001b694
 8005478:	2000bb34 	.word	0x2000bb34
 800547c:	2000b748 	.word	0x2000b748
 8005480:	2000bb38 	.word	0x2000bb38
 8005484:	2000b7b4 	.word	0x2000b7b4
 8005488:	2001b6b0 	.word	0x2001b6b0
 800548c:	2000bb3c 	.word	0x2000bb3c
 8005490:	2000dce4 	.word	0x2000dce4
 8005494:	2001b698 	.word	0x2001b698
 8005498:	2000fe8c 	.word	0x2000fe8c
 800549c:	2001b6b8 	.word	0x2001b6b8
 80054a0:	2001b6b1 	.word	0x2001b6b1
 80054a4:	2000c0d8 	.word	0x2000c0d8
 80054a8:	2000e280 	.word	0x2000e280
 80054ac:	2001b69c 	.word	0x2001b69c
 80054b0:	20010428 	.word	0x20010428
 80054b4:	2001b6bc 	.word	0x2001b6bc
 80054b8:	2001b6b2 	.word	0x2001b6b2
 80054bc:	2000c674 	.word	0x2000c674
 80054c0:	2000e81c 	.word	0x2000e81c
 80054c4:	2001b6a0 	.word	0x2001b6a0
 80054c8:	200109c4 	.word	0x200109c4
 80054cc:	2001b6c0 	.word	0x2001b6c0
 80054d0:	2001b6b3 	.word	0x2001b6b3
 80054d4:	2000cc10 	.word	0x2000cc10
 80054d8:	2000edb8 	.word	0x2000edb8
 80054dc:	2001b6a4 	.word	0x2001b6a4
 80054e0:	20010f60 	.word	0x20010f60
 80054e4:	2001b6c4 	.word	0x2001b6c4
 80054e8:	2001b6b4 	.word	0x2001b6b4
 80054ec:	2000d1ac 	.word	0x2000d1ac
 80054f0:	2000f354 	.word	0x2000f354
 80054f4:	2001b6a8 	.word	0x2001b6a8
 80054f8:	200114fc 	.word	0x200114fc
 80054fc:	2001b6c8 	.word	0x2001b6c8
 8005500:	2001b6b5 	.word	0x2001b6b5
		{

			update_ADC3_IN2_FO_biquad_filter();
 8005504:	f7fc fdba 	bl	800207c <update_ADC3_IN2_FO_biquad_filter>
			MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 8005508:	481c      	ldr	r0, [pc, #112]	; (800557c <EXT12_IRQHandler+0x400>)
 800550a:	f7fc fbf5 	bl	8001cf8 <MA_ADC3_IN2_Update>


			Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 800550e:	481c      	ldr	r0, [pc, #112]	; (8005580 <EXT12_IRQHandler+0x404>)
 8005510:	f7fc febc 	bl	800228c <ADC3_IN2_OffsetCalc>
 8005514:	eef0 7a40 	vmov.f32	s15, s0
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <EXT12_IRQHandler+0x408>)
 800551a:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_6 += Offset_6;
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <EXT12_IRQHandler+0x408>)
 8005520:	edd3 7a00 	vldr	s15, [r3]
 8005524:	ed97 7a01 	vldr	s14, [r7, #4]
 8005528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800552c:	edc7 7a01 	vstr	s15, [r7, #4]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	3301      	adds	r3, #1
 8005534:	70fb      	strb	r3, [r7, #3]
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	2b13      	cmp	r3, #19
 800553a:	d9e3      	bls.n	8005504 <EXT12_IRQHandler+0x388>
		}

	  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 800553c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005540:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <EXT12_IRQHandler+0x408>)
 800554a:	edc3 7a00 	vstr	s15, [r3]
	  Offset_6_Calculated = 1;
 800554e:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <EXT12_IRQHandler+0x40c>)
 8005550:	2201      	movs	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]

	  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <EXT12_IRQHandler+0x408>)
 8005556:	edd3 7a00 	vldr	s15, [r3]
 800555a:	eeb0 0a67 	vmov.f32	s0, s15
 800555e:	480b      	ldr	r0, [pc, #44]	; (800558c <EXT12_IRQHandler+0x410>)
 8005560:	f7fd f840 	bl	80025e4 <ADC3_IN2_SD_BL>
 8005564:	eef0 7a40 	vmov.f32	s15, s0
 8005568:	4b09      	ldr	r3, [pc, #36]	; (8005590 <EXT12_IRQHandler+0x414>)
 800556a:	edc3 7a00 	vstr	s15, [r3]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);  // Calls the HAL's callback function
 800556e:	2004      	movs	r0, #4
 8005570:	f002 ffda 	bl	8008528 <HAL_GPIO_EXTI_IRQHandler>
}
 8005574:	bf00      	nop
 8005576:	3730      	adds	r7, #48	; 0x30
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	2000d748 	.word	0x2000d748
 8005580:	2000f8f0 	.word	0x2000f8f0
 8005584:	2001b6ac 	.word	0x2001b6ac
 8005588:	2001b6b5 	.word	0x2001b6b5
 800558c:	20011a98 	.word	0x20011a98
 8005590:	2001b6cc 	.word	0x2001b6cc

08005594 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Callback function (Called by HAL_GPIO_EXTI_IRQHandler (above))
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2)
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d10d      	bne.n	80055c0 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		// Turn the LED connected to PE5 on
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80055a4:	2201      	movs	r2, #1
 80055a6:	2120      	movs	r1, #32
 80055a8:	4807      	ldr	r0, [pc, #28]	; (80055c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80055aa:	f002 ffa5 	bl	80084f8 <HAL_GPIO_WritePin>

        // Delay for 2 seconds (2000 milliseconds)
        HAL_Delay(2000);
 80055ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80055b2:	f000 fcf1 	bl	8005f98 <HAL_Delay>

        // Turn the LED off
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80055b6:	2200      	movs	r2, #0
 80055b8:	2120      	movs	r1, #32
 80055ba:	4803      	ldr	r0, [pc, #12]	; (80055c8 <HAL_GPIO_EXTI_Callback+0x34>)
 80055bc:	f002 ff9c 	bl	80084f8 <HAL_GPIO_WritePin>
	}
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	48001000 	.word	0x48001000

080055cc <HAL_ADC_ConvHalfCpltCallback>:

void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055dc:	d123      	bne.n	8005626 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 80055de:	f7fe fcc3 	bl	8003f68 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 80055e2:	4b3c      	ldr	r3, [pc, #240]	; (80056d4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a3b      	ldr	r2, [pc, #236]	; (80056d4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 80055ee:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80055f2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 80055f6:	4b37      	ldr	r3, [pc, #220]	; (80056d4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a36      	ldr	r2, [pc, #216]	; (80056d4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005602:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8005606:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800560a:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a30      	ldr	r2, [pc, #192]	; (80056d4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800561a:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 800561e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005622:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d123      	bne.n	8005678 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8005630:	f7fe fd7e 	bl	8004130 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8005634:	4b29      	ldr	r3, [pc, #164]	; (80056dc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a28      	ldr	r2, [pc, #160]	; (80056dc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8005640:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005644:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a23      	ldr	r2, [pc, #140]	; (80056dc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005654:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8005658:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800565c:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005660:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800566c:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8005670:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005674:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a18      	ldr	r2, [pc, #96]	; (80056e0 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d123      	bne.n	80056ca <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 8005682:	f7fe fe39 	bl	80042f8 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8005686:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8005692:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005696:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80056a6:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 80056aa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80056ae:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80056b2:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a0b      	ldr	r2, [pc, #44]	; (80056e4 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80056be:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 80056c2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80056c6:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000bb30 	.word	0x2000bb30
 80056d8:	50000100 	.word	0x50000100
 80056dc:	2000bb34 	.word	0x2000bb34
 80056e0:	50000400 	.word	0x50000400
 80056e4:	2000bb38 	.word	0x2000bb38

080056e8 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056f8:	d125      	bne.n	8005746 <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 80056fa:	f7fe fca5 	bl	8004048 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 80056fe:	4b3f      	ldr	r3, [pc, #252]	; (80057fc <HAL_ADC_ConvCpltCallback+0x114>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <HAL_ADC_ConvCpltCallback+0x114>)
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800570a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800570e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005712:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8005716:	4b39      	ldr	r3, [pc, #228]	; (80057fc <HAL_ADC_ConvCpltCallback+0x114>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a38      	ldr	r2, [pc, #224]	; (80057fc <HAL_ADC_ConvCpltCallback+0x114>)
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005722:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8005726:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800572a:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 800572e:	4b33      	ldr	r3, [pc, #204]	; (80057fc <HAL_ADC_ConvCpltCallback+0x114>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a32      	ldr	r2, [pc, #200]	; (80057fc <HAL_ADC_ConvCpltCallback+0x114>)
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800573a:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 800573e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005742:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <HAL_ADC_ConvCpltCallback+0x118>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d125      	bne.n	800579c <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb();
 8005750:	f7fe fd5e 	bl	8004210 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8005754:	4b2b      	ldr	r3, [pc, #172]	; (8005804 <HAL_ADC_ConvCpltCallback+0x11c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2a      	ldr	r2, [pc, #168]	; (8005804 <HAL_ADC_ConvCpltCallback+0x11c>)
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005760:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8005764:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005768:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800576c:	4b25      	ldr	r3, [pc, #148]	; (8005804 <HAL_ADC_ConvCpltCallback+0x11c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a24      	ldr	r2, [pc, #144]	; (8005804 <HAL_ADC_ConvCpltCallback+0x11c>)
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005778:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800577c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8005780:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8005784:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <HAL_ADC_ConvCpltCallback+0x11c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_ADC_ConvCpltCallback+0x11c>)
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005790:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8005794:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005798:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a19      	ldr	r2, [pc, #100]	; (8005808 <HAL_ADC_ConvCpltCallback+0x120>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d125      	bne.n	80057f2 <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb();
 80057a6:	f7fe fe17 	bl	80043d8 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 80057aa:	4b18      	ldr	r3, [pc, #96]	; (800580c <HAL_ADC_ConvCpltCallback+0x124>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_ADC_ConvCpltCallback+0x124>)
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80057ba:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80057be:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_ADC_ConvCpltCallback+0x124>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a11      	ldr	r2, [pc, #68]	; (800580c <HAL_ADC_ConvCpltCallback+0x124>)
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80057ce:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80057d2:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80057d6:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <HAL_ADC_ConvCpltCallback+0x124>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a0b      	ldr	r2, [pc, #44]	; (800580c <HAL_ADC_ConvCpltCallback+0x124>)
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80057e6:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 80057ea:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80057ee:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	2000bb30 	.word	0x2000bb30
 8005800:	50000100 	.word	0x50000100
 8005804:	2000bb34 	.word	0x2000bb34
 8005808:	50000400 	.word	0x50000400
 800580c:	2000bb38 	.word	0x2000bb38

08005810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005814:	b672      	cpsid	i
}
 8005816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005818:	e7fe      	b.n	8005818 <Error_Handler+0x8>
	...

0800581c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <HAL_MspInit+0x44>)
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	4a0e      	ldr	r2, [pc, #56]	; (8005860 <HAL_MspInit+0x44>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6613      	str	r3, [r2, #96]	; 0x60
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <HAL_MspInit+0x44>)
 8005830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_MspInit+0x44>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	4a08      	ldr	r2, [pc, #32]	; (8005860 <HAL_MspInit+0x44>)
 8005840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005844:	6593      	str	r3, [r2, #88]	; 0x58
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_MspInit+0x44>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005852:	f002 ff25 	bl	80086a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000

08005864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b0a2      	sub	sp, #136	; 0x88
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800587c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005880:	2250      	movs	r2, #80	; 0x50
 8005882:	2100      	movs	r1, #0
 8005884:	4618      	mov	r0, r3
 8005886:	f005 fd89 	bl	800b39c <memset>
  if(hadc->Instance==ADC1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005892:	d169      	bne.n	8005968 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800589a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800589e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a4:	4618      	mov	r0, r3
 80058a6:	f003 fc09 	bl	80090bc <HAL_RCCEx_PeriphCLKConfig>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80058b0:	f7ff ffae 	bl	8005810 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80058b4:	4b64      	ldr	r3, [pc, #400]	; (8005a48 <HAL_ADC_MspInit+0x1e4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a63      	ldr	r2, [pc, #396]	; (8005a48 <HAL_ADC_MspInit+0x1e4>)
 80058bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80058be:	4b62      	ldr	r3, [pc, #392]	; (8005a48 <HAL_ADC_MspInit+0x1e4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10b      	bne.n	80058de <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80058c6:	4b61      	ldr	r3, [pc, #388]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	4a60      	ldr	r2, [pc, #384]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80058cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058d2:	4b5e      	ldr	r3, [pc, #376]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80058d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058de:	4b5b      	ldr	r3, [pc, #364]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80058e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e2:	4a5a      	ldr	r2, [pc, #360]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058ea:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80058ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80058f6:	2303      	movs	r3, #3
 80058f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058fa:	2303      	movs	r3, #3
 80058fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005902:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005906:	4619      	mov	r1, r3
 8005908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800590c:	f002 fc72 	bl	80081f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005910:	4b4f      	ldr	r3, [pc, #316]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005912:	4a50      	ldr	r2, [pc, #320]	; (8005a54 <HAL_ADC_MspInit+0x1f0>)
 8005914:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005916:	4b4e      	ldr	r3, [pc, #312]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005918:	2205      	movs	r2, #5
 800591a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800591c:	4b4c      	ldr	r3, [pc, #304]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 800591e:	2200      	movs	r2, #0
 8005920:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005922:	4b4b      	ldr	r3, [pc, #300]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005924:	2200      	movs	r2, #0
 8005926:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005928:	4b49      	ldr	r3, [pc, #292]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800592e:	4b48      	ldr	r3, [pc, #288]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005934:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005936:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800593c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800593e:	4b44      	ldr	r3, [pc, #272]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005940:	2220      	movs	r2, #32
 8005942:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005944:	4b42      	ldr	r3, [pc, #264]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005946:	2200      	movs	r2, #0
 8005948:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800594a:	4841      	ldr	r0, [pc, #260]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 800594c:	f002 f934 	bl	8007bb8 <HAL_DMA_Init>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8005956:	f7ff ff5b 	bl	8005810 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 800595e:	655a      	str	r2, [r3, #84]	; 0x54
 8005960:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <HAL_ADC_MspInit+0x1ec>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005966:	e0fa      	b.n	8005b5e <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <HAL_ADC_MspInit+0x1f4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d178      	bne.n	8005a64 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005978:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800597c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800597e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005982:	4618      	mov	r0, r3
 8005984:	f003 fb9a 	bl	80090bc <HAL_RCCEx_PeriphCLKConfig>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800598e:	f7ff ff3f 	bl	8005810 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005992:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <HAL_ADC_MspInit+0x1e4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3301      	adds	r3, #1
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <HAL_ADC_MspInit+0x1e4>)
 800599a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800599c:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <HAL_ADC_MspInit+0x1e4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d10b      	bne.n	80059bc <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80059a4:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80059a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80059aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059b0:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80059b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059bc:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	4a22      	ldr	r2, [pc, #136]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_ADC_MspInit+0x1e8>)
 80059ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059d4:	23c0      	movs	r3, #192	; 0xc0
 80059d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059d8:	2303      	movs	r3, #3
 80059da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80059e4:	4619      	mov	r1, r3
 80059e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ea:	f002 fc03 	bl	80081f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 80059ee:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <HAL_ADC_MspInit+0x1fc>)
 80059f2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80059f4:	4b19      	ldr	r3, [pc, #100]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059fa:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a00:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a08:	2280      	movs	r2, #128	; 0x80
 8005a0a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a12:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a1a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a1e:	2220      	movs	r2, #32
 8005a20:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005a28:	480c      	ldr	r0, [pc, #48]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a2a:	f002 f8c5 	bl	8007bb8 <HAL_DMA_Init>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8005a34:	f7ff feec 	bl	8005810 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
 8005a3e:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <HAL_ADC_MspInit+0x1f8>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005a44:	e08b      	b.n	8005b5e <HAL_ADC_MspInit+0x2fa>
 8005a46:	bf00      	nop
 8005a48:	2001b720 	.word	0x2001b720
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	2000b820 	.word	0x2000b820
 8005a54:	40020008 	.word	0x40020008
 8005a58:	50000100 	.word	0x50000100
 8005a5c:	2000b880 	.word	0x2000b880
 8005a60:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a3f      	ldr	r2, [pc, #252]	; (8005b68 <HAL_ADC_MspInit+0x304>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d177      	bne.n	8005b5e <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8005a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8005a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a78:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f003 fb1c 	bl	80090bc <HAL_RCCEx_PeriphCLKConfig>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8005a8a:	f7ff fec1 	bl	8005810 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a92:	4a36      	ldr	r2, [pc, #216]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a9a:	4b34      	ldr	r3, [pc, #208]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa6:	4b31      	ldr	r3, [pc, #196]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	4a30      	ldr	r2, [pc, #192]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005aac:	f043 0302 	orr.w	r3, r3, #2
 8005ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ab2:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005abe:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005ac4:	f043 0310 	orr.w	r3, r3, #16
 8005ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aca:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <HAL_ADC_MspInit+0x308>)
 8005acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	60bb      	str	r3, [r7, #8]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ada:	2303      	movs	r3, #3
 8005adc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4821      	ldr	r0, [pc, #132]	; (8005b70 <HAL_ADC_MspInit+0x30c>)
 8005aea:	f002 fb83 	bl	80081f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005af4:	2303      	movs	r3, #3
 8005af6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005afc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005b00:	4619      	mov	r1, r3
 8005b02:	481c      	ldr	r0, [pc, #112]	; (8005b74 <HAL_ADC_MspInit+0x310>)
 8005b04:	f002 fb76 	bl	80081f4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b0a:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <HAL_ADC_MspInit+0x318>)
 8005b0c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8005b0e:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b10:	2225      	movs	r2, #37	; 0x25
 8005b12:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b14:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005b20:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b22:	2280      	movs	r2, #128	; 0x80
 8005b24:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b2c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b2e:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b34:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b38:	2220      	movs	r2, #32
 8005b3a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8005b3c:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005b42:	480d      	ldr	r0, [pc, #52]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b44:	f002 f838 	bl	8007bb8 <HAL_DMA_Init>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8005b4e:	f7ff fe5f 	bl	8005810 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
 8005b58:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <HAL_ADC_MspInit+0x314>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005b5e:	bf00      	nop
 8005b60:	3788      	adds	r7, #136	; 0x88
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	50000400 	.word	0x50000400
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	48000400 	.word	0x48000400
 8005b74:	48001000 	.word	0x48001000
 8005b78:	2000b8e0 	.word	0x2000b8e0
 8005b7c:	40020408 	.word	0x40020408

08005b80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	609a      	str	r2, [r3, #8]
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a40      	ldr	r2, [pc, #256]	; (8005ca0 <HAL_DAC_MspInit+0x120>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d17a      	bne.n	8005c98 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005ba2:	4b40      	ldr	r3, [pc, #256]	; (8005ca4 <HAL_DAC_MspInit+0x124>)
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba6:	4a3f      	ldr	r2, [pc, #252]	; (8005ca4 <HAL_DAC_MspInit+0x124>)
 8005ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bae:	4b3d      	ldr	r3, [pc, #244]	; (8005ca4 <HAL_DAC_MspInit+0x124>)
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bba:	4b3a      	ldr	r3, [pc, #232]	; (8005ca4 <HAL_DAC_MspInit+0x124>)
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	4a39      	ldr	r2, [pc, #228]	; (8005ca4 <HAL_DAC_MspInit+0x124>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <HAL_DAC_MspInit+0x124>)
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005bd2:	2330      	movs	r3, #48	; 0x30
 8005bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bde:	f107 0314 	add.w	r3, r7, #20
 8005be2:	4619      	mov	r1, r3
 8005be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005be8:	f002 fb04 	bl	80081f4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8005bec:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005bee:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <HAL_DAC_MspInit+0x12c>)
 8005bf0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8005bf2:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005bf4:	2206      	movs	r2, #6
 8005bf6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bf8:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005c04:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c0a:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c10:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c12:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c18:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005c1a:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005c20:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005c26:	4820      	ldr	r0, [pc, #128]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c28:	f001 ffc6 	bl	8007bb8 <HAL_DMA_Init>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8005c32:	f7ff fded 	bl	8005810 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c3a:	609a      	str	r2, [r3, #8]
 8005c3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <HAL_DAC_MspInit+0x128>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA2_Channel6;
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c44:	4a1b      	ldr	r2, [pc, #108]	; (8005cb4 <HAL_DAC_MspInit+0x134>)
 8005c46:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8005c48:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c4a:	2207      	movs	r2, #7
 8005c4c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c50:	2210      	movs	r2, #16
 8005c52:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c54:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c60:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c66:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c68:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c6e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c72:	2220      	movs	r2, #32
 8005c74:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8005c7c:	480c      	ldr	r0, [pc, #48]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c7e:	f001 ff9b 	bl	8007bb8 <HAL_DMA_Init>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8005c88:	f7ff fdc2 	bl	8005810 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <HAL_DAC_MspInit+0x130>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005c98:	bf00      	nop
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	50000800 	.word	0x50000800
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	2000b954 	.word	0x2000b954
 8005cac:	40020030 	.word	0x40020030
 8005cb0:	2000b9b4 	.word	0x2000b9b4
 8005cb4:	4002046c 	.word	0x4002046c

08005cb8 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_FMAC_MspInit+0x38>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10b      	bne.n	8005ce2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_FMAC_MspInit+0x3c>)
 8005ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <HAL_FMAC_MspInit+0x3c>)
 8005cd0:	f043 0310 	orr.w	r3, r3, #16
 8005cd4:	6493      	str	r3, [r2, #72]	; 0x48
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <HAL_FMAC_MspInit+0x3c>)
 8005cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40021400 	.word	0x40021400
 8005cf4:	40021000 	.word	0x40021000

08005cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <HAL_TIM_Base_MspInit+0x80>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10c      	bne.n	8005d24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d10:	f043 0310 	orr.w	r3, r3, #16
 8005d14:	6593      	str	r3, [r2, #88]	; 0x58
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8005d22:	e022      	b.n	8005d6a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <HAL_TIM_Base_MspInit+0x88>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10c      	bne.n	8005d48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d34:	f043 0320 	orr.w	r3, r3, #32
 8005d38:	6593      	str	r3, [r2, #88]	; 0x58
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
}
 8005d46:	e010      	b.n	8005d6a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <HAL_TIM_Base_MspInit+0x8c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d10b      	bne.n	8005d6a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005d52:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <HAL_TIM_Base_MspInit+0x84>)
 8005d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40001000 	.word	0x40001000
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40001400 	.word	0x40001400
 8005d84:	40015000 	.word	0x40015000

08005d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005d8c:	e7fe      	b.n	8005d8c <NMI_Handler+0x4>

08005d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d92:	e7fe      	b.n	8005d92 <HardFault_Handler+0x4>

08005d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d98:	e7fe      	b.n	8005d98 <MemManage_Handler+0x4>

08005d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d9e:	e7fe      	b.n	8005d9e <BusFault_Handler+0x4>

08005da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005da4:	e7fe      	b.n	8005da4 <UsageFault_Handler+0x4>

08005da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005daa:	bf00      	nop
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005db8:	bf00      	nop
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dc6:	bf00      	nop
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dd4:	f000 f8c2 	bl	8005f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dd8:	bf00      	nop
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005de0:	4802      	ldr	r0, [pc, #8]	; (8005dec <DMA1_Channel1_IRQHandler+0x10>)
 8005de2:	f002 f80c 	bl	8007dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005de6:	bf00      	nop
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	2000b820 	.word	0x2000b820

08005df0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005df4:	4802      	ldr	r0, [pc, #8]	; (8005e00 <DMA1_Channel3_IRQHandler+0x10>)
 8005df6:	f002 f802 	bl	8007dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005dfa:	bf00      	nop
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2000b954 	.word	0x2000b954

08005e04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005e08:	4802      	ldr	r0, [pc, #8]	; (8005e14 <DMA1_Channel6_IRQHandler+0x10>)
 8005e0a:	f001 fff8 	bl	8007dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	2000b880 	.word	0x2000b880

08005e18 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005e1c:	4802      	ldr	r0, [pc, #8]	; (8005e28 <DMA2_Channel1_IRQHandler+0x10>)
 8005e1e:	f001 ffee 	bl	8007dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005e22:	bf00      	nop
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	2000b8e0 	.word	0x2000b8e0

08005e2c <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8005e30:	4802      	ldr	r0, [pc, #8]	; (8005e3c <DMA2_Channel6_IRQHandler+0x10>)
 8005e32:	f001 ffe4 	bl	8007dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2000b9b4 	.word	0x2000b9b4

08005e40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <SystemInit+0x20>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	4a05      	ldr	r2, [pc, #20]	; (8005e60 <SystemInit+0x20>)
 8005e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	e000ed00 	.word	0xe000ed00

08005e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e64:	480d      	ldr	r0, [pc, #52]	; (8005e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e68:	f7ff ffea 	bl	8005e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e6c:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e6e:	490d      	ldr	r1, [pc, #52]	; (8005ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e70:	4a0d      	ldr	r2, [pc, #52]	; (8005ea8 <LoopForever+0xe>)
  movs r3, #0
 8005e72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e74:	e002      	b.n	8005e7c <LoopCopyDataInit>

08005e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e7a:	3304      	adds	r3, #4

08005e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e80:	d3f9      	bcc.n	8005e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e84:	4c0a      	ldr	r4, [pc, #40]	; (8005eb0 <LoopForever+0x16>)
  movs r3, #0
 8005e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e88:	e001      	b.n	8005e8e <LoopFillZerobss>

08005e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e8c:	3204      	adds	r2, #4

08005e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e90:	d3fb      	bcc.n	8005e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e92:	f005 fa91 	bl	800b3b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e96:	f7fe fb11 	bl	80044bc <main>

08005e9a <LoopForever>:

LoopForever:
    b LoopForever
 8005e9a:	e7fe      	b.n	8005e9a <LoopForever>
  ldr   r0, =_estack
 8005e9c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ea4:	200078d8 	.word	0x200078d8
  ldr r2, =_sidata
 8005ea8:	0801f720 	.word	0x0801f720
  ldr r2, =_sbss
 8005eac:	200078d8 	.word	0x200078d8
  ldr r4, =_ebss
 8005eb0:	2001b860 	.word	0x2001b860

08005eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005eb4:	e7fe      	b.n	8005eb4 <ADC1_2_IRQHandler>

08005eb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ec0:	2003      	movs	r0, #3
 8005ec2:	f001 fc5f 	bl	8007784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ec6:	200f      	movs	r0, #15
 8005ec8:	f000 f80e 	bl	8005ee8 <HAL_InitTick>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	71fb      	strb	r3, [r7, #7]
 8005ed6:	e001      	b.n	8005edc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ed8:	f7ff fca0 	bl	800581c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005edc:	79fb      	ldrb	r3, [r7, #7]

}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005ef4:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <HAL_InitTick+0x68>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d022      	beq.n	8005f42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005efc:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <HAL_InitTick+0x6c>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <HAL_InitTick+0x68>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fc6a 	bl	80077ea <HAL_SYSTICK_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10f      	bne.n	8005f3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b0f      	cmp	r3, #15
 8005f20:	d809      	bhi.n	8005f36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f22:	2200      	movs	r2, #0
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2a:	f001 fc36 	bl	800779a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	; (8005f58 <HAL_InitTick+0x70>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	e007      	b.n	8005f46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
 8005f3a:	e004      	b.n	8005f46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
 8005f40:	e001      	b.n	8005f46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20007870 	.word	0x20007870
 8005f54:	20007868 	.word	0x20007868
 8005f58:	2000786c 	.word	0x2000786c

08005f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <HAL_IncTick+0x1c>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_IncTick+0x20>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4413      	add	r3, r2
 8005f6a:	4a03      	ldr	r2, [pc, #12]	; (8005f78 <HAL_IncTick+0x1c>)
 8005f6c:	6013      	str	r3, [r2, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	2001b724 	.word	0x2001b724
 8005f7c:	20007870 	.word	0x20007870

08005f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  return uwTick;
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <HAL_GetTick+0x14>)
 8005f86:	681b      	ldr	r3, [r3, #0]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2001b724 	.word	0x2001b724

08005f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fa0:	f7ff ffee 	bl	8005f80 <HAL_GetTick>
 8005fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d004      	beq.n	8005fbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_Delay+0x40>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fbc:	bf00      	nop
 8005fbe:	f7ff ffdf 	bl	8005f80 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d8f7      	bhi.n	8005fbe <HAL_Delay+0x26>
  {
  }
}
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20007870 	.word	0x20007870

08005fdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	609a      	str	r2, [r3, #8]
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3360      	adds	r3, #96	; 0x60
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <LL_ADC_SetOffset+0x44>)
 8006066:	4013      	ands	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	4313      	orrs	r3, r2
 8006074:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	03fff000 	.word	0x03fff000

0800608c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3360      	adds	r3, #96	; 0x60
 800609a:	461a      	mov	r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3360      	adds	r3, #96	; 0x60
 80060c8:	461a      	mov	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	431a      	orrs	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b087      	sub	sp, #28
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3360      	adds	r3, #96	; 0x60
 80060fe:	461a      	mov	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	431a      	orrs	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3360      	adds	r3, #96	; 0x60
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	431a      	orrs	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	615a      	str	r2, [r3, #20]
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b087      	sub	sp, #28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3330      	adds	r3, #48	; 0x30
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	0a1b      	lsrs	r3, r3, #8
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	4413      	add	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	211f      	movs	r1, #31
 80061d2:	fa01 f303 	lsl.w	r3, r1, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	401a      	ands	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	0e9b      	lsrs	r3, r3, #26
 80061de:	f003 011f 	and.w	r1, r3, #31
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	431a      	orrs	r2, r3
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80061fe:	b480      	push	{r7}
 8006200:	b087      	sub	sp, #28
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3314      	adds	r3, #20
 800620e:	461a      	mov	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	0e5b      	lsrs	r3, r3, #25
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	4413      	add	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	0d1b      	lsrs	r3, r3, #20
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2107      	movs	r1, #7
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	0d1b      	lsrs	r3, r3, #20
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	431a      	orrs	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f003 0318 	and.w	r3, r3, #24
 8006276:	4908      	ldr	r1, [pc, #32]	; (8006298 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006278:	40d9      	lsrs	r1, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	400b      	ands	r3, r1
 800627e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006282:	431a      	orrs	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	0007ffff 	.word	0x0007ffff

0800629c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 031f 	and.w	r3, r3, #31
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80062c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6093      	str	r3, [r2, #8]
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f0:	d101      	bne.n	80062f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006340:	d101      	bne.n	8006346 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006368:	f043 0201 	orr.w	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <LL_ADC_IsEnabled+0x18>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <LL_ADC_IsEnabled+0x1a>
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063b6:	f043 0204 	orr.w	r2, r3, #4
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d101      	bne.n	80063e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b08      	cmp	r3, #8
 8006402:	d101      	bne.n	8006408 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b089      	sub	sp, #36	; 0x24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e19b      	b.n	800676a <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d109      	bne.n	8006454 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fa0f 	bl	8005864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff ff3f 	bl	80062dc <LL_ADC_IsDeepPowerDownEnabled>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff ff25 	bl	80062b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff ff5a 	bl	800632c <LL_ADC_IsInternalRegulatorEnabled>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d115      	bne.n	80064aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff ff3e 	bl	8006304 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006488:	4b97      	ldr	r3, [pc, #604]	; (80066e8 <HAL_ADC_Init+0x2d0>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	099b      	lsrs	r3, r3, #6
 800648e:	4a97      	ldr	r2, [pc, #604]	; (80066ec <HAL_ADC_Init+0x2d4>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	099b      	lsrs	r3, r3, #6
 8006496:	3301      	adds	r3, #1
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800649c:	e002      	b.n	80064a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f9      	bne.n	800649e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff ff3c 	bl	800632c <LL_ADC_IsInternalRegulatorEnabled>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	f043 0210 	orr.w	r2, r3, #16
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ca:	f043 0201 	orr.w	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff ff75 	bl	80063ca <LL_ADC_REG_IsConversionOngoing>
 80064e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 8134 	bne.w	8006758 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 8130 	bne.w	8006758 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006500:	f043 0202 	orr.w	r2, r3, #2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff35 	bl	800637c <LL_ADC_IsEnabled>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d137      	bne.n	8006588 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006520:	d004      	beq.n	800652c <HAL_ADC_Init+0x114>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a72      	ldr	r2, [pc, #456]	; (80066f0 <HAL_ADC_Init+0x2d8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d10f      	bne.n	800654c <HAL_ADC_Init+0x134>
 800652c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006530:	f7ff ff24 	bl	800637c <LL_ADC_IsEnabled>
 8006534:	4604      	mov	r4, r0
 8006536:	486e      	ldr	r0, [pc, #440]	; (80066f0 <HAL_ADC_Init+0x2d8>)
 8006538:	f7ff ff20 	bl	800637c <LL_ADC_IsEnabled>
 800653c:	4603      	mov	r3, r0
 800653e:	4323      	orrs	r3, r4
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e008      	b.n	800655e <HAL_ADC_Init+0x146>
 800654c:	4869      	ldr	r0, [pc, #420]	; (80066f4 <HAL_ADC_Init+0x2dc>)
 800654e:	f7ff ff15 	bl	800637c <LL_ADC_IsEnabled>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf0c      	ite	eq
 8006558:	2301      	moveq	r3, #1
 800655a:	2300      	movne	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d012      	beq.n	8006588 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800656a:	d004      	beq.n	8006576 <HAL_ADC_Init+0x15e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a5f      	ldr	r2, [pc, #380]	; (80066f0 <HAL_ADC_Init+0x2d8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d101      	bne.n	800657a <HAL_ADC_Init+0x162>
 8006576:	4a60      	ldr	r2, [pc, #384]	; (80066f8 <HAL_ADC_Init+0x2e0>)
 8006578:	e000      	b.n	800657c <HAL_ADC_Init+0x164>
 800657a:	4a60      	ldr	r2, [pc, #384]	; (80066fc <HAL_ADC_Init+0x2e4>)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7ff fd2a 	bl	8005fdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7f5b      	ldrb	r3, [r3, #29]
 800658c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006592:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006598:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800659e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d106      	bne.n	80065c4 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	3b01      	subs	r3, #1
 80065bc:	045b      	lsls	r3, r3, #17
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	4b46      	ldr	r3, [pc, #280]	; (8006700 <HAL_ADC_Init+0x2e8>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	69b9      	ldr	r1, [r7, #24]
 80065f0:	430b      	orrs	r3, r1
 80065f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff feee 	bl	80063f0 <LL_ADC_INJ_IsConversionOngoing>
 8006614:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d17b      	bne.n	8006714 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d178      	bne.n	8006714 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006626:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800662e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800663e:	f023 0302 	bic.w	r3, r3, #2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	69b9      	ldr	r1, [r7, #24]
 8006648:	430b      	orrs	r3, r1
 800664a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006662:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800666c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6911      	ldr	r1, [r2, #16]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	430b      	orrs	r3, r1
 800667e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006682:	e013      	b.n	80066ac <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006692:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80066a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d126      	bne.n	8006704 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066c0:	f023 0304 	bic.w	r3, r3, #4
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066cc:	4311      	orrs	r1, r2
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80066d2:	4311      	orrs	r1, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066d8:	430a      	orrs	r2, r1
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0201 	orr.w	r2, r2, #1
 80066e4:	611a      	str	r2, [r3, #16]
 80066e6:	e015      	b.n	8006714 <HAL_ADC_Init+0x2fc>
 80066e8:	20007868 	.word	0x20007868
 80066ec:	053e2d63 	.word	0x053e2d63
 80066f0:	50000100 	.word	0x50000100
 80066f4:	50000400 	.word	0x50000400
 80066f8:	50000300 	.word	0x50000300
 80066fc:	50000700 	.word	0x50000700
 8006700:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d10c      	bne.n	8006736 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f023 010f 	bic.w	r1, r3, #15
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	1e5a      	subs	r2, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	631a      	str	r2, [r3, #48]	; 0x30
 8006734:	e007      	b.n	8006746 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 020f 	bic.w	r2, r2, #15
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	f043 0201 	orr.w	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	65da      	str	r2, [r3, #92]	; 0x5c
 8006756:	e007      	b.n	8006768 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675c:	f043 0210 	orr.w	r2, r3, #16
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006768:	7ffb      	ldrb	r3, [r7, #31]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3724      	adds	r7, #36	; 0x24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd90      	pop	{r4, r7, pc}
 8006772:	bf00      	nop

08006774 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006788:	d004      	beq.n	8006794 <HAL_ADC_Start_DMA+0x20>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a57      	ldr	r2, [pc, #348]	; (80068ec <HAL_ADC_Start_DMA+0x178>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d101      	bne.n	8006798 <HAL_ADC_Start_DMA+0x24>
 8006794:	4b56      	ldr	r3, [pc, #344]	; (80068f0 <HAL_ADC_Start_DMA+0x17c>)
 8006796:	e000      	b.n	800679a <HAL_ADC_Start_DMA+0x26>
 8006798:	4b56      	ldr	r3, [pc, #344]	; (80068f4 <HAL_ADC_Start_DMA+0x180>)
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fd7e 	bl	800629c <LL_ADC_GetMultimode>
 80067a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fe0f 	bl	80063ca <LL_ADC_REG_IsConversionOngoing>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f040 8094 	bne.w	80068dc <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_ADC_Start_DMA+0x4e>
 80067be:	2302      	movs	r3, #2
 80067c0:	e08f      	b.n	80068e2 <HAL_ADC_Start_DMA+0x16e>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a4a      	ldr	r2, [pc, #296]	; (80068f8 <HAL_ADC_Start_DMA+0x184>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d008      	beq.n	80067e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b05      	cmp	r3, #5
 80067de:	d002      	beq.n	80067e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b09      	cmp	r3, #9
 80067e4:	d173      	bne.n	80068ce <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fcc4 	bl	8007174 <ADC_Enable>
 80067ec:	4603      	mov	r3, r0
 80067ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d166      	bne.n	80068c4 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a37      	ldr	r2, [pc, #220]	; (80068ec <HAL_ADC_Start_DMA+0x178>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d002      	beq.n	800681a <HAL_ADC_Start_DMA+0xa6>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	e001      	b.n	800681e <HAL_ADC_Start_DMA+0xaa>
 800681a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	4293      	cmp	r3, r2
 8006824:	d002      	beq.n	800682c <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006848:	f023 0206 	bic.w	r2, r3, #6
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	661a      	str	r2, [r3, #96]	; 0x60
 8006850:	e002      	b.n	8006858 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	4a27      	ldr	r2, [pc, #156]	; (80068fc <HAL_ADC_Start_DMA+0x188>)
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	4a26      	ldr	r2, [pc, #152]	; (8006900 <HAL_ADC_Start_DMA+0x18c>)
 8006866:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	4a25      	ldr	r2, [pc, #148]	; (8006904 <HAL_ADC_Start_DMA+0x190>)
 800686e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	221c      	movs	r2, #28
 8006876:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0210 	orr.w	r2, r2, #16
 800688e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3340      	adds	r3, #64	; 0x40
 80068aa:	4619      	mov	r1, r3
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f001 fa2a 	bl	8007d08 <HAL_DMA_Start_IT>
 80068b4:	4603      	mov	r3, r0
 80068b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff fd70 	bl	80063a2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80068c2:	e00d      	b.n	80068e0 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80068cc:	e008      	b.n	80068e0 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80068da:	e001      	b.n	80068e0 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80068dc:	2302      	movs	r3, #2
 80068de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	50000100 	.word	0x50000100
 80068f0:	50000300 	.word	0x50000300
 80068f4:	50000700 	.word	0x50000700
 80068f8:	50000400 	.word	0x50000400
 80068fc:	080072a1 	.word	0x080072a1
 8006900:	08007379 	.word	0x08007379
 8006904:	08007395 	.word	0x08007395

08006908 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b0b6      	sub	sp, #216	; 0xd8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006936:	2b01      	cmp	r3, #1
 8006938:	d102      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x24>
 800693a:	2302      	movs	r3, #2
 800693c:	f000 bc04 	b.w	8007148 <HAL_ADC_ConfigChannel+0x82c>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fd3c 	bl	80063ca <LL_ADC_REG_IsConversionOngoing>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 83e8 	bne.w	800712a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	6859      	ldr	r1, [r3, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	f7ff fc1d 	bl	80061a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fd2a 	bl	80063ca <LL_ADC_REG_IsConversionOngoing>
 8006976:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fd36 	bl	80063f0 <LL_ADC_INJ_IsConversionOngoing>
 8006984:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006988:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 81d9 	bne.w	8006d44 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006992:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 81d4 	bne.w	8006d44 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a4:	d10f      	bne.n	80069c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	4619      	mov	r1, r3
 80069b2:	f7ff fc24 	bl	80061fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fbcb 	bl	800615a <LL_ADC_SetSamplingTimeCommonConfig>
 80069c4:	e00e      	b.n	80069e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6819      	ldr	r1, [r3, #0]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f7ff fc13 	bl	80061fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fbbb 	bl	800615a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d022      	beq.n	8006a4c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6919      	ldr	r1, [r3, #16]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a16:	f7ff fb15 	bl	8006044 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6919      	ldr	r1, [r3, #16]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f7ff fb61 	bl	80060ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d102      	bne.n	8006a42 <HAL_ADC_ConfigChannel+0x126>
 8006a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a40:	e000      	b.n	8006a44 <HAL_ADC_ConfigChannel+0x128>
 8006a42:	2300      	movs	r3, #0
 8006a44:	461a      	mov	r2, r3
 8006a46:	f7ff fb6d 	bl	8006124 <LL_ADC_SetOffsetSaturation>
 8006a4a:	e17b      	b.n	8006d44 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fb1a 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <HAL_ADC_ConfigChannel+0x15c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff fb0f 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	0e9b      	lsrs	r3, r3, #26
 8006a72:	f003 021f 	and.w	r2, r3, #31
 8006a76:	e01e      	b.n	8006ab6 <HAL_ADC_ConfigChannel+0x19a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fb04 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a8e:	fa93 f3a3 	rbit	r3, r3
 8006a92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006aa6:	2320      	movs	r3, #32
 8006aa8:	e004      	b.n	8006ab4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006aae:	fab3 f383 	clz	r3, r3
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <HAL_ADC_ConfigChannel+0x1b2>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	0e9b      	lsrs	r3, r3, #26
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	e018      	b.n	8006b00 <HAL_ADC_ConfigChannel+0x1e4>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ada:	fa93 f3a3 	rbit	r3, r3
 8006ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006af2:	2320      	movs	r3, #32
 8006af4:	e004      	b.n	8006b00 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006afa:	fab3 f383 	clz	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d106      	bne.n	8006b12 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fad3 	bl	80060b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2101      	movs	r1, #1
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff fab7 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <HAL_ADC_ConfigChannel+0x222>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff faac 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006b34:	4603      	mov	r3, r0
 8006b36:	0e9b      	lsrs	r3, r3, #26
 8006b38:	f003 021f 	and.w	r2, r3, #31
 8006b3c:	e01e      	b.n	8006b7c <HAL_ADC_ConfigChannel+0x260>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2101      	movs	r1, #1
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff faa1 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b54:	fa93 f3a3 	rbit	r3, r3
 8006b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006b5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006b64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006b6c:	2320      	movs	r3, #32
 8006b6e:	e004      	b.n	8006b7a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b74:	fab3 f383 	clz	r3, r3
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d105      	bne.n	8006b94 <HAL_ADC_ConfigChannel+0x278>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	0e9b      	lsrs	r3, r3, #26
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	e018      	b.n	8006bc6 <HAL_ADC_ConfigChannel+0x2aa>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ba0:	fa93 f3a3 	rbit	r3, r3
 8006ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006bb8:	2320      	movs	r3, #32
 8006bba:	e004      	b.n	8006bc6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bc0:	fab3 f383 	clz	r3, r3
 8006bc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d106      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff fa70 	bl	80060b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2102      	movs	r1, #2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fa54 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <HAL_ADC_ConfigChannel+0x2e8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff fa49 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	0e9b      	lsrs	r3, r3, #26
 8006bfe:	f003 021f 	and.w	r2, r3, #31
 8006c02:	e01e      	b.n	8006c42 <HAL_ADC_ConfigChannel+0x326>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2102      	movs	r1, #2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fa3e 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c1a:	fa93 f3a3 	rbit	r3, r3
 8006c1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006c32:	2320      	movs	r3, #32
 8006c34:	e004      	b.n	8006c40 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c3a:	fab3 f383 	clz	r3, r3
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <HAL_ADC_ConfigChannel+0x33e>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	0e9b      	lsrs	r3, r3, #26
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	e016      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x36c>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c66:	fa93 f3a3 	rbit	r3, r3
 8006c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006c7a:	2320      	movs	r3, #32
 8006c7c:	e004      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c82:	fab3 f383 	clz	r3, r3
 8006c86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d106      	bne.n	8006c9a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	2102      	movs	r1, #2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fa0f 	bl	80060b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2103      	movs	r1, #3
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff f9f3 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <HAL_ADC_ConfigChannel+0x3aa>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2103      	movs	r1, #3
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff f9e8 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	0e9b      	lsrs	r3, r3, #26
 8006cc0:	f003 021f 	and.w	r2, r3, #31
 8006cc4:	e017      	b.n	8006cf6 <HAL_ADC_ConfigChannel+0x3da>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2103      	movs	r1, #3
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff f9dd 	bl	800608c <LL_ADC_GetOffsetChannel>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd8:	fa93 f3a3 	rbit	r3, r3
 8006cdc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006ce8:	2320      	movs	r3, #32
 8006cea:	e003      	b.n	8006cf4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cee:	fab3 f383 	clz	r3, r3
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <HAL_ADC_ConfigChannel+0x3f2>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	0e9b      	lsrs	r3, r3, #26
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	e011      	b.n	8006d32 <HAL_ADC_ConfigChannel+0x416>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d16:	fa93 f3a3 	rbit	r3, r3
 8006d1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006d26:	2320      	movs	r3, #32
 8006d28:	e003      	b.n	8006d32 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2c:	fab3 f383 	clz	r3, r3
 8006d30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d106      	bne.n	8006d44 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2103      	movs	r1, #3
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff f9ba 	bl	80060b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fb17 	bl	800637c <LL_ADC_IsEnabled>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 813d 	bne.w	8006fd0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6819      	ldr	r1, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7ff fa76 	bl	8006254 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	4aa2      	ldr	r2, [pc, #648]	; (8006ff8 <HAL_ADC_ConfigChannel+0x6dc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	f040 812e 	bne.w	8006fd0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <HAL_ADC_ConfigChannel+0x480>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	0e9b      	lsrs	r3, r3, #26
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2b09      	cmp	r3, #9
 8006d92:	bf94      	ite	ls
 8006d94:	2301      	movls	r3, #1
 8006d96:	2300      	movhi	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	e019      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x4b4>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da4:	fa93 f3a3 	rbit	r3, r3
 8006da8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006db4:	2320      	movs	r3, #32
 8006db6:	e003      	b.n	8006dc0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dba:	fab3 f383 	clz	r3, r3
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2b09      	cmp	r3, #9
 8006dc8:	bf94      	ite	ls
 8006dca:	2301      	movls	r3, #1
 8006dcc:	2300      	movhi	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d079      	beq.n	8006ec8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d107      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x4d4>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	0e9b      	lsrs	r3, r3, #26
 8006de6:	3301      	adds	r3, #1
 8006de8:	069b      	lsls	r3, r3, #26
 8006dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006dee:	e015      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x500>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df8:	fa93 f3a3 	rbit	r3, r3
 8006dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e00:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006e08:	2320      	movs	r3, #32
 8006e0a:	e003      	b.n	8006e14 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0e:	fab3 f383 	clz	r3, r3
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	3301      	adds	r3, #1
 8006e16:	069b      	lsls	r3, r3, #26
 8006e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <HAL_ADC_ConfigChannel+0x520>
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	0e9b      	lsrs	r3, r3, #26
 8006e2e:	3301      	adds	r3, #1
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	2101      	movs	r1, #1
 8006e36:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3a:	e017      	b.n	8006e6c <HAL_ADC_ConfigChannel+0x550>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e44:	fa93 f3a3 	rbit	r3, r3
 8006e48:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006e54:	2320      	movs	r3, #32
 8006e56:	e003      	b.n	8006e60 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e5a:	fab3 f383 	clz	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	3301      	adds	r3, #1
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	2101      	movs	r1, #1
 8006e68:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6c:	ea42 0103 	orr.w	r1, r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <HAL_ADC_ConfigChannel+0x576>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	0e9b      	lsrs	r3, r3, #26
 8006e82:	3301      	adds	r3, #1
 8006e84:	f003 021f 	and.w	r2, r3, #31
 8006e88:	4613      	mov	r3, r2
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	4413      	add	r3, r2
 8006e8e:	051b      	lsls	r3, r3, #20
 8006e90:	e018      	b.n	8006ec4 <HAL_ADC_ConfigChannel+0x5a8>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	fa93 f3a3 	rbit	r3, r3
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006eaa:	2320      	movs	r3, #32
 8006eac:	e003      	b.n	8006eb6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb0:	fab3 f383 	clz	r3, r3
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f003 021f 	and.w	r2, r3, #31
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	e07e      	b.n	8006fc6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d107      	bne.n	8006ee4 <HAL_ADC_ConfigChannel+0x5c8>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	0e9b      	lsrs	r3, r3, #26
 8006eda:	3301      	adds	r3, #1
 8006edc:	069b      	lsls	r3, r3, #26
 8006ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ee2:	e015      	b.n	8006f10 <HAL_ADC_ConfigChannel+0x5f4>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	fa93 f3a3 	rbit	r3, r3
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006efc:	2320      	movs	r3, #32
 8006efe:	e003      	b.n	8006f08 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	fab3 f383 	clz	r3, r3
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	3301      	adds	r3, #1
 8006f0a:	069b      	lsls	r3, r3, #26
 8006f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <HAL_ADC_ConfigChannel+0x614>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	0e9b      	lsrs	r3, r3, #26
 8006f22:	3301      	adds	r3, #1
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	2101      	movs	r1, #1
 8006f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2e:	e017      	b.n	8006f60 <HAL_ADC_ConfigChannel+0x644>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	fa93 f3a3 	rbit	r3, r3
 8006f3c:	61fb      	str	r3, [r7, #28]
  return result;
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006f48:	2320      	movs	r3, #32
 8006f4a:	e003      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	fab3 f383 	clz	r3, r3
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	3301      	adds	r3, #1
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f60:	ea42 0103 	orr.w	r1, r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10d      	bne.n	8006f8c <HAL_ADC_ConfigChannel+0x670>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	0e9b      	lsrs	r3, r3, #26
 8006f76:	3301      	adds	r3, #1
 8006f78:	f003 021f 	and.w	r2, r3, #31
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	4413      	add	r3, r2
 8006f82:	3b1e      	subs	r3, #30
 8006f84:	051b      	lsls	r3, r3, #20
 8006f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f8a:	e01b      	b.n	8006fc4 <HAL_ADC_ConfigChannel+0x6a8>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	fa93 f3a3 	rbit	r3, r3
 8006f98:	613b      	str	r3, [r7, #16]
  return result;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	e003      	b.n	8006fb0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	fab3 f383 	clz	r3, r3
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	f003 021f 	and.w	r2, r3, #31
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	3b1e      	subs	r3, #30
 8006fbe:	051b      	lsls	r3, r3, #20
 8006fc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fc4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f7ff f917 	bl	80061fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <HAL_ADC_ConfigChannel+0x6e0>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80af 	beq.w	800713c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fe6:	d004      	beq.n	8006ff2 <HAL_ADC_ConfigChannel+0x6d6>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a04      	ldr	r2, [pc, #16]	; (8007000 <HAL_ADC_ConfigChannel+0x6e4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10a      	bne.n	8007008 <HAL_ADC_ConfigChannel+0x6ec>
 8006ff2:	4b04      	ldr	r3, [pc, #16]	; (8007004 <HAL_ADC_ConfigChannel+0x6e8>)
 8006ff4:	e009      	b.n	800700a <HAL_ADC_ConfigChannel+0x6ee>
 8006ff6:	bf00      	nop
 8006ff8:	407f0000 	.word	0x407f0000
 8006ffc:	80080000 	.word	0x80080000
 8007000:	50000100 	.word	0x50000100
 8007004:	50000300 	.word	0x50000300
 8007008:	4b51      	ldr	r3, [pc, #324]	; (8007150 <HAL_ADC_ConfigChannel+0x834>)
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff f80c 	bl	8006028 <LL_ADC_GetCommonPathInternalCh>
 8007010:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a4e      	ldr	r2, [pc, #312]	; (8007154 <HAL_ADC_ConfigChannel+0x838>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_ADC_ConfigChannel+0x70c>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a4d      	ldr	r2, [pc, #308]	; (8007158 <HAL_ADC_ConfigChannel+0x83c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d134      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800702c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d12e      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800703c:	d17e      	bne.n	800713c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007046:	d004      	beq.n	8007052 <HAL_ADC_ConfigChannel+0x736>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a43      	ldr	r2, [pc, #268]	; (800715c <HAL_ADC_ConfigChannel+0x840>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <HAL_ADC_ConfigChannel+0x73a>
 8007052:	4a43      	ldr	r2, [pc, #268]	; (8007160 <HAL_ADC_ConfigChannel+0x844>)
 8007054:	e000      	b.n	8007058 <HAL_ADC_ConfigChannel+0x73c>
 8007056:	4a3e      	ldr	r2, [pc, #248]	; (8007150 <HAL_ADC_ConfigChannel+0x834>)
 8007058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800705c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7fe ffcd 	bl	8006002 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007068:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <HAL_ADC_ConfigChannel+0x848>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	099b      	lsrs	r3, r3, #6
 800706e:	4a3e      	ldr	r2, [pc, #248]	; (8007168 <HAL_ADC_ConfigChannel+0x84c>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	099b      	lsrs	r3, r3, #6
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	4613      	mov	r3, r2
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007082:	e002      	b.n	800708a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3b01      	subs	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f9      	bne.n	8007084 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007090:	e054      	b.n	800713c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a35      	ldr	r2, [pc, #212]	; (800716c <HAL_ADC_ConfigChannel+0x850>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d120      	bne.n	80070de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800709c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d11a      	bne.n	80070de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b0:	d144      	bne.n	800713c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ba:	d004      	beq.n	80070c6 <HAL_ADC_ConfigChannel+0x7aa>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a26      	ldr	r2, [pc, #152]	; (800715c <HAL_ADC_ConfigChannel+0x840>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <HAL_ADC_ConfigChannel+0x7ae>
 80070c6:	4a26      	ldr	r2, [pc, #152]	; (8007160 <HAL_ADC_ConfigChannel+0x844>)
 80070c8:	e000      	b.n	80070cc <HAL_ADC_ConfigChannel+0x7b0>
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_ADC_ConfigChannel+0x834>)
 80070cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7fe ff93 	bl	8006002 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80070dc:	e02e      	b.n	800713c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a23      	ldr	r2, [pc, #140]	; (8007170 <HAL_ADC_ConfigChannel+0x854>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d129      	bne.n	800713c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80070e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d123      	bne.n	800713c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <HAL_ADC_ConfigChannel+0x840>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01e      	beq.n	800713c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007106:	d004      	beq.n	8007112 <HAL_ADC_ConfigChannel+0x7f6>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a13      	ldr	r2, [pc, #76]	; (800715c <HAL_ADC_ConfigChannel+0x840>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d101      	bne.n	8007116 <HAL_ADC_ConfigChannel+0x7fa>
 8007112:	4a13      	ldr	r2, [pc, #76]	; (8007160 <HAL_ADC_ConfigChannel+0x844>)
 8007114:	e000      	b.n	8007118 <HAL_ADC_ConfigChannel+0x7fc>
 8007116:	4a0e      	ldr	r2, [pc, #56]	; (8007150 <HAL_ADC_ConfigChannel+0x834>)
 8007118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800711c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fe ff6d 	bl	8006002 <LL_ADC_SetCommonPathInternalCh>
 8007128:	e008      	b.n	800713c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712e:	f043 0220 	orr.w	r2, r3, #32
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007144:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007148:	4618      	mov	r0, r3
 800714a:	37d8      	adds	r7, #216	; 0xd8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	50000700 	.word	0x50000700
 8007154:	c3210000 	.word	0xc3210000
 8007158:	90c00010 	.word	0x90c00010
 800715c:	50000100 	.word	0x50000100
 8007160:	50000300 	.word	0x50000300
 8007164:	20007868 	.word	0x20007868
 8007168:	053e2d63 	.word	0x053e2d63
 800716c:	c7520000 	.word	0xc7520000
 8007170:	cb840000 	.word	0xcb840000

08007174 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800717c:	2300      	movs	r3, #0
 800717e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff f8f9 	bl	800637c <LL_ADC_IsEnabled>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d176      	bne.n	800727e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	4b3c      	ldr	r3, [pc, #240]	; (8007288 <ADC_Enable+0x114>)
 8007198:	4013      	ands	r3, r2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	f043 0210 	orr.w	r2, r3, #16
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ae:	f043 0201 	orr.w	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e062      	b.n	8007280 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff f8c8 	bl	8006354 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071cc:	d004      	beq.n	80071d8 <ADC_Enable+0x64>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2e      	ldr	r2, [pc, #184]	; (800728c <ADC_Enable+0x118>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d101      	bne.n	80071dc <ADC_Enable+0x68>
 80071d8:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <ADC_Enable+0x11c>)
 80071da:	e000      	b.n	80071de <ADC_Enable+0x6a>
 80071dc:	4b2d      	ldr	r3, [pc, #180]	; (8007294 <ADC_Enable+0x120>)
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe ff22 	bl	8006028 <LL_ADC_GetCommonPathInternalCh>
 80071e4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80071e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d013      	beq.n	8007216 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071ee:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <ADC_Enable+0x124>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	099b      	lsrs	r3, r3, #6
 80071f4:	4a29      	ldr	r2, [pc, #164]	; (800729c <ADC_Enable+0x128>)
 80071f6:	fba2 2303 	umull	r2, r3, r2, r3
 80071fa:	099b      	lsrs	r3, r3, #6
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	4613      	mov	r3, r2
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007208:	e002      	b.n	8007210 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3b01      	subs	r3, #1
 800720e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f9      	bne.n	800720a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007216:	f7fe feb3 	bl	8005f80 <HAL_GetTick>
 800721a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800721c:	e028      	b.n	8007270 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff f8aa 	bl	800637c <LL_ADC_IsEnabled>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff f88e 	bl	8006354 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007238:	f7fe fea2 	bl	8005f80 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d914      	bls.n	8007270 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	d00d      	beq.n	8007270 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007258:	f043 0210 	orr.w	r2, r3, #16
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e007      	b.n	8007280 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d1cf      	bne.n	800721e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	8000003f 	.word	0x8000003f
 800728c:	50000100 	.word	0x50000100
 8007290:	50000300 	.word	0x50000300
 8007294:	50000700 	.word	0x50000700
 8007298:	20007868 	.word	0x20007868
 800729c:	053e2d63 	.word	0x053e2d63

080072a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d14b      	bne.n	8007352 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d021      	beq.n	8007318 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe ff51 	bl	8006180 <LL_ADC_REG_IsTriggerSourceSWStart>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d032      	beq.n	800734a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12b      	bne.n	800734a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11f      	bne.n	800734a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730e:	f043 0201 	orr.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	65da      	str	r2, [r3, #92]	; 0x5c
 8007316:	e018      	b.n	800734a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d111      	bne.n	800734a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007342:	f043 0201 	orr.w	r2, r3, #1
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7fe f9cc 	bl	80056e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007350:	e00e      	b.n	8007370 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff fad2 	bl	8006908 <HAL_ADC_ErrorCallback>
}
 8007364:	e004      	b.n	8007370 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
}
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7fe f920 	bl	80055cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff faa4 	bl	8006908 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <LL_ADC_IsEnabled>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <LL_ADC_IsEnabled+0x18>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <LL_ADC_IsEnabled+0x1a>
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <LL_ADC_REG_IsConversionOngoing>:
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d101      	bne.n	8007406 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007414:	b590      	push	{r4, r7, lr}
 8007416:	b0a1      	sub	sp, #132	; 0x84
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800742e:	2302      	movs	r3, #2
 8007430:	e0cb      	b.n	80075ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800743a:	2300      	movs	r3, #0
 800743c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800743e:	2300      	movs	r3, #0
 8007440:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800744a:	d102      	bne.n	8007452 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800744c:	4b61      	ldr	r3, [pc, #388]	; (80075d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800744e:	60bb      	str	r3, [r7, #8]
 8007450:	e001      	b.n	8007456 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007452:	2300      	movs	r3, #0
 8007454:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007460:	f043 0220 	orr.w	r2, r3, #32
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0aa      	b.n	80075ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff ffb9 	bl	80073ee <LL_ADC_REG_IsConversionOngoing>
 800747c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff ffb3 	bl	80073ee <LL_ADC_REG_IsConversionOngoing>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	f040 808c 	bne.w	80075a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007492:	2b00      	cmp	r3, #0
 8007494:	f040 8088 	bne.w	80075a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a0:	d004      	beq.n	80074ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4b      	ldr	r2, [pc, #300]	; (80075d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d101      	bne.n	80074b0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80074ac:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80074ae:	e000      	b.n	80074b2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80074b0:	4b4a      	ldr	r3, [pc, #296]	; (80075dc <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80074b2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d041      	beq.n	8007540 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80074bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	6859      	ldr	r1, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074ce:	035b      	lsls	r3, r3, #13
 80074d0:	430b      	orrs	r3, r1
 80074d2:	431a      	orrs	r2, r3
 80074d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074e0:	d004      	beq.n	80074ec <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a3b      	ldr	r2, [pc, #236]	; (80075d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d10f      	bne.n	800750c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80074ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80074f0:	f7ff ff6a 	bl	80073c8 <LL_ADC_IsEnabled>
 80074f4:	4604      	mov	r4, r0
 80074f6:	4837      	ldr	r0, [pc, #220]	; (80075d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80074f8:	f7ff ff66 	bl	80073c8 <LL_ADC_IsEnabled>
 80074fc:	4603      	mov	r3, r0
 80074fe:	4323      	orrs	r3, r4
 8007500:	2b00      	cmp	r3, #0
 8007502:	bf0c      	ite	eq
 8007504:	2301      	moveq	r3, #1
 8007506:	2300      	movne	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	e008      	b.n	800751e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 800750c:	4834      	ldr	r0, [pc, #208]	; (80075e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800750e:	f7ff ff5b 	bl	80073c8 <LL_ADC_IsEnabled>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	bf0c      	ite	eq
 8007518:	2301      	moveq	r3, #1
 800751a:	2300      	movne	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04c      	beq.n	80075bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800752a:	f023 030f 	bic.w	r3, r3, #15
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	6811      	ldr	r1, [r2, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	6892      	ldr	r2, [r2, #8]
 8007536:	430a      	orrs	r2, r1
 8007538:	431a      	orrs	r2, r3
 800753a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800753c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800753e:	e03d      	b.n	80075bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800754a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007554:	d004      	beq.n	8007560 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d10f      	bne.n	8007580 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8007560:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007564:	f7ff ff30 	bl	80073c8 <LL_ADC_IsEnabled>
 8007568:	4604      	mov	r4, r0
 800756a:	481a      	ldr	r0, [pc, #104]	; (80075d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800756c:	f7ff ff2c 	bl	80073c8 <LL_ADC_IsEnabled>
 8007570:	4603      	mov	r3, r0
 8007572:	4323      	orrs	r3, r4
 8007574:	2b00      	cmp	r3, #0
 8007576:	bf0c      	ite	eq
 8007578:	2301      	moveq	r3, #1
 800757a:	2300      	movne	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e008      	b.n	8007592 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8007580:	4817      	ldr	r0, [pc, #92]	; (80075e0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007582:	f7ff ff21 	bl	80073c8 <LL_ADC_IsEnabled>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	bf0c      	ite	eq
 800758c:	2301      	moveq	r3, #1
 800758e:	2300      	movne	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d012      	beq.n	80075bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800759e:	f023 030f 	bic.w	r3, r3, #15
 80075a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80075a6:	e009      	b.n	80075bc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f043 0220 	orr.w	r2, r3, #32
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80075ba:	e000      	b.n	80075be <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80075bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80075c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3784      	adds	r7, #132	; 0x84
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd90      	pop	{r4, r7, pc}
 80075d2:	bf00      	nop
 80075d4:	50000100 	.word	0x50000100
 80075d8:	50000300 	.word	0x50000300
 80075dc:	50000700 	.word	0x50000700
 80075e0:	50000400 	.word	0x50000400

080075e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <__NVIC_SetPriorityGrouping+0x44>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007600:	4013      	ands	r3, r2
 8007602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800760c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007616:	4a04      	ldr	r2, [pc, #16]	; (8007628 <__NVIC_SetPriorityGrouping+0x44>)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	60d3      	str	r3, [r2, #12]
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	e000ed00 	.word	0xe000ed00

0800762c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <__NVIC_GetPriorityGrouping+0x18>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	f003 0307 	and.w	r3, r3, #7
}
 800763a:	4618      	mov	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	e000ed00 	.word	0xe000ed00

08007648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007656:	2b00      	cmp	r3, #0
 8007658:	db0b      	blt.n	8007672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800765a:	79fb      	ldrb	r3, [r7, #7]
 800765c:	f003 021f 	and.w	r2, r3, #31
 8007660:	4907      	ldr	r1, [pc, #28]	; (8007680 <__NVIC_EnableIRQ+0x38>)
 8007662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	2001      	movs	r0, #1
 800766a:	fa00 f202 	lsl.w	r2, r0, r2
 800766e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e000e100 	.word	0xe000e100

08007684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007694:	2b00      	cmp	r3, #0
 8007696:	db0a      	blt.n	80076ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	490c      	ldr	r1, [pc, #48]	; (80076d0 <__NVIC_SetPriority+0x4c>)
 800769e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a2:	0112      	lsls	r2, r2, #4
 80076a4:	b2d2      	uxtb	r2, r2
 80076a6:	440b      	add	r3, r1
 80076a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076ac:	e00a      	b.n	80076c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	4908      	ldr	r1, [pc, #32]	; (80076d4 <__NVIC_SetPriority+0x50>)
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	3b04      	subs	r3, #4
 80076bc:	0112      	lsls	r2, r2, #4
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	440b      	add	r3, r1
 80076c2:	761a      	strb	r2, [r3, #24]
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	e000e100 	.word	0xe000e100
 80076d4:	e000ed00 	.word	0xe000ed00

080076d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076d8:	b480      	push	{r7}
 80076da:	b089      	sub	sp, #36	; 0x24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f1c3 0307 	rsb	r3, r3, #7
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	bf28      	it	cs
 80076f6:	2304      	movcs	r3, #4
 80076f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	3304      	adds	r3, #4
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d902      	bls.n	8007708 <NVIC_EncodePriority+0x30>
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	3b03      	subs	r3, #3
 8007706:	e000      	b.n	800770a <NVIC_EncodePriority+0x32>
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800770c:	f04f 32ff 	mov.w	r2, #4294967295
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43da      	mvns	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	401a      	ands	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007720:	f04f 31ff 	mov.w	r1, #4294967295
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	fa01 f303 	lsl.w	r3, r1, r3
 800772a:	43d9      	mvns	r1, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007730:	4313      	orrs	r3, r2
         );
}
 8007732:	4618      	mov	r0, r3
 8007734:	3724      	adds	r7, #36	; 0x24
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3b01      	subs	r3, #1
 800774c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007750:	d301      	bcc.n	8007756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007752:	2301      	movs	r3, #1
 8007754:	e00f      	b.n	8007776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007756:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <SysTick_Config+0x40>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3b01      	subs	r3, #1
 800775c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800775e:	210f      	movs	r1, #15
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	f7ff ff8e 	bl	8007684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <SysTick_Config+0x40>)
 800776a:	2200      	movs	r2, #0
 800776c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800776e:	4b04      	ldr	r3, [pc, #16]	; (8007780 <SysTick_Config+0x40>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	e000e010 	.word	0xe000e010

08007784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff ff29 	bl	80075e4 <__NVIC_SetPriorityGrouping>
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	4603      	mov	r3, r0
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80077a8:	f7ff ff40 	bl	800762c <__NVIC_GetPriorityGrouping>
 80077ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	6978      	ldr	r0, [r7, #20]
 80077b4:	f7ff ff90 	bl	80076d8 <NVIC_EncodePriority>
 80077b8:	4602      	mov	r2, r0
 80077ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff ff5f 	bl	8007684 <__NVIC_SetPriority>
}
 80077c6:	bf00      	nop
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	4603      	mov	r3, r0
 80077d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff ff33 	bl	8007648 <__NVIC_EnableIRQ>
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ffa4 	bl	8007740 <SysTick_Config>
 80077f8:	4603      	mov	r3, r0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e014      	b.n	800783e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	791b      	ldrb	r3, [r3, #4]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7fe f9ab 	bl	8005b80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_DAC_ConfigChannel+0x1c>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e19e      	b.n	8007ba6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	795b      	ldrb	r3, [r3, #5]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_DAC_ConfigChannel+0x2c>
 8007870:	2302      	movs	r3, #2
 8007872:	e198      	b.n	8007ba6 <HAL_DAC_ConfigChannel+0x35e>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	2b04      	cmp	r3, #4
 8007886:	d17a      	bne.n	800797e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007888:	f7fe fb7a 	bl	8005f80 <HAL_GetTick>
 800788c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d13d      	bne.n	8007910 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007894:	e018      	b.n	80078c8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007896:	f7fe fb73 	bl	8005f80 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d911      	bls.n	80078c8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f043 0208 	orr.w	r2, r3, #8
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2203      	movs	r2, #3
 80078c2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e16e      	b.n	8007ba6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1df      	bne.n	8007896 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078de:	641a      	str	r2, [r3, #64]	; 0x40
 80078e0:	e020      	b.n	8007924 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80078e2:	f7fe fb4d 	bl	8005f80 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d90f      	bls.n	8007910 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	da0a      	bge.n	8007910 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f043 0208 	orr.w	r2, r3, #8
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2203      	movs	r2, #3
 800790a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e14a      	b.n	8007ba6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	2b00      	cmp	r3, #0
 8007918:	dbe3      	blt.n	80078e2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007922:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007934:	fa01 f303 	lsl.w	r3, r1, r3
 8007938:	43db      	mvns	r3, r3
 800793a:	ea02 0103 	and.w	r1, r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	409a      	lsls	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f003 0310 	and.w	r3, r3, #16
 800795e:	21ff      	movs	r1, #255	; 0xff
 8007960:	fa01 f303 	lsl.w	r3, r1, r3
 8007964:	43db      	mvns	r3, r3
 8007966:	ea02 0103 	and.w	r1, r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	409a      	lsls	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d11d      	bne.n	80079c2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	221f      	movs	r2, #31
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	43db      	mvns	r3, r3
 800799c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799e:	4013      	ands	r3, r2
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b6:	4313      	orrs	r3, r2
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2207      	movs	r2, #7
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	43db      	mvns	r3, r3
 80079d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079da:	4013      	ands	r3, r2
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d102      	bne.n	80079ec <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	623b      	str	r3, [r7, #32]
 80079ea:	e00f      	b.n	8007a0c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d102      	bne.n	80079fa <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80079f4:	2301      	movs	r3, #1
 80079f6:	623b      	str	r3, [r7, #32]
 80079f8:	e008      	b.n	8007a0c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d102      	bne.n	8007a08 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007a02:	2301      	movs	r3, #1
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	e001      	b.n	8007a0c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	6a3a      	ldr	r2, [r7, #32]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2e:	4013      	ands	r3, r2
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	791b      	ldrb	r3, [r3, #4]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d102      	bne.n	8007a40 <HAL_DAC_ConfigChannel+0x1f8>
 8007a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a3e:	e000      	b.n	8007a42 <HAL_DAC_ConfigChannel+0x1fa>
 8007a40:	2300      	movs	r3, #0
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43db      	mvns	r3, r3
 8007a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	795b      	ldrb	r3, [r3, #5]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d102      	bne.n	8007a6c <HAL_DAC_ConfigChannel+0x224>
 8007a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a6a:	e000      	b.n	8007a6e <HAL_DAC_ConfigChannel+0x226>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d114      	bne.n	8007aae <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007a84:	f001 faca 	bl	800901c <HAL_RCC_GetHCLKFreq>
 8007a88:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	4a48      	ldr	r2, [pc, #288]	; (8007bb0 <HAL_DAC_ConfigChannel+0x368>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d904      	bls.n	8007a9c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a98:	627b      	str	r3, [r7, #36]	; 0x24
 8007a9a:	e00f      	b.n	8007abc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	4a45      	ldr	r2, [pc, #276]	; (8007bb4 <HAL_DAC_ConfigChannel+0x36c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d90a      	bls.n	8007aba <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8007aac:	e006      	b.n	8007abc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab8:	e000      	b.n	8007abc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007aba:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f003 0310 	and.w	r3, r3, #16
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aca:	4313      	orrs	r3, r2
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6819      	ldr	r1, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	43da      	mvns	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	400a      	ands	r2, r1
 8007af2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	43db      	mvns	r3, r3
 8007b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b0e:	4013      	ands	r3, r2
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b26:	4313      	orrs	r3, r2
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b30:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6819      	ldr	r1, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	22c0      	movs	r2, #192	; 0xc0
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	43da      	mvns	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	400a      	ands	r2, r1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	089b      	lsrs	r3, r3, #2
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	089b      	lsrs	r3, r3, #2
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b80:	43db      	mvns	r3, r3
 8007b82:	ea02 0103 	and.w	r1, r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007ba4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3728      	adds	r7, #40	; 0x28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	09896800 	.word	0x09896800
 8007bb4:	04c4b400 	.word	0x04c4b400

08007bb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e08d      	b.n	8007ce6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <HAL_DMA_Init+0x138>)
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d80f      	bhi.n	8007bf6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4b45      	ldr	r3, [pc, #276]	; (8007cf4 <HAL_DMA_Init+0x13c>)
 8007bde:	4413      	add	r3, r2
 8007be0:	4a45      	ldr	r2, [pc, #276]	; (8007cf8 <HAL_DMA_Init+0x140>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	091b      	lsrs	r3, r3, #4
 8007be8:	009a      	lsls	r2, r3, #2
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a42      	ldr	r2, [pc, #264]	; (8007cfc <HAL_DMA_Init+0x144>)
 8007bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8007bf4:	e00e      	b.n	8007c14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4b40      	ldr	r3, [pc, #256]	; (8007d00 <HAL_DMA_Init+0x148>)
 8007bfe:	4413      	add	r3, r2
 8007c00:	4a3d      	ldr	r2, [pc, #244]	; (8007cf8 <HAL_DMA_Init+0x140>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	091b      	lsrs	r3, r3, #4
 8007c08:	009a      	lsls	r2, r3, #2
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <HAL_DMA_Init+0x14c>)
 8007c12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f9b6 	bl	8007fd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c74:	d102      	bne.n	8007c7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c84:	b2d2      	uxtb	r2, r2
 8007c86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d010      	beq.n	8007cbc <HAL_DMA_Init+0x104>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d80c      	bhi.n	8007cbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9d6 	bl	8008054 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007cb8:	605a      	str	r2, [r3, #4]
 8007cba:	e008      	b.n	8007cce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	40020407 	.word	0x40020407
 8007cf4:	bffdfff8 	.word	0xbffdfff8
 8007cf8:	cccccccd 	.word	0xcccccccd
 8007cfc:	40020000 	.word	0x40020000
 8007d00:	bffdfbf8 	.word	0xbffdfbf8
 8007d04:	40020400 	.word	0x40020400

08007d08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_DMA_Start_IT+0x20>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e066      	b.n	8007df6 <HAL_DMA_Start_IT+0xee>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d155      	bne.n	8007de8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f8fb 	bl	8007f5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 020e 	orr.w	r2, r2, #14
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e00f      	b.n	8007da0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0204 	bic.w	r2, r2, #4
 8007d8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 020a 	orr.w	r2, r2, #10
 8007d9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d007      	beq.n	8007dbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0201 	orr.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e005      	b.n	8007df4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
 8007df2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	f003 031f 	and.w	r3, r3, #31
 8007e1e:	2204      	movs	r2, #4
 8007e20:	409a      	lsls	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4013      	ands	r3, r2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d026      	beq.n	8007e78 <HAL_DMA_IRQHandler+0x7a>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d021      	beq.n	8007e78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d107      	bne.n	8007e52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0204 	bic.w	r2, r2, #4
 8007e50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	f003 021f 	and.w	r2, r3, #31
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	2104      	movs	r1, #4
 8007e60:	fa01 f202 	lsl.w	r2, r1, r2
 8007e64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d071      	beq.n	8007f52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007e76:	e06c      	b.n	8007f52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	2202      	movs	r2, #2
 8007e82:	409a      	lsls	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4013      	ands	r3, r2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d02e      	beq.n	8007eea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d029      	beq.n	8007eea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10b      	bne.n	8007ebc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 020a 	bic.w	r2, r2, #10
 8007eb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec0:	f003 021f 	and.w	r2, r3, #31
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	2102      	movs	r1, #2
 8007eca:	fa01 f202 	lsl.w	r2, r1, r2
 8007ece:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d038      	beq.n	8007f52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007ee8:	e033      	b.n	8007f52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	f003 031f 	and.w	r3, r3, #31
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	409a      	lsls	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d02a      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d025      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 020e 	bic.w	r2, r2, #14
 8007f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1c:	f003 021f 	and.w	r2, r3, #31
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	2101      	movs	r1, #1
 8007f26:	fa01 f202 	lsl.w	r2, r1, r2
 8007f2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
}
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d004      	beq.n	8007f86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007f84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8a:	f003 021f 	and.w	r2, r3, #31
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	2101      	movs	r1, #1
 8007f94:	fa01 f202 	lsl.w	r2, r1, r2
 8007f98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b10      	cmp	r3, #16
 8007fa8:	d108      	bne.n	8007fbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007fba:	e007      	b.n	8007fcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	4b16      	ldr	r3, [pc, #88]	; (8008040 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d802      	bhi.n	8007ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007fec:	4b15      	ldr	r3, [pc, #84]	; (8008044 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e001      	b.n	8007ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007ff4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	3b08      	subs	r3, #8
 8008002:	4a12      	ldr	r2, [pc, #72]	; (800804c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	091b      	lsrs	r3, r3, #4
 800800a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008010:	089b      	lsrs	r3, r3, #2
 8008012:	009a      	lsls	r2, r3, #2
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	4413      	add	r3, r2
 8008018:	461a      	mov	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a0b      	ldr	r2, [pc, #44]	; (8008050 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008022:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2201      	movs	r2, #1
 800802c:	409a      	lsls	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	40020407 	.word	0x40020407
 8008044:	40020800 	.word	0x40020800
 8008048:	40020820 	.word	0x40020820
 800804c:	cccccccd 	.word	0xcccccccd
 8008050:	40020880 	.word	0x40020880

08008054 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	461a      	mov	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a08      	ldr	r2, [pc, #32]	; (8008098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008076:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3b01      	subs	r3, #1
 800807c:	f003 031f 	and.w	r3, r3, #31
 8008080:	2201      	movs	r2, #1
 8008082:	409a      	lsls	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008088:	bf00      	nop
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	1000823f 	.word	0x1000823f
 8008098:	40020940 	.word	0x40020940

0800809c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e033      	b.n	8008116 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fd fdf8 	bl	8005cb8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f854 	bl	800817c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f822 	bl	800811e <FMAC_Reset>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d10c      	bne.n	80080fa <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e4:	f043 0210 	orr.w	r2, r3, #16
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	22a0      	movs	r2, #160	; 0xa0
 80080f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e008      	b.n	800810c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008126:	f7fd ff2b 	bl	8005f80 <HAL_GetTick>
 800812a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691a      	ldr	r2, [r3, #16]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800813a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800813c:	e00f      	b.n	800815e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800813e:	f7fd ff1f 	bl	8005f80 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800814c:	d907      	bls.n	800815e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008152:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e00a      	b.n	8008174 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e8      	bne.n	800813e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f807 	bl	8008198 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f81b 	bl	80081c6 <FMAC_ResetOutputStateAndDataPointers>
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008202:	e15a      	b.n	80084ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	2101      	movs	r1, #1
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	fa01 f303 	lsl.w	r3, r1, r3
 8008210:	4013      	ands	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 814c 	beq.w	80084b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	2b01      	cmp	r3, #1
 8008226:	d005      	beq.n	8008234 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008230:	2b02      	cmp	r3, #2
 8008232:	d130      	bne.n	8008296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	2203      	movs	r2, #3
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	43db      	mvns	r3, r3
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4013      	ands	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800826a:	2201      	movs	r2, #1
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	43db      	mvns	r3, r3
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4013      	ands	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	091b      	lsrs	r3, r3, #4
 8008280:	f003 0201 	and.w	r2, r3, #1
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d017      	beq.n	80082d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	2203      	movs	r2, #3
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	43db      	mvns	r3, r3
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4013      	ands	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d123      	bne.n	8008326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	08da      	lsrs	r2, r3, #3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3208      	adds	r2, #8
 80082e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	220f      	movs	r2, #15
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43db      	mvns	r3, r3
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4013      	ands	r3, r2
 8008300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	08da      	lsrs	r2, r3, #3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3208      	adds	r2, #8
 8008320:	6939      	ldr	r1, [r7, #16]
 8008322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	2203      	movs	r2, #3
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43db      	mvns	r3, r3
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4013      	ands	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f003 0203 	and.w	r2, r3, #3
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	fa02 f303 	lsl.w	r3, r2, r3
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 80a6 	beq.w	80084b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008368:	4b5b      	ldr	r3, [pc, #364]	; (80084d8 <HAL_GPIO_Init+0x2e4>)
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	4a5a      	ldr	r2, [pc, #360]	; (80084d8 <HAL_GPIO_Init+0x2e4>)
 800836e:	f043 0301 	orr.w	r3, r3, #1
 8008372:	6613      	str	r3, [r2, #96]	; 0x60
 8008374:	4b58      	ldr	r3, [pc, #352]	; (80084d8 <HAL_GPIO_Init+0x2e4>)
 8008376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008380:	4a56      	ldr	r2, [pc, #344]	; (80084dc <HAL_GPIO_Init+0x2e8>)
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	089b      	lsrs	r3, r3, #2
 8008386:	3302      	adds	r3, #2
 8008388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800838c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	220f      	movs	r2, #15
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	43db      	mvns	r3, r3
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4013      	ands	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80083aa:	d01f      	beq.n	80083ec <HAL_GPIO_Init+0x1f8>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a4c      	ldr	r2, [pc, #304]	; (80084e0 <HAL_GPIO_Init+0x2ec>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d019      	beq.n	80083e8 <HAL_GPIO_Init+0x1f4>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a4b      	ldr	r2, [pc, #300]	; (80084e4 <HAL_GPIO_Init+0x2f0>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <HAL_GPIO_Init+0x1f0>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a4a      	ldr	r2, [pc, #296]	; (80084e8 <HAL_GPIO_Init+0x2f4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00d      	beq.n	80083e0 <HAL_GPIO_Init+0x1ec>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a49      	ldr	r2, [pc, #292]	; (80084ec <HAL_GPIO_Init+0x2f8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <HAL_GPIO_Init+0x1e8>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a48      	ldr	r2, [pc, #288]	; (80084f0 <HAL_GPIO_Init+0x2fc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d101      	bne.n	80083d8 <HAL_GPIO_Init+0x1e4>
 80083d4:	2305      	movs	r3, #5
 80083d6:	e00a      	b.n	80083ee <HAL_GPIO_Init+0x1fa>
 80083d8:	2306      	movs	r3, #6
 80083da:	e008      	b.n	80083ee <HAL_GPIO_Init+0x1fa>
 80083dc:	2304      	movs	r3, #4
 80083de:	e006      	b.n	80083ee <HAL_GPIO_Init+0x1fa>
 80083e0:	2303      	movs	r3, #3
 80083e2:	e004      	b.n	80083ee <HAL_GPIO_Init+0x1fa>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e002      	b.n	80083ee <HAL_GPIO_Init+0x1fa>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <HAL_GPIO_Init+0x1fa>
 80083ec:	2300      	movs	r3, #0
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	f002 0203 	and.w	r2, r2, #3
 80083f4:	0092      	lsls	r2, r2, #2
 80083f6:	4093      	lsls	r3, r2
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083fe:	4937      	ldr	r1, [pc, #220]	; (80084dc <HAL_GPIO_Init+0x2e8>)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	089b      	lsrs	r3, r3, #2
 8008404:	3302      	adds	r3, #2
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800840c:	4b39      	ldr	r3, [pc, #228]	; (80084f4 <HAL_GPIO_Init+0x300>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	43db      	mvns	r3, r3
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4013      	ands	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008430:	4a30      	ldr	r2, [pc, #192]	; (80084f4 <HAL_GPIO_Init+0x300>)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008436:	4b2f      	ldr	r3, [pc, #188]	; (80084f4 <HAL_GPIO_Init+0x300>)
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	43db      	mvns	r3, r3
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4013      	ands	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800845a:	4a26      	ldr	r2, [pc, #152]	; (80084f4 <HAL_GPIO_Init+0x300>)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008460:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <HAL_GPIO_Init+0x300>)
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	43db      	mvns	r3, r3
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	4013      	ands	r3, r2
 800846e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <HAL_GPIO_Init+0x300>)
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <HAL_GPIO_Init+0x300>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	43db      	mvns	r3, r3
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4013      	ands	r3, r2
 8008498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084ae:	4a11      	ldr	r2, [pc, #68]	; (80084f4 <HAL_GPIO_Init+0x300>)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	3301      	adds	r3, #1
 80084b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f47f ae9d 	bne.w	8008204 <HAL_GPIO_Init+0x10>
  }
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	40021000 	.word	0x40021000
 80084dc:	40010000 	.word	0x40010000
 80084e0:	48000400 	.word	0x48000400
 80084e4:	48000800 	.word	0x48000800
 80084e8:	48000c00 	.word	0x48000c00
 80084ec:	48001000 	.word	0x48001000
 80084f0:	48001400 	.word	0x48001400
 80084f4:	40010400 	.word	0x40010400

080084f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	807b      	strh	r3, [r7, #2]
 8008504:	4613      	mov	r3, r2
 8008506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008508:	787b      	ldrb	r3, [r7, #1]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800850e:	887a      	ldrh	r2, [r7, #2]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008514:	e002      	b.n	800851c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008516:	887a      	ldrh	r2, [r7, #2]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008532:	4b08      	ldr	r3, [pc, #32]	; (8008554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008534:	695a      	ldr	r2, [r3, #20]
 8008536:	88fb      	ldrh	r3, [r7, #6]
 8008538:	4013      	ands	r3, r2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d006      	beq.n	800854c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800853e:	4a05      	ldr	r2, [pc, #20]	; (8008554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008544:	88fb      	ldrh	r3, [r7, #6]
 8008546:	4618      	mov	r0, r3
 8008548:	f7fd f824 	bl	8005594 <HAL_GPIO_EXTI_Callback>
  }
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	40010400 	.word	0x40010400

08008558 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d141      	bne.n	80085ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008566:	4b4b      	ldr	r3, [pc, #300]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800856e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008572:	d131      	bne.n	80085d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008574:	4b47      	ldr	r3, [pc, #284]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800857a:	4a46      	ldr	r2, [pc, #280]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800857c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008580:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008584:	4b43      	ldr	r3, [pc, #268]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800858c:	4a41      	ldr	r2, [pc, #260]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800858e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008592:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008594:	4b40      	ldr	r3, [pc, #256]	; (8008698 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2232      	movs	r2, #50	; 0x32
 800859a:	fb02 f303 	mul.w	r3, r2, r3
 800859e:	4a3f      	ldr	r2, [pc, #252]	; (800869c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80085a0:	fba2 2303 	umull	r2, r3, r2, r3
 80085a4:	0c9b      	lsrs	r3, r3, #18
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085aa:	e002      	b.n	80085b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085b2:	4b38      	ldr	r3, [pc, #224]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085be:	d102      	bne.n	80085c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1f2      	bne.n	80085ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085c6:	4b33      	ldr	r3, [pc, #204]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d2:	d158      	bne.n	8008686 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e057      	b.n	8008688 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80085d8:	4b2e      	ldr	r3, [pc, #184]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085de:	4a2d      	ldr	r2, [pc, #180]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80085e8:	e04d      	b.n	8008686 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f0:	d141      	bne.n	8008676 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80085f2:	4b28      	ldr	r3, [pc, #160]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085fe:	d131      	bne.n	8008664 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008600:	4b24      	ldr	r3, [pc, #144]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008606:	4a23      	ldr	r2, [pc, #140]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800860c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008610:	4b20      	ldr	r3, [pc, #128]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008618:	4a1e      	ldr	r2, [pc, #120]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800861a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800861e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008620:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2232      	movs	r2, #50	; 0x32
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	4a1c      	ldr	r2, [pc, #112]	; (800869c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	0c9b      	lsrs	r3, r3, #18
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008636:	e002      	b.n	800863e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3b01      	subs	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800863e:	4b15      	ldr	r3, [pc, #84]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800864a:	d102      	bne.n	8008652 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f2      	bne.n	8008638 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800865a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865e:	d112      	bne.n	8008686 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e011      	b.n	8008688 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008664:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800866a:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800866c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008674:	e007      	b.n	8008686 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800867e:	4a05      	ldr	r2, [pc, #20]	; (8008694 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008684:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	40007000 	.word	0x40007000
 8008698:	20007868 	.word	0x20007868
 800869c:	431bde83 	.word	0x431bde83

080086a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80086a0:	b480      	push	{r7}
 80086a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	4a04      	ldr	r2, [pc, #16]	; (80086bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80086aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086ae:	6093      	str	r3, [r2, #8]
}
 80086b0:	bf00      	nop
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40007000 	.word	0x40007000

080086c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e2fe      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d075      	beq.n	80087ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086de:	4b97      	ldr	r3, [pc, #604]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f003 030c 	and.w	r3, r3, #12
 80086e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086e8:	4b94      	ldr	r3, [pc, #592]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	d102      	bne.n	80086fe <HAL_RCC_OscConfig+0x3e>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d002      	beq.n	8008704 <HAL_RCC_OscConfig+0x44>
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b08      	cmp	r3, #8
 8008702:	d10b      	bne.n	800871c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008704:	4b8d      	ldr	r3, [pc, #564]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d05b      	beq.n	80087c8 <HAL_RCC_OscConfig+0x108>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d157      	bne.n	80087c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e2d9      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008724:	d106      	bne.n	8008734 <HAL_RCC_OscConfig+0x74>
 8008726:	4b85      	ldr	r3, [pc, #532]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a84      	ldr	r2, [pc, #528]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800872c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	e01d      	b.n	8008770 <HAL_RCC_OscConfig+0xb0>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800873c:	d10c      	bne.n	8008758 <HAL_RCC_OscConfig+0x98>
 800873e:	4b7f      	ldr	r3, [pc, #508]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a7e      	ldr	r2, [pc, #504]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4b7c      	ldr	r3, [pc, #496]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a7b      	ldr	r2, [pc, #492]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e00b      	b.n	8008770 <HAL_RCC_OscConfig+0xb0>
 8008758:	4b78      	ldr	r3, [pc, #480]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a77      	ldr	r2, [pc, #476]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800875e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b75      	ldr	r3, [pc, #468]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a74      	ldr	r2, [pc, #464]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800876a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800876e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d013      	beq.n	80087a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008778:	f7fd fc02 	bl	8005f80 <HAL_GetTick>
 800877c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008780:	f7fd fbfe 	bl	8005f80 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b64      	cmp	r3, #100	; 0x64
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e29e      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008792:	4b6a      	ldr	r3, [pc, #424]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f0      	beq.n	8008780 <HAL_RCC_OscConfig+0xc0>
 800879e:	e014      	b.n	80087ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a0:	f7fd fbee 	bl	8005f80 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a8:	f7fd fbea 	bl	8005f80 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b64      	cmp	r3, #100	; 0x64
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e28a      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087ba:	4b60      	ldr	r3, [pc, #384]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f0      	bne.n	80087a8 <HAL_RCC_OscConfig+0xe8>
 80087c6:	e000      	b.n	80087ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d075      	beq.n	80088c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087d6:	4b59      	ldr	r3, [pc, #356]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 030c 	and.w	r3, r3, #12
 80087de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087e0:	4b56      	ldr	r3, [pc, #344]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b0c      	cmp	r3, #12
 80087ee:	d102      	bne.n	80087f6 <HAL_RCC_OscConfig+0x136>
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d002      	beq.n	80087fc <HAL_RCC_OscConfig+0x13c>
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d11f      	bne.n	800883c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087fc:	4b4f      	ldr	r3, [pc, #316]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <HAL_RCC_OscConfig+0x154>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e25d      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008814:	4b49      	ldr	r3, [pc, #292]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	061b      	lsls	r3, r3, #24
 8008822:	4946      	ldr	r1, [pc, #280]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008824:	4313      	orrs	r3, r2
 8008826:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008828:	4b45      	ldr	r3, [pc, #276]	; (8008940 <HAL_RCC_OscConfig+0x280>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f7fd fb5b 	bl	8005ee8 <HAL_InitTick>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d043      	beq.n	80088c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e249      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d023      	beq.n	800888c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008844:	4b3d      	ldr	r3, [pc, #244]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a3c      	ldr	r2, [pc, #240]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800884a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800884e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fd fb96 	bl	8005f80 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008858:	f7fd fb92 	bl	8005f80 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e232      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800886a:	4b34      	ldr	r3, [pc, #208]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0f0      	beq.n	8008858 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008876:	4b31      	ldr	r3, [pc, #196]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	061b      	lsls	r3, r3, #24
 8008884:	492d      	ldr	r1, [pc, #180]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008886:	4313      	orrs	r3, r2
 8008888:	604b      	str	r3, [r1, #4]
 800888a:	e01a      	b.n	80088c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800888c:	4b2b      	ldr	r3, [pc, #172]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a2a      	ldr	r2, [pc, #168]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008898:	f7fd fb72 	bl	8005f80 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088a0:	f7fd fb6e 	bl	8005f80 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e20e      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088b2:	4b22      	ldr	r3, [pc, #136]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0x1e0>
 80088be:	e000      	b.n	80088c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d041      	beq.n	8008952 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01c      	beq.n	8008910 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80088d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088dc:	4a17      	ldr	r2, [pc, #92]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e6:	f7fd fb4b 	bl	8005f80 <HAL_GetTick>
 80088ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088ec:	e008      	b.n	8008900 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088ee:	f7fd fb47 	bl	8005f80 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e1e7      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008900:	4b0e      	ldr	r3, [pc, #56]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ef      	beq.n	80088ee <HAL_RCC_OscConfig+0x22e>
 800890e:	e020      	b.n	8008952 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008916:	4a09      	ldr	r2, [pc, #36]	; (800893c <HAL_RCC_OscConfig+0x27c>)
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008920:	f7fd fb2e 	bl	8005f80 <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008926:	e00d      	b.n	8008944 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008928:	f7fd fb2a 	bl	8005f80 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b02      	cmp	r3, #2
 8008934:	d906      	bls.n	8008944 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e1ca      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
 800893a:	bf00      	nop
 800893c:	40021000 	.word	0x40021000
 8008940:	2000786c 	.word	0x2000786c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008944:	4b8c      	ldr	r3, [pc, #560]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1ea      	bne.n	8008928 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 80a6 	beq.w	8008aac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008960:	2300      	movs	r3, #0
 8008962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008964:	4b84      	ldr	r3, [pc, #528]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_RCC_OscConfig+0x2b4>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <HAL_RCC_OscConfig+0x2b6>
 8008974:	2300      	movs	r3, #0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00d      	beq.n	8008996 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800897a:	4b7f      	ldr	r3, [pc, #508]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897e:	4a7e      	ldr	r2, [pc, #504]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008984:	6593      	str	r3, [r2, #88]	; 0x58
 8008986:	4b7c      	ldr	r3, [pc, #496]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008992:	2301      	movs	r3, #1
 8008994:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008996:	4b79      	ldr	r3, [pc, #484]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d118      	bne.n	80089d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089a2:	4b76      	ldr	r3, [pc, #472]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a75      	ldr	r2, [pc, #468]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 80089a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ae:	f7fd fae7 	bl	8005f80 <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b6:	f7fd fae3 	bl	8005f80 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e183      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c8:	4b6c      	ldr	r3, [pc, #432]	; (8008b7c <HAL_RCC_OscConfig+0x4bc>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d108      	bne.n	80089ee <HAL_RCC_OscConfig+0x32e>
 80089dc:	4b66      	ldr	r3, [pc, #408]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e2:	4a65      	ldr	r2, [pc, #404]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089ec:	e024      	b.n	8008a38 <HAL_RCC_OscConfig+0x378>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	d110      	bne.n	8008a18 <HAL_RCC_OscConfig+0x358>
 80089f6:	4b60      	ldr	r3, [pc, #384]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fc:	4a5e      	ldr	r2, [pc, #376]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 80089fe:	f043 0304 	orr.w	r3, r3, #4
 8008a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a06:	4b5c      	ldr	r3, [pc, #368]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0c:	4a5a      	ldr	r2, [pc, #360]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a0e:	f043 0301 	orr.w	r3, r3, #1
 8008a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a16:	e00f      	b.n	8008a38 <HAL_RCC_OscConfig+0x378>
 8008a18:	4b57      	ldr	r3, [pc, #348]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1e:	4a56      	ldr	r2, [pc, #344]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a28:	4b53      	ldr	r3, [pc, #332]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	4a52      	ldr	r2, [pc, #328]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a30:	f023 0304 	bic.w	r3, r3, #4
 8008a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d016      	beq.n	8008a6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a40:	f7fd fa9e 	bl	8005f80 <HAL_GetTick>
 8008a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a46:	e00a      	b.n	8008a5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a48:	f7fd fa9a 	bl	8005f80 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e138      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a5e:	4b46      	ldr	r3, [pc, #280]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0ed      	beq.n	8008a48 <HAL_RCC_OscConfig+0x388>
 8008a6c:	e015      	b.n	8008a9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6e:	f7fd fa87 	bl	8005f80 <HAL_GetTick>
 8008a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a74:	e00a      	b.n	8008a8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a76:	f7fd fa83 	bl	8005f80 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d901      	bls.n	8008a8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e121      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a8c:	4b3a      	ldr	r3, [pc, #232]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1ed      	bne.n	8008a76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a9a:	7ffb      	ldrb	r3, [r7, #31]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d105      	bne.n	8008aac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa0:	4b35      	ldr	r3, [pc, #212]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa4:	4a34      	ldr	r2, [pc, #208]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d03c      	beq.n	8008b32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01c      	beq.n	8008afa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ac0:	4b2d      	ldr	r3, [pc, #180]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ac6:	4a2c      	ldr	r2, [pc, #176]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad0:	f7fd fa56 	bl	8005f80 <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ad8:	f7fd fa52 	bl	8005f80 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e0f2      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008aea:	4b23      	ldr	r3, [pc, #140]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0ef      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x418>
 8008af8:	e01b      	b.n	8008b32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008afa:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b00:	4a1d      	ldr	r2, [pc, #116]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b02:	f023 0301 	bic.w	r3, r3, #1
 8008b06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0a:	f7fd fa39 	bl	8005f80 <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b12:	f7fd fa35 	bl	8005f80 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e0d5      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b24:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1ef      	bne.n	8008b12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 80c9 	beq.w	8008cce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 030c 	and.w	r3, r3, #12
 8008b44:	2b0c      	cmp	r3, #12
 8008b46:	f000 8083 	beq.w	8008c50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d15e      	bne.n	8008c10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a08      	ldr	r2, [pc, #32]	; (8008b78 <HAL_RCC_OscConfig+0x4b8>)
 8008b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5e:	f7fd fa0f 	bl	8005f80 <HAL_GetTick>
 8008b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b64:	e00c      	b.n	8008b80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b66:	f7fd fa0b 	bl	8005f80 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d905      	bls.n	8008b80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e0ab      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
 8008b78:	40021000 	.word	0x40021000
 8008b7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b80:	4b55      	ldr	r3, [pc, #340]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1ec      	bne.n	8008b66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b8c:	4b52      	ldr	r3, [pc, #328]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	4b52      	ldr	r3, [pc, #328]	; (8008cdc <HAL_RCC_OscConfig+0x61c>)
 8008b92:	4013      	ands	r3, r2
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6a11      	ldr	r1, [r2, #32]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b9c:	3a01      	subs	r2, #1
 8008b9e:	0112      	lsls	r2, r2, #4
 8008ba0:	4311      	orrs	r1, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008ba6:	0212      	lsls	r2, r2, #8
 8008ba8:	4311      	orrs	r1, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008bae:	0852      	lsrs	r2, r2, #1
 8008bb0:	3a01      	subs	r2, #1
 8008bb2:	0552      	lsls	r2, r2, #21
 8008bb4:	4311      	orrs	r1, r2
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bba:	0852      	lsrs	r2, r2, #1
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	0652      	lsls	r2, r2, #25
 8008bc0:	4311      	orrs	r1, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008bc6:	06d2      	lsls	r2, r2, #27
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	4943      	ldr	r1, [pc, #268]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bd0:	4b41      	ldr	r3, [pc, #260]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a40      	ldr	r2, [pc, #256]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	4a3d      	ldr	r2, [pc, #244]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008be6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be8:	f7fd f9ca 	bl	8005f80 <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf0:	f7fd f9c6 	bl	8005f80 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e066      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c02:	4b35      	ldr	r3, [pc, #212]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0f0      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x530>
 8008c0e:	e05e      	b.n	8008cce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c10:	4b31      	ldr	r3, [pc, #196]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a30      	ldr	r2, [pc, #192]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c1c:	f7fd f9b0 	bl	8005f80 <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c24:	f7fd f9ac 	bl	8005f80 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e04c      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c36:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f0      	bne.n	8008c24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008c42:	4b25      	ldr	r3, [pc, #148]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	4924      	ldr	r1, [pc, #144]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008c48:	4b25      	ldr	r3, [pc, #148]	; (8008ce0 <HAL_RCC_OscConfig+0x620>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	60cb      	str	r3, [r1, #12]
 8008c4e:	e03e      	b.n	8008cce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e039      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008c5c:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <HAL_RCC_OscConfig+0x618>)
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f003 0203 	and.w	r2, r3, #3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a1b      	ldr	r3, [r3, #32]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d12c      	bne.n	8008cca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d123      	bne.n	8008cca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d11b      	bne.n	8008cca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d113      	bne.n	8008cca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	085b      	lsrs	r3, r3, #1
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d109      	bne.n	8008cca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d001      	beq.n	8008cce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3720      	adds	r7, #32
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40021000 	.word	0x40021000
 8008cdc:	019f800c 	.word	0x019f800c
 8008ce0:	feeefffc 	.word	0xfeeefffc

08008ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e11e      	b.n	8008f3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cfc:	4b91      	ldr	r3, [pc, #580]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d910      	bls.n	8008d2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d0a:	4b8e      	ldr	r3, [pc, #568]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f023 020f 	bic.w	r2, r3, #15
 8008d12:	498c      	ldr	r1, [pc, #560]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d1a:	4b8a      	ldr	r3, [pc, #552]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 030f 	and.w	r3, r3, #15
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d001      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e106      	b.n	8008f3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d073      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d129      	bne.n	8008d94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d40:	4b81      	ldr	r3, [pc, #516]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0f4      	b.n	8008f3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008d50:	f000 f970 	bl	8009034 <RCC_GetSysClockFreqFromPLLSource>
 8008d54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	4a7c      	ldr	r2, [pc, #496]	; (8008f4c <HAL_RCC_ClockConfig+0x268>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d93f      	bls.n	8008dde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d5e:	4b7a      	ldr	r3, [pc, #488]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d033      	beq.n	8008dde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d12f      	bne.n	8008dde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d7e:	4b72      	ldr	r3, [pc, #456]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d86:	4a70      	ldr	r2, [pc, #448]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008d8e:	2380      	movs	r3, #128	; 0x80
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	e024      	b.n	8008dde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d107      	bne.n	8008dac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d9c:	4b6a      	ldr	r3, [pc, #424]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0c6      	b.n	8008f3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dac:	4b66      	ldr	r3, [pc, #408]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e0be      	b.n	8008f3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008dbc:	f000 f8ce 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 8008dc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4a61      	ldr	r2, [pc, #388]	; (8008f4c <HAL_RCC_ClockConfig+0x268>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d909      	bls.n	8008dde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008dca:	4b5f      	ldr	r3, [pc, #380]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd2:	4a5d      	ldr	r2, [pc, #372]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008dda:	2380      	movs	r3, #128	; 0x80
 8008ddc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008dde:	4b5a      	ldr	r3, [pc, #360]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f023 0203 	bic.w	r2, r3, #3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	4957      	ldr	r1, [pc, #348]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df0:	f7fd f8c6 	bl	8005f80 <HAL_GetTick>
 8008df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008df6:	e00a      	b.n	8008e0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008df8:	f7fd f8c2 	bl	8005f80 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e095      	b.n	8008f3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e0e:	4b4e      	ldr	r3, [pc, #312]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f003 020c 	and.w	r2, r3, #12
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d1eb      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d023      	beq.n	8008e74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e38:	4b43      	ldr	r3, [pc, #268]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	4a42      	ldr	r2, [pc, #264]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008e50:	4b3d      	ldr	r3, [pc, #244]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e58:	4a3b      	ldr	r2, [pc, #236]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e60:	4b39      	ldr	r3, [pc, #228]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	4936      	ldr	r1, [pc, #216]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	608b      	str	r3, [r1, #8]
 8008e72:	e008      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2b80      	cmp	r3, #128	; 0x80
 8008e78:	d105      	bne.n	8008e86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e7a:	4b33      	ldr	r3, [pc, #204]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	4a32      	ldr	r2, [pc, #200]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e86:	4b2f      	ldr	r3, [pc, #188]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d21d      	bcs.n	8008ed0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e94:	4b2b      	ldr	r3, [pc, #172]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f023 020f 	bic.w	r2, r3, #15
 8008e9c:	4929      	ldr	r1, [pc, #164]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008ea4:	f7fd f86c 	bl	8005f80 <HAL_GetTick>
 8008ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eaa:	e00a      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eac:	f7fd f868 	bl	8005f80 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e03b      	b.n	8008f3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ec2:	4b20      	ldr	r3, [pc, #128]	; (8008f44 <HAL_RCC_ClockConfig+0x260>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 030f 	and.w	r3, r3, #15
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d1ed      	bne.n	8008eac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d008      	beq.n	8008eee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008edc:	4b1a      	ldr	r3, [pc, #104]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	4917      	ldr	r1, [pc, #92]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0308 	and.w	r3, r3, #8
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008efa:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	490f      	ldr	r1, [pc, #60]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f0e:	f000 f825 	bl	8008f5c <HAL_RCC_GetSysClockFreq>
 8008f12:	4602      	mov	r2, r0
 8008f14:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <HAL_RCC_ClockConfig+0x264>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	091b      	lsrs	r3, r3, #4
 8008f1a:	f003 030f 	and.w	r3, r3, #15
 8008f1e:	490c      	ldr	r1, [pc, #48]	; (8008f50 <HAL_RCC_ClockConfig+0x26c>)
 8008f20:	5ccb      	ldrb	r3, [r1, r3]
 8008f22:	f003 031f 	and.w	r3, r3, #31
 8008f26:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2a:	4a0a      	ldr	r2, [pc, #40]	; (8008f54 <HAL_RCC_ClockConfig+0x270>)
 8008f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008f2e:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <HAL_RCC_ClockConfig+0x274>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fc ffd8 	bl	8005ee8 <HAL_InitTick>
 8008f38:	4603      	mov	r3, r0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	40022000 	.word	0x40022000
 8008f48:	40021000 	.word	0x40021000
 8008f4c:	04c4b400 	.word	0x04c4b400
 8008f50:	0800c6c0 	.word	0x0800c6c0
 8008f54:	20007868 	.word	0x20007868
 8008f58:	2000786c 	.word	0x2000786c

08008f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008f62:	4b2c      	ldr	r3, [pc, #176]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 030c 	and.w	r3, r3, #12
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d102      	bne.n	8008f74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f6e:	4b2a      	ldr	r3, [pc, #168]	; (8009018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	e047      	b.n	8009004 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008f74:	4b27      	ldr	r3, [pc, #156]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f003 030c 	and.w	r3, r3, #12
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f80:	4b25      	ldr	r3, [pc, #148]	; (8009018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f82:	613b      	str	r3, [r7, #16]
 8008f84:	e03e      	b.n	8009004 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008f86:	4b23      	ldr	r3, [pc, #140]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 030c 	and.w	r3, r3, #12
 8008f8e:	2b0c      	cmp	r3, #12
 8008f90:	d136      	bne.n	8009000 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f92:	4b20      	ldr	r3, [pc, #128]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	f003 0303 	and.w	r3, r3, #3
 8008f9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	091b      	lsrs	r3, r3, #4
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d10c      	bne.n	8008fca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fb0:	4a19      	ldr	r2, [pc, #100]	; (8009018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb8:	4a16      	ldr	r2, [pc, #88]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fba:	68d2      	ldr	r2, [r2, #12]
 8008fbc:	0a12      	lsrs	r2, r2, #8
 8008fbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
 8008fc6:	617b      	str	r3, [r7, #20]
      break;
 8008fc8:	e00c      	b.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fca:	4a13      	ldr	r2, [pc, #76]	; (8009018 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd2:	4a10      	ldr	r2, [pc, #64]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fd4:	68d2      	ldr	r2, [r2, #12]
 8008fd6:	0a12      	lsrs	r2, r2, #8
 8008fd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008fdc:	fb02 f303 	mul.w	r3, r2, r3
 8008fe0:	617b      	str	r3, [r7, #20]
      break;
 8008fe2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008fe4:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	0e5b      	lsrs	r3, r3, #25
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	3301      	adds	r3, #1
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffc:	613b      	str	r3, [r7, #16]
 8008ffe:	e001      	b.n	8009004 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009004:	693b      	ldr	r3, [r7, #16]
}
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	40021000 	.word	0x40021000
 8009018:	00f42400 	.word	0x00f42400

0800901c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009020:	4b03      	ldr	r3, [pc, #12]	; (8009030 <HAL_RCC_GetHCLKFreq+0x14>)
 8009022:	681b      	ldr	r3, [r3, #0]
}
 8009024:	4618      	mov	r0, r3
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	20007868 	.word	0x20007868

08009034 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800903a:	4b1e      	ldr	r3, [pc, #120]	; (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	091b      	lsrs	r3, r3, #4
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	3301      	adds	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d10c      	bne.n	8009072 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009058:	4a17      	ldr	r2, [pc, #92]	; (80090b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009060:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009062:	68d2      	ldr	r2, [r2, #12]
 8009064:	0a12      	lsrs	r2, r2, #8
 8009066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800906a:	fb02 f303 	mul.w	r3, r2, r3
 800906e:	617b      	str	r3, [r7, #20]
    break;
 8009070:	e00c      	b.n	800908c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009072:	4a11      	ldr	r2, [pc, #68]	; (80090b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	fbb2 f3f3 	udiv	r3, r2, r3
 800907a:	4a0e      	ldr	r2, [pc, #56]	; (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800907c:	68d2      	ldr	r2, [r2, #12]
 800907e:	0a12      	lsrs	r2, r2, #8
 8009080:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009084:	fb02 f303 	mul.w	r3, r2, r3
 8009088:	617b      	str	r3, [r7, #20]
    break;
 800908a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	0e5b      	lsrs	r3, r3, #25
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	3301      	adds	r3, #1
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80090a6:	687b      	ldr	r3, [r7, #4]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	40021000 	.word	0x40021000
 80090b8:	00f42400 	.word	0x00f42400

080090bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090c4:	2300      	movs	r3, #0
 80090c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090c8:	2300      	movs	r3, #0
 80090ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8098 	beq.w	800920a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090da:	2300      	movs	r3, #0
 80090dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090de:	4b43      	ldr	r3, [pc, #268]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ea:	4b40      	ldr	r3, [pc, #256]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ee:	4a3f      	ldr	r2, [pc, #252]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090f4:	6593      	str	r3, [r2, #88]	; 0x58
 80090f6:	4b3d      	ldr	r3, [pc, #244]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090fe:	60bb      	str	r3, [r7, #8]
 8009100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009102:	2301      	movs	r3, #1
 8009104:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009106:	4b3a      	ldr	r3, [pc, #232]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a39      	ldr	r2, [pc, #228]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800910c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009110:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009112:	f7fc ff35 	bl	8005f80 <HAL_GetTick>
 8009116:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009118:	e009      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800911a:	f7fc ff31 	bl	8005f80 <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	2b02      	cmp	r3, #2
 8009126:	d902      	bls.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	74fb      	strb	r3, [r7, #19]
        break;
 800912c:	e005      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800912e:	4b30      	ldr	r3, [pc, #192]	; (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0ef      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800913a:	7cfb      	ldrb	r3, [r7, #19]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d159      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009140:	4b2a      	ldr	r3, [pc, #168]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d01e      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	429a      	cmp	r2, r3
 800915a:	d019      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800915c:	4b23      	ldr	r3, [pc, #140]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800915e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009166:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009168:	4b20      	ldr	r3, [pc, #128]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800916a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800916e:	4a1f      	ldr	r2, [pc, #124]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009178:	4b1c      	ldr	r3, [pc, #112]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800917a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800917e:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009188:	4a18      	ldr	r2, [pc, #96]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d016      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800919a:	f7fc fef1 	bl	8005f80 <HAL_GetTick>
 800919e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091a0:	e00b      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091a2:	f7fc feed 	bl	8005f80 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d902      	bls.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	74fb      	strb	r3, [r7, #19]
            break;
 80091b8:	e006      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ba:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0ec      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80091c8:	7cfb      	ldrb	r3, [r7, #19]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091ce:	4b07      	ldr	r3, [pc, #28]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091dc:	4903      	ldr	r1, [pc, #12]	; (80091ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091de:	4313      	orrs	r3, r2
 80091e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80091e4:	e008      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091e6:	7cfb      	ldrb	r3, [r7, #19]
 80091e8:	74bb      	strb	r3, [r7, #18]
 80091ea:	e005      	b.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80091ec:	40021000 	.word	0x40021000
 80091f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	7cfb      	ldrb	r3, [r7, #19]
 80091f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091f8:	7c7b      	ldrb	r3, [r7, #17]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d105      	bne.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091fe:	4ba7      	ldr	r3, [pc, #668]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009202:	4aa6      	ldr	r2, [pc, #664]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009216:	4ba1      	ldr	r3, [pc, #644]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921c:	f023 0203 	bic.w	r2, r3, #3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	499d      	ldr	r1, [pc, #628]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009226:	4313      	orrs	r3, r2
 8009228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009238:	4b98      	ldr	r3, [pc, #608]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923e:	f023 020c 	bic.w	r2, r3, #12
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	4995      	ldr	r1, [pc, #596]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009248:	4313      	orrs	r3, r2
 800924a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800925a:	4b90      	ldr	r3, [pc, #576]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800925c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	498c      	ldr	r1, [pc, #560]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800927c:	4b87      	ldr	r3, [pc, #540]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800927e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	4984      	ldr	r1, [pc, #528]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800928c:	4313      	orrs	r3, r2
 800928e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0310 	and.w	r3, r3, #16
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800929e:	4b7f      	ldr	r3, [pc, #508]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	497b      	ldr	r1, [pc, #492]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092c0:	4b76      	ldr	r3, [pc, #472]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	4973      	ldr	r1, [pc, #460]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092e2:	4b6e      	ldr	r3, [pc, #440]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	496a      	ldr	r1, [pc, #424]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009304:	4b65      	ldr	r3, [pc, #404]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	4962      	ldr	r1, [pc, #392]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009314:	4313      	orrs	r3, r2
 8009316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009326:	4b5d      	ldr	r3, [pc, #372]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	4959      	ldr	r1, [pc, #356]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009336:	4313      	orrs	r3, r2
 8009338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00a      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009348:	4b54      	ldr	r3, [pc, #336]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009356:	4951      	ldr	r1, [pc, #324]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009358:	4313      	orrs	r3, r2
 800935a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009366:	2b00      	cmp	r3, #0
 8009368:	d015      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800936a:	4b4c      	ldr	r3, [pc, #304]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800936c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	4948      	ldr	r1, [pc, #288]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800937a:	4313      	orrs	r3, r2
 800937c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009388:	d105      	bne.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800938a:	4b44      	ldr	r3, [pc, #272]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	4a43      	ldr	r2, [pc, #268]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009394:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d015      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80093a2:	4b3e      	ldr	r3, [pc, #248]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	493a      	ldr	r1, [pc, #232]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093c0:	d105      	bne.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093c2:	4b36      	ldr	r3, [pc, #216]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	4a35      	ldr	r2, [pc, #212]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093cc:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d015      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093da:	4b30      	ldr	r3, [pc, #192]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e8:	492c      	ldr	r1, [pc, #176]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093f8:	d105      	bne.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093fa:	4b28      	ldr	r3, [pc, #160]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	4a27      	ldr	r2, [pc, #156]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009404:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d015      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009412:	4b22      	ldr	r3, [pc, #136]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	491e      	ldr	r1, [pc, #120]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009422:	4313      	orrs	r3, r2
 8009424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009430:	d105      	bne.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009432:	4b1a      	ldr	r3, [pc, #104]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	4a19      	ldr	r2, [pc, #100]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800943c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d015      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800944a:	4b14      	ldr	r3, [pc, #80]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009450:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009458:	4910      	ldr	r1, [pc, #64]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800945a:	4313      	orrs	r3, r2
 800945c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009468:	d105      	bne.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800946a:	4b0c      	ldr	r3, [pc, #48]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	4a0b      	ldr	r2, [pc, #44]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009474:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d018      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009482:	4b06      	ldr	r3, [pc, #24]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009488:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009490:	4902      	ldr	r1, [pc, #8]	; (800949c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009492:	4313      	orrs	r3, r2
 8009494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	e001      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800949c:	40021000 	.word	0x40021000
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094a6:	d105      	bne.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80094a8:	4b21      	ldr	r3, [pc, #132]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4a20      	ldr	r2, [pc, #128]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80094ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d015      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80094c0:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80094c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ce:	4918      	ldr	r1, [pc, #96]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094de:	d105      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80094e0:	4b13      	ldr	r3, [pc, #76]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4a12      	ldr	r2, [pc, #72]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80094e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d015      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80094f8:	4b0d      	ldr	r3, [pc, #52]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80094fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009506:	490a      	ldr	r1, [pc, #40]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009508:	4313      	orrs	r3, r2
 800950a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009516:	d105      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009518:	4b05      	ldr	r3, [pc, #20]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	4a04      	ldr	r2, [pc, #16]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800951e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009522:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009524:	7cbb      	ldrb	r3, [r7, #18]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	40021000 	.word	0x40021000

08009534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e049      	b.n	80095da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7fc fbcc 	bl	8005cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f000 f878 	bl	8009668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80095f6:	2302      	movs	r3, #2
 80095f8:	e031      	b.n	800965e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2202      	movs	r2, #2
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f8d5 	bl	80097bc <TIM_SlaveTimer_SetConfig>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d009      	beq.n	800962c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e018      	b.n	800965e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800963a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800964a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a48      	ldr	r2, [pc, #288]	; (800979c <TIM_Base_SetConfig+0x134>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d013      	beq.n	80096a8 <TIM_Base_SetConfig+0x40>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009686:	d00f      	beq.n	80096a8 <TIM_Base_SetConfig+0x40>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a45      	ldr	r2, [pc, #276]	; (80097a0 <TIM_Base_SetConfig+0x138>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00b      	beq.n	80096a8 <TIM_Base_SetConfig+0x40>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a44      	ldr	r2, [pc, #272]	; (80097a4 <TIM_Base_SetConfig+0x13c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <TIM_Base_SetConfig+0x40>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a43      	ldr	r2, [pc, #268]	; (80097a8 <TIM_Base_SetConfig+0x140>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_Base_SetConfig+0x40>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a42      	ldr	r2, [pc, #264]	; (80097ac <TIM_Base_SetConfig+0x144>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d108      	bne.n	80096ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a37      	ldr	r2, [pc, #220]	; (800979c <TIM_Base_SetConfig+0x134>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d01f      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c8:	d01b      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a34      	ldr	r2, [pc, #208]	; (80097a0 <TIM_Base_SetConfig+0x138>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d017      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a33      	ldr	r2, [pc, #204]	; (80097a4 <TIM_Base_SetConfig+0x13c>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d013      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a32      	ldr	r2, [pc, #200]	; (80097a8 <TIM_Base_SetConfig+0x140>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d00f      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a32      	ldr	r2, [pc, #200]	; (80097b0 <TIM_Base_SetConfig+0x148>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00b      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a31      	ldr	r2, [pc, #196]	; (80097b4 <TIM_Base_SetConfig+0x14c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d007      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a30      	ldr	r2, [pc, #192]	; (80097b8 <TIM_Base_SetConfig+0x150>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d003      	beq.n	8009702 <TIM_Base_SetConfig+0x9a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a2b      	ldr	r2, [pc, #172]	; (80097ac <TIM_Base_SetConfig+0x144>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d108      	bne.n	8009714 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	4313      	orrs	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a18      	ldr	r2, [pc, #96]	; (800979c <TIM_Base_SetConfig+0x134>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d013      	beq.n	8009768 <TIM_Base_SetConfig+0x100>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a19      	ldr	r2, [pc, #100]	; (80097a8 <TIM_Base_SetConfig+0x140>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00f      	beq.n	8009768 <TIM_Base_SetConfig+0x100>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a19      	ldr	r2, [pc, #100]	; (80097b0 <TIM_Base_SetConfig+0x148>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00b      	beq.n	8009768 <TIM_Base_SetConfig+0x100>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a18      	ldr	r2, [pc, #96]	; (80097b4 <TIM_Base_SetConfig+0x14c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d007      	beq.n	8009768 <TIM_Base_SetConfig+0x100>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a17      	ldr	r2, [pc, #92]	; (80097b8 <TIM_Base_SetConfig+0x150>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d003      	beq.n	8009768 <TIM_Base_SetConfig+0x100>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a12      	ldr	r2, [pc, #72]	; (80097ac <TIM_Base_SetConfig+0x144>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d103      	bne.n	8009770 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	691a      	ldr	r2, [r3, #16]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b01      	cmp	r3, #1
 8009780:	d105      	bne.n	800978e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f023 0201 	bic.w	r2, r3, #1
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	611a      	str	r2, [r3, #16]
  }
}
 800978e:	bf00      	nop
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	40012c00 	.word	0x40012c00
 80097a0:	40000400 	.word	0x40000400
 80097a4:	40000800 	.word	0x40000800
 80097a8:	40013400 	.word	0x40013400
 80097ac:	40015000 	.word	0x40015000
 80097b0:	40014000 	.word	0x40014000
 80097b4:	40014400 	.word	0x40014400
 80097b8:	40014800 	.word	0x40014800

080097bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80097d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ee:	f023 0307 	bic.w	r3, r3, #7
 80097f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	4a4e      	ldr	r2, [pc, #312]	; (8009944 <TIM_SlaveTimer_SetConfig+0x188>)
 800980c:	4293      	cmp	r3, r2
 800980e:	f000 8092 	beq.w	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009812:	4a4c      	ldr	r2, [pc, #304]	; (8009944 <TIM_SlaveTimer_SetConfig+0x188>)
 8009814:	4293      	cmp	r3, r2
 8009816:	f200 808b 	bhi.w	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 800981a:	4a4b      	ldr	r2, [pc, #300]	; (8009948 <TIM_SlaveTimer_SetConfig+0x18c>)
 800981c:	4293      	cmp	r3, r2
 800981e:	f000 808a 	beq.w	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009822:	4a49      	ldr	r2, [pc, #292]	; (8009948 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009824:	4293      	cmp	r3, r2
 8009826:	f200 8083 	bhi.w	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 800982a:	4a48      	ldr	r2, [pc, #288]	; (800994c <TIM_SlaveTimer_SetConfig+0x190>)
 800982c:	4293      	cmp	r3, r2
 800982e:	f000 8082 	beq.w	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009832:	4a46      	ldr	r2, [pc, #280]	; (800994c <TIM_SlaveTimer_SetConfig+0x190>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d87b      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 8009838:	4a45      	ldr	r2, [pc, #276]	; (8009950 <TIM_SlaveTimer_SetConfig+0x194>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d07b      	beq.n	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 800983e:	4a44      	ldr	r2, [pc, #272]	; (8009950 <TIM_SlaveTimer_SetConfig+0x194>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d875      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 8009844:	4a43      	ldr	r2, [pc, #268]	; (8009954 <TIM_SlaveTimer_SetConfig+0x198>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d075      	beq.n	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 800984a:	4a42      	ldr	r2, [pc, #264]	; (8009954 <TIM_SlaveTimer_SetConfig+0x198>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d86f      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 8009850:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009854:	d06f      	beq.n	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009856:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800985a:	d869      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 800985c:	2b70      	cmp	r3, #112	; 0x70
 800985e:	d01a      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0xda>
 8009860:	2b70      	cmp	r3, #112	; 0x70
 8009862:	d865      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 8009864:	2b60      	cmp	r3, #96	; 0x60
 8009866:	d059      	beq.n	800991c <TIM_SlaveTimer_SetConfig+0x160>
 8009868:	2b60      	cmp	r3, #96	; 0x60
 800986a:	d861      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 800986c:	2b50      	cmp	r3, #80	; 0x50
 800986e:	d04b      	beq.n	8009908 <TIM_SlaveTimer_SetConfig+0x14c>
 8009870:	2b50      	cmp	r3, #80	; 0x50
 8009872:	d85d      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 8009874:	2b40      	cmp	r3, #64	; 0x40
 8009876:	d019      	beq.n	80098ac <TIM_SlaveTimer_SetConfig+0xf0>
 8009878:	2b40      	cmp	r3, #64	; 0x40
 800987a:	d859      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 800987c:	2b30      	cmp	r3, #48	; 0x30
 800987e:	d05a      	beq.n	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009880:	2b30      	cmp	r3, #48	; 0x30
 8009882:	d855      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 8009884:	2b20      	cmp	r3, #32
 8009886:	d056      	beq.n	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009888:	2b20      	cmp	r3, #32
 800988a:	d851      	bhi.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d052      	beq.n	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009890:	2b10      	cmp	r3, #16
 8009892:	d050      	beq.n	8009936 <TIM_SlaveTimer_SetConfig+0x17a>
 8009894:	e04c      	b.n	8009930 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80098a6:	f000 f8b6 	bl	8009a16 <TIM_ETR_SetConfig>
      break;
 80098aa:	e045      	b.n	8009938 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b05      	cmp	r3, #5
 80098b2:	d004      	beq.n	80098be <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80098b8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80098bc:	d101      	bne.n	80098c2 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e03b      	b.n	800993a <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6a1a      	ldr	r2, [r3, #32]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0201 	bic.w	r2, r2, #1
 80098d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	011b      	lsls	r3, r3, #4
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	621a      	str	r2, [r3, #32]
      break;
 8009906:	e017      	b.n	8009938 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009914:	461a      	mov	r2, r3
 8009916:	f000 f81f 	bl	8009958 <TIM_TI1_ConfigInputStage>
      break;
 800991a:	e00d      	b.n	8009938 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009928:	461a      	mov	r2, r3
 800992a:	f000 f844 	bl	80099b6 <TIM_TI2_ConfigInputStage>
      break;
 800992e:	e003      	b.n	8009938 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	75fb      	strb	r3, [r7, #23]
      break;
 8009934:	e000      	b.n	8009938 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8009936:	bf00      	nop
  }

  return status;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	00100070 	.word	0x00100070
 8009948:	00100050 	.word	0x00100050
 800994c:	00100040 	.word	0x00100040
 8009950:	00100030 	.word	0x00100030
 8009954:	00100020 	.word	0x00100020

08009958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6a1b      	ldr	r3, [r3, #32]
 8009968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	f023 0201 	bic.w	r2, r3, #1
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	011b      	lsls	r3, r3, #4
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	4313      	orrs	r3, r2
 800998c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f023 030a 	bic.w	r3, r3, #10
 8009994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	621a      	str	r2, [r3, #32]
}
 80099aa:	bf00      	nop
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b087      	sub	sp, #28
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	f023 0210 	bic.w	r2, r3, #16
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	031b      	lsls	r3, r3, #12
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	011b      	lsls	r3, r3, #4
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	621a      	str	r2, [r3, #32]
}
 8009a0a:	bf00      	nop
 8009a0c:	371c      	adds	r7, #28
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b087      	sub	sp, #28
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	021a      	lsls	r2, r3, #8
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	609a      	str	r2, [r3, #8]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
	...

08009a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e06f      	b.n	8009b50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a31      	ldr	r2, [pc, #196]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d009      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a30      	ldr	r2, [pc, #192]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d004      	beq.n	8009aae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a2e      	ldr	r2, [pc, #184]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d108      	bne.n	8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ab4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a1e      	ldr	r2, [pc, #120]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d01d      	beq.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af0:	d018      	beq.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d013      	beq.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a1a      	ldr	r2, [pc, #104]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00e      	beq.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a15      	ldr	r2, [pc, #84]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d009      	beq.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a16      	ldr	r2, [pc, #88]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d004      	beq.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a11      	ldr	r2, [pc, #68]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d10c      	bne.n	8009b3e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	40012c00 	.word	0x40012c00
 8009b60:	40013400 	.word	0x40013400
 8009b64:	40015000 	.word	0x40015000
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40000800 	.word	0x40000800
 8009b70:	40014000 	.word	0x40014000

08009b74 <arm_rfft_32_fast_init_f32>:
 8009b74:	b178      	cbz	r0, 8009b96 <arm_rfft_32_fast_init_f32+0x22>
 8009b76:	b430      	push	{r4, r5}
 8009b78:	4908      	ldr	r1, [pc, #32]	; (8009b9c <arm_rfft_32_fast_init_f32+0x28>)
 8009b7a:	4a09      	ldr	r2, [pc, #36]	; (8009ba0 <arm_rfft_32_fast_init_f32+0x2c>)
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009b82:	8003      	strh	r3, [r0, #0]
 8009b84:	2520      	movs	r5, #32
 8009b86:	2414      	movs	r4, #20
 8009b88:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <arm_rfft_32_fast_init_f32+0x30>)
 8009b8a:	8205      	strh	r5, [r0, #16]
 8009b8c:	8184      	strh	r4, [r0, #12]
 8009b8e:	6143      	str	r3, [r0, #20]
 8009b90:	bc30      	pop	{r4, r5}
 8009b92:	2000      	movs	r0, #0
 8009b94:	4770      	bx	lr
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9a:	4770      	bx	lr
 8009b9c:	0800d680 	.word	0x0800d680
 8009ba0:	08011fb8 	.word	0x08011fb8
 8009ba4:	0801ad38 	.word	0x0801ad38

08009ba8 <arm_rfft_64_fast_init_f32>:
 8009ba8:	b178      	cbz	r0, 8009bca <arm_rfft_64_fast_init_f32+0x22>
 8009baa:	b430      	push	{r4, r5}
 8009bac:	4908      	ldr	r1, [pc, #32]	; (8009bd0 <arm_rfft_64_fast_init_f32+0x28>)
 8009bae:	4a09      	ldr	r2, [pc, #36]	; (8009bd4 <arm_rfft_64_fast_init_f32+0x2c>)
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009bb6:	8003      	strh	r3, [r0, #0]
 8009bb8:	2540      	movs	r5, #64	; 0x40
 8009bba:	2430      	movs	r4, #48	; 0x30
 8009bbc:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <arm_rfft_64_fast_init_f32+0x30>)
 8009bbe:	8205      	strh	r5, [r0, #16]
 8009bc0:	8184      	strh	r4, [r0, #12]
 8009bc2:	6143      	str	r3, [r0, #20]
 8009bc4:	bc30      	pop	{r4, r5}
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	4770      	bx	lr
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295
 8009bce:	4770      	bx	lr
 8009bd0:	0800f7d8 	.word	0x0800f7d8
 8009bd4:	08016838 	.word	0x08016838
 8009bd8:	0801f5b8 	.word	0x0801f5b8

08009bdc <arm_rfft_256_fast_init_f32>:
 8009bdc:	b180      	cbz	r0, 8009c00 <arm_rfft_256_fast_init_f32+0x24>
 8009bde:	b430      	push	{r4, r5}
 8009be0:	4909      	ldr	r1, [pc, #36]	; (8009c08 <arm_rfft_256_fast_init_f32+0x2c>)
 8009be2:	4a0a      	ldr	r2, [pc, #40]	; (8009c0c <arm_rfft_256_fast_init_f32+0x30>)
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009bea:	8003      	strh	r3, [r0, #0]
 8009bec:	f44f 7580 	mov.w	r5, #256	; 0x100
 8009bf0:	24d0      	movs	r4, #208	; 0xd0
 8009bf2:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <arm_rfft_256_fast_init_f32+0x34>)
 8009bf4:	8205      	strh	r5, [r0, #16]
 8009bf6:	8184      	strh	r4, [r0, #12]
 8009bf8:	6143      	str	r3, [r0, #20]
 8009bfa:	bc30      	pop	{r4, r5}
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	4770      	bx	lr
 8009c00:	f04f 30ff 	mov.w	r0, #4294967295
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	0800d4e0 	.word	0x0800d4e0
 8009c0c:	08011bb8 	.word	0x08011bb8
 8009c10:	0801a938 	.word	0x0801a938

08009c14 <arm_rfft_512_fast_init_f32>:
 8009c14:	b190      	cbz	r0, 8009c3c <arm_rfft_512_fast_init_f32+0x28>
 8009c16:	b430      	push	{r4, r5}
 8009c18:	490a      	ldr	r1, [pc, #40]	; (8009c44 <arm_rfft_512_fast_init_f32+0x30>)
 8009c1a:	4a0b      	ldr	r2, [pc, #44]	; (8009c48 <arm_rfft_512_fast_init_f32+0x34>)
 8009c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c20:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009c24:	8003      	strh	r3, [r0, #0]
 8009c26:	f44f 7500 	mov.w	r5, #512	; 0x200
 8009c2a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <arm_rfft_512_fast_init_f32+0x38>)
 8009c30:	8205      	strh	r5, [r0, #16]
 8009c32:	8184      	strh	r4, [r0, #12]
 8009c34:	6143      	str	r3, [r0, #20]
 8009c36:	bc30      	pop	{r4, r5}
 8009c38:	2000      	movs	r0, #0
 8009c3a:	4770      	bx	lr
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	0800f468 	.word	0x0800f468
 8009c48:	08016038 	.word	0x08016038
 8009c4c:	0801edb8 	.word	0x0801edb8

08009c50 <arm_rfft_1024_fast_init_f32>:
 8009c50:	b190      	cbz	r0, 8009c78 <arm_rfft_1024_fast_init_f32+0x28>
 8009c52:	b430      	push	{r4, r5}
 8009c54:	490a      	ldr	r1, [pc, #40]	; (8009c80 <arm_rfft_1024_fast_init_f32+0x30>)
 8009c56:	4a0b      	ldr	r2, [pc, #44]	; (8009c84 <arm_rfft_1024_fast_init_f32+0x34>)
 8009c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c5c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009c60:	8003      	strh	r3, [r0, #0]
 8009c62:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009c66:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <arm_rfft_1024_fast_init_f32+0x38>)
 8009c6c:	8205      	strh	r5, [r0, #16]
 8009c6e:	8184      	strh	r4, [r0, #12]
 8009c70:	6143      	str	r3, [r0, #20]
 8009c72:	bc30      	pop	{r4, r5}
 8009c74:	2000      	movs	r0, #0
 8009c76:	4770      	bx	lr
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	0800f838 	.word	0x0800f838
 8009c84:	08016938 	.word	0x08016938
 8009c88:	08017938 	.word	0x08017938

08009c8c <arm_rfft_2048_fast_init_f32>:
 8009c8c:	b190      	cbz	r0, 8009cb4 <arm_rfft_2048_fast_init_f32+0x28>
 8009c8e:	b430      	push	{r4, r5}
 8009c90:	490a      	ldr	r1, [pc, #40]	; (8009cbc <arm_rfft_2048_fast_init_f32+0x30>)
 8009c92:	4a0b      	ldr	r2, [pc, #44]	; (8009cc0 <arm_rfft_2048_fast_init_f32+0x34>)
 8009c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c98:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009c9c:	8003      	strh	r3, [r0, #0]
 8009c9e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009ca2:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8009ca6:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <arm_rfft_2048_fast_init_f32+0x38>)
 8009ca8:	8205      	strh	r5, [r0, #16]
 8009caa:	8184      	strh	r4, [r0, #12]
 8009cac:	6143      	str	r3, [r0, #20]
 8009cae:	bc30      	pop	{r4, r5}
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	4770      	bx	lr
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	0800c6d0 	.word	0x0800c6d0
 8009cc0:	0800fbb8 	.word	0x0800fbb8
 8009cc4:	08018938 	.word	0x08018938

08009cc8 <arm_rfft_4096_fast_init_f32>:
 8009cc8:	b190      	cbz	r0, 8009cf0 <arm_rfft_4096_fast_init_f32+0x28>
 8009cca:	b430      	push	{r4, r5}
 8009ccc:	490a      	ldr	r1, [pc, #40]	; (8009cf8 <arm_rfft_4096_fast_init_f32+0x30>)
 8009cce:	4a0b      	ldr	r2, [pc, #44]	; (8009cfc <arm_rfft_4096_fast_init_f32+0x34>)
 8009cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cd4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009cd8:	8003      	strh	r3, [r0, #0]
 8009cda:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8009cde:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8009ce2:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <arm_rfft_4096_fast_init_f32+0x38>)
 8009ce4:	8205      	strh	r5, [r0, #16]
 8009ce6:	8184      	strh	r4, [r0, #12]
 8009ce8:	6143      	str	r3, [r0, #20]
 8009cea:	bc30      	pop	{r4, r5}
 8009cec:	2000      	movs	r0, #0
 8009cee:	4770      	bx	lr
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	0800d6a8 	.word	0x0800d6a8
 8009cfc:	08012038 	.word	0x08012038
 8009d00:	0801adb8 	.word	0x0801adb8

08009d04 <arm_rfft_fast_init_f32>:
 8009d04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009d08:	d01f      	beq.n	8009d4a <arm_rfft_fast_init_f32+0x46>
 8009d0a:	d90b      	bls.n	8009d24 <arm_rfft_fast_init_f32+0x20>
 8009d0c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009d10:	d019      	beq.n	8009d46 <arm_rfft_fast_init_f32+0x42>
 8009d12:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009d16:	d012      	beq.n	8009d3e <arm_rfft_fast_init_f32+0x3a>
 8009d18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009d1c:	d00d      	beq.n	8009d3a <arm_rfft_fast_init_f32+0x36>
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d22:	4770      	bx	lr
 8009d24:	2940      	cmp	r1, #64	; 0x40
 8009d26:	d00c      	beq.n	8009d42 <arm_rfft_fast_init_f32+0x3e>
 8009d28:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009d2c:	d003      	beq.n	8009d36 <arm_rfft_fast_init_f32+0x32>
 8009d2e:	2920      	cmp	r1, #32
 8009d30:	d1f5      	bne.n	8009d1e <arm_rfft_fast_init_f32+0x1a>
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <arm_rfft_fast_init_f32+0x4c>)
 8009d34:	4718      	bx	r3
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <arm_rfft_fast_init_f32+0x50>)
 8009d38:	4718      	bx	r3
 8009d3a:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <arm_rfft_fast_init_f32+0x54>)
 8009d3c:	4718      	bx	r3
 8009d3e:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <arm_rfft_fast_init_f32+0x58>)
 8009d40:	4718      	bx	r3
 8009d42:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <arm_rfft_fast_init_f32+0x5c>)
 8009d44:	e7f6      	b.n	8009d34 <arm_rfft_fast_init_f32+0x30>
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <arm_rfft_fast_init_f32+0x60>)
 8009d48:	e7f4      	b.n	8009d34 <arm_rfft_fast_init_f32+0x30>
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <arm_rfft_fast_init_f32+0x64>)
 8009d4c:	e7f2      	b.n	8009d34 <arm_rfft_fast_init_f32+0x30>
 8009d4e:	bf00      	nop
 8009d50:	08009b75 	.word	0x08009b75
 8009d54:	08009bdd 	.word	0x08009bdd
 8009d58:	08009c51 	.word	0x08009c51
 8009d5c:	08009cc9 	.word	0x08009cc9
 8009d60:	08009ba9 	.word	0x08009ba9
 8009d64:	08009c8d 	.word	0x08009c8d
 8009d68:	08009c15 	.word	0x08009c15

08009d6c <stage_rfft_f32>:
 8009d6c:	b410      	push	{r4}
 8009d6e:	edd1 7a00 	vldr	s15, [r1]
 8009d72:	ed91 7a01 	vldr	s14, [r1, #4]
 8009d76:	8804      	ldrh	r4, [r0, #0]
 8009d78:	6940      	ldr	r0, [r0, #20]
 8009d7a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8009d7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d82:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009d86:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d8e:	3c01      	subs	r4, #1
 8009d90:	ee26 7a84 	vmul.f32	s14, s13, s8
 8009d94:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009d98:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8009d9c:	ed82 7a00 	vstr	s14, [r2]
 8009da0:	edc2 7a01 	vstr	s15, [r2, #4]
 8009da4:	3010      	adds	r0, #16
 8009da6:	3210      	adds	r2, #16
 8009da8:	3b08      	subs	r3, #8
 8009daa:	3110      	adds	r1, #16
 8009dac:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009db0:	ed93 7a02 	vldr	s14, [r3, #8]
 8009db4:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009db8:	edd3 4a03 	vldr	s9, [r3, #12]
 8009dbc:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009dc0:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009dc4:	ee77 5a45 	vsub.f32	s11, s14, s10
 8009dc8:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009dcc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009dd0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009dd4:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009dd8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009ddc:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009de0:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009de4:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009de8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009dec:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009df0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009df4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009df8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009dfc:	3c01      	subs	r4, #1
 8009dfe:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009e02:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009e06:	f1a3 0308 	sub.w	r3, r3, #8
 8009e0a:	f101 0108 	add.w	r1, r1, #8
 8009e0e:	f100 0008 	add.w	r0, r0, #8
 8009e12:	f102 0208 	add.w	r2, r2, #8
 8009e16:	d1c9      	bne.n	8009dac <stage_rfft_f32+0x40>
 8009e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop

08009e20 <merge_rfft_f32>:
 8009e20:	b410      	push	{r4}
 8009e22:	edd1 7a00 	vldr	s15, [r1]
 8009e26:	edd1 6a01 	vldr	s13, [r1, #4]
 8009e2a:	8804      	ldrh	r4, [r0, #0]
 8009e2c:	6940      	ldr	r0, [r0, #20]
 8009e2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009e32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e36:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009e3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009e3e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009e42:	3c01      	subs	r4, #1
 8009e44:	ed82 7a00 	vstr	s14, [r2]
 8009e48:	edc2 7a01 	vstr	s15, [r2, #4]
 8009e4c:	b3dc      	cbz	r4, 8009ec6 <merge_rfft_f32+0xa6>
 8009e4e:	00e3      	lsls	r3, r4, #3
 8009e50:	3b08      	subs	r3, #8
 8009e52:	440b      	add	r3, r1
 8009e54:	3010      	adds	r0, #16
 8009e56:	3210      	adds	r2, #16
 8009e58:	3110      	adds	r1, #16
 8009e5a:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009e5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009e62:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009e66:	edd3 4a03 	vldr	s9, [r3, #12]
 8009e6a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009e6e:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009e72:	ee75 5a47 	vsub.f32	s11, s10, s14
 8009e76:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009e7a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009e7e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009e82:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009e86:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009e8a:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009e8e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009e92:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009e96:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009e9a:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009e9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ea2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009ea6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009eaa:	3c01      	subs	r4, #1
 8009eac:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009eb0:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009eb4:	f1a3 0308 	sub.w	r3, r3, #8
 8009eb8:	f101 0108 	add.w	r1, r1, #8
 8009ebc:	f100 0008 	add.w	r0, r0, #8
 8009ec0:	f102 0208 	add.w	r2, r2, #8
 8009ec4:	d1c9      	bne.n	8009e5a <merge_rfft_f32+0x3a>
 8009ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <arm_rfft_fast_f32>:
 8009ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed0:	8a05      	ldrh	r5, [r0, #16]
 8009ed2:	086d      	lsrs	r5, r5, #1
 8009ed4:	8005      	strh	r5, [r0, #0]
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4616      	mov	r6, r2
 8009eda:	461d      	mov	r5, r3
 8009edc:	b14b      	cbz	r3, 8009ef2 <arm_rfft_fast_f32+0x26>
 8009ede:	f7ff ff9f 	bl	8009e20 <merge_rfft_f32>
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	f000 bb33 	b.w	800a558 <arm_cfft_f32>
 8009ef2:	460f      	mov	r7, r1
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f000 fb2e 	bl	800a558 <arm_cfft_f32>
 8009efc:	4632      	mov	r2, r6
 8009efe:	4639      	mov	r1, r7
 8009f00:	4620      	mov	r0, r4
 8009f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f06:	f7ff bf31 	b.w	8009d6c <stage_rfft_f32>
 8009f0a:	bf00      	nop

08009f0c <arm_cfft_radix8by2_f32>:
 8009f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	ed2d 8b08 	vpush	{d8-d11}
 8009f14:	4607      	mov	r7, r0
 8009f16:	4608      	mov	r0, r1
 8009f18:	f8b7 c000 	ldrh.w	ip, [r7]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8009f22:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009f26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009f2a:	f000 80b0 	beq.w	800a08e <arm_cfft_radix8by2_f32+0x182>
 8009f2e:	008c      	lsls	r4, r1, #2
 8009f30:	3410      	adds	r4, #16
 8009f32:	f100 0310 	add.w	r3, r0, #16
 8009f36:	1906      	adds	r6, r0, r4
 8009f38:	3210      	adds	r2, #16
 8009f3a:	4444      	add	r4, r8
 8009f3c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009f40:	f108 0510 	add.w	r5, r8, #16
 8009f44:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009f48:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009f4c:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009f50:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009f54:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009f58:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009f5c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009f60:	ed15 0a02 	vldr	s0, [r5, #-8]
 8009f64:	ed55 0a01 	vldr	s1, [r5, #-4]
 8009f68:	ed56 6a04 	vldr	s13, [r6, #-16]
 8009f6c:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009f70:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009f74:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009f78:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009f7c:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009f80:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009f84:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009f88:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009f8c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009f90:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009f94:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009f98:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009f9c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009fa0:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009fa4:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009fa8:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009fac:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009fb0:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009fb4:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009fb8:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009fbc:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009fc0:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009fc4:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009fc8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009fcc:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009fd0:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009fd4:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009fd8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009fdc:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009fe0:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009fe4:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009fe8:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009fec:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009ff0:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009ff4:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009ff8:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009ffc:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a000:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a004:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a008:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a00c:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a010:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a014:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a018:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a01c:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a020:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a024:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a028:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a02c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a030:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a034:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a038:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a03c:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a040:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a044:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a048:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a04c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a050:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a054:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a058:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a05c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a060:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a064:	3310      	adds	r3, #16
 800a066:	4563      	cmp	r3, ip
 800a068:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a06c:	f106 0610 	add.w	r6, r6, #16
 800a070:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a074:	f102 0210 	add.w	r2, r2, #16
 800a078:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a07c:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a080:	f105 0510 	add.w	r5, r5, #16
 800a084:	f104 0410 	add.w	r4, r4, #16
 800a088:	f47f af5c 	bne.w	8009f44 <arm_cfft_radix8by2_f32+0x38>
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	b28c      	uxth	r4, r1
 800a090:	4621      	mov	r1, r4
 800a092:	2302      	movs	r3, #2
 800a094:	f000 fec2 	bl	800ae1c <arm_radix8_butterfly_f32>
 800a098:	ecbd 8b08 	vpop	{d8-d11}
 800a09c:	4621      	mov	r1, r4
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a8:	f000 beb8 	b.w	800ae1c <arm_radix8_butterfly_f32>

0800a0ac <arm_cfft_radix8by4_f32>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	ed2d 8b0a 	vpush	{d8-d12}
 800a0b4:	b08d      	sub	sp, #52	; 0x34
 800a0b6:	460d      	mov	r5, r1
 800a0b8:	910b      	str	r1, [sp, #44]	; 0x2c
 800a0ba:	8801      	ldrh	r1, [r0, #0]
 800a0bc:	6842      	ldr	r2, [r0, #4]
 800a0be:	900a      	str	r0, [sp, #40]	; 0x28
 800a0c0:	0849      	lsrs	r1, r1, #1
 800a0c2:	008b      	lsls	r3, r1, #2
 800a0c4:	18ee      	adds	r6, r5, r3
 800a0c6:	18f0      	adds	r0, r6, r3
 800a0c8:	edd0 5a00 	vldr	s11, [r0]
 800a0cc:	edd5 7a00 	vldr	s15, [r5]
 800a0d0:	ed96 7a00 	vldr	s14, [r6]
 800a0d4:	edd0 3a01 	vldr	s7, [r0, #4]
 800a0d8:	ed96 4a01 	vldr	s8, [r6, #4]
 800a0dc:	ed95 5a01 	vldr	s10, [r5, #4]
 800a0e0:	9008      	str	r0, [sp, #32]
 800a0e2:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800a0e6:	18c7      	adds	r7, r0, r3
 800a0e8:	edd7 4a00 	vldr	s9, [r7]
 800a0ec:	ed97 3a01 	vldr	s6, [r7, #4]
 800a0f0:	9701      	str	r7, [sp, #4]
 800a0f2:	ee77 6a06 	vadd.f32	s13, s14, s12
 800a0f6:	462c      	mov	r4, r5
 800a0f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a0fc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a100:	ee16 ca90 	vmov	ip, s13
 800a104:	f844 cb08 	str.w	ip, [r4], #8
 800a108:	ee75 6a23 	vadd.f32	s13, s10, s7
 800a10c:	edd6 5a01 	vldr	s11, [r6, #4]
 800a110:	edd7 2a01 	vldr	s5, [r7, #4]
 800a114:	9404      	str	r4, [sp, #16]
 800a116:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a11a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a11e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a122:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a126:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a12a:	0849      	lsrs	r1, r1, #1
 800a12c:	f102 0e08 	add.w	lr, r2, #8
 800a130:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a134:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a138:	9109      	str	r1, [sp, #36]	; 0x24
 800a13a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800a13e:	f1a1 0902 	sub.w	r9, r1, #2
 800a142:	f8cd e00c 	str.w	lr, [sp, #12]
 800a146:	4631      	mov	r1, r6
 800a148:	ee13 ea90 	vmov	lr, s7
 800a14c:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a150:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800a154:	4604      	mov	r4, r0
 800a156:	edc5 5a01 	vstr	s11, [r5, #4]
 800a15a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a15e:	f841 eb08 	str.w	lr, [r1], #8
 800a162:	ee34 5a24 	vadd.f32	s10, s8, s9
 800a166:	ee16 ea10 	vmov	lr, s12
 800a16a:	ed86 5a01 	vstr	s10, [r6, #4]
 800a16e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a172:	f844 eb08 	str.w	lr, [r4], #8
 800a176:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a17a:	edc0 6a01 	vstr	s13, [r0, #4]
 800a17e:	9405      	str	r4, [sp, #20]
 800a180:	4604      	mov	r4, r0
 800a182:	ee17 0a90 	vmov	r0, s15
 800a186:	9106      	str	r1, [sp, #24]
 800a188:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a18c:	f102 0110 	add.w	r1, r2, #16
 800a190:	46bc      	mov	ip, r7
 800a192:	9100      	str	r1, [sp, #0]
 800a194:	f847 0b08 	str.w	r0, [r7], #8
 800a198:	f102 0118 	add.w	r1, r2, #24
 800a19c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800a1a0:	9102      	str	r1, [sp, #8]
 800a1a2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a1a6:	9007      	str	r0, [sp, #28]
 800a1a8:	f000 8134 	beq.w	800a414 <arm_cfft_radix8by4_f32+0x368>
 800a1ac:	f102 0920 	add.w	r9, r2, #32
 800a1b0:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a1b4:	9a01      	ldr	r2, [sp, #4]
 800a1b6:	f8dd a000 	ldr.w	sl, [sp]
 800a1ba:	3b0c      	subs	r3, #12
 800a1bc:	4683      	mov	fp, r0
 800a1be:	4463      	add	r3, ip
 800a1c0:	f105 0e10 	add.w	lr, r5, #16
 800a1c4:	f1a4 010c 	sub.w	r1, r4, #12
 800a1c8:	f104 0510 	add.w	r5, r4, #16
 800a1cc:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a1d0:	f1a2 040c 	sub.w	r4, r2, #12
 800a1d4:	f106 0010 	add.w	r0, r6, #16
 800a1d8:	3210      	adds	r2, #16
 800a1da:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800a1de:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a1e2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a1e6:	ed52 1a02 	vldr	s3, [r2, #-8]
 800a1ea:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a1ee:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800a1f2:	ed12 1a01 	vldr	s2, [r2, #-4]
 800a1f6:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a1fa:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a1fe:	ee30 6a26 	vadd.f32	s12, s0, s13
 800a202:	ee37 7a84 	vadd.f32	s14, s15, s8
 800a206:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a20a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800a20e:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a212:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800a216:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a21a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a21e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a222:	ee78 aa25 	vadd.f32	s21, s16, s11
 800a226:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a22a:	ee70 3a67 	vsub.f32	s7, s0, s15
 800a22e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800a232:	ed94 7a02 	vldr	s14, [r4, #8]
 800a236:	ed9c 2a02 	vldr	s4, [ip, #8]
 800a23a:	ed91 ba02 	vldr	s22, [r1, #8]
 800a23e:	edd3 9a02 	vldr	s19, [r3, #8]
 800a242:	edd4 2a01 	vldr	s5, [r4, #4]
 800a246:	ed9c 9a01 	vldr	s18, [ip, #4]
 800a24a:	ed93 5a01 	vldr	s10, [r3, #4]
 800a24e:	edd1 0a01 	vldr	s1, [r1, #4]
 800a252:	ee72 6a07 	vadd.f32	s13, s4, s14
 800a256:	ee32 2a47 	vsub.f32	s4, s4, s14
 800a25a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800a25e:	ee79 4a22 	vadd.f32	s9, s18, s5
 800a262:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800a266:	ee79 2a62 	vsub.f32	s5, s18, s5
 800a26a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800a26e:	ed91 7a01 	vldr	s14, [r1, #4]
 800a272:	edd3 8a01 	vldr	s17, [r3, #4]
 800a276:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a27a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800a27e:	ee37 7a28 	vadd.f32	s14, s14, s17
 800a282:	ee32 9a60 	vsub.f32	s18, s4, s1
 800a286:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a28a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800a28e:	ed1a aa02 	vldr	s20, [sl, #-8]
 800a292:	ee73 8a22 	vadd.f32	s17, s6, s5
 800a296:	ee39 9a05 	vadd.f32	s18, s18, s10
 800a29a:	ee7a aac1 	vsub.f32	s21, s21, s2
 800a29e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a2a2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800a2a6:	ee69 ba07 	vmul.f32	s23, s18, s14
 800a2aa:	ee6a aa87 	vmul.f32	s21, s21, s14
 800a2ae:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800a2b2:	ee63 ca87 	vmul.f32	s25, s7, s14
 800a2b6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800a2ba:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800a2be:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a2c2:	ee73 3aea 	vsub.f32	s7, s7, s21
 800a2c6:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a2ca:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800a2ce:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a2d2:	ee34 4a67 	vsub.f32	s8, s8, s15
 800a2d6:	ee76 6acb 	vsub.f32	s13, s13, s22
 800a2da:	ee36 6a48 	vsub.f32	s12, s12, s16
 800a2de:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800a2e2:	ed00 7a02 	vstr	s14, [r0, #-8]
 800a2e6:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a2ea:	edc1 8a01 	vstr	s17, [r1, #4]
 800a2ee:	ed81 aa02 	vstr	s20, [r1, #8]
 800a2f2:	ed59 3a04 	vldr	s7, [r9, #-16]
 800a2f6:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800a2fa:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800a2fe:	ed59 6a03 	vldr	s13, [r9, #-12]
 800a302:	ee34 4a61 	vsub.f32	s8, s8, s3
 800a306:	ee36 6a41 	vsub.f32	s12, s12, s2
 800a30a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800a30e:	ee66 9a26 	vmul.f32	s19, s12, s13
 800a312:	ee24 9a23 	vmul.f32	s18, s8, s7
 800a316:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a31a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a31e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a322:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a326:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800a32a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a32e:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a332:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800a336:	ee79 3a29 	vadd.f32	s7, s18, s19
 800a33a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800a33e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800a342:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a346:	ed45 3a02 	vstr	s7, [r5, #-8]
 800a34a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a34e:	ed84 7a01 	vstr	s14, [r4, #4]
 800a352:	ed84 4a02 	vstr	s8, [r4, #8]
 800a356:	ee35 6a81 	vadd.f32	s12, s11, s2
 800a35a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800a35e:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800a362:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800a366:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a36a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800a36e:	ee67 2a26 	vmul.f32	s5, s14, s13
 800a372:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a376:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a37a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a37e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a382:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a386:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a38a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a38e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a392:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a396:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a39a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a39e:	f1bb 0b01 	subs.w	fp, fp, #1
 800a3a2:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a3a6:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a3aa:	f10e 0e08 	add.w	lr, lr, #8
 800a3ae:	ed83 3a02 	vstr	s6, [r3, #8]
 800a3b2:	ed83 7a01 	vstr	s14, [r3, #4]
 800a3b6:	f1ac 0c08 	sub.w	ip, ip, #8
 800a3ba:	f10a 0a08 	add.w	sl, sl, #8
 800a3be:	f100 0008 	add.w	r0, r0, #8
 800a3c2:	f1a1 0108 	sub.w	r1, r1, #8
 800a3c6:	f109 0910 	add.w	r9, r9, #16
 800a3ca:	f105 0508 	add.w	r5, r5, #8
 800a3ce:	f1a4 0408 	sub.w	r4, r4, #8
 800a3d2:	f108 0818 	add.w	r8, r8, #24
 800a3d6:	f102 0208 	add.w	r2, r2, #8
 800a3da:	f1a3 0308 	sub.w	r3, r3, #8
 800a3de:	f47f aefc 	bne.w	800a1da <arm_cfft_radix8by4_f32+0x12e>
 800a3e2:	9907      	ldr	r1, [sp, #28]
 800a3e4:	9800      	ldr	r0, [sp, #0]
 800a3e6:	00cb      	lsls	r3, r1, #3
 800a3e8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a3ec:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a3f0:	9100      	str	r1, [sp, #0]
 800a3f2:	9904      	ldr	r1, [sp, #16]
 800a3f4:	4419      	add	r1, r3
 800a3f6:	9104      	str	r1, [sp, #16]
 800a3f8:	9903      	ldr	r1, [sp, #12]
 800a3fa:	4419      	add	r1, r3
 800a3fc:	9103      	str	r1, [sp, #12]
 800a3fe:	9906      	ldr	r1, [sp, #24]
 800a400:	4419      	add	r1, r3
 800a402:	9106      	str	r1, [sp, #24]
 800a404:	9905      	ldr	r1, [sp, #20]
 800a406:	441f      	add	r7, r3
 800a408:	4419      	add	r1, r3
 800a40a:	9b02      	ldr	r3, [sp, #8]
 800a40c:	9105      	str	r1, [sp, #20]
 800a40e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a412:	9302      	str	r3, [sp, #8]
 800a414:	9904      	ldr	r1, [sp, #16]
 800a416:	9805      	ldr	r0, [sp, #20]
 800a418:	ed91 4a00 	vldr	s8, [r1]
 800a41c:	edd0 6a00 	vldr	s13, [r0]
 800a420:	9b06      	ldr	r3, [sp, #24]
 800a422:	ed97 3a00 	vldr	s6, [r7]
 800a426:	edd3 7a00 	vldr	s15, [r3]
 800a42a:	edd0 4a01 	vldr	s9, [r0, #4]
 800a42e:	edd1 3a01 	vldr	s7, [r1, #4]
 800a432:	ed97 2a01 	vldr	s4, [r7, #4]
 800a436:	ed93 7a01 	vldr	s14, [r3, #4]
 800a43a:	9a03      	ldr	r2, [sp, #12]
 800a43c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a440:	ee34 6a26 	vadd.f32	s12, s8, s13
 800a444:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800a448:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a44c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a450:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a454:	ee74 6a66 	vsub.f32	s13, s8, s13
 800a458:	ed81 5a00 	vstr	s10, [r1]
 800a45c:	ed93 5a01 	vldr	s10, [r3, #4]
 800a460:	edd7 4a01 	vldr	s9, [r7, #4]
 800a464:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a468:	ee37 4a26 	vadd.f32	s8, s14, s13
 800a46c:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a470:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800a474:	ed81 5a01 	vstr	s10, [r1, #4]
 800a478:	edd2 1a00 	vldr	s3, [r2]
 800a47c:	edd2 2a01 	vldr	s5, [r2, #4]
 800a480:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a484:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a488:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a48c:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a490:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a494:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a498:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a49c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a4a0:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a4a4:	edc3 2a00 	vstr	s5, [r3]
 800a4a8:	ed83 5a01 	vstr	s10, [r3, #4]
 800a4ac:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a4b0:	9b00      	ldr	r3, [sp, #0]
 800a4b2:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a4b6:	ed93 4a01 	vldr	s8, [r3, #4]
 800a4ba:	ed93 5a00 	vldr	s10, [r3]
 800a4be:	9b02      	ldr	r3, [sp, #8]
 800a4c0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a4c4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a4c8:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a4cc:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a4d0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a4d4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a4d8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a4dc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a4e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a4e4:	ed80 6a01 	vstr	s12, [r0, #4]
 800a4e8:	edc0 5a00 	vstr	s11, [r0]
 800a4ec:	edd3 5a01 	vldr	s11, [r3, #4]
 800a4f0:	edd3 6a00 	vldr	s13, [r3]
 800a4f4:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a4f8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800a4fc:	ee27 6a26 	vmul.f32	s12, s14, s13
 800a500:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a504:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a508:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a50c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a510:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a514:	ed87 7a01 	vstr	s14, [r7, #4]
 800a518:	edc7 7a00 	vstr	s15, [r7]
 800a51c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800a520:	4621      	mov	r1, r4
 800a522:	686a      	ldr	r2, [r5, #4]
 800a524:	2304      	movs	r3, #4
 800a526:	f000 fc79 	bl	800ae1c <arm_radix8_butterfly_f32>
 800a52a:	4630      	mov	r0, r6
 800a52c:	4621      	mov	r1, r4
 800a52e:	686a      	ldr	r2, [r5, #4]
 800a530:	2304      	movs	r3, #4
 800a532:	f000 fc73 	bl	800ae1c <arm_radix8_butterfly_f32>
 800a536:	9808      	ldr	r0, [sp, #32]
 800a538:	686a      	ldr	r2, [r5, #4]
 800a53a:	4621      	mov	r1, r4
 800a53c:	2304      	movs	r3, #4
 800a53e:	f000 fc6d 	bl	800ae1c <arm_radix8_butterfly_f32>
 800a542:	686a      	ldr	r2, [r5, #4]
 800a544:	9801      	ldr	r0, [sp, #4]
 800a546:	4621      	mov	r1, r4
 800a548:	2304      	movs	r3, #4
 800a54a:	b00d      	add	sp, #52	; 0x34
 800a54c:	ecbd 8b0a 	vpop	{d8-d12}
 800a550:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	f000 bc62 	b.w	800ae1c <arm_radix8_butterfly_f32>

0800a558 <arm_cfft_f32>:
 800a558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55c:	2a01      	cmp	r2, #1
 800a55e:	4606      	mov	r6, r0
 800a560:	4617      	mov	r7, r2
 800a562:	460c      	mov	r4, r1
 800a564:	4698      	mov	r8, r3
 800a566:	8805      	ldrh	r5, [r0, #0]
 800a568:	d056      	beq.n	800a618 <arm_cfft_f32+0xc0>
 800a56a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a56e:	d063      	beq.n	800a638 <arm_cfft_f32+0xe0>
 800a570:	d916      	bls.n	800a5a0 <arm_cfft_f32+0x48>
 800a572:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a576:	d01a      	beq.n	800a5ae <arm_cfft_f32+0x56>
 800a578:	d947      	bls.n	800a60a <arm_cfft_f32+0xb2>
 800a57a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a57e:	d05b      	beq.n	800a638 <arm_cfft_f32+0xe0>
 800a580:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a584:	d105      	bne.n	800a592 <arm_cfft_f32+0x3a>
 800a586:	2301      	movs	r3, #1
 800a588:	6872      	ldr	r2, [r6, #4]
 800a58a:	4629      	mov	r1, r5
 800a58c:	4620      	mov	r0, r4
 800a58e:	f000 fc45 	bl	800ae1c <arm_radix8_butterfly_f32>
 800a592:	f1b8 0f00 	cmp.w	r8, #0
 800a596:	d111      	bne.n	800a5bc <arm_cfft_f32+0x64>
 800a598:	2f01      	cmp	r7, #1
 800a59a:	d016      	beq.n	800a5ca <arm_cfft_f32+0x72>
 800a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a0:	2d20      	cmp	r5, #32
 800a5a2:	d049      	beq.n	800a638 <arm_cfft_f32+0xe0>
 800a5a4:	d935      	bls.n	800a612 <arm_cfft_f32+0xba>
 800a5a6:	2d40      	cmp	r5, #64	; 0x40
 800a5a8:	d0ed      	beq.n	800a586 <arm_cfft_f32+0x2e>
 800a5aa:	2d80      	cmp	r5, #128	; 0x80
 800a5ac:	d1f1      	bne.n	800a592 <arm_cfft_f32+0x3a>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff fcab 	bl	8009f0c <arm_cfft_radix8by2_f32>
 800a5b6:	f1b8 0f00 	cmp.w	r8, #0
 800a5ba:	d0ed      	beq.n	800a598 <arm_cfft_f32+0x40>
 800a5bc:	68b2      	ldr	r2, [r6, #8]
 800a5be:	89b1      	ldrh	r1, [r6, #12]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 f841 	bl	800a648 <arm_bitreversal_32>
 800a5c6:	2f01      	cmp	r7, #1
 800a5c8:	d1e8      	bne.n	800a59c <arm_cfft_f32+0x44>
 800a5ca:	ee07 5a90 	vmov	s15, r5
 800a5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a5da:	2d00      	cmp	r5, #0
 800a5dc:	d0de      	beq.n	800a59c <arm_cfft_f32+0x44>
 800a5de:	f104 0108 	add.w	r1, r4, #8
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	429d      	cmp	r5, r3
 800a5e8:	f101 0108 	add.w	r1, r1, #8
 800a5ec:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a5f0:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a5f4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a5f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a5fc:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a600:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a604:	d1ee      	bne.n	800a5e4 <arm_cfft_f32+0x8c>
 800a606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a60e:	d0ba      	beq.n	800a586 <arm_cfft_f32+0x2e>
 800a610:	e7bf      	b.n	800a592 <arm_cfft_f32+0x3a>
 800a612:	2d10      	cmp	r5, #16
 800a614:	d0cb      	beq.n	800a5ae <arm_cfft_f32+0x56>
 800a616:	e7bc      	b.n	800a592 <arm_cfft_f32+0x3a>
 800a618:	b19d      	cbz	r5, 800a642 <arm_cfft_f32+0xea>
 800a61a:	f101 030c 	add.w	r3, r1, #12
 800a61e:	2200      	movs	r2, #0
 800a620:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a624:	3201      	adds	r2, #1
 800a626:	eef1 7a67 	vneg.f32	s15, s15
 800a62a:	4295      	cmp	r5, r2
 800a62c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a630:	f103 0308 	add.w	r3, r3, #8
 800a634:	d1f4      	bne.n	800a620 <arm_cfft_f32+0xc8>
 800a636:	e798      	b.n	800a56a <arm_cfft_f32+0x12>
 800a638:	4621      	mov	r1, r4
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7ff fd36 	bl	800a0ac <arm_cfft_radix8by4_f32>
 800a640:	e7a7      	b.n	800a592 <arm_cfft_f32+0x3a>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0aa      	beq.n	800a59c <arm_cfft_f32+0x44>
 800a646:	e7b9      	b.n	800a5bc <arm_cfft_f32+0x64>

0800a648 <arm_bitreversal_32>:
 800a648:	b1e9      	cbz	r1, 800a686 <arm_bitreversal_32+0x3e>
 800a64a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a64c:	2500      	movs	r5, #0
 800a64e:	f102 0e02 	add.w	lr, r2, #2
 800a652:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800a656:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800a65a:	08a4      	lsrs	r4, r4, #2
 800a65c:	089b      	lsrs	r3, r3, #2
 800a65e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800a662:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800a666:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a66a:	00a6      	lsls	r6, r4, #2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800a672:	3304      	adds	r3, #4
 800a674:	1d34      	adds	r4, r6, #4
 800a676:	3502      	adds	r5, #2
 800a678:	58c6      	ldr	r6, [r0, r3]
 800a67a:	5907      	ldr	r7, [r0, r4]
 800a67c:	50c7      	str	r7, [r0, r3]
 800a67e:	428d      	cmp	r5, r1
 800a680:	5106      	str	r6, [r0, r4]
 800a682:	d3e6      	bcc.n	800a652 <arm_bitreversal_32+0xa>
 800a684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a686:	4770      	bx	lr

0800a688 <arm_mat_mult_f32>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	8845      	ldrh	r5, [r0, #2]
 800a68e:	880b      	ldrh	r3, [r1, #0]
 800a690:	8806      	ldrh	r6, [r0, #0]
 800a692:	6847      	ldr	r7, [r0, #4]
 800a694:	6854      	ldr	r4, [r2, #4]
 800a696:	6848      	ldr	r0, [r1, #4]
 800a698:	b08b      	sub	sp, #44	; 0x2c
 800a69a:	42ab      	cmp	r3, r5
 800a69c:	9109      	str	r1, [sp, #36]	; 0x24
 800a69e:	9604      	str	r6, [sp, #16]
 800a6a0:	8849      	ldrh	r1, [r1, #2]
 800a6a2:	f040 808a 	bne.w	800a7ba <arm_mat_mult_f32+0x132>
 800a6a6:	8815      	ldrh	r5, [r2, #0]
 800a6a8:	42b5      	cmp	r5, r6
 800a6aa:	f040 8086 	bne.w	800a7ba <arm_mat_mult_f32+0x132>
 800a6ae:	8852      	ldrh	r2, [r2, #2]
 800a6b0:	428a      	cmp	r2, r1
 800a6b2:	f040 8082 	bne.w	800a7ba <arm_mat_mult_f32+0x132>
 800a6b6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a6ba:	1d01      	adds	r1, r0, #4
 800a6bc:	0116      	lsls	r6, r2, #4
 800a6be:	9108      	str	r1, [sp, #32]
 800a6c0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800a6c4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800a6c8:	9101      	str	r1, [sp, #4]
 800a6ca:	fb06 f108 	mul.w	r1, r6, r8
 800a6ce:	0095      	lsls	r5, r2, #2
 800a6d0:	9103      	str	r1, [sp, #12]
 800a6d2:	00d2      	lsls	r2, r2, #3
 800a6d4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800a6d8:	f003 0903 	and.w	r9, r3, #3
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	f107 0b10 	add.w	fp, r7, #16
 800a6e2:	eb04 0a05 	add.w	sl, r4, r5
 800a6e6:	9107      	str	r1, [sp, #28]
 800a6e8:	9202      	str	r2, [sp, #8]
 800a6ea:	9306      	str	r3, [sp, #24]
 800a6ec:	f1ab 0310 	sub.w	r3, fp, #16
 800a6f0:	9305      	str	r3, [sp, #20]
 800a6f2:	9b07      	ldr	r3, [sp, #28]
 800a6f4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800a6f8:	eb03 0c0a 	add.w	ip, r3, sl
 800a6fc:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a7c4 <arm_mat_mult_f32+0x13c>
 800a700:	f1b8 0f00 	cmp.w	r8, #0
 800a704:	d053      	beq.n	800a7ae <arm_mat_mult_f32+0x126>
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	4644      	mov	r4, r8
 800a70a:	18c1      	adds	r1, r0, r3
 800a70c:	4602      	mov	r2, r0
 800a70e:	465b      	mov	r3, fp
 800a710:	ed92 6a00 	vldr	s12, [r2]
 800a714:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a718:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a71c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a720:	ed91 5a00 	vldr	s10, [r1]
 800a724:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a728:	1957      	adds	r7, r2, r5
 800a72a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a72e:	ed97 6a00 	vldr	s12, [r7]
 800a732:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a736:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a73a:	194f      	adds	r7, r1, r5
 800a73c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a740:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a744:	edd7 7a00 	vldr	s15, [r7]
 800a748:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a74c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a750:	3c01      	subs	r4, #1
 800a752:	4432      	add	r2, r6
 800a754:	4431      	add	r1, r6
 800a756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a75a:	f103 0310 	add.w	r3, r3, #16
 800a75e:	d1d7      	bne.n	800a710 <arm_mat_mult_f32+0x88>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	9a01      	ldr	r2, [sp, #4]
 800a764:	4418      	add	r0, r3
 800a766:	f1b9 0f00 	cmp.w	r9, #0
 800a76a:	d00b      	beq.n	800a784 <arm_mat_mult_f32+0xfc>
 800a76c:	464b      	mov	r3, r9
 800a76e:	edd0 6a00 	vldr	s13, [r0]
 800a772:	ecb2 7a01 	vldmia	r2!, {s14}
 800a776:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a77a:	3b01      	subs	r3, #1
 800a77c:	4428      	add	r0, r5
 800a77e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a782:	d1f4      	bne.n	800a76e <arm_mat_mult_f32+0xe6>
 800a784:	ecec 7a01 	vstmia	ip!, {s15}
 800a788:	45d4      	cmp	ip, sl
 800a78a:	4670      	mov	r0, lr
 800a78c:	f10e 0e04 	add.w	lr, lr, #4
 800a790:	d1b4      	bne.n	800a6fc <arm_mat_mult_f32+0x74>
 800a792:	9a01      	ldr	r2, [sp, #4]
 800a794:	9b06      	ldr	r3, [sp, #24]
 800a796:	4611      	mov	r1, r2
 800a798:	4419      	add	r1, r3
 800a79a:	449b      	add	fp, r3
 800a79c:	9b04      	ldr	r3, [sp, #16]
 800a79e:	9101      	str	r1, [sp, #4]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	44aa      	add	sl, r5
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	d004      	beq.n	800a7b2 <arm_mat_mult_f32+0x12a>
 800a7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7aa:	6858      	ldr	r0, [r3, #4]
 800a7ac:	e79e      	b.n	800a6ec <arm_mat_mult_f32+0x64>
 800a7ae:	9a05      	ldr	r2, [sp, #20]
 800a7b0:	e7d9      	b.n	800a766 <arm_mat_mult_f32+0xde>
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	b00b      	add	sp, #44	; 0x2c
 800a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ba:	f06f 0002 	mvn.w	r0, #2
 800a7be:	b00b      	add	sp, #44	; 0x2c
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	00000000 	.word	0x00000000

0800a7c8 <arm_mat_inverse_f32>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	8843      	ldrh	r3, [r0, #2]
 800a7ce:	8804      	ldrh	r4, [r0, #0]
 800a7d0:	684e      	ldr	r6, [r1, #4]
 800a7d2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	429c      	cmp	r4, r3
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	9603      	str	r6, [sp, #12]
 800a7de:	f040 80ea 	bne.w	800a9b6 <arm_mat_inverse_f32+0x1ee>
 800a7e2:	880a      	ldrh	r2, [r1, #0]
 800a7e4:	884b      	ldrh	r3, [r1, #2]
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	f040 80e5 	bne.w	800a9b6 <arm_mat_inverse_f32+0x1ee>
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	f040 80e2 	bne.w	800a9b6 <arm_mat_inverse_f32+0x1ee>
 800a7f2:	9005      	str	r0, [sp, #20]
 800a7f4:	b30c      	cbz	r4, 800a83a <arm_mat_inverse_f32+0x72>
 800a7f6:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a7fa:	1e67      	subs	r7, r4, #1
 800a7fc:	f846 bb04 	str.w	fp, [r6], #4
 800a800:	d01b      	beq.n	800a83a <arm_mat_inverse_f32+0x72>
 800a802:	f04f 0801 	mov.w	r8, #1
 800a806:	00ba      	lsls	r2, r7, #2
 800a808:	eb06 0a02 	add.w	sl, r6, r2
 800a80c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800a810:	4630      	mov	r0, r6
 800a812:	2100      	movs	r1, #0
 800a814:	f000 fdc2 	bl	800b39c <memset>
 800a818:	eb0a 0605 	add.w	r6, sl, r5
 800a81c:	462a      	mov	r2, r5
 800a81e:	2100      	movs	r1, #0
 800a820:	4650      	mov	r0, sl
 800a822:	f1b8 0f00 	cmp.w	r8, #0
 800a826:	f000 80cb 	beq.w	800a9c0 <arm_mat_inverse_f32+0x1f8>
 800a82a:	f000 fdb7 	bl	800b39c <memset>
 800a82e:	3f01      	subs	r7, #1
 800a830:	f108 0801 	add.w	r8, r8, #1
 800a834:	f846 bb04 	str.w	fp, [r6], #4
 800a838:	d1e5      	bne.n	800a806 <arm_mat_inverse_f32+0x3e>
 800a83a:	9b01      	ldr	r3, [sp, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 80b5 	beq.w	800a9ac <arm_mat_inverse_f32+0x1e4>
 800a842:	009d      	lsls	r5, r3, #2
 800a844:	eb09 0205 	add.w	r2, r9, r5
 800a848:	46cc      	mov	ip, r9
 800a84a:	9202      	str	r2, [sp, #8]
 800a84c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a850:	1d2a      	adds	r2, r5, #4
 800a852:	9204      	str	r2, [sp, #16]
 800a854:	462f      	mov	r7, r5
 800a856:	469e      	mov	lr, r3
 800a858:	2600      	movs	r6, #0
 800a85a:	9b02      	ldr	r3, [sp, #8]
 800a85c:	eddc 6a00 	vldr	s13, [ip]
 800a860:	42b4      	cmp	r4, r6
 800a862:	eba3 0b07 	sub.w	fp, r3, r7
 800a866:	f000 80a1 	beq.w	800a9ac <arm_mat_inverse_f32+0x1e4>
 800a86a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a9d0 <arm_mat_inverse_f32+0x208>
 800a86e:	4632      	mov	r2, r6
 800a870:	4663      	mov	r3, ip
 800a872:	e00b      	b.n	800a88c <arm_mat_inverse_f32+0xc4>
 800a874:	eef4 7a47 	vcmp.f32	s15, s14
 800a878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a87c:	f102 0201 	add.w	r2, r2, #1
 800a880:	bfc8      	it	gt
 800a882:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a886:	42a2      	cmp	r2, r4
 800a888:	442b      	add	r3, r5
 800a88a:	d014      	beq.n	800a8b6 <arm_mat_inverse_f32+0xee>
 800a88c:	edd3 7a00 	vldr	s15, [r3]
 800a890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a898:	eeb1 6a67 	vneg.f32	s12, s15
 800a89c:	dcea      	bgt.n	800a874 <arm_mat_inverse_f32+0xac>
 800a89e:	eeb4 6a47 	vcmp.f32	s12, s14
 800a8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a6:	f102 0201 	add.w	r2, r2, #1
 800a8aa:	bfc8      	it	gt
 800a8ac:	eeb0 7a46 	vmovgt.f32	s14, s12
 800a8b0:	42a2      	cmp	r2, r4
 800a8b2:	442b      	add	r3, r5
 800a8b4:	d1ea      	bne.n	800a88c <arm_mat_inverse_f32+0xc4>
 800a8b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8be:	d075      	beq.n	800a9ac <arm_mat_inverse_f32+0x1e4>
 800a8c0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c8:	d070      	beq.n	800a9ac <arm_mat_inverse_f32+0x1e4>
 800a8ca:	4672      	mov	r2, lr
 800a8cc:	4663      	mov	r3, ip
 800a8ce:	ed93 7a00 	vldr	s14, [r3]
 800a8d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8d6:	3a01      	subs	r2, #1
 800a8d8:	ece3 7a01 	vstmia	r3!, {s15}
 800a8dc:	d1f7      	bne.n	800a8ce <arm_mat_inverse_f32+0x106>
 800a8de:	9901      	ldr	r1, [sp, #4]
 800a8e0:	464b      	mov	r3, r9
 800a8e2:	ed93 7a00 	vldr	s14, [r3]
 800a8e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a8ea:	3901      	subs	r1, #1
 800a8ec:	ece3 7a01 	vstmia	r3!, {s15}
 800a8f0:	d1f7      	bne.n	800a8e2 <arm_mat_inverse_f32+0x11a>
 800a8f2:	9803      	ldr	r0, [sp, #12]
 800a8f4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800a8f8:	42b1      	cmp	r1, r6
 800a8fa:	d039      	beq.n	800a970 <arm_mat_inverse_f32+0x1a8>
 800a8fc:	eddb 6a00 	vldr	s13, [fp]
 800a900:	465a      	mov	r2, fp
 800a902:	4673      	mov	r3, lr
 800a904:	46e2      	mov	sl, ip
 800a906:	ecba 7a01 	vldmia	sl!, {s14}
 800a90a:	edd2 7a00 	vldr	s15, [r2]
 800a90e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a912:	3b01      	subs	r3, #1
 800a914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a918:	ece2 7a01 	vstmia	r2!, {s15}
 800a91c:	d1f3      	bne.n	800a906 <arm_mat_inverse_f32+0x13e>
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	44bb      	add	fp, r7
 800a922:	4602      	mov	r2, r0
 800a924:	46ca      	mov	sl, r9
 800a926:	ecba 7a01 	vldmia	sl!, {s14}
 800a92a:	edd2 7a00 	vldr	s15, [r2]
 800a92e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a932:	3b01      	subs	r3, #1
 800a934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a938:	ece2 7a01 	vstmia	r2!, {s15}
 800a93c:	d1f3      	bne.n	800a926 <arm_mat_inverse_f32+0x15e>
 800a93e:	4428      	add	r0, r5
 800a940:	3101      	adds	r1, #1
 800a942:	428c      	cmp	r4, r1
 800a944:	44c3      	add	fp, r8
 800a946:	d1d7      	bne.n	800a8f8 <arm_mat_inverse_f32+0x130>
 800a948:	9b04      	ldr	r3, [sp, #16]
 800a94a:	f1be 0e01 	subs.w	lr, lr, #1
 800a94e:	f106 0601 	add.w	r6, r6, #1
 800a952:	449c      	add	ip, r3
 800a954:	f1a7 0704 	sub.w	r7, r7, #4
 800a958:	44a9      	add	r9, r5
 800a95a:	f47f af7e 	bne.w	800a85a <arm_mat_inverse_f32+0x92>
 800a95e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a966:	d006      	beq.n	800a976 <arm_mat_inverse_f32+0x1ae>
 800a968:	2000      	movs	r0, #0
 800a96a:	b007      	add	sp, #28
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	44bb      	add	fp, r7
 800a972:	4428      	add	r0, r5
 800a974:	e7e4      	b.n	800a940 <arm_mat_inverse_f32+0x178>
 800a976:	9b05      	ldr	r3, [sp, #20]
 800a978:	9a01      	ldr	r2, [sp, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	edd3 7a00 	vldr	s15, [r3]
 800a980:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a984:	fb02 f204 	mul.w	r2, r2, r4
 800a988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98c:	4614      	mov	r4, r2
 800a98e:	bf08      	it	eq
 800a990:	3304      	addeq	r3, #4
 800a992:	d007      	beq.n	800a9a4 <arm_mat_inverse_f32+0x1dc>
 800a994:	e7e8      	b.n	800a968 <arm_mat_inverse_f32+0x1a0>
 800a996:	ecf3 7a01 	vldmia	r3!, {s15}
 800a99a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a2:	d1e1      	bne.n	800a968 <arm_mat_inverse_f32+0x1a0>
 800a9a4:	f10e 0e01 	add.w	lr, lr, #1
 800a9a8:	4574      	cmp	r4, lr
 800a9aa:	d1f4      	bne.n	800a996 <arm_mat_inverse_f32+0x1ce>
 800a9ac:	f06f 0004 	mvn.w	r0, #4
 800a9b0:	b007      	add	sp, #28
 800a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b6:	f06f 0002 	mvn.w	r0, #2
 800a9ba:	b007      	add	sp, #28
 800a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c0:	4656      	mov	r6, sl
 800a9c2:	3f01      	subs	r7, #1
 800a9c4:	f846 bb04 	str.w	fp, [r6], #4
 800a9c8:	f47f af1b 	bne.w	800a802 <arm_mat_inverse_f32+0x3a>
 800a9cc:	e735      	b.n	800a83a <arm_mat_inverse_f32+0x72>
 800a9ce:	bf00      	nop
 800a9d0:	00000000 	.word	0x00000000

0800a9d4 <arm_mat_init_f32>:
 800a9d4:	8001      	strh	r1, [r0, #0]
 800a9d6:	8042      	strh	r2, [r0, #2]
 800a9d8:	6043      	str	r3, [r0, #4]
 800a9da:	4770      	bx	lr

0800a9dc <arm_biquad_cascade_df2T_f32>:
 800a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	7807      	ldrb	r7, [r0, #0]
 800a9e2:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800a9e6:	6885      	ldr	r5, [r0, #8]
 800a9e8:	3514      	adds	r5, #20
 800a9ea:	6846      	ldr	r6, [r0, #4]
 800a9ec:	3608      	adds	r6, #8
 800a9ee:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800a9f2:	eb02 0b09 	add.w	fp, r2, r9
 800a9f6:	f003 080f 	and.w	r8, r3, #15
 800a9fa:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800a9fe:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800aa02:	ed15 7a04 	vldr	s14, [r5, #-16]
 800aa06:	ed55 6a03 	vldr	s13, [r5, #-12]
 800aa0a:	ed15 6a02 	vldr	s12, [r5, #-8]
 800aa0e:	ed55 5a01 	vldr	s11, [r5, #-4]
 800aa12:	46b4      	mov	ip, r6
 800aa14:	ed56 3a02 	vldr	s7, [r6, #-8]
 800aa18:	ed16 4a01 	vldr	s8, [r6, #-4]
 800aa1c:	f1be 0f00 	cmp.w	lr, #0
 800aa20:	f000 8195 	beq.w	800ad4e <arm_biquad_cascade_df2T_f32+0x372>
 800aa24:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800aa28:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800aa2c:	4674      	mov	r4, lr
 800aa2e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800aa32:	ee27 5a83 	vmul.f32	s10, s15, s6
 800aa36:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aa3a:	ee67 4a03 	vmul.f32	s9, s14, s6
 800aa3e:	ee34 4a84 	vadd.f32	s8, s9, s8
 800aa42:	ee66 4a05 	vmul.f32	s9, s12, s10
 800aa46:	ee34 4a84 	vadd.f32	s8, s9, s8
 800aa4a:	ee26 3a83 	vmul.f32	s6, s13, s6
 800aa4e:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800aa52:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 800aa56:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800aa5a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800aa5e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800aa62:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aa66:	ee27 4a23 	vmul.f32	s8, s14, s7
 800aa6a:	ee35 5a04 	vadd.f32	s10, s10, s8
 800aa6e:	ee26 3a24 	vmul.f32	s6, s12, s9
 800aa72:	ee33 3a05 	vadd.f32	s6, s6, s10
 800aa76:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800aa7a:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800aa7e:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800aa82:	ee27 5a84 	vmul.f32	s10, s15, s8
 800aa86:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aa8a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800aa8e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aa92:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aa96:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aa9a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800aa9e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800aaa2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aaa6:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800aaaa:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800aaae:	ee67 4a84 	vmul.f32	s9, s15, s8
 800aab2:	ee74 4a83 	vadd.f32	s9, s9, s6
 800aab6:	ee25 5a85 	vmul.f32	s10, s11, s10
 800aaba:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aabe:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aac2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aac6:	ee26 3a24 	vmul.f32	s6, s12, s9
 800aaca:	ee33 3a05 	vadd.f32	s6, s6, s10
 800aace:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aad2:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800aad6:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 800aada:	ee27 5a84 	vmul.f32	s10, s15, s8
 800aade:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aae2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800aae6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aaea:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aaee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aaf2:	ee26 3a05 	vmul.f32	s6, s12, s10
 800aaf6:	ee33 3a24 	vadd.f32	s6, s6, s9
 800aafa:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aafe:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800ab02:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800ab06:	ee67 4a84 	vmul.f32	s9, s15, s8
 800ab0a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ab0e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ab12:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ab16:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ab1a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ab1e:	ee26 3a24 	vmul.f32	s6, s12, s9
 800ab22:	ee33 3a05 	vadd.f32	s6, s6, s10
 800ab26:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ab2a:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800ab2e:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800ab32:	ee27 5a84 	vmul.f32	s10, s15, s8
 800ab36:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ab3a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800ab3e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800ab42:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ab46:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800ab4a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800ab4e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800ab52:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ab56:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800ab5a:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800ab5e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800ab62:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ab66:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ab6a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ab6e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ab72:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ab76:	ee26 3a24 	vmul.f32	s6, s12, s9
 800ab7a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800ab7e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ab82:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800ab86:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800ab8a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800ab8e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ab92:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800ab96:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800ab9a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ab9e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aba2:	ee26 3a05 	vmul.f32	s6, s12, s10
 800aba6:	ee33 3a24 	vadd.f32	s6, s6, s9
 800abaa:	ee66 3a84 	vmul.f32	s7, s13, s8
 800abae:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800abb2:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800abb6:	ee67 4a84 	vmul.f32	s9, s15, s8
 800abba:	ee74 4a83 	vadd.f32	s9, s9, s6
 800abbe:	ee25 5a85 	vmul.f32	s10, s11, s10
 800abc2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800abc6:	ee67 3a04 	vmul.f32	s7, s14, s8
 800abca:	ee35 5a23 	vadd.f32	s10, s10, s7
 800abce:	ee26 3a24 	vmul.f32	s6, s12, s9
 800abd2:	ee33 3a05 	vadd.f32	s6, s6, s10
 800abd6:	ee66 3a84 	vmul.f32	s7, s13, s8
 800abda:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800abde:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800abe2:	ee27 5a84 	vmul.f32	s10, s15, s8
 800abe6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800abea:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800abee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800abf2:	ee67 3a04 	vmul.f32	s7, s14, s8
 800abf6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800abfa:	ee26 3a05 	vmul.f32	s6, s12, s10
 800abfe:	ee33 3a24 	vadd.f32	s6, s6, s9
 800ac02:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ac06:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 800ac0a:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800ac0e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800ac12:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ac16:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ac1a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ac1e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ac22:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ac26:	ee26 3a24 	vmul.f32	s6, s12, s9
 800ac2a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800ac2e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ac32:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800ac36:	ed10 4a04 	vldr	s8, [r0, #-16]
 800ac3a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800ac3e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ac42:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800ac46:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800ac4a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ac4e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800ac52:	ee26 3a05 	vmul.f32	s6, s12, s10
 800ac56:	ee33 3a24 	vadd.f32	s6, s6, s9
 800ac5a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ac5e:	ed03 5a04 	vstr	s10, [r3, #-16]
 800ac62:	ed10 4a03 	vldr	s8, [r0, #-12]
 800ac66:	ee67 4a84 	vmul.f32	s9, s15, s8
 800ac6a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ac6e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ac72:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ac76:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ac7a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ac7e:	ee26 3a24 	vmul.f32	s6, s12, s9
 800ac82:	ee33 3a05 	vadd.f32	s6, s6, s10
 800ac86:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ac8a:	ed43 4a03 	vstr	s9, [r3, #-12]
 800ac8e:	ed10 4a02 	vldr	s8, [r0, #-8]
 800ac92:	ee27 5a84 	vmul.f32	s10, s15, s8
 800ac96:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ac9a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800ac9e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aca2:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aca6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800acaa:	ee26 3a05 	vmul.f32	s6, s12, s10
 800acae:	ee33 3a24 	vadd.f32	s6, s6, s9
 800acb2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800acb6:	ed03 5a02 	vstr	s10, [r3, #-8]
 800acba:	ed10 4a01 	vldr	s8, [r0, #-4]
 800acbe:	ee67 4a84 	vmul.f32	s9, s15, s8
 800acc2:	ee74 4a83 	vadd.f32	s9, s9, s6
 800acc6:	ee25 5a85 	vmul.f32	s10, s11, s10
 800acca:	ee35 5a23 	vadd.f32	s10, s10, s7
 800acce:	ee67 3a04 	vmul.f32	s7, s14, s8
 800acd2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800acd6:	ee66 3a24 	vmul.f32	s7, s12, s9
 800acda:	ee73 3a85 	vadd.f32	s7, s7, s10
 800acde:	ee26 5a84 	vmul.f32	s10, s13, s8
 800ace2:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800ace6:	ee34 4a05 	vadd.f32	s8, s8, s10
 800acea:	ed43 4a01 	vstr	s9, [r3, #-4]
 800acee:	3040      	adds	r0, #64	; 0x40
 800acf0:	3340      	adds	r3, #64	; 0x40
 800acf2:	3c01      	subs	r4, #1
 800acf4:	f47f ae9b 	bne.w	800aa2e <arm_biquad_cascade_df2T_f32+0x52>
 800acf8:	4449      	add	r1, r9
 800acfa:	465b      	mov	r3, fp
 800acfc:	f1b8 0f00 	cmp.w	r8, #0
 800ad00:	d019      	beq.n	800ad36 <arm_biquad_cascade_df2T_f32+0x35a>
 800ad02:	eb01 000a 	add.w	r0, r1, sl
 800ad06:	ecf1 2a01 	vldmia	r1!, {s5}
 800ad0a:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800ad0e:	ee33 3a23 	vadd.f32	s6, s6, s7
 800ad12:	ee67 3a22 	vmul.f32	s7, s14, s5
 800ad16:	ee33 4a84 	vadd.f32	s8, s7, s8
 800ad1a:	ee26 5a03 	vmul.f32	s10, s12, s6
 800ad1e:	ee75 3a04 	vadd.f32	s7, s10, s8
 800ad22:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800ad26:	ee25 4a83 	vmul.f32	s8, s11, s6
 800ad2a:	ee34 4a22 	vadd.f32	s8, s8, s5
 800ad2e:	eca3 3a01 	vstmia	r3!, {s6}
 800ad32:	4281      	cmp	r1, r0
 800ad34:	d1e7      	bne.n	800ad06 <arm_biquad_cascade_df2T_f32+0x32a>
 800ad36:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800ad3a:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800ad3e:	3514      	adds	r5, #20
 800ad40:	3608      	adds	r6, #8
 800ad42:	4611      	mov	r1, r2
 800ad44:	3f01      	subs	r7, #1
 800ad46:	f47f ae5a 	bne.w	800a9fe <arm_biquad_cascade_df2T_f32+0x22>
 800ad4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4e:	4613      	mov	r3, r2
 800ad50:	e7d4      	b.n	800acfc <arm_biquad_cascade_df2T_f32+0x320>
	...

0800ad54 <arm_biquad_cascade_df2T_init_f32>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	6082      	str	r2, [r0, #8]
 800ad58:	7001      	strb	r1, [r0, #0]
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	00ca      	lsls	r2, r1, #3
 800ad5e:	4618      	mov	r0, r3
 800ad60:	2100      	movs	r1, #0
 800ad62:	f000 fb1b 	bl	800b39c <memset>
 800ad66:	6060      	str	r0, [r4, #4]
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	bf00      	nop

0800ad6c <arm_dot_prod_f32>:
 800ad6c:	b4f0      	push	{r4, r5, r6, r7}
 800ad6e:	0897      	lsrs	r7, r2, #2
 800ad70:	eddf 5a29 	vldr	s11, [pc, #164]	; 800ae18 <arm_dot_prod_f32+0xac>
 800ad74:	d02d      	beq.n	800add2 <arm_dot_prod_f32+0x66>
 800ad76:	f100 0510 	add.w	r5, r0, #16
 800ad7a:	f101 0410 	add.w	r4, r1, #16
 800ad7e:	463e      	mov	r6, r7
 800ad80:	ed55 6a04 	vldr	s13, [r5, #-16]
 800ad84:	ed54 3a04 	vldr	s7, [r4, #-16]
 800ad88:	ed15 7a03 	vldr	s14, [r5, #-12]
 800ad8c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800ad90:	ed55 7a02 	vldr	s15, [r5, #-8]
 800ad94:	ed54 4a02 	vldr	s9, [r4, #-8]
 800ad98:	ed15 6a01 	vldr	s12, [r5, #-4]
 800ad9c:	ed14 5a01 	vldr	s10, [r4, #-4]
 800ada0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ada4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ada8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800adac:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800adb0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800adb4:	ee66 6a05 	vmul.f32	s13, s12, s10
 800adb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adbc:	3e01      	subs	r6, #1
 800adbe:	f105 0510 	add.w	r5, r5, #16
 800adc2:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800adc6:	f104 0410 	add.w	r4, r4, #16
 800adca:	d1d9      	bne.n	800ad80 <arm_dot_prod_f32+0x14>
 800adcc:	013f      	lsls	r7, r7, #4
 800adce:	4438      	add	r0, r7
 800add0:	4439      	add	r1, r7
 800add2:	f012 0203 	ands.w	r2, r2, #3
 800add6:	d01b      	beq.n	800ae10 <arm_dot_prod_f32+0xa4>
 800add8:	edd1 7a00 	vldr	s15, [r1]
 800addc:	ed90 7a00 	vldr	s14, [r0]
 800ade0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ade4:	3a01      	subs	r2, #1
 800ade6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800adea:	d011      	beq.n	800ae10 <arm_dot_prod_f32+0xa4>
 800adec:	edd1 7a01 	vldr	s15, [r1, #4]
 800adf0:	ed90 7a01 	vldr	s14, [r0, #4]
 800adf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adf8:	2a01      	cmp	r2, #1
 800adfa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800adfe:	d007      	beq.n	800ae10 <arm_dot_prod_f32+0xa4>
 800ae00:	edd0 7a02 	vldr	s15, [r0, #8]
 800ae04:	ed91 7a02 	vldr	s14, [r1, #8]
 800ae08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae0c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ae10:	edc3 5a00 	vstr	s11, [r3]
 800ae14:	bcf0      	pop	{r4, r5, r6, r7}
 800ae16:	4770      	bx	lr
 800ae18:	00000000 	.word	0x00000000

0800ae1c <arm_radix8_butterfly_f32>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	ed2d 8b10 	vpush	{d8-d15}
 800ae24:	b095      	sub	sp, #84	; 0x54
 800ae26:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	ed9f bab9 	vldr	s22, [pc, #740]	; 800b114 <arm_radix8_butterfly_f32+0x2f8>
 800ae32:	9012      	str	r0, [sp, #72]	; 0x48
 800ae34:	468b      	mov	fp, r1
 800ae36:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae38:	4689      	mov	r9, r1
 800ae3a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800ae3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae40:	960f      	str	r6, [sp, #60]	; 0x3c
 800ae42:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800ae46:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800ae4a:	eb03 0508 	add.w	r5, r3, r8
 800ae4e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ae52:	eb05 040e 	add.w	r4, r5, lr
 800ae56:	0137      	lsls	r7, r6, #4
 800ae58:	eba6 030a 	sub.w	r3, r6, sl
 800ae5c:	eb04 000e 	add.w	r0, r4, lr
 800ae60:	44b2      	add	sl, r6
 800ae62:	1d3a      	adds	r2, r7, #4
 800ae64:	9702      	str	r7, [sp, #8]
 800ae66:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ae6a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800ae6e:	ebae 0c06 	sub.w	ip, lr, r6
 800ae72:	9703      	str	r7, [sp, #12]
 800ae74:	eb03 0708 	add.w	r7, r3, r8
 800ae78:	9701      	str	r7, [sp, #4]
 800ae7a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800ae7e:	9706      	str	r7, [sp, #24]
 800ae80:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800ae82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800ae86:	f10e 0104 	add.w	r1, lr, #4
 800ae8a:	4439      	add	r1, r7
 800ae8c:	443a      	add	r2, r7
 800ae8e:	0137      	lsls	r7, r6, #4
 800ae90:	00f6      	lsls	r6, r6, #3
 800ae92:	9704      	str	r7, [sp, #16]
 800ae94:	9605      	str	r6, [sp, #20]
 800ae96:	9f01      	ldr	r7, [sp, #4]
 800ae98:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ae9a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800ae9e:	f04f 0c00 	mov.w	ip, #0
 800aea2:	edd4 6a00 	vldr	s13, [r4]
 800aea6:	edd7 1a00 	vldr	s3, [r7]
 800aeaa:	ed16 aa01 	vldr	s20, [r6, #-4]
 800aeae:	edd5 5a00 	vldr	s11, [r5]
 800aeb2:	ed52 9a01 	vldr	s19, [r2, #-4]
 800aeb6:	ed90 6a00 	vldr	s12, [r0]
 800aeba:	ed51 7a01 	vldr	s15, [r1, #-4]
 800aebe:	ed93 3a00 	vldr	s6, [r3]
 800aec2:	ee39 0a86 	vadd.f32	s0, s19, s12
 800aec6:	ee33 2a21 	vadd.f32	s4, s6, s3
 800aeca:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800aece:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800aed2:	ee35 7a02 	vadd.f32	s14, s10, s4
 800aed6:	ee34 4a80 	vadd.f32	s8, s9, s0
 800aeda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800aede:	ee74 6a07 	vadd.f32	s13, s8, s14
 800aee2:	ee34 4a47 	vsub.f32	s8, s8, s14
 800aee6:	ed46 6a01 	vstr	s13, [r6, #-4]
 800aeea:	ed85 4a00 	vstr	s8, [r5]
 800aeee:	edd1 6a00 	vldr	s13, [r1]
 800aef2:	ed94 9a01 	vldr	s18, [r4, #4]
 800aef6:	edd3 2a01 	vldr	s5, [r3, #4]
 800aefa:	edd7 8a01 	vldr	s17, [r7, #4]
 800aefe:	edd6 0a00 	vldr	s1, [r6]
 800af02:	edd5 3a01 	vldr	s7, [r5, #4]
 800af06:	ed90 8a01 	vldr	s16, [r0, #4]
 800af0a:	ed92 7a00 	vldr	s14, [r2]
 800af0e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800af12:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800af16:	ee72 aae8 	vsub.f32	s21, s5, s17
 800af1a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800af1e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800af22:	ee77 7a83 	vadd.f32	s15, s15, s6
 800af26:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800af2a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800af2e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800af32:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800af36:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800af3a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800af3e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800af42:	ee37 7a48 	vsub.f32	s14, s14, s16
 800af46:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800af4a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800af4e:	ee76 6a89 	vadd.f32	s13, s13, s18
 800af52:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800af56:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800af5a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800af5e:	ee35 5a42 	vsub.f32	s10, s10, s4
 800af62:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800af66:	ee33 2a20 	vadd.f32	s4, s6, s1
 800af6a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800af6e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800af72:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800af76:	ee77 0a01 	vadd.f32	s1, s14, s2
 800af7a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800af7e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800af82:	ee73 1a84 	vadd.f32	s3, s7, s8
 800af86:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800af8a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800af8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800af92:	ee32 8a00 	vadd.f32	s16, s4, s0
 800af96:	ee33 1a45 	vsub.f32	s2, s6, s10
 800af9a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800af9e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800afa2:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800afa6:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800afaa:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800afae:	ee34 6a67 	vsub.f32	s12, s8, s15
 800afb2:	ee75 4a87 	vadd.f32	s9, s11, s14
 800afb6:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800afba:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800afbe:	ee77 7a84 	vadd.f32	s15, s15, s8
 800afc2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800afc6:	44dc      	add	ip, fp
 800afc8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800afcc:	45e1      	cmp	r9, ip
 800afce:	ed86 8a00 	vstr	s16, [r6]
 800afd2:	ed85 2a01 	vstr	s4, [r5, #4]
 800afd6:	4456      	add	r6, sl
 800afd8:	ed02 0a01 	vstr	s0, [r2, #-4]
 800afdc:	4455      	add	r5, sl
 800afde:	edc0 6a00 	vstr	s13, [r0]
 800afe2:	ed82 1a00 	vstr	s2, [r2]
 800afe6:	ed80 5a01 	vstr	s10, [r0, #4]
 800afea:	4452      	add	r2, sl
 800afec:	ed01 3a01 	vstr	s6, [r1, #-4]
 800aff0:	4450      	add	r0, sl
 800aff2:	edc7 2a00 	vstr	s5, [r7]
 800aff6:	edc4 4a00 	vstr	s9, [r4]
 800affa:	ed83 7a00 	vstr	s14, [r3]
 800affe:	edc1 5a00 	vstr	s11, [r1]
 800b002:	edc7 3a01 	vstr	s7, [r7, #4]
 800b006:	4451      	add	r1, sl
 800b008:	ed84 6a01 	vstr	s12, [r4, #4]
 800b00c:	4457      	add	r7, sl
 800b00e:	edc3 7a01 	vstr	s15, [r3, #4]
 800b012:	4454      	add	r4, sl
 800b014:	4453      	add	r3, sl
 800b016:	f63f af44 	bhi.w	800aea2 <arm_radix8_butterfly_f32+0x86>
 800b01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b01c:	2b07      	cmp	r3, #7
 800b01e:	f240 81b7 	bls.w	800b390 <arm_radix8_butterfly_f32+0x574>
 800b022:	9b06      	ldr	r3, [sp, #24]
 800b024:	9903      	ldr	r1, [sp, #12]
 800b026:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b028:	9e05      	ldr	r6, [sp, #20]
 800b02a:	9a04      	ldr	r2, [sp, #16]
 800b02c:	f103 0c08 	add.w	ip, r3, #8
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	3108      	adds	r1, #8
 800b034:	f108 0808 	add.w	r8, r8, #8
 800b038:	1841      	adds	r1, r0, r1
 800b03a:	3608      	adds	r6, #8
 800b03c:	330c      	adds	r3, #12
 800b03e:	4604      	mov	r4, r0
 800b040:	4444      	add	r4, r8
 800b042:	18c3      	adds	r3, r0, r3
 800b044:	9109      	str	r1, [sp, #36]	; 0x24
 800b046:	1981      	adds	r1, r0, r6
 800b048:	f10e 0e08 	add.w	lr, lr, #8
 800b04c:	3208      	adds	r2, #8
 800b04e:	940b      	str	r4, [sp, #44]	; 0x2c
 800b050:	9107      	str	r1, [sp, #28]
 800b052:	4604      	mov	r4, r0
 800b054:	4601      	mov	r1, r0
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	f100 030c 	add.w	r3, r0, #12
 800b05c:	4474      	add	r4, lr
 800b05e:	f04f 0801 	mov.w	r8, #1
 800b062:	1882      	adds	r2, r0, r2
 800b064:	4461      	add	r1, ip
 800b066:	9305      	str	r3, [sp, #20]
 800b068:	464b      	mov	r3, r9
 800b06a:	940a      	str	r4, [sp, #40]	; 0x28
 800b06c:	46c1      	mov	r9, r8
 800b06e:	9208      	str	r2, [sp, #32]
 800b070:	46d8      	mov	r8, fp
 800b072:	9106      	str	r1, [sp, #24]
 800b074:	f04f 0e00 	mov.w	lr, #0
 800b078:	469b      	mov	fp, r3
 800b07a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b07c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b07e:	449e      	add	lr, r3
 800b080:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b084:	441a      	add	r2, r3
 800b086:	920e      	str	r2, [sp, #56]	; 0x38
 800b088:	441a      	add	r2, r3
 800b08a:	18d4      	adds	r4, r2, r3
 800b08c:	18e5      	adds	r5, r4, r3
 800b08e:	18ee      	adds	r6, r5, r3
 800b090:	18f7      	adds	r7, r6, r3
 800b092:	eb07 0c03 	add.w	ip, r7, r3
 800b096:	920d      	str	r2, [sp, #52]	; 0x34
 800b098:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b09c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b0a0:	910c      	str	r1, [sp, #48]	; 0x30
 800b0a2:	4419      	add	r1, r3
 800b0a4:	9103      	str	r1, [sp, #12]
 800b0a6:	4419      	add	r1, r3
 800b0a8:	18ca      	adds	r2, r1, r3
 800b0aa:	9202      	str	r2, [sp, #8]
 800b0ac:	441a      	add	r2, r3
 800b0ae:	18d0      	adds	r0, r2, r3
 800b0b0:	ed92 ea01 	vldr	s28, [r2, #4]
 800b0b4:	9a02      	ldr	r2, [sp, #8]
 800b0b6:	edd4 7a00 	vldr	s15, [r4]
 800b0ba:	edd2 da01 	vldr	s27, [r2, #4]
 800b0be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0c0:	ed91 da01 	vldr	s26, [r1, #4]
 800b0c4:	ed92 ca01 	vldr	s24, [r2, #4]
 800b0c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0ca:	9903      	ldr	r1, [sp, #12]
 800b0cc:	edcd 7a03 	vstr	s15, [sp, #12]
 800b0d0:	edd2 7a00 	vldr	s15, [r2]
 800b0d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0d6:	edcd 7a02 	vstr	s15, [sp, #8]
 800b0da:	edd2 7a00 	vldr	s15, [r2]
 800b0de:	edd0 ea01 	vldr	s29, [r0, #4]
 800b0e2:	edd1 ca01 	vldr	s25, [r1, #4]
 800b0e6:	eddc ba00 	vldr	s23, [ip]
 800b0ea:	edd7 aa00 	vldr	s21, [r7]
 800b0ee:	ed96 aa00 	vldr	s20, [r6]
 800b0f2:	edd5 9a00 	vldr	s19, [r5]
 800b0f6:	edcd 7a01 	vstr	s15, [sp, #4]
 800b0fa:	4403      	add	r3, r0
 800b0fc:	ed93 fa01 	vldr	s30, [r3, #4]
 800b100:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b104:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b108:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b10c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b110:	46cc      	mov	ip, r9
 800b112:	e001      	b.n	800b118 <arm_radix8_butterfly_f32+0x2fc>
 800b114:	3f3504f3 	.word	0x3f3504f3
 800b118:	ed91 6a00 	vldr	s12, [r1]
 800b11c:	ed93 5a00 	vldr	s10, [r3]
 800b120:	edd0 fa00 	vldr	s31, [r0]
 800b124:	edd4 7a00 	vldr	s15, [r4]
 800b128:	ed95 7a00 	vldr	s14, [r5]
 800b12c:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b130:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b134:	ed92 2a00 	vldr	s4, [r2]
 800b138:	ed96 0a00 	vldr	s0, [r6]
 800b13c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b140:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b144:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b148:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b14c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b150:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b154:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b158:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b15c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b160:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b164:	edd4 8a01 	vldr	s17, [r4, #4]
 800b168:	ed92 9a01 	vldr	s18, [r2, #4]
 800b16c:	edd7 0a00 	vldr	s1, [r7]
 800b170:	edd1 2a01 	vldr	s5, [r1, #4]
 800b174:	ed95 7a01 	vldr	s14, [r5, #4]
 800b178:	ed93 6a01 	vldr	s12, [r3, #4]
 800b17c:	edd0 5a01 	vldr	s11, [r0, #4]
 800b180:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b184:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b188:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b18c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b190:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b194:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b198:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b19c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b1a0:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b1a4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b1a8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b1ac:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b1b0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b1b4:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b1b8:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b1bc:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b1c0:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b1c4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b1c8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b1cc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b1d0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b1d4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b1d8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b1dc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b1e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b1e4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b1e8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b1ec:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b1f0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b1f4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b1f8:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b1fc:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b200:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b204:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b208:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b20c:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b210:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b214:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b218:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b21c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b220:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b224:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b228:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b22c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b230:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b234:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b238:	eddd 1a02 	vldr	s3, [sp, #8]
 800b23c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b240:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b244:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b248:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b24c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b250:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b254:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b258:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b25c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b260:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b264:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b268:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b26c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b270:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b274:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b278:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b27c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b280:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b284:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b288:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b28c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b290:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b294:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b298:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b29c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b2a0:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b2a4:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b2a8:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b2ac:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b2b0:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b2b4:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b2b8:	eddd 5a03 	vldr	s11, [sp, #12]
 800b2bc:	edc6 fa00 	vstr	s31, [r6]
 800b2c0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b2c4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b2c8:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b2cc:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b2d0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b2d4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b2d8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b2dc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b2e0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b2e4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b2e8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b2ec:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b2f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b2f4:	44c4      	add	ip, r8
 800b2f6:	45e3      	cmp	fp, ip
 800b2f8:	edc3 3a00 	vstr	s7, [r3]
 800b2fc:	edc3 6a01 	vstr	s13, [r3, #4]
 800b300:	4456      	add	r6, sl
 800b302:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b306:	edc7 0a00 	vstr	s1, [r7]
 800b30a:	4453      	add	r3, sl
 800b30c:	ed80 2a00 	vstr	s4, [r0]
 800b310:	edc0 2a01 	vstr	s5, [r0, #4]
 800b314:	4457      	add	r7, sl
 800b316:	edc2 1a00 	vstr	s3, [r2]
 800b31a:	ed82 7a01 	vstr	s14, [r2, #4]
 800b31e:	4450      	add	r0, sl
 800b320:	ed85 8a00 	vstr	s16, [r5]
 800b324:	ed85 0a01 	vstr	s0, [r5, #4]
 800b328:	4452      	add	r2, sl
 800b32a:	edc1 4a00 	vstr	s9, [r1]
 800b32e:	4455      	add	r5, sl
 800b330:	ed81 3a01 	vstr	s6, [r1, #4]
 800b334:	edc4 8a00 	vstr	s17, [r4]
 800b338:	ed84 6a01 	vstr	s12, [r4, #4]
 800b33c:	4451      	add	r1, sl
 800b33e:	4454      	add	r4, sl
 800b340:	f63f aeea 	bhi.w	800b118 <arm_radix8_butterfly_f32+0x2fc>
 800b344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b346:	3308      	adds	r3, #8
 800b348:	930b      	str	r3, [sp, #44]	; 0x2c
 800b34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34c:	3308      	adds	r3, #8
 800b34e:	930a      	str	r3, [sp, #40]	; 0x28
 800b350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b352:	3308      	adds	r3, #8
 800b354:	9309      	str	r3, [sp, #36]	; 0x24
 800b356:	9b08      	ldr	r3, [sp, #32]
 800b358:	3308      	adds	r3, #8
 800b35a:	9308      	str	r3, [sp, #32]
 800b35c:	9b07      	ldr	r3, [sp, #28]
 800b35e:	3308      	adds	r3, #8
 800b360:	9307      	str	r3, [sp, #28]
 800b362:	9b06      	ldr	r3, [sp, #24]
 800b364:	3308      	adds	r3, #8
 800b366:	9306      	str	r3, [sp, #24]
 800b368:	9b05      	ldr	r3, [sp, #20]
 800b36a:	3308      	adds	r3, #8
 800b36c:	9305      	str	r3, [sp, #20]
 800b36e:	9b04      	ldr	r3, [sp, #16]
 800b370:	3308      	adds	r3, #8
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b376:	f109 0901 	add.w	r9, r9, #1
 800b37a:	454b      	cmp	r3, r9
 800b37c:	f47f ae7d 	bne.w	800b07a <arm_radix8_butterfly_f32+0x25e>
 800b380:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	b29b      	uxth	r3, r3
 800b386:	46d9      	mov	r9, fp
 800b388:	9310      	str	r3, [sp, #64]	; 0x40
 800b38a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800b38e:	e554      	b.n	800ae3a <arm_radix8_butterfly_f32+0x1e>
 800b390:	b015      	add	sp, #84	; 0x54
 800b392:	ecbd 8b10 	vpop	{d8-d15}
 800b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39a:	bf00      	nop

0800b39c <memset>:
 800b39c:	4402      	add	r2, r0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d100      	bne.n	800b3a6 <memset+0xa>
 800b3a4:	4770      	bx	lr
 800b3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3aa:	e7f9      	b.n	800b3a0 <memset+0x4>

0800b3ac <__errno>:
 800b3ac:	4b01      	ldr	r3, [pc, #4]	; (800b3b4 <__errno+0x8>)
 800b3ae:	6818      	ldr	r0, [r3, #0]
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	200078c0 	.word	0x200078c0

0800b3b8 <__libc_init_array>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	4d0d      	ldr	r5, [pc, #52]	; (800b3f0 <__libc_init_array+0x38>)
 800b3bc:	4c0d      	ldr	r4, [pc, #52]	; (800b3f4 <__libc_init_array+0x3c>)
 800b3be:	1b64      	subs	r4, r4, r5
 800b3c0:	10a4      	asrs	r4, r4, #2
 800b3c2:	2600      	movs	r6, #0
 800b3c4:	42a6      	cmp	r6, r4
 800b3c6:	d109      	bne.n	800b3dc <__libc_init_array+0x24>
 800b3c8:	4d0b      	ldr	r5, [pc, #44]	; (800b3f8 <__libc_init_array+0x40>)
 800b3ca:	4c0c      	ldr	r4, [pc, #48]	; (800b3fc <__libc_init_array+0x44>)
 800b3cc:	f001 f96a 	bl	800c6a4 <_init>
 800b3d0:	1b64      	subs	r4, r4, r5
 800b3d2:	10a4      	asrs	r4, r4, #2
 800b3d4:	2600      	movs	r6, #0
 800b3d6:	42a6      	cmp	r6, r4
 800b3d8:	d105      	bne.n	800b3e6 <__libc_init_array+0x2e>
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
 800b3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e0:	4798      	blx	r3
 800b3e2:	3601      	adds	r6, #1
 800b3e4:	e7ee      	b.n	800b3c4 <__libc_init_array+0xc>
 800b3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ea:	4798      	blx	r3
 800b3ec:	3601      	adds	r6, #1
 800b3ee:	e7f2      	b.n	800b3d6 <__libc_init_array+0x1e>
 800b3f0:	0801f718 	.word	0x0801f718
 800b3f4:	0801f718 	.word	0x0801f718
 800b3f8:	0801f718 	.word	0x0801f718
 800b3fc:	0801f71c 	.word	0x0801f71c

0800b400 <exp>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	ed2d 8b02 	vpush	{d8}
 800b406:	ec55 4b10 	vmov	r4, r5, d0
 800b40a:	f000 f9e5 	bl	800b7d8 <__ieee754_exp>
 800b40e:	eeb0 8a40 	vmov.f32	s16, s0
 800b412:	eef0 8a60 	vmov.f32	s17, s1
 800b416:	ec45 4b10 	vmov	d0, r4, r5
 800b41a:	f000 f8f3 	bl	800b604 <finite>
 800b41e:	b168      	cbz	r0, 800b43c <exp+0x3c>
 800b420:	a317      	add	r3, pc, #92	; (adr r3, 800b480 <exp+0x80>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f5 fb41 	bl	8000ab0 <__aeabi_dcmpgt>
 800b42e:	b160      	cbz	r0, 800b44a <exp+0x4a>
 800b430:	f7ff ffbc 	bl	800b3ac <__errno>
 800b434:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800b470 <exp+0x70>
 800b438:	2322      	movs	r3, #34	; 0x22
 800b43a:	6003      	str	r3, [r0, #0]
 800b43c:	eeb0 0a48 	vmov.f32	s0, s16
 800b440:	eef0 0a68 	vmov.f32	s1, s17
 800b444:	ecbd 8b02 	vpop	{d8}
 800b448:	bd38      	pop	{r3, r4, r5, pc}
 800b44a:	a30f      	add	r3, pc, #60	; (adr r3, 800b488 <exp+0x88>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f5 fb0e 	bl	8000a74 <__aeabi_dcmplt>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d0ef      	beq.n	800b43c <exp+0x3c>
 800b45c:	f7ff ffa6 	bl	800b3ac <__errno>
 800b460:	2322      	movs	r3, #34	; 0x22
 800b462:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800b478 <exp+0x78>
 800b466:	6003      	str	r3, [r0, #0]
 800b468:	e7e8      	b.n	800b43c <exp+0x3c>
 800b46a:	bf00      	nop
 800b46c:	f3af 8000 	nop.w
 800b470:	00000000 	.word	0x00000000
 800b474:	7ff00000 	.word	0x7ff00000
	...
 800b480:	fefa39ef 	.word	0xfefa39ef
 800b484:	40862e42 	.word	0x40862e42
 800b488:	d52d3051 	.word	0xd52d3051
 800b48c:	c0874910 	.word	0xc0874910

0800b490 <pow>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	ed2d 8b02 	vpush	{d8}
 800b496:	eeb0 8a40 	vmov.f32	s16, s0
 800b49a:	eef0 8a60 	vmov.f32	s17, s1
 800b49e:	ec55 4b11 	vmov	r4, r5, d1
 800b4a2:	f000 fb1d 	bl	800bae0 <__ieee754_pow>
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	ec57 6b10 	vmov	r6, r7, d0
 800b4b2:	f7f5 fb07 	bl	8000ac4 <__aeabi_dcmpun>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d13b      	bne.n	800b532 <pow+0xa2>
 800b4ba:	ec51 0b18 	vmov	r0, r1, d8
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f7f5 facd 	bl	8000a60 <__aeabi_dcmpeq>
 800b4c6:	b1b8      	cbz	r0, 800b4f8 <pow+0x68>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	f7f5 fac6 	bl	8000a60 <__aeabi_dcmpeq>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d146      	bne.n	800b566 <pow+0xd6>
 800b4d8:	ec45 4b10 	vmov	d0, r4, r5
 800b4dc:	f000 f892 	bl	800b604 <finite>
 800b4e0:	b338      	cbz	r0, 800b532 <pow+0xa2>
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	f7f5 fac3 	bl	8000a74 <__aeabi_dcmplt>
 800b4ee:	b300      	cbz	r0, 800b532 <pow+0xa2>
 800b4f0:	f7ff ff5c 	bl	800b3ac <__errno>
 800b4f4:	2322      	movs	r3, #34	; 0x22
 800b4f6:	e01b      	b.n	800b530 <pow+0xa0>
 800b4f8:	ec47 6b10 	vmov	d0, r6, r7
 800b4fc:	f000 f882 	bl	800b604 <finite>
 800b500:	b9e0      	cbnz	r0, 800b53c <pow+0xac>
 800b502:	eeb0 0a48 	vmov.f32	s0, s16
 800b506:	eef0 0a68 	vmov.f32	s1, s17
 800b50a:	f000 f87b 	bl	800b604 <finite>
 800b50e:	b1a8      	cbz	r0, 800b53c <pow+0xac>
 800b510:	ec45 4b10 	vmov	d0, r4, r5
 800b514:	f000 f876 	bl	800b604 <finite>
 800b518:	b180      	cbz	r0, 800b53c <pow+0xac>
 800b51a:	4632      	mov	r2, r6
 800b51c:	463b      	mov	r3, r7
 800b51e:	4630      	mov	r0, r6
 800b520:	4639      	mov	r1, r7
 800b522:	f7f5 facf 	bl	8000ac4 <__aeabi_dcmpun>
 800b526:	2800      	cmp	r0, #0
 800b528:	d0e2      	beq.n	800b4f0 <pow+0x60>
 800b52a:	f7ff ff3f 	bl	800b3ac <__errno>
 800b52e:	2321      	movs	r3, #33	; 0x21
 800b530:	6003      	str	r3, [r0, #0]
 800b532:	ecbd 8b02 	vpop	{d8}
 800b536:	ec47 6b10 	vmov	d0, r6, r7
 800b53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b53c:	2200      	movs	r2, #0
 800b53e:	2300      	movs	r3, #0
 800b540:	4630      	mov	r0, r6
 800b542:	4639      	mov	r1, r7
 800b544:	f7f5 fa8c 	bl	8000a60 <__aeabi_dcmpeq>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d0f2      	beq.n	800b532 <pow+0xa2>
 800b54c:	eeb0 0a48 	vmov.f32	s0, s16
 800b550:	eef0 0a68 	vmov.f32	s1, s17
 800b554:	f000 f856 	bl	800b604 <finite>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d0ea      	beq.n	800b532 <pow+0xa2>
 800b55c:	ec45 4b10 	vmov	d0, r4, r5
 800b560:	f000 f850 	bl	800b604 <finite>
 800b564:	e7c3      	b.n	800b4ee <pow+0x5e>
 800b566:	4f01      	ldr	r7, [pc, #4]	; (800b56c <pow+0xdc>)
 800b568:	2600      	movs	r6, #0
 800b56a:	e7e2      	b.n	800b532 <pow+0xa2>
 800b56c:	3ff00000 	.word	0x3ff00000

0800b570 <sqrt>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	ed2d 8b02 	vpush	{d8}
 800b576:	ec55 4b10 	vmov	r4, r5, d0
 800b57a:	f000 f84f 	bl	800b61c <__ieee754_sqrt>
 800b57e:	4622      	mov	r2, r4
 800b580:	462b      	mov	r3, r5
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	eeb0 8a40 	vmov.f32	s16, s0
 800b58a:	eef0 8a60 	vmov.f32	s17, s1
 800b58e:	f7f5 fa99 	bl	8000ac4 <__aeabi_dcmpun>
 800b592:	b990      	cbnz	r0, 800b5ba <sqrt+0x4a>
 800b594:	2200      	movs	r2, #0
 800b596:	2300      	movs	r3, #0
 800b598:	4620      	mov	r0, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f5 fa6a 	bl	8000a74 <__aeabi_dcmplt>
 800b5a0:	b158      	cbz	r0, 800b5ba <sqrt+0x4a>
 800b5a2:	f7ff ff03 	bl	800b3ac <__errno>
 800b5a6:	2321      	movs	r3, #33	; 0x21
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	f7f5 f917 	bl	80007e4 <__aeabi_ddiv>
 800b5b6:	ec41 0b18 	vmov	d8, r0, r1
 800b5ba:	eeb0 0a48 	vmov.f32	s0, s16
 800b5be:	eef0 0a68 	vmov.f32	s1, s17
 800b5c2:	ecbd 8b02 	vpop	{d8}
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}

0800b5c8 <sqrtf>:
 800b5c8:	b508      	push	{r3, lr}
 800b5ca:	ed2d 8b02 	vpush	{d8}
 800b5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800b5d2:	f000 f8fd 	bl	800b7d0 <__ieee754_sqrtf>
 800b5d6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5de:	d60c      	bvs.n	800b5fa <sqrtf+0x32>
 800b5e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b600 <sqrtf+0x38>
 800b5e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ec:	d505      	bpl.n	800b5fa <sqrtf+0x32>
 800b5ee:	f7ff fedd 	bl	800b3ac <__errno>
 800b5f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b5f6:	2321      	movs	r3, #33	; 0x21
 800b5f8:	6003      	str	r3, [r0, #0]
 800b5fa:	ecbd 8b02 	vpop	{d8}
 800b5fe:	bd08      	pop	{r3, pc}
 800b600:	00000000 	.word	0x00000000

0800b604 <finite>:
 800b604:	b082      	sub	sp, #8
 800b606:	ed8d 0b00 	vstr	d0, [sp]
 800b60a:	9801      	ldr	r0, [sp, #4]
 800b60c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b610:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b614:	0fc0      	lsrs	r0, r0, #31
 800b616:	b002      	add	sp, #8
 800b618:	4770      	bx	lr
	...

0800b61c <__ieee754_sqrt>:
 800b61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	ec55 4b10 	vmov	r4, r5, d0
 800b624:	4e67      	ldr	r6, [pc, #412]	; (800b7c4 <__ieee754_sqrt+0x1a8>)
 800b626:	43ae      	bics	r6, r5
 800b628:	ee10 0a10 	vmov	r0, s0
 800b62c:	ee10 2a10 	vmov	r2, s0
 800b630:	4629      	mov	r1, r5
 800b632:	462b      	mov	r3, r5
 800b634:	d10d      	bne.n	800b652 <__ieee754_sqrt+0x36>
 800b636:	f7f4 ffab 	bl	8000590 <__aeabi_dmul>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4620      	mov	r0, r4
 800b640:	4629      	mov	r1, r5
 800b642:	f7f4 fdef 	bl	8000224 <__adddf3>
 800b646:	4604      	mov	r4, r0
 800b648:	460d      	mov	r5, r1
 800b64a:	ec45 4b10 	vmov	d0, r4, r5
 800b64e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b652:	2d00      	cmp	r5, #0
 800b654:	dc0b      	bgt.n	800b66e <__ieee754_sqrt+0x52>
 800b656:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b65a:	4326      	orrs	r6, r4
 800b65c:	d0f5      	beq.n	800b64a <__ieee754_sqrt+0x2e>
 800b65e:	b135      	cbz	r5, 800b66e <__ieee754_sqrt+0x52>
 800b660:	f7f4 fdde 	bl	8000220 <__aeabi_dsub>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	f7f5 f8bc 	bl	80007e4 <__aeabi_ddiv>
 800b66c:	e7eb      	b.n	800b646 <__ieee754_sqrt+0x2a>
 800b66e:	1509      	asrs	r1, r1, #20
 800b670:	f000 808d 	beq.w	800b78e <__ieee754_sqrt+0x172>
 800b674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b678:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b67c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b680:	07c9      	lsls	r1, r1, #31
 800b682:	bf5c      	itt	pl
 800b684:	005b      	lslpl	r3, r3, #1
 800b686:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b68a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b68e:	bf58      	it	pl
 800b690:	0052      	lslpl	r2, r2, #1
 800b692:	2500      	movs	r5, #0
 800b694:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b698:	1076      	asrs	r6, r6, #1
 800b69a:	0052      	lsls	r2, r2, #1
 800b69c:	f04f 0e16 	mov.w	lr, #22
 800b6a0:	46ac      	mov	ip, r5
 800b6a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6a6:	eb0c 0001 	add.w	r0, ip, r1
 800b6aa:	4298      	cmp	r0, r3
 800b6ac:	bfde      	ittt	le
 800b6ae:	1a1b      	suble	r3, r3, r0
 800b6b0:	eb00 0c01 	addle.w	ip, r0, r1
 800b6b4:	186d      	addle	r5, r5, r1
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	f1be 0e01 	subs.w	lr, lr, #1
 800b6bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b6c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b6c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b6c8:	d1ed      	bne.n	800b6a6 <__ieee754_sqrt+0x8a>
 800b6ca:	4674      	mov	r4, lr
 800b6cc:	2720      	movs	r7, #32
 800b6ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b6d2:	4563      	cmp	r3, ip
 800b6d4:	eb01 000e 	add.w	r0, r1, lr
 800b6d8:	dc02      	bgt.n	800b6e0 <__ieee754_sqrt+0xc4>
 800b6da:	d113      	bne.n	800b704 <__ieee754_sqrt+0xe8>
 800b6dc:	4290      	cmp	r0, r2
 800b6de:	d811      	bhi.n	800b704 <__ieee754_sqrt+0xe8>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	eb00 0e01 	add.w	lr, r0, r1
 800b6e6:	da57      	bge.n	800b798 <__ieee754_sqrt+0x17c>
 800b6e8:	f1be 0f00 	cmp.w	lr, #0
 800b6ec:	db54      	blt.n	800b798 <__ieee754_sqrt+0x17c>
 800b6ee:	f10c 0801 	add.w	r8, ip, #1
 800b6f2:	eba3 030c 	sub.w	r3, r3, ip
 800b6f6:	4290      	cmp	r0, r2
 800b6f8:	bf88      	it	hi
 800b6fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b6fe:	1a12      	subs	r2, r2, r0
 800b700:	440c      	add	r4, r1
 800b702:	46c4      	mov	ip, r8
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	3f01      	subs	r7, #1
 800b708:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b70c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b710:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b714:	d1dd      	bne.n	800b6d2 <__ieee754_sqrt+0xb6>
 800b716:	4313      	orrs	r3, r2
 800b718:	d01b      	beq.n	800b752 <__ieee754_sqrt+0x136>
 800b71a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b7c8 <__ieee754_sqrt+0x1ac>
 800b71e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b7cc <__ieee754_sqrt+0x1b0>
 800b722:	e9da 0100 	ldrd	r0, r1, [sl]
 800b726:	e9db 2300 	ldrd	r2, r3, [fp]
 800b72a:	f7f4 fd79 	bl	8000220 <__aeabi_dsub>
 800b72e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4640      	mov	r0, r8
 800b738:	4649      	mov	r1, r9
 800b73a:	f7f5 f9a5 	bl	8000a88 <__aeabi_dcmple>
 800b73e:	b140      	cbz	r0, 800b752 <__ieee754_sqrt+0x136>
 800b740:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b744:	e9da 0100 	ldrd	r0, r1, [sl]
 800b748:	e9db 2300 	ldrd	r2, r3, [fp]
 800b74c:	d126      	bne.n	800b79c <__ieee754_sqrt+0x180>
 800b74e:	3501      	adds	r5, #1
 800b750:	463c      	mov	r4, r7
 800b752:	106a      	asrs	r2, r5, #1
 800b754:	0863      	lsrs	r3, r4, #1
 800b756:	07e9      	lsls	r1, r5, #31
 800b758:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b75c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b760:	bf48      	it	mi
 800b762:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b766:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b76a:	461c      	mov	r4, r3
 800b76c:	e76d      	b.n	800b64a <__ieee754_sqrt+0x2e>
 800b76e:	0ad3      	lsrs	r3, r2, #11
 800b770:	3815      	subs	r0, #21
 800b772:	0552      	lsls	r2, r2, #21
 800b774:	2b00      	cmp	r3, #0
 800b776:	d0fa      	beq.n	800b76e <__ieee754_sqrt+0x152>
 800b778:	02dc      	lsls	r4, r3, #11
 800b77a:	d50a      	bpl.n	800b792 <__ieee754_sqrt+0x176>
 800b77c:	f1c1 0420 	rsb	r4, r1, #32
 800b780:	fa22 f404 	lsr.w	r4, r2, r4
 800b784:	1e4d      	subs	r5, r1, #1
 800b786:	408a      	lsls	r2, r1
 800b788:	4323      	orrs	r3, r4
 800b78a:	1b41      	subs	r1, r0, r5
 800b78c:	e772      	b.n	800b674 <__ieee754_sqrt+0x58>
 800b78e:	4608      	mov	r0, r1
 800b790:	e7f0      	b.n	800b774 <__ieee754_sqrt+0x158>
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	3101      	adds	r1, #1
 800b796:	e7ef      	b.n	800b778 <__ieee754_sqrt+0x15c>
 800b798:	46e0      	mov	r8, ip
 800b79a:	e7aa      	b.n	800b6f2 <__ieee754_sqrt+0xd6>
 800b79c:	f7f4 fd42 	bl	8000224 <__adddf3>
 800b7a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	4640      	mov	r0, r8
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	f7f5 f962 	bl	8000a74 <__aeabi_dcmplt>
 800b7b0:	b120      	cbz	r0, 800b7bc <__ieee754_sqrt+0x1a0>
 800b7b2:	1ca0      	adds	r0, r4, #2
 800b7b4:	bf08      	it	eq
 800b7b6:	3501      	addeq	r5, #1
 800b7b8:	3402      	adds	r4, #2
 800b7ba:	e7ca      	b.n	800b752 <__ieee754_sqrt+0x136>
 800b7bc:	3401      	adds	r4, #1
 800b7be:	f024 0401 	bic.w	r4, r4, #1
 800b7c2:	e7c6      	b.n	800b752 <__ieee754_sqrt+0x136>
 800b7c4:	7ff00000 	.word	0x7ff00000
 800b7c8:	200078c8 	.word	0x200078c8
 800b7cc:	200078d0 	.word	0x200078d0

0800b7d0 <__ieee754_sqrtf>:
 800b7d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b7d4:	4770      	bx	lr
	...

0800b7d8 <__ieee754_exp>:
 800b7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7dc:	ec55 4b10 	vmov	r4, r5, d0
 800b7e0:	49b5      	ldr	r1, [pc, #724]	; (800bab8 <__ieee754_exp+0x2e0>)
 800b7e2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b7e6:	428a      	cmp	r2, r1
 800b7e8:	ed2d 8b04 	vpush	{d8-d9}
 800b7ec:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b7f0:	d93b      	bls.n	800b86a <__ieee754_exp+0x92>
 800b7f2:	49b2      	ldr	r1, [pc, #712]	; (800babc <__ieee754_exp+0x2e4>)
 800b7f4:	428a      	cmp	r2, r1
 800b7f6:	d916      	bls.n	800b826 <__ieee754_exp+0x4e>
 800b7f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b7fc:	4323      	orrs	r3, r4
 800b7fe:	ee10 2a10 	vmov	r2, s0
 800b802:	d007      	beq.n	800b814 <__ieee754_exp+0x3c>
 800b804:	462b      	mov	r3, r5
 800b806:	4620      	mov	r0, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f4 fd0b 	bl	8000224 <__adddf3>
 800b80e:	4604      	mov	r4, r0
 800b810:	460d      	mov	r5, r1
 800b812:	e002      	b.n	800b81a <__ieee754_exp+0x42>
 800b814:	b10e      	cbz	r6, 800b81a <__ieee754_exp+0x42>
 800b816:	2400      	movs	r4, #0
 800b818:	2500      	movs	r5, #0
 800b81a:	ecbd 8b04 	vpop	{d8-d9}
 800b81e:	ec45 4b10 	vmov	d0, r4, r5
 800b822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b826:	a38e      	add	r3, pc, #568	; (adr r3, 800ba60 <__ieee754_exp+0x288>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	ee10 0a10 	vmov	r0, s0
 800b830:	4629      	mov	r1, r5
 800b832:	f7f5 f93d 	bl	8000ab0 <__aeabi_dcmpgt>
 800b836:	4607      	mov	r7, r0
 800b838:	b130      	cbz	r0, 800b848 <__ieee754_exp+0x70>
 800b83a:	ecbd 8b04 	vpop	{d8-d9}
 800b83e:	2000      	movs	r0, #0
 800b840:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b844:	f000 bf25 	b.w	800c692 <__math_oflow>
 800b848:	a387      	add	r3, pc, #540	; (adr r3, 800ba68 <__ieee754_exp+0x290>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	4620      	mov	r0, r4
 800b850:	4629      	mov	r1, r5
 800b852:	f7f5 f90f 	bl	8000a74 <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	f000 808b 	beq.w	800b972 <__ieee754_exp+0x19a>
 800b85c:	ecbd 8b04 	vpop	{d8-d9}
 800b860:	4638      	mov	r0, r7
 800b862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b866:	f000 bf0b 	b.w	800c680 <__math_uflow>
 800b86a:	4b95      	ldr	r3, [pc, #596]	; (800bac0 <__ieee754_exp+0x2e8>)
 800b86c:	429a      	cmp	r2, r3
 800b86e:	f240 80ac 	bls.w	800b9ca <__ieee754_exp+0x1f2>
 800b872:	4b94      	ldr	r3, [pc, #592]	; (800bac4 <__ieee754_exp+0x2ec>)
 800b874:	429a      	cmp	r2, r3
 800b876:	d87c      	bhi.n	800b972 <__ieee754_exp+0x19a>
 800b878:	4b93      	ldr	r3, [pc, #588]	; (800bac8 <__ieee754_exp+0x2f0>)
 800b87a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	ee10 0a10 	vmov	r0, s0
 800b886:	4629      	mov	r1, r5
 800b888:	f7f4 fcca 	bl	8000220 <__aeabi_dsub>
 800b88c:	4b8f      	ldr	r3, [pc, #572]	; (800bacc <__ieee754_exp+0x2f4>)
 800b88e:	00f7      	lsls	r7, r6, #3
 800b890:	443b      	add	r3, r7
 800b892:	ed93 7b00 	vldr	d7, [r3]
 800b896:	f1c6 0a01 	rsb	sl, r6, #1
 800b89a:	4680      	mov	r8, r0
 800b89c:	4689      	mov	r9, r1
 800b89e:	ebaa 0a06 	sub.w	sl, sl, r6
 800b8a2:	eeb0 8a47 	vmov.f32	s16, s14
 800b8a6:	eef0 8a67 	vmov.f32	s17, s15
 800b8aa:	ec53 2b18 	vmov	r2, r3, d8
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	f7f4 fcb5 	bl	8000220 <__aeabi_dsub>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	462b      	mov	r3, r5
 800b8be:	4620      	mov	r0, r4
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	f7f4 fe65 	bl	8000590 <__aeabi_dmul>
 800b8c6:	a36a      	add	r3, pc, #424	; (adr r3, 800ba70 <__ieee754_exp+0x298>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	460f      	mov	r7, r1
 800b8d0:	f7f4 fe5e 	bl	8000590 <__aeabi_dmul>
 800b8d4:	a368      	add	r3, pc, #416	; (adr r3, 800ba78 <__ieee754_exp+0x2a0>)
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f7f4 fca1 	bl	8000220 <__aeabi_dsub>
 800b8de:	4632      	mov	r2, r6
 800b8e0:	463b      	mov	r3, r7
 800b8e2:	f7f4 fe55 	bl	8000590 <__aeabi_dmul>
 800b8e6:	a366      	add	r3, pc, #408	; (adr r3, 800ba80 <__ieee754_exp+0x2a8>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	f7f4 fc9a 	bl	8000224 <__adddf3>
 800b8f0:	4632      	mov	r2, r6
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	f7f4 fe4c 	bl	8000590 <__aeabi_dmul>
 800b8f8:	a363      	add	r3, pc, #396	; (adr r3, 800ba88 <__ieee754_exp+0x2b0>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f7f4 fc8f 	bl	8000220 <__aeabi_dsub>
 800b902:	4632      	mov	r2, r6
 800b904:	463b      	mov	r3, r7
 800b906:	f7f4 fe43 	bl	8000590 <__aeabi_dmul>
 800b90a:	a361      	add	r3, pc, #388	; (adr r3, 800ba90 <__ieee754_exp+0x2b8>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fc88 	bl	8000224 <__adddf3>
 800b914:	4632      	mov	r2, r6
 800b916:	463b      	mov	r3, r7
 800b918:	f7f4 fe3a 	bl	8000590 <__aeabi_dmul>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4620      	mov	r0, r4
 800b922:	4629      	mov	r1, r5
 800b924:	f7f4 fc7c 	bl	8000220 <__aeabi_dsub>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4606      	mov	r6, r0
 800b92e:	460f      	mov	r7, r1
 800b930:	4620      	mov	r0, r4
 800b932:	4629      	mov	r1, r5
 800b934:	f7f4 fe2c 	bl	8000590 <__aeabi_dmul>
 800b938:	ec41 0b19 	vmov	d9, r0, r1
 800b93c:	f1ba 0f00 	cmp.w	sl, #0
 800b940:	d15d      	bne.n	800b9fe <__ieee754_exp+0x226>
 800b942:	2200      	movs	r2, #0
 800b944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b948:	4630      	mov	r0, r6
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f4 fc68 	bl	8000220 <__aeabi_dsub>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	ec51 0b19 	vmov	r0, r1, d9
 800b958:	f7f4 ff44 	bl	80007e4 <__aeabi_ddiv>
 800b95c:	4622      	mov	r2, r4
 800b95e:	462b      	mov	r3, r5
 800b960:	f7f4 fc5e 	bl	8000220 <__aeabi_dsub>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	2000      	movs	r0, #0
 800b96a:	4959      	ldr	r1, [pc, #356]	; (800bad0 <__ieee754_exp+0x2f8>)
 800b96c:	f7f4 fc58 	bl	8000220 <__aeabi_dsub>
 800b970:	e74d      	b.n	800b80e <__ieee754_exp+0x36>
 800b972:	4b58      	ldr	r3, [pc, #352]	; (800bad4 <__ieee754_exp+0x2fc>)
 800b974:	4620      	mov	r0, r4
 800b976:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b97a:	4629      	mov	r1, r5
 800b97c:	a346      	add	r3, pc, #280	; (adr r3, 800ba98 <__ieee754_exp+0x2c0>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fe05 	bl	8000590 <__aeabi_dmul>
 800b986:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b98a:	f7f4 fc4b 	bl	8000224 <__adddf3>
 800b98e:	f7f5 f8af 	bl	8000af0 <__aeabi_d2iz>
 800b992:	4682      	mov	sl, r0
 800b994:	f7f4 fd92 	bl	80004bc <__aeabi_i2d>
 800b998:	a341      	add	r3, pc, #260	; (adr r3, 800baa0 <__ieee754_exp+0x2c8>)
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	4606      	mov	r6, r0
 800b9a0:	460f      	mov	r7, r1
 800b9a2:	f7f4 fdf5 	bl	8000590 <__aeabi_dmul>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7f4 fc37 	bl	8000220 <__aeabi_dsub>
 800b9b2:	a33d      	add	r3, pc, #244	; (adr r3, 800baa8 <__ieee754_exp+0x2d0>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4639      	mov	r1, r7
 800b9c0:	f7f4 fde6 	bl	8000590 <__aeabi_dmul>
 800b9c4:	ec41 0b18 	vmov	d8, r0, r1
 800b9c8:	e76f      	b.n	800b8aa <__ieee754_exp+0xd2>
 800b9ca:	4b43      	ldr	r3, [pc, #268]	; (800bad8 <__ieee754_exp+0x300>)
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d811      	bhi.n	800b9f4 <__ieee754_exp+0x21c>
 800b9d0:	a337      	add	r3, pc, #220	; (adr r3, 800bab0 <__ieee754_exp+0x2d8>)
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	ee10 0a10 	vmov	r0, s0
 800b9da:	4629      	mov	r1, r5
 800b9dc:	f7f4 fc22 	bl	8000224 <__adddf3>
 800b9e0:	4b3b      	ldr	r3, [pc, #236]	; (800bad0 <__ieee754_exp+0x2f8>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f7f5 f864 	bl	8000ab0 <__aeabi_dcmpgt>
 800b9e8:	b138      	cbz	r0, 800b9fa <__ieee754_exp+0x222>
 800b9ea:	4b39      	ldr	r3, [pc, #228]	; (800bad0 <__ieee754_exp+0x2f8>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	e70a      	b.n	800b80a <__ieee754_exp+0x32>
 800b9f4:	f04f 0a00 	mov.w	sl, #0
 800b9f8:	e75f      	b.n	800b8ba <__ieee754_exp+0xe2>
 800b9fa:	4682      	mov	sl, r0
 800b9fc:	e75d      	b.n	800b8ba <__ieee754_exp+0xe2>
 800b9fe:	4632      	mov	r2, r6
 800ba00:	463b      	mov	r3, r7
 800ba02:	2000      	movs	r0, #0
 800ba04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ba08:	f7f4 fc0a 	bl	8000220 <__aeabi_dsub>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	ec51 0b19 	vmov	r0, r1, d9
 800ba14:	f7f4 fee6 	bl	80007e4 <__aeabi_ddiv>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	ec51 0b18 	vmov	r0, r1, d8
 800ba20:	f7f4 fbfe 	bl	8000220 <__aeabi_dsub>
 800ba24:	4642      	mov	r2, r8
 800ba26:	464b      	mov	r3, r9
 800ba28:	f7f4 fbfa 	bl	8000220 <__aeabi_dsub>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	2000      	movs	r0, #0
 800ba32:	4927      	ldr	r1, [pc, #156]	; (800bad0 <__ieee754_exp+0x2f8>)
 800ba34:	f7f4 fbf4 	bl	8000220 <__aeabi_dsub>
 800ba38:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800ba3c:	4592      	cmp	sl, r2
 800ba3e:	db02      	blt.n	800ba46 <__ieee754_exp+0x26e>
 800ba40:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ba44:	e6e3      	b.n	800b80e <__ieee754_exp+0x36>
 800ba46:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ba4a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ba54:	f7f4 fd9c 	bl	8000590 <__aeabi_dmul>
 800ba58:	e6d9      	b.n	800b80e <__ieee754_exp+0x36>
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
 800ba60:	fefa39ef 	.word	0xfefa39ef
 800ba64:	40862e42 	.word	0x40862e42
 800ba68:	d52d3051 	.word	0xd52d3051
 800ba6c:	c0874910 	.word	0xc0874910
 800ba70:	72bea4d0 	.word	0x72bea4d0
 800ba74:	3e663769 	.word	0x3e663769
 800ba78:	c5d26bf1 	.word	0xc5d26bf1
 800ba7c:	3ebbbd41 	.word	0x3ebbbd41
 800ba80:	af25de2c 	.word	0xaf25de2c
 800ba84:	3f11566a 	.word	0x3f11566a
 800ba88:	16bebd93 	.word	0x16bebd93
 800ba8c:	3f66c16c 	.word	0x3f66c16c
 800ba90:	5555553e 	.word	0x5555553e
 800ba94:	3fc55555 	.word	0x3fc55555
 800ba98:	652b82fe 	.word	0x652b82fe
 800ba9c:	3ff71547 	.word	0x3ff71547
 800baa0:	fee00000 	.word	0xfee00000
 800baa4:	3fe62e42 	.word	0x3fe62e42
 800baa8:	35793c76 	.word	0x35793c76
 800baac:	3dea39ef 	.word	0x3dea39ef
 800bab0:	8800759c 	.word	0x8800759c
 800bab4:	7e37e43c 	.word	0x7e37e43c
 800bab8:	40862e41 	.word	0x40862e41
 800babc:	7fefffff 	.word	0x7fefffff
 800bac0:	3fd62e42 	.word	0x3fd62e42
 800bac4:	3ff0a2b1 	.word	0x3ff0a2b1
 800bac8:	0801f6c8 	.word	0x0801f6c8
 800bacc:	0801f6d8 	.word	0x0801f6d8
 800bad0:	3ff00000 	.word	0x3ff00000
 800bad4:	0801f6b8 	.word	0x0801f6b8
 800bad8:	3defffff 	.word	0x3defffff
 800badc:	00000000 	.word	0x00000000

0800bae0 <__ieee754_pow>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	ed2d 8b06 	vpush	{d8-d10}
 800bae8:	b089      	sub	sp, #36	; 0x24
 800baea:	ed8d 1b00 	vstr	d1, [sp]
 800baee:	e9dd 2900 	ldrd	r2, r9, [sp]
 800baf2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800baf6:	ea58 0102 	orrs.w	r1, r8, r2
 800bafa:	ec57 6b10 	vmov	r6, r7, d0
 800bafe:	d115      	bne.n	800bb2c <__ieee754_pow+0x4c>
 800bb00:	19b3      	adds	r3, r6, r6
 800bb02:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bb06:	4152      	adcs	r2, r2
 800bb08:	4299      	cmp	r1, r3
 800bb0a:	4b89      	ldr	r3, [pc, #548]	; (800bd30 <__ieee754_pow+0x250>)
 800bb0c:	4193      	sbcs	r3, r2
 800bb0e:	f080 84d1 	bcs.w	800c4b4 <__ieee754_pow+0x9d4>
 800bb12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 fb83 	bl	8000224 <__adddf3>
 800bb1e:	ec41 0b10 	vmov	d0, r0, r1
 800bb22:	b009      	add	sp, #36	; 0x24
 800bb24:	ecbd 8b06 	vpop	{d8-d10}
 800bb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2c:	4b81      	ldr	r3, [pc, #516]	; (800bd34 <__ieee754_pow+0x254>)
 800bb2e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bb32:	429c      	cmp	r4, r3
 800bb34:	ee10 aa10 	vmov	sl, s0
 800bb38:	463d      	mov	r5, r7
 800bb3a:	dc06      	bgt.n	800bb4a <__ieee754_pow+0x6a>
 800bb3c:	d101      	bne.n	800bb42 <__ieee754_pow+0x62>
 800bb3e:	2e00      	cmp	r6, #0
 800bb40:	d1e7      	bne.n	800bb12 <__ieee754_pow+0x32>
 800bb42:	4598      	cmp	r8, r3
 800bb44:	dc01      	bgt.n	800bb4a <__ieee754_pow+0x6a>
 800bb46:	d10f      	bne.n	800bb68 <__ieee754_pow+0x88>
 800bb48:	b172      	cbz	r2, 800bb68 <__ieee754_pow+0x88>
 800bb4a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bb4e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bb52:	ea55 050a 	orrs.w	r5, r5, sl
 800bb56:	d1dc      	bne.n	800bb12 <__ieee754_pow+0x32>
 800bb58:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb5c:	18db      	adds	r3, r3, r3
 800bb5e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bb62:	4152      	adcs	r2, r2
 800bb64:	429d      	cmp	r5, r3
 800bb66:	e7d0      	b.n	800bb0a <__ieee754_pow+0x2a>
 800bb68:	2d00      	cmp	r5, #0
 800bb6a:	da3b      	bge.n	800bbe4 <__ieee754_pow+0x104>
 800bb6c:	4b72      	ldr	r3, [pc, #456]	; (800bd38 <__ieee754_pow+0x258>)
 800bb6e:	4598      	cmp	r8, r3
 800bb70:	dc51      	bgt.n	800bc16 <__ieee754_pow+0x136>
 800bb72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bb76:	4598      	cmp	r8, r3
 800bb78:	f340 84ab 	ble.w	800c4d2 <__ieee754_pow+0x9f2>
 800bb7c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb84:	2b14      	cmp	r3, #20
 800bb86:	dd0f      	ble.n	800bba8 <__ieee754_pow+0xc8>
 800bb88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bb8c:	fa22 f103 	lsr.w	r1, r2, r3
 800bb90:	fa01 f303 	lsl.w	r3, r1, r3
 800bb94:	4293      	cmp	r3, r2
 800bb96:	f040 849c 	bne.w	800c4d2 <__ieee754_pow+0x9f2>
 800bb9a:	f001 0101 	and.w	r1, r1, #1
 800bb9e:	f1c1 0302 	rsb	r3, r1, #2
 800bba2:	9304      	str	r3, [sp, #16]
 800bba4:	b182      	cbz	r2, 800bbc8 <__ieee754_pow+0xe8>
 800bba6:	e05f      	b.n	800bc68 <__ieee754_pow+0x188>
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	d15b      	bne.n	800bc64 <__ieee754_pow+0x184>
 800bbac:	f1c3 0314 	rsb	r3, r3, #20
 800bbb0:	fa48 f103 	asr.w	r1, r8, r3
 800bbb4:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb8:	4543      	cmp	r3, r8
 800bbba:	f040 8487 	bne.w	800c4cc <__ieee754_pow+0x9ec>
 800bbbe:	f001 0101 	and.w	r1, r1, #1
 800bbc2:	f1c1 0302 	rsb	r3, r1, #2
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	4b5c      	ldr	r3, [pc, #368]	; (800bd3c <__ieee754_pow+0x25c>)
 800bbca:	4598      	cmp	r8, r3
 800bbcc:	d132      	bne.n	800bc34 <__ieee754_pow+0x154>
 800bbce:	f1b9 0f00 	cmp.w	r9, #0
 800bbd2:	f280 8477 	bge.w	800c4c4 <__ieee754_pow+0x9e4>
 800bbd6:	4959      	ldr	r1, [pc, #356]	; (800bd3c <__ieee754_pow+0x25c>)
 800bbd8:	4632      	mov	r2, r6
 800bbda:	463b      	mov	r3, r7
 800bbdc:	2000      	movs	r0, #0
 800bbde:	f7f4 fe01 	bl	80007e4 <__aeabi_ddiv>
 800bbe2:	e79c      	b.n	800bb1e <__ieee754_pow+0x3e>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	9304      	str	r3, [sp, #16]
 800bbe8:	2a00      	cmp	r2, #0
 800bbea:	d13d      	bne.n	800bc68 <__ieee754_pow+0x188>
 800bbec:	4b51      	ldr	r3, [pc, #324]	; (800bd34 <__ieee754_pow+0x254>)
 800bbee:	4598      	cmp	r8, r3
 800bbf0:	d1ea      	bne.n	800bbc8 <__ieee754_pow+0xe8>
 800bbf2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bbf6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bbfa:	ea53 030a 	orrs.w	r3, r3, sl
 800bbfe:	f000 8459 	beq.w	800c4b4 <__ieee754_pow+0x9d4>
 800bc02:	4b4f      	ldr	r3, [pc, #316]	; (800bd40 <__ieee754_pow+0x260>)
 800bc04:	429c      	cmp	r4, r3
 800bc06:	dd08      	ble.n	800bc1a <__ieee754_pow+0x13a>
 800bc08:	f1b9 0f00 	cmp.w	r9, #0
 800bc0c:	f2c0 8456 	blt.w	800c4bc <__ieee754_pow+0x9dc>
 800bc10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc14:	e783      	b.n	800bb1e <__ieee754_pow+0x3e>
 800bc16:	2302      	movs	r3, #2
 800bc18:	e7e5      	b.n	800bbe6 <__ieee754_pow+0x106>
 800bc1a:	f1b9 0f00 	cmp.w	r9, #0
 800bc1e:	f04f 0000 	mov.w	r0, #0
 800bc22:	f04f 0100 	mov.w	r1, #0
 800bc26:	f6bf af7a 	bge.w	800bb1e <__ieee754_pow+0x3e>
 800bc2a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bc2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc32:	e774      	b.n	800bb1e <__ieee754_pow+0x3e>
 800bc34:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bc38:	d106      	bne.n	800bc48 <__ieee754_pow+0x168>
 800bc3a:	4632      	mov	r2, r6
 800bc3c:	463b      	mov	r3, r7
 800bc3e:	4630      	mov	r0, r6
 800bc40:	4639      	mov	r1, r7
 800bc42:	f7f4 fca5 	bl	8000590 <__aeabi_dmul>
 800bc46:	e76a      	b.n	800bb1e <__ieee754_pow+0x3e>
 800bc48:	4b3e      	ldr	r3, [pc, #248]	; (800bd44 <__ieee754_pow+0x264>)
 800bc4a:	4599      	cmp	r9, r3
 800bc4c:	d10c      	bne.n	800bc68 <__ieee754_pow+0x188>
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	db0a      	blt.n	800bc68 <__ieee754_pow+0x188>
 800bc52:	ec47 6b10 	vmov	d0, r6, r7
 800bc56:	b009      	add	sp, #36	; 0x24
 800bc58:	ecbd 8b06 	vpop	{d8-d10}
 800bc5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	f7ff bcdc 	b.w	800b61c <__ieee754_sqrt>
 800bc64:	2300      	movs	r3, #0
 800bc66:	9304      	str	r3, [sp, #16]
 800bc68:	ec47 6b10 	vmov	d0, r6, r7
 800bc6c:	f000 fc62 	bl	800c534 <fabs>
 800bc70:	ec51 0b10 	vmov	r0, r1, d0
 800bc74:	f1ba 0f00 	cmp.w	sl, #0
 800bc78:	d129      	bne.n	800bcce <__ieee754_pow+0x1ee>
 800bc7a:	b124      	cbz	r4, 800bc86 <__ieee754_pow+0x1a6>
 800bc7c:	4b2f      	ldr	r3, [pc, #188]	; (800bd3c <__ieee754_pow+0x25c>)
 800bc7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d123      	bne.n	800bcce <__ieee754_pow+0x1ee>
 800bc86:	f1b9 0f00 	cmp.w	r9, #0
 800bc8a:	da05      	bge.n	800bc98 <__ieee754_pow+0x1b8>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	2000      	movs	r0, #0
 800bc92:	492a      	ldr	r1, [pc, #168]	; (800bd3c <__ieee754_pow+0x25c>)
 800bc94:	f7f4 fda6 	bl	80007e4 <__aeabi_ddiv>
 800bc98:	2d00      	cmp	r5, #0
 800bc9a:	f6bf af40 	bge.w	800bb1e <__ieee754_pow+0x3e>
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bca4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bca8:	431c      	orrs	r4, r3
 800bcaa:	d108      	bne.n	800bcbe <__ieee754_pow+0x1de>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	f7f4 fab4 	bl	8000220 <__aeabi_dsub>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	e78f      	b.n	800bbde <__ieee754_pow+0xfe>
 800bcbe:	9b04      	ldr	r3, [sp, #16]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	f47f af2c 	bne.w	800bb1e <__ieee754_pow+0x3e>
 800bcc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcca:	4619      	mov	r1, r3
 800bccc:	e727      	b.n	800bb1e <__ieee754_pow+0x3e>
 800bcce:	0feb      	lsrs	r3, r5, #31
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	9306      	str	r3, [sp, #24]
 800bcd4:	9a06      	ldr	r2, [sp, #24]
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	d102      	bne.n	800bce2 <__ieee754_pow+0x202>
 800bcdc:	4632      	mov	r2, r6
 800bcde:	463b      	mov	r3, r7
 800bce0:	e7e6      	b.n	800bcb0 <__ieee754_pow+0x1d0>
 800bce2:	4b19      	ldr	r3, [pc, #100]	; (800bd48 <__ieee754_pow+0x268>)
 800bce4:	4598      	cmp	r8, r3
 800bce6:	f340 80fb 	ble.w	800bee0 <__ieee754_pow+0x400>
 800bcea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bcee:	4598      	cmp	r8, r3
 800bcf0:	4b13      	ldr	r3, [pc, #76]	; (800bd40 <__ieee754_pow+0x260>)
 800bcf2:	dd0c      	ble.n	800bd0e <__ieee754_pow+0x22e>
 800bcf4:	429c      	cmp	r4, r3
 800bcf6:	dc0f      	bgt.n	800bd18 <__ieee754_pow+0x238>
 800bcf8:	f1b9 0f00 	cmp.w	r9, #0
 800bcfc:	da0f      	bge.n	800bd1e <__ieee754_pow+0x23e>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	b009      	add	sp, #36	; 0x24
 800bd02:	ecbd 8b06 	vpop	{d8-d10}
 800bd06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	f000 bcc2 	b.w	800c692 <__math_oflow>
 800bd0e:	429c      	cmp	r4, r3
 800bd10:	dbf2      	blt.n	800bcf8 <__ieee754_pow+0x218>
 800bd12:	4b0a      	ldr	r3, [pc, #40]	; (800bd3c <__ieee754_pow+0x25c>)
 800bd14:	429c      	cmp	r4, r3
 800bd16:	dd19      	ble.n	800bd4c <__ieee754_pow+0x26c>
 800bd18:	f1b9 0f00 	cmp.w	r9, #0
 800bd1c:	dcef      	bgt.n	800bcfe <__ieee754_pow+0x21e>
 800bd1e:	2000      	movs	r0, #0
 800bd20:	b009      	add	sp, #36	; 0x24
 800bd22:	ecbd 8b06 	vpop	{d8-d10}
 800bd26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2a:	f000 bca9 	b.w	800c680 <__math_uflow>
 800bd2e:	bf00      	nop
 800bd30:	fff00000 	.word	0xfff00000
 800bd34:	7ff00000 	.word	0x7ff00000
 800bd38:	433fffff 	.word	0x433fffff
 800bd3c:	3ff00000 	.word	0x3ff00000
 800bd40:	3fefffff 	.word	0x3fefffff
 800bd44:	3fe00000 	.word	0x3fe00000
 800bd48:	41e00000 	.word	0x41e00000
 800bd4c:	4b60      	ldr	r3, [pc, #384]	; (800bed0 <__ieee754_pow+0x3f0>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f7f4 fa66 	bl	8000220 <__aeabi_dsub>
 800bd54:	a354      	add	r3, pc, #336	; (adr r3, 800bea8 <__ieee754_pow+0x3c8>)
 800bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	f7f4 fc17 	bl	8000590 <__aeabi_dmul>
 800bd62:	a353      	add	r3, pc, #332	; (adr r3, 800beb0 <__ieee754_pow+0x3d0>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	4606      	mov	r6, r0
 800bd6a:	460f      	mov	r7, r1
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	4629      	mov	r1, r5
 800bd70:	f7f4 fc0e 	bl	8000590 <__aeabi_dmul>
 800bd74:	4b57      	ldr	r3, [pc, #348]	; (800bed4 <__ieee754_pow+0x3f4>)
 800bd76:	4682      	mov	sl, r0
 800bd78:	468b      	mov	fp, r1
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f7f4 fc06 	bl	8000590 <__aeabi_dmul>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	a14b      	add	r1, pc, #300	; (adr r1, 800beb8 <__ieee754_pow+0x3d8>)
 800bd8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8e:	f7f4 fa47 	bl	8000220 <__aeabi_dsub>
 800bd92:	4622      	mov	r2, r4
 800bd94:	462b      	mov	r3, r5
 800bd96:	f7f4 fbfb 	bl	8000590 <__aeabi_dmul>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	2000      	movs	r0, #0
 800bda0:	494d      	ldr	r1, [pc, #308]	; (800bed8 <__ieee754_pow+0x3f8>)
 800bda2:	f7f4 fa3d 	bl	8000220 <__aeabi_dsub>
 800bda6:	4622      	mov	r2, r4
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4689      	mov	r9, r1
 800bdac:	462b      	mov	r3, r5
 800bdae:	4620      	mov	r0, r4
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	f7f4 fbed 	bl	8000590 <__aeabi_dmul>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4640      	mov	r0, r8
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	f7f4 fbe7 	bl	8000590 <__aeabi_dmul>
 800bdc2:	a33f      	add	r3, pc, #252	; (adr r3, 800bec0 <__ieee754_pow+0x3e0>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fbe2 	bl	8000590 <__aeabi_dmul>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4650      	mov	r0, sl
 800bdd2:	4659      	mov	r1, fp
 800bdd4:	f7f4 fa24 	bl	8000220 <__aeabi_dsub>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4680      	mov	r8, r0
 800bdde:	4689      	mov	r9, r1
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f4 fa1e 	bl	8000224 <__adddf3>
 800bde8:	2000      	movs	r0, #0
 800bdea:	4632      	mov	r2, r6
 800bdec:	463b      	mov	r3, r7
 800bdee:	4604      	mov	r4, r0
 800bdf0:	460d      	mov	r5, r1
 800bdf2:	f7f4 fa15 	bl	8000220 <__aeabi_dsub>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	f7f4 fa0f 	bl	8000220 <__aeabi_dsub>
 800be02:	9b04      	ldr	r3, [sp, #16]
 800be04:	9a06      	ldr	r2, [sp, #24]
 800be06:	3b01      	subs	r3, #1
 800be08:	4313      	orrs	r3, r2
 800be0a:	4682      	mov	sl, r0
 800be0c:	468b      	mov	fp, r1
 800be0e:	f040 81e7 	bne.w	800c1e0 <__ieee754_pow+0x700>
 800be12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bec8 <__ieee754_pow+0x3e8>
 800be16:	eeb0 8a47 	vmov.f32	s16, s14
 800be1a:	eef0 8a67 	vmov.f32	s17, s15
 800be1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be22:	2600      	movs	r6, #0
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be2c:	f7f4 f9f8 	bl	8000220 <__aeabi_dsub>
 800be30:	4622      	mov	r2, r4
 800be32:	462b      	mov	r3, r5
 800be34:	f7f4 fbac 	bl	8000590 <__aeabi_dmul>
 800be38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be3c:	4680      	mov	r8, r0
 800be3e:	4689      	mov	r9, r1
 800be40:	4650      	mov	r0, sl
 800be42:	4659      	mov	r1, fp
 800be44:	f7f4 fba4 	bl	8000590 <__aeabi_dmul>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4640      	mov	r0, r8
 800be4e:	4649      	mov	r1, r9
 800be50:	f7f4 f9e8 	bl	8000224 <__adddf3>
 800be54:	4632      	mov	r2, r6
 800be56:	463b      	mov	r3, r7
 800be58:	4680      	mov	r8, r0
 800be5a:	4689      	mov	r9, r1
 800be5c:	4620      	mov	r0, r4
 800be5e:	4629      	mov	r1, r5
 800be60:	f7f4 fb96 	bl	8000590 <__aeabi_dmul>
 800be64:	460b      	mov	r3, r1
 800be66:	4604      	mov	r4, r0
 800be68:	460d      	mov	r5, r1
 800be6a:	4602      	mov	r2, r0
 800be6c:	4649      	mov	r1, r9
 800be6e:	4640      	mov	r0, r8
 800be70:	f7f4 f9d8 	bl	8000224 <__adddf3>
 800be74:	4b19      	ldr	r3, [pc, #100]	; (800bedc <__ieee754_pow+0x3fc>)
 800be76:	4299      	cmp	r1, r3
 800be78:	ec45 4b19 	vmov	d9, r4, r5
 800be7c:	4606      	mov	r6, r0
 800be7e:	460f      	mov	r7, r1
 800be80:	468b      	mov	fp, r1
 800be82:	f340 82f0 	ble.w	800c466 <__ieee754_pow+0x986>
 800be86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800be8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800be8e:	4303      	orrs	r3, r0
 800be90:	f000 81e4 	beq.w	800c25c <__ieee754_pow+0x77c>
 800be94:	ec51 0b18 	vmov	r0, r1, d8
 800be98:	2200      	movs	r2, #0
 800be9a:	2300      	movs	r3, #0
 800be9c:	f7f4 fdea 	bl	8000a74 <__aeabi_dcmplt>
 800bea0:	3800      	subs	r0, #0
 800bea2:	bf18      	it	ne
 800bea4:	2001      	movne	r0, #1
 800bea6:	e72b      	b.n	800bd00 <__ieee754_pow+0x220>
 800bea8:	60000000 	.word	0x60000000
 800beac:	3ff71547 	.word	0x3ff71547
 800beb0:	f85ddf44 	.word	0xf85ddf44
 800beb4:	3e54ae0b 	.word	0x3e54ae0b
 800beb8:	55555555 	.word	0x55555555
 800bebc:	3fd55555 	.word	0x3fd55555
 800bec0:	652b82fe 	.word	0x652b82fe
 800bec4:	3ff71547 	.word	0x3ff71547
 800bec8:	00000000 	.word	0x00000000
 800becc:	bff00000 	.word	0xbff00000
 800bed0:	3ff00000 	.word	0x3ff00000
 800bed4:	3fd00000 	.word	0x3fd00000
 800bed8:	3fe00000 	.word	0x3fe00000
 800bedc:	408fffff 	.word	0x408fffff
 800bee0:	4bd5      	ldr	r3, [pc, #852]	; (800c238 <__ieee754_pow+0x758>)
 800bee2:	402b      	ands	r3, r5
 800bee4:	2200      	movs	r2, #0
 800bee6:	b92b      	cbnz	r3, 800bef4 <__ieee754_pow+0x414>
 800bee8:	4bd4      	ldr	r3, [pc, #848]	; (800c23c <__ieee754_pow+0x75c>)
 800beea:	f7f4 fb51 	bl	8000590 <__aeabi_dmul>
 800beee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bef2:	460c      	mov	r4, r1
 800bef4:	1523      	asrs	r3, r4, #20
 800bef6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800befa:	4413      	add	r3, r2
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	4bd0      	ldr	r3, [pc, #832]	; (800c240 <__ieee754_pow+0x760>)
 800bf00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bf04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bf08:	429c      	cmp	r4, r3
 800bf0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bf0e:	dd08      	ble.n	800bf22 <__ieee754_pow+0x442>
 800bf10:	4bcc      	ldr	r3, [pc, #816]	; (800c244 <__ieee754_pow+0x764>)
 800bf12:	429c      	cmp	r4, r3
 800bf14:	f340 8162 	ble.w	800c1dc <__ieee754_pow+0x6fc>
 800bf18:	9b05      	ldr	r3, [sp, #20]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	9305      	str	r3, [sp, #20]
 800bf1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bf22:	2400      	movs	r4, #0
 800bf24:	00e3      	lsls	r3, r4, #3
 800bf26:	9307      	str	r3, [sp, #28]
 800bf28:	4bc7      	ldr	r3, [pc, #796]	; (800c248 <__ieee754_pow+0x768>)
 800bf2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf2e:	ed93 7b00 	vldr	d7, [r3]
 800bf32:	4629      	mov	r1, r5
 800bf34:	ec53 2b17 	vmov	r2, r3, d7
 800bf38:	eeb0 9a47 	vmov.f32	s18, s14
 800bf3c:	eef0 9a67 	vmov.f32	s19, s15
 800bf40:	4682      	mov	sl, r0
 800bf42:	f7f4 f96d 	bl	8000220 <__aeabi_dsub>
 800bf46:	4652      	mov	r2, sl
 800bf48:	4606      	mov	r6, r0
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	462b      	mov	r3, r5
 800bf4e:	ec51 0b19 	vmov	r0, r1, d9
 800bf52:	f7f4 f967 	bl	8000224 <__adddf3>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	49bb      	ldr	r1, [pc, #748]	; (800c24c <__ieee754_pow+0x76c>)
 800bf5e:	f7f4 fc41 	bl	80007e4 <__aeabi_ddiv>
 800bf62:	ec41 0b1a 	vmov	d10, r0, r1
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	f7f4 fb0f 	bl	8000590 <__aeabi_dmul>
 800bf72:	2300      	movs	r3, #0
 800bf74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf78:	9302      	str	r3, [sp, #8]
 800bf7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf7e:	46ab      	mov	fp, r5
 800bf80:	106d      	asrs	r5, r5, #1
 800bf82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bf86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bf8a:	ec41 0b18 	vmov	d8, r0, r1
 800bf8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bf92:	2200      	movs	r2, #0
 800bf94:	4640      	mov	r0, r8
 800bf96:	4649      	mov	r1, r9
 800bf98:	4614      	mov	r4, r2
 800bf9a:	461d      	mov	r5, r3
 800bf9c:	f7f4 faf8 	bl	8000590 <__aeabi_dmul>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	4639      	mov	r1, r7
 800bfa8:	f7f4 f93a 	bl	8000220 <__aeabi_dsub>
 800bfac:	ec53 2b19 	vmov	r2, r3, d9
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	460f      	mov	r7, r1
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 f932 	bl	8000220 <__aeabi_dsub>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4650      	mov	r0, sl
 800bfc2:	4659      	mov	r1, fp
 800bfc4:	f7f4 f92c 	bl	8000220 <__aeabi_dsub>
 800bfc8:	4642      	mov	r2, r8
 800bfca:	464b      	mov	r3, r9
 800bfcc:	f7f4 fae0 	bl	8000590 <__aeabi_dmul>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f7f4 f922 	bl	8000220 <__aeabi_dsub>
 800bfdc:	ec53 2b1a 	vmov	r2, r3, d10
 800bfe0:	f7f4 fad6 	bl	8000590 <__aeabi_dmul>
 800bfe4:	ec53 2b18 	vmov	r2, r3, d8
 800bfe8:	ec41 0b19 	vmov	d9, r0, r1
 800bfec:	ec51 0b18 	vmov	r0, r1, d8
 800bff0:	f7f4 face 	bl	8000590 <__aeabi_dmul>
 800bff4:	a37c      	add	r3, pc, #496	; (adr r3, 800c1e8 <__ieee754_pow+0x708>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	4604      	mov	r4, r0
 800bffc:	460d      	mov	r5, r1
 800bffe:	f7f4 fac7 	bl	8000590 <__aeabi_dmul>
 800c002:	a37b      	add	r3, pc, #492	; (adr r3, 800c1f0 <__ieee754_pow+0x710>)
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	f7f4 f90c 	bl	8000224 <__adddf3>
 800c00c:	4622      	mov	r2, r4
 800c00e:	462b      	mov	r3, r5
 800c010:	f7f4 fabe 	bl	8000590 <__aeabi_dmul>
 800c014:	a378      	add	r3, pc, #480	; (adr r3, 800c1f8 <__ieee754_pow+0x718>)
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	f7f4 f903 	bl	8000224 <__adddf3>
 800c01e:	4622      	mov	r2, r4
 800c020:	462b      	mov	r3, r5
 800c022:	f7f4 fab5 	bl	8000590 <__aeabi_dmul>
 800c026:	a376      	add	r3, pc, #472	; (adr r3, 800c200 <__ieee754_pow+0x720>)
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	f7f4 f8fa 	bl	8000224 <__adddf3>
 800c030:	4622      	mov	r2, r4
 800c032:	462b      	mov	r3, r5
 800c034:	f7f4 faac 	bl	8000590 <__aeabi_dmul>
 800c038:	a373      	add	r3, pc, #460	; (adr r3, 800c208 <__ieee754_pow+0x728>)
 800c03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03e:	f7f4 f8f1 	bl	8000224 <__adddf3>
 800c042:	4622      	mov	r2, r4
 800c044:	462b      	mov	r3, r5
 800c046:	f7f4 faa3 	bl	8000590 <__aeabi_dmul>
 800c04a:	a371      	add	r3, pc, #452	; (adr r3, 800c210 <__ieee754_pow+0x730>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f7f4 f8e8 	bl	8000224 <__adddf3>
 800c054:	4622      	mov	r2, r4
 800c056:	4606      	mov	r6, r0
 800c058:	460f      	mov	r7, r1
 800c05a:	462b      	mov	r3, r5
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f7f4 fa96 	bl	8000590 <__aeabi_dmul>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4630      	mov	r0, r6
 800c06a:	4639      	mov	r1, r7
 800c06c:	f7f4 fa90 	bl	8000590 <__aeabi_dmul>
 800c070:	4642      	mov	r2, r8
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	464b      	mov	r3, r9
 800c078:	ec51 0b18 	vmov	r0, r1, d8
 800c07c:	f7f4 f8d2 	bl	8000224 <__adddf3>
 800c080:	ec53 2b19 	vmov	r2, r3, d9
 800c084:	f7f4 fa84 	bl	8000590 <__aeabi_dmul>
 800c088:	4622      	mov	r2, r4
 800c08a:	462b      	mov	r3, r5
 800c08c:	f7f4 f8ca 	bl	8000224 <__adddf3>
 800c090:	4642      	mov	r2, r8
 800c092:	4682      	mov	sl, r0
 800c094:	468b      	mov	fp, r1
 800c096:	464b      	mov	r3, r9
 800c098:	4640      	mov	r0, r8
 800c09a:	4649      	mov	r1, r9
 800c09c:	f7f4 fa78 	bl	8000590 <__aeabi_dmul>
 800c0a0:	4b6b      	ldr	r3, [pc, #428]	; (800c250 <__ieee754_pow+0x770>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	f7f4 f8bc 	bl	8000224 <__adddf3>
 800c0ac:	4652      	mov	r2, sl
 800c0ae:	465b      	mov	r3, fp
 800c0b0:	f7f4 f8b8 	bl	8000224 <__adddf3>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	460d      	mov	r5, r1
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4640      	mov	r0, r8
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	f7f4 fa65 	bl	8000590 <__aeabi_dmul>
 800c0c6:	4b62      	ldr	r3, [pc, #392]	; (800c250 <__ieee754_pow+0x770>)
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	4689      	mov	r9, r1
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f7f4 f8a5 	bl	8000220 <__aeabi_dsub>
 800c0d6:	4632      	mov	r2, r6
 800c0d8:	463b      	mov	r3, r7
 800c0da:	f7f4 f8a1 	bl	8000220 <__aeabi_dsub>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	4659      	mov	r1, fp
 800c0e6:	f7f4 f89b 	bl	8000220 <__aeabi_dsub>
 800c0ea:	ec53 2b18 	vmov	r2, r3, d8
 800c0ee:	f7f4 fa4f 	bl	8000590 <__aeabi_dmul>
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	ec51 0b19 	vmov	r0, r1, d9
 800c0fe:	f7f4 fa47 	bl	8000590 <__aeabi_dmul>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4630      	mov	r0, r6
 800c108:	4639      	mov	r1, r7
 800c10a:	f7f4 f88b 	bl	8000224 <__adddf3>
 800c10e:	4606      	mov	r6, r0
 800c110:	460f      	mov	r7, r1
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4640      	mov	r0, r8
 800c118:	4649      	mov	r1, r9
 800c11a:	f7f4 f883 	bl	8000224 <__adddf3>
 800c11e:	a33e      	add	r3, pc, #248	; (adr r3, 800c218 <__ieee754_pow+0x738>)
 800c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c124:	2000      	movs	r0, #0
 800c126:	4604      	mov	r4, r0
 800c128:	460d      	mov	r5, r1
 800c12a:	f7f4 fa31 	bl	8000590 <__aeabi_dmul>
 800c12e:	4642      	mov	r2, r8
 800c130:	ec41 0b18 	vmov	d8, r0, r1
 800c134:	464b      	mov	r3, r9
 800c136:	4620      	mov	r0, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	f7f4 f871 	bl	8000220 <__aeabi_dsub>
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4630      	mov	r0, r6
 800c144:	4639      	mov	r1, r7
 800c146:	f7f4 f86b 	bl	8000220 <__aeabi_dsub>
 800c14a:	a335      	add	r3, pc, #212	; (adr r3, 800c220 <__ieee754_pow+0x740>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	f7f4 fa1e 	bl	8000590 <__aeabi_dmul>
 800c154:	a334      	add	r3, pc, #208	; (adr r3, 800c228 <__ieee754_pow+0x748>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	4606      	mov	r6, r0
 800c15c:	460f      	mov	r7, r1
 800c15e:	4620      	mov	r0, r4
 800c160:	4629      	mov	r1, r5
 800c162:	f7f4 fa15 	bl	8000590 <__aeabi_dmul>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4630      	mov	r0, r6
 800c16c:	4639      	mov	r1, r7
 800c16e:	f7f4 f859 	bl	8000224 <__adddf3>
 800c172:	9a07      	ldr	r2, [sp, #28]
 800c174:	4b37      	ldr	r3, [pc, #220]	; (800c254 <__ieee754_pow+0x774>)
 800c176:	4413      	add	r3, r2
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	f7f4 f852 	bl	8000224 <__adddf3>
 800c180:	4682      	mov	sl, r0
 800c182:	9805      	ldr	r0, [sp, #20]
 800c184:	468b      	mov	fp, r1
 800c186:	f7f4 f999 	bl	80004bc <__aeabi_i2d>
 800c18a:	9a07      	ldr	r2, [sp, #28]
 800c18c:	4b32      	ldr	r3, [pc, #200]	; (800c258 <__ieee754_pow+0x778>)
 800c18e:	4413      	add	r3, r2
 800c190:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c194:	4606      	mov	r6, r0
 800c196:	460f      	mov	r7, r1
 800c198:	4652      	mov	r2, sl
 800c19a:	465b      	mov	r3, fp
 800c19c:	ec51 0b18 	vmov	r0, r1, d8
 800c1a0:	f7f4 f840 	bl	8000224 <__adddf3>
 800c1a4:	4642      	mov	r2, r8
 800c1a6:	464b      	mov	r3, r9
 800c1a8:	f7f4 f83c 	bl	8000224 <__adddf3>
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	463b      	mov	r3, r7
 800c1b0:	f7f4 f838 	bl	8000224 <__adddf3>
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	4632      	mov	r2, r6
 800c1b8:	463b      	mov	r3, r7
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	460d      	mov	r5, r1
 800c1be:	f7f4 f82f 	bl	8000220 <__aeabi_dsub>
 800c1c2:	4642      	mov	r2, r8
 800c1c4:	464b      	mov	r3, r9
 800c1c6:	f7f4 f82b 	bl	8000220 <__aeabi_dsub>
 800c1ca:	ec53 2b18 	vmov	r2, r3, d8
 800c1ce:	f7f4 f827 	bl	8000220 <__aeabi_dsub>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	4659      	mov	r1, fp
 800c1da:	e610      	b.n	800bdfe <__ieee754_pow+0x31e>
 800c1dc:	2401      	movs	r4, #1
 800c1de:	e6a1      	b.n	800bf24 <__ieee754_pow+0x444>
 800c1e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c230 <__ieee754_pow+0x750>
 800c1e4:	e617      	b.n	800be16 <__ieee754_pow+0x336>
 800c1e6:	bf00      	nop
 800c1e8:	4a454eef 	.word	0x4a454eef
 800c1ec:	3fca7e28 	.word	0x3fca7e28
 800c1f0:	93c9db65 	.word	0x93c9db65
 800c1f4:	3fcd864a 	.word	0x3fcd864a
 800c1f8:	a91d4101 	.word	0xa91d4101
 800c1fc:	3fd17460 	.word	0x3fd17460
 800c200:	518f264d 	.word	0x518f264d
 800c204:	3fd55555 	.word	0x3fd55555
 800c208:	db6fabff 	.word	0xdb6fabff
 800c20c:	3fdb6db6 	.word	0x3fdb6db6
 800c210:	33333303 	.word	0x33333303
 800c214:	3fe33333 	.word	0x3fe33333
 800c218:	e0000000 	.word	0xe0000000
 800c21c:	3feec709 	.word	0x3feec709
 800c220:	dc3a03fd 	.word	0xdc3a03fd
 800c224:	3feec709 	.word	0x3feec709
 800c228:	145b01f5 	.word	0x145b01f5
 800c22c:	be3e2fe0 	.word	0xbe3e2fe0
 800c230:	00000000 	.word	0x00000000
 800c234:	3ff00000 	.word	0x3ff00000
 800c238:	7ff00000 	.word	0x7ff00000
 800c23c:	43400000 	.word	0x43400000
 800c240:	0003988e 	.word	0x0003988e
 800c244:	000bb679 	.word	0x000bb679
 800c248:	0801f6e8 	.word	0x0801f6e8
 800c24c:	3ff00000 	.word	0x3ff00000
 800c250:	40080000 	.word	0x40080000
 800c254:	0801f708 	.word	0x0801f708
 800c258:	0801f6f8 	.word	0x0801f6f8
 800c25c:	a3b3      	add	r3, pc, #716	; (adr r3, 800c52c <__ieee754_pow+0xa4c>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f3 ffdd 	bl	8000224 <__adddf3>
 800c26a:	4622      	mov	r2, r4
 800c26c:	ec41 0b1a 	vmov	d10, r0, r1
 800c270:	462b      	mov	r3, r5
 800c272:	4630      	mov	r0, r6
 800c274:	4639      	mov	r1, r7
 800c276:	f7f3 ffd3 	bl	8000220 <__aeabi_dsub>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	ec51 0b1a 	vmov	r0, r1, d10
 800c282:	f7f4 fc15 	bl	8000ab0 <__aeabi_dcmpgt>
 800c286:	2800      	cmp	r0, #0
 800c288:	f47f ae04 	bne.w	800be94 <__ieee754_pow+0x3b4>
 800c28c:	4aa2      	ldr	r2, [pc, #648]	; (800c518 <__ieee754_pow+0xa38>)
 800c28e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c292:	4293      	cmp	r3, r2
 800c294:	f340 8107 	ble.w	800c4a6 <__ieee754_pow+0x9c6>
 800c298:	151b      	asrs	r3, r3, #20
 800c29a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c29e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c2a2:	fa4a fa03 	asr.w	sl, sl, r3
 800c2a6:	44da      	add	sl, fp
 800c2a8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c2ac:	489b      	ldr	r0, [pc, #620]	; (800c51c <__ieee754_pow+0xa3c>)
 800c2ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c2b2:	4108      	asrs	r0, r1
 800c2b4:	ea00 030a 	and.w	r3, r0, sl
 800c2b8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c2bc:	f1c1 0114 	rsb	r1, r1, #20
 800c2c0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c2c4:	fa4a fa01 	asr.w	sl, sl, r1
 800c2c8:	f1bb 0f00 	cmp.w	fp, #0
 800c2cc:	f04f 0200 	mov.w	r2, #0
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	bfb8      	it	lt
 800c2d6:	f1ca 0a00 	rsblt	sl, sl, #0
 800c2da:	f7f3 ffa1 	bl	8000220 <__aeabi_dsub>
 800c2de:	ec41 0b19 	vmov	d9, r0, r1
 800c2e2:	4642      	mov	r2, r8
 800c2e4:	464b      	mov	r3, r9
 800c2e6:	ec51 0b19 	vmov	r0, r1, d9
 800c2ea:	f7f3 ff9b 	bl	8000224 <__adddf3>
 800c2ee:	a37a      	add	r3, pc, #488	; (adr r3, 800c4d8 <__ieee754_pow+0x9f8>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	460d      	mov	r5, r1
 800c2fa:	f7f4 f949 	bl	8000590 <__aeabi_dmul>
 800c2fe:	ec53 2b19 	vmov	r2, r3, d9
 800c302:	4606      	mov	r6, r0
 800c304:	460f      	mov	r7, r1
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	f7f3 ff89 	bl	8000220 <__aeabi_dsub>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	4640      	mov	r0, r8
 800c314:	4649      	mov	r1, r9
 800c316:	f7f3 ff83 	bl	8000220 <__aeabi_dsub>
 800c31a:	a371      	add	r3, pc, #452	; (adr r3, 800c4e0 <__ieee754_pow+0xa00>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	f7f4 f936 	bl	8000590 <__aeabi_dmul>
 800c324:	a370      	add	r3, pc, #448	; (adr r3, 800c4e8 <__ieee754_pow+0xa08>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	4680      	mov	r8, r0
 800c32c:	4689      	mov	r9, r1
 800c32e:	4620      	mov	r0, r4
 800c330:	4629      	mov	r1, r5
 800c332:	f7f4 f92d 	bl	8000590 <__aeabi_dmul>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4640      	mov	r0, r8
 800c33c:	4649      	mov	r1, r9
 800c33e:	f7f3 ff71 	bl	8000224 <__adddf3>
 800c342:	4604      	mov	r4, r0
 800c344:	460d      	mov	r5, r1
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4630      	mov	r0, r6
 800c34c:	4639      	mov	r1, r7
 800c34e:	f7f3 ff69 	bl	8000224 <__adddf3>
 800c352:	4632      	mov	r2, r6
 800c354:	463b      	mov	r3, r7
 800c356:	4680      	mov	r8, r0
 800c358:	4689      	mov	r9, r1
 800c35a:	f7f3 ff61 	bl	8000220 <__aeabi_dsub>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f3 ff5b 	bl	8000220 <__aeabi_dsub>
 800c36a:	4642      	mov	r2, r8
 800c36c:	4606      	mov	r6, r0
 800c36e:	460f      	mov	r7, r1
 800c370:	464b      	mov	r3, r9
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f4 f90b 	bl	8000590 <__aeabi_dmul>
 800c37a:	a35d      	add	r3, pc, #372	; (adr r3, 800c4f0 <__ieee754_pow+0xa10>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	4604      	mov	r4, r0
 800c382:	460d      	mov	r5, r1
 800c384:	f7f4 f904 	bl	8000590 <__aeabi_dmul>
 800c388:	a35b      	add	r3, pc, #364	; (adr r3, 800c4f8 <__ieee754_pow+0xa18>)
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	f7f3 ff47 	bl	8000220 <__aeabi_dsub>
 800c392:	4622      	mov	r2, r4
 800c394:	462b      	mov	r3, r5
 800c396:	f7f4 f8fb 	bl	8000590 <__aeabi_dmul>
 800c39a:	a359      	add	r3, pc, #356	; (adr r3, 800c500 <__ieee754_pow+0xa20>)
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	f7f3 ff40 	bl	8000224 <__adddf3>
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	462b      	mov	r3, r5
 800c3a8:	f7f4 f8f2 	bl	8000590 <__aeabi_dmul>
 800c3ac:	a356      	add	r3, pc, #344	; (adr r3, 800c508 <__ieee754_pow+0xa28>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	f7f3 ff35 	bl	8000220 <__aeabi_dsub>
 800c3b6:	4622      	mov	r2, r4
 800c3b8:	462b      	mov	r3, r5
 800c3ba:	f7f4 f8e9 	bl	8000590 <__aeabi_dmul>
 800c3be:	a354      	add	r3, pc, #336	; (adr r3, 800c510 <__ieee754_pow+0xa30>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f3 ff2e 	bl	8000224 <__adddf3>
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	462b      	mov	r3, r5
 800c3cc:	f7f4 f8e0 	bl	8000590 <__aeabi_dmul>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	f7f3 ff22 	bl	8000220 <__aeabi_dsub>
 800c3dc:	4604      	mov	r4, r0
 800c3de:	460d      	mov	r5, r1
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	f7f4 f8d2 	bl	8000590 <__aeabi_dmul>
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	ec41 0b19 	vmov	d9, r0, r1
 800c3f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f7f3 ff11 	bl	8000220 <__aeabi_dsub>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	ec51 0b19 	vmov	r0, r1, d9
 800c406:	f7f4 f9ed 	bl	80007e4 <__aeabi_ddiv>
 800c40a:	4632      	mov	r2, r6
 800c40c:	4604      	mov	r4, r0
 800c40e:	460d      	mov	r5, r1
 800c410:	463b      	mov	r3, r7
 800c412:	4640      	mov	r0, r8
 800c414:	4649      	mov	r1, r9
 800c416:	f7f4 f8bb 	bl	8000590 <__aeabi_dmul>
 800c41a:	4632      	mov	r2, r6
 800c41c:	463b      	mov	r3, r7
 800c41e:	f7f3 ff01 	bl	8000224 <__adddf3>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4620      	mov	r0, r4
 800c428:	4629      	mov	r1, r5
 800c42a:	f7f3 fef9 	bl	8000220 <__aeabi_dsub>
 800c42e:	4642      	mov	r2, r8
 800c430:	464b      	mov	r3, r9
 800c432:	f7f3 fef5 	bl	8000220 <__aeabi_dsub>
 800c436:	460b      	mov	r3, r1
 800c438:	4602      	mov	r2, r0
 800c43a:	4939      	ldr	r1, [pc, #228]	; (800c520 <__ieee754_pow+0xa40>)
 800c43c:	2000      	movs	r0, #0
 800c43e:	f7f3 feef 	bl	8000220 <__aeabi_dsub>
 800c442:	ec41 0b10 	vmov	d0, r0, r1
 800c446:	ee10 3a90 	vmov	r3, s1
 800c44a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c44e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c452:	da2b      	bge.n	800c4ac <__ieee754_pow+0x9cc>
 800c454:	4650      	mov	r0, sl
 800c456:	f000 f877 	bl	800c548 <scalbn>
 800c45a:	ec51 0b10 	vmov	r0, r1, d0
 800c45e:	ec53 2b18 	vmov	r2, r3, d8
 800c462:	f7ff bbee 	b.w	800bc42 <__ieee754_pow+0x162>
 800c466:	4b2f      	ldr	r3, [pc, #188]	; (800c524 <__ieee754_pow+0xa44>)
 800c468:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c46c:	429e      	cmp	r6, r3
 800c46e:	f77f af0d 	ble.w	800c28c <__ieee754_pow+0x7ac>
 800c472:	4b2d      	ldr	r3, [pc, #180]	; (800c528 <__ieee754_pow+0xa48>)
 800c474:	440b      	add	r3, r1
 800c476:	4303      	orrs	r3, r0
 800c478:	d009      	beq.n	800c48e <__ieee754_pow+0x9ae>
 800c47a:	ec51 0b18 	vmov	r0, r1, d8
 800c47e:	2200      	movs	r2, #0
 800c480:	2300      	movs	r3, #0
 800c482:	f7f4 faf7 	bl	8000a74 <__aeabi_dcmplt>
 800c486:	3800      	subs	r0, #0
 800c488:	bf18      	it	ne
 800c48a:	2001      	movne	r0, #1
 800c48c:	e448      	b.n	800bd20 <__ieee754_pow+0x240>
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	f7f3 fec5 	bl	8000220 <__aeabi_dsub>
 800c496:	4642      	mov	r2, r8
 800c498:	464b      	mov	r3, r9
 800c49a:	f7f4 faff 	bl	8000a9c <__aeabi_dcmpge>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f43f aef4 	beq.w	800c28c <__ieee754_pow+0x7ac>
 800c4a4:	e7e9      	b.n	800c47a <__ieee754_pow+0x99a>
 800c4a6:	f04f 0a00 	mov.w	sl, #0
 800c4aa:	e71a      	b.n	800c2e2 <__ieee754_pow+0x802>
 800c4ac:	ec51 0b10 	vmov	r0, r1, d0
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	e7d4      	b.n	800c45e <__ieee754_pow+0x97e>
 800c4b4:	491a      	ldr	r1, [pc, #104]	; (800c520 <__ieee754_pow+0xa40>)
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	f7ff bb31 	b.w	800bb1e <__ieee754_pow+0x3e>
 800c4bc:	2000      	movs	r0, #0
 800c4be:	2100      	movs	r1, #0
 800c4c0:	f7ff bb2d 	b.w	800bb1e <__ieee754_pow+0x3e>
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	4639      	mov	r1, r7
 800c4c8:	f7ff bb29 	b.w	800bb1e <__ieee754_pow+0x3e>
 800c4cc:	9204      	str	r2, [sp, #16]
 800c4ce:	f7ff bb7b 	b.w	800bbc8 <__ieee754_pow+0xe8>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f7ff bb65 	b.w	800bba2 <__ieee754_pow+0xc2>
 800c4d8:	00000000 	.word	0x00000000
 800c4dc:	3fe62e43 	.word	0x3fe62e43
 800c4e0:	fefa39ef 	.word	0xfefa39ef
 800c4e4:	3fe62e42 	.word	0x3fe62e42
 800c4e8:	0ca86c39 	.word	0x0ca86c39
 800c4ec:	be205c61 	.word	0xbe205c61
 800c4f0:	72bea4d0 	.word	0x72bea4d0
 800c4f4:	3e663769 	.word	0x3e663769
 800c4f8:	c5d26bf1 	.word	0xc5d26bf1
 800c4fc:	3ebbbd41 	.word	0x3ebbbd41
 800c500:	af25de2c 	.word	0xaf25de2c
 800c504:	3f11566a 	.word	0x3f11566a
 800c508:	16bebd93 	.word	0x16bebd93
 800c50c:	3f66c16c 	.word	0x3f66c16c
 800c510:	5555553e 	.word	0x5555553e
 800c514:	3fc55555 	.word	0x3fc55555
 800c518:	3fe00000 	.word	0x3fe00000
 800c51c:	fff00000 	.word	0xfff00000
 800c520:	3ff00000 	.word	0x3ff00000
 800c524:	4090cbff 	.word	0x4090cbff
 800c528:	3f6f3400 	.word	0x3f6f3400
 800c52c:	652b82fe 	.word	0x652b82fe
 800c530:	3c971547 	.word	0x3c971547

0800c534 <fabs>:
 800c534:	ec51 0b10 	vmov	r0, r1, d0
 800c538:	ee10 2a10 	vmov	r2, s0
 800c53c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c540:	ec43 2b10 	vmov	d0, r2, r3
 800c544:	4770      	bx	lr
	...

0800c548 <scalbn>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	ec55 4b10 	vmov	r4, r5, d0
 800c54e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c552:	4606      	mov	r6, r0
 800c554:	462b      	mov	r3, r5
 800c556:	b999      	cbnz	r1, 800c580 <scalbn+0x38>
 800c558:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c55c:	4323      	orrs	r3, r4
 800c55e:	d03f      	beq.n	800c5e0 <scalbn+0x98>
 800c560:	4b35      	ldr	r3, [pc, #212]	; (800c638 <scalbn+0xf0>)
 800c562:	4629      	mov	r1, r5
 800c564:	ee10 0a10 	vmov	r0, s0
 800c568:	2200      	movs	r2, #0
 800c56a:	f7f4 f811 	bl	8000590 <__aeabi_dmul>
 800c56e:	4b33      	ldr	r3, [pc, #204]	; (800c63c <scalbn+0xf4>)
 800c570:	429e      	cmp	r6, r3
 800c572:	4604      	mov	r4, r0
 800c574:	460d      	mov	r5, r1
 800c576:	da10      	bge.n	800c59a <scalbn+0x52>
 800c578:	a327      	add	r3, pc, #156	; (adr r3, 800c618 <scalbn+0xd0>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	e01f      	b.n	800c5c0 <scalbn+0x78>
 800c580:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c584:	4291      	cmp	r1, r2
 800c586:	d10c      	bne.n	800c5a2 <scalbn+0x5a>
 800c588:	ee10 2a10 	vmov	r2, s0
 800c58c:	4620      	mov	r0, r4
 800c58e:	4629      	mov	r1, r5
 800c590:	f7f3 fe48 	bl	8000224 <__adddf3>
 800c594:	4604      	mov	r4, r0
 800c596:	460d      	mov	r5, r1
 800c598:	e022      	b.n	800c5e0 <scalbn+0x98>
 800c59a:	460b      	mov	r3, r1
 800c59c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c5a0:	3936      	subs	r1, #54	; 0x36
 800c5a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c5a6:	4296      	cmp	r6, r2
 800c5a8:	dd0d      	ble.n	800c5c6 <scalbn+0x7e>
 800c5aa:	2d00      	cmp	r5, #0
 800c5ac:	a11c      	add	r1, pc, #112	; (adr r1, 800c620 <scalbn+0xd8>)
 800c5ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5b2:	da02      	bge.n	800c5ba <scalbn+0x72>
 800c5b4:	a11c      	add	r1, pc, #112	; (adr r1, 800c628 <scalbn+0xe0>)
 800c5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ba:	a319      	add	r3, pc, #100	; (adr r3, 800c620 <scalbn+0xd8>)
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	f7f3 ffe6 	bl	8000590 <__aeabi_dmul>
 800c5c4:	e7e6      	b.n	800c594 <scalbn+0x4c>
 800c5c6:	1872      	adds	r2, r6, r1
 800c5c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c5cc:	428a      	cmp	r2, r1
 800c5ce:	dcec      	bgt.n	800c5aa <scalbn+0x62>
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	dd08      	ble.n	800c5e6 <scalbn+0x9e>
 800c5d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5e0:	ec45 4b10 	vmov	d0, r4, r5
 800c5e4:	bd70      	pop	{r4, r5, r6, pc}
 800c5e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5ea:	da08      	bge.n	800c5fe <scalbn+0xb6>
 800c5ec:	2d00      	cmp	r5, #0
 800c5ee:	a10a      	add	r1, pc, #40	; (adr r1, 800c618 <scalbn+0xd0>)
 800c5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5f4:	dac0      	bge.n	800c578 <scalbn+0x30>
 800c5f6:	a10e      	add	r1, pc, #56	; (adr r1, 800c630 <scalbn+0xe8>)
 800c5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5fc:	e7bc      	b.n	800c578 <scalbn+0x30>
 800c5fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c602:	3236      	adds	r2, #54	; 0x36
 800c604:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c608:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c60c:	4620      	mov	r0, r4
 800c60e:	4b0c      	ldr	r3, [pc, #48]	; (800c640 <scalbn+0xf8>)
 800c610:	2200      	movs	r2, #0
 800c612:	e7d5      	b.n	800c5c0 <scalbn+0x78>
 800c614:	f3af 8000 	nop.w
 800c618:	c2f8f359 	.word	0xc2f8f359
 800c61c:	01a56e1f 	.word	0x01a56e1f
 800c620:	8800759c 	.word	0x8800759c
 800c624:	7e37e43c 	.word	0x7e37e43c
 800c628:	8800759c 	.word	0x8800759c
 800c62c:	fe37e43c 	.word	0xfe37e43c
 800c630:	c2f8f359 	.word	0xc2f8f359
 800c634:	81a56e1f 	.word	0x81a56e1f
 800c638:	43500000 	.word	0x43500000
 800c63c:	ffff3cb0 	.word	0xffff3cb0
 800c640:	3c900000 	.word	0x3c900000

0800c644 <with_errno>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	4604      	mov	r4, r0
 800c648:	460d      	mov	r5, r1
 800c64a:	4616      	mov	r6, r2
 800c64c:	f7fe feae 	bl	800b3ac <__errno>
 800c650:	4629      	mov	r1, r5
 800c652:	6006      	str	r6, [r0, #0]
 800c654:	4620      	mov	r0, r4
 800c656:	bd70      	pop	{r4, r5, r6, pc}

0800c658 <xflow>:
 800c658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c65a:	4614      	mov	r4, r2
 800c65c:	461d      	mov	r5, r3
 800c65e:	b108      	cbz	r0, 800c664 <xflow+0xc>
 800c660:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c664:	e9cd 2300 	strd	r2, r3, [sp]
 800c668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 ff8e 	bl	8000590 <__aeabi_dmul>
 800c674:	2222      	movs	r2, #34	; 0x22
 800c676:	b003      	add	sp, #12
 800c678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c67c:	f7ff bfe2 	b.w	800c644 <with_errno>

0800c680 <__math_uflow>:
 800c680:	b508      	push	{r3, lr}
 800c682:	2200      	movs	r2, #0
 800c684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c688:	f7ff ffe6 	bl	800c658 <xflow>
 800c68c:	ec41 0b10 	vmov	d0, r0, r1
 800c690:	bd08      	pop	{r3, pc}

0800c692 <__math_oflow>:
 800c692:	b508      	push	{r3, lr}
 800c694:	2200      	movs	r2, #0
 800c696:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c69a:	f7ff ffdd 	bl	800c658 <xflow>
 800c69e:	ec41 0b10 	vmov	d0, r0, r1
 800c6a2:	bd08      	pop	{r3, pc}

0800c6a4 <_init>:
 800c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a6:	bf00      	nop
 800c6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6aa:	bc08      	pop	{r3}
 800c6ac:	469e      	mov	lr, r3
 800c6ae:	4770      	bx	lr

0800c6b0 <_fini>:
 800c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b2:	bf00      	nop
 800c6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b6:	bc08      	pop	{r3}
 800c6b8:	469e      	mov	lr, r3
 800c6ba:	4770      	bx	lr
