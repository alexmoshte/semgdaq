
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b9c  08005b9c  00027874  2**0
                  CONTENTS
  4 .ARM          00000000  08005b9c  08005b9c  00027874  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b9c  08005b9c  00027874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007874  20000000  08005ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  20007874  0800d418  00027874  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008c18  0800d418  00028c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027874  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000278a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153c9  00000000  00000000  0002795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fca  00000000  00000000  0003cd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb8  00000000  00000000  00041198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218a7  00000000  00000000  00042150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ff3  00000000  00000000  000639f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1c4e  00000000  00000000  0007a9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000573c  00000000  00000000  0015c638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00161d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d34  00000000  00000000  00161dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00162b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20007874 	.word	0x20007874
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b74 	.word	0x08005b74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20007878 	.word	0x20007878
 8000214:	08005b74 	.word	0x08005b74

08000218 <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH]={0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f};

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
 8000224:	e00a      	b.n	800023c <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	4413      	add	r3, r2
 800022e:	3304      	adds	r3, #4
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	3301      	adds	r3, #1
 800023a:	73fb      	strb	r3, [r7, #15]
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	2b07      	cmp	r3, #7
 8000240:	d9f1      	bls.n	8000226 <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	e00b      	b.n	8000266 <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	3308      	adds	r3, #8
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	4413      	add	r3, r2
 8000258:	3304      	adds	r3, #4
 800025a:	f04f 0200 	mov.w	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	2b9c      	cmp	r3, #156	; 0x9c
 800026a:	d9f0      	bls.n	800024e <MA_ADC1_IN1_Init+0x36>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
	...

0800027c <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 800027c:	b480      	push	{r7}
 800027e:	b087      	sub	sp, #28
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	e05a      	b.n	8000340 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4932      	ldr	r1, [pc, #200]	; (8000358 <MA_ADC1_IN1_Update+0xdc>)
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	3212      	adds	r2, #18
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	440a      	add	r2, r1
 8000298:	6812      	ldr	r2, [r2, #0]
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	440b      	add	r3, r1
 80002a0:	3304      	adds	r3, #4
 80002a2:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1c5a      	adds	r2, r3, #1
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b08      	cmp	r3, #8
 80002b4:	d102      	bne.n	80002bc <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	3308      	adds	r3, #8
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	3304      	adds	r3, #4
 80002c8:	f04f 0200 	mov.w	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e02c      	b.n	8000334 <MA_ADC1_IN1_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_1 > 0)
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d003      	beq.n	80002e8 <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	e001      	b.n	80002ec <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 80002e8:	2307      	movs	r3, #7
 80002ea:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	3308      	adds	r3, #8
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	4413      	add	r3, r2
 80002f6:	3304      	adds	r3, #4
 80002f8:	ed93 7a00 	vldr	s14, [r3]
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <MA_ADC1_IN1_Update+0xe0>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	4413      	add	r3, r2
 8000304:	edd3 6a00 	vldr	s13, [r3]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	3304      	adds	r3, #4
 8000312:	edd3 7a00 	vldr	s15, [r3]
 8000316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800031a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	3308      	adds	r3, #8
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	3304      	adds	r3, #4
 800032a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	2b07      	cmp	r3, #7
 8000338:	d9cf      	bls.n	80002da <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000346:	4293      	cmp	r3, r2
 8000348:	d99f      	bls.n	800028a <MA_ADC1_IN1_Update+0xe>
        }
    }
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	20000048 	.word	0x20000048
 800035c:	20000000 	.word	0x20000000

08000360 <MA_ADC1_IN2_Init>:




void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
 800036c:	e00a      	b.n	8000384 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f; // Clear the moving average buffer
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4413      	add	r3, r2
 8000376:	3304      	adds	r3, #4
 8000378:	f04f 0200 	mov.w	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3301      	adds	r3, #1
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	2b07      	cmp	r3, #7
 8000388:	d9f1      	bls.n	800036e <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0; // Initialize the buffer index
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	e00b      	b.n	80003ae <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f; // Clear the output buffer
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	3308      	adds	r3, #8
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4413      	add	r3, r2
 80003a0:	3304      	adds	r3, #4
 80003a2:	f04f 0200 	mov.w	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	2b9c      	cmp	r3, #156	; 0x9c
 80003b2:	d9f0      	bls.n	8000396 <MA_ADC1_IN2_Init+0x36>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update(ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e05a      	b.n	8000488 <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u]; // Store the current input sample in the circular buffer
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4932      	ldr	r1, [pc, #200]	; (80004a0 <MA_ADC1_IN2_Update+0xdc>)
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	3212      	adds	r2, #18
 80003dc:	0092      	lsls	r2, r2, #2
 80003de:	440a      	add	r2, r1
 80003e0:	6812      	ldr	r2, [r2, #0]
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	440b      	add	r3, r1
 80003e8:	3304      	adds	r3, #4
 80003ea:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b08      	cmp	r3, #8
 80003fc:	d102      	bne.n	8000404 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3308      	adds	r3, #8
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	4413      	add	r3, r2
 800040e:	3304      	adds	r3, #4
 8000410:	f04f 0200 	mov.w	r2, #0
 8000414:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx; // Set SumIndex_2 to the current buffer index
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	e02c      	b.n	800047c <MA_ADC1_IN2_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_2 > 0)
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d003      	beq.n	8000430 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3b01      	subs	r3, #1
 800042c:	613b      	str	r3, [r7, #16]
 800042e:	e001      	b.n	8000434 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8000430:	2307      	movs	r3, #7
 8000432:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3308      	adds	r3, #8
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4413      	add	r3, r2
 800043e:	3304      	adds	r3, #4
 8000440:	ed93 7a00 	vldr	s14, [r3]
 8000444:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <MA_ADC1_IN2_Update+0xe0>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4413      	add	r3, r2
 800044c:	edd3 6a00 	vldr	s13, [r3]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	3304      	adds	r3, #4
 800045a:	edd3 7a00 	vldr	s15, [r3]
 800045e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3308      	adds	r3, #8
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	3304      	adds	r3, #4
 8000472:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3301      	adds	r3, #1
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	2b07      	cmp	r3, #7
 8000480:	d9cf      	bls.n	8000422 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800048e:	4293      	cmp	r3, r2
 8000490:	d99f      	bls.n	80003d2 <MA_ADC1_IN2_Update+0xe>
        }
    }
}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	371c      	adds	r7, #28
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	20001454 	.word	0x20001454
 80004a4:	20000000 	.word	0x20000000

080004a8 <MA_ADC2_IN3_Init>:




void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e00a      	b.n	80004cc <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f; // Clear the moving average buffer
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	3304      	adds	r3, #4
 80004c0:	f04f 0200 	mov.w	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	3301      	adds	r3, #1
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d9f1      	bls.n	80004b6 <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0; // Initialize the buffer index
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	e00b      	b.n	80004f6 <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f; // Clear the output buffer
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3308      	adds	r3, #8
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	3304      	adds	r3, #4
 80004ea:	f04f 0200 	mov.w	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	2b9c      	cmp	r3, #156	; 0x9c
 80004fa:	d9f0      	bls.n	80004de <MA_ADC2_IN3_Init+0x36>
	}
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update(ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 800050c:	b480      	push	{r7}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e05a      	b.n	80005d0 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4932      	ldr	r1, [pc, #200]	; (80005e8 <MA_ADC2_IN3_Update+0xdc>)
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	3212      	adds	r2, #18
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	440a      	add	r2, r1
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	440b      	add	r3, r1
 8000530:	3304      	adds	r3, #4
 8000532:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1c5a      	adds	r2, r3, #1
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b08      	cmp	r3, #8
 8000544:	d102      	bne.n	800054c <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3308      	adds	r3, #8
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	3304      	adds	r3, #4
 8000558:	f04f 0200 	mov.w	r2, #0
 800055c:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx; // Set SumIndex_3 to the current buffer index
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e02c      	b.n	80005c4 <MA_ADC2_IN3_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_3 > 0)
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d003      	beq.n	8000578 <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	3b01      	subs	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	e001      	b.n	800057c <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 8000578:	2307      	movs	r3, #7
 800057a:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3308      	adds	r3, #8
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	3304      	adds	r3, #4
 8000588:	ed93 7a00 	vldr	s14, [r3]
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <MA_ADC2_IN3_Update+0xe0>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	edd3 6a00 	vldr	s13, [r3]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	3304      	adds	r3, #4
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3308      	adds	r3, #8
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	3304      	adds	r3, #4
 80005ba:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d9cf      	bls.n	800056a <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d99f      	bls.n	800051a <MA_ADC2_IN3_Update+0xe>
        }
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20002860 	.word	0x20002860
 80005ec:	20000000 	.word	0x20000000

080005f0 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e00a      	b.n	8000614 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	3304      	adds	r3, #4
 8000608:	f04f 0200 	mov.w	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d9f1      	bls.n	80005fe <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	e00b      	b.n	800063e <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	3308      	adds	r3, #8
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	3304      	adds	r3, #4
 8000632:	f04f 0200 	mov.w	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3301      	adds	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b9c      	cmp	r3, #156	; 0x9c
 8000642:	d9f0      	bls.n	8000626 <MA_ADC2_IN4_Init+0x36>
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update(ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8000654:	b480      	push	{r7}
 8000656:	b087      	sub	sp, #28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e05a      	b.n	8000718 <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4932      	ldr	r1, [pc, #200]	; (8000730 <MA_ADC2_IN4_Update+0xdc>)
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	3212      	adds	r2, #18
 800066c:	0092      	lsls	r2, r2, #2
 800066e:	440a      	add	r2, r1
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	440b      	add	r3, r1
 8000678:	3304      	adds	r3, #4
 800067a:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b08      	cmp	r3, #8
 800068c:	d102      	bne.n	8000694 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3308      	adds	r3, #8
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	3304      	adds	r3, #4
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e02c      	b.n	800070c <MA_ADC2_IN4_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_4 > 0)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	e001      	b.n	80006c4 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 80006c0:	2307      	movs	r3, #7
 80006c2:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3308      	adds	r3, #8
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	3304      	adds	r3, #4
 80006d0:	ed93 7a00 	vldr	s14, [r3]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MA_ADC2_IN4_Update+0xe0>)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	edd3 6a00 	vldr	s13, [r3]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	3304      	adds	r3, #4
 80006ea:	edd3 7a00 	vldr	s15, [r3]
 80006ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3308      	adds	r3, #8
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	3304      	adds	r3, #4
 8000702:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3301      	adds	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b07      	cmp	r3, #7
 8000710:	d9cf      	bls.n	80006b2 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3301      	adds	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800071e:	4293      	cmp	r3, r2
 8000720:	d99f      	bls.n	8000662 <MA_ADC2_IN4_Update+0xe>
        }
    }
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	371c      	adds	r7, #28
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	20003c6c 	.word	0x20003c6c
 8000734:	20000000 	.word	0x20000000

08000738 <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000740:	2300      	movs	r3, #0
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	e00a      	b.n	800075c <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	3304      	adds	r3, #4
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	3301      	adds	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9f1      	bls.n	8000746 <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0; // Initialize the buffer index
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	e00b      	b.n	8000786 <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3308      	adds	r3, #8
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3304      	adds	r3, #4
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	3301      	adds	r3, #1
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	2b9c      	cmp	r3, #156	; 0x9c
 800078a:	d9f0      	bls.n	800076e <MA_ADC3_IN1_Init+0x36>
	}
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update(ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e05a      	b.n	8000860 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u]; // Store the current input sample in the circular buffer
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4932      	ldr	r1, [pc, #200]	; (8000878 <MA_ADC3_IN1_Update+0xdc>)
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	3212      	adds	r2, #18
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	440a      	add	r2, r1
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	3304      	adds	r3, #4
 80007c2:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b08      	cmp	r3, #8
 80007d4:	d102      	bne.n	80007dc <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3308      	adds	r3, #8
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	3304      	adds	r3, #4
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx; // Set SumIndex_5 to the current buffer index
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e02c      	b.n	8000854 <MA_ADC3_IN1_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_5 > 0)
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	3b01      	subs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	e001      	b.n	800080c <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8000808:	2307      	movs	r3, #7
 800080a:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3308      	adds	r3, #8
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	3304      	adds	r3, #4
 8000818:	ed93 7a00 	vldr	s14, [r3]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <MA_ADC3_IN1_Update+0xe0>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	edd3 6a00 	vldr	s13, [r3]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	3304      	adds	r3, #4
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800083a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3308      	adds	r3, #8
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	3304      	adds	r3, #4
 800084a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b07      	cmp	r3, #7
 8000858:	d9cf      	bls.n	80007fa <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000866:	4293      	cmp	r3, r2
 8000868:	d99f      	bls.n	80007aa <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	20005078 	.word	0x20005078
 800087c:	20000000 	.word	0x20000000

08000880 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e00a      	b.n	80008a4 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f; // Clear the moving average buffer
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	3304      	adds	r3, #4
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	2b07      	cmp	r3, #7
 80008a8:	d9f1      	bls.n	800088e <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0; // Initialize the buffer index
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	e00b      	b.n	80008ce <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f; // Clear the output buffer
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	3308      	adds	r3, #8
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	3304      	adds	r3, #4
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	2b9c      	cmp	r3, #156	; 0x9c
 80008d2:	d9f0      	bls.n	80008b6 <MA_ADC3_IN2_Init+0x36>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update(ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e05a      	b.n	80009a8 <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u]; // Store the current input sample in the circular buffer
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4932      	ldr	r1, [pc, #200]	; (80009c0 <MA_ADC3_IN2_Update+0xdc>)
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	3212      	adds	r2, #18
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	440a      	add	r2, r1
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	3304      	adds	r3, #4
 800090a:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b08      	cmp	r3, #8
 800091c:	d102      	bne.n	8000924 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3308      	adds	r3, #8
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	3304      	adds	r3, #4
 8000930:	f04f 0200 	mov.w	r2, #0
 8000934:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx; // Set SumIndex_6 to the current buffer index
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e02c      	b.n	800099c <MA_ADC3_IN2_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_6 > 0)
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3b01      	subs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	e001      	b.n	8000954 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8000950:	2307      	movs	r3, #7
 8000952:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3308      	adds	r3, #8
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	3304      	adds	r3, #4
 8000960:	ed93 7a00 	vldr	s14, [r3]
 8000964:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <MA_ADC3_IN2_Update+0xe0>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	edd3 6a00 	vldr	s13, [r3]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	3304      	adds	r3, #4
 800097a:	edd3 7a00 	vldr	s15, [r3]
 800097e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3308      	adds	r3, #8
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	3304      	adds	r3, #4
 8000992:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9cf      	bls.n	8000942 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d99f      	bls.n	80008f2 <MA_ADC3_IN2_Update+0xe>
        }
    }
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	371c      	adds	r7, #28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	20006484 	.word	0x20006484
 80009c4:	20000000 	.word	0x20000000

080009c8 <init_ADC1_IN1_struct>:
extern ADC3_DMA_sort*ADC3_DMA_sort_ptr;


// INITIALIZING THE STRUCT INSTANCE
void init_ADC1_IN1_struct(void)
  {
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <init_ADC1_IN1_struct+0x1c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80009d4:	3314      	adds	r3, #20
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <init_ADC1_IN1_struct+0x20>)
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20007c70 	.word	0x20007c70
 80009e8:	20000048 	.word	0x20000048

080009ec <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80009f2:	7819      	ldrb	r1, [r3, #0]
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80009f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <init_ADC1_IN1_FO_biquad_filter+0x20>)
 80009fe:	f005 f881 	bl	8005b04 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	20001420 	.word	0x20001420

08000a10 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000a16:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a1e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8000a2e:	f004 fead 	bl	800578c <arm_biquad_cascade_df2T_f32>
   }
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000048 	.word	0x20000048
 8000a3c:	20001420 	.word	0x20001420

08000a40 <init_ADC1_IN2_struct>:



void init_ADC1_IN2_struct(void)
  {
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);  // Typecasting. Assigned at runtime
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <init_ADC1_IN2_struct+0x1c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8000a4c:	3320      	adds	r3, #32
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <init_ADC1_IN2_struct+0x20>)
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	20007c70 	.word	0x20007c70
 8000a60:	20001454 	.word	0x20001454

08000a64 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8000a6a:	7819      	ldrb	r1, [r3, #0]
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8000a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8000a76:	f005 f845 	bl	8005b04 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,  // Pointer to the instance
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN2_NF_arg.ADC1_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20001454 	.word	0x20001454
 8000a84:	2000282c 	.word	0x2000282c

08000a88 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8000a8e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8000a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a96:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8000a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 8000aa6:	f004 fe71 	bl	800578c <arm_biquad_cascade_df2T_f32>
   }
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20001454 	.word	0x20001454
 8000ab4:	2000282c 	.word	0x2000282c

08000ab8 <init_ADC2_IN3_struct>:



void init_ADC2_IN3_struct(void)
  {
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);  // Typecasting. Assigned at runtime
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <init_ADC2_IN3_struct+0x1c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000ac4:	3314      	adds	r3, #20
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <init_ADC2_IN3_struct+0x20>)
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20007c74 	.word	0x20007c74
 8000ad8:	20002860 	.word	0x20002860

08000adc <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000ae2:	7819      	ldrb	r1, [r3, #0]
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8000aee:	f005 f809 	bl	8005b04 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState                                         // Pointer to the state buffer
	 );
  }
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20002860 	.word	0x20002860
 8000afc:	20003c38 	.word	0x20003c38

08000b00 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000b06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b0e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8000b1e:	f004 fe35 	bl	800578c <arm_biquad_cascade_df2T_f32>
   }
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20002860 	.word	0x20002860
 8000b2c:	20003c38 	.word	0x20003c38

08000b30 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);  // Typecasting. Assigned at runtime
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <init_ADC2_IN4_struct+0x1c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8000b3c:	3320      	adds	r3, #32
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <init_ADC2_IN4_struct+0x20>)
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20007c74 	.word	0x20007c74
 8000b50:	20003c6c 	.word	0x20003c6c

08000b54 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8000b5a:	7819      	ldrb	r1, [r3, #0]
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 8000b66:	f004 ffcd 	bl	8005b04 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,  // Pointer to the instance
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN4_NF_arg.ADC2_IN4_pState                                         // Pointer to the state buffer
	 );
  }
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20003c6c 	.word	0x20003c6c
 8000b74:	20005044 	.word	0x20005044

08000b78 <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8000b7e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8000b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b86:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8000b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 8000b96:	f004 fdf9 	bl	800578c <arm_biquad_cascade_df2T_f32>
   }
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20003c6c 	.word	0x20003c6c
 8000ba4:	20005044 	.word	0x20005044

08000ba8 <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);  // Typecasting. Assigned at runtime
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <init_ADC3_IN1_struct+0x1c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000bb4:	3314      	adds	r3, #20
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <init_ADC3_IN1_struct+0x20>)
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20007c78 	.word	0x20007c78
 8000bc8:	20005078 	.word	0x20005078

08000bcc <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000bd2:	7819      	ldrb	r1, [r3, #0]
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8000bde:	f004 ff91 	bl	8005b04 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,  // Pointer to the instance
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN1_NF_arg.ADC3_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20005078 	.word	0x20005078
 8000bec:	20006450 	.word	0x20006450

08000bf0 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000bf6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bfe:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8000c0e:	f004 fdbd 	bl	800578c <arm_biquad_cascade_df2T_f32>
   }
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20005078 	.word	0x20005078
 8000c1c:	20006450 	.word	0x20006450

08000c20 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <init_ADC3_IN2_struct+0x1c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8000c2c:	3320      	adds	r3, #32
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <init_ADC3_IN2_struct+0x20>)
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	20007c78 	.word	0x20007c78
 8000c40:	20006484 	.word	0x20006484

08000c44 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8000c4a:	7819      	ldrb	r1, [r3, #0]
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8000c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 8000c56:	f004 ff55 	bl	8005b04 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20006484 	.word	0x20006484
 8000c64:	2000785c 	.word	0x2000785c

08000c68 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8000c6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8000c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c76:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8000c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 8000c86:	f004 fd81 	bl	800578c <arm_biquad_cascade_df2T_f32>
   }
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20006484 	.word	0x20006484
 8000c94:	2000785c 	.word	0x2000785c

08000c98 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	e038      	b.n	8000d16 <ADC1_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <ADC1_DMA_sort_uhb+0x1c>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d117      	bne.n	8000ce4 <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	e00f      	b.n	8000cda <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <ADC1_DMA_sort_uhb+0x94>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <ADC1_DMA_sort_uhb+0x94>)
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000ce0:	d3eb      	bcc.n	8000cba <ADC1_DMA_sort_uhb+0x22>
 8000ce2:	e015      	b.n	8000d10 <ADC1_DMA_sort_uhb+0x78>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e00e      	b.n	8000d08 <ADC1_DMA_sort_uhb+0x70>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <ADC1_DMA_sort_uhb+0x94>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <ADC1_DMA_sort_uhb+0x94>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68f9      	ldr	r1, [r7, #12]
 8000cf4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000d0e:	d3ec      	bcc.n	8000cea <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000d1c:	d9c2      	bls.n	8000ca4 <ADC1_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20007c70 	.word	0x20007c70

08000d30 <ADC1_DMA_sort_lhb>:

void ADC1_DMA_sort_lhb (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8000d36:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	e03a      	b.n	8000db4 <ADC1_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d004      	beq.n	8000d4e <ADC1_DMA_sort_lhb+0x1e>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d118      	bne.n	8000d80 <ADC1_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8000d4e:	f240 2371 	movw	r3, #625	; 0x271
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	e00f      	b.n	8000d76 <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <ADC1_DMA_sort_lhb+0x9c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <ADC1_DMA_sort_lhb+0x9c>)
 8000d5c:	6811      	ldr	r1, [r2, #0]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000d7c:	d9eb      	bls.n	8000d56 <ADC1_DMA_sort_lhb+0x26>
 8000d7e:	e016      	b.n	8000dae <ADC1_DMA_sort_lhb+0x7e>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8000d80:	f240 2371 	movw	r3, #625	; 0x271
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	e00e      	b.n	8000da6 <ADC1_DMA_sort_lhb+0x76>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <ADC1_DMA_sort_lhb+0x9c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <ADC1_DMA_sort_lhb+0x9c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68f9      	ldr	r1, [r7, #12]
 8000d92:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000dac:	d9ec      	bls.n	8000d88 <ADC1_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d9bf      	bls.n	8000d3e <ADC1_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20007c70 	.word	0x20007c70

08000dd0 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	e038      	b.n	8000e4e <ADC2_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <ADC2_DMA_sort_uhb+0x1c>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d117      	bne.n	8000e1c <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	e00f      	b.n	8000e12 <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <ADC2_DMA_sort_uhb+0x94>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <ADC2_DMA_sort_uhb+0x94>)
 8000df8:	6811      	ldr	r1, [r2, #0]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000e18:	d3eb      	bcc.n	8000df2 <ADC2_DMA_sort_uhb+0x22>
 8000e1a:	e015      	b.n	8000e48 <ADC2_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	e00e      	b.n	8000e40 <ADC2_DMA_sort_uhb+0x70>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <ADC2_DMA_sort_uhb+0x94>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <ADC2_DMA_sort_uhb+0x94>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68f9      	ldr	r1, [r7, #12]
 8000e2c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000e46:	d3ec      	bcc.n	8000e22 <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000e54:	d9c2      	bls.n	8000ddc <ADC2_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20007c74 	.word	0x20007c74

08000e68 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8000e6e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	e03a      	b.n	8000eec <ADC2_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d004      	beq.n	8000e86 <ADC2_DMA_sort_lhb+0x1e>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d118      	bne.n	8000eb8 <ADC2_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8000e86:	f240 2371 	movw	r3, #625	; 0x271
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	e00f      	b.n	8000eae <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <ADC2_DMA_sort_lhb+0x9c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <ADC2_DMA_sort_lhb+0x9c>)
 8000e94:	6811      	ldr	r1, [r2, #0]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000eb4:	d9eb      	bls.n	8000e8e <ADC2_DMA_sort_lhb+0x26>
 8000eb6:	e016      	b.n	8000ee6 <ADC2_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8000eb8:	f240 2371 	movw	r3, #625	; 0x271
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	e00e      	b.n	8000ede <ADC2_DMA_sort_lhb+0x76>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <ADC2_DMA_sort_lhb+0x9c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <ADC2_DMA_sort_lhb+0x9c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000ee4:	d9ec      	bls.n	8000ec0 <ADC2_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d9bf      	bls.n	8000e76 <ADC2_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20007c74 	.word	0x20007c74

08000f08 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	e038      	b.n	8000f86 <ADC3_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <ADC3_DMA_sort_uhb+0x1c>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d117      	bne.n	8000f54 <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	e00f      	b.n	8000f4a <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <ADC3_DMA_sort_uhb+0x94>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <ADC3_DMA_sort_uhb+0x94>)
 8000f30:	6811      	ldr	r1, [r2, #0]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000f50:	d3eb      	bcc.n	8000f2a <ADC3_DMA_sort_uhb+0x22>
 8000f52:	e015      	b.n	8000f80 <ADC3_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	e00e      	b.n	8000f78 <ADC3_DMA_sort_uhb+0x70>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <ADC3_DMA_sort_uhb+0x94>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <ADC3_DMA_sort_uhb+0x94>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68f9      	ldr	r1, [r7, #12]
 8000f64:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3301      	adds	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000f7e:	d3ec      	bcc.n	8000f5a <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000f8c:	d9c2      	bls.n	8000f14 <ADC3_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	20007c78 	.word	0x20007c78

08000fa0 <ADC3_DMA_sort_lhb>:

void ADC3_DMA_sort_lhb (void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8000fa6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e03a      	b.n	8001024 <ADC3_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <ADC3_DMA_sort_lhb+0x1e>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d118      	bne.n	8000ff0 <ADC3_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8000fbe:	f240 2371 	movw	r3, #625	; 0x271
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	e00f      	b.n	8000fe6 <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <ADC3_DMA_sort_lhb+0x9c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <ADC3_DMA_sort_lhb+0x9c>)
 8000fcc:	6811      	ldr	r1, [r2, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000fec:	d9eb      	bls.n	8000fc6 <ADC3_DMA_sort_lhb+0x26>
 8000fee:	e016      	b.n	800101e <ADC3_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8000ff0:	f240 2371 	movw	r3, #625	; 0x271
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	e00e      	b.n	8001016 <ADC3_DMA_sort_lhb+0x76>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <ADC3_DMA_sort_lhb+0x9c>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <ADC3_DMA_sort_lhb+0x9c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800101c:	d9ec      	bls.n	8000ff8 <ADC3_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f640 12c2 	movw	r2, #2498	; 0x9c2
 800102a:	4293      	cmp	r3, r2
 800102c:	d9bf      	bls.n	8000fae <ADC3_DMA_sort_lhb+0xe>
			}
		}
    }

};
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	20007c78 	.word	0x20007c78

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 ff7b 	bl	8001f3e <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8001048:	f7ff fcbe 	bl	80009c8 <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 800104c:	f7ff fcce 	bl	80009ec <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 8001050:	483e      	ldr	r0, [pc, #248]	; (800114c <main+0x10c>)
 8001052:	f7ff f8e1 	bl	8000218 <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8001056:	f7ff fcf3 	bl	8000a40 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 800105a:	f7ff fd03 	bl	8000a64 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 800105e:	483c      	ldr	r0, [pc, #240]	; (8001150 <main+0x110>)
 8001060:	f7ff f97e 	bl	8000360 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 8001064:	f7ff fd28 	bl	8000ab8 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8001068:	f7ff fd38 	bl	8000adc <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 800106c:	4839      	ldr	r0, [pc, #228]	; (8001154 <main+0x114>)
 800106e:	f7ff fa1b 	bl	80004a8 <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 8001072:	f7ff fd5d 	bl	8000b30 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8001076:	f7ff fd6d 	bl	8000b54 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 800107a:	4837      	ldr	r0, [pc, #220]	; (8001158 <main+0x118>)
 800107c:	f7ff fab8 	bl	80005f0 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 8001080:	f7ff fd92 	bl	8000ba8 <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8001084:	f7ff fda2 	bl	8000bcc <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8001088:	4834      	ldr	r0, [pc, #208]	; (800115c <main+0x11c>)
 800108a:	f7ff fb55 	bl	8000738 <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 800108e:	f7ff fdc7 	bl	8000c20 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 8001092:	f7ff fdd7 	bl	8000c44 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8001096:	4832      	ldr	r0, [pc, #200]	; (8001160 <main+0x120>)
 8001098:	f7ff fbf2 	bl	8000880 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109c:	f000 f870 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a0:	f000 fb4c 	bl	800173c <MX_GPIO_Init>
  MX_DMA_Init();
 80010a4:	f000 fb04 	bl	80016b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80010a8:	f000 f8b4 	bl	8001214 <MX_ADC1_Init>
  MX_ADC2_Init();
 80010ac:	f000 f93c 	bl	8001328 <MX_ADC2_Init>
  MX_ADC3_Init();
 80010b0:	f000 f9b2 	bl	8001418 <MX_ADC3_Init>
  MX_FMAC_Init();
 80010b4:	f000 fa28 	bl	8001508 <MX_FMAC_Init>
  MX_TIM6_Init();
 80010b8:	f000 fa3a 	bl	8001530 <MX_TIM6_Init>
  MX_TIM7_Init();
 80010bc:	f000 fa6e 	bl	800159c <MX_TIM7_Init>
  MX_TIM20_Init();
 80010c0:	f000 faa2 	bl	8001608 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	
  //ADC1 is started using timer 6 tiggered conversions
  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
    ADC_status=HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr,ADC_DMA_BUFFERSIZE);
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <main+0x124>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4826      	ldr	r0, [pc, #152]	; (8001168 <main+0x128>)
 80010d0:	f001 fb72 	bl	80027b8 <HAL_ADC_Start_DMA>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <main+0x12c>)
 80010da:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
    ADC_status=HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr,ADC_DMA_BUFFERSIZE);
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <main+0x130>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4823      	ldr	r0, [pc, #140]	; (8001174 <main+0x134>)
 80010e8:	f001 fb66 	bl	80027b8 <HAL_ADC_Start_DMA>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <main+0x12c>)
 80010f2:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
    ADC_status=HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr,ADC_DMA_BUFFERSIZE);
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <main+0x138>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010fc:	4619      	mov	r1, r3
 80010fe:	481f      	ldr	r0, [pc, #124]	; (800117c <main+0x13c>)
 8001100:	f001 fb5a 	bl	80027b8 <HAL_ADC_Start_DMA>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <main+0x12c>)
 800110a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 800110c:	f7ff fc80 	bl	8000a10 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);
 8001110:	480e      	ldr	r0, [pc, #56]	; (800114c <main+0x10c>)
 8001112:	f7ff f8b3 	bl	800027c <MA_ADC1_IN1_Update>

	  update_ADC1_IN2_FO_biquad_filter();
 8001116:	f7ff fcb7 	bl	8000a88 <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <main+0x110>)
 800111c:	f7ff f952 	bl	80003c4 <MA_ADC1_IN2_Update>

	  update_ADC2_IN3_FO_biquad_filter();
 8001120:	f7ff fcee 	bl	8000b00 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <main+0x114>)
 8001126:	f7ff f9f1 	bl	800050c <MA_ADC2_IN3_Update>

	  update_ADC2_IN4_FO_biquad_filter();
 800112a:	f7ff fd25 	bl	8000b78 <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <main+0x118>)
 8001130:	f7ff fa90 	bl	8000654 <MA_ADC2_IN4_Update>

	  update_ADC3_IN1_FO_biquad_filter();
 8001134:	f7ff fd5c 	bl	8000bf0 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <main+0x11c>)
 800113a:	f7ff fb2f 	bl	800079c <MA_ADC3_IN1_Update>

	  update_ADC3_IN2_FO_biquad_filter();
 800113e:	f7ff fd93 	bl	8000c68 <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <main+0x120>)
 8001144:	f7ff fbce 	bl	80008e4 <MA_ADC3_IN2_Update>
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8001148:	e7e0      	b.n	800110c <main+0xcc>
 800114a:	bf00      	nop
 800114c:	20007c7c 	.word	0x20007c7c
 8001150:	20007f14 	.word	0x20007f14
 8001154:	200081ac 	.word	0x200081ac
 8001158:	20008444 	.word	0x20008444
 800115c:	200086dc 	.word	0x200086dc
 8001160:	20008974 	.word	0x20008974
 8001164:	20007c70 	.word	0x20007c70
 8001168:	200078f0 	.word	0x200078f0
 800116c:	20008c0c 	.word	0x20008c0c
 8001170:	20007c74 	.word	0x20007c74
 8001174:	2000795c 	.word	0x2000795c
 8001178:	20007c78 	.word	0x20007c78
 800117c:	200079c8 	.word	0x200079c8

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	; 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	2238      	movs	r2, #56	; 0x38
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f004 fcc4 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011a6:	f002 ffef 	bl	8004188 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b4:	2302      	movs	r3, #2
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b8:	2303      	movs	r3, #3
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80011bc:	2301      	movs	r3, #1
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011c0:	2308      	movs	r3, #8
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f88b 	bl	80042f0 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80011e0:	f000 fc0a 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2303      	movs	r3, #3
 80011ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2102      	movs	r1, #2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fb89 	bl	8004914 <HAL_RCC_ClockConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001208:	f000 fbf6 	bl	80019f8 <Error_Handler>
  }
}
 800120c:	bf00      	nop
 800120e:	3750      	adds	r7, #80	; 0x50
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2220      	movs	r2, #32
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f004 fc75 	bl	8005b1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001232:	4b3a      	ldr	r3, [pc, #232]	; (800131c <MX_ADC1_Init+0x108>)
 8001234:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <MX_ADC1_Init+0x108>)
 800123c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <MX_ADC1_Init+0x108>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <MX_ADC1_Init+0x108>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <MX_ADC1_Init+0x108>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_ADC1_Init+0x108>)
 8001256:	2201      	movs	r2, #1
 8001258:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <MX_ADC1_Init+0x108>)
 800125c:	2204      	movs	r2, #4
 800125e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <MX_ADC1_Init+0x108>)
 8001262:	2200      	movs	r2, #0
 8001264:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <MX_ADC1_Init+0x108>)
 8001268:	2200      	movs	r2, #0
 800126a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MX_ADC1_Init+0x108>)
 800126e:	2202      	movs	r2, #2
 8001270:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_ADC1_Init+0x108>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <MX_ADC1_Init+0x108>)
 800127c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001282:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_ADC1_Init+0x108>)
 8001284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <MX_ADC1_Init+0x108>)
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <MX_ADC1_Init+0x108>)
 8001294:	2200      	movs	r2, #0
 8001296:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_ADC1_Init+0x108>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a0:	481e      	ldr	r0, [pc, #120]	; (800131c <MX_ADC1_Init+0x108>)
 80012a2:	f001 f8db 	bl	800245c <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80012ac:	f000 fba4 	bl	80019f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4818      	ldr	r0, [pc, #96]	; (800131c <MX_ADC1_Init+0x108>)
 80012bc:	f002 f8cc 	bl	8003458 <HAL_ADCEx_MultiModeConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80012c6:	f000 fb97 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_ADC1_Init+0x10c>)
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ce:	2306      	movs	r3, #6
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012d2:	2305      	movs	r3, #5
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d6:	237f      	movs	r3, #127	; 0x7f
 80012d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012da:	2304      	movs	r3, #4
 80012dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_ADC1_Init+0x108>)
 80012e8:	f001 fb3a 	bl	8002960 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80012f2:	f000 fb81 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_ADC1_Init+0x110>)
 80012f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012fa:	230c      	movs	r3, #12
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <MX_ADC1_Init+0x108>)
 8001304:	f001 fb2c 	bl	8002960 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800130e:	f000 fb73 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3730      	adds	r7, #48	; 0x30
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200078f0 	.word	0x200078f0
 8001320:	04300002 	.word	0x04300002
 8001324:	08600004 	.word	0x08600004

08001328 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2220      	movs	r2, #32
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f004 fbf1 	bl	8005b1c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <MX_ADC2_Init+0xe0>)
 800133c:	4a33      	ldr	r2, [pc, #204]	; (800140c <MX_ADC2_Init+0xe4>)
 800133e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001346:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <MX_ADC2_Init+0xe0>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134e:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001354:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <MX_ADC2_Init+0xe0>)
 800135c:	2201      	movs	r2, #1
 800135e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001362:	2204      	movs	r2, #4
 8001364:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001368:	2200      	movs	r2, #0
 800136a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800136c:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_ADC2_Init+0xe0>)
 800136e:	2200      	movs	r2, #0
 8001370:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001374:	2202      	movs	r2, #2
 8001376:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <MX_ADC2_Init+0xe0>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001382:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_ADC2_Init+0xe0>)
 800138a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_ADC2_Init+0xe0>)
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_ADC2_Init+0xe0>)
 800139a:	2200      	movs	r2, #0
 800139c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_ADC2_Init+0xe0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013a6:	4818      	ldr	r0, [pc, #96]	; (8001408 <MX_ADC2_Init+0xe0>)
 80013a8:	f001 f858 	bl	800245c <HAL_ADC_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80013b2:	f000 fb21 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_ADC2_Init+0xe8>)
 80013b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ba:	2306      	movs	r3, #6
 80013bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80013be:	2305      	movs	r3, #5
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c2:	237f      	movs	r3, #127	; 0x7f
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c6:	2304      	movs	r3, #4
 80013c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_ADC2_Init+0xe0>)
 80013d4:	f001 fac4 	bl	8002960 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80013de:	f000 fb0b 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_ADC2_Init+0xec>)
 80013e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013e6:	230c      	movs	r3, #12
 80013e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_ADC2_Init+0xe0>)
 80013f0:	f001 fab6 	bl	8002960 <HAL_ADC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80013fa:	f000 fafd 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000795c 	.word	0x2000795c
 800140c:	50000100 	.word	0x50000100
 8001410:	0c900008 	.word	0x0c900008
 8001414:	10c00010 	.word	0x10c00010

08001418 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2220      	movs	r2, #32
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fb79 	bl	8005b1c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800142a:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <MX_ADC3_Init+0xe0>)
 800142c:	4a33      	ldr	r2, [pc, #204]	; (80014fc <MX_ADC3_Init+0xe4>)
 800142e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001436:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <MX_ADC3_Init+0xe0>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_ADC3_Init+0xe0>)
 800144c:	2201      	movs	r2, #1
 800144e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001452:	2204      	movs	r2, #4
 8001454:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001458:	2200      	movs	r2, #0
 800145a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <MX_ADC3_Init+0xe0>)
 800145e:	2200      	movs	r2, #0
 8001460:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001464:	2202      	movs	r2, #2
 8001466:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <MX_ADC3_Init+0xe0>)
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001472:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_ADC3_Init+0xe0>)
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_ADC3_Init+0xe0>)
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <MX_ADC3_Init+0xe0>)
 8001498:	f000 ffe0 	bl	800245c <HAL_ADC_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80014a2:	f000 faa9 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_ADC3_Init+0xe8>)
 80014a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014aa:	2306      	movs	r3, #6
 80014ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80014ae:	2305      	movs	r3, #5
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014b2:	237f      	movs	r3, #127	; 0x7f
 80014b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b6:	2304      	movs	r3, #4
 80014b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_ADC3_Init+0xe0>)
 80014c4:	f001 fa4c 	bl	8002960 <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 80014ce:	f000 fa93 	bl	80019f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_ADC3_Init+0xec>)
 80014d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014d6:	230c      	movs	r3, #12
 80014d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_ADC3_Init+0xe0>)
 80014e0:	f001 fa3e 	bl	8002960 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 80014ea:	f000 fa85 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200079c8 	.word	0x200079c8
 80014fc:	50000400 	.word	0x50000400
 8001500:	04300002 	.word	0x04300002
 8001504:	08600004 	.word	0x08600004

08001508 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_FMAC_Init+0x20>)
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <MX_FMAC_Init+0x24>)
 8001510:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_FMAC_Init+0x20>)
 8001514:	f002 fc0a 	bl	8003d2c <HAL_FMAC_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800151e:	f000 fa6b 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20007b54 	.word	0x20007b54
 800152c:	40021400 	.word	0x40021400

08001530 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_TIM6_Init+0x64>)
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <MX_TIM6_Init+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <MX_TIM6_Init+0x64>)
 8001548:	2207      	movs	r2, #7
 800154a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_TIM6_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_TIM6_Init+0x64>)
 8001554:	2207      	movs	r2, #7
 8001556:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_TIM6_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <MX_TIM6_Init+0x64>)
 8001560:	f003 fdf4 	bl	800514c <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800156a:	f000 fa45 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800156e:	2320      	movs	r3, #32
 8001570:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_TIM6_Init+0x64>)
 800157c:	f004 f878 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001586:	f000 fa37 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20007b8c 	.word	0x20007b8c
 8001598:	40001000 	.word	0x40001000

0800159c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_TIM7_Init+0x64>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_TIM7_Init+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_TIM7_Init+0x64>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_TIM7_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_TIM7_Init+0x64>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_TIM7_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_TIM7_Init+0x64>)
 80015cc:	f003 fdbe 	bl	800514c <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80015d6:	f000 fa0f 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015da:	2320      	movs	r3, #32
 80015dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <MX_TIM7_Init+0x64>)
 80015e8:	f004 f842 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80015f2:	f000 fa01 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20007bd8 	.word	0x20007bd8
 8001604:	40001400 	.word	0x40001400

08001608 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM20_Init+0xa0>)
 800162a:	4a20      	ldr	r2, [pc, #128]	; (80016ac <MX_TIM20_Init+0xa4>)
 800162c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM20_Init+0xa0>)
 8001630:	2207      	movs	r2, #7
 8001632:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM20_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_TIM20_Init+0xa0>)
 800163c:	2207      	movs	r2, #7
 800163e:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM20_Init+0xa0>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_TIM20_Init+0xa0>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_TIM20_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_TIM20_Init+0xa0>)
 8001654:	f003 fd7a 	bl	800514c <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 800165e:	f000 f9cb 	bl	80019f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM20_Init+0xa0>)
 8001672:	f003 fdc2 	bl	80051fa <HAL_TIM_SlaveConfigSynchro>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 800167c:	f000 f9bc 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001680:	2320      	movs	r3, #32
 8001682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_TIM20_Init+0xa0>)
 8001692:	f003 ffed 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 800169c:	f000 f9ac 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20007c24 	.word	0x20007c24
 80016ac:	40015000 	.word	0x40015000

080016b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_DMA_Init+0x88>)
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <MX_DMA_Init+0x88>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6493      	str	r3, [r2, #72]	; 0x48
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_DMA_Init+0x88>)
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_DMA_Init+0x88>)
 80016d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <MX_DMA_Init+0x88>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6493      	str	r3, [r2, #72]	; 0x48
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_DMA_Init+0x88>)
 80016dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_DMA_Init+0x88>)
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <MX_DMA_Init+0x88>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6493      	str	r3, [r2, #72]	; 0x48
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_DMA_Init+0x88>)
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	200b      	movs	r0, #11
 8001704:	f002 f86b 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001708:	200b      	movs	r0, #11
 800170a:	f002 f882 	bl	8003812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2010      	movs	r0, #16
 8001714:	f002 f863 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001718:	2010      	movs	r0, #16
 800171a:	f002 f87a 	bl	8003812 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2038      	movs	r0, #56	; 0x38
 8001724:	f002 f85b 	bl	80037de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001728:	2038      	movs	r0, #56	; 0x38
 800172a:	f002 f872 	bl	8003812 <HAL_NVIC_EnableIRQ>

}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_GPIO_Init+0x74>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_GPIO_Init+0x74>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_GPIO_Init+0x74>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c4:	d123      	bne.n	800180e <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 80017c6:	f7ff fa67 	bl	8000c98 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 80017ca:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 80017d6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80017da:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a36      	ldr	r2, [pc, #216]	; (80018bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80017ea:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 80017ee:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80017f2:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a30      	ldr	r2, [pc, #192]	; (80018bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001802:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8001806:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800180a:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d123      	bne.n	8001860 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8001818:	f7ff fada 	bl	8000dd0 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8001828:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800182c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800183c:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8001840:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001844:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001854:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8001858:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800185c:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d123      	bne.n	80018b2 <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 800186a:	f7ff fb4d 	bl	8000f08 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 800187a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800187e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800188e:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8001892:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001896:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80018a6:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 80018aa:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80018ae:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20007c70 	.word	0x20007c70
 80018c0:	50000100 	.word	0x50000100
 80018c4:	20007c74 	.word	0x20007c74
 80018c8:	50000400 	.word	0x50000400
 80018cc:	20007c78 	.word	0x20007c78

080018d0 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e0:	d125      	bne.n	800192e <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 80018e2:	f7ff fa25 	bl	8000d30 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x114>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a3e      	ldr	r2, [pc, #248]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x114>)
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f2:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80018f6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80018fa:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 80018fe:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x114>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x114>)
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800190a:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800190e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001912:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 8001916:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x114>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a32      	ldr	r2, [pc, #200]	; (80019e4 <HAL_ADC_ConvCpltCallback+0x114>)
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001922:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8001926:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800192a:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_ADC_ConvCpltCallback+0x118>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d125      	bne.n	8001984 <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb();
 8001938:	f7ff fa96 	bl	8000e68 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_ADC_ConvCpltCallback+0x11c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <HAL_ADC_ConvCpltCallback+0x11c>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800194c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001950:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_ADC_ConvCpltCallback+0x11c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_ADC_ConvCpltCallback+0x11c>)
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001960:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8001964:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001968:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_ADC_ConvCpltCallback+0x11c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_ADC_ConvCpltCallback+0x11c>)
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001978:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 800197c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001980:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_ADC_ConvCpltCallback+0x120>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d125      	bne.n	80019da <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb();
 800198e:	f7ff fb07 	bl	8000fa0 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_ADC_ConvCpltCallback+0x124>)
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80019a2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019a6:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_ADC_ConvCpltCallback+0x124>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_ADC_ConvCpltCallback+0x124>)
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80019b6:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80019ba:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80019be:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_ADC_ConvCpltCallback+0x124>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_ADC_ConvCpltCallback+0x124>)
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019ce:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 80019d2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80019d6:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20007c70 	.word	0x20007c70
 80019e8:	50000100 	.word	0x50000100
 80019ec:	20007c74 	.word	0x20007c74
 80019f0:	50000400 	.word	0x50000400
 80019f4:	20007c78 	.word	0x20007c78

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x44>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6613      	str	r3, [r2, #96]	; 0x60
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x44>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_MspInit+0x44>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_MspInit+0x44>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a3a:	f002 fc49 	bl	80042d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0a2      	sub	sp, #136	; 0x88
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a68:	2250      	movs	r2, #80	; 0x50
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f004 f855 	bl	8005b1c <memset>
  if(hadc->Instance==ADC1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7a:	d169      	bne.n	8001b50 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a86:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 f921 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a98:	f7ff ffae 	bl	80019f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_ADC_MspInit+0x1e4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <HAL_ADC_MspInit+0x1e4>)
 8001aa4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001aa6:	4b62      	ldr	r3, [pc, #392]	; (8001c30 <HAL_ADC_MspInit+0x1e4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10b      	bne.n	8001ac6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001aae:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a60      	ldr	r2, [pc, #384]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aee:	4619      	mov	r1, r3
 8001af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af4:	f002 f9c6 	bl	8003e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001afa:	4a50      	ldr	r2, [pc, #320]	; (8001c3c <HAL_ADC_MspInit+0x1f0>)
 8001afc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001afe:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b00:	2205      	movs	r2, #5
 8001b02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0a:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b16:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b1e:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b26:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b28:	2220      	movs	r2, #32
 8001b2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b2c:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b32:	4841      	ldr	r0, [pc, #260]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b34:	f001 fe88 	bl	8003848 <HAL_DMA_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001b3e:	f7ff ff5b 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
 8001b48:	4a3b      	ldr	r2, [pc, #236]	; (8001c38 <HAL_ADC_MspInit+0x1ec>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b4e:	e0fa      	b.n	8001d46 <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <HAL_ADC_MspInit+0x1f4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d178      	bne.n	8001c4c <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b64:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f8b2 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8001b76:	f7ff ff3f 	bl	80019f8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_ADC_MspInit+0x1e4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <HAL_ADC_MspInit+0x1e4>)
 8001b82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_ADC_MspInit+0x1e4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b98:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_ADC_MspInit+0x1e8>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bbc:	23c0      	movs	r3, #192	; 0xc0
 8001bbe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f002 f957 	bl	8003e84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_ADC_MspInit+0x1fc>)
 8001bda:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c02:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001c06:	2220      	movs	r2, #32
 8001c08:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001c12:	f001 fe19 	bl	8003848 <HAL_DMA_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8001c1c:	f7ff feec 	bl	80019f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
 8001c26:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_ADC_MspInit+0x1f8>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001c2c:	e08b      	b.n	8001d46 <HAL_ADC_MspInit+0x2fa>
 8001c2e:	bf00      	nop
 8001c30:	20008c10 	.word	0x20008c10
 8001c34:	40021000 	.word	0x40021000
 8001c38:	20007a34 	.word	0x20007a34
 8001c3c:	40020008 	.word	0x40020008
 8001c40:	50000100 	.word	0x50000100
 8001c44:	20007a94 	.word	0x20007a94
 8001c48:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a3f      	ldr	r2, [pc, #252]	; (8001d50 <HAL_ADC_MspInit+0x304>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d177      	bne.n	8001d46 <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c60:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 f834 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8001c72:	f7ff fec1 	bl	80019f8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_ADC_MspInit+0x308>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4821      	ldr	r0, [pc, #132]	; (8001d58 <HAL_ADC_MspInit+0x30c>)
 8001cd2:	f002 f8d7 	bl	8003e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cda:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481c      	ldr	r0, [pc, #112]	; (8001d5c <HAL_ADC_MspInit+0x310>)
 8001cec:	f002 f8ca 	bl	8003e84 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_ADC_MspInit+0x318>)
 8001cf4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001cf8:	2225      	movs	r2, #37	; 0x25
 8001cfa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d1c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d20:	2220      	movs	r2, #32
 8001d22:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d2c:	f001 fd8c 	bl	8003848 <HAL_DMA_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8001d36:	f7ff fe5f 	bl	80019f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_ADC_MspInit+0x314>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001d46:	bf00      	nop
 8001d48:	3788      	adds	r7, #136	; 0x88
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	50000400 	.word	0x50000400
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	48001000 	.word	0x48001000
 8001d60:	20007af4 	.word	0x20007af4
 8001d64:	40020408 	.word	0x40020408

08001d68 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_FMAC_MspInit+0x38>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10b      	bne.n	8001d92 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_FMAC_MspInit+0x3c>)
 8001d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_FMAC_MspInit+0x3c>)
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	6493      	str	r3, [r2, #72]	; 0x48
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_FMAC_MspInit+0x3c>)
 8001d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_TIM_Base_MspInit+0x80>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10c      	bne.n	8001dd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8001dd2:	e022      	b.n	8001e1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <HAL_TIM_Base_MspInit+0x88>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10c      	bne.n	8001df8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
}
 8001df6:	e010      	b.n	8001e1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <HAL_TIM_Base_MspInit+0x8c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10b      	bne.n	8001e1a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
}
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40001000 	.word	0x40001000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40001400 	.word	0x40001400
 8001e34:	40015000 	.word	0x40015000

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler+0x4>

08001e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e84:	f000 f8ae 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <DMA1_Channel1_IRQHandler+0x10>)
 8001e92:	f001 fdfc 	bl	8003a8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20007a34 	.word	0x20007a34

08001ea0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Channel6_IRQHandler+0x10>)
 8001ea6:	f001 fdf2 	bl	8003a8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20007a94 	.word	0x20007a94

08001eb4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA2_Channel1_IRQHandler+0x10>)
 8001eba:	f001 fde8 	bl	8003a8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20007af4 	.word	0x20007af4

08001ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef0:	f7ff ffea 	bl	8001ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ef6:	490d      	ldr	r1, [pc, #52]	; (8001f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <LoopForever+0xe>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001efc:	e002      	b.n	8001f04 <LoopCopyDataInit>

08001efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f02:	3304      	adds	r3, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f08:	d3f9      	bcc.n	8001efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <LoopForever+0x16>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f10:	e001      	b.n	8001f16 <LoopFillZerobss>

08001f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f14:	3204      	adds	r2, #4

08001f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f18:	d3fb      	bcc.n	8001f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f003 fe07 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f1e:	f7ff f88f 	bl	8001040 <main>

08001f22 <LoopForever>:

LoopForever:
    b LoopForever
 8001f22:	e7fe      	b.n	8001f22 <LoopForever>
  ldr   r0, =_estack
 8001f24:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	20007874 	.word	0x20007874
  ldr r2, =_sidata
 8001f30:	08005ba4 	.word	0x08005ba4
  ldr r2, =_sbss
 8001f34:	20007874 	.word	0x20007874
  ldr r4, =_ebss
 8001f38:	20008c18 	.word	0x20008c18

08001f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC1_2_IRQHandler>

08001f3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f001 fc3d 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f000 f80e 	bl	8001f70 <HAL_InitTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	e001      	b.n	8001f64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f60:	f7ff fd50 	bl	8001a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f64:	79fb      	ldrb	r3, [r7, #7]

}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_InitTick+0x68>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d022      	beq.n	8001fca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_InitTick+0x6c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_InitTick+0x68>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fc48 	bl	800382e <HAL_SYSTICK_Config>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	d809      	bhi.n	8001fbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001faa:	2200      	movs	r2, #0
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	f001 fc14 	bl	80037de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_InitTick+0x70>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e007      	b.n	8001fce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	e004      	b.n	8001fce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e001      	b.n	8001fce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20007870 	.word	0x20007870
 8001fdc:	20007868 	.word	0x20007868
 8001fe0:	2000786c 	.word	0x2000786c

08001fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_IncTick+0x1c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_IncTick+0x20>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a03      	ldr	r2, [pc, #12]	; (8002000 <HAL_IncTick+0x1c>)
 8001ff4:	6013      	str	r3, [r2, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20008c14 	.word	0x20008c14
 8002004:	20007870 	.word	0x20007870

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20008c14 	.word	0x20008c14

08002020 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3360      	adds	r3, #96	; 0x60
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LL_ADC_SetOffset+0x44>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	03fff000 	.word	0x03fff000

080020d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3360      	adds	r3, #96	; 0x60
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	431a      	orrs	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800215c:	bf00      	nop
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3360      	adds	r3, #96	; 0x60
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	431a      	orrs	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	615a      	str	r2, [r3, #20]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3330      	adds	r3, #48	; 0x30
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	211f      	movs	r1, #31
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	401a      	ands	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 011f 	and.w	r1, r3, #31
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	431a      	orrs	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002242:	b480      	push	{r7}
 8002244:	b087      	sub	sp, #28
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3314      	adds	r3, #20
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	0e5b      	lsrs	r3, r3, #25
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0d1b      	lsrs	r3, r3, #20
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2107      	movs	r1, #7
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	0d1b      	lsrs	r3, r3, #20
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	431a      	orrs	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b0:	43db      	mvns	r3, r3
 80022b2:	401a      	ands	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0318 	and.w	r3, r3, #24
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80022bc:	40d9      	lsrs	r1, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	400b      	ands	r3, r1
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	0007ffff 	.word	0x0007ffff

080022e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 031f 	and.w	r3, r3, #31
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800230c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6093      	str	r3, [r2, #8]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002334:	d101      	bne.n	800233a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800235c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002384:	d101      	bne.n	800238a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <LL_ADC_IsEnabled+0x18>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <LL_ADC_IsEnabled+0x1a>
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023fa:	f043 0204 	orr.w	r2, r3, #4
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d101      	bne.n	8002426 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b08      	cmp	r3, #8
 8002446:	d101      	bne.n	800244c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e19b      	b.n	80027ae <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff fae1 	bl	8001a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff3f 	bl	8002320 <LL_ADC_IsDeepPowerDownEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff25 	bl	80022fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff5a 	bl	8002370 <LL_ADC_IsInternalRegulatorEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff3e 	bl	8002348 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024cc:	4b97      	ldr	r3, [pc, #604]	; (800272c <HAL_ADC_Init+0x2d0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	099b      	lsrs	r3, r3, #6
 80024d2:	4a97      	ldr	r2, [pc, #604]	; (8002730 <HAL_ADC_Init+0x2d4>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	3301      	adds	r3, #1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff3c 	bl	8002370 <LL_ADC_IsInternalRegulatorEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff75 	bl	800240e <LL_ADC_REG_IsConversionOngoing>
 8002524:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 8134 	bne.w	800279c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 8130 	bne.w	800279c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002544:	f043 0202 	orr.w	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff35 	bl	80023c0 <LL_ADC_IsEnabled>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d137      	bne.n	80025cc <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002564:	d004      	beq.n	8002570 <HAL_ADC_Init+0x114>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a72      	ldr	r2, [pc, #456]	; (8002734 <HAL_ADC_Init+0x2d8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10f      	bne.n	8002590 <HAL_ADC_Init+0x134>
 8002570:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002574:	f7ff ff24 	bl	80023c0 <LL_ADC_IsEnabled>
 8002578:	4604      	mov	r4, r0
 800257a:	486e      	ldr	r0, [pc, #440]	; (8002734 <HAL_ADC_Init+0x2d8>)
 800257c:	f7ff ff20 	bl	80023c0 <LL_ADC_IsEnabled>
 8002580:	4603      	mov	r3, r0
 8002582:	4323      	orrs	r3, r4
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e008      	b.n	80025a2 <HAL_ADC_Init+0x146>
 8002590:	4869      	ldr	r0, [pc, #420]	; (8002738 <HAL_ADC_Init+0x2dc>)
 8002592:	f7ff ff15 	bl	80023c0 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_Init+0x15e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5f      	ldr	r2, [pc, #380]	; (8002734 <HAL_ADC_Init+0x2d8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Init+0x162>
 80025ba:	4a60      	ldr	r2, [pc, #384]	; (800273c <HAL_ADC_Init+0x2e0>)
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_Init+0x164>
 80025be:	4a60      	ldr	r2, [pc, #384]	; (8002740 <HAL_ADC_Init+0x2e4>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f7ff fd2a 	bl	8002020 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7f5b      	ldrb	r3, [r3, #29]
 80025d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d106      	bne.n	8002608 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	045b      	lsls	r3, r3, #17
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_ADC_Init+0x2e8>)
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	430b      	orrs	r3, r1
 8002636:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff feee 	bl	8002434 <LL_ADC_INJ_IsConversionOngoing>
 8002658:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d17b      	bne.n	8002758 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d178      	bne.n	8002758 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800266a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002672:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002682:	f023 0302 	bic.w	r3, r3, #2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	430b      	orrs	r3, r1
 800268e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d017      	beq.n	80026c8 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6911      	ldr	r1, [r2, #16]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80026c6:	e013      	b.n	80026f0 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d126      	bne.n	8002748 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002710:	4311      	orrs	r1, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800271c:	430a      	orrs	r2, r1
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	611a      	str	r2, [r3, #16]
 800272a:	e015      	b.n	8002758 <HAL_ADC_Init+0x2fc>
 800272c:	20007868 	.word	0x20007868
 8002730:	053e2d63 	.word	0x053e2d63
 8002734:	50000100 	.word	0x50000100
 8002738:	50000400 	.word	0x50000400
 800273c:	50000300 	.word	0x50000300
 8002740:	50000700 	.word	0x50000700
 8002744:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d10c      	bne.n	800277a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f023 010f 	bic.w	r1, r3, #15
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
 8002778:	e007      	b.n	800278a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 020f 	bic.w	r2, r2, #15
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	65da      	str	r2, [r3, #92]	; 0x5c
 800279a:	e007      	b.n	80027ac <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	f043 0210 	orr.w	r2, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	bf00      	nop

080027b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_Start_DMA+0x20>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a57      	ldr	r2, [pc, #348]	; (8002930 <HAL_ADC_Start_DMA+0x178>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_Start_DMA+0x24>
 80027d8:	4b56      	ldr	r3, [pc, #344]	; (8002934 <HAL_ADC_Start_DMA+0x17c>)
 80027da:	e000      	b.n	80027de <HAL_ADC_Start_DMA+0x26>
 80027dc:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_ADC_Start_DMA+0x180>)
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd7e 	bl	80022e0 <LL_ADC_GetMultimode>
 80027e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe0f 	bl	800240e <LL_ADC_REG_IsConversionOngoing>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 8094 	bne.w	8002920 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Start_DMA+0x4e>
 8002802:	2302      	movs	r3, #2
 8002804:	e08f      	b.n	8002926 <HAL_ADC_Start_DMA+0x16e>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <HAL_ADC_Start_DMA+0x184>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d008      	beq.n	800282a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b05      	cmp	r3, #5
 8002822:	d002      	beq.n	800282a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b09      	cmp	r3, #9
 8002828:	d173      	bne.n	8002912 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fcc4 	bl	80031b8 <ADC_Enable>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d166      	bne.n	8002908 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a37      	ldr	r2, [pc, #220]	; (8002930 <HAL_ADC_Start_DMA+0x178>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d002      	beq.n	800285e <HAL_ADC_Start_DMA+0xa6>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e001      	b.n	8002862 <HAL_ADC_Start_DMA+0xaa>
 800285e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4293      	cmp	r3, r2
 8002868:	d002      	beq.n	8002870 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288c:	f023 0206 	bic.w	r2, r3, #6
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	661a      	str	r2, [r3, #96]	; 0x60
 8002894:	e002      	b.n	800289c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_ADC_Start_DMA+0x188>)
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <HAL_ADC_Start_DMA+0x18c>)
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <HAL_ADC_Start_DMA+0x190>)
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	221c      	movs	r2, #28
 80028ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0210 	orr.w	r2, r2, #16
 80028d2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3340      	adds	r3, #64	; 0x40
 80028ee:	4619      	mov	r1, r3
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f001 f850 	bl	8003998 <HAL_DMA_Start_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd70 	bl	80023e6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002906:	e00d      	b.n	8002924 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002910:	e008      	b.n	8002924 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800291e:	e001      	b.n	8002924 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002920:	2302      	movs	r3, #2
 8002922:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	50000100 	.word	0x50000100
 8002934:	50000300 	.word	0x50000300
 8002938:	50000700 	.word	0x50000700
 800293c:	50000400 	.word	0x50000400
 8002940:	080032e5 	.word	0x080032e5
 8002944:	080033bd 	.word	0x080033bd
 8002948:	080033d9 	.word	0x080033d9

0800294c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0b6      	sub	sp, #216	; 0xd8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x24>
 800297e:	2302      	movs	r3, #2
 8002980:	f000 bc04 	b.w	800318c <HAL_ADC_ConfigChannel+0x82c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fd3c 	bl	800240e <LL_ADC_REG_IsConversionOngoing>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 83e8 	bne.w	800316e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f7ff fc1d 	bl	80021ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fd2a 	bl	800240e <LL_ADC_REG_IsConversionOngoing>
 80029ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fd36 	bl	8002434 <LL_ADC_INJ_IsConversionOngoing>
 80029c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 81d9 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 81d4 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029e8:	d10f      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	4619      	mov	r1, r3
 80029f6:	f7ff fc24 	bl	8002242 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fbcb 	bl	800219e <LL_ADC_SetSamplingTimeCommonConfig>
 8002a08:	e00e      	b.n	8002a28 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f7ff fc13 	bl	8002242 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fbbb 	bl	800219e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d022      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a5a:	f7ff fb15 	bl	8002088 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7ff fb61 	bl	8002132 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x126>
 8002a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a84:	e000      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x128>
 8002a86:	2300      	movs	r3, #0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f7ff fb6d 	bl	8002168 <LL_ADC_SetOffsetSaturation>
 8002a8e:	e17b      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fb1a 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x15c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fb0f 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e01e      	b.n	8002afa <HAL_ADC_ConfigChannel+0x19a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fb04 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e004      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x1b2>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	e018      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x1e4>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b36:	2320      	movs	r3, #32
 8002b38:	e004      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d106      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fad3 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fab7 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x222>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff faac 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	e01e      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x260>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff faa1 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ba0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e004      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x278>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	e018      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x2aa>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e004      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d106      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2200      	movs	r2, #0
 8002c14:	2101      	movs	r1, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fa70 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fa54 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x2e8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2102      	movs	r1, #2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fa49 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	f003 021f 	and.w	r2, r3, #31
 8002c46:	e01e      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x326>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fa3e 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e004      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x33e>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	e016      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x36c>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e004      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fa0f 	bl	80020fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f9f3 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x3aa>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f9e8 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	e017      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x3da>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2103      	movs	r1, #3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f9dd 	bl	80020d0 <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e003      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d105      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x3f2>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	e011      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x416>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2103      	movs	r1, #3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f9ba 	bl	80020fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fb17 	bl	80023c0 <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 813d 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7ff fa76 	bl	8002298 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4aa2      	ldr	r2, [pc, #648]	; (800303c <HAL_ADC_ConfigChannel+0x6dc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	f040 812e 	bne.w	8003014 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x480>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	bf94      	ite	ls
 8002dd8:	2301      	movls	r3, #1
 8002dda:	2300      	movhi	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e019      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x4b4>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	bf94      	ite	ls
 8002e0e:	2301      	movls	r3, #1
 8002e10:	2300      	movhi	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d079      	beq.n	8002f0c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x4d4>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	069b      	lsls	r3, r3, #26
 8002e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e32:	e015      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x500>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	069b      	lsls	r3, r3, #26
 8002e5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x520>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	3301      	adds	r3, #1
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	e017      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x550>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e98:	2320      	movs	r3, #32
 8002e9a:	e003      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	ea42 0103 	orr.w	r1, r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x576>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	051b      	lsls	r3, r3, #20
 8002ed4:	e018      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x5a8>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	e07e      	b.n	800300a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x5c8>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	069b      	lsls	r3, r3, #26
 8002f22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f26:	e015      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x5f4>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f40:	2320      	movs	r3, #32
 8002f42:	e003      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	069b      	lsls	r3, r3, #26
 8002f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x614>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	e017      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x644>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	61fb      	str	r3, [r7, #28]
  return result;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e003      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	ea42 0103 	orr.w	r1, r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x670>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b1e      	subs	r3, #30
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fce:	e01b      	b.n	8003008 <HAL_ADC_ConfigChannel+0x6a8>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	613b      	str	r3, [r7, #16]
  return result;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002fe8:	2320      	movs	r3, #32
 8002fea:	e003      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	3b1e      	subs	r3, #30
 8003002:	051b      	lsls	r3, r3, #20
 8003004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003008:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300e:	4619      	mov	r1, r3
 8003010:	f7ff f917 	bl	8002242 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_ADC_ConfigChannel+0x6e0>)
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80af 	beq.w	8003180 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302a:	d004      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x6d6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_ADC_ConfigChannel+0x6e4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10a      	bne.n	800304c <HAL_ADC_ConfigChannel+0x6ec>
 8003036:	4b04      	ldr	r3, [pc, #16]	; (8003048 <HAL_ADC_ConfigChannel+0x6e8>)
 8003038:	e009      	b.n	800304e <HAL_ADC_ConfigChannel+0x6ee>
 800303a:	bf00      	nop
 800303c:	407f0000 	.word	0x407f0000
 8003040:	80080000 	.word	0x80080000
 8003044:	50000100 	.word	0x50000100
 8003048:	50000300 	.word	0x50000300
 800304c:	4b51      	ldr	r3, [pc, #324]	; (8003194 <HAL_ADC_ConfigChannel+0x834>)
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f80c 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 8003054:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <HAL_ADC_ConfigChannel+0x838>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_ADC_ConfigChannel+0x70c>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_ADC_ConfigChannel+0x83c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d134      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800306c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d12e      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003080:	d17e      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800308a:	d004      	beq.n	8003096 <HAL_ADC_ConfigChannel+0x736>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a43      	ldr	r2, [pc, #268]	; (80031a0 <HAL_ADC_ConfigChannel+0x840>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x73a>
 8003096:	4a43      	ldr	r2, [pc, #268]	; (80031a4 <HAL_ADC_ConfigChannel+0x844>)
 8003098:	e000      	b.n	800309c <HAL_ADC_ConfigChannel+0x73c>
 800309a:	4a3e      	ldr	r2, [pc, #248]	; (8003194 <HAL_ADC_ConfigChannel+0x834>)
 800309c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f7fe ffcd 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <HAL_ADC_ConfigChannel+0x848>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	4a3e      	ldr	r2, [pc, #248]	; (80031ac <HAL_ADC_ConfigChannel+0x84c>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030c6:	e002      	b.n	80030ce <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f9      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d4:	e054      	b.n	8003180 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <HAL_ADC_ConfigChannel+0x850>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d120      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d11a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f4:	d144      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fe:	d004      	beq.n	800310a <HAL_ADC_ConfigChannel+0x7aa>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <HAL_ADC_ConfigChannel+0x840>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_ADC_ConfigChannel+0x7ae>
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_ADC_ConfigChannel+0x844>)
 800310c:	e000      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7b0>
 800310e:	4a21      	ldr	r2, [pc, #132]	; (8003194 <HAL_ADC_ConfigChannel+0x834>)
 8003110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f7fe ff93 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003120:	e02e      	b.n	8003180 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a23      	ldr	r2, [pc, #140]	; (80031b4 <HAL_ADC_ConfigChannel+0x854>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d129      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800312c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d123      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_ADC_ConfigChannel+0x840>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01e      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314a:	d004      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x7f6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <HAL_ADC_ConfigChannel+0x840>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x7fa>
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_ADC_ConfigChannel+0x844>)
 8003158:	e000      	b.n	800315c <HAL_ADC_ConfigChannel+0x7fc>
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_ADC_ConfigChannel+0x834>)
 800315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7fe ff6d 	bl	8002046 <LL_ADC_SetCommonPathInternalCh>
 800316c:	e008      	b.n	8003180 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003188:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800318c:	4618      	mov	r0, r3
 800318e:	37d8      	adds	r7, #216	; 0xd8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	50000700 	.word	0x50000700
 8003198:	c3210000 	.word	0xc3210000
 800319c:	90c00010 	.word	0x90c00010
 80031a0:	50000100 	.word	0x50000100
 80031a4:	50000300 	.word	0x50000300
 80031a8:	20007868 	.word	0x20007868
 80031ac:	053e2d63 	.word	0x053e2d63
 80031b0:	c7520000 	.word	0xc7520000
 80031b4:	cb840000 	.word	0xcb840000

080031b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f8f9 	bl	80023c0 <LL_ADC_IsEnabled>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d176      	bne.n	80032c2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <ADC_Enable+0x114>)
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	f043 0210 	orr.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e062      	b.n	80032c4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f8c8 	bl	8002398 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d004      	beq.n	800321c <ADC_Enable+0x64>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2e      	ldr	r2, [pc, #184]	; (80032d0 <ADC_Enable+0x118>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <ADC_Enable+0x68>
 800321c:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <ADC_Enable+0x11c>)
 800321e:	e000      	b.n	8003222 <ADC_Enable+0x6a>
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <ADC_Enable+0x120>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ff22 	bl	800206c <LL_ADC_GetCommonPathInternalCh>
 8003228:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800322a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800322e:	2b00      	cmp	r3, #0
 8003230:	d013      	beq.n	800325a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003232:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <ADC_Enable+0x124>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <ADC_Enable+0x128>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800324c:	e002      	b.n	8003254 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3b01      	subs	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f9      	bne.n	800324e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800325a:	f7fe fed5 	bl	8002008 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003260:	e028      	b.n	80032b4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f8aa 	bl	80023c0 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff f88e 	bl	8002398 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800327c:	f7fe fec4 	bl	8002008 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d914      	bls.n	80032b4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d00d      	beq.n	80032b4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	f043 0210 	orr.w	r2, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d1cf      	bne.n	8003262 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	8000003f 	.word	0x8000003f
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000300 	.word	0x50000300
 80032d8:	50000700 	.word	0x50000700
 80032dc:	20007868 	.word	0x20007868
 80032e0:	053e2d63 	.word	0x053e2d63

080032e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d14b      	bne.n	8003396 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d021      	beq.n	800335c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe ff51 	bl	80021c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d032      	beq.n	800338e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d12b      	bne.n	800338e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11f      	bne.n	800338e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	65da      	str	r2, [r3, #92]	; 0x5c
 800335a:	e018      	b.n	800338e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d111      	bne.n	800338e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7fe fa9e 	bl	80018d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003394:	e00e      	b.n	80033b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff fad2 	bl	800294c <HAL_ADC_ErrorCallback>
}
 80033a8:	e004      	b.n	80033b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7fe f9f2 	bl	80017b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff faa4 	bl	800294c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <LL_ADC_IsEnabled>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <LL_ADC_IsEnabled+0x18>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <LL_ADC_IsEnabled+0x1a>
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_REG_IsConversionOngoing>:
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d101      	bne.n	800344a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b0a1      	sub	sp, #132	; 0x84
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003472:	2302      	movs	r3, #2
 8003474:	e0cb      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800347e:	2300      	movs	r3, #0
 8003480:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003482:	2300      	movs	r3, #0
 8003484:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800348e:	d102      	bne.n	8003496 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	e001      	b.n	800349a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0aa      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ffb9 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 80034c0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ffb3 	bl	8003432 <LL_ADC_REG_IsConversionOngoing>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 808c 	bne.w	80035ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80034d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 8088 	bne.w	80035ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e4:	d004      	beq.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80034f0:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80034f2:	e000      	b.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80034f4:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80034f6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d041      	beq.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003512:	035b      	lsls	r3, r3, #13
 8003514:	430b      	orrs	r3, r1
 8003516:	431a      	orrs	r2, r3
 8003518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003524:	d004      	beq.n	8003530 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10f      	bne.n	8003550 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003530:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003534:	f7ff ff6a 	bl	800340c <LL_ADC_IsEnabled>
 8003538:	4604      	mov	r4, r0
 800353a:	4837      	ldr	r0, [pc, #220]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800353c:	f7ff ff66 	bl	800340c <LL_ADC_IsEnabled>
 8003540:	4603      	mov	r3, r0
 8003542:	4323      	orrs	r3, r4
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e008      	b.n	8003562 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003550:	4834      	ldr	r0, [pc, #208]	; (8003624 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003552:	f7ff ff5b 	bl	800340c <LL_ADC_IsEnabled>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d04c      	beq.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6811      	ldr	r1, [r2, #0]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	6892      	ldr	r2, [r2, #8]
 800357a:	430a      	orrs	r2, r1
 800357c:	431a      	orrs	r2, r3
 800357e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003580:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003582:	e03d      	b.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003598:	d004      	beq.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10f      	bne.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80035a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80035a8:	f7ff ff30 	bl	800340c <LL_ADC_IsEnabled>
 80035ac:	4604      	mov	r4, r0
 80035ae:	481a      	ldr	r0, [pc, #104]	; (8003618 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80035b0:	f7ff ff2c 	bl	800340c <LL_ADC_IsEnabled>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4323      	orrs	r3, r4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e008      	b.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80035c4:	4817      	ldr	r0, [pc, #92]	; (8003624 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80035c6:	f7ff ff21 	bl	800340c <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d012      	beq.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035e2:	f023 030f 	bic.w	r3, r3, #15
 80035e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035ea:	e009      	b.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80035fe:	e000      	b.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003600:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800360a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800360e:	4618      	mov	r0, r3
 8003610:	3784      	adds	r7, #132	; 0x84
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}
 8003616:	bf00      	nop
 8003618:	50000100 	.word	0x50000100
 800361c:	50000300 	.word	0x50000300
 8003620:	50000700 	.word	0x50000700
 8003624:	50000400 	.word	0x50000400

08003628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <__NVIC_SetPriorityGrouping+0x44>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003644:	4013      	ands	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <__NVIC_SetPriorityGrouping+0x44>)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	60d3      	str	r3, [r2, #12]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <__NVIC_GetPriorityGrouping+0x18>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	f003 0307 	and.w	r3, r3, #7
}
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	2b00      	cmp	r3, #0
 800369c:	db0b      	blt.n	80036b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	4907      	ldr	r1, [pc, #28]	; (80036c4 <__NVIC_EnableIRQ+0x38>)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	2001      	movs	r0, #1
 80036ae:	fa00 f202 	lsl.w	r2, r0, r2
 80036b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	e000e100 	.word	0xe000e100

080036c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db0a      	blt.n	80036f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	490c      	ldr	r1, [pc, #48]	; (8003714 <__NVIC_SetPriority+0x4c>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f0:	e00a      	b.n	8003708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4908      	ldr	r1, [pc, #32]	; (8003718 <__NVIC_SetPriority+0x50>)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3b04      	subs	r3, #4
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	440b      	add	r3, r1
 8003706:	761a      	strb	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f1c3 0307 	rsb	r3, r3, #7
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf28      	it	cs
 800373a:	2304      	movcs	r3, #4
 800373c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3304      	adds	r3, #4
 8003742:	2b06      	cmp	r3, #6
 8003744:	d902      	bls.n	800374c <NVIC_EncodePriority+0x30>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3b03      	subs	r3, #3
 800374a:	e000      	b.n	800374e <NVIC_EncodePriority+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	401a      	ands	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003764:	f04f 31ff 	mov.w	r1, #4294967295
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	43d9      	mvns	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	4313      	orrs	r3, r2
         );
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003794:	d301      	bcc.n	800379a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <SysTick_Config+0x40>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a2:	210f      	movs	r1, #15
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f7ff ff8e 	bl	80036c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <SysTick_Config+0x40>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b2:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <SysTick_Config+0x40>)
 80037b4:	2207      	movs	r2, #7
 80037b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff29 	bl	8003628 <__NVIC_SetPriorityGrouping>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037ec:	f7ff ff40 	bl	8003670 <__NVIC_GetPriorityGrouping>
 80037f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	6978      	ldr	r0, [r7, #20]
 80037f8:	f7ff ff90 	bl	800371c <NVIC_EncodePriority>
 80037fc:	4602      	mov	r2, r0
 80037fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff5f 	bl	80036c8 <__NVIC_SetPriority>
}
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff33 	bl	800368c <__NVIC_EnableIRQ>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ffa4 	bl	8003784 <SysTick_Config>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e08d      	b.n	8003976 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_DMA_Init+0x138>)
 8003862:	429a      	cmp	r2, r3
 8003864:	d80f      	bhi.n	8003886 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	4b45      	ldr	r3, [pc, #276]	; (8003984 <HAL_DMA_Init+0x13c>)
 800386e:	4413      	add	r3, r2
 8003870:	4a45      	ldr	r2, [pc, #276]	; (8003988 <HAL_DMA_Init+0x140>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	009a      	lsls	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a42      	ldr	r2, [pc, #264]	; (800398c <HAL_DMA_Init+0x144>)
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
 8003884:	e00e      	b.n	80038a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4b40      	ldr	r3, [pc, #256]	; (8003990 <HAL_DMA_Init+0x148>)
 800388e:	4413      	add	r3, r2
 8003890:	4a3d      	ldr	r2, [pc, #244]	; (8003988 <HAL_DMA_Init+0x140>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a3c      	ldr	r2, [pc, #240]	; (8003994 <HAL_DMA_Init+0x14c>)
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9b6 	bl	8003c68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003904:	d102      	bne.n	800390c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003920:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d010      	beq.n	800394c <HAL_DMA_Init+0x104>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d80c      	bhi.n	800394c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f9d6 	bl	8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	e008      	b.n	800395e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40020407 	.word	0x40020407
 8003984:	bffdfff8 	.word	0xbffdfff8
 8003988:	cccccccd 	.word	0xcccccccd
 800398c:	40020000 	.word	0x40020000
 8003990:	bffdfbf8 	.word	0xbffdfbf8
 8003994:	40020400 	.word	0x40020400

08003998 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_DMA_Start_IT+0x20>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e066      	b.n	8003a86 <HAL_DMA_Start_IT+0xee>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d155      	bne.n	8003a78 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f8fb 	bl	8003bec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 020e 	orr.w	r2, r2, #14
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e00f      	b.n	8003a30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 020a 	orr.w	r2, r2, #10
 8003a2e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e005      	b.n	8003a84 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
 8003a82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2204      	movs	r2, #4
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d026      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x7a>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d021      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0204 	bic.w	r2, r2, #4
 8003ae0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f003 021f 	and.w	r2, r3, #31
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2104      	movs	r1, #4
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d071      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b06:	e06c      	b.n	8003be2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2202      	movs	r2, #2
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02e      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d029      	beq.n	8003b7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 020a 	bic.w	r2, r2, #10
 8003b42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2102      	movs	r1, #2
 8003b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d038      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b78:	e033      	b.n	8003be2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2208      	movs	r2, #8
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02a      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d025      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 020e 	bic.w	r2, r2, #14
 8003ba6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
}
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	f003 021f 	and.w	r2, r3, #31
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f202 	lsl.w	r2, r1, r2
 8003c28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d108      	bne.n	8003c4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c4a:	e007      	b.n	8003c5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d802      	bhi.n	8003c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003c7c:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e001      	b.n	8003c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c84:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	3b08      	subs	r3, #8
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2201      	movs	r2, #1
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40020407 	.word	0x40020407
 8003cd4:	40020800 	.word	0x40020800
 8003cd8:	40020820 	.word	0x40020820
 8003cdc:	cccccccd 	.word	0xcccccccd
 8003ce0:	40020880 	.word	0x40020880

08003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d06:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2201      	movs	r2, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	1000823f 	.word	0x1000823f
 8003d28:	40020940 	.word	0x40020940

08003d2c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e033      	b.n	8003da6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe f808 	bl	8001d68 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f854 	bl	8003e0c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f822 	bl	8003dae <FMAC_Reset>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	f043 0210 	orr.w	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	22a0      	movs	r2, #160	; 0xa0
 8003d80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	e008      	b.n	8003d9c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db6:	f7fe f927 	bl	8002008 <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003dca:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003dcc:	e00f      	b.n	8003dee <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8003dce:	f7fe f91b 	bl	8002008 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ddc:	d907      	bls.n	8003dee <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e00a      	b.n	8003e04 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e8      	bne.n	8003dce <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f807 	bl	8003e28 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f81b 	bl	8003e56 <FMAC_ResetOutputStateAndDataPointers>
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e92:	e15a      	b.n	800414a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 814c 	beq.w	8004144 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d005      	beq.n	8003ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d130      	bne.n	8003f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efa:	2201      	movs	r2, #1
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 0201 	and.w	r2, r3, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d017      	beq.n	8003f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d123      	bne.n	8003fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	08da      	lsrs	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3208      	adds	r2, #8
 8003f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	6939      	ldr	r1, [r7, #16]
 8003fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0203 	and.w	r2, r3, #3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a6 	beq.w	8004144 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff8:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <HAL_GPIO_Init+0x2e4>)
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	4a5a      	ldr	r2, [pc, #360]	; (8004168 <HAL_GPIO_Init+0x2e4>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6613      	str	r3, [r2, #96]	; 0x60
 8004004:	4b58      	ldr	r3, [pc, #352]	; (8004168 <HAL_GPIO_Init+0x2e4>)
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004010:	4a56      	ldr	r2, [pc, #344]	; (800416c <HAL_GPIO_Init+0x2e8>)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	3302      	adds	r3, #2
 8004018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	220f      	movs	r2, #15
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4013      	ands	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800403a:	d01f      	beq.n	800407c <HAL_GPIO_Init+0x1f8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a4c      	ldr	r2, [pc, #304]	; (8004170 <HAL_GPIO_Init+0x2ec>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d019      	beq.n	8004078 <HAL_GPIO_Init+0x1f4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <HAL_GPIO_Init+0x2f0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_GPIO_Init+0x1f0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <HAL_GPIO_Init+0x2f4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00d      	beq.n	8004070 <HAL_GPIO_Init+0x1ec>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a49      	ldr	r2, [pc, #292]	; (800417c <HAL_GPIO_Init+0x2f8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <HAL_GPIO_Init+0x1e8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a48      	ldr	r2, [pc, #288]	; (8004180 <HAL_GPIO_Init+0x2fc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_GPIO_Init+0x1e4>
 8004064:	2305      	movs	r3, #5
 8004066:	e00a      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004068:	2306      	movs	r3, #6
 800406a:	e008      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 800406c:	2304      	movs	r3, #4
 800406e:	e006      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004070:	2303      	movs	r3, #3
 8004072:	e004      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004074:	2302      	movs	r3, #2
 8004076:	e002      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <HAL_GPIO_Init+0x1fa>
 800407c:	2300      	movs	r3, #0
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	f002 0203 	and.w	r2, r2, #3
 8004084:	0092      	lsls	r2, r2, #2
 8004086:	4093      	lsls	r3, r2
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800408e:	4937      	ldr	r1, [pc, #220]	; (800416c <HAL_GPIO_Init+0x2e8>)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	3302      	adds	r3, #2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800409c:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_GPIO_Init+0x300>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c0:	4a30      	ldr	r2, [pc, #192]	; (8004184 <HAL_GPIO_Init+0x300>)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040c6:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_GPIO_Init+0x300>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ea:	4a26      	ldr	r2, [pc, #152]	; (8004184 <HAL_GPIO_Init+0x300>)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_GPIO_Init+0x300>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_GPIO_Init+0x300>)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <HAL_GPIO_Init+0x300>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800413e:	4a11      	ldr	r2, [pc, #68]	; (8004184 <HAL_GPIO_Init+0x300>)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3301      	adds	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	f47f ae9d 	bne.w	8003e94 <HAL_GPIO_Init+0x10>
  }
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40021000 	.word	0x40021000
 800416c:	40010000 	.word	0x40010000
 8004170:	48000400 	.word	0x48000400
 8004174:	48000800 	.word	0x48000800
 8004178:	48000c00 	.word	0x48000c00
 800417c:	48001000 	.word	0x48001000
 8004180:	48001400 	.word	0x48001400
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d141      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004196:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d131      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041a4:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041aa:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041b4:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041bc:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041c4:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2232      	movs	r2, #50	; 0x32
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	4a3f      	ldr	r2, [pc, #252]	; (80042cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	0c9b      	lsrs	r3, r3, #18
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041da:	e002      	b.n	80041e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e2:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ee:	d102      	bne.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f2      	bne.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041f6:	4b33      	ldr	r3, [pc, #204]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d158      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e057      	b.n	80042b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420e:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004218:	e04d      	b.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004220:	d141      	bne.n	80042a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422e:	d131      	bne.n	8004294 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004248:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2232      	movs	r2, #50	; 0x32
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	0c9b      	lsrs	r3, r3, #18
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004266:	e002      	b.n	800426e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3b01      	subs	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d102      	bne.n	8004282 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f2      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d112      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e011      	b.n	80042b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042a4:	e007      	b.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40007000 	.word	0x40007000
 80042c8:	20007868 	.word	0x20007868
 80042cc:	431bde83 	.word	0x431bde83

080042d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042de:	6093      	str	r3, [r2, #8]
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40007000 	.word	0x40007000

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e2fe      	b.n	8004900 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d075      	beq.n	80043fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800430e:	4b97      	ldr	r3, [pc, #604]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004318:	4b94      	ldr	r3, [pc, #592]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	d102      	bne.n	800432e <HAL_RCC_OscConfig+0x3e>
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d002      	beq.n	8004334 <HAL_RCC_OscConfig+0x44>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d10b      	bne.n	800434c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	4b8d      	ldr	r3, [pc, #564]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d05b      	beq.n	80043f8 <HAL_RCC_OscConfig+0x108>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d157      	bne.n	80043f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e2d9      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d106      	bne.n	8004364 <HAL_RCC_OscConfig+0x74>
 8004356:	4b85      	ldr	r3, [pc, #532]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a84      	ldr	r2, [pc, #528]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e01d      	b.n	80043a0 <HAL_RCC_OscConfig+0xb0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x98>
 800436e:	4b7f      	ldr	r3, [pc, #508]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7e      	ldr	r2, [pc, #504]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b7c      	ldr	r3, [pc, #496]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7b      	ldr	r2, [pc, #492]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e00b      	b.n	80043a0 <HAL_RCC_OscConfig+0xb0>
 8004388:	4b78      	ldr	r3, [pc, #480]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a77      	ldr	r2, [pc, #476]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800438e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4b75      	ldr	r3, [pc, #468]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a74      	ldr	r2, [pc, #464]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800439a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fd fe2e 	bl	8002008 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fd fe2a 	bl	8002008 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e29e      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c2:	4b6a      	ldr	r3, [pc, #424]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0xc0>
 80043ce:	e014      	b.n	80043fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fe1a 	bl	8002008 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd fe16 	bl	8002008 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e28a      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ea:	4b60      	ldr	r3, [pc, #384]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0xe8>
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d075      	beq.n	80044f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004406:	4b59      	ldr	r3, [pc, #356]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004410:	4b56      	ldr	r3, [pc, #344]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b0c      	cmp	r3, #12
 800441e:	d102      	bne.n	8004426 <HAL_RCC_OscConfig+0x136>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d002      	beq.n	800442c <HAL_RCC_OscConfig+0x13c>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d11f      	bne.n	800446c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800442c:	4b4f      	ldr	r3, [pc, #316]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_OscConfig+0x154>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e25d      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b49      	ldr	r3, [pc, #292]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	4946      	ldr	r1, [pc, #280]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004458:	4b45      	ldr	r3, [pc, #276]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fd fd87 	bl	8001f70 <HAL_InitTick>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d043      	beq.n	80044f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e249      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d023      	beq.n	80044bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004474:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3c      	ldr	r2, [pc, #240]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800447a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd fdc2 	bl	8002008 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004488:	f7fd fdbe 	bl	8002008 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e232      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449a:	4b34      	ldr	r3, [pc, #208]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	492d      	ldr	r1, [pc, #180]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
 80044ba:	e01a      	b.n	80044f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 80044c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fd fd9e 	bl	8002008 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d0:	f7fd fd9a 	bl	8002008 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e20e      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x1e0>
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d041      	beq.n	8004582 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01c      	beq.n	8004540 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004516:	f7fd fd77 	bl	8002008 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451e:	f7fd fd73 	bl	8002008 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e1e7      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004530:	4b0e      	ldr	r3, [pc, #56]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ef      	beq.n	800451e <HAL_RCC_OscConfig+0x22e>
 800453e:	e020      	b.n	8004582 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <HAL_RCC_OscConfig+0x27c>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fd fd5a 	bl	8002008 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004556:	e00d      	b.n	8004574 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004558:	f7fd fd56 	bl	8002008 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d906      	bls.n	8004574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1ca      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	2000786c 	.word	0x2000786c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004574:	4b8c      	ldr	r3, [pc, #560]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ea      	bne.n	8004558 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80a6 	beq.w	80046dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004594:	4b84      	ldr	r3, [pc, #528]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2b4>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x2b6>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00d      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	4b7f      	ldr	r3, [pc, #508]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	4a7e      	ldr	r2, [pc, #504]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6593      	str	r3, [r2, #88]	; 0x58
 80045b6:	4b7c      	ldr	r3, [pc, #496]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045c2:	2301      	movs	r3, #1
 80045c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c6:	4b79      	ldr	r3, [pc, #484]	; (80047ac <HAL_RCC_OscConfig+0x4bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d2:	4b76      	ldr	r3, [pc, #472]	; (80047ac <HAL_RCC_OscConfig+0x4bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a75      	ldr	r2, [pc, #468]	; (80047ac <HAL_RCC_OscConfig+0x4bc>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045de:	f7fd fd13 	bl	8002008 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fd fd0f 	bl	8002008 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e183      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f8:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <HAL_RCC_OscConfig+0x4bc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d108      	bne.n	800461e <HAL_RCC_OscConfig+0x32e>
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	4a65      	ldr	r2, [pc, #404]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800461c:	e024      	b.n	8004668 <HAL_RCC_OscConfig+0x378>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b05      	cmp	r3, #5
 8004624:	d110      	bne.n	8004648 <HAL_RCC_OscConfig+0x358>
 8004626:	4b60      	ldr	r3, [pc, #384]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	4a5e      	ldr	r2, [pc, #376]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800462e:	f043 0304 	orr.w	r3, r3, #4
 8004632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004636:	4b5c      	ldr	r3, [pc, #368]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	4a5a      	ldr	r2, [pc, #360]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004646:	e00f      	b.n	8004668 <HAL_RCC_OscConfig+0x378>
 8004648:	4b57      	ldr	r3, [pc, #348]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	4a56      	ldr	r2, [pc, #344]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004658:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	4a52      	ldr	r2, [pc, #328]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fd fcca 	bl	8002008 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd fcc6 	bl	8002008 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e138      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468e:	4b46      	ldr	r3, [pc, #280]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ed      	beq.n	8004678 <HAL_RCC_OscConfig+0x388>
 800469c:	e015      	b.n	80046ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fd fcb3 	bl	8002008 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fd fcaf 	bl	8002008 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e121      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046bc:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ed      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ca:	7ffb      	ldrb	r3, [r7, #31]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d0:	4b35      	ldr	r3, [pc, #212]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	4a34      	ldr	r2, [pc, #208]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80046d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d03c      	beq.n	8004762 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01c      	beq.n	800472a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80046f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd fc82 	bl	8002008 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004708:	f7fd fc7e 	bl	8002008 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0f2      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800471a:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800471c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ef      	beq.n	8004708 <HAL_RCC_OscConfig+0x418>
 8004728:	e01b      	b.n	8004762 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800472a:	4b1f      	ldr	r3, [pc, #124]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800472c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fd fc65 	bl	8002008 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004742:	f7fd fc61 	bl	8002008 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e0d5      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ef      	bne.n	8004742 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80c9 	beq.w	80048fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b0c      	cmp	r3, #12
 8004776:	f000 8083 	beq.w	8004880 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d15e      	bne.n	8004840 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <HAL_RCC_OscConfig+0x4b8>)
 8004788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800478c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fd fc3b 	bl	8002008 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004794:	e00c      	b.n	80047b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004796:	f7fd fc37 	bl	8002008 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d905      	bls.n	80047b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0ab      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b0:	4b55      	ldr	r3, [pc, #340]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ec      	bne.n	8004796 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047bc:	4b52      	ldr	r3, [pc, #328]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	4b52      	ldr	r3, [pc, #328]	; (800490c <HAL_RCC_OscConfig+0x61c>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6a11      	ldr	r1, [r2, #32]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047cc:	3a01      	subs	r2, #1
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047d6:	0212      	lsls	r2, r2, #8
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047de:	0852      	lsrs	r2, r2, #1
 80047e0:	3a01      	subs	r2, #1
 80047e2:	0552      	lsls	r2, r2, #21
 80047e4:	4311      	orrs	r1, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ea:	0852      	lsrs	r2, r2, #1
 80047ec:	3a01      	subs	r2, #1
 80047ee:	0652      	lsls	r2, r2, #25
 80047f0:	4311      	orrs	r1, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047f6:	06d2      	lsls	r2, r2, #27
 80047f8:	430a      	orrs	r2, r1
 80047fa:	4943      	ldr	r1, [pc, #268]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004800:	4b41      	ldr	r3, [pc, #260]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a40      	ldr	r2, [pc, #256]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800480c:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a3d      	ldr	r2, [pc, #244]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004816:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd fbf6 	bl	8002008 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fd fbf2 	bl	8002008 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e066      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004832:	4b35      	ldr	r3, [pc, #212]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x530>
 800483e:	e05e      	b.n	80048fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004840:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fbdc 	bl	8002008 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd fbd8 	bl	8002008 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e04c      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004866:	4b28      	ldr	r3, [pc, #160]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004872:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	4924      	ldr	r1, [pc, #144]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 8004878:	4b25      	ldr	r3, [pc, #148]	; (8004910 <HAL_RCC_OscConfig+0x620>)
 800487a:	4013      	ands	r3, r2
 800487c:	60cb      	str	r3, [r1, #12]
 800487e:	e03e      	b.n	80048fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e039      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800488c:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_RCC_OscConfig+0x618>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 0203 	and.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	429a      	cmp	r2, r3
 800489e:	d12c      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	3b01      	subs	r3, #1
 80048ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d123      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d11b      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d113      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	3b01      	subs	r3, #1
 80048e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	3b01      	subs	r3, #1
 80048f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	019f800c 	.word	0x019f800c
 8004910:	feeefffc 	.word	0xfeeefffc

08004914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e11e      	b.n	8004b6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800492c:	4b91      	ldr	r3, [pc, #580]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d910      	bls.n	800495c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b8e      	ldr	r3, [pc, #568]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 020f 	bic.w	r2, r3, #15
 8004942:	498c      	ldr	r1, [pc, #560]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b8a      	ldr	r3, [pc, #552]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e106      	b.n	8004b6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d073      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d129      	bne.n	80049c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004970:	4b81      	ldr	r3, [pc, #516]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0f4      	b.n	8004b6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004980:	f000 f964 	bl	8004c4c <RCC_GetSysClockFreqFromPLLSource>
 8004984:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4a7c      	ldr	r2, [pc, #496]	; (8004b7c <HAL_RCC_ClockConfig+0x268>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d93f      	bls.n	8004a0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d033      	beq.n	8004a0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d12f      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049ae:	4b72      	ldr	r3, [pc, #456]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b6:	4a70      	ldr	r2, [pc, #448]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e024      	b.n	8004a0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049cc:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0c6      	b.n	8004b6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049dc:	4b66      	ldr	r3, [pc, #408]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0be      	b.n	8004b6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049ec:	f000 f8ce 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4a61      	ldr	r2, [pc, #388]	; (8004b7c <HAL_RCC_ClockConfig+0x268>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d909      	bls.n	8004a0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049fa:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a02:	4a5d      	ldr	r2, [pc, #372]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a0e:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4957      	ldr	r1, [pc, #348]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a20:	f7fd faf2 	bl	8002008 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a28:	f7fd faee 	bl	8002008 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e095      	b.n	8004b6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	4b4e      	ldr	r3, [pc, #312]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 020c 	and.w	r2, r3, #12
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d1eb      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d023      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a68:	4b43      	ldr	r3, [pc, #268]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a42      	ldr	r2, [pc, #264]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a80:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a88:	4a3b      	ldr	r2, [pc, #236]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4936      	ldr	r1, [pc, #216]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004aaa:	4b33      	ldr	r3, [pc, #204]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a32      	ldr	r2, [pc, #200]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d21d      	bcs.n	8004b00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 020f 	bic.w	r2, r3, #15
 8004acc:	4929      	ldr	r1, [pc, #164]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ad4:	f7fd fa98 	bl	8002008 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004adc:	f7fd fa94 	bl	8002008 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e03b      	b.n	8004b6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1ed      	bne.n	8004adc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4917      	ldr	r1, [pc, #92]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b2a:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	490f      	ldr	r1, [pc, #60]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b3e:	f000 f825 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <HAL_RCC_ClockConfig+0x264>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	490c      	ldr	r1, [pc, #48]	; (8004b80 <HAL_RCC_ClockConfig+0x26c>)
 8004b50:	5ccb      	ldrb	r3, [r1, r3]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <HAL_RCC_ClockConfig+0x270>)
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x274>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fd fa04 	bl	8001f70 <HAL_InitTick>
 8004b68:	4603      	mov	r3, r0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40022000 	.word	0x40022000
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	04c4b400 	.word	0x04c4b400
 8004b80:	08005b8c 	.word	0x08005b8c
 8004b84:	20007868 	.word	0x20007868
 8004b88:	2000786c 	.word	0x2000786c

08004b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d102      	bne.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	e047      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e03e      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d136      	bne.n	8004c30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bea:	68d2      	ldr	r2, [r2, #12]
 8004bec:	0a12      	lsrs	r2, r2, #8
 8004bee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	617b      	str	r3, [r7, #20]
      break;
 8004bf8:	e00c      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bfa:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	4a10      	ldr	r2, [pc, #64]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	0a12      	lsrs	r2, r2, #8
 8004c08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
      break;
 8004c12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	0e5b      	lsrs	r3, r3, #25
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	e001      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c34:	693b      	ldr	r3, [r7, #16]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
 8004c48:	00f42400 	.word	0x00f42400

08004c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3301      	adds	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d10c      	bne.n	8004c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c70:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c7a:	68d2      	ldr	r2, [r2, #12]
 8004c7c:	0a12      	lsrs	r2, r2, #8
 8004c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
    break;
 8004c88:	e00c      	b.n	8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c94:	68d2      	ldr	r2, [r2, #12]
 8004c96:	0a12      	lsrs	r2, r2, #8
 8004c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
    break;
 8004ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	0e5b      	lsrs	r3, r3, #25
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cbe:	687b      	ldr	r3, [r7, #4]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	00f42400 	.word	0x00f42400

08004cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cdc:	2300      	movs	r3, #0
 8004cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8098 	beq.w	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf6:	4b43      	ldr	r3, [pc, #268]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	4a3f      	ldr	r2, [pc, #252]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1e:	4b3a      	ldr	r3, [pc, #232]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a39      	ldr	r2, [pc, #228]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d2a:	f7fd f96d 	bl	8002008 <HAL_GetTick>
 8004d2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d30:	e009      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d32:	f7fd f969 	bl	8002008 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d902      	bls.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	74fb      	strb	r3, [r7, #19]
        break;
 8004d44:	e005      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d46:	4b30      	ldr	r3, [pc, #192]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0ef      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d159      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d58:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01e      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d019      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d74:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d90:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004da0:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fd f929 	bl	8002008 <HAL_GetTick>
 8004db6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db8:	e00b      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fd f925 	bl	8002008 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d902      	bls.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	74fb      	strb	r3, [r7, #19]
            break;
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ec      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	4903      	ldr	r1, [pc, #12]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	74bb      	strb	r3, [r7, #18]
 8004e02:	e005      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e10:	7c7b      	ldrb	r3, [r7, #17]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d105      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e16:	4ba7      	ldr	r3, [pc, #668]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	4aa6      	ldr	r2, [pc, #664]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e2e:	4ba1      	ldr	r3, [pc, #644]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f023 0203 	bic.w	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	499d      	ldr	r1, [pc, #628]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e50:	4b98      	ldr	r3, [pc, #608]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f023 020c 	bic.w	r2, r3, #12
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	4995      	ldr	r1, [pc, #596]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e72:	4b90      	ldr	r3, [pc, #576]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	498c      	ldr	r1, [pc, #560]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e94:	4b87      	ldr	r3, [pc, #540]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	4984      	ldr	r1, [pc, #528]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eb6:	4b7f      	ldr	r3, [pc, #508]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	497b      	ldr	r1, [pc, #492]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ed8:	4b76      	ldr	r3, [pc, #472]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	4973      	ldr	r1, [pc, #460]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004efa:	4b6e      	ldr	r3, [pc, #440]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	496a      	ldr	r1, [pc, #424]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f1c:	4b65      	ldr	r3, [pc, #404]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	4962      	ldr	r1, [pc, #392]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f3e:	4b5d      	ldr	r3, [pc, #372]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	4959      	ldr	r1, [pc, #356]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f60:	4b54      	ldr	r3, [pc, #336]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	4951      	ldr	r1, [pc, #324]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d015      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f82:	4b4c      	ldr	r3, [pc, #304]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4948      	ldr	r1, [pc, #288]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa0:	d105      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa2:	4b44      	ldr	r3, [pc, #272]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4a43      	ldr	r2, [pc, #268]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d015      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fba:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	493a      	ldr	r1, [pc, #232]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd8:	d105      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fda:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4a35      	ldr	r2, [pc, #212]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d015      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	492c      	ldr	r1, [pc, #176]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005010:	d105      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005012:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d015      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	491e      	ldr	r1, [pc, #120]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005048:	d105      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005054:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d015      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005070:	4910      	ldr	r1, [pc, #64]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005080:	d105      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4a0b      	ldr	r2, [pc, #44]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800508c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	4902      	ldr	r1, [pc, #8]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	e001      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80050b4:	40021000 	.word	0x40021000
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050be:	d105      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050c0:	4b21      	ldr	r3, [pc, #132]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4a20      	ldr	r2, [pc, #128]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d015      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	4918      	ldr	r1, [pc, #96]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f6:	d105      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a12      	ldr	r2, [pc, #72]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005102:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d015      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005110:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511e:	490a      	ldr	r1, [pc, #40]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a04      	ldr	r2, [pc, #16]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800513c:	7cbb      	ldrb	r3, [r7, #18]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fe18 	bl	8001da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 f878 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_TIM_SlaveConfigSynchro+0x18>
 800520e:	2302      	movs	r3, #2
 8005210:	e031      	b.n	8005276 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8d5 	bl	80053d4 <TIM_SlaveTimer_SetConfig>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e018      	b.n	8005276 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005252:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005262:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a48      	ldr	r2, [pc, #288]	; (80053b4 <TIM_Base_SetConfig+0x134>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d00f      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a45      	ldr	r2, [pc, #276]	; (80053b8 <TIM_Base_SetConfig+0x138>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a44      	ldr	r2, [pc, #272]	; (80053bc <TIM_Base_SetConfig+0x13c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a43      	ldr	r2, [pc, #268]	; (80053c0 <TIM_Base_SetConfig+0x140>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a42      	ldr	r2, [pc, #264]	; (80053c4 <TIM_Base_SetConfig+0x144>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d108      	bne.n	80052d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a37      	ldr	r2, [pc, #220]	; (80053b4 <TIM_Base_SetConfig+0x134>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01f      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d01b      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <TIM_Base_SetConfig+0x138>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d017      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a33      	ldr	r2, [pc, #204]	; (80053bc <TIM_Base_SetConfig+0x13c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a32      	ldr	r2, [pc, #200]	; (80053c0 <TIM_Base_SetConfig+0x140>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00f      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a32      	ldr	r2, [pc, #200]	; (80053c8 <TIM_Base_SetConfig+0x148>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00b      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a31      	ldr	r2, [pc, #196]	; (80053cc <TIM_Base_SetConfig+0x14c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d007      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a30      	ldr	r2, [pc, #192]	; (80053d0 <TIM_Base_SetConfig+0x150>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d003      	beq.n	800531a <TIM_Base_SetConfig+0x9a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2b      	ldr	r2, [pc, #172]	; (80053c4 <TIM_Base_SetConfig+0x144>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <TIM_Base_SetConfig+0x134>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <TIM_Base_SetConfig+0x100>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <TIM_Base_SetConfig+0x140>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00f      	beq.n	8005380 <TIM_Base_SetConfig+0x100>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a19      	ldr	r2, [pc, #100]	; (80053c8 <TIM_Base_SetConfig+0x148>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_Base_SetConfig+0x100>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <TIM_Base_SetConfig+0x14c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_Base_SetConfig+0x100>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <TIM_Base_SetConfig+0x150>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_Base_SetConfig+0x100>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <TIM_Base_SetConfig+0x144>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d103      	bne.n	8005388 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]
  }
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40013400 	.word	0x40013400
 80053c4:	40015000 	.word	0x40015000
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4a4e      	ldr	r2, [pc, #312]	; (800555c <TIM_SlaveTimer_SetConfig+0x188>)
 8005424:	4293      	cmp	r3, r2
 8005426:	f000 8092 	beq.w	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 800542a:	4a4c      	ldr	r2, [pc, #304]	; (800555c <TIM_SlaveTimer_SetConfig+0x188>)
 800542c:	4293      	cmp	r3, r2
 800542e:	f200 808b 	bhi.w	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 8005432:	4a4b      	ldr	r2, [pc, #300]	; (8005560 <TIM_SlaveTimer_SetConfig+0x18c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	f000 808a 	beq.w	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 800543a:	4a49      	ldr	r2, [pc, #292]	; (8005560 <TIM_SlaveTimer_SetConfig+0x18c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	f200 8083 	bhi.w	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 8005442:	4a48      	ldr	r2, [pc, #288]	; (8005564 <TIM_SlaveTimer_SetConfig+0x190>)
 8005444:	4293      	cmp	r3, r2
 8005446:	f000 8082 	beq.w	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 800544a:	4a46      	ldr	r2, [pc, #280]	; (8005564 <TIM_SlaveTimer_SetConfig+0x190>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d87b      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 8005450:	4a45      	ldr	r2, [pc, #276]	; (8005568 <TIM_SlaveTimer_SetConfig+0x194>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d07b      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 8005456:	4a44      	ldr	r2, [pc, #272]	; (8005568 <TIM_SlaveTimer_SetConfig+0x194>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d875      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 800545c:	4a43      	ldr	r2, [pc, #268]	; (800556c <TIM_SlaveTimer_SetConfig+0x198>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d075      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 8005462:	4a42      	ldr	r2, [pc, #264]	; (800556c <TIM_SlaveTimer_SetConfig+0x198>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d86f      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 8005468:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800546c:	d06f      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 800546e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005472:	d869      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 8005474:	2b70      	cmp	r3, #112	; 0x70
 8005476:	d01a      	beq.n	80054ae <TIM_SlaveTimer_SetConfig+0xda>
 8005478:	2b70      	cmp	r3, #112	; 0x70
 800547a:	d865      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 800547c:	2b60      	cmp	r3, #96	; 0x60
 800547e:	d059      	beq.n	8005534 <TIM_SlaveTimer_SetConfig+0x160>
 8005480:	2b60      	cmp	r3, #96	; 0x60
 8005482:	d861      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 8005484:	2b50      	cmp	r3, #80	; 0x50
 8005486:	d04b      	beq.n	8005520 <TIM_SlaveTimer_SetConfig+0x14c>
 8005488:	2b50      	cmp	r3, #80	; 0x50
 800548a:	d85d      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d019      	beq.n	80054c4 <TIM_SlaveTimer_SetConfig+0xf0>
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d859      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 8005494:	2b30      	cmp	r3, #48	; 0x30
 8005496:	d05a      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 8005498:	2b30      	cmp	r3, #48	; 0x30
 800549a:	d855      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 800549c:	2b20      	cmp	r3, #32
 800549e:	d056      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d851      	bhi.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d052      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d050      	beq.n	800554e <TIM_SlaveTimer_SetConfig+0x17a>
 80054ac:	e04c      	b.n	8005548 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80054be:	f000 f8b6 	bl	800562e <TIM_ETR_SetConfig>
      break;
 80054c2:	e045      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	d004      	beq.n	80054d6 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80054d0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80054d4:	d101      	bne.n	80054da <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e03b      	b.n	8005552 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005500:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
      break;
 800551e:	e017      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552c:	461a      	mov	r2, r3
 800552e:	f000 f81f 	bl	8005570 <TIM_TI1_ConfigInputStage>
      break;
 8005532:	e00d      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005540:	461a      	mov	r2, r3
 8005542:	f000 f844 	bl	80055ce <TIM_TI2_ConfigInputStage>
      break;
 8005546:	e003      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
      break;
 800554c:	e000      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800554e:	bf00      	nop
  }

  return status;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	00100070 	.word	0x00100070
 8005560:	00100050 	.word	0x00100050
 8005564:	00100040 	.word	0x00100040
 8005568:	00100030 	.word	0x00100030
 800556c:	00100020 	.word	0x00100020

08005570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 030a 	bic.w	r3, r3, #10
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b087      	sub	sp, #28
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f023 0210 	bic.w	r2, r3, #16
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800560a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800562e:	b480      	push	{r7}
 8005630:	b087      	sub	sp, #28
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
 800563a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005648:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	021a      	lsls	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	431a      	orrs	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4313      	orrs	r3, r2
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	609a      	str	r2, [r3, #8]
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e06f      	b.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a31      	ldr	r2, [pc, #196]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a30      	ldr	r2, [pc, #192]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2e      	ldr	r2, [pc, #184]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d01d      	beq.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d018      	beq.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a15      	ldr	r2, [pc, #84]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a16      	ldr	r2, [pc, #88]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a11      	ldr	r2, [pc, #68]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d10c      	bne.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	4313      	orrs	r3, r2
 800574c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40015000 	.word	0x40015000
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40014000 	.word	0x40014000

0800578c <arm_biquad_cascade_df2T_f32>:
 800578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005790:	7807      	ldrb	r7, [r0, #0]
 8005792:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8005796:	6885      	ldr	r5, [r0, #8]
 8005798:	3514      	adds	r5, #20
 800579a:	6846      	ldr	r6, [r0, #4]
 800579c:	3608      	adds	r6, #8
 800579e:	ea4f 198e 	mov.w	r9, lr, lsl #6
 80057a2:	eb02 0b09 	add.w	fp, r2, r9
 80057a6:	f003 080f 	and.w	r8, r3, #15
 80057aa:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80057ae:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 80057b2:	ed15 7a04 	vldr	s14, [r5, #-16]
 80057b6:	ed55 6a03 	vldr	s13, [r5, #-12]
 80057ba:	ed15 6a02 	vldr	s12, [r5, #-8]
 80057be:	ed55 5a01 	vldr	s11, [r5, #-4]
 80057c2:	46b4      	mov	ip, r6
 80057c4:	ed56 3a02 	vldr	s7, [r6, #-8]
 80057c8:	ed16 4a01 	vldr	s8, [r6, #-4]
 80057cc:	f1be 0f00 	cmp.w	lr, #0
 80057d0:	f000 8195 	beq.w	8005afe <arm_biquad_cascade_df2T_f32+0x372>
 80057d4:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80057d8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80057dc:	4674      	mov	r4, lr
 80057de:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 80057e2:	ee27 5a83 	vmul.f32	s10, s15, s6
 80057e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80057ea:	ee67 4a03 	vmul.f32	s9, s14, s6
 80057ee:	ee34 4a84 	vadd.f32	s8, s9, s8
 80057f2:	ee66 4a05 	vmul.f32	s9, s12, s10
 80057f6:	ee34 4a84 	vadd.f32	s8, s9, s8
 80057fa:	ee26 3a83 	vmul.f32	s6, s13, s6
 80057fe:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8005802:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8005806:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800580a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800580e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005812:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005816:	ee27 4a23 	vmul.f32	s8, s14, s7
 800581a:	ee35 5a04 	vadd.f32	s10, s10, s8
 800581e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005822:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005826:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800582a:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800582e:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8005832:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005836:	ee35 5a03 	vadd.f32	s10, s10, s6
 800583a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800583e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005842:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005846:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800584a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800584e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005852:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005856:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800585a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800585e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005862:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005866:	ee25 5a85 	vmul.f32	s10, s11, s10
 800586a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800586e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005872:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005876:	ee26 3a24 	vmul.f32	s6, s12, s9
 800587a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800587e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005882:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8005886:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 800588a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800588e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005892:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005896:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800589a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800589e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80058a2:	ee26 3a05 	vmul.f32	s6, s12, s10
 80058a6:	ee33 3a24 	vadd.f32	s6, s6, s9
 80058aa:	ee66 3a84 	vmul.f32	s7, s13, s8
 80058ae:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 80058b2:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 80058b6:	ee67 4a84 	vmul.f32	s9, s15, s8
 80058ba:	ee74 4a83 	vadd.f32	s9, s9, s6
 80058be:	ee25 5a85 	vmul.f32	s10, s11, s10
 80058c2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80058c6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80058ca:	ee35 5a23 	vadd.f32	s10, s10, s7
 80058ce:	ee26 3a24 	vmul.f32	s6, s12, s9
 80058d2:	ee33 3a05 	vadd.f32	s6, s6, s10
 80058d6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80058da:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 80058de:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 80058e2:	ee27 5a84 	vmul.f32	s10, s15, s8
 80058e6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80058ea:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80058ee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80058f2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80058f6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80058fa:	ee26 3a05 	vmul.f32	s6, s12, s10
 80058fe:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005902:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005906:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800590a:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800590e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005912:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005916:	ee25 5a85 	vmul.f32	s10, s11, s10
 800591a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800591e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005922:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005926:	ee26 3a24 	vmul.f32	s6, s12, s9
 800592a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800592e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005932:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8005936:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800593a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800593e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005942:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005946:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800594a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800594e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005952:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005956:	ee33 3a24 	vadd.f32	s6, s6, s9
 800595a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800595e:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8005962:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8005966:	ee67 4a84 	vmul.f32	s9, s15, s8
 800596a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800596e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005972:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005976:	ee67 3a04 	vmul.f32	s7, s14, s8
 800597a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800597e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005982:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005986:	ee66 3a84 	vmul.f32	s7, s13, s8
 800598a:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800598e:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8005992:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005996:	ee35 5a03 	vadd.f32	s10, s10, s6
 800599a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800599e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80059a2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80059a6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80059aa:	ee26 3a05 	vmul.f32	s6, s12, s10
 80059ae:	ee33 3a24 	vadd.f32	s6, s6, s9
 80059b2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80059b6:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 80059ba:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 80059be:	ee67 4a84 	vmul.f32	s9, s15, s8
 80059c2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80059c6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80059ca:	ee35 5a23 	vadd.f32	s10, s10, s7
 80059ce:	ee67 3a04 	vmul.f32	s7, s14, s8
 80059d2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80059d6:	ee26 3a24 	vmul.f32	s6, s12, s9
 80059da:	ee33 3a05 	vadd.f32	s6, s6, s10
 80059de:	ee66 3a84 	vmul.f32	s7, s13, s8
 80059e2:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 80059e6:	ed10 4a04 	vldr	s8, [r0, #-16]
 80059ea:	ee27 5a84 	vmul.f32	s10, s15, s8
 80059ee:	ee35 5a03 	vadd.f32	s10, s10, s6
 80059f2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80059f6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80059fa:	ee67 3a04 	vmul.f32	s7, s14, s8
 80059fe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005a02:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005a06:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005a0a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005a0e:	ed03 5a04 	vstr	s10, [r3, #-16]
 8005a12:	ed10 4a03 	vldr	s8, [r0, #-12]
 8005a16:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005a1a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005a1e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005a22:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005a26:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005a2a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005a2e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005a32:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005a36:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005a3a:	ed43 4a03 	vstr	s9, [r3, #-12]
 8005a3e:	ed10 4a02 	vldr	s8, [r0, #-8]
 8005a42:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005a46:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005a4a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005a4e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005a52:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005a56:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005a5a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005a5e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005a62:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005a66:	ed03 5a02 	vstr	s10, [r3, #-8]
 8005a6a:	ed10 4a01 	vldr	s8, [r0, #-4]
 8005a6e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005a72:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005a76:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005a7a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005a7e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005a82:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005a86:	ee66 3a24 	vmul.f32	s7, s12, s9
 8005a8a:	ee73 3a85 	vadd.f32	s7, s7, s10
 8005a8e:	ee26 5a84 	vmul.f32	s10, s13, s8
 8005a92:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8005a96:	ee34 4a05 	vadd.f32	s8, s8, s10
 8005a9a:	ed43 4a01 	vstr	s9, [r3, #-4]
 8005a9e:	3040      	adds	r0, #64	; 0x40
 8005aa0:	3340      	adds	r3, #64	; 0x40
 8005aa2:	3c01      	subs	r4, #1
 8005aa4:	f47f ae9b 	bne.w	80057de <arm_biquad_cascade_df2T_f32+0x52>
 8005aa8:	4449      	add	r1, r9
 8005aaa:	465b      	mov	r3, fp
 8005aac:	f1b8 0f00 	cmp.w	r8, #0
 8005ab0:	d019      	beq.n	8005ae6 <arm_biquad_cascade_df2T_f32+0x35a>
 8005ab2:	eb01 000a 	add.w	r0, r1, sl
 8005ab6:	ecf1 2a01 	vldmia	r1!, {s5}
 8005aba:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8005abe:	ee33 3a23 	vadd.f32	s6, s6, s7
 8005ac2:	ee67 3a22 	vmul.f32	s7, s14, s5
 8005ac6:	ee33 4a84 	vadd.f32	s8, s7, s8
 8005aca:	ee26 5a03 	vmul.f32	s10, s12, s6
 8005ace:	ee75 3a04 	vadd.f32	s7, s10, s8
 8005ad2:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8005ad6:	ee25 4a83 	vmul.f32	s8, s11, s6
 8005ada:	ee34 4a22 	vadd.f32	s8, s8, s5
 8005ade:	eca3 3a01 	vstmia	r3!, {s6}
 8005ae2:	4281      	cmp	r1, r0
 8005ae4:	d1e7      	bne.n	8005ab6 <arm_biquad_cascade_df2T_f32+0x32a>
 8005ae6:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8005aea:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8005aee:	3514      	adds	r5, #20
 8005af0:	3608      	adds	r6, #8
 8005af2:	4611      	mov	r1, r2
 8005af4:	3f01      	subs	r7, #1
 8005af6:	f47f ae5a 	bne.w	80057ae <arm_biquad_cascade_df2T_f32+0x22>
 8005afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afe:	4613      	mov	r3, r2
 8005b00:	e7d4      	b.n	8005aac <arm_biquad_cascade_df2T_f32+0x320>
	...

08005b04 <arm_biquad_cascade_df2T_init_f32>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	6082      	str	r2, [r0, #8]
 8005b08:	7001      	strb	r1, [r0, #0]
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	00ca      	lsls	r2, r1, #3
 8005b0e:	4618      	mov	r0, r3
 8005b10:	2100      	movs	r1, #0
 8005b12:	f000 f803 	bl	8005b1c <memset>
 8005b16:	6060      	str	r0, [r4, #4]
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4d0d      	ldr	r5, [pc, #52]	; (8005b64 <__libc_init_array+0x38>)
 8005b30:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b32:	1b64      	subs	r4, r4, r5
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	2600      	movs	r6, #0
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	4d0b      	ldr	r5, [pc, #44]	; (8005b6c <__libc_init_array+0x40>)
 8005b3e:	4c0c      	ldr	r4, [pc, #48]	; (8005b70 <__libc_init_array+0x44>)
 8005b40:	f000 f818 	bl	8005b74 <_init>
 8005b44:	1b64      	subs	r4, r4, r5
 8005b46:	10a4      	asrs	r4, r4, #2
 8005b48:	2600      	movs	r6, #0
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08005b9c 	.word	0x08005b9c
 8005b68:	08005b9c 	.word	0x08005b9c
 8005b6c:	08005b9c 	.word	0x08005b9c
 8005b70:	08005ba0 	.word	0x08005ba0

08005b74 <_init>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr

08005b80 <_fini>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr
