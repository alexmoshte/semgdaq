
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001136c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013400  08011550  08011550  00021550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024950  08024950  00047a50  2**0
                  CONTENTS
  4 .ARM          00000008  08024950  08024950  00034950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024958  08024958  00047a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024958  08024958  00034958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802495c  0802495c  0003495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007a50  20000000  08024960  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013bfc  20007a50  0802c3b0  00047a50  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b64c  0802c3b0  0004b64c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00047a50  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00047a80  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ff62  00000000  00000000  00047b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e9f  00000000  00000000  00077a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002040  00000000  00000000  0007d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017aa  00000000  00000000  0007f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e06  00000000  00000000  0008112a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c871  00000000  00000000  000a6f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f27a0  00000000  00000000  000d37a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a64  00000000  00000000  001c5f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001cf9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004cd8  00000000  00000000  001cfa33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000118  00000000  00000000  001d470b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20007a50 	.word	0x20007a50
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011534 	.word	0x08011534

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20007a54 	.word	0x20007a54
 800021c:	08011534 	.word	0x08011534

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <ADC1_IN1_autocorr_calc>:
arm_status StatusCoeffs_5;
arm_status StatusCoeffs_6;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e01e      	b.n	800101e <ADC1_IN1_autocorr_calc+0x4a>
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag  for the data set*/
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000fe6:	23a0      	movs	r3, #160	; 0xa0
 8000fe8:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1); // A CMSIS DSP function for computing dot products
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3308      	adds	r3, #8
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <ADC1_IN1_autocorr_calc+0x5c>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	1d18      	adds	r0, r3, #4
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <ADC1_IN1_autocorr_calc+0x60>)
 8000ffc:	f00c f974 	bl	800d2e8 <arm_dot_prod_f32>

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001000:	ed97 7a01 	vldr	s14, [r7, #4]
 8001004:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001038 <ADC1_IN1_autocorr_calc+0x64>
 8001008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <ADC1_IN1_autocorr_calc+0x68>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b0a      	cmp	r3, #10
 8001022:	d9dd      	bls.n	8000fe0 <ADC1_IN1_autocorr_calc+0xc>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20007c64 	.word	0x20007c64
 8001034:	20007c88 	.word	0x20007c88
 8001038:	432a0000 	.word	0x432a0000
 800103c:	20007a6c 	.word	0x20007a6c

08001040 <ADC1_IN1_autoreg_coeffs>:

float32_t* ADC1_IN1_autoreg_coeffs(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001046:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800104e:	e013      	b.n	8001078 <ADC1_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001050:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001054:	3301      	adds	r3, #1
 8001056:	4a43      	ldr	r2, [pc, #268]	; (8001164 <ADC1_IN1_autoreg_coeffs+0x124>)
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001068:	443b      	add	r3, r7
 800106a:	3b38      	subs	r3, #56	; 0x38
 800106c:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800106e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001072:	3301      	adds	r3, #1
 8001074:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001078:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800107c:	2b09      	cmp	r3, #9
 800107e:	d9e7      	bls.n	8001050 <ADC1_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1); // Initializes the autocorrelations matrix
 8001080:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001084:	2201      	movs	r2, #1
 8001086:	210a      	movs	r1, #10
 8001088:	4837      	ldr	r0, [pc, #220]	; (8001168 <ADC1_IN1_autoreg_coeffs+0x128>)
 800108a:	f00b ff61 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001094:	e02f      	b.n	80010f6 <ADC1_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800109c:	e022      	b.n	80010e4 <ADC1_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800109e:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80010a2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80010ac:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80010b0:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	461a      	mov	r2, r3
 80010be:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010c2:	4413      	add	r3, r2
 80010c4:	4827      	ldr	r0, [pc, #156]	; (8001164 <ADC1_IN1_autoreg_coeffs+0x124>)
 80010c6:	008a      	lsls	r2, r1, #2
 80010c8:	4402      	add	r2, r0
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80010d0:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80010da:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010de:	3301      	adds	r3, #1
 80010e0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80010e4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	ddd8      	ble.n	800109e <ADC1_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80010ec:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80010f0:	3301      	adds	r3, #1
 80010f2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80010f6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80010fa:	2b09      	cmp	r3, #9
 80010fc:	ddcb      	ble.n	8001096 <ADC1_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1); // Initializes the Yule-Walker matrix
 80010fe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001102:	220a      	movs	r2, #10
 8001104:	210a      	movs	r1, #10
 8001106:	4819      	ldr	r0, [pc, #100]	; (800116c <ADC1_IN1_autoreg_coeffs+0x12c>)
 8001108:	f00b ff22 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1); // Initializes the inverse Yule-Walker matrix
 800110c:	463b      	mov	r3, r7
 800110e:	220a      	movs	r2, #10
 8001110:	210a      	movs	r1, #10
 8001112:	4817      	ldr	r0, [pc, #92]	; (8001170 <ADC1_IN1_autoreg_coeffs+0x130>)
 8001114:	f00b ff1c 	bl	800cf50 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);
 8001118:	4915      	ldr	r1, [pc, #84]	; (8001170 <ADC1_IN1_autoreg_coeffs+0x130>)
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <ADC1_IN1_autoreg_coeffs+0x12c>)
 800111c:	f00b fe12 	bl	800cd44 <arm_mat_inverse_f32>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001126:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800112a:	2b00      	cmp	r3, #0
 800112c:	d113      	bne.n	8001156 <ADC1_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4810      	ldr	r0, [pc, #64]	; (8001174 <ADC1_IN1_autoreg_coeffs+0x134>)
 8001134:	f00d f95b 	bl	800e3ee <memset>

		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1); //Initializes the coefficients Matrix
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <ADC1_IN1_autoreg_coeffs+0x134>)
 800113a:	2201      	movs	r2, #1
 800113c:	210a      	movs	r1, #10
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <ADC1_IN1_autoreg_coeffs+0x138>)
 8001140:	f00b ff06 	bl	800cf50 <arm_mat_init_f32>

        StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <ADC1_IN1_autoreg_coeffs+0x138>)
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <ADC1_IN1_autoreg_coeffs+0x128>)
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <ADC1_IN1_autoreg_coeffs+0x130>)
 800114a:	f00b fd5b 	bl	800cc04 <arm_mat_mult_f32>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <ADC1_IN1_autoreg_coeffs+0x13c>)
 8001154:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_1;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <ADC1_IN1_autoreg_coeffs+0x134>)
}
 8001158:	4618      	mov	r0, r3
 800115a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20007a6c 	.word	0x20007a6c
 8001168:	20009d7c 	.word	0x20009d7c
 800116c:	20009d1c 	.word	0x20009d1c
 8001170:	20009d4c 	.word	0x20009d4c
 8001174:	20007b74 	.word	0x20007b74
 8001178:	20009dac 	.word	0x20009dac
 800117c:	20009ddc 	.word	0x20009ddc

08001180 <ADC1_IN2_autocorr_calc>:



void ADC1_IN2_autocorr_calc(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e01e      	b.n	80011ca <ADC1_IN2_autocorr_calc+0x4a>
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001192:	23a0      	movs	r3, #160	; 0xa0
 8001194:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3308      	adds	r3, #8
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <ADC1_IN2_autocorr_calc+0x5c>)
 800119e:	4413      	add	r3, r2
 80011a0:	1d18      	adds	r0, r3, #4
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <ADC1_IN2_autocorr_calc+0x60>)
 80011a8:	f00c f89e 	bl	800d2e8 <arm_dot_prod_f32>

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80011ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80011e4 <ADC1_IN2_autocorr_calc+0x64>
 80011b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <ADC1_IN2_autocorr_calc+0x68>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d9dd      	bls.n	800118c <ADC1_IN2_autocorr_calc+0xc>
	}
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200081d8 	.word	0x200081d8
 80011e0:	200081fc 	.word	0x200081fc
 80011e4:	432a0000 	.word	0x432a0000
 80011e8:	20007a98 	.word	0x20007a98

080011ec <ADC1_IN2_autoreg_coeffs>:

float32_t* ADC1_IN2_autoreg_coeffs(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80011f2:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_2 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80011fa:	e013      	b.n	8001224 <ADC1_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_2[n] = AutoCorr_2[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80011fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001200:	3301      	adds	r3, #1
 8001202:	4a43      	ldr	r2, [pc, #268]	; (8001310 <ADC1_IN2_autoreg_coeffs+0x124>)
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001214:	443b      	add	r3, r7
 8001216:	3b38      	subs	r3, #56	; 0x38
 8001218:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800121a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001224:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001228:	2b09      	cmp	r3, #9
 800122a:	d9e7      	bls.n	80011fc <ADC1_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_2); //Initializes the autocorrelations matrix
 800122c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001230:	2201      	movs	r2, #1
 8001232:	210a      	movs	r1, #10
 8001234:	4837      	ldr	r0, [pc, #220]	; (8001314 <ADC1_IN2_autoreg_coeffs+0x128>)
 8001236:	f00b fe8b 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_2[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001240:	e02f      	b.n	80012a2 <ADC1_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001248:	e022      	b.n	8001290 <ADC1_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_2[r * 10 + c] = AutoCorr_2[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800124a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800124e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001258:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800125c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	461a      	mov	r2, r3
 800126a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800126e:	4413      	add	r3, r2
 8001270:	4827      	ldr	r0, [pc, #156]	; (8001310 <ADC1_IN2_autoreg_coeffs+0x124>)
 8001272:	008a      	lsls	r2, r1, #2
 8001274:	4402      	add	r2, r0
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800127c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001286:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800128a:	3301      	adds	r3, #1
 800128c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001290:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001294:	2b09      	cmp	r3, #9
 8001296:	ddd8      	ble.n	800124a <ADC1_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001298:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800129c:	3301      	adds	r3, #1
 800129e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80012a2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80012a6:	2b09      	cmp	r3, #9
 80012a8:	ddcb      	ble.n	8001242 <ADC1_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_2); // Initializes the Yule-Walker matrix
 80012aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012ae:	220a      	movs	r2, #10
 80012b0:	210a      	movs	r1, #10
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <ADC1_IN2_autoreg_coeffs+0x12c>)
 80012b4:	f00b fe4c 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_2[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_2); // Initializes the inverse Yule-Walker matrix
 80012b8:	463b      	mov	r3, r7
 80012ba:	220a      	movs	r2, #10
 80012bc:	210a      	movs	r1, #10
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <ADC1_IN2_autoreg_coeffs+0x130>)
 80012c0:	f00b fe46 	bl	800cf50 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_2 = arm_mat_inverse_f32(&ADC1_IN2_YW_mtx, &ADC1_IN2_Inv_YW_mtx);
 80012c4:	4915      	ldr	r1, [pc, #84]	; (800131c <ADC1_IN2_autoreg_coeffs+0x130>)
 80012c6:	4814      	ldr	r0, [pc, #80]	; (8001318 <ADC1_IN2_autoreg_coeffs+0x12c>)
 80012c8:	f00b fd3c 	bl	800cd44 <arm_mat_inverse_f32>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_2 == ARM_MATH_SUCCESS) // Check if operation was successful
 80012d2:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <ADC1_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_2, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <ADC1_IN2_autoreg_coeffs+0x134>)
 80012e0:	f00d f885 	bl	800e3ee <memset>

		arm_mat_init_f32(&ADC1_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_2); //Initializes the coefficients Matrix
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <ADC1_IN2_autoreg_coeffs+0x134>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	210a      	movs	r1, #10
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <ADC1_IN2_autoreg_coeffs+0x138>)
 80012ec:	f00b fe30 	bl	800cf50 <arm_mat_init_f32>

        StatusCoeffs_2 = arm_mat_mult_f32( &ADC1_IN2_Inv_YW_mtx, &ADC1_IN2_AC_mtx, &ADC1_IN2_coeffs_mtx );
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <ADC1_IN2_autoreg_coeffs+0x138>)
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <ADC1_IN2_autoreg_coeffs+0x128>)
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <ADC1_IN2_autoreg_coeffs+0x130>)
 80012f6:	f00b fc85 	bl	800cc04 <arm_mat_mult_f32>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <ADC1_IN2_autoreg_coeffs+0x13c>)
 8001300:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_2;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <ADC1_IN2_autoreg_coeffs+0x134>)
}
 8001304:	4618      	mov	r0, r3
 8001306:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20007a98 	.word	0x20007a98
 8001314:	20009d84 	.word	0x20009d84
 8001318:	20009d24 	.word	0x20009d24
 800131c:	20009d54 	.word	0x20009d54
 8001320:	20007b9c 	.word	0x20007b9c
 8001324:	20009db4 	.word	0x20009db4
 8001328:	20009ddd 	.word	0x20009ddd

0800132c <ADC2_IN3_autocorr_calc>:



void ADC2_IN3_autocorr_calc(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e01e      	b.n	8001376 <ADC2_IN3_autocorr_calc+0x4a>
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 800133e:	23a0      	movs	r3, #160	; 0xa0
 8001340:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3308      	adds	r3, #8
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <ADC2_IN3_autocorr_calc+0x5c>)
 800134a:	4413      	add	r3, r2
 800134c:	1d18      	adds	r0, r3, #4
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <ADC2_IN3_autocorr_calc+0x60>)
 8001354:	f00b ffc8 	bl	800d2e8 <arm_dot_prod_f32>

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001358:	ed97 7a01 	vldr	s14, [r7, #4]
 800135c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001390 <ADC2_IN3_autocorr_calc+0x64>
 8001360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <ADC2_IN3_autocorr_calc+0x68>)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b09      	cmp	r3, #9
 800137a:	d9dd      	bls.n	8001338 <ADC2_IN3_autocorr_calc+0xc>
	}
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000874c 	.word	0x2000874c
 800138c:	20008770 	.word	0x20008770
 8001390:	432a0000 	.word	0x432a0000
 8001394:	20007ac4 	.word	0x20007ac4

08001398 <ADC2_IN3_autoreg_coeffs>:

float32_t* ADC2_IN3_autoreg_coeffs(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800139e:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_3 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80013a6:	e013      	b.n	80013d0 <ADC2_IN3_autoreg_coeffs+0x38>
	{
		AC_Matrix_3[n] = AutoCorr_3[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80013a8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a43      	ldr	r2, [pc, #268]	; (80014bc <ADC2_IN3_autoreg_coeffs+0x124>)
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80013c0:	443b      	add	r3, r7
 80013c2:	3b38      	subs	r3, #56	; 0x38
 80013c4:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80013c6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013ca:	3301      	adds	r3, #1
 80013cc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80013d0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d9e7      	bls.n	80013a8 <ADC2_IN3_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN3_AC_mtx, AR_ORDER, 1, AC_Matrix_3); //Initializes the autocorrelations matrix
 80013d8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80013dc:	2201      	movs	r2, #1
 80013de:	210a      	movs	r1, #10
 80013e0:	4837      	ldr	r0, [pc, #220]	; (80014c0 <ADC2_IN3_autoreg_coeffs+0x128>)
 80013e2:	f00b fdb5 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_3[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80013ec:	e02f      	b.n	800144e <ADC2_IN3_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80013f4:	e022      	b.n	800143c <ADC2_IN3_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_3[r * 10 + c] = AutoCorr_3[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80013f6:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80013fa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001404:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001408:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	461a      	mov	r2, r3
 8001416:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800141a:	4413      	add	r3, r2
 800141c:	4827      	ldr	r0, [pc, #156]	; (80014bc <ADC2_IN3_autoreg_coeffs+0x124>)
 800141e:	008a      	lsls	r2, r1, #2
 8001420:	4402      	add	r2, r0
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001428:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001432:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001436:	3301      	adds	r3, #1
 8001438:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800143c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001440:	2b09      	cmp	r3, #9
 8001442:	ddd8      	ble.n	80013f6 <ADC2_IN3_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001444:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001448:	3301      	adds	r3, #1
 800144a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800144e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001452:	2b09      	cmp	r3, #9
 8001454:	ddcb      	ble.n	80013ee <ADC2_IN3_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN3_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_3); // Initializes the Yule-Walker matrix
 8001456:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800145a:	220a      	movs	r2, #10
 800145c:	210a      	movs	r1, #10
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <ADC2_IN3_autoreg_coeffs+0x12c>)
 8001460:	f00b fd76 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_3[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN3_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_3); // Initializes the inverse Yule-Walker matrix
 8001464:	463b      	mov	r3, r7
 8001466:	220a      	movs	r2, #10
 8001468:	210a      	movs	r1, #10
 800146a:	4817      	ldr	r0, [pc, #92]	; (80014c8 <ADC2_IN3_autoreg_coeffs+0x130>)
 800146c:	f00b fd70 	bl	800cf50 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_3 = arm_mat_inverse_f32(&ADC2_IN3_YW_mtx, &ADC2_IN3_Inv_YW_mtx);
 8001470:	4915      	ldr	r1, [pc, #84]	; (80014c8 <ADC2_IN3_autoreg_coeffs+0x130>)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <ADC2_IN3_autoreg_coeffs+0x12c>)
 8001474:	f00b fc66 	bl	800cd44 <arm_mat_inverse_f32>
 8001478:	4603      	mov	r3, r0
 800147a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_3 == ARM_MATH_SUCCESS) // Check if operation was successful
 800147e:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001482:	2b00      	cmp	r3, #0
 8001484:	d113      	bne.n	80014ae <ADC2_IN3_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_3, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8001486:	2228      	movs	r2, #40	; 0x28
 8001488:	2100      	movs	r1, #0
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <ADC2_IN3_autoreg_coeffs+0x134>)
 800148c:	f00c ffaf 	bl	800e3ee <memset>

		arm_mat_init_f32(&ADC2_IN3_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_3); //Initializes the coefficients Matrix
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <ADC2_IN3_autoreg_coeffs+0x134>)
 8001492:	2201      	movs	r2, #1
 8001494:	210a      	movs	r1, #10
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <ADC2_IN3_autoreg_coeffs+0x138>)
 8001498:	f00b fd5a 	bl	800cf50 <arm_mat_init_f32>

        StatusCoeffs_3 = arm_mat_mult_f32( &ADC2_IN3_Inv_YW_mtx, &ADC2_IN3_AC_mtx, &ADC2_IN3_coeffs_mtx );
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <ADC2_IN3_autoreg_coeffs+0x138>)
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <ADC2_IN3_autoreg_coeffs+0x128>)
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <ADC2_IN3_autoreg_coeffs+0x130>)
 80014a2:	f00b fbaf 	bl	800cc04 <arm_mat_mult_f32>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <ADC2_IN3_autoreg_coeffs+0x13c>)
 80014ac:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_3;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <ADC2_IN3_autoreg_coeffs+0x134>)
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20007ac4 	.word	0x20007ac4
 80014c0:	20009d8c 	.word	0x20009d8c
 80014c4:	20009d2c 	.word	0x20009d2c
 80014c8:	20009d5c 	.word	0x20009d5c
 80014cc:	20007bc4 	.word	0x20007bc4
 80014d0:	20009dbc 	.word	0x20009dbc
 80014d4:	20009dde 	.word	0x20009dde

080014d8 <ADC2_IN4_autocorr_calc>:



void ADC2_IN4_autocorr_calc(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e01e      	b.n	8001522 <ADC2_IN4_autocorr_calc+0x4a>
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80014ea:	23a0      	movs	r3, #160	; 0xa0
 80014ec:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3308      	adds	r3, #8
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <ADC2_IN4_autocorr_calc+0x5c>)
 80014f6:	4413      	add	r3, r2
 80014f8:	1d18      	adds	r0, r3, #4
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	490e      	ldr	r1, [pc, #56]	; (8001538 <ADC2_IN4_autocorr_calc+0x60>)
 8001500:	f00b fef2 	bl	800d2e8 <arm_dot_prod_f32>

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001504:	ed97 7a01 	vldr	s14, [r7, #4]
 8001508:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800153c <ADC2_IN4_autocorr_calc+0x64>
 800150c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <ADC2_IN4_autocorr_calc+0x68>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b09      	cmp	r3, #9
 8001526:	d9dd      	bls.n	80014e4 <ADC2_IN4_autocorr_calc+0xc>
	}
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20008cc0 	.word	0x20008cc0
 8001538:	20008ce4 	.word	0x20008ce4
 800153c:	432a0000 	.word	0x432a0000
 8001540:	20007af0 	.word	0x20007af0

08001544 <ADC2_IN4_autoreg_coeffs>:

float32_t* ADC2_IN4_autoreg_coeffs(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800154a:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_4 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001552:	e013      	b.n	800157c <ADC2_IN4_autoreg_coeffs+0x38>
	{
		AC_Matrix_4[n] = AutoCorr_4[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001554:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001558:	3301      	adds	r3, #1
 800155a:	4a43      	ldr	r2, [pc, #268]	; (8001668 <ADC2_IN4_autoreg_coeffs+0x124>)
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800156c:	443b      	add	r3, r7
 800156e:	3b38      	subs	r3, #56	; 0x38
 8001570:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8001572:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800157c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001580:	2b09      	cmp	r3, #9
 8001582:	d9e7      	bls.n	8001554 <ADC2_IN4_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN4_AC_mtx, AR_ORDER, 1, AC_Matrix_4); //Initializes the autocorrelations matrix
 8001584:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001588:	2201      	movs	r2, #1
 800158a:	210a      	movs	r1, #10
 800158c:	4837      	ldr	r0, [pc, #220]	; (800166c <ADC2_IN4_autoreg_coeffs+0x128>)
 800158e:	f00b fcdf 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_4[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001598:	e02f      	b.n	80015fa <ADC2_IN4_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80015a0:	e022      	b.n	80015e8 <ADC2_IN4_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_4[r * 10 + c] = AutoCorr_4[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80015a2:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80015a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80015b0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80015b4:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	461a      	mov	r2, r3
 80015c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015c6:	4413      	add	r3, r2
 80015c8:	4827      	ldr	r0, [pc, #156]	; (8001668 <ADC2_IN4_autoreg_coeffs+0x124>)
 80015ca:	008a      	lsls	r2, r1, #2
 80015cc:	4402      	add	r2, r0
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80015d4:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80015de:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015e2:	3301      	adds	r3, #1
 80015e4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80015e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	ddd8      	ble.n	80015a2 <ADC2_IN4_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80015f0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80015f4:	3301      	adds	r3, #1
 80015f6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80015fa:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80015fe:	2b09      	cmp	r3, #9
 8001600:	ddcb      	ble.n	800159a <ADC2_IN4_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN4_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_4); // Initializes the Yule-Walker matrix
 8001602:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001606:	220a      	movs	r2, #10
 8001608:	210a      	movs	r1, #10
 800160a:	4819      	ldr	r0, [pc, #100]	; (8001670 <ADC2_IN4_autoreg_coeffs+0x12c>)
 800160c:	f00b fca0 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_4[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN4_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_4); // Initializes the inverse Yule-Walker matrix
 8001610:	463b      	mov	r3, r7
 8001612:	220a      	movs	r2, #10
 8001614:	210a      	movs	r1, #10
 8001616:	4817      	ldr	r0, [pc, #92]	; (8001674 <ADC2_IN4_autoreg_coeffs+0x130>)
 8001618:	f00b fc9a 	bl	800cf50 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_4 = arm_mat_inverse_f32(&ADC2_IN4_YW_mtx, &ADC2_IN4_Inv_YW_mtx);
 800161c:	4915      	ldr	r1, [pc, #84]	; (8001674 <ADC2_IN4_autoreg_coeffs+0x130>)
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <ADC2_IN4_autoreg_coeffs+0x12c>)
 8001620:	f00b fb90 	bl	800cd44 <arm_mat_inverse_f32>
 8001624:	4603      	mov	r3, r0
 8001626:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_4 == ARM_MATH_SUCCESS) // Check if operation was successful
 800162a:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800162e:	2b00      	cmp	r3, #0
 8001630:	d113      	bne.n	800165a <ADC2_IN4_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_4, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8001632:	2228      	movs	r2, #40	; 0x28
 8001634:	2100      	movs	r1, #0
 8001636:	4810      	ldr	r0, [pc, #64]	; (8001678 <ADC2_IN4_autoreg_coeffs+0x134>)
 8001638:	f00c fed9 	bl	800e3ee <memset>

		arm_mat_init_f32(&ADC2_IN4_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_4); //Initializes the coefficients Matrix
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <ADC2_IN4_autoreg_coeffs+0x134>)
 800163e:	2201      	movs	r2, #1
 8001640:	210a      	movs	r1, #10
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <ADC2_IN4_autoreg_coeffs+0x138>)
 8001644:	f00b fc84 	bl	800cf50 <arm_mat_init_f32>

        StatusCoeffs_4 = arm_mat_mult_f32( &ADC2_IN4_Inv_YW_mtx, &ADC2_IN4_AC_mtx, &ADC2_IN4_coeffs_mtx );
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <ADC2_IN4_autoreg_coeffs+0x138>)
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <ADC2_IN4_autoreg_coeffs+0x128>)
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <ADC2_IN4_autoreg_coeffs+0x130>)
 800164e:	f00b fad9 	bl	800cc04 <arm_mat_mult_f32>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <ADC2_IN4_autoreg_coeffs+0x13c>)
 8001658:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_4;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <ADC2_IN4_autoreg_coeffs+0x134>)
}
 800165c:	4618      	mov	r0, r3
 800165e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20007af0 	.word	0x20007af0
 800166c:	20009d94 	.word	0x20009d94
 8001670:	20009d34 	.word	0x20009d34
 8001674:	20009d64 	.word	0x20009d64
 8001678:	20007bec 	.word	0x20007bec
 800167c:	20009dc4 	.word	0x20009dc4
 8001680:	20009ddf 	.word	0x20009ddf

08001684 <ADC3_IN1_autocorr_calc>:



void ADC3_IN1_autocorr_calc(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e01e      	b.n	80016ce <ADC3_IN1_autocorr_calc+0x4a>
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001696:	23a0      	movs	r3, #160	; 0xa0
 8001698:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3308      	adds	r3, #8
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <ADC3_IN1_autocorr_calc+0x5c>)
 80016a2:	4413      	add	r3, r2
 80016a4:	1d18      	adds	r0, r3, #4
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	490e      	ldr	r1, [pc, #56]	; (80016e4 <ADC3_IN1_autocorr_calc+0x60>)
 80016ac:	f00b fe1c 	bl	800d2e8 <arm_dot_prod_f32>

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80016b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80016e8 <ADC3_IN1_autocorr_calc+0x64>
 80016b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <ADC3_IN1_autocorr_calc+0x68>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	d9dd      	bls.n	8001690 <ADC3_IN1_autocorr_calc+0xc>
	}
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20009234 	.word	0x20009234
 80016e4:	20009258 	.word	0x20009258
 80016e8:	432a0000 	.word	0x432a0000
 80016ec:	20007b1c 	.word	0x20007b1c

080016f0 <ADC3_IN1_autoreg_coeffs>:

float32_t* ADC3_IN1_autoreg_coeffs(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80016f6:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_5 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80016fe:	e013      	b.n	8001728 <ADC3_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_5[n] = AutoCorr_5[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001700:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001704:	3301      	adds	r3, #1
 8001706:	4a43      	ldr	r2, [pc, #268]	; (8001814 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001718:	443b      	add	r3, r7
 800171a:	3b38      	subs	r3, #56	; 0x38
 800171c:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800171e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001722:	3301      	adds	r3, #1
 8001724:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001728:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800172c:	2b09      	cmp	r3, #9
 800172e:	d9e7      	bls.n	8001700 <ADC3_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_5); //Initializes the autocorrelations matrix
 8001730:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001734:	2201      	movs	r2, #1
 8001736:	210a      	movs	r1, #10
 8001738:	4837      	ldr	r0, [pc, #220]	; (8001818 <ADC3_IN1_autoreg_coeffs+0x128>)
 800173a:	f00b fc09 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_5[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001744:	e02f      	b.n	80017a6 <ADC3_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800174c:	e022      	b.n	8001794 <ADC3_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_5[r * 10 + c] = AutoCorr_5[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800174e:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001752:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800175c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001760:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	461a      	mov	r2, r3
 800176e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001772:	4413      	add	r3, r2
 8001774:	4827      	ldr	r0, [pc, #156]	; (8001814 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001776:	008a      	lsls	r2, r1, #2
 8001778:	4402      	add	r2, r0
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001780:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800178a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800178e:	3301      	adds	r3, #1
 8001790:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001794:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001798:	2b09      	cmp	r3, #9
 800179a:	ddd8      	ble.n	800174e <ADC3_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 800179c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80017a6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	ddcb      	ble.n	8001746 <ADC3_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_5); // Initializes the Yule-Walker matrix
 80017ae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017b2:	220a      	movs	r2, #10
 80017b4:	210a      	movs	r1, #10
 80017b6:	4819      	ldr	r0, [pc, #100]	; (800181c <ADC3_IN1_autoreg_coeffs+0x12c>)
 80017b8:	f00b fbca 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_5[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_5); // Initializes the inverse Yule-Walker matrix
 80017bc:	463b      	mov	r3, r7
 80017be:	220a      	movs	r2, #10
 80017c0:	210a      	movs	r1, #10
 80017c2:	4817      	ldr	r0, [pc, #92]	; (8001820 <ADC3_IN1_autoreg_coeffs+0x130>)
 80017c4:	f00b fbc4 	bl	800cf50 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_5 = arm_mat_inverse_f32(&ADC3_IN1_YW_mtx, &ADC3_IN1_Inv_YW_mtx);
 80017c8:	4915      	ldr	r1, [pc, #84]	; (8001820 <ADC3_IN1_autoreg_coeffs+0x130>)
 80017ca:	4814      	ldr	r0, [pc, #80]	; (800181c <ADC3_IN1_autoreg_coeffs+0x12c>)
 80017cc:	f00b faba 	bl	800cd44 <arm_mat_inverse_f32>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_5 == ARM_MATH_SUCCESS) // Check if operation was successful
 80017d6:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d113      	bne.n	8001806 <ADC3_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	4810      	ldr	r0, [pc, #64]	; (8001824 <ADC3_IN1_autoreg_coeffs+0x134>)
 80017e4:	f00c fe03 	bl	800e3ee <memset>

		arm_mat_init_f32(&ADC3_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_5); //Initializes the coefficients Matrix
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <ADC3_IN1_autoreg_coeffs+0x138>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	210a      	movs	r1, #10
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <ADC3_IN1_autoreg_coeffs+0x13c>)
 80017f0:	f00b fbae 	bl	800cf50 <arm_mat_init_f32>

        StatusCoeffs_5 = arm_mat_mult_f32( &ADC3_IN1_Inv_YW_mtx, &ADC3_IN1_AC_mtx, &ADC3_IN1_coeffs_mtx );
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <ADC3_IN1_autoreg_coeffs+0x13c>)
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <ADC3_IN1_autoreg_coeffs+0x128>)
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <ADC3_IN1_autoreg_coeffs+0x130>)
 80017fa:	f00b fa03 	bl	800cc04 <arm_mat_mult_f32>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <ADC3_IN1_autoreg_coeffs+0x140>)
 8001804:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_5;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <ADC3_IN1_autoreg_coeffs+0x138>)
}
 8001808:	4618      	mov	r0, r3
 800180a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20007b1c 	.word	0x20007b1c
 8001818:	20009d9c 	.word	0x20009d9c
 800181c:	20009d3c 	.word	0x20009d3c
 8001820:	20009d6c 	.word	0x20009d6c
 8001824:	20007b74 	.word	0x20007b74
 8001828:	20007c14 	.word	0x20007c14
 800182c:	20009dcc 	.word	0x20009dcc
 8001830:	20009de0 	.word	0x20009de0

08001834 <ADC3_IN2_autocorr_calc>:



void ADC3_IN2_autocorr_calc(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e01e      	b.n	800187e <ADC3_IN2_autocorr_calc+0x4a>
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001846:	23a0      	movs	r3, #160	; 0xa0
 8001848:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3308      	adds	r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <ADC3_IN2_autocorr_calc+0x5c>)
 8001852:	4413      	add	r3, r2
 8001854:	1d18      	adds	r0, r3, #4
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	490e      	ldr	r1, [pc, #56]	; (8001894 <ADC3_IN2_autocorr_calc+0x60>)
 800185c:	f00b fd44 	bl	800d2e8 <arm_dot_prod_f32>

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001860:	ed97 7a01 	vldr	s14, [r7, #4]
 8001864:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001898 <ADC3_IN2_autocorr_calc+0x64>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <ADC3_IN2_autocorr_calc+0x68>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d9dd      	bls.n	8001840 <ADC3_IN2_autocorr_calc+0xc>
	}
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200097a8 	.word	0x200097a8
 8001894:	200097cc 	.word	0x200097cc
 8001898:	432a0000 	.word	0x432a0000
 800189c:	20007b48 	.word	0x20007b48

080018a0 <ADC3_IN2_autoreg_coeffs>:

float32_t* ADC3_IN2_autoreg_coeffs(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80018a6:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_6 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80018ae:	e013      	b.n	80018d8 <ADC3_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_6[n] = AutoCorr_6[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80018b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <ADC3_IN2_autoreg_coeffs+0x124>)
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80018c8:	443b      	add	r3, r7
 80018ca:	3b38      	subs	r3, #56	; 0x38
 80018cc:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80018ce:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018d2:	3301      	adds	r3, #1
 80018d4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80018d8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d9e7      	bls.n	80018b0 <ADC3_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_6); //Initializes the autocorrelations matrix
 80018e0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80018e4:	2201      	movs	r2, #1
 80018e6:	210a      	movs	r1, #10
 80018e8:	4837      	ldr	r0, [pc, #220]	; (80019c8 <ADC3_IN2_autoreg_coeffs+0x128>)
 80018ea:	f00b fb31 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_6[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80018f4:	e02f      	b.n	8001956 <ADC3_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80018fc:	e022      	b.n	8001944 <ADC3_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_6[r * 10 + c] = AutoCorr_6[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80018fe:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001902:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800190c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001910:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	461a      	mov	r2, r3
 800191e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001922:	4413      	add	r3, r2
 8001924:	4827      	ldr	r0, [pc, #156]	; (80019c4 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001926:	008a      	lsls	r2, r1, #2
 8001928:	4402      	add	r2, r0
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001930:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800193a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800193e:	3301      	adds	r3, #1
 8001940:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001944:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001948:	2b09      	cmp	r3, #9
 800194a:	ddd8      	ble.n	80018fe <ADC3_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 800194c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001950:	3301      	adds	r3, #1
 8001952:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001956:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800195a:	2b09      	cmp	r3, #9
 800195c:	ddcb      	ble.n	80018f6 <ADC3_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_6); // Initializes the Yule-Walker matrix
 800195e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001962:	220a      	movs	r2, #10
 8001964:	210a      	movs	r1, #10
 8001966:	4819      	ldr	r0, [pc, #100]	; (80019cc <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001968:	f00b faf2 	bl	800cf50 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_6[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_6); // Initializes the inverse Yule-Walker matrix
 800196c:	463b      	mov	r3, r7
 800196e:	220a      	movs	r2, #10
 8001970:	210a      	movs	r1, #10
 8001972:	4817      	ldr	r0, [pc, #92]	; (80019d0 <ADC3_IN2_autoreg_coeffs+0x130>)
 8001974:	f00b faec 	bl	800cf50 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_6 = arm_mat_inverse_f32(&ADC3_IN2_YW_mtx, &ADC3_IN2_Inv_YW_mtx);
 8001978:	4915      	ldr	r1, [pc, #84]	; (80019d0 <ADC3_IN2_autoreg_coeffs+0x130>)
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <ADC3_IN2_autoreg_coeffs+0x12c>)
 800197c:	f00b f9e2 	bl	800cd44 <arm_mat_inverse_f32>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_6 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001986:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <ADC3_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_6, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800198e:	2228      	movs	r2, #40	; 0x28
 8001990:	2100      	movs	r1, #0
 8001992:	4810      	ldr	r0, [pc, #64]	; (80019d4 <ADC3_IN2_autoreg_coeffs+0x134>)
 8001994:	f00c fd2b 	bl	800e3ee <memset>

		arm_mat_init_f32(&ADC3_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_6); //Initializes the coefficients Matrix
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <ADC3_IN2_autoreg_coeffs+0x134>)
 800199a:	2201      	movs	r2, #1
 800199c:	210a      	movs	r1, #10
 800199e:	480e      	ldr	r0, [pc, #56]	; (80019d8 <ADC3_IN2_autoreg_coeffs+0x138>)
 80019a0:	f00b fad6 	bl	800cf50 <arm_mat_init_f32>

        StatusCoeffs_6 = arm_mat_mult_f32( &ADC3_IN2_Inv_YW_mtx, &ADC3_IN2_AC_mtx, &ADC3_IN2_coeffs_mtx );
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <ADC3_IN2_autoreg_coeffs+0x138>)
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <ADC3_IN2_autoreg_coeffs+0x128>)
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <ADC3_IN2_autoreg_coeffs+0x130>)
 80019aa:	f00b f92b 	bl	800cc04 <arm_mat_mult_f32>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <ADC3_IN2_autoreg_coeffs+0x13c>)
 80019b4:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_6;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <ADC3_IN2_autoreg_coeffs+0x134>)
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20007b48 	.word	0x20007b48
 80019c8:	20009da4 	.word	0x20009da4
 80019cc:	20009d44 	.word	0x20009d44
 80019d0:	20009d74 	.word	0x20009d74
 80019d4:	20007c3c 	.word	0x20007c3c
 80019d8:	20009dd4 	.word	0x20009dd4
 80019dc:	20009de1 	.word	0x20009de1

080019e0 <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e00a      	b.n	8001a04 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3304      	adds	r3, #4
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	3301      	adds	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b07      	cmp	r3, #7
 8001a08:	d9f1      	bls.n	80019ee <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	e00b      	b.n	8001a2e <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3304      	adds	r3, #4
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2ba9      	cmp	r3, #169	; 0xa9
 8001a32:	d9f0      	bls.n	8001a16 <MA_ADC1_IN1_Init+0x36>
	}
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e05a      	b.n	8001b08 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4932      	ldr	r1, [pc, #200]	; (8001b20 <MA_ADC1_IN1_Update+0xdc>)
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	3212      	adds	r2, #18
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	440a      	add	r2, r1
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	3304      	adds	r3, #4
 8001a6a:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d102      	bne.n	8001a84 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3308      	adds	r3, #8
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3304      	adds	r3, #4
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e02c      	b.n	8001afc <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e001      	b.n	8001ab4 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3308      	adds	r3, #8
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3304      	adds	r3, #4
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <MA_ADC1_IN1_Update+0xe0>)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	edd3 6a00 	vldr	s13, [r3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3308      	adds	r3, #8
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	d9cf      	bls.n	8001aa2 <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d99f      	bls.n	8001a52 <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	20000048 	.word	0x20000048
 8001b24:	20000000 	.word	0x20000000

08001b28 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e00a      	b.n	8001b4c <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3304      	adds	r3, #4
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d9f1      	bls.n	8001b36 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	e00b      	b.n	8001b76 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3308      	adds	r3, #8
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3304      	adds	r3, #4
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3301      	adds	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2ba9      	cmp	r3, #169	; 0xa9
 8001b7a:	d9f0      	bls.n	8001b5e <MA_ADC1_IN2_Init+0x36>
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e05a      	b.n	8001c50 <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4932      	ldr	r1, [pc, #200]	; (8001c68 <MA_ADC1_IN2_Update+0xdc>)
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	3212      	adds	r2, #18
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	440a      	add	r2, r1
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d102      	bne.n	8001bcc <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e02c      	b.n	8001c44 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e001      	b.n	8001bfc <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3308      	adds	r3, #8
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3304      	adds	r3, #4
 8001c08:	ed93 7a00 	vldr	s14, [r3]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <MA_ADC1_IN2_Update+0xe0>)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	edd3 6a00 	vldr	s13, [r3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3308      	adds	r3, #8
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3301      	adds	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d9cf      	bls.n	8001bea <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d99f      	bls.n	8001b9a <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	20001454 	.word	0x20001454
 8001c6c:	20000000 	.word	0x20000000

08001c70 <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e00a      	b.n	8001c94 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	3301      	adds	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d9f1      	bls.n	8001c7e <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	e00b      	b.n	8001cbe <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	3308      	adds	r3, #8
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2ba9      	cmp	r3, #169	; 0xa9
 8001cc2:	d9f0      	bls.n	8001ca6 <MA_ADC2_IN3_Init+0x36>
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e05a      	b.n	8001d98 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4932      	ldr	r1, [pc, #200]	; (8001db0 <MA_ADC2_IN3_Update+0xdc>)
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	3212      	adds	r2, #18
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	440a      	add	r2, r1
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d102      	bne.n	8001d14 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3308      	adds	r3, #8
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e02c      	b.n	8001d8c <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e001      	b.n	8001d44 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 8001d40:	2307      	movs	r3, #7
 8001d42:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3308      	adds	r3, #8
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <MA_ADC2_IN3_Update+0xe0>)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	edd3 6a00 	vldr	s13, [r3]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b07      	cmp	r3, #7
 8001d90:	d9cf      	bls.n	8001d32 <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d99f      	bls.n	8001ce2 <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20002860 	.word	0x20002860
 8001db4:	20000000 	.word	0x20000000

08001db8 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e00a      	b.n	8001ddc <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b07      	cmp	r3, #7
 8001de0:	d9f1      	bls.n	8001dc6 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	e00b      	b.n	8001e06 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	3308      	adds	r3, #8
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	3304      	adds	r3, #4
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2ba9      	cmp	r3, #169	; 0xa9
 8001e0a:	d9f0      	bls.n	8001dee <MA_ADC2_IN4_Init+0x36>
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e05a      	b.n	8001ee0 <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4932      	ldr	r1, [pc, #200]	; (8001ef8 <MA_ADC2_IN4_Update+0xdc>)
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	3212      	adds	r2, #18
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	440a      	add	r2, r1
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3304      	adds	r3, #4
 8001e42:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d102      	bne.n	8001e5c <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3308      	adds	r3, #8
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e02c      	b.n	8001ed4 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	e001      	b.n	8001e8c <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001e88:	2307      	movs	r3, #7
 8001e8a:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3308      	adds	r3, #8
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3304      	adds	r3, #4
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <MA_ADC2_IN4_Update+0xe0>)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	edd3 6a00 	vldr	s13, [r3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b07      	cmp	r3, #7
 8001ed8:	d9cf      	bls.n	8001e7a <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d99f      	bls.n	8001e2a <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	20003c6c 	.word	0x20003c6c
 8001efc:	20000000 	.word	0x20000000

08001f00 <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e00a      	b.n	8001f24 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3304      	adds	r3, #4
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	3301      	adds	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b07      	cmp	r3, #7
 8001f28:	d9f1      	bls.n	8001f0e <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	e00b      	b.n	8001f4e <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2ba9      	cmp	r3, #169	; 0xa9
 8001f52:	d9f0      	bls.n	8001f36 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e05a      	b.n	8002028 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4932      	ldr	r1, [pc, #200]	; (8002040 <MA_ADC3_IN1_Update+0xdc>)
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	3212      	adds	r2, #18
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	440a      	add	r2, r1
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	3304      	adds	r3, #4
 8001f8a:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d102      	bne.n	8001fa4 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3308      	adds	r3, #8
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	3304      	adds	r3, #4
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e02c      	b.n	800201c <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e001      	b.n	8001fd4 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	ed93 7a00 	vldr	s14, [r3]
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <MA_ADC3_IN1_Update+0xe0>)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	edd3 6a00 	vldr	s13, [r3]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3308      	adds	r3, #8
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3301      	adds	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b07      	cmp	r3, #7
 8002020:	d9cf      	bls.n	8001fc2 <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800202e:	4293      	cmp	r3, r2
 8002030:	d99f      	bls.n	8001f72 <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20005078 	.word	0x20005078
 8002044:	20000000 	.word	0x20000000

08002048 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e00a      	b.n	800206c <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	3301      	adds	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b07      	cmp	r3, #7
 8002070:	d9f1      	bls.n	8002056 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	e00b      	b.n	8002096 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3308      	adds	r3, #8
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2ba9      	cmp	r3, #169	; 0xa9
 800209a:	d9f0      	bls.n	800207e <MA_ADC3_IN2_Init+0x36>
	}
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e05a      	b.n	8002170 <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4932      	ldr	r1, [pc, #200]	; (8002188 <MA_ADC3_IN2_Update+0xdc>)
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	3212      	adds	r2, #18
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	440a      	add	r2, r1
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3304      	adds	r3, #4
 80020d2:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d102      	bne.n	80020ec <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3308      	adds	r3, #8
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e02c      	b.n	8002164 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	3b01      	subs	r3, #1
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	e001      	b.n	800211c <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8002118:	2307      	movs	r3, #7
 800211a:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3308      	adds	r3, #8
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	ed93 7a00 	vldr	s14, [r3]
 800212c:	4a17      	ldr	r2, [pc, #92]	; (800218c <MA_ADC3_IN2_Update+0xe0>)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	edd3 6a00 	vldr	s13, [r3]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3308      	adds	r3, #8
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b07      	cmp	r3, #7
 8002168:	d9cf      	bls.n	800210a <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002176:	4293      	cmp	r3, r2
 8002178:	d99f      	bls.n	80020ba <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	20006484 	.word	0x20006484
 800218c:	20000000 	.word	0x20000000

08002190 <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
	if(ADC1_Current_buffer == 1)
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <init_ADC1_IN1_struct+0x34>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <init_ADC1_IN1_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <init_ADC1_IN1_struct+0x38>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80021a4:	331c      	adds	r3, #28
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <init_ADC1_IN1_struct+0x3c>)
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
	}
  }
 80021aa:	e006      	b.n	80021ba <init_ADC1_IN1_struct+0x2a>
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <init_ADC1_IN1_struct+0x38>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80021b4:	3314      	adds	r3, #20
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <init_ADC1_IN1_struct+0x3c>)
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	20007868 	.word	0x20007868
 80021c8:	2000c008 	.word	0x2000c008
 80021cc:	20000048 	.word	0x20000048

080021d0 <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80021d6:	7819      	ldrb	r1, [r3, #0]
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <init_ADC1_IN1_FO_biquad_filter+0x20>)
 80021e2:	f00b f875 	bl	800d2d0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000048 	.word	0x20000048
 80021f0:	20001420 	.word	0x20001420

080021f4 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 80021fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 80021fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002202:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8002208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8002212:	f00a fea1 	bl	800cf58 <arm_biquad_cascade_df2T_f32>
   }
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000048 	.word	0x20000048
 8002220:	20001420 	.word	0x20001420

08002224 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

	if(ADC1_Current_buffer == 1)
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <init_ADC1_IN2_struct+0x34>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <init_ADC1_IN2_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <init_ADC1_IN2_struct+0x38>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8002238:	3330      	adds	r3, #48	; 0x30
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <init_ADC1_IN2_struct+0x3c>)
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
	}
  }
 800223e:	e006      	b.n	800224e <init_ADC1_IN2_struct+0x2a>
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <init_ADC1_IN2_struct+0x38>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002248:	3328      	adds	r3, #40	; 0x28
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <init_ADC1_IN2_struct+0x3c>)
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	20007868 	.word	0x20007868
 800225c:	2000c008 	.word	0x2000c008
 8002260:	20001454 	.word	0x20001454

08002264 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 800226a:	7819      	ldrb	r1, [r3, #0]
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 800226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8002276:	f00b f82b 	bl	800d2d0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20001454 	.word	0x20001454
 8002284:	2000282c 	.word	0x2000282c

08002288 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 800228e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 80022a6:	f00a fe57 	bl	800cf58 <arm_biquad_cascade_df2T_f32>
   }
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20001454 	.word	0x20001454
 80022b4:	2000282c 	.word	0x2000282c

080022b8 <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

	if(ADC2_Current_buffer == 1)
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <init_ADC2_IN3_struct+0x34>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <init_ADC2_IN3_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <init_ADC2_IN3_struct+0x38>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80022cc:	331c      	adds	r3, #28
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <init_ADC2_IN3_struct+0x3c>)
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
	}
  }
 80022d2:	e006      	b.n	80022e2 <init_ADC2_IN3_struct+0x2a>
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <init_ADC2_IN3_struct+0x38>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80022dc:	3314      	adds	r3, #20
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <init_ADC2_IN3_struct+0x3c>)
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	20007869 	.word	0x20007869
 80022f0:	2000c00c 	.word	0x2000c00c
 80022f4:	20002860 	.word	0x20002860

080022f8 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 80022fe:	7819      	ldrb	r1, [r3, #0]
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 800230a:	f00a ffe1 	bl	800d2d0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20002860 	.word	0x20002860
 8002318:	20003c38 	.word	0x20003c38

0800231c <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8002322:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002338:	4803      	ldr	r0, [pc, #12]	; (8002348 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 800233a:	f00a fe0d 	bl	800cf58 <arm_biquad_cascade_df2T_f32>
   }
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20002860 	.word	0x20002860
 8002348:	20003c38 	.word	0x20003c38

0800234c <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

	if(ADC2_Current_buffer == 1)
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <init_ADC2_IN4_struct+0x34>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <init_ADC2_IN4_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <init_ADC2_IN4_struct+0x38>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8002360:	3330      	adds	r3, #48	; 0x30
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <init_ADC2_IN4_struct+0x3c>)
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
	}
  }
 8002366:	e006      	b.n	8002376 <init_ADC2_IN4_struct+0x2a>
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <init_ADC2_IN4_struct+0x38>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002370:	3328      	adds	r3, #40	; 0x28
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <init_ADC2_IN4_struct+0x3c>)
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	20007869 	.word	0x20007869
 8002384:	2000c00c 	.word	0x2000c00c
 8002388:	20003c6c 	.word	0x20003c6c

0800238c <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8002392:	7819      	ldrb	r1, [r3, #0]
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <init_ADC2_IN4_FO_biquad_filter+0x20>)
 800239e:	f00a ff97 	bl	800d2d0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20003c6c 	.word	0x20003c6c
 80023ac:	20005044 	.word	0x20005044

080023b0 <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80023b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80023ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023be:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80023cc:	4803      	ldr	r0, [pc, #12]	; (80023dc <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 80023ce:	f00a fdc3 	bl	800cf58 <arm_biquad_cascade_df2T_f32>
   }
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20003c6c 	.word	0x20003c6c
 80023dc:	20005044 	.word	0x20005044

080023e0 <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
    if(ADC3_Current_buffer == 1)
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <init_ADC3_IN1_struct+0x34>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d107      	bne.n	80023fc <init_ADC3_IN1_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <init_ADC3_IN1_struct+0x38>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80023f4:	331c      	adds	r3, #28
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <init_ADC3_IN1_struct+0x3c>)
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
	}
  }
 80023fa:	e006      	b.n	800240a <init_ADC3_IN1_struct+0x2a>
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <init_ADC3_IN1_struct+0x38>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002404:	3314      	adds	r3, #20
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <init_ADC3_IN1_struct+0x3c>)
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	2000786a 	.word	0x2000786a
 8002418:	2000c010 	.word	0x2000c010
 800241c:	20005078 	.word	0x20005078

08002420 <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8002426:	7819      	ldrb	r1, [r3, #0]
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8002432:	f00a ff4d 	bl	800d2d0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20005078 	.word	0x20005078
 8002440:	20006450 	.word	0x20006450

08002444 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800244a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8002462:	f00a fd79 	bl	800cf58 <arm_biquad_cascade_df2T_f32>
   }
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20005078 	.word	0x20005078
 8002470:	20006450 	.word	0x20006450

08002474 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
    if(ADC3_Current_buffer == 1)
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <init_ADC3_IN2_struct+0x34>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <init_ADC3_IN2_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt);
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <init_ADC3_IN2_struct+0x38>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8002488:	3330      	adds	r3, #48	; 0x30
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <init_ADC3_IN2_struct+0x3c>)
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);
	}
  }
 800248e:	e006      	b.n	800249e <init_ADC3_IN2_struct+0x2a>
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <init_ADC3_IN2_struct+0x38>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002498:	3328      	adds	r3, #40	; 0x28
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <init_ADC3_IN2_struct+0x3c>)
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	2000786a 	.word	0x2000786a
 80024ac:	2000c010 	.word	0x2000c010
 80024b0:	20006484 	.word	0x20006484

080024b4 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80024ba:	7819      	ldrb	r1, [r3, #0]
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 80024c6:	f00a ff03 	bl	800d2d0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20006484 	.word	0x20006484
 80024d4:	2000785c 	.word	0x2000785c

080024d8 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80024de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80024e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e6:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80024ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 80024f6:	f00a fd2f 	bl	800cf58 <arm_biquad_cascade_df2T_f32>
   }
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20006484 	.word	0x20006484
 8002504:	2000785c 	.word	0x2000785c

08002508 <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	e010      	b.n	800253e <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3308      	adds	r3, #8
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002534:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3301      	adds	r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2ba9      	cmp	r3, #169	; 0xa9
 8002542:	d9eb      	bls.n	800251c <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002544:	edd7 7a03 	vldr	s15, [r7, #12]
 8002548:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002564 <ADC1_IN1_OffsetCalc+0x5c>
 800254c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002550:	eef0 7a66 	vmov.f32	s15, s13
}
 8002554:	eeb0 0a67 	vmov.f32	s0, s15
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	432a0000 	.word	0x432a0000

08002568 <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	e010      	b.n	800259e <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3308      	adds	r3, #8
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3301      	adds	r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2ba9      	cmp	r3, #169	; 0xa9
 80025a2:	d9eb      	bls.n	800257c <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80025a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80025a8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80025c4 <ADC1_IN2_OffsetCalc+0x5c>
 80025ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025b0:	eef0 7a66 	vmov.f32	s15, s13
}
 80025b4:	eeb0 0a67 	vmov.f32	s0, s15
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	432a0000 	.word	0x432a0000

080025c8 <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	e010      	b.n	80025fe <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3308      	adds	r3, #8
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3304      	adds	r3, #4
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80025f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2ba9      	cmp	r3, #169	; 0xa9
 8002602:	d9eb      	bls.n	80025dc <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002604:	edd7 7a03 	vldr	s15, [r7, #12]
 8002608:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002624 <ADC2_IN3_OffsetCalc+0x5c>
 800260c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002610:	eef0 7a66 	vmov.f32	s15, s13
}
 8002614:	eeb0 0a67 	vmov.f32	s0, s15
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	432a0000 	.word	0x432a0000

08002628 <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	e010      	b.n	800265e <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3308      	adds	r3, #8
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3301      	adds	r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2ba9      	cmp	r3, #169	; 0xa9
 8002662:	d9eb      	bls.n	800263c <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002664:	edd7 7a03 	vldr	s15, [r7, #12]
 8002668:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002684 <ADC2_IN4_OffsetCalc+0x5c>
 800266c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002670:	eef0 7a66 	vmov.f32	s15, s13
}
 8002674:	eeb0 0a67 	vmov.f32	s0, s15
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	432a0000 	.word	0x432a0000

08002688 <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	e010      	b.n	80026be <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3308      	adds	r3, #8
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80026b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	3301      	adds	r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2ba9      	cmp	r3, #169	; 0xa9
 80026c2:	d9eb      	bls.n	800269c <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80026c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80026e4 <ADC3_IN1_OffsetCalc+0x5c>
 80026cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	432a0000 	.word	0x432a0000

080026e8 <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	e010      	b.n	800271e <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3308      	adds	r3, #8
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3301      	adds	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2ba9      	cmp	r3, #169	; 0xa9
 8002722:	d9eb      	bls.n	80026fc <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002724:	edd7 7a03 	vldr	s15, [r7, #12]
 8002728:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002744 <ADC3_IN2_OffsetCalc+0x5c>
 800272c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002730:	eef0 7a66 	vmov.f32	s15, s13
}
 8002734:	eeb0 0a67 	vmov.f32	s0, s15
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	432a0000 	.word	0x432a0000

08002748 <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e01a      	b.n	8002796 <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	3308      	adds	r3, #8
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	edd7 7a00 	vldr	s15, [r7]
 8002774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002778:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 800277c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002780:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002784:	ed97 7a05 	vldr	s14, [r7, #20]
 8002788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	3301      	adds	r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2ba9      	cmp	r3, #169	; 0xa9
 800279a:	d9e1      	bls.n	8002760 <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 800279c:	ed97 7a05 	vldr	s14, [r7, #20]
 80027a0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80027dc <ADC1_IN1_SD_BL+0x94>
 80027a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a8:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 80027ac:	6978      	ldr	r0, [r7, #20]
 80027ae:	f7fd fef3 	bl	8000598 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	ec43 2b10 	vmov	d0, r2, r3
 80027ba:	f00d fe21 	bl	8010400 <sqrt>
 80027be:	ec53 2b10 	vmov	r2, r3, d0
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe fa37 	bl	8000c38 <__aeabi_d2f>
 80027ca:	4603      	mov	r3, r0
 80027cc:	ee07 3a90 	vmov	s15, r3
}
 80027d0:	eeb0 0a67 	vmov.f32	s0, s15
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	432a0000 	.word	0x432a0000

080027e0 <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e01a      	b.n	800282e <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	3308      	adds	r3, #8
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	edd7 7a00 	vldr	s15, [r7]
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 8002814:	edd7 7a03 	vldr	s15, [r7, #12]
 8002818:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800281c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002824:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	3301      	adds	r3, #1
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2ba9      	cmp	r3, #169	; 0xa9
 8002832:	d9e1      	bls.n	80027f8 <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002834:	ed97 7a05 	vldr	s14, [r7, #20]
 8002838:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002874 <ADC1_IN2_SD_BL+0x94>
 800283c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002840:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 8002844:	6978      	ldr	r0, [r7, #20]
 8002846:	f7fd fea7 	bl	8000598 <__aeabi_f2d>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	ec43 2b10 	vmov	d0, r2, r3
 8002852:	f00d fdd5 	bl	8010400 <sqrt>
 8002856:	ec53 2b10 	vmov	r2, r3, d0
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f7fe f9eb 	bl	8000c38 <__aeabi_d2f>
 8002862:	4603      	mov	r3, r0
 8002864:	ee07 3a90 	vmov	s15, r3

}
 8002868:	eeb0 0a67 	vmov.f32	s0, s15
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	432a0000 	.word	0x432a0000

08002878 <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e01a      	b.n	80028c6 <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	3308      	adds	r3, #8
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	ed93 7a00 	vldr	s14, [r3]
 80028a0:	edd7 7a00 	vldr	s15, [r7]
 80028a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a8:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 80028ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80028b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80028b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028bc:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3301      	adds	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2ba9      	cmp	r3, #169	; 0xa9
 80028ca:	d9e1      	bls.n	8002890 <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80028cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80028d0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800290c <ADC2_IN3_SD_BL+0x94>
 80028d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d8:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 80028dc:	6978      	ldr	r0, [r7, #20]
 80028de:	f7fd fe5b 	bl	8000598 <__aeabi_f2d>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	ec43 2b10 	vmov	d0, r2, r3
 80028ea:	f00d fd89 	bl	8010400 <sqrt>
 80028ee:	ec53 2b10 	vmov	r2, r3, d0
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f7fe f99f 	bl	8000c38 <__aeabi_d2f>
 80028fa:	4603      	mov	r3, r0
 80028fc:	ee07 3a90 	vmov	s15, r3

}
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	432a0000 	.word	0x432a0000

08002910 <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e01a      	b.n	800295e <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3308      	adds	r3, #8
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	ed93 7a00 	vldr	s14, [r3]
 8002938:	edd7 7a00 	vldr	s15, [r7]
 800293c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002940:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 8002944:	edd7 7a03 	vldr	s15, [r7, #12]
 8002948:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800294c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002954:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3301      	adds	r3, #1
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2ba9      	cmp	r3, #169	; 0xa9
 8002962:	d9e1      	bls.n	8002928 <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002964:	ed97 7a05 	vldr	s14, [r7, #20]
 8002968:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80029a4 <ADC2_IN4_SD_BL+0x94>
 800296c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002970:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 8002974:	6978      	ldr	r0, [r7, #20]
 8002976:	f7fd fe0f 	bl	8000598 <__aeabi_f2d>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	ec43 2b10 	vmov	d0, r2, r3
 8002982:	f00d fd3d 	bl	8010400 <sqrt>
 8002986:	ec53 2b10 	vmov	r2, r3, d0
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f7fe f953 	bl	8000c38 <__aeabi_d2f>
 8002992:	4603      	mov	r3, r0
 8002994:	ee07 3a90 	vmov	s15, r3

}
 8002998:	eeb0 0a67 	vmov.f32	s0, s15
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	432a0000 	.word	0x432a0000

080029a8 <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e01a      	b.n	80029f6 <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3308      	adds	r3, #8
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	ed93 7a00 	vldr	s14, [r3]
 80029d0:	edd7 7a00 	vldr	s15, [r7]
 80029d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d8:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 80029dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	3301      	adds	r3, #1
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2ba9      	cmp	r3, #169	; 0xa9
 80029fa:	d9e1      	bls.n	80029c0 <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80029fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a00:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002a3c <ADC3_IN1_SD_BL+0x94>
 8002a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a08:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 8002a0c:	6978      	ldr	r0, [r7, #20]
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ec43 2b10 	vmov	d0, r2, r3
 8002a1a:	f00d fcf1 	bl	8010400 <sqrt>
 8002a1e:	ec53 2b10 	vmov	r2, r3, d0
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f7fe f907 	bl	8000c38 <__aeabi_d2f>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	ee07 3a90 	vmov	s15, r3

}
 8002a30:	eeb0 0a67 	vmov.f32	s0, s15
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	432a0000 	.word	0x432a0000

08002a40 <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e01a      	b.n	8002a8e <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	edd7 7a00 	vldr	s15, [r7]
 8002a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a70:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 8002a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2ba9      	cmp	r3, #169	; 0xa9
 8002a92:	d9e1      	bls.n	8002a58 <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a98:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002ad4 <ADC3_IN2_SD_BL+0x94>
 8002a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa0:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 8002aa4:	6978      	ldr	r0, [r7, #20]
 8002aa6:	f7fd fd77 	bl	8000598 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	ec43 2b10 	vmov	d0, r2, r3
 8002ab2:	f00d fca5 	bl	8010400 <sqrt>
 8002ab6:	ec53 2b10 	vmov	r2, r3, d0
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	f7fe f8bb 	bl	8000c38 <__aeabi_d2f>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	ee07 3a90 	vmov	s15, r3

}
 8002ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	432a0000 	.word	0x432a0000

08002ad8 <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002aea:	2301      	movs	r3, #1
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	e055      	b.n	8002b9c <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3308      	adds	r3, #8
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	ed93 7a00 	vldr	s14, [r3]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	3308      	adds	r3, #8
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b16:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	3308      	adds	r3, #8
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	ed93 7a00 	vldr	s14, [r3]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	3308      	adds	r3, #8
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b40:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 8002b44:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	dd1d      	ble.n	8002b96 <ADC1_IN1_SSC+0xbe>
 8002b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b5e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b62:	ed97 7a00 	vldr	s14, [r7]
 8002b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6e:	d40a      	bmi.n	8002b86 <ADC1_IN1_SSC+0xae>
 8002b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b74:	eef0 7ae7 	vabs.f32	s15, s15
 8002b78:	ed97 7a00 	vldr	s14, [r7]
 8002b7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	d507      	bpl.n	8002b96 <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 8002b86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b92:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2ba9      	cmp	r3, #169	; 0xa9
 8002ba0:	d9a6      	bls.n	8002af0 <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	ee07 3a90 	vmov	s15, r3
}
 8002ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b087      	sub	sp, #28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002bc8:	2301      	movs	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e055      	b.n	8002c7a <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	3308      	adds	r3, #8
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	3304      	adds	r3, #4
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf4:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	3304      	adds	r3, #4
 8002c06:	ed93 7a00 	vldr	s14, [r3]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	3304      	adds	r3, #4
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 8002c22:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	dd1d      	ble.n	8002c74 <ADC1_IN2_SSC+0xbe>
 8002c38:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c3c:	eef0 7ae7 	vabs.f32	s15, s15
 8002c40:	ed97 7a00 	vldr	s14, [r7]
 8002c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d40a      	bmi.n	8002c64 <ADC1_IN2_SSC+0xae>
 8002c4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c52:	eef0 7ae7 	vabs.f32	s15, s15
 8002c56:	ed97 7a00 	vldr	s14, [r7]
 8002c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d507      	bpl.n	8002c74 <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 8002c64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c70:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	3301      	adds	r3, #1
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2ba9      	cmp	r3, #169	; 0xa9
 8002c7e:	d9a6      	bls.n	8002bce <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	ee07 3a90 	vmov	s15, r3
}
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e055      	b.n	8002d58 <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	ed93 7a00 	vldr	s14, [r3]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3304      	adds	r3, #4
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd2:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	3308      	adds	r3, #8
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	ed93 7a00 	vldr	s14, [r3]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	3308      	adds	r3, #8
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfc:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 8002d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	dd1d      	ble.n	8002d52 <ADC2_IN3_SSC+0xbe>
 8002d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d1a:	eef0 7ae7 	vabs.f32	s15, s15
 8002d1e:	ed97 7a00 	vldr	s14, [r7]
 8002d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	d40a      	bmi.n	8002d42 <ADC2_IN3_SSC+0xae>
 8002d2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d30:	eef0 7ae7 	vabs.f32	s15, s15
 8002d34:	ed97 7a00 	vldr	s14, [r7]
 8002d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d507      	bpl.n	8002d52 <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 8002d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d4e:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	3301      	adds	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2ba9      	cmp	r3, #169	; 0xa9
 8002d5c:	d9a6      	bls.n	8002cac <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	ee07 3a90 	vmov	s15, r3
}
 8002d64:	eeb0 0a67 	vmov.f32	s0, s15
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002d84:	2301      	movs	r3, #1
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e055      	b.n	8002e36 <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	3308      	adds	r3, #8
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	ed93 7a00 	vldr	s14, [r3]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	3308      	adds	r3, #8
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db0:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	3301      	adds	r3, #1
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	ed93 7a00 	vldr	s14, [r3]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dda:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 8002dde:	ed97 7a03 	vldr	s14, [r7, #12]
 8002de2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	dd1d      	ble.n	8002e30 <ADC2_IN4_SSC+0xbe>
 8002df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df8:	eef0 7ae7 	vabs.f32	s15, s15
 8002dfc:	ed97 7a00 	vldr	s14, [r7]
 8002e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e08:	d40a      	bmi.n	8002e20 <ADC2_IN4_SSC+0xae>
 8002e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e0e:	eef0 7ae7 	vabs.f32	s15, s15
 8002e12:	ed97 7a00 	vldr	s14, [r7]
 8002e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	d507      	bpl.n	8002e30 <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 8002e20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e2c:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	3301      	adds	r3, #1
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2ba9      	cmp	r3, #169	; 0xa9
 8002e3a:	d9a6      	bls.n	8002d8a <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	ee07 3a90 	vmov	s15, r3
}
 8002e42:	eeb0 0a67 	vmov.f32	s0, s15
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002e62:	2301      	movs	r3, #1
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	e055      	b.n	8002f14 <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8e:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	3301      	adds	r3, #1
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	3308      	adds	r3, #8
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb8:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 8002ebc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ec0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed0:	dd1d      	ble.n	8002f0e <ADC3_IN1_SSC+0xbe>
 8002ed2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed6:	eef0 7ae7 	vabs.f32	s15, s15
 8002eda:	ed97 7a00 	vldr	s14, [r7]
 8002ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	d40a      	bmi.n	8002efe <ADC3_IN1_SSC+0xae>
 8002ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eec:	eef0 7ae7 	vabs.f32	s15, s15
 8002ef0:	ed97 7a00 	vldr	s14, [r7]
 8002ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	d507      	bpl.n	8002f0e <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 8002efe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f0a:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3301      	adds	r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2ba9      	cmp	r3, #169	; 0xa9
 8002f18:	d9a6      	bls.n	8002e68 <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	ee07 3a90 	vmov	s15, r3
}
 8002f20:	eeb0 0a67 	vmov.f32	s0, s15
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002f40:	2301      	movs	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e055      	b.n	8002ff2 <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	ed93 7a00 	vldr	s14, [r3]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3301      	adds	r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	3308      	adds	r3, #8
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	ed93 7a00 	vldr	s14, [r3]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	3308      	adds	r3, #8
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f96:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 8002f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	dd1d      	ble.n	8002fec <ADC3_IN2_SSC+0xbe>
 8002fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fb4:	eef0 7ae7 	vabs.f32	s15, s15
 8002fb8:	ed97 7a00 	vldr	s14, [r7]
 8002fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	d40a      	bmi.n	8002fdc <ADC3_IN2_SSC+0xae>
 8002fc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fca:	eef0 7ae7 	vabs.f32	s15, s15
 8002fce:	ed97 7a00 	vldr	s14, [r7]
 8002fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	d507      	bpl.n	8002fec <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 8002fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fe8:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2ba9      	cmp	r3, #169	; 0xa9
 8002ff6:	d9a6      	bls.n	8002f46 <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	ee07 3a90 	vmov	s15, r3
}
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	0000      	movs	r0, r0
	...

08003010 <ADC1_IN1_STFT_Update>:
float32_t FFT_Mag_Res_6[ADC_DMA_SIXTEENTHBUFFERSIZE / 2];


//FUNCTION DEFINITIONS
float32_t* ADC1_IN1_STFT_Update(ADC1_IN1_STFT_par*ADC1_IN1_STFT_par_ptr, ADC1_IN1_MA*ADC1_IN1_STFT_ptr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
	ADC1_IN1_STFT_par_ptr->Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a66      	ldr	r2, [pc, #408]	; (80031b8 <ADC1_IN1_STFT_Update+0x1a8>)
 800301e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	ADC1_IN1_STFT_par_ptr->mu_1 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f)); // To ensure symmetry
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a65      	ldr	r2, [pc, #404]	; (80031bc <ADC1_IN1_STFT_Update+0x1ac>)
 8003026:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e041      	b.n	80030b4 <ADC1_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_1 = -0.5f*(pow(((n - ADC1_IN1_STFT_par_ptr->mu_1)/ADC1_IN1_STFT_par_ptr->Sigma_1), 2));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8003040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 800304a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800304e:	ee16 0a90 	vmov	r0, s13
 8003052:	f7fd faa1 	bl	8000598 <__aeabi_f2d>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80031b0 <ADC1_IN1_STFT_Update+0x1a0>
 800305e:	ec43 2b10 	vmov	d0, r2, r3
 8003062:	f00d f95d 	bl	8010320 <pow>
 8003066:	ec51 0b10 	vmov	r0, r1, d0
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	4b54      	ldr	r3, [pc, #336]	; (80031c0 <ADC1_IN1_STFT_Update+0x1b0>)
 8003070:	f7fd faea 	bl	8000648 <__aeabi_dmul>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f7fd fddc 	bl	8000c38 <__aeabi_d2f>
 8003080:	4603      	mov	r3, r0
 8003082:	60bb      	str	r3, [r7, #8]
		ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[n] = exp(exponent_1);
 8003084:	68b8      	ldr	r0, [r7, #8]
 8003086:	f7fd fa87 	bl	8000598 <__aeabi_f2d>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	ec43 2b10 	vmov	d0, r2, r3
 8003092:	f00d f8fd 	bl	8010290 <exp>
 8003096:	ec53 2b10 	vmov	r2, r3, d0
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fdcb 	bl	8000c38 <__aeabi_d2f>
 80030a2:	4601      	mov	r1, r0
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2ba9      	cmp	r3, #169	; 0xa9
 80030b8:	d9ba      	bls.n	8003030 <ADC1_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	e019      	b.n	80030f4 <ADC1_IN1_STFT_Update+0xe4>
	{
		ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1[m] = ADC1_IN1_STFT_ptr->MA_ADC1_IN1_OutBfr[m] * ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[m];
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	3308      	adds	r3, #8
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	3304      	adds	r3, #4
 80030cc:	ed93 7a00 	vldr	s14, [r3]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	33ac      	adds	r3, #172	; 0xac
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2ba9      	cmp	r3, #169	; 0xa9
 80030f8:	d9e2      	bls.n	80030c0 <ADC1_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_1 = arm_rfft_fast_init_f32 (&ADC1_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80030fa:	21aa      	movs	r1, #170	; 0xaa
 80030fc:	4831      	ldr	r0, [pc, #196]	; (80031c4 <ADC1_IN1_STFT_Update+0x1b4>)
 80030fe:	f009 f8bf 	bl	800c280 <arm_rfft_fast_init_f32>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_1 == ARM_MATH_SUCCESS)
 8003106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d14b      	bne.n	80031a6 <ADC1_IN1_STFT_Update+0x196>
	{
		arm_rfft_fast_f32 (&ADC1_IN1_FFT, ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1 , ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr, 0 );
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f503 62ab 	add.w	r2, r3, #1368	; 0x558
 800311a:	2300      	movs	r3, #0
 800311c:	4829      	ldr	r0, [pc, #164]	; (80031c4 <ADC1_IN1_STFT_Update+0x1b4>)
 800311e:	f009 f993 	bl	800c448 <arm_rfft_fast_f32>

		uint32_t mag_indx_1 = 0.0f; // Index to fill the frequency magnitude response buffer without skips
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]

		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	e039      	b.n	80031a0 <ADC1_IN1_STFT_Update+0x190>
		{
			FFT_Mag_Res_1[mag_indx_1] = sqrtf((ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p]) + (ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1])); // Calculates the magnitude response
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	ed93 7a00 	vldr	s14, [r3]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	3301      	adds	r3, #1
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	edd3 6a00 	vldr	s13, [r3]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3301      	adds	r3, #1
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317c:	eeb0 0a67 	vmov.f32	s0, s15
 8003180:	f00d f96a 	bl	8010458 <sqrtf>
 8003184:	eef0 7a40 	vmov.f32	s15, s0
 8003188:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <ADC1_IN1_STFT_Update+0x1b8>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_1++;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3302      	adds	r3, #2
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2ba9      	cmp	r3, #169	; 0xa9
 80031a4:	d9c2      	bls.n	800312c <ADC1_IN1_STFT_Update+0x11c>
		}
	}

	return FFT_Mag_Res_1;
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <ADC1_IN1_STFT_Update+0x1b8>)
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	00000000 	.word	0x00000000
 80031b4:	40000000 	.word	0x40000000
 80031b8:	41e00000 	.word	0x41e00000
 80031bc:	42a90000 	.word	0x42a90000
 80031c0:	bfe00000 	.word	0xbfe00000
 80031c4:	20009e44 	.word	0x20009e44
 80031c8:	20009ed4 	.word	0x20009ed4
 80031cc:	00000000 	.word	0x00000000

080031d0 <ADC1_IN2_STFT_Update>:

float32_t* ADC1_IN2_STFT_Update(ADC1_IN2_STFT_par*ADC1_IN2_STFT_par_ptr, ADC1_IN2_MA*ADC1_IN2_STFT_ptr)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	ADC1_IN2_STFT_par_ptr->Sigma_2 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a66      	ldr	r2, [pc, #408]	; (8003378 <ADC1_IN2_STFT_Update+0x1a8>)
 80031de:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	ADC1_IN2_STFT_par_ptr->mu_2 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a65      	ldr	r2, [pc, #404]	; (800337c <ADC1_IN2_STFT_Update+0x1ac>)
 80031e6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e041      	b.n	8003274 <ADC1_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_2 = -0.5f*(pow(((n - ADC1_IN2_STFT_par_ptr->mu_2)/ADC1_IN2_STFT_par_ptr->Sigma_2), 2));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8003200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 800320a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800320e:	ee16 0a90 	vmov	r0, s13
 8003212:	f7fd f9c1 	bl	8000598 <__aeabi_f2d>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003370 <ADC1_IN2_STFT_Update+0x1a0>
 800321e:	ec43 2b10 	vmov	d0, r2, r3
 8003222:	f00d f87d 	bl	8010320 <pow>
 8003226:	ec51 0b10 	vmov	r0, r1, d0
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	4b54      	ldr	r3, [pc, #336]	; (8003380 <ADC1_IN2_STFT_Update+0x1b0>)
 8003230:	f7fd fa0a 	bl	8000648 <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fcfc 	bl	8000c38 <__aeabi_d2f>
 8003240:	4603      	mov	r3, r0
 8003242:	60bb      	str	r3, [r7, #8]
		ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[n] = exp(exponent_2);
 8003244:	68b8      	ldr	r0, [r7, #8]
 8003246:	f7fd f9a7 	bl	8000598 <__aeabi_f2d>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	ec43 2b10 	vmov	d0, r2, r3
 8003252:	f00d f81d 	bl	8010290 <exp>
 8003256:	ec53 2b10 	vmov	r2, r3, d0
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f7fd fceb 	bl	8000c38 <__aeabi_d2f>
 8003262:	4601      	mov	r1, r0
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2ba9      	cmp	r3, #169	; 0xa9
 8003278:	d9ba      	bls.n	80031f0 <ADC1_IN2_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e019      	b.n	80032b4 <ADC1_IN2_STFT_Update+0xe4>
	{
		ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2[m] = ADC1_IN2_STFT_ptr->MA_ADC1_IN2_OutBfr[m] * ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[m];
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3308      	adds	r3, #8
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	ed93 7a00 	vldr	s14, [r3]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	33ac      	adds	r3, #172	; 0xac
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	3301      	adds	r3, #1
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2ba9      	cmp	r3, #169	; 0xa9
 80032b8:	d9e2      	bls.n	8003280 <ADC1_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_2 = arm_rfft_fast_init_f32 (&ADC1_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80032ba:	21aa      	movs	r1, #170	; 0xaa
 80032bc:	4831      	ldr	r0, [pc, #196]	; (8003384 <ADC1_IN2_STFT_Update+0x1b4>)
 80032be:	f008 ffdf 	bl	800c280 <arm_rfft_fast_init_f32>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_2 == ARM_MATH_SUCCESS)
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d149      	bne.n	8003362 <ADC1_IN2_STFT_Update+0x192>
	{
		arm_rfft_fast_f32 (&ADC1_IN2_FFT, ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2 , ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr, 0 );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f503 62ab 	add.w	r2, r3, #1368	; 0x558
 80032da:	2300      	movs	r3, #0
 80032dc:	4829      	ldr	r0, [pc, #164]	; (8003384 <ADC1_IN2_STFT_Update+0x1b4>)
 80032de:	f009 f8b3 	bl	800c448 <arm_rfft_fast_f32>

		uint32_t mag_indx_2 = 0.0f;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80032e6:	e039      	b.n	800335c <ADC1_IN2_STFT_Update+0x18c>
		{
			FFT_Mag_Res_2[mag_indx_2] = sqrtf((ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p]) + (ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1]));
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	ed93 7a00 	vldr	s14, [r3]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	3301      	adds	r3, #1
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	edd3 6a00 	vldr	s13, [r3]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	3301      	adds	r3, #1
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	edd3 7a00 	vldr	s15, [r3]
 8003330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003338:	eeb0 0a67 	vmov.f32	s0, s15
 800333c:	f00d f88c 	bl	8010458 <sqrtf>
 8003340:	eef0 7a40 	vmov.f32	s15, s0
 8003344:	4a10      	ldr	r2, [pc, #64]	; (8003388 <ADC1_IN2_STFT_Update+0x1b8>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_2++;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3301      	adds	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3302      	adds	r3, #2
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2ba9      	cmp	r3, #169	; 0xa9
 8003360:	d9c2      	bls.n	80032e8 <ADC1_IN2_STFT_Update+0x118>
		}
	}

	return FFT_Mag_Res_2;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <ADC1_IN2_STFT_Update+0x1b8>)
}
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	f3af 8000 	nop.w
 8003370:	00000000 	.word	0x00000000
 8003374:	40000000 	.word	0x40000000
 8003378:	41e00000 	.word	0x41e00000
 800337c:	42a90000 	.word	0x42a90000
 8003380:	bfe00000 	.word	0xbfe00000
 8003384:	20009e5c 	.word	0x20009e5c
 8003388:	2000a028 	.word	0x2000a028
 800338c:	00000000 	.word	0x00000000

08003390 <ADC2_IN3_STFT_Update>:

float32_t* ADC2_IN3_STFT_Update(ADC2_IN3_STFT_par*ADC2_IN3_STFT_par_ptr, ADC2_IN3_MA*ADC2_IN3_STFT_ptr)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
	ADC2_IN3_STFT_par_ptr->Sigma_3 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a66      	ldr	r2, [pc, #408]	; (8003538 <ADC2_IN3_STFT_Update+0x1a8>)
 800339e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	ADC2_IN3_STFT_par_ptr->mu_3 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a65      	ldr	r2, [pc, #404]	; (800353c <ADC2_IN3_STFT_Update+0x1ac>)
 80033a6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e041      	b.n	8003434 <ADC2_IN3_STFT_Update+0xa4>
	{
		float32_t exponent_3 = -0.5f*(pow(((n - ADC2_IN3_STFT_par_ptr->mu_3)/ADC2_IN3_STFT_par_ptr->Sigma_3), 2));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 80033c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 80033ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033ce:	ee16 0a90 	vmov	r0, s13
 80033d2:	f7fd f8e1 	bl	8000598 <__aeabi_f2d>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003530 <ADC2_IN3_STFT_Update+0x1a0>
 80033de:	ec43 2b10 	vmov	d0, r2, r3
 80033e2:	f00c ff9d 	bl	8010320 <pow>
 80033e6:	ec51 0b10 	vmov	r0, r1, d0
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	4b54      	ldr	r3, [pc, #336]	; (8003540 <ADC2_IN3_STFT_Update+0x1b0>)
 80033f0:	f7fd f92a 	bl	8000648 <__aeabi_dmul>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7fd fc1c 	bl	8000c38 <__aeabi_d2f>
 8003400:	4603      	mov	r3, r0
 8003402:	60bb      	str	r3, [r7, #8]
		ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[n] = exp(exponent_3);
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f7fd f8c7 	bl	8000598 <__aeabi_f2d>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	ec43 2b10 	vmov	d0, r2, r3
 8003412:	f00c ff3d 	bl	8010290 <exp>
 8003416:	ec53 2b10 	vmov	r2, r3, d0
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	f7fd fc0b 	bl	8000c38 <__aeabi_d2f>
 8003422:	4601      	mov	r1, r0
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3301      	adds	r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2ba9      	cmp	r3, #169	; 0xa9
 8003438:	d9ba      	bls.n	80033b0 <ADC2_IN3_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e019      	b.n	8003474 <ADC2_IN3_STFT_Update+0xe4>
	{
		ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3[m] = ADC2_IN3_STFT_ptr->MA_ADC2_IN3_OutBfr[m] * ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[m];
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3308      	adds	r3, #8
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	ed93 7a00 	vldr	s14, [r3]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	33ac      	adds	r3, #172	; 0xac
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3301      	adds	r3, #1
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2ba9      	cmp	r3, #169	; 0xa9
 8003478:	d9e2      	bls.n	8003440 <ADC2_IN3_STFT_Update+0xb0>
	}

	arm_status FFT_status_3 = arm_rfft_fast_init_f32 (&ADC2_IN3_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 800347a:	21aa      	movs	r1, #170	; 0xaa
 800347c:	4831      	ldr	r0, [pc, #196]	; (8003544 <ADC2_IN3_STFT_Update+0x1b4>)
 800347e:	f008 feff 	bl	800c280 <arm_rfft_fast_init_f32>
 8003482:	4603      	mov	r3, r0
 8003484:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_3 == ARM_MATH_SUCCESS)
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d149      	bne.n	8003522 <ADC2_IN3_STFT_Update+0x192>
	{
		arm_rfft_fast_f32 (&ADC2_IN3_FFT, ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3 , ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr, 0 );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f503 62ab 	add.w	r2, r3, #1368	; 0x558
 800349a:	2300      	movs	r3, #0
 800349c:	4829      	ldr	r0, [pc, #164]	; (8003544 <ADC2_IN3_STFT_Update+0x1b4>)
 800349e:	f008 ffd3 	bl	800c448 <arm_rfft_fast_f32>

		uint32_t mag_indx_3 = 0.0f;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80034a6:	e039      	b.n	800351c <ADC2_IN3_STFT_Update+0x18c>
		{
			FFT_Mag_Res_3[mag_indx_3] = sqrtf((ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p]) + (ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1]));
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	ed93 7a00 	vldr	s14, [r3]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3301      	adds	r3, #1
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	edd3 6a00 	vldr	s13, [r3]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3301      	adds	r3, #1
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	eeb0 0a67 	vmov.f32	s0, s15
 80034fc:	f00c ffac 	bl	8010458 <sqrtf>
 8003500:	eef0 7a40 	vmov.f32	s15, s0
 8003504:	4a10      	ldr	r2, [pc, #64]	; (8003548 <ADC2_IN3_STFT_Update+0x1b8>)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_3++;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3301      	adds	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3302      	adds	r3, #2
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2ba9      	cmp	r3, #169	; 0xa9
 8003520:	d9c2      	bls.n	80034a8 <ADC2_IN3_STFT_Update+0x118>
		}
	}

	return FFT_Mag_Res_3;
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <ADC2_IN3_STFT_Update+0x1b8>)
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	f3af 8000 	nop.w
 8003530:	00000000 	.word	0x00000000
 8003534:	40000000 	.word	0x40000000
 8003538:	41e00000 	.word	0x41e00000
 800353c:	42a90000 	.word	0x42a90000
 8003540:	bfe00000 	.word	0xbfe00000
 8003544:	20009e74 	.word	0x20009e74
 8003548:	2000a17c 	.word	0x2000a17c
 800354c:	00000000 	.word	0x00000000

08003550 <ADC2_IN4_STFT_Update>:

float32_t* ADC2_IN4_STFT_Update(ADC2_IN4_STFT_par*ADC2_IN4_STFT_par_ptr, ADC2_IN4_MA*ADC2_IN4_STFT_ptr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	ADC2_IN4_STFT_par_ptr->Sigma_4 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a66      	ldr	r2, [pc, #408]	; (80036f8 <ADC2_IN4_STFT_Update+0x1a8>)
 800355e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	ADC2_IN4_STFT_par_ptr->mu_4 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a65      	ldr	r2, [pc, #404]	; (80036fc <ADC2_IN4_STFT_Update+0x1ac>)
 8003566:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	e041      	b.n	80035f4 <ADC2_IN4_STFT_Update+0xa4>
	{
		float32_t exponent_4 = -0.5f*(pow(((n - ADC2_IN4_STFT_par_ptr->mu_4)/ADC2_IN4_STFT_par_ptr->Sigma_4), 2));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8003580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 800358a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800358e:	ee16 0a90 	vmov	r0, s13
 8003592:	f7fd f801 	bl	8000598 <__aeabi_f2d>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80036f0 <ADC2_IN4_STFT_Update+0x1a0>
 800359e:	ec43 2b10 	vmov	d0, r2, r3
 80035a2:	f00c febd 	bl	8010320 <pow>
 80035a6:	ec51 0b10 	vmov	r0, r1, d0
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	4b54      	ldr	r3, [pc, #336]	; (8003700 <ADC2_IN4_STFT_Update+0x1b0>)
 80035b0:	f7fd f84a 	bl	8000648 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7fd fb3c 	bl	8000c38 <__aeabi_d2f>
 80035c0:	4603      	mov	r3, r0
 80035c2:	60bb      	str	r3, [r7, #8]
		ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[n] = exp(exponent_4);
 80035c4:	68b8      	ldr	r0, [r7, #8]
 80035c6:	f7fc ffe7 	bl	8000598 <__aeabi_f2d>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	ec43 2b10 	vmov	d0, r2, r3
 80035d2:	f00c fe5d 	bl	8010290 <exp>
 80035d6:	ec53 2b10 	vmov	r2, r3, d0
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f7fd fb2b 	bl	8000c38 <__aeabi_d2f>
 80035e2:	4601      	mov	r1, r0
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2ba9      	cmp	r3, #169	; 0xa9
 80035f8:	d9ba      	bls.n	8003570 <ADC2_IN4_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e019      	b.n	8003634 <ADC2_IN4_STFT_Update+0xe4>
	{
		ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4[m] = ADC2_IN4_STFT_ptr->MA_ADC2_IN4_OutBfr[m] * ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[m];
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	3308      	adds	r3, #8
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	ed93 7a00 	vldr	s14, [r3]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	33ac      	adds	r3, #172	; 0xac
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3301      	adds	r3, #1
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2ba9      	cmp	r3, #169	; 0xa9
 8003638:	d9e2      	bls.n	8003600 <ADC2_IN4_STFT_Update+0xb0>
	}

	arm_status FFT_status_4 = arm_rfft_fast_init_f32 (&ADC2_IN4_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 800363a:	21aa      	movs	r1, #170	; 0xaa
 800363c:	4831      	ldr	r0, [pc, #196]	; (8003704 <ADC2_IN4_STFT_Update+0x1b4>)
 800363e:	f008 fe1f 	bl	800c280 <arm_rfft_fast_init_f32>
 8003642:	4603      	mov	r3, r0
 8003644:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_4 == ARM_MATH_SUCCESS)
 8003646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d149      	bne.n	80036e2 <ADC2_IN4_STFT_Update+0x192>
	{
		arm_rfft_fast_f32 (&ADC2_IN4_FFT, ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4 , ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr, 0 );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f503 62ab 	add.w	r2, r3, #1368	; 0x558
 800365a:	2300      	movs	r3, #0
 800365c:	4829      	ldr	r0, [pc, #164]	; (8003704 <ADC2_IN4_STFT_Update+0x1b4>)
 800365e:	f008 fef3 	bl	800c448 <arm_rfft_fast_f32>

		uint32_t mag_indx_4 = 0.0f;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003666:	e039      	b.n	80036dc <ADC2_IN4_STFT_Update+0x18c>
		{
			FFT_Mag_Res_3[mag_indx_4] = sqrtf((ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p]) + (ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1]));
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	ed93 7a00 	vldr	s14, [r3]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3301      	adds	r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	edd3 6a00 	vldr	s13, [r3]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	3301      	adds	r3, #1
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	edd3 7a00 	vldr	s15, [r3]
 80036b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	eeb0 0a67 	vmov.f32	s0, s15
 80036bc:	f00c fecc 	bl	8010458 <sqrtf>
 80036c0:	eef0 7a40 	vmov.f32	s15, s0
 80036c4:	4a10      	ldr	r2, [pc, #64]	; (8003708 <ADC2_IN4_STFT_Update+0x1b8>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_4++;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3301      	adds	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3302      	adds	r3, #2
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2ba9      	cmp	r3, #169	; 0xa9
 80036e0:	d9c2      	bls.n	8003668 <ADC2_IN4_STFT_Update+0x118>
		}
	}

	return FFT_Mag_Res_4;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <ADC2_IN4_STFT_Update+0x1bc>)
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	f3af 8000 	nop.w
 80036f0:	00000000 	.word	0x00000000
 80036f4:	40000000 	.word	0x40000000
 80036f8:	41e00000 	.word	0x41e00000
 80036fc:	42a90000 	.word	0x42a90000
 8003700:	bfe00000 	.word	0xbfe00000
 8003704:	20009e8c 	.word	0x20009e8c
 8003708:	2000a17c 	.word	0x2000a17c
 800370c:	2000a2d0 	.word	0x2000a2d0

08003710 <ADC3_IN1_STFT_Update>:

float32_t* ADC3_IN1_STFT_Update(ADC3_IN1_STFT_par*ADC3_IN1_STFT_par_ptr, ADC3_IN1_MA*ADC3_IN1_STFT_ptr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
	ADC3_IN1_STFT_par_ptr->Sigma_5 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a66      	ldr	r2, [pc, #408]	; (80038b8 <ADC3_IN1_STFT_Update+0x1a8>)
 800371e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	ADC3_IN1_STFT_par_ptr->mu_5 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a65      	ldr	r2, [pc, #404]	; (80038bc <ADC3_IN1_STFT_Update+0x1ac>)
 8003726:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e041      	b.n	80037b4 <ADC3_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_5 = -0.5f*(pow(((n - ADC3_IN1_STFT_par_ptr->mu_5)/ADC3_IN1_STFT_par_ptr->Sigma_5), 2));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8003740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 800374a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800374e:	ee16 0a90 	vmov	r0, s13
 8003752:	f7fc ff21 	bl	8000598 <__aeabi_f2d>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80038b0 <ADC3_IN1_STFT_Update+0x1a0>
 800375e:	ec43 2b10 	vmov	d0, r2, r3
 8003762:	f00c fddd 	bl	8010320 <pow>
 8003766:	ec51 0b10 	vmov	r0, r1, d0
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <ADC3_IN1_STFT_Update+0x1b0>)
 8003770:	f7fc ff6a 	bl	8000648 <__aeabi_dmul>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	f7fd fa5c 	bl	8000c38 <__aeabi_d2f>
 8003780:	4603      	mov	r3, r0
 8003782:	60bb      	str	r3, [r7, #8]
		ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[n] = exp(exponent_5);
 8003784:	68b8      	ldr	r0, [r7, #8]
 8003786:	f7fc ff07 	bl	8000598 <__aeabi_f2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	ec43 2b10 	vmov	d0, r2, r3
 8003792:	f00c fd7d 	bl	8010290 <exp>
 8003796:	ec53 2b10 	vmov	r2, r3, d0
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	f7fd fa4b 	bl	8000c38 <__aeabi_d2f>
 80037a2:	4601      	mov	r1, r0
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2ba9      	cmp	r3, #169	; 0xa9
 80037b8:	d9ba      	bls.n	8003730 <ADC3_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e019      	b.n	80037f4 <ADC3_IN1_STFT_Update+0xe4>
	{
		ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5[m] = ADC3_IN1_STFT_ptr->MA_ADC3_IN1_OutBfr[m] * ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[m];
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3308      	adds	r3, #8
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	3304      	adds	r3, #4
 80037cc:	ed93 7a00 	vldr	s14, [r3]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	33ac      	adds	r3, #172	; 0xac
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2ba9      	cmp	r3, #169	; 0xa9
 80037f8:	d9e2      	bls.n	80037c0 <ADC3_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_5 = arm_rfft_fast_init_f32 (&ADC3_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80037fa:	21aa      	movs	r1, #170	; 0xaa
 80037fc:	4831      	ldr	r0, [pc, #196]	; (80038c4 <ADC3_IN1_STFT_Update+0x1b4>)
 80037fe:	f008 fd3f 	bl	800c280 <arm_rfft_fast_init_f32>
 8003802:	4603      	mov	r3, r0
 8003804:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_5 == ARM_MATH_SUCCESS)
 8003806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d149      	bne.n	80038a2 <ADC3_IN1_STFT_Update+0x192>
	{
		arm_rfft_fast_f32 (&ADC3_IN1_FFT, ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5 , ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr, 0 );
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 62ab 	add.w	r2, r3, #1368	; 0x558
 800381a:	2300      	movs	r3, #0
 800381c:	4829      	ldr	r0, [pc, #164]	; (80038c4 <ADC3_IN1_STFT_Update+0x1b4>)
 800381e:	f008 fe13 	bl	800c448 <arm_rfft_fast_f32>

		uint32_t mag_indx_5 = 0.0f;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003826:	e039      	b.n	800389c <ADC3_IN1_STFT_Update+0x18c>
		{
			FFT_Mag_Res_3[mag_indx_5] = sqrtf((ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p]) + (ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1]));
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	ed93 7a00 	vldr	s14, [r3]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3301      	adds	r3, #1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	edd3 6a00 	vldr	s13, [r3]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3301      	adds	r3, #1
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003878:	eeb0 0a67 	vmov.f32	s0, s15
 800387c:	f00c fdec 	bl	8010458 <sqrtf>
 8003880:	eef0 7a40 	vmov.f32	s15, s0
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <ADC3_IN1_STFT_Update+0x1b8>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_5++;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3301      	adds	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3302      	adds	r3, #2
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2ba9      	cmp	r3, #169	; 0xa9
 80038a0:	d9c2      	bls.n	8003828 <ADC3_IN1_STFT_Update+0x118>
		}
	}

	return FFT_Mag_Res_5;
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <ADC3_IN1_STFT_Update+0x1bc>)
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	f3af 8000 	nop.w
 80038b0:	00000000 	.word	0x00000000
 80038b4:	40000000 	.word	0x40000000
 80038b8:	41e00000 	.word	0x41e00000
 80038bc:	42a90000 	.word	0x42a90000
 80038c0:	bfe00000 	.word	0xbfe00000
 80038c4:	20009ea4 	.word	0x20009ea4
 80038c8:	2000a17c 	.word	0x2000a17c
 80038cc:	2000a424 	.word	0x2000a424

080038d0 <ADC3_IN2_STFT_Update>:

float32_t* ADC3_IN2_STFT_Update(ADC3_IN2_STFT_par*ADC3_IN2_STFT_par_ptr, ADC3_IN2_MA*ADC3_IN2_STFT_ptr)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
	ADC3_IN2_STFT_par_ptr->Sigma_6 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a66      	ldr	r2, [pc, #408]	; (8003a78 <ADC3_IN2_STFT_Update+0x1a8>)
 80038de:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	ADC3_IN2_STFT_par_ptr->mu_6 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a65      	ldr	r2, [pc, #404]	; (8003a7c <ADC3_IN2_STFT_Update+0x1ac>)
 80038e6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e041      	b.n	8003974 <ADC3_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_6 = -0.5f*(pow(((n - ADC3_IN2_STFT_par_ptr->mu_6)/ADC3_IN2_STFT_par_ptr->Sigma_6), 2));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8003900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 800390a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800390e:	ee16 0a90 	vmov	r0, s13
 8003912:	f7fc fe41 	bl	8000598 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003a70 <ADC3_IN2_STFT_Update+0x1a0>
 800391e:	ec43 2b10 	vmov	d0, r2, r3
 8003922:	f00c fcfd 	bl	8010320 <pow>
 8003926:	ec51 0b10 	vmov	r0, r1, d0
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	4b54      	ldr	r3, [pc, #336]	; (8003a80 <ADC3_IN2_STFT_Update+0x1b0>)
 8003930:	f7fc fe8a 	bl	8000648 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	f7fd f97c 	bl	8000c38 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	60bb      	str	r3, [r7, #8]
		ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[n] = exp(exponent_6);
 8003944:	68b8      	ldr	r0, [r7, #8]
 8003946:	f7fc fe27 	bl	8000598 <__aeabi_f2d>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	ec43 2b10 	vmov	d0, r2, r3
 8003952:	f00c fc9d 	bl	8010290 <exp>
 8003956:	ec53 2b10 	vmov	r2, r3, d0
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f7fd f96b 	bl	8000c38 <__aeabi_d2f>
 8003962:	4601      	mov	r1, r0
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3301      	adds	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2ba9      	cmp	r3, #169	; 0xa9
 8003978:	d9ba      	bls.n	80038f0 <ADC3_IN2_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e019      	b.n	80039b4 <ADC3_IN2_STFT_Update+0xe4>
	{
		ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6[m] = ADC3_IN2_STFT_ptr->MA_ADC3_IN2_OutBfr[m] * ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[m];
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	3308      	adds	r3, #8
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	ed93 7a00 	vldr	s14, [r3]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	33ac      	adds	r3, #172	; 0xac
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2ba9      	cmp	r3, #169	; 0xa9
 80039b8:	d9e2      	bls.n	8003980 <ADC3_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_6 = arm_rfft_fast_init_f32 (&ADC3_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80039ba:	21aa      	movs	r1, #170	; 0xaa
 80039bc:	4831      	ldr	r0, [pc, #196]	; (8003a84 <ADC3_IN2_STFT_Update+0x1b4>)
 80039be:	f008 fc5f 	bl	800c280 <arm_rfft_fast_init_f32>
 80039c2:	4603      	mov	r3, r0
 80039c4:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_6 == ARM_MATH_SUCCESS)
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d149      	bne.n	8003a62 <ADC3_IN2_STFT_Update+0x192>
	{
		arm_rfft_fast_f32 (&ADC3_IN2_FFT, ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6 , ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr, 0 );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 62ab 	add.w	r2, r3, #1368	; 0x558
 80039da:	2300      	movs	r3, #0
 80039dc:	4829      	ldr	r0, [pc, #164]	; (8003a84 <ADC3_IN2_STFT_Update+0x1b4>)
 80039de:	f008 fd33 	bl	800c448 <arm_rfft_fast_f32>

		uint32_t mag_indx_6 = 0.0f;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80039e6:	e039      	b.n	8003a5c <ADC3_IN2_STFT_Update+0x18c>
		{
			FFT_Mag_Res_3[mag_indx_6] = sqrtf((ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p]) + (ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1]));
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	ed93 7a00 	vldr	s14, [r3]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	edd3 6a00 	vldr	s13, [r3]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3301      	adds	r3, #1
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	f00c fd0c 	bl	8010458 <sqrtf>
 8003a40:	eef0 7a40 	vmov.f32	s15, s0
 8003a44:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <ADC3_IN2_STFT_Update+0x1b8>)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_6++;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3301      	adds	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3302      	adds	r3, #2
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2ba9      	cmp	r3, #169	; 0xa9
 8003a60:	d9c2      	bls.n	80039e8 <ADC3_IN2_STFT_Update+0x118>
		}
	}

	return FFT_Mag_Res_6;
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <ADC3_IN2_STFT_Update+0x1bc>)
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	f3af 8000 	nop.w
 8003a70:	00000000 	.word	0x00000000
 8003a74:	40000000 	.word	0x40000000
 8003a78:	41e00000 	.word	0x41e00000
 8003a7c:	42a90000 	.word	0x42a90000
 8003a80:	bfe00000 	.word	0xbfe00000
 8003a84:	20009ebc 	.word	0x20009ebc
 8003a88:	2000a17c 	.word	0x2000a17c
 8003a8c:	2000a578 	.word	0x2000a578

08003a90 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08c      	sub	sp, #48	; 0x30
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa0:	e030      	b.n	8003b04 <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	ed93 7a00 	vldr	s14, [r3]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	3308      	adds	r3, #8
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	edd3 6a00 	vldr	s13, [r3]
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ada:	3301      	adds	r3, #1
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af2:	4a47      	ldr	r2, [pc, #284]	; (8003c10 <ADC1_IN1_TKEO+0x180>)
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	3301      	adds	r3, #1
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	2ba8      	cmp	r3, #168	; 0xa8
 8003b08:	d9cb      	bls.n	8003aa2 <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 8003b0a:	4b41      	ldr	r3, [pc, #260]	; (8003c10 <ADC1_IN1_TKEO+0x180>)
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003b12:	4b3f      	ldr	r3, [pc, #252]	; (8003c10 <ADC1_IN1_TKEO+0x180>)
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	e00e      	b.n	8003b5c <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 8003b3e:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <ADC1_IN1_TKEO+0x180>)
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2ba9      	cmp	r3, #169	; 0xa9
 8003b60:	d9ed      	bls.n	8003b3e <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003b62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b66:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003c14 <ADC1_IN1_TKEO+0x184>
 8003b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b6e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e018      	b.n	8003baa <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 8003b78:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <ADC1_IN1_TKEO+0x180>)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 8003b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003b98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2ba9      	cmp	r3, #169	; 0xa9
 8003bae:	d9e3      	bls.n	8003b78 <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003bb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bb4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003c14 <ADC1_IN1_TKEO+0x184>
 8003bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bbc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8003bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bc2:	f7fc fce9 	bl	8000598 <__aeabi_f2d>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	ec43 2b10 	vmov	d0, r2, r3
 8003bce:	f00c fc17 	bl	8010400 <sqrt>
 8003bd2:	ec53 2b10 	vmov	r2, r3, d0
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f7fd f82d 	bl	8000c38 <__aeabi_d2f>
 8003bde:	4603      	mov	r3, r0
 8003be0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 8003be2:	edd7 7a00 	vldr	s15, [r7]
 8003be6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bee:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	dd03      	ble.n	8003c04 <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	e000      	b.n	8003c06 <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003c04:	2300      	movs	r3, #0
  }


}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3730      	adds	r7, #48	; 0x30
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	2000a6cc 	.word	0x2000a6cc
 8003c14:	432a0000 	.word	0x432a0000

08003c18 <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	; 0x30
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003c24:	2301      	movs	r3, #1
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	e030      	b.n	8003c8c <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	3308      	adds	r3, #8
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3304      	adds	r3, #4
 8003c36:	ed93 7a00 	vldr	s14, [r3]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	3308      	adds	r3, #8
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	3b01      	subs	r3, #1
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	3308      	adds	r3, #8
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	edd3 6a00 	vldr	s13, [r3]
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	3301      	adds	r3, #1
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	3308      	adds	r3, #8
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7a:	4a47      	ldr	r2, [pc, #284]	; (8003d98 <ADC1_IN2_TKEO+0x180>)
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	3301      	adds	r3, #1
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2ba8      	cmp	r3, #168	; 0xa8
 8003c90:	d9cb      	bls.n	8003c2a <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 8003c92:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <ADC1_IN2_TKEO+0x180>)
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <ADC1_IN2_TKEO+0x180>)
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4


  float32_t Tkeo_Sum_2 = 0.0f;
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	e00e      	b.n	8003ce4 <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 8003cc6:	4a34      	ldr	r2, [pc, #208]	; (8003d98 <ADC1_IN2_TKEO+0x180>)
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cda:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	2ba9      	cmp	r3, #169	; 0xa9
 8003ce8:	d9ed      	bls.n	8003cc6 <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003cea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003cee:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003d9c <ADC1_IN2_TKEO+0x184>
 8003cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cf6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e018      	b.n	8003d32 <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 8003d00:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <ADC1_IN2_TKEO+0x180>)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	ed93 7a00 	vldr	s14, [r3]
 8003d0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d14:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 8003d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2ba9      	cmp	r3, #169	; 0xa9
 8003d36:	d9e3      	bls.n	8003d00 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003d38:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d3c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003d9c <ADC1_IN2_TKEO+0x184>
 8003d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 8003d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d4a:	f7fc fc25 	bl	8000598 <__aeabi_f2d>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	ec43 2b10 	vmov	d0, r2, r3
 8003d56:	f00c fb53 	bl	8010400 <sqrt>
 8003d5a:	ec53 2b10 	vmov	r2, r3, d0
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7fc ff69 	bl	8000c38 <__aeabi_d2f>
 8003d66:	4603      	mov	r3, r0
 8003d68:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 8003d6a:	edd7 7a00 	vldr	s15, [r7]
 8003d6e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d76:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d82:	dd03      	ble.n	8003d8c <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	e000      	b.n	8003d8e <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003d8c:	2300      	movs	r3, #0
  }


}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3730      	adds	r7, #48	; 0x30
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	2000a974 	.word	0x2000a974
 8003d9c:	432a0000 	.word	0x432a0000

08003da0 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003dac:	2301      	movs	r3, #1
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db0:	e030      	b.n	8003e14 <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	3308      	adds	r3, #8
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	ed93 7a00 	vldr	s14, [r3]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	edd3 6a00 	vldr	s13, [r3]
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	3301      	adds	r3, #1
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	3308      	adds	r3, #8
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e02:	4a47      	ldr	r2, [pc, #284]	; (8003f20 <ADC2_IN3_TKEO+0x180>)
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	3301      	adds	r3, #1
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	2ba8      	cmp	r3, #168	; 0xa8
 8003e18:	d9cb      	bls.n	8003db2 <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 8003e1a:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <ADC2_IN3_TKEO+0x180>)
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003e22:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <ADC2_IN3_TKEO+0x180>)
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4


  float32_t Tkeo_Sum_3 = 0.0f;
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	e00e      	b.n	8003e6c <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 8003e4e:	4a34      	ldr	r2, [pc, #208]	; (8003f20 <ADC2_IN3_TKEO+0x180>)
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	edd3 7a00 	vldr	s15, [r3]
 8003e5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2ba9      	cmp	r3, #169	; 0xa9
 8003e70:	d9ed      	bls.n	8003e4e <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003e72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003e76:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003f24 <ADC2_IN3_TKEO+0x184>
 8003e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e7e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	e018      	b.n	8003eba <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 8003e88:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <ADC2_IN3_TKEO+0x180>)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	ed93 7a00 	vldr	s14, [r3]
 8003e94:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8003ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ea4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ea8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2ba9      	cmp	r3, #169	; 0xa9
 8003ebe:	d9e3      	bls.n	8003e88 <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003ec0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003ec4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003f24 <ADC2_IN3_TKEO+0x184>
 8003ec8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ecc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8003ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed2:	f7fc fb61 	bl	8000598 <__aeabi_f2d>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	ec43 2b10 	vmov	d0, r2, r3
 8003ede:	f00c fa8f 	bl	8010400 <sqrt>
 8003ee2:	ec53 2b10 	vmov	r2, r3, d0
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f7fc fea5 	bl	8000c38 <__aeabi_d2f>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8003ef2:	edd7 7a00 	vldr	s15, [r7]
 8003ef6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0a:	dd03      	ble.n	8003f14 <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	e000      	b.n	8003f16 <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003f14:	2300      	movs	r3, #0
  }


}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3730      	adds	r7, #48	; 0x30
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2000ac1c 	.word	0x2000ac1c
 8003f24:	432a0000 	.word	0x432a0000

08003f28 <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003f34:	2301      	movs	r3, #1
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f38:	e030      	b.n	8003f9c <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	3308      	adds	r3, #8
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	ed93 7a00 	vldr	s14, [r3]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	3308      	adds	r3, #8
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	edd3 7a00 	vldr	s15, [r3]
 8003f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	3b01      	subs	r3, #1
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	3308      	adds	r3, #8
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	edd3 6a00 	vldr	s13, [r3]
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	3301      	adds	r3, #1
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	3308      	adds	r3, #8
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	edd3 7a00 	vldr	s15, [r3]
 8003f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8a:	4a47      	ldr	r2, [pc, #284]	; (80040a8 <ADC2_IN4_TKEO+0x180>)
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	3301      	adds	r3, #1
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	2ba8      	cmp	r3, #168	; 0xa8
 8003fa0:	d9cb      	bls.n	8003f3a <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <ADC2_IN4_TKEO+0x180>)
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <ADC2_IN4_TKEO+0x180>)
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4


  float32_t Tkeo_Sum_4 = 0.0f;
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	e00e      	b.n	8003ff4 <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 8003fd6:	4a34      	ldr	r2, [pc, #208]	; (80040a8 <ADC2_IN4_TKEO+0x180>)
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	edd3 7a00 	vldr	s15, [r3]
 8003fe2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2ba9      	cmp	r3, #169	; 0xa9
 8003ff8:	d9ed      	bls.n	8003fd6 <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003ffa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ffe:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80040ac <ADC2_IN4_TKEO+0x184>
 8004002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004006:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e018      	b.n	8004042 <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 8004010:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <ADC2_IN4_TKEO+0x180>)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	ed93 7a00 	vldr	s14, [r3]
 800401c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004024:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 8004028:	edd7 7a03 	vldr	s15, [r7, #12]
 800402c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004030:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004038:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2ba9      	cmp	r3, #169	; 0xa9
 8004046:	d9e3      	bls.n	8004010 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8004048:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800404c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80040ac <ADC2_IN4_TKEO+0x184>
 8004050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004054:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 8004058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800405a:	f7fc fa9d 	bl	8000598 <__aeabi_f2d>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	ec43 2b10 	vmov	d0, r2, r3
 8004066:	f00c f9cb 	bl	8010400 <sqrt>
 800406a:	ec53 2b10 	vmov	r2, r3, d0
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	f7fc fde1 	bl	8000c38 <__aeabi_d2f>
 8004076:	4603      	mov	r3, r0
 8004078:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 800407a:	edd7 7a00 	vldr	s15, [r7]
 800407e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004086:	ed97 7a05 	vldr	s14, [r7, #20]
 800408a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	dd03      	ble.n	800409c <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 8004094:	2301      	movs	r3, #1
 8004096:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	e000      	b.n	800409e <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 800409c:	2300      	movs	r3, #0
  }


}
 800409e:	4618      	mov	r0, r3
 80040a0:	3730      	adds	r7, #48	; 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2000aec4 	.word	0x2000aec4
 80040ac:	432a0000 	.word	0x432a0000

080040b0 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	; 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80040bc:	2301      	movs	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c0:	e030      	b.n	8004124 <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	3308      	adds	r3, #8
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	ed93 7a00 	vldr	s14, [r3]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	3308      	adds	r3, #8
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	3304      	adds	r3, #4
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	3b01      	subs	r3, #1
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	3308      	adds	r3, #8
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	3304      	adds	r3, #4
 80040f4:	edd3 6a00 	vldr	s13, [r3]
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	3301      	adds	r3, #1
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	3308      	adds	r3, #8
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	edd3 7a00 	vldr	s15, [r3]
 800410a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800410e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004112:	4a47      	ldr	r2, [pc, #284]	; (8004230 <ADC3_IN1_TKEO+0x180>)
 8004114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	3301      	adds	r3, #1
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	2ba8      	cmp	r3, #168	; 0xa8
 8004128:	d9cb      	bls.n	80040c2 <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 800412a:	4b41      	ldr	r3, [pc, #260]	; (8004230 <ADC3_IN1_TKEO+0x180>)
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <ADC3_IN1_TKEO+0x180>)
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8004158:	2300      	movs	r3, #0
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	e00e      	b.n	800417c <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 800415e:	4a34      	ldr	r2, [pc, #208]	; (8004230 <ADC3_IN1_TKEO+0x180>)
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	edd3 7a00 	vldr	s15, [r3]
 800416a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800416e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004172:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	3301      	adds	r3, #1
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	2ba9      	cmp	r3, #169	; 0xa9
 8004180:	d9ed      	bls.n	800415e <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8004182:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004186:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004234 <ADC3_IN1_TKEO+0x184>
 800418a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800418e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e018      	b.n	80041ca <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 8004198:	4a25      	ldr	r2, [pc, #148]	; (8004230 <ADC3_IN1_TKEO+0x180>)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	ed93 7a00 	vldr	s14, [r3]
 80041a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80041a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ac:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 80041b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80041b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80041b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80041bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	3301      	adds	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	2ba9      	cmp	r3, #169	; 0xa9
 80041ce:	d9e3      	bls.n	8004198 <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80041d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80041d4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004234 <ADC3_IN1_TKEO+0x184>
 80041d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 80041e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e2:	f7fc f9d9 	bl	8000598 <__aeabi_f2d>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	ec43 2b10 	vmov	d0, r2, r3
 80041ee:	f00c f907 	bl	8010400 <sqrt>
 80041f2:	ec53 2b10 	vmov	r2, r3, d0
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	f7fc fd1d 	bl	8000c38 <__aeabi_d2f>
 80041fe:	4603      	mov	r3, r0
 8004200:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8004202:	edd7 7a00 	vldr	s15, [r7]
 8004206:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800420a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421a:	dd03      	ble.n	8004224 <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 800421c:	2301      	movs	r3, #1
 800421e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	e000      	b.n	8004226 <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8004224:	2300      	movs	r3, #0
  }


}
 8004226:	4618      	mov	r0, r3
 8004228:	3730      	adds	r7, #48	; 0x30
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	2000b16c 	.word	0x2000b16c
 8004234:	432a0000 	.word	0x432a0000

08004238 <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	; 0x30
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8004244:	2301      	movs	r3, #1
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004248:	e030      	b.n	80042ac <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	3308      	adds	r3, #8
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	3304      	adds	r3, #4
 8004256:	ed93 7a00 	vldr	s14, [r3]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	3308      	adds	r3, #8
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	3304      	adds	r3, #4
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	3b01      	subs	r3, #1
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	3308      	adds	r3, #8
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	edd3 6a00 	vldr	s13, [r3]
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	3301      	adds	r3, #1
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	3308      	adds	r3, #8
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	edd3 7a00 	vldr	s15, [r3]
 8004292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429a:	4a47      	ldr	r2, [pc, #284]	; (80043b8 <ADC3_IN2_TKEO+0x180>)
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	3301      	adds	r3, #1
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	2ba8      	cmp	r3, #168	; 0xa8
 80042b0:	d9cb      	bls.n	800424a <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 80042b2:	4b41      	ldr	r3, [pc, #260]	; (80043b8 <ADC3_IN2_TKEO+0x180>)
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80042ba:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <ADC3_IN2_TKEO+0x180>)
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4


  float32_t Tkeo_Sum_6 = 0.0f;
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	e00e      	b.n	8004304 <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 80042e6:	4a34      	ldr	r2, [pc, #208]	; (80043b8 <ADC3_IN2_TKEO+0x180>)
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80042f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	3301      	adds	r3, #1
 8004302:	623b      	str	r3, [r7, #32]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2ba9      	cmp	r3, #169	; 0xa9
 8004308:	d9ed      	bls.n	80042e6 <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800430a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800430e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80043bc <ADC3_IN2_TKEO+0x184>
 8004312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004316:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e018      	b.n	8004352 <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 8004320:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <ADC3_IN2_TKEO+0x180>)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	ed93 7a00 	vldr	s14, [r3]
 800432c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004334:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 8004338:	edd7 7a03 	vldr	s15, [r7, #12]
 800433c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004340:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	3301      	adds	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2ba9      	cmp	r3, #169	; 0xa9
 8004356:	d9e3      	bls.n	8004320 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8004358:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800435c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80043bc <ADC3_IN2_TKEO+0x184>
 8004360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004364:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 8004368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800436a:	f7fc f915 	bl	8000598 <__aeabi_f2d>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	ec43 2b10 	vmov	d0, r2, r3
 8004376:	f00c f843 	bl	8010400 <sqrt>
 800437a:	ec53 2b10 	vmov	r2, r3, d0
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	f7fc fc59 	bl	8000c38 <__aeabi_d2f>
 8004386:	4603      	mov	r3, r0
 8004388:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 800438a:	edd7 7a00 	vldr	s15, [r7]
 800438e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004396:	ed97 7a05 	vldr	s14, [r7, #20]
 800439a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	dd03      	ble.n	80043ac <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 80043a4:	2301      	movs	r3, #1
 80043a6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	e000      	b.n	80043ae <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 80043ac:	2300      	movs	r3, #0
  }


}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3730      	adds	r7, #48	; 0x30
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000b414 	.word	0x2000b414
 80043bc:	432a0000 	.word	0x432a0000

080043c0 <ADC1_DMA_sort_uhb>:
uint8_t ADC2_Current_buffer = 1;
uint8_t ADC3_Current_buffer = 1;

//FUNCTION DEFINITIONS
void ADC1_DMA_sort_uhb (void)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
  if(ADC1_Current_buffer == 1)
 80043c6:	4b66      	ldr	r3, [pc, #408]	; (8004560 <ADC1_DMA_sort_uhb+0x1a0>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d15f      	bne.n	800448e <ADC1_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e057      	b.n	8004484 <ADC1_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <ADC1_DMA_sort_uhb+0x24>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d126      	bne.n	8004432 <ADC1_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	e01e      	b.n	8004428 <ADC1_DMA_sort_uhb+0x68>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80043ea:	4b5e      	ldr	r3, [pc, #376]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc f8ad 	bl	8000554 <__aeabi_ui2d>
 80043fa:	a357      	add	r3, pc, #348	; (adr r3, 8004558 <ADC1_DMA_sort_uhb+0x198>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f7fc f922 	bl	8000648 <__aeabi_dmul>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4956      	ldr	r1, [pc, #344]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 800440a:	680c      	ldr	r4, [r1, #0]
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	f7fc fbf2 	bl	8000bf8 <__aeabi_d2uiz>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4423      	add	r3, r4
 8004420:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3301      	adds	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800442e:	d3dc      	bcc.n	80043ea <ADC1_DMA_sort_uhb+0x2a>
 8004430:	e025      	b.n	800447e <ADC1_DMA_sort_uhb+0xbe>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e01e      	b.n	8004476 <ADC1_DMA_sort_uhb+0xb6>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004438:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc f886 	bl	8000554 <__aeabi_ui2d>
 8004448:	a343      	add	r3, pc, #268	; (adr r3, 8004558 <ADC1_DMA_sort_uhb+0x198>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fc f8fb 	bl	8000648 <__aeabi_dmul>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4943      	ldr	r1, [pc, #268]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 8004458:	680c      	ldr	r4, [r1, #0]
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f7fc fbcb 	bl	8000bf8 <__aeabi_d2uiz>
 8004462:	4602      	mov	r2, r0
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800446a:	330a      	adds	r3, #10
 800446c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800447c:	d3dc      	bcc.n	8004438 <ADC1_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	3301      	adds	r3, #1
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800448a:	d9a3      	bls.n	80043d4 <ADC1_DMA_sort_uhb+0x14>
	  			}
	  		}
	     }

  }
};
 800448c:	e05e      	b.n	800454c <ADC1_DMA_sort_uhb+0x18c>
	  for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	e057      	b.n	8004544 <ADC1_DMA_sort_uhb+0x184>
	  		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <ADC1_DMA_sort_uhb+0xe4>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d126      	bne.n	80044f2 <ADC1_DMA_sort_uhb+0x132>
	  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 80044a4:	2300      	movs	r3, #0
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	e01e      	b.n	80044e8 <ADC1_DMA_sort_uhb+0x128>
	  				ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fc f84d 	bl	8000554 <__aeabi_ui2d>
 80044ba:	a327      	add	r3, pc, #156	; (adr r3, 8004558 <ADC1_DMA_sort_uhb+0x198>)
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f7fc f8c2 	bl	8000648 <__aeabi_dmul>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4926      	ldr	r1, [pc, #152]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 80044ca:	680c      	ldr	r4, [r1, #0]
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f7fc fb92 	bl	8000bf8 <__aeabi_d2uiz>
 80044d4:	4602      	mov	r2, r0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4423      	add	r3, r4
 80044e0:	605a      	str	r2, [r3, #4]
	  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3301      	adds	r3, #1
 80044e6:	607b      	str	r3, [r7, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80044ee:	d3dc      	bcc.n	80044aa <ADC1_DMA_sort_uhb+0xea>
 80044f0:	e025      	b.n	800453e <ADC1_DMA_sort_uhb+0x17e>
	  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 80044f2:	2300      	movs	r3, #0
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	e01e      	b.n	8004536 <ADC1_DMA_sort_uhb+0x176>
	  				ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc f826 	bl	8000554 <__aeabi_ui2d>
 8004508:	a313      	add	r3, pc, #76	; (adr r3, 8004558 <ADC1_DMA_sort_uhb+0x198>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f7fc f89b 	bl	8000648 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4913      	ldr	r1, [pc, #76]	; (8004564 <ADC1_DMA_sort_uhb+0x1a4>)
 8004518:	680c      	ldr	r4, [r1, #0]
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	f7fc fb6b 	bl	8000bf8 <__aeabi_d2uiz>
 8004522:	4602      	mov	r2, r0
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 800452a:	330c      	adds	r3, #12
 800452c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3301      	adds	r3, #1
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800453c:	d3dc      	bcc.n	80044f8 <ADC1_DMA_sort_uhb+0x138>
	  for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3301      	adds	r3, #1
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800454a:	d9a3      	bls.n	8004494 <ADC1_DMA_sort_uhb+0xd4>
};
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	f3af 8000 	nop.w
 8004558:	66666666 	.word	0x66666666
 800455c:	3f4a6666 	.word	0x3f4a6666
 8004560:	20007868 	.word	0x20007868
 8004564:	2000c008 	.word	0x2000c008

08004568 <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
  if (ADC1_Current_buffer == 1)
 800456e:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <ADC1_DMA_sort_lhb+0x1b8>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d166      	bne.n	8004644 <ADC1_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8004576:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e059      	b.n	8004632 <ADC1_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <ADC1_DMA_sort_lhb+0x26>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d127      	bne.n	80045de <ADC1_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800458e:	f240 2371 	movw	r3, #625	; 0x271
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	e01e      	b.n	80045d4 <ADC1_DMA_sort_lhb+0x6c>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004596:	4b63      	ldr	r3, [pc, #396]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fb ffd7 	bl	8000554 <__aeabi_ui2d>
 80045a6:	a35c      	add	r3, pc, #368	; (adr r3, 8004718 <ADC1_DMA_sort_lhb+0x1b0>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f7fc f84c 	bl	8000648 <__aeabi_dmul>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	495b      	ldr	r1, [pc, #364]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 80045b6:	680c      	ldr	r4, [r1, #0]
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f7fc fb1c 	bl	8000bf8 <__aeabi_d2uiz>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4423      	add	r3, r4
 80045cc:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	3301      	adds	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80045da:	d9dc      	bls.n	8004596 <ADC1_DMA_sort_lhb+0x2e>
 80045dc:	e026      	b.n	800462c <ADC1_DMA_sort_lhb+0xc4>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 80045de:	f240 2371 	movw	r3, #625	; 0x271
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e01e      	b.n	8004624 <ADC1_DMA_sort_lhb+0xbc>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80045e6:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fb ffaf 	bl	8000554 <__aeabi_ui2d>
 80045f6:	a348      	add	r3, pc, #288	; (adr r3, 8004718 <ADC1_DMA_sort_lhb+0x1b0>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fc f824 	bl	8000648 <__aeabi_dmul>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4947      	ldr	r1, [pc, #284]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 8004606:	680c      	ldr	r4, [r1, #0]
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	f7fc faf4 	bl	8000bf8 <__aeabi_d2uiz>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004618:	330a      	adds	r3, #10
 800461a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800462a:	d9dc      	bls.n	80045e6 <ADC1_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3301      	adds	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004638:	4293      	cmp	r3, r2
 800463a:	d9a0      	bls.n	800457e <ADC1_DMA_sort_lhb+0x16>
			}
		}
     }

	ADC1_Current_buffer = 2;
 800463c:	4b38      	ldr	r3, [pc, #224]	; (8004720 <ADC1_DMA_sort_lhb+0x1b8>)
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
	 }

	ADC1_Current_buffer = 1;
   }

};
 8004642:	e065      	b.n	8004710 <ADC1_DMA_sort_lhb+0x1a8>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8004644:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	e059      	b.n	8004700 <ADC1_DMA_sort_lhb+0x198>
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <ADC1_DMA_sort_lhb+0xf4>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d127      	bne.n	80046ac <ADC1_DMA_sort_lhb+0x144>
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800465c:	f240 2371 	movw	r3, #625	; 0x271
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e01e      	b.n	80046a2 <ADC1_DMA_sort_lhb+0x13a>
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fb ff70 	bl	8000554 <__aeabi_ui2d>
 8004674:	a328      	add	r3, pc, #160	; (adr r3, 8004718 <ADC1_DMA_sort_lhb+0x1b0>)
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f7fb ffe5 	bl	8000648 <__aeabi_dmul>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4928      	ldr	r1, [pc, #160]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 8004684:	680c      	ldr	r4, [r1, #0]
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	f7fc fab5 	bl	8000bf8 <__aeabi_d2uiz>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4423      	add	r3, r4
 800469a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3301      	adds	r3, #1
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80046a8:	d9dc      	bls.n	8004664 <ADC1_DMA_sort_lhb+0xfc>
 80046aa:	e026      	b.n	80046fa <ADC1_DMA_sort_lhb+0x192>
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 80046ac:	f240 2371 	movw	r3, #625	; 0x271
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	e01e      	b.n	80046f2 <ADC1_DMA_sort_lhb+0x18a>
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80046b4:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fb ff48 	bl	8000554 <__aeabi_ui2d>
 80046c4:	a314      	add	r3, pc, #80	; (adr r3, 8004718 <ADC1_DMA_sort_lhb+0x1b0>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb ffbd 	bl	8000648 <__aeabi_dmul>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4914      	ldr	r1, [pc, #80]	; (8004724 <ADC1_DMA_sort_lhb+0x1bc>)
 80046d4:	680c      	ldr	r4, [r1, #0]
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fc fa8d 	bl	8000bf8 <__aeabi_d2uiz>
 80046de:	4602      	mov	r2, r0
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80046e6:	330c      	adds	r3, #12
 80046e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80046f8:	d9dc      	bls.n	80046b4 <ADC1_DMA_sort_lhb+0x14c>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004706:	4293      	cmp	r3, r2
 8004708:	d9a0      	bls.n	800464c <ADC1_DMA_sort_lhb+0xe4>
	ADC1_Current_buffer = 1;
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <ADC1_DMA_sort_lhb+0x1b8>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
};
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd90      	pop	{r4, r7, pc}
 8004718:	66666666 	.word	0x66666666
 800471c:	3f4a6666 	.word	0x3f4a6666
 8004720:	20007868 	.word	0x20007868
 8004724:	2000c008 	.word	0x2000c008

08004728 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
  if(ADC2_Current_buffer == 1)
 800472e:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <ADC2_DMA_sort_uhb+0x1a0>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d15f      	bne.n	80047f6 <ADC2_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e057      	b.n	80047ec <ADC2_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0))
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <ADC2_DMA_sort_uhb+0x24>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d126      	bne.n	800479a <ADC2_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	e01e      	b.n	8004790 <ADC2_DMA_sort_uhb+0x68>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004752:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475c:	4618      	mov	r0, r3
 800475e:	f7fb fef9 	bl	8000554 <__aeabi_ui2d>
 8004762:	a357      	add	r3, pc, #348	; (adr r3, 80048c0 <ADC2_DMA_sort_uhb+0x198>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f7fb ff6e 	bl	8000648 <__aeabi_dmul>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4956      	ldr	r1, [pc, #344]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 8004772:	680c      	ldr	r4, [r1, #0]
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	f7fc fa3e 	bl	8000bf8 <__aeabi_d2uiz>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4423      	add	r3, r4
 8004788:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	3301      	adds	r3, #1
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004796:	d3dc      	bcc.n	8004752 <ADC2_DMA_sort_uhb+0x2a>
 8004798:	e025      	b.n	80047e6 <ADC2_DMA_sort_uhb+0xbe>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e01e      	b.n	80047de <ADC2_DMA_sort_uhb+0xb6>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80047a0:	4b4a      	ldr	r3, [pc, #296]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fb fed2 	bl	8000554 <__aeabi_ui2d>
 80047b0:	a343      	add	r3, pc, #268	; (adr r3, 80048c0 <ADC2_DMA_sort_uhb+0x198>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fb ff47 	bl	8000648 <__aeabi_dmul>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4943      	ldr	r1, [pc, #268]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 80047c0:	680c      	ldr	r4, [r1, #0]
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f7fc fa17 	bl	8000bf8 <__aeabi_d2uiz>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80047d2:	330a      	adds	r3, #10
 80047d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80047e4:	d3dc      	bcc.n	80047a0 <ADC2_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80047f2:	d9a3      	bls.n	800473c <ADC2_DMA_sort_uhb+0x14>
  			}
  		}
     }
   }

};
 80047f4:	e05e      	b.n	80048b4 <ADC2_DMA_sort_uhb+0x18c>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	e057      	b.n	80048ac <ADC2_DMA_sort_uhb+0x184>
  		if(m==0 || (m%2==0))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <ADC2_DMA_sort_uhb+0xe4>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d126      	bne.n	800485a <ADC2_DMA_sort_uhb+0x132>
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800480c:	2300      	movs	r3, #0
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	e01e      	b.n	8004850 <ADC2_DMA_sort_uhb+0x128>
  				ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004812:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fb fe99 	bl	8000554 <__aeabi_ui2d>
 8004822:	a327      	add	r3, pc, #156	; (adr r3, 80048c0 <ADC2_DMA_sort_uhb+0x198>)
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fb ff0e 	bl	8000648 <__aeabi_dmul>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4926      	ldr	r1, [pc, #152]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 8004832:	680c      	ldr	r4, [r1, #0]
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	f7fc f9de 	bl	8000bf8 <__aeabi_d2uiz>
 800483c:	4602      	mov	r2, r0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4423      	add	r3, r4
 8004848:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3301      	adds	r3, #1
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004856:	d3dc      	bcc.n	8004812 <ADC2_DMA_sort_uhb+0xea>
 8004858:	e025      	b.n	80048a6 <ADC2_DMA_sort_uhb+0x17e>
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	e01e      	b.n	800489e <ADC2_DMA_sort_uhb+0x176>
  				ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fb fe72 	bl	8000554 <__aeabi_ui2d>
 8004870:	a313      	add	r3, pc, #76	; (adr r3, 80048c0 <ADC2_DMA_sort_uhb+0x198>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fb fee7 	bl	8000648 <__aeabi_dmul>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4913      	ldr	r1, [pc, #76]	; (80048cc <ADC2_DMA_sort_uhb+0x1a4>)
 8004880:	680c      	ldr	r4, [r1, #0]
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	f7fc f9b7 	bl	8000bf8 <__aeabi_d2uiz>
 800488a:	4602      	mov	r2, r0
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004892:	330c      	adds	r3, #12
 8004894:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	603b      	str	r3, [r7, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80048a4:	d3dc      	bcc.n	8004860 <ADC2_DMA_sort_uhb+0x138>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80048b2:	d9a3      	bls.n	80047fc <ADC2_DMA_sort_uhb+0xd4>
};
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	f3af 8000 	nop.w
 80048c0:	66666666 	.word	0x66666666
 80048c4:	3f4a6666 	.word	0x3f4a6666
 80048c8:	20007869 	.word	0x20007869
 80048cc:	2000c00c 	.word	0x2000c00c

080048d0 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
  if(ADC2_Current_buffer == 1)
 80048d6:	4b6c      	ldr	r3, [pc, #432]	; (8004a88 <ADC2_DMA_sort_lhb+0x1b8>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d166      	bne.n	80049ac <ADC2_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80048de:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e059      	b.n	800499a <ADC2_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <ADC2_DMA_sort_lhb+0x26>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d127      	bne.n	8004946 <ADC2_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80048f6:	f240 2371 	movw	r3, #625	; 0x271
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e01e      	b.n	800493c <ADC2_DMA_sort_lhb+0x6c>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fe23 	bl	8000554 <__aeabi_ui2d>
 800490e:	a35c      	add	r3, pc, #368	; (adr r3, 8004a80 <ADC2_DMA_sort_lhb+0x1b0>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f7fb fe98 	bl	8000648 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	495b      	ldr	r1, [pc, #364]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 800491e:	680c      	ldr	r4, [r1, #0]
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f7fc f968 	bl	8000bf8 <__aeabi_d2uiz>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4423      	add	r3, r4
 8004934:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004942:	d9dc      	bls.n	80048fe <ADC2_DMA_sort_lhb+0x2e>
 8004944:	e026      	b.n	8004994 <ADC2_DMA_sort_lhb+0xc4>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004946:	f240 2371 	movw	r3, #625	; 0x271
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e01e      	b.n	800498c <ADC2_DMA_sort_lhb+0xbc>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800494e:	4b4f      	ldr	r3, [pc, #316]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fb fdfb 	bl	8000554 <__aeabi_ui2d>
 800495e:	a348      	add	r3, pc, #288	; (adr r3, 8004a80 <ADC2_DMA_sort_lhb+0x1b0>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb fe70 	bl	8000648 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4947      	ldr	r1, [pc, #284]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 800496e:	680c      	ldr	r4, [r1, #0]
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	f7fc f940 	bl	8000bf8 <__aeabi_d2uiz>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004980:	330a      	adds	r3, #10
 8004982:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3301      	adds	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004992:	d9dc      	bls.n	800494e <ADC2_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	3301      	adds	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d9a0      	bls.n	80048e6 <ADC2_DMA_sort_lhb+0x16>
			}
		}
	}

	ADC2_Current_buffer = 2;
 80049a4:	4b38      	ldr	r3, [pc, #224]	; (8004a88 <ADC2_DMA_sort_lhb+0x1b8>)
 80049a6:	2202      	movs	r2, #2
 80049a8:	701a      	strb	r2, [r3, #0]
  	 }

  	ADC2_Current_buffer = 1;
   }

};
 80049aa:	e065      	b.n	8004a78 <ADC2_DMA_sort_lhb+0x1a8>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80049ac:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	e059      	b.n	8004a68 <ADC2_DMA_sort_lhb+0x198>
  		if(m==0||(m%2==0))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <ADC2_DMA_sort_lhb+0xf4>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d127      	bne.n	8004a14 <ADC2_DMA_sort_lhb+0x144>
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80049c4:	f240 2371 	movw	r3, #625	; 0x271
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	e01e      	b.n	8004a0a <ADC2_DMA_sort_lhb+0x13a>
  				ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80049cc:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fb fdbc 	bl	8000554 <__aeabi_ui2d>
 80049dc:	a328      	add	r3, pc, #160	; (adr r3, 8004a80 <ADC2_DMA_sort_lhb+0x1b0>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fe31 	bl	8000648 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4928      	ldr	r1, [pc, #160]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 80049ec:	680c      	ldr	r4, [r1, #0]
 80049ee:	4610      	mov	r0, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	f7fc f901 	bl	8000bf8 <__aeabi_d2uiz>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4423      	add	r3, r4
 8004a02:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3301      	adds	r3, #1
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004a10:	d9dc      	bls.n	80049cc <ADC2_DMA_sort_lhb+0xfc>
 8004a12:	e026      	b.n	8004a62 <ADC2_DMA_sort_lhb+0x192>
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004a14:	f240 2371 	movw	r3, #625	; 0x271
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	e01e      	b.n	8004a5a <ADC2_DMA_sort_lhb+0x18a>
  				ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fd94 	bl	8000554 <__aeabi_ui2d>
 8004a2c:	a314      	add	r3, pc, #80	; (adr r3, 8004a80 <ADC2_DMA_sort_lhb+0x1b0>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fe09 	bl	8000648 <__aeabi_dmul>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4914      	ldr	r1, [pc, #80]	; (8004a8c <ADC2_DMA_sort_lhb+0x1bc>)
 8004a3c:	680c      	ldr	r4, [r1, #0]
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4619      	mov	r1, r3
 8004a42:	f7fc f8d9 	bl	8000bf8 <__aeabi_d2uiz>
 8004a46:	4602      	mov	r2, r0
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004a4e:	330c      	adds	r3, #12
 8004a50:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004a60:	d9dc      	bls.n	8004a1c <ADC2_DMA_sort_lhb+0x14c>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d9a0      	bls.n	80049b4 <ADC2_DMA_sort_lhb+0xe4>
  	ADC2_Current_buffer = 1;
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <ADC2_DMA_sort_lhb+0x1b8>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
};
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}
 8004a80:	66666666 	.word	0x66666666
 8004a84:	3f4a6666 	.word	0x3f4a6666
 8004a88:	20007869 	.word	0x20007869
 8004a8c:	2000c00c 	.word	0x2000c00c

08004a90 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
  if(ADC3_Current_buffer == 1)
 8004a96:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <ADC3_DMA_sort_uhb+0x1a0>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d15f      	bne.n	8004b5e <ADC3_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e057      	b.n	8004b54 <ADC3_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0))
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <ADC3_DMA_sort_uhb+0x24>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d126      	bne.n	8004b02 <ADC3_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	e01e      	b.n	8004af8 <ADC3_DMA_sort_uhb+0x68>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004aba:	4b5e      	ldr	r3, [pc, #376]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb fd45 	bl	8000554 <__aeabi_ui2d>
 8004aca:	a357      	add	r3, pc, #348	; (adr r3, 8004c28 <ADC3_DMA_sort_uhb+0x198>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fdba 	bl	8000648 <__aeabi_dmul>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4956      	ldr	r1, [pc, #344]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004ada:	680c      	ldr	r4, [r1, #0]
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f7fc f88a 	bl	8000bf8 <__aeabi_d2uiz>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4423      	add	r3, r4
 8004af0:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3301      	adds	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004afe:	d3dc      	bcc.n	8004aba <ADC3_DMA_sort_uhb+0x2a>
 8004b00:	e025      	b.n	8004b4e <ADC3_DMA_sort_uhb+0xbe>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e01e      	b.n	8004b46 <ADC3_DMA_sort_uhb+0xb6>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004b08:	4b4a      	ldr	r3, [pc, #296]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fb fd1e 	bl	8000554 <__aeabi_ui2d>
 8004b18:	a343      	add	r3, pc, #268	; (adr r3, 8004c28 <ADC3_DMA_sort_uhb+0x198>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f7fb fd93 	bl	8000648 <__aeabi_dmul>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4943      	ldr	r1, [pc, #268]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004b28:	680c      	ldr	r4, [r1, #0]
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f7fc f863 	bl	8000bf8 <__aeabi_d2uiz>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004b3a:	330a      	adds	r3, #10
 8004b3c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004b4c:	d3dc      	bcc.n	8004b08 <ADC3_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	3301      	adds	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004b5a:	d9a3      	bls.n	8004aa4 <ADC3_DMA_sort_uhb+0x14>
  			}
  		}
     }
   }

};
 8004b5c:	e05e      	b.n	8004c1c <ADC3_DMA_sort_uhb+0x18c>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	e057      	b.n	8004c14 <ADC3_DMA_sort_uhb+0x184>
  		if(m==0 || (m%2==0))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d004      	beq.n	8004b74 <ADC3_DMA_sort_uhb+0xe4>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d126      	bne.n	8004bc2 <ADC3_DMA_sort_uhb+0x132>
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004b74:	2300      	movs	r3, #0
 8004b76:	607b      	str	r3, [r7, #4]
 8004b78:	e01e      	b.n	8004bb8 <ADC3_DMA_sort_uhb+0x128>
  				ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004b7a:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb fce5 	bl	8000554 <__aeabi_ui2d>
 8004b8a:	a327      	add	r3, pc, #156	; (adr r3, 8004c28 <ADC3_DMA_sort_uhb+0x198>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fd5a 	bl	8000648 <__aeabi_dmul>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4926      	ldr	r1, [pc, #152]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004b9a:	680c      	ldr	r4, [r1, #0]
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f7fc f82a 	bl	8000bf8 <__aeabi_d2uiz>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4423      	add	r3, r4
 8004bb0:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004bbe:	d3dc      	bcc.n	8004b7a <ADC3_DMA_sort_uhb+0xea>
 8004bc0:	e025      	b.n	8004c0e <ADC3_DMA_sort_uhb+0x17e>
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	e01e      	b.n	8004c06 <ADC3_DMA_sort_uhb+0x176>
  				ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fb fcbe 	bl	8000554 <__aeabi_ui2d>
 8004bd8:	a313      	add	r3, pc, #76	; (adr r3, 8004c28 <ADC3_DMA_sort_uhb+0x198>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f7fb fd33 	bl	8000648 <__aeabi_dmul>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4913      	ldr	r1, [pc, #76]	; (8004c34 <ADC3_DMA_sort_uhb+0x1a4>)
 8004be8:	680c      	ldr	r4, [r1, #0]
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7fc f803 	bl	8000bf8 <__aeabi_d2uiz>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004c0c:	d3dc      	bcc.n	8004bc8 <ADC3_DMA_sort_uhb+0x138>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004c1a:	d9a3      	bls.n	8004b64 <ADC3_DMA_sort_uhb+0xd4>
};
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	f3af 8000 	nop.w
 8004c28:	66666666 	.word	0x66666666
 8004c2c:	3f4a6666 	.word	0x3f4a6666
 8004c30:	2000786a 	.word	0x2000786a
 8004c34:	2000c010 	.word	0x2000c010

08004c38 <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
  if(ADC3_Current_buffer == 1)
 8004c3e:	4b6c      	ldr	r3, [pc, #432]	; (8004df0 <ADC3_DMA_sort_lhb+0x1b8>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d166      	bne.n	8004d14 <ADC3_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004c46:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e059      	b.n	8004d02 <ADC3_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0))
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <ADC3_DMA_sort_lhb+0x26>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d127      	bne.n	8004cae <ADC3_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004c5e:	f240 2371 	movw	r3, #625	; 0x271
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	e01e      	b.n	8004ca4 <ADC3_DMA_sort_lhb+0x6c>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004c66:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fb fc6f 	bl	8000554 <__aeabi_ui2d>
 8004c76:	a35c      	add	r3, pc, #368	; (adr r3, 8004de8 <ADC3_DMA_sort_lhb+0x1b0>)
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	f7fb fce4 	bl	8000648 <__aeabi_dmul>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	495b      	ldr	r1, [pc, #364]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004c86:	680c      	ldr	r4, [r1, #0]
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f7fb ffb4 	bl	8000bf8 <__aeabi_d2uiz>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4423      	add	r3, r4
 8004c9c:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004caa:	d9dc      	bls.n	8004c66 <ADC3_DMA_sort_lhb+0x2e>
 8004cac:	e026      	b.n	8004cfc <ADC3_DMA_sort_lhb+0xc4>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004cae:	f240 2371 	movw	r3, #625	; 0x271
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e01e      	b.n	8004cf4 <ADC3_DMA_sort_lhb+0xbc>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004cb6:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fb fc47 	bl	8000554 <__aeabi_ui2d>
 8004cc6:	a348      	add	r3, pc, #288	; (adr r3, 8004de8 <ADC3_DMA_sort_lhb+0x1b0>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fcbc 	bl	8000648 <__aeabi_dmul>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4947      	ldr	r1, [pc, #284]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004cd6:	680c      	ldr	r4, [r1, #0]
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f7fb ff8c 	bl	8000bf8 <__aeabi_d2uiz>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004ce8:	330a      	adds	r3, #10
 8004cea:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004cfa:	d9dc      	bls.n	8004cb6 <ADC3_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d9a0      	bls.n	8004c4e <ADC3_DMA_sort_lhb+0x16>
			}
		}
     }

	ADC3_Current_buffer = 2;
 8004d0c:	4b38      	ldr	r3, [pc, #224]	; (8004df0 <ADC3_DMA_sort_lhb+0x1b8>)
 8004d0e:	2202      	movs	r2, #2
 8004d10:	701a      	strb	r2, [r3, #0]

  	ADC3_Current_buffer = 1;
  }


};
 8004d12:	e065      	b.n	8004de0 <ADC3_DMA_sort_lhb+0x1a8>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004d14:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	e059      	b.n	8004dd0 <ADC3_DMA_sort_lhb+0x198>
  		if(m==0||(m%2==0))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <ADC3_DMA_sort_lhb+0xf4>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d127      	bne.n	8004d7c <ADC3_DMA_sort_lhb+0x144>
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004d2c:	f240 2371 	movw	r3, #625	; 0x271
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	e01e      	b.n	8004d72 <ADC3_DMA_sort_lhb+0x13a>
  				ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fb fc08 	bl	8000554 <__aeabi_ui2d>
 8004d44:	a328      	add	r3, pc, #160	; (adr r3, 8004de8 <ADC3_DMA_sort_lhb+0x1b0>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fc7d 	bl	8000648 <__aeabi_dmul>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4928      	ldr	r1, [pc, #160]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004d54:	680c      	ldr	r4, [r1, #0]
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f7fb ff4d 	bl	8000bf8 <__aeabi_d2uiz>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4423      	add	r3, r4
 8004d6a:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004d78:	d9dc      	bls.n	8004d34 <ADC3_DMA_sort_lhb+0xfc>
 8004d7a:	e026      	b.n	8004dca <ADC3_DMA_sort_lhb+0x192>
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004d7c:	f240 2371 	movw	r3, #625	; 0x271
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	e01e      	b.n	8004dc2 <ADC3_DMA_sort_lhb+0x18a>
  				ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fb fbe0 	bl	8000554 <__aeabi_ui2d>
 8004d94:	a314      	add	r3, pc, #80	; (adr r3, 8004de8 <ADC3_DMA_sort_lhb+0x1b0>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fc55 	bl	8000648 <__aeabi_dmul>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4914      	ldr	r1, [pc, #80]	; (8004df4 <ADC3_DMA_sort_lhb+0x1bc>)
 8004da4:	680c      	ldr	r4, [r1, #0]
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f7fb ff25 	bl	8000bf8 <__aeabi_d2uiz>
 8004dae:	4602      	mov	r2, r0
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004db6:	330c      	adds	r3, #12
 8004db8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004dc8:	d9dc      	bls.n	8004d84 <ADC3_DMA_sort_lhb+0x14c>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d9a0      	bls.n	8004d1c <ADC3_DMA_sort_lhb+0xe4>
  	ADC3_Current_buffer = 1;
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <ADC3_DMA_sort_lhb+0x1b8>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
};
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}
 8004de8:	66666666 	.word	0x66666666
 8004dec:	3f4a6666 	.word	0x3f4a6666
 8004df0:	2000786a 	.word	0x2000786a
 8004df4:	2000c010 	.word	0x2000c010

08004df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004dfe:	f002 fb4c 	bl	800749a <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8004e02:	f7fd f9c5 	bl	8002190 <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 8004e06:	f7fd f9e3 	bl	80021d0 <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 8004e0a:	48af      	ldr	r0, [pc, #700]	; (80050c8 <main+0x2d0>)
 8004e0c:	f7fc fde8 	bl	80019e0 <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8004e10:	f7fd fa08 	bl	8002224 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8004e14:	f7fd fa26 	bl	8002264 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 8004e18:	48ac      	ldr	r0, [pc, #688]	; (80050cc <main+0x2d4>)
 8004e1a:	f7fc fe85 	bl	8001b28 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 8004e1e:	f7fd fa4b 	bl	80022b8 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8004e22:	f7fd fa69 	bl	80022f8 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 8004e26:	48aa      	ldr	r0, [pc, #680]	; (80050d0 <main+0x2d8>)
 8004e28:	f7fc ff22 	bl	8001c70 <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 8004e2c:	f7fd fa8e 	bl	800234c <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8004e30:	f7fd faac 	bl	800238c <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8004e34:	48a7      	ldr	r0, [pc, #668]	; (80050d4 <main+0x2dc>)
 8004e36:	f7fc ffbf 	bl	8001db8 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 8004e3a:	f7fd fad1 	bl	80023e0 <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8004e3e:	f7fd faef 	bl	8002420 <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8004e42:	48a5      	ldr	r0, [pc, #660]	; (80050d8 <main+0x2e0>)
 8004e44:	f7fd f85c 	bl	8001f00 <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 8004e48:	f7fd fb14 	bl	8002474 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 8004e4c:	f7fd fb32 	bl	80024b4 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8004e50:	48a2      	ldr	r0, [pc, #648]	; (80050dc <main+0x2e4>)
 8004e52:	f7fd f8f9 	bl	8002048 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e56:	f000 fac5 	bl	80053e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e5a:	f000 ffcb 	bl	8005df4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e5e:	f000 ff43 	bl	8005ce8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004e62:	f000 fb09 	bl	8005478 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004e66:	f000 fb91 	bl	800558c <MX_ADC2_Init>
  MX_ADC3_Init();
 8004e6a:	f000 fc07 	bl	800567c <MX_ADC3_Init>
  MX_FMAC_Init();
 8004e6e:	f000 fcc3 	bl	80057f8 <MX_FMAC_Init>
  MX_TIM6_Init();
 8004e72:	f000 fd95 	bl	80059a0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004e76:	f000 fdc9 	bl	8005a0c <MX_TIM7_Init>
  MX_TIM20_Init();
 8004e7a:	f000 fdfd 	bl	8005a78 <MX_TIM20_Init>
  MX_DAC1_Init();
 8004e7e:	f000 fc75 	bl	800576c <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8004e82:	f000 fe4d 	bl	8005b20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8004e86:	f000 fee3 	bl	8005c50 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8004e8a:	f000 fe95 	bl	8005bb8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004e8e:	f000 fcc7 	bl	8005820 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004e92:	f000 fd05 	bl	80058a0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8004e96:	f000 fd43 	bl	8005920 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  // Enable the EXTI line 2 interrupt
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);  // Set priority
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	2008      	movs	r0, #8
 8004ea0:	f003 ff6d 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn); // Enable the interrupt in NVIC (Interrupt is triggered by pressing the push button)
 8004ea4:	2008      	movs	r0, #8
 8004ea6:	f003 ff84 	bl	8008db2 <HAL_NVIC_EnableIRQ>

  EXT12_IRQHandler(); // When the push button is pressed - starts all ADCs with DMA, starts the sorting algorithm for each ADC, calculates the offset from the baseline and the standard deviation from the baseline data (for all channels). Finally, it toggles the status LED to indicate that acquisition has started
 8004eaa:	f001 f81f 	bl	8005eec <EXT12_IRQHandler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (Buffer_ADC1_Ready == 1) // Checks if the flag for the channel buffer fills is set for ADC1
 8004eae:	4b8c      	ldr	r3, [pc, #560]	; (80050e0 <main+0x2e8>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 80a7 	bne.w	8005008 <main+0x210>
	{
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8004eba:	f7fd f99b 	bl	80021f4 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 8004ebe:	4882      	ldr	r0, [pc, #520]	; (80050c8 <main+0x2d0>)
 8004ec0:	f7fc fdc0 	bl	8001a44 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e017      	b.n	8004efa <main+0x102>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtracts the stored offset
 8004eca:	4a7f      	ldr	r2, [pc, #508]	; (80050c8 <main+0x2d0>)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	ed93 7a00 	vldr	s14, [r3]
 8004eda:	4b82      	ldr	r3, [pc, #520]	; (80050e4 <main+0x2ec>)
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ee4:	4a78      	ldr	r2, [pc, #480]	; (80050c8 <main+0x2d0>)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	3308      	adds	r3, #8
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	3304      	adds	r3, #4
 8004ef0:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2ba9      	cmp	r3, #169	; 0xa9
 8004efe:	d9e4      	bls.n	8004eca <main+0xd2>
      #ifdef MONITOR_CHANNEL_1_LEFT
	  ADC1_IN1_DAC_Update(&DAC1_ADC1_IN1); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8004f00:	4b79      	ldr	r3, [pc, #484]	; (80050e8 <main+0x2f0>)
 8004f02:	edd3 7a00 	vldr	s15, [r3]
 8004f06:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0a:	4878      	ldr	r0, [pc, #480]	; (80050ec <main+0x2f4>)
 8004f0c:	f7fe fdc0 	bl	8003a90 <ADC1_IN1_TKEO>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b76      	ldr	r3, [pc, #472]	; (80050f0 <main+0x2f8>)
 8004f16:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 8004f18:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <main+0x2f8>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d11e      	bne.n	8004f5e <main+0x166>
      {
      /* Slope sign change */
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 8004f20:	4b70      	ldr	r3, [pc, #448]	; (80050e4 <main+0x2ec>)
 8004f22:	edd3 7a00 	vldr	s15, [r3]
 8004f26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f32:	4870      	ldr	r0, [pc, #448]	; (80050f4 <main+0x2fc>)
 8004f34:	f7fd fdd0 	bl	8002ad8 <ADC1_IN1_SSC>
 8004f38:	eef0 7a40 	vmov.f32	s15, s0
 8004f3c:	4b6e      	ldr	r3, [pc, #440]	; (80050f8 <main+0x300>)
 8004f3e:	edc3 7a00 	vstr	s15, [r3]
      /*Computes the autocorrelation values and the autoregression coefficients and returns the latter*/
      ADC1_IN1_autocorr_calc();
 8004f42:	f7fc f847 	bl	8000fd4 <ADC1_IN1_autocorr_calc>
      AR_1 = ADC1_IN1_autoreg_coeffs();
 8004f46:	f7fc f87b 	bl	8001040 <ADC1_IN1_autoreg_coeffs>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4a6b      	ldr	r2, [pc, #428]	; (80050fc <main+0x304>)
 8004f4e:	6013      	str	r3, [r2, #0]
      /* Computes the Short Time Fourier Transform from the moving average buffer */
      STFT_1 = ADC1_IN1_STFT_Update(&STFT_par_ADC1_IN1, &STFT_ADC1_IN1);
 8004f50:	496b      	ldr	r1, [pc, #428]	; (8005100 <main+0x308>)
 8004f52:	486c      	ldr	r0, [pc, #432]	; (8005104 <main+0x30c>)
 8004f54:	f7fe f85c 	bl	8003010 <ADC1_IN1_STFT_Update>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4a6b      	ldr	r2, [pc, #428]	; (8005108 <main+0x310>)
 8004f5c:	6013      	str	r3, [r2, #0]
      }


	  update_ADC1_IN2_FO_biquad_filter();
 8004f5e:	f7fd f993 	bl	8002288 <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8004f62:	485a      	ldr	r0, [pc, #360]	; (80050cc <main+0x2d4>)
 8004f64:	f7fc fe12 	bl	8001b8c <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	e017      	b.n	8004f9e <main+0x1a6>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 8004f6e:	4a57      	ldr	r2, [pc, #348]	; (80050cc <main+0x2d4>)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3308      	adds	r3, #8
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	3304      	adds	r3, #4
 8004f7a:	ed93 7a00 	vldr	s14, [r3]
 8004f7e:	4b63      	ldr	r3, [pc, #396]	; (800510c <main+0x314>)
 8004f80:	edd3 7a00 	vldr	s15, [r3]
 8004f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f88:	4a50      	ldr	r2, [pc, #320]	; (80050cc <main+0x2d4>)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	3304      	adds	r3, #4
 8004f94:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2ba9      	cmp	r3, #169	; 0xa9
 8004fa2:	d9e4      	bls.n	8004f6e <main+0x176>
      #ifdef MONITOR_CHANNEL_4_RIGHT
	  ADC1_IN2_DAC_Update(&DAC1_ADC1_IN2);
      #endif


	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 8004fa4:	4b5a      	ldr	r3, [pc, #360]	; (8005110 <main+0x318>)
 8004fa6:	edd3 7a00 	vldr	s15, [r3]
 8004faa:	eeb0 0a67 	vmov.f32	s0, s15
 8004fae:	4859      	ldr	r0, [pc, #356]	; (8005114 <main+0x31c>)
 8004fb0:	f7fe fe32 	bl	8003c18 <ADC1_IN2_TKEO>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b57      	ldr	r3, [pc, #348]	; (8005118 <main+0x320>)
 8004fba:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <main+0x320>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d11e      	bne.n	8005002 <main+0x20a>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 8004fc4:	4b51      	ldr	r3, [pc, #324]	; (800510c <main+0x314>)
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd6:	4851      	ldr	r0, [pc, #324]	; (800511c <main+0x324>)
 8004fd8:	f7fd fded 	bl	8002bb6 <ADC1_IN2_SSC>
 8004fdc:	eef0 7a40 	vmov.f32	s15, s0
 8004fe0:	4b4f      	ldr	r3, [pc, #316]	; (8005120 <main+0x328>)
 8004fe2:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_IN2_autocorr_calc();
 8004fe6:	f7fc f8cb 	bl	8001180 <ADC1_IN2_autocorr_calc>
	  AR_2 = ADC1_IN2_autoreg_coeffs();
 8004fea:	f7fc f8ff 	bl	80011ec <ADC1_IN2_autoreg_coeffs>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4a4c      	ldr	r2, [pc, #304]	; (8005124 <main+0x32c>)
 8004ff2:	6013      	str	r3, [r2, #0]
	  STFT_2 = ADC1_IN2_STFT_Update(&STFT_par_ADC1_IN2, &STFT_ADC1_IN2);
 8004ff4:	494c      	ldr	r1, [pc, #304]	; (8005128 <main+0x330>)
 8004ff6:	484d      	ldr	r0, [pc, #308]	; (800512c <main+0x334>)
 8004ff8:	f7fe f8ea 	bl	80031d0 <ADC1_IN2_STFT_Update>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4a4c      	ldr	r2, [pc, #304]	; (8005130 <main+0x338>)
 8005000:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC1_Ready = 0; // After processing is done the flag is cleared
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <main+0x2e8>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]

	}

	if (Buffer_ADC2_Ready == 1)
 8005008:	4b4a      	ldr	r3, [pc, #296]	; (8005134 <main+0x33c>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b01      	cmp	r3, #1
 8005010:	f040 80f3 	bne.w	80051fa <main+0x402>
	{
	  update_ADC2_IN3_FO_biquad_filter();
 8005014:	f7fd f982 	bl	800231c <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8005018:	482d      	ldr	r0, [pc, #180]	; (80050d0 <main+0x2d8>)
 800501a:	f7fc fe5b 	bl	8001cd4 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e017      	b.n	8005054 <main+0x25c>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <main+0x2d8>)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3308      	adds	r3, #8
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	ed93 7a00 	vldr	s14, [r3]
 8005034:	4b40      	ldr	r3, [pc, #256]	; (8005138 <main+0x340>)
 8005036:	edd3 7a00 	vldr	s15, [r3]
 800503a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800503e:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <main+0x2d8>)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3308      	adds	r3, #8
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	3304      	adds	r3, #4
 800504a:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3301      	adds	r3, #1
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2ba9      	cmp	r3, #169	; 0xa9
 8005058:	d9e4      	bls.n	8005024 <main+0x22c>

      #ifdef MONITOR_CHANNEL_2_LEFT
	  ADC2_IN3_DAC_Update(&DAC1_ADC2_IN3);
      #endif

	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 800505a:	4b38      	ldr	r3, [pc, #224]	; (800513c <main+0x344>)
 800505c:	edd3 7a00 	vldr	s15, [r3]
 8005060:	eeb0 0a67 	vmov.f32	s0, s15
 8005064:	4836      	ldr	r0, [pc, #216]	; (8005140 <main+0x348>)
 8005066:	f7fe fe9b 	bl	8003da0 <ADC2_IN3_TKEO>
 800506a:	4603      	mov	r3, r0
 800506c:	461a      	mov	r2, r3
 800506e:	4b35      	ldr	r3, [pc, #212]	; (8005144 <main+0x34c>)
 8005070:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 8005072:	4b34      	ldr	r3, [pc, #208]	; (8005144 <main+0x34c>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d11e      	bne.n	80050b8 <main+0x2c0>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 800507a:	4b2f      	ldr	r3, [pc, #188]	; (8005138 <main+0x340>)
 800507c:	edd3 7a00 	vldr	s15, [r3]
 8005080:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005088:	eeb0 0a67 	vmov.f32	s0, s15
 800508c:	482e      	ldr	r0, [pc, #184]	; (8005148 <main+0x350>)
 800508e:	f7fd fe01 	bl	8002c94 <ADC2_IN3_SSC>
 8005092:	eef0 7a40 	vmov.f32	s15, s0
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <main+0x354>)
 8005098:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN3_autocorr_calc();
 800509c:	f7fc f946 	bl	800132c <ADC2_IN3_autocorr_calc>
	  AR_3 = ADC2_IN3_autoreg_coeffs();
 80050a0:	f7fc f97a 	bl	8001398 <ADC2_IN3_autoreg_coeffs>
 80050a4:	4603      	mov	r3, r0
 80050a6:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <main+0x358>)
 80050a8:	6013      	str	r3, [r2, #0]
	  STFT_3 = ADC2_IN3_STFT_Update(&STFT_par_ADC2_IN3, &STFT_ADC2_IN3);
 80050aa:	492a      	ldr	r1, [pc, #168]	; (8005154 <main+0x35c>)
 80050ac:	482a      	ldr	r0, [pc, #168]	; (8005158 <main+0x360>)
 80050ae:	f7fe f96f 	bl	8003390 <ADC2_IN3_STFT_Update>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4a29      	ldr	r2, [pc, #164]	; (800515c <main+0x364>)
 80050b6:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 80050b8:	f7fd f97a 	bl	80023b0 <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 80050bc:	4805      	ldr	r0, [pc, #20]	; (80050d4 <main+0x2dc>)
 80050be:	f7fc fead 	bl	8001e1c <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	e063      	b.n	8005190 <main+0x398>
 80050c8:	2000c014 	.word	0x2000c014
 80050cc:	2000c588 	.word	0x2000c588
 80050d0:	2000cafc 	.word	0x2000cafc
 80050d4:	2000d070 	.word	0x2000d070
 80050d8:	2000d5e4 	.word	0x2000d5e4
 80050dc:	2000db58 	.word	0x2000db58
 80050e0:	2001b4f0 	.word	0x2001b4f0
 80050e4:	2001b468 	.word	0x2001b468
 80050e8:	2001b488 	.word	0x2001b488
 80050ec:	2001223c 	.word	0x2001223c
 80050f0:	2001b4a0 	.word	0x2001b4a0
 80050f4:	200142f4 	.word	0x200142f4
 80050f8:	2001b4a8 	.word	0x2001b4a8
 80050fc:	2001b4c0 	.word	0x2001b4c0
 8005100:	200163ac 	.word	0x200163ac
 8005104:	20018464 	.word	0x20018464
 8005108:	2001b4d8 	.word	0x2001b4d8
 800510c:	2001b46c 	.word	0x2001b46c
 8005110:	2001b48c 	.word	0x2001b48c
 8005114:	200127b0 	.word	0x200127b0
 8005118:	2001b4a1 	.word	0x2001b4a1
 800511c:	20014868 	.word	0x20014868
 8005120:	2001b4ac 	.word	0x2001b4ac
 8005124:	2001b4c4 	.word	0x2001b4c4
 8005128:	20016920 	.word	0x20016920
 800512c:	20018c64 	.word	0x20018c64
 8005130:	2001b4dc 	.word	0x2001b4dc
 8005134:	2001b4f1 	.word	0x2001b4f1
 8005138:	2001b470 	.word	0x2001b470
 800513c:	2001b490 	.word	0x2001b490
 8005140:	20012d24 	.word	0x20012d24
 8005144:	2001b4a2 	.word	0x2001b4a2
 8005148:	20014ddc 	.word	0x20014ddc
 800514c:	2001b4b0 	.word	0x2001b4b0
 8005150:	2001b4c8 	.word	0x2001b4c8
 8005154:	20016e94 	.word	0x20016e94
 8005158:	20019464 	.word	0x20019464
 800515c:	2001b4e0 	.word	0x2001b4e0
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 8005160:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <main+0x560>)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3308      	adds	r3, #8
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	3304      	adds	r3, #4
 800516c:	ed93 7a00 	vldr	s14, [r3]
 8005170:	4b7a      	ldr	r3, [pc, #488]	; (800535c <main+0x564>)
 8005172:	edd3 7a00 	vldr	s15, [r3]
 8005176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800517a:	4a77      	ldr	r2, [pc, #476]	; (8005358 <main+0x560>)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	3308      	adds	r3, #8
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	3304      	adds	r3, #4
 8005186:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	3301      	adds	r3, #1
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2ba9      	cmp	r3, #169	; 0xa9
 8005194:	d9e4      	bls.n	8005160 <main+0x368>

      #ifdef MONITOR_CHANNEL_5_RIGHT
	  ADC2_IN4_DAC_Update(&DAC1_ADC2_IN4);
      #endif

	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 8005196:	4b72      	ldr	r3, [pc, #456]	; (8005360 <main+0x568>)
 8005198:	edd3 7a00 	vldr	s15, [r3]
 800519c:	eeb0 0a67 	vmov.f32	s0, s15
 80051a0:	4870      	ldr	r0, [pc, #448]	; (8005364 <main+0x56c>)
 80051a2:	f7fe fec1 	bl	8003f28 <ADC2_IN4_TKEO>
 80051a6:	4603      	mov	r3, r0
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b6f      	ldr	r3, [pc, #444]	; (8005368 <main+0x570>)
 80051ac:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 80051ae:	4b6e      	ldr	r3, [pc, #440]	; (8005368 <main+0x570>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d11e      	bne.n	80051f4 <main+0x3fc>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 80051b6:	4b69      	ldr	r3, [pc, #420]	; (800535c <main+0x564>)
 80051b8:	edd3 7a00 	vldr	s15, [r3]
 80051bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051c4:	eeb0 0a67 	vmov.f32	s0, s15
 80051c8:	4868      	ldr	r0, [pc, #416]	; (800536c <main+0x574>)
 80051ca:	f7fd fdd2 	bl	8002d72 <ADC2_IN4_SSC>
 80051ce:	eef0 7a40 	vmov.f32	s15, s0
 80051d2:	4b67      	ldr	r3, [pc, #412]	; (8005370 <main+0x578>)
 80051d4:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN4_autocorr_calc();
 80051d8:	f7fc f97e 	bl	80014d8 <ADC2_IN4_autocorr_calc>
	  AR_4 = ADC2_IN4_autoreg_coeffs();
 80051dc:	f7fc f9b2 	bl	8001544 <ADC2_IN4_autoreg_coeffs>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4a64      	ldr	r2, [pc, #400]	; (8005374 <main+0x57c>)
 80051e4:	6013      	str	r3, [r2, #0]
	  STFT_4 = ADC2_IN4_STFT_Update(&STFT_par_ADC2_IN4, &STFT_ADC2_IN4);
 80051e6:	4964      	ldr	r1, [pc, #400]	; (8005378 <main+0x580>)
 80051e8:	4864      	ldr	r0, [pc, #400]	; (800537c <main+0x584>)
 80051ea:	f7fe f9b1 	bl	8003550 <ADC2_IN4_STFT_Update>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4a63      	ldr	r2, [pc, #396]	; (8005380 <main+0x588>)
 80051f2:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC2_Ready = 0;
 80051f4:	4b63      	ldr	r3, [pc, #396]	; (8005384 <main+0x58c>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
	}

	if (Buffer_ADC3_Ready == 1)
 80051fa:	4b63      	ldr	r3, [pc, #396]	; (8005388 <main+0x590>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	f47f ae54 	bne.w	8004eae <main+0xb6>
	{
	  update_ADC3_IN1_FO_biquad_filter();
 8005206:	f7fd f91d 	bl	8002444 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 800520a:	4860      	ldr	r0, [pc, #384]	; (800538c <main+0x594>)
 800520c:	f7fc feaa 	bl	8001f64 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8005210:	2300      	movs	r3, #0
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	e017      	b.n	8005246 <main+0x44e>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 8005216:	4a5d      	ldr	r2, [pc, #372]	; (800538c <main+0x594>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3308      	adds	r3, #8
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	3304      	adds	r3, #4
 8005222:	ed93 7a00 	vldr	s14, [r3]
 8005226:	4b5a      	ldr	r3, [pc, #360]	; (8005390 <main+0x598>)
 8005228:	edd3 7a00 	vldr	s15, [r3]
 800522c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005230:	4a56      	ldr	r2, [pc, #344]	; (800538c <main+0x594>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3308      	adds	r3, #8
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	3304      	adds	r3, #4
 800523c:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3301      	adds	r3, #1
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2ba9      	cmp	r3, #169	; 0xa9
 800524a:	d9e4      	bls.n	8005216 <main+0x41e>
      #ifdef MONITOR_CHANNEL_3_LEFT
	  ADC3_IN1_DAC_Update(&DAC1_ADC3_IN1);
      #endif


	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 800524c:	4b51      	ldr	r3, [pc, #324]	; (8005394 <main+0x59c>)
 800524e:	edd3 7a00 	vldr	s15, [r3]
 8005252:	eeb0 0a67 	vmov.f32	s0, s15
 8005256:	4850      	ldr	r0, [pc, #320]	; (8005398 <main+0x5a0>)
 8005258:	f7fe ff2a 	bl	80040b0 <ADC3_IN1_TKEO>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	4b4e      	ldr	r3, [pc, #312]	; (800539c <main+0x5a4>)
 8005262:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 8005264:	4b4d      	ldr	r3, [pc, #308]	; (800539c <main+0x5a4>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d11e      	bne.n	80052aa <main+0x4b2>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 800526c:	4b48      	ldr	r3, [pc, #288]	; (8005390 <main+0x598>)
 800526e:	edd3 7a00 	vldr	s15, [r3]
 8005272:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800527a:	eeb0 0a67 	vmov.f32	s0, s15
 800527e:	4848      	ldr	r0, [pc, #288]	; (80053a0 <main+0x5a8>)
 8005280:	f7fd fde6 	bl	8002e50 <ADC3_IN1_SSC>
 8005284:	eef0 7a40 	vmov.f32	s15, s0
 8005288:	4b46      	ldr	r3, [pc, #280]	; (80053a4 <main+0x5ac>)
 800528a:	edc3 7a00 	vstr	s15, [r3]
	  ADC3_IN1_autocorr_calc();
 800528e:	f7fc f9f9 	bl	8001684 <ADC3_IN1_autocorr_calc>
	  AR_5 = ADC3_IN1_autoreg_coeffs();
 8005292:	f7fc fa2d 	bl	80016f0 <ADC3_IN1_autoreg_coeffs>
 8005296:	4603      	mov	r3, r0
 8005298:	4a43      	ldr	r2, [pc, #268]	; (80053a8 <main+0x5b0>)
 800529a:	6013      	str	r3, [r2, #0]
	  STFT_5 = ADC3_IN1_STFT_Update(&STFT_par_ADC3_IN1, &STFT_ADC3_IN1);
 800529c:	4943      	ldr	r1, [pc, #268]	; (80053ac <main+0x5b4>)
 800529e:	4844      	ldr	r0, [pc, #272]	; (80053b0 <main+0x5b8>)
 80052a0:	f7fe fa36 	bl	8003710 <ADC3_IN1_STFT_Update>
 80052a4:	4603      	mov	r3, r0
 80052a6:	4a43      	ldr	r2, [pc, #268]	; (80053b4 <main+0x5bc>)
 80052a8:	6013      	str	r3, [r2, #0]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 80052aa:	f7fd f915 	bl	80024d8 <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 80052ae:	4842      	ldr	r0, [pc, #264]	; (80053b8 <main+0x5c0>)
 80052b0:	f7fc fefc 	bl	80020ac <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	e017      	b.n	80052ea <main+0x4f2>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtracts the stored offset
 80052ba:	4a3f      	ldr	r2, [pc, #252]	; (80053b8 <main+0x5c0>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	3304      	adds	r3, #4
 80052c6:	ed93 7a00 	vldr	s14, [r3]
 80052ca:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <main+0x5c4>)
 80052cc:	edd3 7a00 	vldr	s15, [r3]
 80052d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d4:	4a38      	ldr	r2, [pc, #224]	; (80053b8 <main+0x5c0>)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	3304      	adds	r3, #4
 80052e0:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2ba9      	cmp	r3, #169	; 0xa9
 80052ee:	d9e4      	bls.n	80052ba <main+0x4c2>
      #ifdef MONITOR_CHANNEL_6_RIGHT
	  ADC3_IN2_DAC_Update(&DAC1_ADC3_IN2); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 80052f0:	4b33      	ldr	r3, [pc, #204]	; (80053c0 <main+0x5c8>)
 80052f2:	edd3 7a00 	vldr	s15, [r3]
 80052f6:	eeb0 0a67 	vmov.f32	s0, s15
 80052fa:	4832      	ldr	r0, [pc, #200]	; (80053c4 <main+0x5cc>)
 80052fc:	f7fe ff9c 	bl	8004238 <ADC3_IN2_TKEO>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	4b30      	ldr	r3, [pc, #192]	; (80053c8 <main+0x5d0>)
 8005306:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 8005308:	4b2f      	ldr	r3, [pc, #188]	; (80053c8 <main+0x5d0>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d11e      	bne.n	800534e <main+0x556>
	  {
	  /* Slope sign change */
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 8005310:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <main+0x5c4>)
 8005312:	edd3 7a00 	vldr	s15, [r3]
 8005316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800531a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800531e:	eeb0 0a67 	vmov.f32	s0, s15
 8005322:	482a      	ldr	r0, [pc, #168]	; (80053cc <main+0x5d4>)
 8005324:	f7fd fe03 	bl	8002f2e <ADC3_IN2_SSC>
 8005328:	eef0 7a40 	vmov.f32	s15, s0
 800532c:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <main+0x5d8>)
 800532e:	edc3 7a00 	vstr	s15, [r3]
	  /* Computes the autocorrelation values and the autoregression coefficients and returns the latter */
	  ADC3_IN2_autocorr_calc();
 8005332:	f7fc fa7f 	bl	8001834 <ADC3_IN2_autocorr_calc>
	  AR_6 = ADC3_IN2_autoreg_coeffs();
 8005336:	f7fc fab3 	bl	80018a0 <ADC3_IN2_autoreg_coeffs>
 800533a:	4603      	mov	r3, r0
 800533c:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <main+0x5dc>)
 800533e:	6013      	str	r3, [r2, #0]
	  /* Computes the Short Time Fourier Transform from the moving average buffer */
	  STFT_6 = ADC3_IN2_STFT_Update(&STFT_par_ADC3_IN2, &STFT_ADC3_IN2);
 8005340:	4925      	ldr	r1, [pc, #148]	; (80053d8 <main+0x5e0>)
 8005342:	4826      	ldr	r0, [pc, #152]	; (80053dc <main+0x5e4>)
 8005344:	f7fe fac4 	bl	80038d0 <ADC3_IN2_STFT_Update>
 8005348:	4603      	mov	r3, r0
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <main+0x5e8>)
 800534c:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC3_Ready = 0;
 800534e:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <main+0x590>)
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
	if (Buffer_ADC1_Ready == 1) // Checks if the flag for the channel buffer fills is set for ADC1
 8005354:	e5ab      	b.n	8004eae <main+0xb6>
 8005356:	bf00      	nop
 8005358:	2000d070 	.word	0x2000d070
 800535c:	2001b474 	.word	0x2001b474
 8005360:	2001b494 	.word	0x2001b494
 8005364:	20013298 	.word	0x20013298
 8005368:	2001b4a3 	.word	0x2001b4a3
 800536c:	20015350 	.word	0x20015350
 8005370:	2001b4b4 	.word	0x2001b4b4
 8005374:	2001b4cc 	.word	0x2001b4cc
 8005378:	20017408 	.word	0x20017408
 800537c:	20019c64 	.word	0x20019c64
 8005380:	2001b4e4 	.word	0x2001b4e4
 8005384:	2001b4f1 	.word	0x2001b4f1
 8005388:	2001b4f2 	.word	0x2001b4f2
 800538c:	2000d5e4 	.word	0x2000d5e4
 8005390:	2001b478 	.word	0x2001b478
 8005394:	2001b498 	.word	0x2001b498
 8005398:	2001380c 	.word	0x2001380c
 800539c:	2001b4a4 	.word	0x2001b4a4
 80053a0:	200158c4 	.word	0x200158c4
 80053a4:	2001b4b8 	.word	0x2001b4b8
 80053a8:	2001b4d0 	.word	0x2001b4d0
 80053ac:	2001797c 	.word	0x2001797c
 80053b0:	2001a464 	.word	0x2001a464
 80053b4:	2001b4e8 	.word	0x2001b4e8
 80053b8:	2000db58 	.word	0x2000db58
 80053bc:	2001b47c 	.word	0x2001b47c
 80053c0:	2001b49c 	.word	0x2001b49c
 80053c4:	20013d80 	.word	0x20013d80
 80053c8:	2001b4a5 	.word	0x2001b4a5
 80053cc:	20015e38 	.word	0x20015e38
 80053d0:	2001b4bc 	.word	0x2001b4bc
 80053d4:	2001b4d4 	.word	0x2001b4d4
 80053d8:	20017ef0 	.word	0x20017ef0
 80053dc:	2001ac64 	.word	0x2001ac64
 80053e0:	2001b4ec 	.word	0x2001b4ec

080053e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b094      	sub	sp, #80	; 0x50
 80053e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053ea:	f107 0318 	add.w	r3, r7, #24
 80053ee:	2238      	movs	r2, #56	; 0x38
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f008 fffb 	bl	800e3ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	605a      	str	r2, [r3, #4]
 8005400:	609a      	str	r2, [r3, #8]
 8005402:	60da      	str	r2, [r3, #12]
 8005404:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005406:	f44f 7000 	mov.w	r0, #512	; 0x200
 800540a:	f004 fcc9 	bl	8009da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800540e:	2301      	movs	r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005418:	2302      	movs	r3, #2
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800541c:	2303      	movs	r3, #3
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005420:	2301      	movs	r3, #1
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005424:	2308      	movs	r3, #8
 8005426:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005428:	2302      	movs	r3, #2
 800542a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800542c:	2302      	movs	r3, #2
 800542e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005430:	2302      	movs	r3, #2
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005434:	f107 0318 	add.w	r3, r7, #24
 8005438:	4618      	mov	r0, r3
 800543a:	f004 fd65 	bl	8009f08 <HAL_RCC_OscConfig>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8005444:	f001 f8aa 	bl	800659c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005448:	230f      	movs	r3, #15
 800544a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800544c:	2303      	movs	r3, #3
 800544e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f005 f863 	bl	800a52c <HAL_RCC_ClockConfig>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800546c:	f001 f896 	bl	800659c <Error_Handler>
  }
}
 8005470:	bf00      	nop
 8005472:	3750      	adds	r7, #80	; 0x50
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800547e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	2220      	movs	r2, #32
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f008 ffac 	bl	800e3ee <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005496:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <MX_ADC1_Init+0x108>)
 8005498:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800549c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800549e:	4b38      	ldr	r3, [pc, #224]	; (8005580 <MX_ADC1_Init+0x108>)
 80054a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80054a6:	4b36      	ldr	r3, [pc, #216]	; (8005580 <MX_ADC1_Init+0x108>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80054ac:	4b34      	ldr	r3, [pc, #208]	; (8005580 <MX_ADC1_Init+0x108>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80054b2:	4b33      	ldr	r3, [pc, #204]	; (8005580 <MX_ADC1_Init+0x108>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80054b8:	4b31      	ldr	r3, [pc, #196]	; (8005580 <MX_ADC1_Init+0x108>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80054be:	4b30      	ldr	r3, [pc, #192]	; (8005580 <MX_ADC1_Init+0x108>)
 80054c0:	2204      	movs	r2, #4
 80054c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80054c4:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <MX_ADC1_Init+0x108>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80054ca:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <MX_ADC1_Init+0x108>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80054d0:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <MX_ADC1_Init+0x108>)
 80054d2:	2202      	movs	r2, #2
 80054d4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <MX_ADC1_Init+0x108>)
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <MX_ADC1_Init+0x108>)
 80054e0:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80054e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <MX_ADC1_Init+0x108>)
 80054e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80054ee:	4b24      	ldr	r3, [pc, #144]	; (8005580 <MX_ADC1_Init+0x108>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <MX_ADC1_Init+0x108>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <MX_ADC1_Init+0x108>)
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005504:	481e      	ldr	r0, [pc, #120]	; (8005580 <MX_ADC1_Init+0x108>)
 8005506:	f002 fa79 	bl	80079fc <HAL_ADC_Init>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8005510:	f001 f844 	bl	800659c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551c:	4619      	mov	r1, r3
 800551e:	4818      	ldr	r0, [pc, #96]	; (8005580 <MX_ADC1_Init+0x108>)
 8005520:	f003 fa6a 	bl	80089f8 <HAL_ADCEx_MultiModeConfigChannel>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800552a:	f001 f837 	bl	800659c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <MX_ADC1_Init+0x10c>)
 8005530:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005532:	2306      	movs	r3, #6
 8005534:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8005536:	2305      	movs	r3, #5
 8005538:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800553a:	237f      	movs	r3, #127	; 0x7f
 800553c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800553e:	2304      	movs	r3, #4
 8005540:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	4619      	mov	r1, r3
 800554a:	480d      	ldr	r0, [pc, #52]	; (8005580 <MX_ADC1_Init+0x108>)
 800554c:	f002 fcd8 	bl	8007f00 <HAL_ADC_ConfigChannel>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8005556:	f001 f821 	bl	800659c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <MX_ADC1_Init+0x110>)
 800555c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800555e:	230c      	movs	r3, #12
 8005560:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005562:	1d3b      	adds	r3, r7, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4806      	ldr	r0, [pc, #24]	; (8005580 <MX_ADC1_Init+0x108>)
 8005568:	f002 fcca 	bl	8007f00 <HAL_ADC_ConfigChannel>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8005572:	f001 f813 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005576:	bf00      	nop
 8005578:	3730      	adds	r7, #48	; 0x30
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	2000b6bc 	.word	0x2000b6bc
 8005584:	04300002 	.word	0x04300002
 8005588:	08600004 	.word	0x08600004

0800558c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005592:	463b      	mov	r3, r7
 8005594:	2220      	movs	r2, #32
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f008 ff28 	bl	800e3ee <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800559e:	4b33      	ldr	r3, [pc, #204]	; (800566c <MX_ADC2_Init+0xe0>)
 80055a0:	4a33      	ldr	r2, [pc, #204]	; (8005670 <MX_ADC2_Init+0xe4>)
 80055a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80055a4:	4b31      	ldr	r3, [pc, #196]	; (800566c <MX_ADC2_Init+0xe0>)
 80055a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80055ac:	4b2f      	ldr	r3, [pc, #188]	; (800566c <MX_ADC2_Init+0xe0>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80055b2:	4b2e      	ldr	r3, [pc, #184]	; (800566c <MX_ADC2_Init+0xe0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80055b8:	4b2c      	ldr	r3, [pc, #176]	; (800566c <MX_ADC2_Init+0xe0>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80055be:	4b2b      	ldr	r3, [pc, #172]	; (800566c <MX_ADC2_Init+0xe0>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055c4:	4b29      	ldr	r3, [pc, #164]	; (800566c <MX_ADC2_Init+0xe0>)
 80055c6:	2204      	movs	r2, #4
 80055c8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80055ca:	4b28      	ldr	r3, [pc, #160]	; (800566c <MX_ADC2_Init+0xe0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80055d0:	4b26      	ldr	r3, [pc, #152]	; (800566c <MX_ADC2_Init+0xe0>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80055d6:	4b25      	ldr	r3, [pc, #148]	; (800566c <MX_ADC2_Init+0xe0>)
 80055d8:	2202      	movs	r2, #2
 80055da:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80055dc:	4b23      	ldr	r3, [pc, #140]	; (800566c <MX_ADC2_Init+0xe0>)
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 80055e4:	4b21      	ldr	r3, [pc, #132]	; (800566c <MX_ADC2_Init+0xe0>)
 80055e6:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80055ec:	4b1f      	ldr	r3, [pc, #124]	; (800566c <MX_ADC2_Init+0xe0>)
 80055ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80055f4:	4b1d      	ldr	r3, [pc, #116]	; (800566c <MX_ADC2_Init+0xe0>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <MX_ADC2_Init+0xe0>)
 80055fe:	2200      	movs	r2, #0
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8005602:	4b1a      	ldr	r3, [pc, #104]	; (800566c <MX_ADC2_Init+0xe0>)
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800560a:	4818      	ldr	r0, [pc, #96]	; (800566c <MX_ADC2_Init+0xe0>)
 800560c:	f002 f9f6 	bl	80079fc <HAL_ADC_Init>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8005616:	f000 ffc1 	bl	800659c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800561a:	4b16      	ldr	r3, [pc, #88]	; (8005674 <MX_ADC2_Init+0xe8>)
 800561c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800561e:	2306      	movs	r3, #6
 8005620:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8005622:	2305      	movs	r3, #5
 8005624:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005626:	237f      	movs	r3, #127	; 0x7f
 8005628:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800562a:	2304      	movs	r3, #4
 800562c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005632:	463b      	mov	r3, r7
 8005634:	4619      	mov	r1, r3
 8005636:	480d      	ldr	r0, [pc, #52]	; (800566c <MX_ADC2_Init+0xe0>)
 8005638:	f002 fc62 	bl	8007f00 <HAL_ADC_ConfigChannel>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8005642:	f000 ffab 	bl	800659c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <MX_ADC2_Init+0xec>)
 8005648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800564a:	230c      	movs	r3, #12
 800564c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800564e:	463b      	mov	r3, r7
 8005650:	4619      	mov	r1, r3
 8005652:	4806      	ldr	r0, [pc, #24]	; (800566c <MX_ADC2_Init+0xe0>)
 8005654:	f002 fc54 	bl	8007f00 <HAL_ADC_ConfigChannel>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800565e:	f000 ff9d 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005662:	bf00      	nop
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	2000b728 	.word	0x2000b728
 8005670:	50000100 	.word	0x50000100
 8005674:	0c900008 	.word	0x0c900008
 8005678:	10c00010 	.word	0x10c00010

0800567c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005682:	463b      	mov	r3, r7
 8005684:	2220      	movs	r2, #32
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f008 feb0 	bl	800e3ee <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800568e:	4b33      	ldr	r3, [pc, #204]	; (800575c <MX_ADC3_Init+0xe0>)
 8005690:	4a33      	ldr	r2, [pc, #204]	; (8005760 <MX_ADC3_Init+0xe4>)
 8005692:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005694:	4b31      	ldr	r3, [pc, #196]	; (800575c <MX_ADC3_Init+0xe0>)
 8005696:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800569a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800569c:	4b2f      	ldr	r3, [pc, #188]	; (800575c <MX_ADC3_Init+0xe0>)
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80056a2:	4b2e      	ldr	r3, [pc, #184]	; (800575c <MX_ADC3_Init+0xe0>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80056a8:	4b2c      	ldr	r3, [pc, #176]	; (800575c <MX_ADC3_Init+0xe0>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80056ae:	4b2b      	ldr	r3, [pc, #172]	; (800575c <MX_ADC3_Init+0xe0>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80056b4:	4b29      	ldr	r3, [pc, #164]	; (800575c <MX_ADC3_Init+0xe0>)
 80056b6:	2204      	movs	r2, #4
 80056b8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80056ba:	4b28      	ldr	r3, [pc, #160]	; (800575c <MX_ADC3_Init+0xe0>)
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80056c0:	4b26      	ldr	r3, [pc, #152]	; (800575c <MX_ADC3_Init+0xe0>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 80056c6:	4b25      	ldr	r3, [pc, #148]	; (800575c <MX_ADC3_Init+0xe0>)
 80056c8:	2202      	movs	r2, #2
 80056ca:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80056cc:	4b23      	ldr	r3, [pc, #140]	; (800575c <MX_ADC3_Init+0xe0>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 80056d4:	4b21      	ldr	r3, [pc, #132]	; (800575c <MX_ADC3_Init+0xe0>)
 80056d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80056dc:	4b1f      	ldr	r3, [pc, #124]	; (800575c <MX_ADC3_Init+0xe0>)
 80056de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80056e4:	4b1d      	ldr	r3, [pc, #116]	; (800575c <MX_ADC3_Init+0xe0>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	; (800575c <MX_ADC3_Init+0xe0>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80056f2:	4b1a      	ldr	r3, [pc, #104]	; (800575c <MX_ADC3_Init+0xe0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80056fa:	4818      	ldr	r0, [pc, #96]	; (800575c <MX_ADC3_Init+0xe0>)
 80056fc:	f002 f97e 	bl	80079fc <HAL_ADC_Init>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8005706:	f000 ff49 	bl	800659c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800570a:	4b16      	ldr	r3, [pc, #88]	; (8005764 <MX_ADC3_Init+0xe8>)
 800570c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800570e:	2306      	movs	r3, #6
 8005710:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8005712:	2305      	movs	r3, #5
 8005714:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005716:	237f      	movs	r3, #127	; 0x7f
 8005718:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800571a:	2304      	movs	r3, #4
 800571c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005722:	463b      	mov	r3, r7
 8005724:	4619      	mov	r1, r3
 8005726:	480d      	ldr	r0, [pc, #52]	; (800575c <MX_ADC3_Init+0xe0>)
 8005728:	f002 fbea 	bl	8007f00 <HAL_ADC_ConfigChannel>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8005732:	f000 ff33 	bl	800659c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <MX_ADC3_Init+0xec>)
 8005738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800573a:	230c      	movs	r3, #12
 800573c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800573e:	463b      	mov	r3, r7
 8005740:	4619      	mov	r1, r3
 8005742:	4806      	ldr	r0, [pc, #24]	; (800575c <MX_ADC3_Init+0xe0>)
 8005744:	f002 fbdc 	bl	8007f00 <HAL_ADC_ConfigChannel>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 800574e:	f000 ff25 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8005752:	bf00      	nop
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2000b794 	.word	0x2000b794
 8005760:	50000400 	.word	0x50000400
 8005764:	04300002 	.word	0x04300002
 8005768:	08600004 	.word	0x08600004

0800576c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005772:	463b      	mov	r3, r7
 8005774:	2230      	movs	r2, #48	; 0x30
 8005776:	2100      	movs	r1, #0
 8005778:	4618      	mov	r0, r3
 800577a:	f008 fe38 	bl	800e3ee <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800577e:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <MX_DAC1_Init+0x84>)
 8005780:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <MX_DAC1_Init+0x88>)
 8005782:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005784:	481a      	ldr	r0, [pc, #104]	; (80057f0 <MX_DAC1_Init+0x84>)
 8005786:	f003 fb2e 	bl	8008de6 <HAL_DAC_Init>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005790:	f000 ff04 	bl	800659c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8005794:	2302      	movs	r3, #2
 8005796:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005798:	2300      	movs	r3, #0
 800579a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80057a4:	231e      	movs	r3, #30
 80057a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80057b0:	2301      	movs	r3, #1
 80057b2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80057b8:	463b      	mov	r3, r7
 80057ba:	2200      	movs	r2, #0
 80057bc:	4619      	mov	r1, r3
 80057be:	480c      	ldr	r0, [pc, #48]	; (80057f0 <MX_DAC1_Init+0x84>)
 80057c0:	f003 fb34 	bl	8008e2c <HAL_DAC_ConfigChannel>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80057ca:	f000 fee7 	bl	800659c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80057ce:	230a      	movs	r3, #10
 80057d0:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80057d2:	463b      	mov	r3, r7
 80057d4:	2210      	movs	r2, #16
 80057d6:	4619      	mov	r1, r3
 80057d8:	4805      	ldr	r0, [pc, #20]	; (80057f0 <MX_DAC1_Init+0x84>)
 80057da:	f003 fb27 	bl	8008e2c <HAL_DAC_ConfigChannel>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80057e4:	f000 feda 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80057e8:	bf00      	nop
 80057ea:	3730      	adds	r7, #48	; 0x30
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	2000b920 	.word	0x2000b920
 80057f4:	50000800 	.word	0x50000800

080057f8 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <MX_FMAC_Init+0x20>)
 80057fe:	4a07      	ldr	r2, [pc, #28]	; (800581c <MX_FMAC_Init+0x24>)
 8005800:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8005802:	4805      	ldr	r0, [pc, #20]	; (8005818 <MX_FMAC_Init+0x20>)
 8005804:	f003 ff3c 	bl	8009680 <HAL_FMAC_Init>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800580e:	f000 fec5 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	2000b9f4 	.word	0x2000b9f4
 800581c:	40021400 	.word	0x40021400

08005820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <MX_I2C1_Init+0x74>)
 8005826:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <MX_I2C1_Init+0x78>)
 8005828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800582a:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <MX_I2C1_Init+0x74>)
 800582c:	4a1b      	ldr	r2, [pc, #108]	; (800589c <MX_I2C1_Init+0x7c>)
 800582e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <MX_I2C1_Init+0x74>)
 8005832:	2200      	movs	r2, #0
 8005834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005836:	4b17      	ldr	r3, [pc, #92]	; (8005894 <MX_I2C1_Init+0x74>)
 8005838:	2201      	movs	r2, #1
 800583a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800583c:	4b15      	ldr	r3, [pc, #84]	; (8005894 <MX_I2C1_Init+0x74>)
 800583e:	2200      	movs	r2, #0
 8005840:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <MX_I2C1_Init+0x74>)
 8005844:	2200      	movs	r2, #0
 8005846:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005848:	4b12      	ldr	r3, [pc, #72]	; (8005894 <MX_I2C1_Init+0x74>)
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800584e:	4b11      	ldr	r3, [pc, #68]	; (8005894 <MX_I2C1_Init+0x74>)
 8005850:	2200      	movs	r2, #0
 8005852:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <MX_I2C1_Init+0x74>)
 8005856:	2200      	movs	r2, #0
 8005858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800585a:	480e      	ldr	r0, [pc, #56]	; (8005894 <MX_I2C1_Init+0x74>)
 800585c:	f004 f96e 	bl	8009b3c <HAL_I2C_Init>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005866:	f000 fe99 	bl	800659c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800586a:	2100      	movs	r1, #0
 800586c:	4809      	ldr	r0, [pc, #36]	; (8005894 <MX_I2C1_Init+0x74>)
 800586e:	f004 fa00 	bl	8009c72 <HAL_I2CEx_ConfigAnalogFilter>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005878:	f000 fe90 	bl	800659c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800587c:	2100      	movs	r1, #0
 800587e:	4805      	ldr	r0, [pc, #20]	; (8005894 <MX_I2C1_Init+0x74>)
 8005880:	f004 fa42 	bl	8009d08 <HAL_I2CEx_ConfigDigitalFilter>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800588a:	f000 fe87 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000ba2c 	.word	0x2000ba2c
 8005898:	40005400 	.word	0x40005400
 800589c:	10707dbc 	.word	0x10707dbc

080058a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <MX_I2C2_Init+0x74>)
 80058a6:	4a1c      	ldr	r2, [pc, #112]	; (8005918 <MX_I2C2_Init+0x78>)
 80058a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80058aa:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <MX_I2C2_Init+0x74>)
 80058ac:	4a1b      	ldr	r2, [pc, #108]	; (800591c <MX_I2C2_Init+0x7c>)
 80058ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80058b0:	4b18      	ldr	r3, [pc, #96]	; (8005914 <MX_I2C2_Init+0x74>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058b6:	4b17      	ldr	r3, [pc, #92]	; (8005914 <MX_I2C2_Init+0x74>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058bc:	4b15      	ldr	r3, [pc, #84]	; (8005914 <MX_I2C2_Init+0x74>)
 80058be:	2200      	movs	r2, #0
 80058c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <MX_I2C2_Init+0x74>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80058c8:	4b12      	ldr	r3, [pc, #72]	; (8005914 <MX_I2C2_Init+0x74>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058ce:	4b11      	ldr	r3, [pc, #68]	; (8005914 <MX_I2C2_Init+0x74>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <MX_I2C2_Init+0x74>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80058da:	480e      	ldr	r0, [pc, #56]	; (8005914 <MX_I2C2_Init+0x74>)
 80058dc:	f004 f92e 	bl	8009b3c <HAL_I2C_Init>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80058e6:	f000 fe59 	bl	800659c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80058ea:	2100      	movs	r1, #0
 80058ec:	4809      	ldr	r0, [pc, #36]	; (8005914 <MX_I2C2_Init+0x74>)
 80058ee:	f004 f9c0 	bl	8009c72 <HAL_I2CEx_ConfigAnalogFilter>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80058f8:	f000 fe50 	bl	800659c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80058fc:	2100      	movs	r1, #0
 80058fe:	4805      	ldr	r0, [pc, #20]	; (8005914 <MX_I2C2_Init+0x74>)
 8005900:	f004 fa02 	bl	8009d08 <HAL_I2CEx_ConfigDigitalFilter>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800590a:	f000 fe47 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800590e:	bf00      	nop
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	2000ba80 	.word	0x2000ba80
 8005918:	40005800 	.word	0x40005800
 800591c:	10707dbc 	.word	0x10707dbc

08005920 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <MX_I2C3_Init+0x74>)
 8005926:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <MX_I2C3_Init+0x78>)
 8005928:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <MX_I2C3_Init+0x74>)
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <MX_I2C3_Init+0x7c>)
 800592e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8005930:	4b18      	ldr	r3, [pc, #96]	; (8005994 <MX_I2C3_Init+0x74>)
 8005932:	2200      	movs	r2, #0
 8005934:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005936:	4b17      	ldr	r3, [pc, #92]	; (8005994 <MX_I2C3_Init+0x74>)
 8005938:	2201      	movs	r2, #1
 800593a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800593c:	4b15      	ldr	r3, [pc, #84]	; (8005994 <MX_I2C3_Init+0x74>)
 800593e:	2200      	movs	r2, #0
 8005940:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8005942:	4b14      	ldr	r3, [pc, #80]	; (8005994 <MX_I2C3_Init+0x74>)
 8005944:	2200      	movs	r2, #0
 8005946:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <MX_I2C3_Init+0x74>)
 800594a:	2200      	movs	r2, #0
 800594c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <MX_I2C3_Init+0x74>)
 8005950:	2200      	movs	r2, #0
 8005952:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <MX_I2C3_Init+0x74>)
 8005956:	2200      	movs	r2, #0
 8005958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800595a:	480e      	ldr	r0, [pc, #56]	; (8005994 <MX_I2C3_Init+0x74>)
 800595c:	f004 f8ee 	bl	8009b3c <HAL_I2C_Init>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8005966:	f000 fe19 	bl	800659c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800596a:	2100      	movs	r1, #0
 800596c:	4809      	ldr	r0, [pc, #36]	; (8005994 <MX_I2C3_Init+0x74>)
 800596e:	f004 f980 	bl	8009c72 <HAL_I2CEx_ConfigAnalogFilter>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8005978:	f000 fe10 	bl	800659c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800597c:	2100      	movs	r1, #0
 800597e:	4805      	ldr	r0, [pc, #20]	; (8005994 <MX_I2C3_Init+0x74>)
 8005980:	f004 f9c2 	bl	8009d08 <HAL_I2CEx_ConfigDigitalFilter>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800598a:	f000 fe07 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000bad4 	.word	0x2000bad4
 8005998:	40007800 	.word	0x40007800
 800599c:	10707dbc 	.word	0x10707dbc

080059a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80059b0:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <MX_TIM6_Init+0x64>)
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <MX_TIM6_Init+0x68>)
 80059b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <MX_TIM6_Init+0x64>)
 80059b8:	2207      	movs	r2, #7
 80059ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059bc:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <MX_TIM6_Init+0x64>)
 80059be:	2200      	movs	r2, #0
 80059c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <MX_TIM6_Init+0x64>)
 80059c4:	2207      	movs	r2, #7
 80059c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059c8:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <MX_TIM6_Init+0x64>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80059ce:	480d      	ldr	r0, [pc, #52]	; (8005a04 <MX_TIM6_Init+0x64>)
 80059d0:	f005 fa00 	bl	800add4 <HAL_TIM_Base_Init>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80059da:	f000 fddf 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80059de:	2320      	movs	r3, #32
 80059e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4806      	ldr	r0, [pc, #24]	; (8005a04 <MX_TIM6_Init+0x64>)
 80059ec:	f005 fc84 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80059f6:	f000 fdd1 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	2000bc48 	.word	0x2000bc48
 8005a08:	40001000 	.word	0x40001000

08005a0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a12:	1d3b      	adds	r3, r7, #4
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005a1c:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <MX_TIM7_Init+0x64>)
 8005a1e:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <MX_TIM7_Init+0x68>)
 8005a20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <MX_TIM7_Init+0x64>)
 8005a24:	2207      	movs	r2, #7
 8005a26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a28:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <MX_TIM7_Init+0x64>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8005a2e:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <MX_TIM7_Init+0x64>)
 8005a30:	2207      	movs	r2, #7
 8005a32:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <MX_TIM7_Init+0x64>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005a3a:	480d      	ldr	r0, [pc, #52]	; (8005a70 <MX_TIM7_Init+0x64>)
 8005a3c:	f005 f9ca 	bl	800add4 <HAL_TIM_Base_Init>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005a46:	f000 fda9 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005a4a:	2320      	movs	r3, #32
 8005a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4806      	ldr	r0, [pc, #24]	; (8005a70 <MX_TIM7_Init+0x64>)
 8005a58:	f005 fc4e 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005a62:	f000 fd9b 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000bc94 	.word	0x2000bc94
 8005a74:	40001400 	.word	0x40001400

08005a78 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005a7e:	f107 030c 	add.w	r3, r7, #12
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	609a      	str	r2, [r3, #8]
 8005a8a:	60da      	str	r2, [r3, #12]
 8005a8c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a8e:	463b      	mov	r3, r7
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005a98:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005a9a:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <MX_TIM20_Init+0xa4>)
 8005a9c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aa4:	4b1c      	ldr	r3, [pc, #112]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005aac:	2207      	movs	r2, #7
 8005aae:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005ac2:	4815      	ldr	r0, [pc, #84]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005ac4:	f005 f986 	bl	800add4 <HAL_TIM_Base_Init>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8005ace:	f000 fd65 	bl	800659c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4619      	mov	r1, r3
 8005ae0:	480d      	ldr	r0, [pc, #52]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005ae2:	f005 f9ce 	bl	800ae82 <HAL_TIM_SlaveConfigSynchro>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8005aec:	f000 fd56 	bl	800659c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005af0:	2320      	movs	r3, #32
 8005af2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005af4:	2300      	movs	r3, #0
 8005af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005afc:	463b      	mov	r3, r7
 8005afe:	4619      	mov	r1, r3
 8005b00:	4805      	ldr	r0, [pc, #20]	; (8005b18 <MX_TIM20_Init+0xa0>)
 8005b02:	f005 fbf9 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005b0c:	f000 fd46 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8005b10:	bf00      	nop
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	2000bce0 	.word	0x2000bce0
 8005b1c:	40015000 	.word	0x40015000

08005b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b24:	4b22      	ldr	r3, [pc, #136]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b26:	4a23      	ldr	r2, [pc, #140]	; (8005bb4 <MX_USART1_UART_Init+0x94>)
 8005b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b2a:	4b21      	ldr	r3, [pc, #132]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b32:	4b1f      	ldr	r3, [pc, #124]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b3e:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b46:	220c      	movs	r2, #12
 8005b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b4a:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b50:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b56:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b5c:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b62:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b68:	4811      	ldr	r0, [pc, #68]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b6a:	f005 fc53 	bl	800b414 <HAL_UART_Init>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005b74:	f000 fd12 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b78:	2100      	movs	r1, #0
 8005b7a:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b7c:	f006 f9ee 	bl	800bf5c <HAL_UARTEx_SetTxFifoThreshold>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005b86:	f000 fd09 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4808      	ldr	r0, [pc, #32]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b8e:	f006 fa23 	bl	800bfd8 <HAL_UARTEx_SetRxFifoThreshold>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005b98:	f000 fd00 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005b9c:	4804      	ldr	r0, [pc, #16]	; (8005bb0 <MX_USART1_UART_Init+0x90>)
 8005b9e:	f006 f9a4 	bl	800beea <HAL_UARTEx_DisableFifoMode>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005ba8:	f000 fcf8 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	2000bd2c 	.word	0x2000bd2c
 8005bb4:	40013800 	.word	0x40013800

08005bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005bbc:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bbe:	4a23      	ldr	r2, [pc, #140]	; (8005c4c <MX_USART2_UART_Init+0x94>)
 8005bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005bc2:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005bca:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005bd6:	4b1c      	ldr	r3, [pc, #112]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bde:	220c      	movs	r2, #12
 8005be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005be8:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bee:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bf4:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c00:	4811      	ldr	r0, [pc, #68]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005c02:	f005 fc07 	bl	800b414 <HAL_UART_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005c0c:	f000 fcc6 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c10:	2100      	movs	r1, #0
 8005c12:	480d      	ldr	r0, [pc, #52]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005c14:	f006 f9a2 	bl	800bf5c <HAL_UARTEx_SetTxFifoThreshold>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005c1e:	f000 fcbd 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c22:	2100      	movs	r1, #0
 8005c24:	4808      	ldr	r0, [pc, #32]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005c26:	f006 f9d7 	bl	800bfd8 <HAL_UARTEx_SetRxFifoThreshold>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005c30:	f000 fcb4 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005c34:	4804      	ldr	r0, [pc, #16]	; (8005c48 <MX_USART2_UART_Init+0x90>)
 8005c36:	f006 f958 	bl	800beea <HAL_UARTEx_DisableFifoMode>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005c40:	f000 fcac 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	2000bdc0 	.word	0x2000bdc0
 8005c4c:	40004400 	.word	0x40004400

08005c50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005c54:	4b22      	ldr	r3, [pc, #136]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c56:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <MX_USART3_UART_Init+0x94>)
 8005c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005c5a:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005c62:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005c6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005c74:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c76:	220c      	movs	r2, #12
 8005c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c7a:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c86:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c8c:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c92:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005c98:	4811      	ldr	r0, [pc, #68]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005c9a:	f005 fbbb 	bl	800b414 <HAL_UART_Init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005ca4:	f000 fc7a 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ca8:	2100      	movs	r1, #0
 8005caa:	480d      	ldr	r0, [pc, #52]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005cac:	f006 f956 	bl	800bf5c <HAL_UARTEx_SetTxFifoThreshold>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005cb6:	f000 fc71 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4808      	ldr	r0, [pc, #32]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005cbe:	f006 f98b 	bl	800bfd8 <HAL_UARTEx_SetRxFifoThreshold>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005cc8:	f000 fc68 	bl	800659c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005ccc:	4804      	ldr	r0, [pc, #16]	; (8005ce0 <MX_USART3_UART_Init+0x90>)
 8005cce:	f006 f90c 	bl	800beea <HAL_UARTEx_DisableFifoMode>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005cd8:	f000 fc60 	bl	800659c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005cdc:	bf00      	nop
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	2000be54 	.word	0x2000be54
 8005ce4:	40004800 	.word	0x40004800

08005ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005cee:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <MX_DMA_Init+0x108>)
 8005cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf2:	4a3f      	ldr	r2, [pc, #252]	; (8005df0 <MX_DMA_Init+0x108>)
 8005cf4:	f043 0304 	orr.w	r3, r3, #4
 8005cf8:	6493      	str	r3, [r2, #72]	; 0x48
 8005cfa:	4b3d      	ldr	r3, [pc, #244]	; (8005df0 <MX_DMA_Init+0x108>)
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d06:	4b3a      	ldr	r3, [pc, #232]	; (8005df0 <MX_DMA_Init+0x108>)
 8005d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0a:	4a39      	ldr	r2, [pc, #228]	; (8005df0 <MX_DMA_Init+0x108>)
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	6493      	str	r3, [r2, #72]	; 0x48
 8005d12:	4b37      	ldr	r3, [pc, #220]	; (8005df0 <MX_DMA_Init+0x108>)
 8005d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	60bb      	str	r3, [r7, #8]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005d1e:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <MX_DMA_Init+0x108>)
 8005d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d22:	4a33      	ldr	r2, [pc, #204]	; (8005df0 <MX_DMA_Init+0x108>)
 8005d24:	f043 0302 	orr.w	r3, r3, #2
 8005d28:	6493      	str	r3, [r2, #72]	; 0x48
 8005d2a:	4b31      	ldr	r3, [pc, #196]	; (8005df0 <MX_DMA_Init+0x108>)
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	607b      	str	r3, [r7, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005d36:	2200      	movs	r2, #0
 8005d38:	2100      	movs	r1, #0
 8005d3a:	200b      	movs	r0, #11
 8005d3c:	f003 f81f 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005d40:	200b      	movs	r0, #11
 8005d42:	f003 f836 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005d46:	2200      	movs	r2, #0
 8005d48:	2100      	movs	r1, #0
 8005d4a:	200c      	movs	r0, #12
 8005d4c:	f003 f817 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005d50:	200c      	movs	r0, #12
 8005d52:	f003 f82e 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005d56:	2200      	movs	r2, #0
 8005d58:	2100      	movs	r1, #0
 8005d5a:	200d      	movs	r0, #13
 8005d5c:	f003 f80f 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005d60:	200d      	movs	r0, #13
 8005d62:	f003 f826 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005d66:	2200      	movs	r2, #0
 8005d68:	2100      	movs	r1, #0
 8005d6a:	200e      	movs	r0, #14
 8005d6c:	f003 f807 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005d70:	200e      	movs	r0, #14
 8005d72:	f003 f81e 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005d76:	2200      	movs	r2, #0
 8005d78:	2100      	movs	r1, #0
 8005d7a:	200f      	movs	r0, #15
 8005d7c:	f002 ffff 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005d80:	200f      	movs	r0, #15
 8005d82:	f003 f816 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	2010      	movs	r0, #16
 8005d8c:	f002 fff7 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005d90:	2010      	movs	r0, #16
 8005d92:	f003 f80e 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8005d96:	2200      	movs	r2, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	2038      	movs	r0, #56	; 0x38
 8005d9c:	f002 ffef 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005da0:	2038      	movs	r0, #56	; 0x38
 8005da2:	f003 f806 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	203b      	movs	r0, #59	; 0x3b
 8005dac:	f002 ffe7 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8005db0:	203b      	movs	r0, #59	; 0x3b
 8005db2:	f002 fffe 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8005db6:	2200      	movs	r2, #0
 8005db8:	2100      	movs	r1, #0
 8005dba:	203c      	movs	r0, #60	; 0x3c
 8005dbc:	f002 ffdf 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8005dc0:	203c      	movs	r0, #60	; 0x3c
 8005dc2:	f002 fff6 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2100      	movs	r1, #0
 8005dca:	2061      	movs	r0, #97	; 0x61
 8005dcc:	f002 ffd7 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8005dd0:	2061      	movs	r0, #97	; 0x61
 8005dd2:	f002 ffee 	bl	8008db2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2100      	movs	r1, #0
 8005dda:	2062      	movs	r0, #98	; 0x62
 8005ddc:	f002 ffcf 	bl	8008d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8005de0:	2062      	movs	r0, #98	; 0x62
 8005de2:	f002 ffe6 	bl	8008db2 <HAL_NVIC_EnableIRQ>

}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40021000 	.word	0x40021000

08005df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08c      	sub	sp, #48	; 0x30
 8005df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dfa:	f107 031c 	add.w	r3, r7, #28
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	609a      	str	r2, [r3, #8]
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e0a:	4b36      	ldr	r3, [pc, #216]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	4a35      	ldr	r2, [pc, #212]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e10:	f043 0310 	orr.w	r3, r3, #16
 8005e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e16:	4b33      	ldr	r3, [pc, #204]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e22:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e26:	4a2f      	ldr	r2, [pc, #188]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e28:	f043 0320 	orr.w	r3, r3, #32
 8005e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e52:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e56:	4a23      	ldr	r2, [pc, #140]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e58:	f043 0304 	orr.w	r3, r3, #4
 8005e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e5e:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e76:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e82:	4b18      	ldr	r3, [pc, #96]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e88:	f043 0308 	orr.w	r3, r3, #8
 8005e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e8e:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <MX_GPIO_Init+0xf0>)
 8005e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2120      	movs	r1, #32
 8005e9e:	4812      	ldr	r0, [pc, #72]	; (8005ee8 <MX_GPIO_Init+0xf4>)
 8005ea0:	f003 fe1c 	bl	8009adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_bgn_aqstn_Pin */
  GPIO_InitStruct.Pin = GPIO_bgn_aqstn_Pin;
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ea8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO_bgn_aqstn_GPIO_Port, &GPIO_InitStruct);
 8005eb2:	f107 031c 	add.w	r3, r7, #28
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	480b      	ldr	r0, [pc, #44]	; (8005ee8 <MX_GPIO_Init+0xf4>)
 8005eba:	f003 fc8d 	bl	80097d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ece:	f107 031c 	add.w	r3, r7, #28
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4804      	ldr	r0, [pc, #16]	; (8005ee8 <MX_GPIO_Init+0xf4>)
 8005ed6:	f003 fc7f 	bl	80097d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005eda:	bf00      	nop
 8005edc:	3730      	adds	r7, #48	; 0x30
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	48001000 	.word	0x48001000

08005eec <EXT12_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXT12_IRQHandler(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08c      	sub	sp, #48	; 0x30
 8005ef0:	af00      	add	r7, sp, #0

	  /* ADC1 is started using timer 6 triggered conversions */
	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
      ADC_status = HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005ef2:	4bba      	ldr	r3, [pc, #744]	; (80061dc <EXT12_IRQHandler+0x2f0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005efa:	4619      	mov	r1, r3
 8005efc:	48b8      	ldr	r0, [pc, #736]	; (80061e0 <EXT12_IRQHandler+0x2f4>)
 8005efe:	f001 ff2b 	bl	8007d58 <HAL_ADC_Start_DMA>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	4bb7      	ldr	r3, [pc, #732]	; (80061e4 <EXT12_IRQHandler+0x2f8>)
 8005f08:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc1);
 8005f0a:	48b5      	ldr	r0, [pc, #724]	; (80061e0 <EXT12_IRQHandler+0x2f4>)
 8005f0c:	f000 fa16 	bl	800633c <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8005f10:	48b3      	ldr	r0, [pc, #716]	; (80061e0 <EXT12_IRQHandler+0x2f4>)
 8005f12:	f000 faa1 	bl	8006458 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
	  ADC_status = HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005f16:	4bb4      	ldr	r3, [pc, #720]	; (80061e8 <EXT12_IRQHandler+0x2fc>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	48b2      	ldr	r0, [pc, #712]	; (80061ec <EXT12_IRQHandler+0x300>)
 8005f22:	f001 ff19 	bl	8007d58 <HAL_ADC_Start_DMA>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4bae      	ldr	r3, [pc, #696]	; (80061e4 <EXT12_IRQHandler+0x2f8>)
 8005f2c:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc2);
 8005f2e:	48af      	ldr	r0, [pc, #700]	; (80061ec <EXT12_IRQHandler+0x300>)
 8005f30:	f000 fa04 	bl	800633c <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc2);
 8005f34:	48ad      	ldr	r0, [pc, #692]	; (80061ec <EXT12_IRQHandler+0x300>)
 8005f36:	f000 fa8f 	bl	8006458 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
	  ADC_status = HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005f3a:	4bad      	ldr	r3, [pc, #692]	; (80061f0 <EXT12_IRQHandler+0x304>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005f42:	4619      	mov	r1, r3
 8005f44:	48ab      	ldr	r0, [pc, #684]	; (80061f4 <EXT12_IRQHandler+0x308>)
 8005f46:	f001 ff07 	bl	8007d58 <HAL_ADC_Start_DMA>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4ba5      	ldr	r3, [pc, #660]	; (80061e4 <EXT12_IRQHandler+0x2f8>)
 8005f50:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc3);
 8005f52:	48a8      	ldr	r0, [pc, #672]	; (80061f4 <EXT12_IRQHandler+0x308>)
 8005f54:	f000 f9f2 	bl	800633c <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc3);
 8005f58:	48a6      	ldr	r0, [pc, #664]	; (80061f4 <EXT12_IRQHandler+0x308>)
 8005f5a:	f000 fa7d 	bl	8006458 <HAL_ADC_ConvCpltCallback>

	/* Calculating the offset value and standard deviation for the base line signal for all the channels */
	if(Offset_1_Calculated==0)
 8005f5e:	4ba6      	ldr	r3, [pc, #664]	; (80061f8 <EXT12_IRQHandler+0x30c>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d13e      	bne.n	8005fe4 <EXT12_IRQHandler+0xf8>
	{
	  float32_t OffsetSum_1 = 0.0f;
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f72:	e01a      	b.n	8005faa <EXT12_IRQHandler+0xbe>
		{
			/* Collects samples to fill the buffer */
			update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8005f74:	f7fc f93e 	bl	80021f4 <update_ADC1_IN1_FO_biquad_filter>
			MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 8005f78:	48a0      	ldr	r0, [pc, #640]	; (80061fc <EXT12_IRQHandler+0x310>)
 8005f7a:	f7fb fd63 	bl	8001a44 <MA_ADC1_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 8005f7e:	48a0      	ldr	r0, [pc, #640]	; (8006200 <EXT12_IRQHandler+0x314>)
 8005f80:	f7fc fac2 	bl	8002508 <ADC1_IN1_OffsetCalc>
 8005f84:	eef0 7a40 	vmov.f32	s15, s0
 8005f88:	4b9e      	ldr	r3, [pc, #632]	; (8006204 <EXT12_IRQHandler+0x318>)
 8005f8a:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_1 += Offset_1;
 8005f8e:	4b9d      	ldr	r3, [pc, #628]	; (8006204 <EXT12_IRQHandler+0x318>)
 8005f90:	edd3 7a00 	vldr	s15, [r3]
 8005f94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8005fa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005faa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fae:	2b13      	cmp	r3, #19
 8005fb0:	d9e0      	bls.n	8005f74 <EXT12_IRQHandler+0x88>
		}

	  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 8005fb2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005fb6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fbe:	4b91      	ldr	r3, [pc, #580]	; (8006204 <EXT12_IRQHandler+0x318>)
 8005fc0:	edc3 7a00 	vstr	s15, [r3]
	  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 8005fc4:	4b8c      	ldr	r3, [pc, #560]	; (80061f8 <EXT12_IRQHandler+0x30c>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]

	  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 8005fca:	4b8e      	ldr	r3, [pc, #568]	; (8006204 <EXT12_IRQHandler+0x318>)
 8005fcc:	edd3 7a00 	vldr	s15, [r3]
 8005fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd4:	488c      	ldr	r0, [pc, #560]	; (8006208 <EXT12_IRQHandler+0x31c>)
 8005fd6:	f7fc fbb7 	bl	8002748 <ADC1_IN1_SD_BL>
 8005fda:	eef0 7a40 	vmov.f32	s15, s0
 8005fde:	4b8b      	ldr	r3, [pc, #556]	; (800620c <EXT12_IRQHandler+0x320>)
 8005fe0:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_2_Calculated==0)
 8005fe4:	4b8a      	ldr	r3, [pc, #552]	; (8006210 <EXT12_IRQHandler+0x324>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d13b      	bne.n	8006064 <EXT12_IRQHandler+0x178>
	{
	  float32_t OffsetSum_2;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff2:	e01a      	b.n	800602a <EXT12_IRQHandler+0x13e>
		{

			update_ADC1_IN2_FO_biquad_filter();
 8005ff4:	f7fc f948 	bl	8002288 <update_ADC1_IN2_FO_biquad_filter>
			MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8005ff8:	4886      	ldr	r0, [pc, #536]	; (8006214 <EXT12_IRQHandler+0x328>)
 8005ffa:	f7fb fdc7 	bl	8001b8c <MA_ADC1_IN2_Update>


			Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 8005ffe:	4886      	ldr	r0, [pc, #536]	; (8006218 <EXT12_IRQHandler+0x32c>)
 8006000:	f7fc fab2 	bl	8002568 <ADC1_IN2_OffsetCalc>
 8006004:	eef0 7a40 	vmov.f32	s15, s0
 8006008:	4b84      	ldr	r3, [pc, #528]	; (800621c <EXT12_IRQHandler+0x330>)
 800600a:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_2 += Offset_2;
 800600e:	4b83      	ldr	r3, [pc, #524]	; (800621c <EXT12_IRQHandler+0x330>)
 8006010:	edd3 7a00 	vldr	s15, [r3]
 8006014:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800601c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8006020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006024:	3301      	adds	r3, #1
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800602e:	2b13      	cmp	r3, #19
 8006030:	d9e0      	bls.n	8005ff4 <EXT12_IRQHandler+0x108>
		}

	  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 8006032:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006036:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800603a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800603e:	4b77      	ldr	r3, [pc, #476]	; (800621c <EXT12_IRQHandler+0x330>)
 8006040:	edc3 7a00 	vstr	s15, [r3]
	  Offset_2_Calculated = 1;
 8006044:	4b72      	ldr	r3, [pc, #456]	; (8006210 <EXT12_IRQHandler+0x324>)
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]

	  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 800604a:	4b74      	ldr	r3, [pc, #464]	; (800621c <EXT12_IRQHandler+0x330>)
 800604c:	edd3 7a00 	vldr	s15, [r3]
 8006050:	eeb0 0a67 	vmov.f32	s0, s15
 8006054:	4872      	ldr	r0, [pc, #456]	; (8006220 <EXT12_IRQHandler+0x334>)
 8006056:	f7fc fbc3 	bl	80027e0 <ADC1_IN2_SD_BL>
 800605a:	eef0 7a40 	vmov.f32	s15, s0
 800605e:	4b71      	ldr	r3, [pc, #452]	; (8006224 <EXT12_IRQHandler+0x338>)
 8006060:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_3_Calculated==0)
 8006064:	4b70      	ldr	r3, [pc, #448]	; (8006228 <EXT12_IRQHandler+0x33c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d137      	bne.n	80060dc <EXT12_IRQHandler+0x1f0>
	{
	  float32_t OffsetSum_3;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800606c:	2300      	movs	r3, #0
 800606e:	76fb      	strb	r3, [r7, #27]
 8006070:	e018      	b.n	80060a4 <EXT12_IRQHandler+0x1b8>
		{

			update_ADC2_IN3_FO_biquad_filter();
 8006072:	f7fc f953 	bl	800231c <update_ADC2_IN3_FO_biquad_filter>
			MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8006076:	486d      	ldr	r0, [pc, #436]	; (800622c <EXT12_IRQHandler+0x340>)
 8006078:	f7fb fe2c 	bl	8001cd4 <MA_ADC2_IN3_Update>


			Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 800607c:	486c      	ldr	r0, [pc, #432]	; (8006230 <EXT12_IRQHandler+0x344>)
 800607e:	f7fc faa3 	bl	80025c8 <ADC2_IN3_OffsetCalc>
 8006082:	eef0 7a40 	vmov.f32	s15, s0
 8006086:	4b6b      	ldr	r3, [pc, #428]	; (8006234 <EXT12_IRQHandler+0x348>)
 8006088:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_3 += Offset_3;
 800608c:	4b69      	ldr	r3, [pc, #420]	; (8006234 <EXT12_IRQHandler+0x348>)
 800608e:	edd3 7a00 	vldr	s15, [r3]
 8006092:	ed97 7a07 	vldr	s14, [r7, #28]
 8006096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800609e:	7efb      	ldrb	r3, [r7, #27]
 80060a0:	3301      	adds	r3, #1
 80060a2:	76fb      	strb	r3, [r7, #27]
 80060a4:	7efb      	ldrb	r3, [r7, #27]
 80060a6:	2b13      	cmp	r3, #19
 80060a8:	d9e3      	bls.n	8006072 <EXT12_IRQHandler+0x186>
		}

	  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 80060aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80060ae:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80060b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060b6:	4b5f      	ldr	r3, [pc, #380]	; (8006234 <EXT12_IRQHandler+0x348>)
 80060b8:	edc3 7a00 	vstr	s15, [r3]
	  Offset_3_Calculated = 1;
 80060bc:	4b5a      	ldr	r3, [pc, #360]	; (8006228 <EXT12_IRQHandler+0x33c>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]

	  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 80060c2:	4b5c      	ldr	r3, [pc, #368]	; (8006234 <EXT12_IRQHandler+0x348>)
 80060c4:	edd3 7a00 	vldr	s15, [r3]
 80060c8:	eeb0 0a67 	vmov.f32	s0, s15
 80060cc:	485a      	ldr	r0, [pc, #360]	; (8006238 <EXT12_IRQHandler+0x34c>)
 80060ce:	f7fc fbd3 	bl	8002878 <ADC2_IN3_SD_BL>
 80060d2:	eef0 7a40 	vmov.f32	s15, s0
 80060d6:	4b59      	ldr	r3, [pc, #356]	; (800623c <EXT12_IRQHandler+0x350>)
 80060d8:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_4_Calculated==0)
 80060dc:	4b58      	ldr	r3, [pc, #352]	; (8006240 <EXT12_IRQHandler+0x354>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d137      	bne.n	8006154 <EXT12_IRQHandler+0x268>
	{
	  float32_t OffsetSum_4;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80060e4:	2300      	movs	r3, #0
 80060e6:	74fb      	strb	r3, [r7, #19]
 80060e8:	e018      	b.n	800611c <EXT12_IRQHandler+0x230>
		{

			update_ADC2_IN4_FO_biquad_filter();
 80060ea:	f7fc f961 	bl	80023b0 <update_ADC2_IN4_FO_biquad_filter>
			MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 80060ee:	4855      	ldr	r0, [pc, #340]	; (8006244 <EXT12_IRQHandler+0x358>)
 80060f0:	f7fb fe94 	bl	8001e1c <MA_ADC2_IN4_Update>


			Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 80060f4:	4854      	ldr	r0, [pc, #336]	; (8006248 <EXT12_IRQHandler+0x35c>)
 80060f6:	f7fc fa97 	bl	8002628 <ADC2_IN4_OffsetCalc>
 80060fa:	eef0 7a40 	vmov.f32	s15, s0
 80060fe:	4b53      	ldr	r3, [pc, #332]	; (800624c <EXT12_IRQHandler+0x360>)
 8006100:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_4 += Offset_4;
 8006104:	4b51      	ldr	r3, [pc, #324]	; (800624c <EXT12_IRQHandler+0x360>)
 8006106:	edd3 7a00 	vldr	s15, [r3]
 800610a:	ed97 7a05 	vldr	s14, [r7, #20]
 800610e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006112:	edc7 7a05 	vstr	s15, [r7, #20]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8006116:	7cfb      	ldrb	r3, [r7, #19]
 8006118:	3301      	adds	r3, #1
 800611a:	74fb      	strb	r3, [r7, #19]
 800611c:	7cfb      	ldrb	r3, [r7, #19]
 800611e:	2b13      	cmp	r3, #19
 8006120:	d9e3      	bls.n	80060ea <EXT12_IRQHandler+0x1fe>
		}

	  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 8006122:	ed97 7a05 	vldr	s14, [r7, #20]
 8006126:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800612a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800612e:	4b47      	ldr	r3, [pc, #284]	; (800624c <EXT12_IRQHandler+0x360>)
 8006130:	edc3 7a00 	vstr	s15, [r3]
	  Offset_4_Calculated = 1;
 8006134:	4b42      	ldr	r3, [pc, #264]	; (8006240 <EXT12_IRQHandler+0x354>)
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]

	  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 800613a:	4b44      	ldr	r3, [pc, #272]	; (800624c <EXT12_IRQHandler+0x360>)
 800613c:	edd3 7a00 	vldr	s15, [r3]
 8006140:	eeb0 0a67 	vmov.f32	s0, s15
 8006144:	4842      	ldr	r0, [pc, #264]	; (8006250 <EXT12_IRQHandler+0x364>)
 8006146:	f7fc fbe3 	bl	8002910 <ADC2_IN4_SD_BL>
 800614a:	eef0 7a40 	vmov.f32	s15, s0
 800614e:	4b41      	ldr	r3, [pc, #260]	; (8006254 <EXT12_IRQHandler+0x368>)
 8006150:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_5_Calculated==0)
 8006154:	4b40      	ldr	r3, [pc, #256]	; (8006258 <EXT12_IRQHandler+0x36c>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d137      	bne.n	80061cc <EXT12_IRQHandler+0x2e0>
	{
	  float32_t OffsetSum_5;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800615c:	2300      	movs	r3, #0
 800615e:	72fb      	strb	r3, [r7, #11]
 8006160:	e018      	b.n	8006194 <EXT12_IRQHandler+0x2a8>
		{
			/* Collects samples to fill the buffer */
			update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 8006162:	f7fc f96f 	bl	8002444 <update_ADC3_IN1_FO_biquad_filter>
			MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 8006166:	483d      	ldr	r0, [pc, #244]	; (800625c <EXT12_IRQHandler+0x370>)
 8006168:	f7fb fefc 	bl	8001f64 <MA_ADC3_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 800616c:	483c      	ldr	r0, [pc, #240]	; (8006260 <EXT12_IRQHandler+0x374>)
 800616e:	f7fc fa8b 	bl	8002688 <ADC3_IN1_OffsetCalc>
 8006172:	eef0 7a40 	vmov.f32	s15, s0
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <EXT12_IRQHandler+0x318>)
 8006178:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_5 += Offset_5;
 800617c:	4b39      	ldr	r3, [pc, #228]	; (8006264 <EXT12_IRQHandler+0x378>)
 800617e:	edd3 7a00 	vldr	s15, [r3]
 8006182:	ed97 7a03 	vldr	s14, [r7, #12]
 8006186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800618a:	edc7 7a03 	vstr	s15, [r7, #12]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800618e:	7afb      	ldrb	r3, [r7, #11]
 8006190:	3301      	adds	r3, #1
 8006192:	72fb      	strb	r3, [r7, #11]
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	2b13      	cmp	r3, #19
 8006198:	d9e3      	bls.n	8006162 <EXT12_IRQHandler+0x276>
		}

	  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 800619a:	ed97 7a03 	vldr	s14, [r7, #12]
 800619e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80061a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061a6:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <EXT12_IRQHandler+0x378>)
 80061a8:	edc3 7a00 	vstr	s15, [r3]
	  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 80061ac:	4b2a      	ldr	r3, [pc, #168]	; (8006258 <EXT12_IRQHandler+0x36c>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	701a      	strb	r2, [r3, #0]

	  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 80061b2:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <EXT12_IRQHandler+0x378>)
 80061b4:	edd3 7a00 	vldr	s15, [r3]
 80061b8:	eeb0 0a67 	vmov.f32	s0, s15
 80061bc:	482a      	ldr	r0, [pc, #168]	; (8006268 <EXT12_IRQHandler+0x37c>)
 80061be:	f7fc fbf3 	bl	80029a8 <ADC3_IN1_SD_BL>
 80061c2:	eef0 7a40 	vmov.f32	s15, s0
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <EXT12_IRQHandler+0x380>)
 80061c8:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_6_Calculated==0)
 80061cc:	4b28      	ldr	r3, [pc, #160]	; (8006270 <EXT12_IRQHandler+0x384>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 8084 	bne.w	80062de <EXT12_IRQHandler+0x3f2>
	{
	  float32_t OffsetSum_6;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	70fb      	strb	r3, [r7, #3]
 80061da:	e064      	b.n	80062a6 <EXT12_IRQHandler+0x3ba>
 80061dc:	2000c008 	.word	0x2000c008
 80061e0:	2000b6bc 	.word	0x2000b6bc
 80061e4:	2001b464 	.word	0x2001b464
 80061e8:	2000c00c 	.word	0x2000c00c
 80061ec:	2000b728 	.word	0x2000b728
 80061f0:	2000c010 	.word	0x2000c010
 80061f4:	2000b794 	.word	0x2000b794
 80061f8:	2001b480 	.word	0x2001b480
 80061fc:	2000c014 	.word	0x2000c014
 8006200:	2000e0cc 	.word	0x2000e0cc
 8006204:	2001b468 	.word	0x2001b468
 8006208:	20010184 	.word	0x20010184
 800620c:	2001b488 	.word	0x2001b488
 8006210:	2001b481 	.word	0x2001b481
 8006214:	2000c588 	.word	0x2000c588
 8006218:	2000e640 	.word	0x2000e640
 800621c:	2001b46c 	.word	0x2001b46c
 8006220:	200106f8 	.word	0x200106f8
 8006224:	2001b48c 	.word	0x2001b48c
 8006228:	2001b482 	.word	0x2001b482
 800622c:	2000cafc 	.word	0x2000cafc
 8006230:	2000ebb4 	.word	0x2000ebb4
 8006234:	2001b470 	.word	0x2001b470
 8006238:	20010c6c 	.word	0x20010c6c
 800623c:	2001b490 	.word	0x2001b490
 8006240:	2001b483 	.word	0x2001b483
 8006244:	2000d070 	.word	0x2000d070
 8006248:	2000f128 	.word	0x2000f128
 800624c:	2001b474 	.word	0x2001b474
 8006250:	200111e0 	.word	0x200111e0
 8006254:	2001b494 	.word	0x2001b494
 8006258:	2001b484 	.word	0x2001b484
 800625c:	2000d5e4 	.word	0x2000d5e4
 8006260:	2000f69c 	.word	0x2000f69c
 8006264:	2001b478 	.word	0x2001b478
 8006268:	20011754 	.word	0x20011754
 800626c:	2001b498 	.word	0x2001b498
 8006270:	2001b485 	.word	0x2001b485
		{

			update_ADC3_IN2_FO_biquad_filter();
 8006274:	f7fc f930 	bl	80024d8 <update_ADC3_IN2_FO_biquad_filter>
			MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 8006278:	481c      	ldr	r0, [pc, #112]	; (80062ec <EXT12_IRQHandler+0x400>)
 800627a:	f7fb ff17 	bl	80020ac <MA_ADC3_IN2_Update>


			Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 800627e:	481c      	ldr	r0, [pc, #112]	; (80062f0 <EXT12_IRQHandler+0x404>)
 8006280:	f7fc fa32 	bl	80026e8 <ADC3_IN2_OffsetCalc>
 8006284:	eef0 7a40 	vmov.f32	s15, s0
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <EXT12_IRQHandler+0x408>)
 800628a:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_6 += Offset_6;
 800628e:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <EXT12_IRQHandler+0x408>)
 8006290:	edd3 7a00 	vldr	s15, [r3]
 8006294:	ed97 7a01 	vldr	s14, [r7, #4]
 8006298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800629c:	edc7 7a01 	vstr	s15, [r7, #4]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	3301      	adds	r3, #1
 80062a4:	70fb      	strb	r3, [r7, #3]
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	2b13      	cmp	r3, #19
 80062aa:	d9e3      	bls.n	8006274 <EXT12_IRQHandler+0x388>
		}

	  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 80062ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80062b0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80062b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <EXT12_IRQHandler+0x408>)
 80062ba:	edc3 7a00 	vstr	s15, [r3]
	  Offset_6_Calculated = 1;
 80062be:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <EXT12_IRQHandler+0x40c>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]

	  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <EXT12_IRQHandler+0x408>)
 80062c6:	edd3 7a00 	vldr	s15, [r3]
 80062ca:	eeb0 0a67 	vmov.f32	s0, s15
 80062ce:	480b      	ldr	r0, [pc, #44]	; (80062fc <EXT12_IRQHandler+0x410>)
 80062d0:	f7fc fbb6 	bl	8002a40 <ADC3_IN2_SD_BL>
 80062d4:	eef0 7a40 	vmov.f32	s15, s0
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <EXT12_IRQHandler+0x414>)
 80062da:	edc3 7a00 	vstr	s15, [r3]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);  // Calls the HAL's callback function
 80062de:	2004      	movs	r0, #4
 80062e0:	f003 fc14 	bl	8009b0c <HAL_GPIO_EXTI_IRQHandler>
}
 80062e4:	bf00      	nop
 80062e6:	3730      	adds	r7, #48	; 0x30
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	2000db58 	.word	0x2000db58
 80062f0:	2000fc10 	.word	0x2000fc10
 80062f4:	2001b47c 	.word	0x2001b47c
 80062f8:	2001b485 	.word	0x2001b485
 80062fc:	20011cc8 	.word	0x20011cc8
 8006300:	2001b49c 	.word	0x2001b49c

08006304 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Callback function (Called by HAL_GPIO_EXTI_IRQHandler (above))
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2)
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d10d      	bne.n	8006330 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		// Turn the LED connected to PE5 on
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8006314:	2201      	movs	r2, #1
 8006316:	2120      	movs	r1, #32
 8006318:	4807      	ldr	r0, [pc, #28]	; (8006338 <HAL_GPIO_EXTI_Callback+0x34>)
 800631a:	f003 fbdf 	bl	8009adc <HAL_GPIO_WritePin>

        // Delay for 2 seconds (2000 milliseconds)
        HAL_Delay(2000);
 800631e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006322:	f001 f92b 	bl	800757c <HAL_Delay>

        // Turn the LED off
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8006326:	2200      	movs	r2, #0
 8006328:	2120      	movs	r1, #32
 800632a:	4803      	ldr	r0, [pc, #12]	; (8006338 <HAL_GPIO_EXTI_Callback+0x34>)
 800632c:	f003 fbd6 	bl	8009adc <HAL_GPIO_WritePin>
	}
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	48001000 	.word	0x48001000

0800633c <HAL_ADC_ConvHalfCpltCallback>:

void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800634c:	d123      	bne.n	8006396 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 800634e:	f7fe f837 	bl	80043c0 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 8006352:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a3b      	ldr	r2, [pc, #236]	; (8006444 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 800635e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006362:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a36      	ldr	r2, [pc, #216]	; (8006444 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006372:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8006376:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800637a:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 800637e:	4b31      	ldr	r3, [pc, #196]	; (8006444 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a30      	ldr	r2, [pc, #192]	; (8006444 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800638a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800638e:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8006392:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }


	 if (hadc->Instance == ADC2)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2b      	ldr	r2, [pc, #172]	; (8006448 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d123      	bne.n	80063e8 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 80063a0:	f7fe f9c2 	bl	8004728 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 80063a4:	4b29      	ldr	r3, [pc, #164]	; (800644c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a28      	ldr	r2, [pc, #160]	; (800644c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 80063b0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80063b4:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80063b8:	4b24      	ldr	r3, [pc, #144]	; (800644c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a23      	ldr	r2, [pc, #140]	; (800644c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063c4:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 80063c8:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80063cc:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80063d0:	4b1e      	ldr	r3, [pc, #120]	; (800644c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1d      	ldr	r2, [pc, #116]	; (800644c <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80063dc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 80063e0:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 80063e4:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }

	 if (hadc->Instance == ADC3)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a18      	ldr	r2, [pc, #96]	; (8006450 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d123      	bne.n	800643a <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 80063f2:	f7fe fb4d 	bl	8004a90 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 80063f6:	4b17      	ldr	r3, [pc, #92]	; (8006454 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a16      	ldr	r2, [pc, #88]	; (8006454 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8006402:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006406:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800640a:	4b12      	ldr	r3, [pc, #72]	; (8006454 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a11      	ldr	r2, [pc, #68]	; (8006454 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006416:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 800641a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800641e:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8006422:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a0b      	ldr	r2, [pc, #44]	; (8006454 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800642e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006432:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8006436:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }
};
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	2000c008 	.word	0x2000c008
 8006448:	50000100 	.word	0x50000100
 800644c:	2000c00c 	.word	0x2000c00c
 8006450:	50000400 	.word	0x50000400
 8006454:	2000c010 	.word	0x2000c010

08006458 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006468:	d128      	bne.n	80064bc <HAL_ADC_ConvCpltCallback+0x64>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 800646a:	f7fe f87d 	bl	8004568 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 800646e:	4b43      	ldr	r3, [pc, #268]	; (800657c <HAL_ADC_ConvCpltCallback+0x124>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a42      	ldr	r2, [pc, #264]	; (800657c <HAL_ADC_ConvCpltCallback+0x124>)
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800647e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006482:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8006486:	4b3d      	ldr	r3, [pc, #244]	; (800657c <HAL_ADC_ConvCpltCallback+0x124>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a3c      	ldr	r2, [pc, #240]	; (800657c <HAL_ADC_ConvCpltCallback+0x124>)
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006492:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8006496:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800649a:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 800649e:	4b37      	ldr	r3, [pc, #220]	; (800657c <HAL_ADC_ConvCpltCallback+0x124>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a36      	ldr	r2, [pc, #216]	; (800657c <HAL_ADC_ConvCpltCallback+0x124>)
 80064a4:	6812      	ldr	r2, [r2, #0]
 80064a6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80064aa:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 80064ae:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 80064b2:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			Buffer_ADC1_Ready = 1; // Sets a flag to zero after the channel specific buffers have been filled
 80064b6:	4b32      	ldr	r3, [pc, #200]	; (8006580 <HAL_ADC_ConvCpltCallback+0x128>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
		}


	  if (hadc->Instance == ADC2)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a30      	ldr	r2, [pc, #192]	; (8006584 <HAL_ADC_ConvCpltCallback+0x12c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d128      	bne.n	8006518 <HAL_ADC_ConvCpltCallback+0xc0>

		{
			 ADC2_DMA_sort_lhb();
 80064c6:	f7fe fa03 	bl	80048d0 <ADC2_DMA_sort_lhb>

			 ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 80064ca:	4b2f      	ldr	r3, [pc, #188]	; (8006588 <HAL_ADC_ConvCpltCallback+0x130>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2e      	ldr	r2, [pc, #184]	; (8006588 <HAL_ADC_ConvCpltCallback+0x130>)
 80064d0:	6812      	ldr	r2, [r2, #0]
 80064d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d6:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80064da:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80064de:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80064e2:	4b29      	ldr	r3, [pc, #164]	; (8006588 <HAL_ADC_ConvCpltCallback+0x130>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a28      	ldr	r2, [pc, #160]	; (8006588 <HAL_ADC_ConvCpltCallback+0x130>)
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80064ee:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80064f2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80064f6:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80064fa:	4b23      	ldr	r3, [pc, #140]	; (8006588 <HAL_ADC_ConvCpltCallback+0x130>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a22      	ldr	r2, [pc, #136]	; (8006588 <HAL_ADC_ConvCpltCallback+0x130>)
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8006506:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 800650a:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800650e:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			 Buffer_ADC2_Ready = 1;
 8006512:	4b1e      	ldr	r3, [pc, #120]	; (800658c <HAL_ADC_ConvCpltCallback+0x134>)
 8006514:	2201      	movs	r2, #1
 8006516:	701a      	strb	r2, [r3, #0]
		}

	   if (hadc->Instance == ADC3)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <HAL_ADC_ConvCpltCallback+0x138>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d128      	bne.n	8006574 <HAL_ADC_ConvCpltCallback+0x11c>

		{
		     ADC3_DMA_sort_lhb();
 8006522:	f7fe fb89 	bl	8004c38 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8006526:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <HAL_ADC_ConvCpltCallback+0x13c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1a      	ldr	r2, [pc, #104]	; (8006594 <HAL_ADC_ConvCpltCallback+0x13c>)
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006532:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8006536:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800653a:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <HAL_ADC_ConvCpltCallback+0x13c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a14      	ldr	r2, [pc, #80]	; (8006594 <HAL_ADC_ConvCpltCallback+0x13c>)
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800654a:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800654e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8006552:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <HAL_ADC_ConvCpltCallback+0x13c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <HAL_ADC_ConvCpltCallback+0x13c>)
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8006562:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006566:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800656a:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			 Buffer_ADC3_Ready = 1;
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <HAL_ADC_ConvCpltCallback+0x140>)
 8006570:	2201      	movs	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
		}

};
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	2000c008 	.word	0x2000c008
 8006580:	2001b4f0 	.word	0x2001b4f0
 8006584:	50000100 	.word	0x50000100
 8006588:	2000c00c 	.word	0x2000c00c
 800658c:	2001b4f1 	.word	0x2001b4f1
 8006590:	50000400 	.word	0x50000400
 8006594:	2000c010 	.word	0x2000c010
 8006598:	2001b4f2 	.word	0x2001b4f2

0800659c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065a0:	b672      	cpsid	i
}
 80065a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80065a4:	e7fe      	b.n	80065a4 <Error_Handler+0x8>
	...

080065a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <HAL_MspInit+0x44>)
 80065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b2:	4a0e      	ldr	r2, [pc, #56]	; (80065ec <HAL_MspInit+0x44>)
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	6613      	str	r3, [r2, #96]	; 0x60
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <HAL_MspInit+0x44>)
 80065bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	607b      	str	r3, [r7, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <HAL_MspInit+0x44>)
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	4a08      	ldr	r2, [pc, #32]	; (80065ec <HAL_MspInit+0x44>)
 80065cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d0:	6593      	str	r3, [r2, #88]	; 0x58
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <HAL_MspInit+0x44>)
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80065de:	f003 fc83 	bl	8009ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40021000 	.word	0x40021000

080065f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b0a2      	sub	sp, #136	; 0x88
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800660c:	2250      	movs	r2, #80	; 0x50
 800660e:	2100      	movs	r1, #0
 8006610:	4618      	mov	r0, r3
 8006612:	f007 feec 	bl	800e3ee <memset>
  if(hadc->Instance==ADC1)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800661e:	d169      	bne.n	80066f4 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8006620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8006626:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800662a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800662c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006630:	4618      	mov	r0, r3
 8006632:	f004 f993 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800663c:	f7ff ffae 	bl	800659c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006640:	4b64      	ldr	r3, [pc, #400]	; (80067d4 <HAL_ADC_MspInit+0x1e4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	4a63      	ldr	r2, [pc, #396]	; (80067d4 <HAL_ADC_MspInit+0x1e4>)
 8006648:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800664a:	4b62      	ldr	r3, [pc, #392]	; (80067d4 <HAL_ADC_MspInit+0x1e4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10b      	bne.n	800666a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006652:	4b61      	ldr	r3, [pc, #388]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006656:	4a60      	ldr	r2, [pc, #384]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800665c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800665e:	4b5e      	ldr	r3, [pc, #376]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800666a:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	4a5a      	ldr	r2, [pc, #360]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006676:	4b58      	ldr	r3, [pc, #352]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006682:	2303      	movs	r3, #3
 8006684:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006686:	2303      	movs	r3, #3
 8006688:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668a:	2300      	movs	r3, #0
 800668c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800668e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006692:	4619      	mov	r1, r3
 8006694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006698:	f003 f89e 	bl	80097d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800669c:	4b4f      	ldr	r3, [pc, #316]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 800669e:	4a50      	ldr	r2, [pc, #320]	; (80067e0 <HAL_ADC_MspInit+0x1f0>)
 80066a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80066a2:	4b4e      	ldr	r3, [pc, #312]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066a4:	2205      	movs	r2, #5
 80066a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066a8:	4b4c      	ldr	r3, [pc, #304]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80066ae:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80066b4:	4b49      	ldr	r3, [pc, #292]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066b6:	2280      	movs	r2, #128	; 0x80
 80066b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80066ba:	4b48      	ldr	r3, [pc, #288]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80066c2:	4b46      	ldr	r3, [pc, #280]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80066ca:	4b44      	ldr	r3, [pc, #272]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066cc:	2220      	movs	r2, #32
 80066ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80066d0:	4b42      	ldr	r3, [pc, #264]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80066d6:	4841      	ldr	r0, [pc, #260]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066d8:	f002 fd60 	bl	800919c <HAL_DMA_Init>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80066e2:	f7ff ff5b 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a3c      	ldr	r2, [pc, #240]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066ea:	655a      	str	r2, [r3, #84]	; 0x54
 80066ec:	4a3b      	ldr	r2, [pc, #236]	; (80067dc <HAL_ADC_MspInit+0x1ec>)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80066f2:	e0fa      	b.n	80068ea <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a3a      	ldr	r2, [pc, #232]	; (80067e4 <HAL_ADC_MspInit+0x1f4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d178      	bne.n	80067f0 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80066fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8006704:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006708:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800670a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800670e:	4618      	mov	r0, r3
 8006710:	f004 f924 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800671a:	f7ff ff3f 	bl	800659c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800671e:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <HAL_ADC_MspInit+0x1e4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a2b      	ldr	r2, [pc, #172]	; (80067d4 <HAL_ADC_MspInit+0x1e4>)
 8006726:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006728:	4b2a      	ldr	r3, [pc, #168]	; (80067d4 <HAL_ADC_MspInit+0x1e4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10b      	bne.n	8006748 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006730:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006734:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800673a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800673c:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 800673e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006748:	4b23      	ldr	r3, [pc, #140]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 800674a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674c:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006754:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <HAL_ADC_MspInit+0x1e8>)
 8006756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006760:	23c0      	movs	r3, #192	; 0xc0
 8006762:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006764:	2303      	movs	r3, #3
 8006766:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800676c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006770:	4619      	mov	r1, r3
 8006772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006776:	f003 f82f 	bl	80097d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 800677c:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <HAL_ADC_MspInit+0x1fc>)
 800677e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8006780:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 8006788:	2200      	movs	r2, #0
 800678a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800678c:	4b16      	ldr	r3, [pc, #88]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 800678e:	2200      	movs	r2, #0
 8006790:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006792:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 8006794:	2280      	movs	r2, #128	; 0x80
 8006796:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 800679a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800679e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 80067a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067a6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 80067aa:	2220      	movs	r2, #32
 80067ac:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80067ae:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80067b4:	480c      	ldr	r0, [pc, #48]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 80067b6:	f002 fcf1 	bl	800919c <HAL_DMA_Init>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80067c0:	f7ff feec 	bl	800659c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 80067c8:	655a      	str	r2, [r3, #84]	; 0x54
 80067ca:	4a07      	ldr	r2, [pc, #28]	; (80067e8 <HAL_ADC_MspInit+0x1f8>)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6293      	str	r3, [r2, #40]	; 0x28
}
 80067d0:	e08b      	b.n	80068ea <HAL_ADC_MspInit+0x2fa>
 80067d2:	bf00      	nop
 80067d4:	2001b4f4 	.word	0x2001b4f4
 80067d8:	40021000 	.word	0x40021000
 80067dc:	2000b800 	.word	0x2000b800
 80067e0:	40020008 	.word	0x40020008
 80067e4:	50000100 	.word	0x50000100
 80067e8:	2000b860 	.word	0x2000b860
 80067ec:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3f      	ldr	r2, [pc, #252]	; (80068f4 <HAL_ADC_MspInit+0x304>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d177      	bne.n	80068ea <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80067fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8006800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006804:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800680a:	4618      	mov	r0, r3
 800680c:	f004 f8a6 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8006816:	f7ff fec1 	bl	800659c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800681a:	4b37      	ldr	r3, [pc, #220]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	4a36      	ldr	r2, [pc, #216]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 8006820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006826:	4b34      	ldr	r3, [pc, #208]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006832:	4b31      	ldr	r3, [pc, #196]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 8006834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006836:	4a30      	ldr	r2, [pc, #192]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 8006838:	f043 0302 	orr.w	r3, r3, #2
 800683c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800683e:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 8006840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800684a:	4b2b      	ldr	r3, [pc, #172]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 800684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684e:	4a2a      	ldr	r2, [pc, #168]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 8006850:	f043 0310 	orr.w	r3, r3, #16
 8006854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006856:	4b28      	ldr	r3, [pc, #160]	; (80068f8 <HAL_ADC_MspInit+0x308>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006862:	2302      	movs	r3, #2
 8006864:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006866:	2303      	movs	r3, #3
 8006868:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686a:	2300      	movs	r3, #0
 800686c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800686e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006872:	4619      	mov	r1, r3
 8006874:	4821      	ldr	r0, [pc, #132]	; (80068fc <HAL_ADC_MspInit+0x30c>)
 8006876:	f002 ffaf 	bl	80097d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800687a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006880:	2303      	movs	r3, #3
 8006882:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006884:	2300      	movs	r3, #0
 8006886:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006888:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800688c:	4619      	mov	r1, r3
 800688e:	481c      	ldr	r0, [pc, #112]	; (8006900 <HAL_ADC_MspInit+0x310>)
 8006890:	f002 ffa2 	bl	80097d8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8006894:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <HAL_ADC_MspInit+0x314>)
 8006896:	4a1c      	ldr	r2, [pc, #112]	; (8006908 <HAL_ADC_MspInit+0x318>)
 8006898:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800689a:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <HAL_ADC_MspInit+0x314>)
 800689c:	2225      	movs	r2, #37	; 0x25
 800689e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068a0:	4b18      	ldr	r3, [pc, #96]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80068a6:	4b17      	ldr	r3, [pc, #92]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80068ac:	4b15      	ldr	r3, [pc, #84]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068ae:	2280      	movs	r2, #128	; 0x80
 80068b0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068b8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068c4:	2220      	movs	r2, #32
 80068c6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80068ce:	480d      	ldr	r0, [pc, #52]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068d0:	f002 fc64 	bl	800919c <HAL_DMA_Init>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 80068da:	f7ff fe5f 	bl	800659c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a08      	ldr	r2, [pc, #32]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54
 80068e4:	4a07      	ldr	r2, [pc, #28]	; (8006904 <HAL_ADC_MspInit+0x314>)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80068ea:	bf00      	nop
 80068ec:	3788      	adds	r7, #136	; 0x88
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	50000400 	.word	0x50000400
 80068f8:	40021000 	.word	0x40021000
 80068fc:	48000400 	.word	0x48000400
 8006900:	48001000 	.word	0x48001000
 8006904:	2000b8c0 	.word	0x2000b8c0
 8006908:	40020408 	.word	0x40020408

0800690c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08a      	sub	sp, #40	; 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a40      	ldr	r2, [pc, #256]	; (8006a2c <HAL_DAC_MspInit+0x120>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d17a      	bne.n	8006a24 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800692e:	4b40      	ldr	r3, [pc, #256]	; (8006a30 <HAL_DAC_MspInit+0x124>)
 8006930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006932:	4a3f      	ldr	r2, [pc, #252]	; (8006a30 <HAL_DAC_MspInit+0x124>)
 8006934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800693a:	4b3d      	ldr	r3, [pc, #244]	; (8006a30 <HAL_DAC_MspInit+0x124>)
 800693c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006946:	4b3a      	ldr	r3, [pc, #232]	; (8006a30 <HAL_DAC_MspInit+0x124>)
 8006948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694a:	4a39      	ldr	r2, [pc, #228]	; (8006a30 <HAL_DAC_MspInit+0x124>)
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006952:	4b37      	ldr	r3, [pc, #220]	; (8006a30 <HAL_DAC_MspInit+0x124>)
 8006954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800695e:	2330      	movs	r3, #48	; 0x30
 8006960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006962:	2303      	movs	r3, #3
 8006964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800696a:	f107 0314 	add.w	r3, r7, #20
 800696e:	4619      	mov	r1, r3
 8006970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006974:	f002 ff30 	bl	80097d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8006978:	4b2e      	ldr	r3, [pc, #184]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 800697a:	4a2f      	ldr	r2, [pc, #188]	; (8006a38 <HAL_DAC_MspInit+0x12c>)
 800697c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800697e:	4b2d      	ldr	r3, [pc, #180]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 8006980:	2206      	movs	r2, #6
 8006982:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006984:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 8006986:	2210      	movs	r2, #16
 8006988:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800698a:	4b2a      	ldr	r3, [pc, #168]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 800698c:	2200      	movs	r2, #0
 800698e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006990:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 8006992:	2280      	movs	r2, #128	; 0x80
 8006994:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006996:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 8006998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800699c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800699e:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 80069a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069a4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 80069a8:	2220      	movs	r2, #32
 80069aa:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80069ac:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80069b2:	4820      	ldr	r0, [pc, #128]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 80069b4:	f002 fbf2 	bl	800919c <HAL_DMA_Init>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80069be:	f7ff fded 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a1b      	ldr	r2, [pc, #108]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <HAL_DAC_MspInit+0x128>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA2_Channel6;
 80069ce:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069d0:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <HAL_DAC_MspInit+0x134>)
 80069d2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069d6:	2207      	movs	r2, #7
 80069d8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069da:	4b18      	ldr	r3, [pc, #96]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069dc:	2210      	movs	r2, #16
 80069de:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80069e0:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069e8:	2280      	movs	r2, #128	; 0x80
 80069ea:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069ec:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069f2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069f4:	4b11      	ldr	r3, [pc, #68]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069fa:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 80069fe:	2220      	movs	r2, #32
 8006a00:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006a02:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8006a08:	480c      	ldr	r0, [pc, #48]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 8006a0a:	f002 fbc7 	bl	800919c <HAL_DMA_Init>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8006a14:	f7ff fdc2 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 8006a1c:	60da      	str	r2, [r3, #12]
 8006a1e:	4a07      	ldr	r2, [pc, #28]	; (8006a3c <HAL_DAC_MspInit+0x130>)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006a24:	bf00      	nop
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	50000800 	.word	0x50000800
 8006a30:	40021000 	.word	0x40021000
 8006a34:	2000b934 	.word	0x2000b934
 8006a38:	40020030 	.word	0x40020030
 8006a3c:	2000b994 	.word	0x2000b994
 8006a40:	4002046c 	.word	0x4002046c

08006a44 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <HAL_FMAC_MspInit+0x38>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d10b      	bne.n	8006a6e <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8006a56:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <HAL_FMAC_MspInit+0x3c>)
 8006a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5a:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <HAL_FMAC_MspInit+0x3c>)
 8006a5c:	f043 0310 	orr.w	r3, r3, #16
 8006a60:	6493      	str	r3, [r2, #72]	; 0x48
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <HAL_FMAC_MspInit+0x3c>)
 8006a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40021400 	.word	0x40021400
 8006a80:	40021000 	.word	0x40021000

08006a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b0a2      	sub	sp, #136	; 0x88
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	605a      	str	r2, [r3, #4]
 8006a96:	609a      	str	r2, [r3, #8]
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aa0:	2250      	movs	r2, #80	; 0x50
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f007 fca2 	bl	800e3ee <memset>
  if(hi2c->Instance==I2C1)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4aa0      	ldr	r2, [pc, #640]	; (8006d30 <HAL_I2C_MspInit+0x2ac>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d164      	bne.n	8006b7e <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f003 ff4b 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006acc:	f7ff fd66 	bl	800659c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ad0:	4b98      	ldr	r3, [pc, #608]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad4:	4a97      	ldr	r2, [pc, #604]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006adc:	4b95      	ldr	r3, [pc, #596]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006ae8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006aec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006aee:	2312      	movs	r3, #18
 8006af0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006afc:	2304      	movs	r3, #4
 8006afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006b06:	4619      	mov	r1, r3
 8006b08:	488b      	ldr	r0, [pc, #556]	; (8006d38 <HAL_I2C_MspInit+0x2b4>)
 8006b0a:	f002 fe65 	bl	80097d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b0e:	4b89      	ldr	r3, [pc, #548]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b12:	4a88      	ldr	r2, [pc, #544]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b18:	6593      	str	r3, [r2, #88]	; 0x58
 8006b1a:	4b86      	ldr	r3, [pc, #536]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8006b26:	4b85      	ldr	r3, [pc, #532]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b28:	4a85      	ldr	r2, [pc, #532]	; (8006d40 <HAL_I2C_MspInit+0x2bc>)
 8006b2a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8006b2c:	4b83      	ldr	r3, [pc, #524]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b2e:	2211      	movs	r2, #17
 8006b30:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b32:	4b82      	ldr	r3, [pc, #520]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b34:	2210      	movs	r2, #16
 8006b36:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b38:	4b80      	ldr	r3, [pc, #512]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b3e:	4b7f      	ldr	r3, [pc, #508]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b40:	2280      	movs	r2, #128	; 0x80
 8006b42:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b44:	4b7d      	ldr	r3, [pc, #500]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b4c:	4b7b      	ldr	r3, [pc, #492]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8006b54:	4b79      	ldr	r3, [pc, #484]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b56:	2220      	movs	r2, #32
 8006b58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b5a:	4b78      	ldr	r3, [pc, #480]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006b60:	4876      	ldr	r0, [pc, #472]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b62:	f002 fb1b 	bl	800919c <HAL_DMA_Init>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_I2C_MspInit+0xec>
    {
      Error_Handler();
 8006b6c:	f7ff fd16 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a72      	ldr	r2, [pc, #456]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38
 8006b76:	4a71      	ldr	r2, [pc, #452]	; (8006d3c <HAL_I2C_MspInit+0x2b8>)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006b7c:	e0d4      	b.n	8006d28 <HAL_I2C_MspInit+0x2a4>
  else if(hi2c->Instance==I2C2)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a70      	ldr	r2, [pc, #448]	; (8006d44 <HAL_I2C_MspInit+0x2c0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d165      	bne.n	8006c54 <HAL_I2C_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b94:	4618      	mov	r0, r3
 8006b96:	f003 fee1 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_I2C_MspInit+0x120>
      Error_Handler();
 8006ba0:	f7ff fcfc 	bl	800659c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba4:	4b63      	ldr	r3, [pc, #396]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba8:	4a62      	ldr	r2, [pc, #392]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bb0:	4b60      	ldr	r3, [pc, #384]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006bbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bc0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bc2:	2312      	movs	r3, #18
 8006bc4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bd6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006bda:	4619      	mov	r1, r3
 8006bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006be0:	f002 fdfa 	bl	80097d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006be4:	4b53      	ldr	r3, [pc, #332]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be8:	4a52      	ldr	r2, [pc, #328]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bee:	6593      	str	r3, [r2, #88]	; 0x58
 8006bf0:	4b50      	ldr	r3, [pc, #320]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	697b      	ldr	r3, [r7, #20]
    hdma_i2c2_tx.Instance = DMA2_Channel5;
 8006bfc:	4b52      	ldr	r3, [pc, #328]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006bfe:	4a53      	ldr	r2, [pc, #332]	; (8006d4c <HAL_I2C_MspInit+0x2c8>)
 8006c00:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8006c02:	4b51      	ldr	r3, [pc, #324]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c04:	2213      	movs	r2, #19
 8006c06:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c08:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c0e:	4b4e      	ldr	r3, [pc, #312]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c14:	4b4c      	ldr	r3, [pc, #304]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006c1a:	4b4b      	ldr	r3, [pc, #300]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c20:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006c22:	4b49      	ldr	r3, [pc, #292]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c28:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_CIRCULAR;
 8006c2a:	4b47      	ldr	r3, [pc, #284]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c30:	4b45      	ldr	r3, [pc, #276]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8006c36:	4844      	ldr	r0, [pc, #272]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c38:	f002 fab0 	bl	800919c <HAL_DMA_Init>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_I2C_MspInit+0x1c2>
      Error_Handler();
 8006c42:	f7ff fcab 	bl	800659c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c4c:	4a3e      	ldr	r2, [pc, #248]	; (8006d48 <HAL_I2C_MspInit+0x2c4>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006c52:	e069      	b.n	8006d28 <HAL_I2C_MspInit+0x2a4>
  else if(hi2c->Instance==I2C3)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a3d      	ldr	r2, [pc, #244]	; (8006d50 <HAL_I2C_MspInit+0x2cc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d164      	bne.n	8006d28 <HAL_I2C_MspInit+0x2a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8006c64:	2300      	movs	r3, #0
 8006c66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f003 fe75 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 8006c78:	f7ff fc90 	bl	800659c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c7c:	4b2d      	ldr	r3, [pc, #180]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c80:	4a2c      	ldr	r2, [pc, #176]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c88:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006c94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c98:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c9a:	2312      	movs	r3, #18
 8006c9c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8006ca8:	2308      	movs	r3, #8
 8006caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4827      	ldr	r0, [pc, #156]	; (8006d54 <HAL_I2C_MspInit+0x2d0>)
 8006cb6:	f002 fd8f 	bl	80097d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006cba:	4b1e      	ldr	r3, [pc, #120]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <HAL_I2C_MspInit+0x2b0>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c3_tx.Instance = DMA2_Channel7;
 8006cd2:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006cd4:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <HAL_I2C_MspInit+0x2d8>)
 8006cd6:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8006cd8:	4b1f      	ldr	r3, [pc, #124]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006cda:	2215      	movs	r2, #21
 8006cdc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cde:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cea:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006cec:	2280      	movs	r2, #128	; 0x80
 8006cee:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006cf0:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cfe:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_CIRCULAR;
 8006d00:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006d02:	2220      	movs	r2, #32
 8006d04:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8006d0c:	4812      	ldr	r0, [pc, #72]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006d0e:	f002 fa45 	bl	800919c <HAL_DMA_Init>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <HAL_I2C_MspInit+0x298>
      Error_Handler();
 8006d18:	f7ff fc40 	bl	800659c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006d20:	639a      	str	r2, [r3, #56]	; 0x38
 8006d22:	4a0d      	ldr	r2, [pc, #52]	; (8006d58 <HAL_I2C_MspInit+0x2d4>)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006d28:	bf00      	nop
 8006d2a:	3788      	adds	r7, #136	; 0x88
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40005400 	.word	0x40005400
 8006d34:	40021000 	.word	0x40021000
 8006d38:	48000400 	.word	0x48000400
 8006d3c:	2000bb28 	.word	0x2000bb28
 8006d40:	40020044 	.word	0x40020044
 8006d44:	40005800 	.word	0x40005800
 8006d48:	2000bb88 	.word	0x2000bb88
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40007800 	.word	0x40007800
 8006d54:	48000800 	.word	0x48000800
 8006d58:	2000bbe8 	.word	0x2000bbe8
 8006d5c:	40020480 	.word	0x40020480

08006d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <HAL_TIM_Base_MspInit+0x80>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d10c      	bne.n	8006d8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006d78:	f043 0310 	orr.w	r3, r3, #16
 8006d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d7e:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8006d8a:	e022      	b.n	8006dd2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a15      	ldr	r2, [pc, #84]	; (8006de8 <HAL_TIM_Base_MspInit+0x88>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10c      	bne.n	8006db0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006d96:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9a:	4a12      	ldr	r2, [pc, #72]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006d9c:	f043 0320 	orr.w	r3, r3, #32
 8006da0:	6593      	str	r3, [r2, #88]	; 0x58
 8006da2:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
}
 8006dae:	e010      	b.n	8006dd2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a0d      	ldr	r2, [pc, #52]	; (8006dec <HAL_TIM_Base_MspInit+0x8c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d10b      	bne.n	8006dd2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbe:	4a09      	ldr	r2, [pc, #36]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <HAL_TIM_Base_MspInit+0x84>)
 8006dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40001000 	.word	0x40001000
 8006de4:	40021000 	.word	0x40021000
 8006de8:	40001400 	.word	0x40001400
 8006dec:	40015000 	.word	0x40015000

08006df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b0a4      	sub	sp, #144	; 0x90
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e0c:	2250      	movs	r2, #80	; 0x50
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f007 faec 	bl	800e3ee <memset>
  if(huart->Instance==USART1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7b      	ldr	r2, [pc, #492]	; (8007008 <HAL_UART_MspInit+0x218>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d165      	bne.n	8006eec <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006e20:	2301      	movs	r3, #1
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006e24:	2300      	movs	r3, #0
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f003 fd95 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006e38:	f7ff fbb0 	bl	800659c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e3c:	4b73      	ldr	r3, [pc, #460]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e40:	4a72      	ldr	r2, [pc, #456]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e46:	6613      	str	r3, [r2, #96]	; 0x60
 8006e48:	4b70      	ldr	r3, [pc, #448]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e54:	4b6d      	ldr	r3, [pc, #436]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e58:	4a6c      	ldr	r2, [pc, #432]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006e5a:	f043 0304 	orr.w	r3, r3, #4
 8006e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e60:	4b6a      	ldr	r3, [pc, #424]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006e6c:	2330      	movs	r3, #48	; 0x30
 8006e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e70:	2302      	movs	r3, #2
 8006e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e82:	2307      	movs	r3, #7
 8006e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4860      	ldr	r0, [pc, #384]	; (8007010 <HAL_UART_MspInit+0x220>)
 8006e90:	f002 fca2 	bl	80097d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8006e94:	4b5f      	ldr	r3, [pc, #380]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006e96:	4a60      	ldr	r2, [pc, #384]	; (8007018 <HAL_UART_MspInit+0x228>)
 8006e98:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006e9a:	4b5e      	ldr	r3, [pc, #376]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006e9c:	2219      	movs	r2, #25
 8006e9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ea0:	4b5c      	ldr	r3, [pc, #368]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006ea2:	2210      	movs	r2, #16
 8006ea4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ea6:	4b5b      	ldr	r3, [pc, #364]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006eac:	4b59      	ldr	r3, [pc, #356]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006eb2:	4b58      	ldr	r3, [pc, #352]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eb8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006eba:	4b56      	ldr	r3, [pc, #344]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8006ec2:	4b54      	ldr	r3, [pc, #336]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006ec8:	4b52      	ldr	r3, [pc, #328]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006ece:	4851      	ldr	r0, [pc, #324]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006ed0:	f002 f964 	bl	800919c <HAL_DMA_Init>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8006eda:	f7ff fb5f 	bl	800659c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a4c      	ldr	r2, [pc, #304]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006ee2:	67da      	str	r2, [r3, #124]	; 0x7c
 8006ee4:	4a4b      	ldr	r2, [pc, #300]	; (8007014 <HAL_UART_MspInit+0x224>)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006eea:	e12c      	b.n	8007146 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART2)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a4a      	ldr	r2, [pc, #296]	; (800701c <HAL_UART_MspInit+0x22c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	f040 809a 	bne.w	800702c <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006efc:	2300      	movs	r3, #0
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f04:	4618      	mov	r0, r3
 8006f06:	f003 fd29 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8006f10:	f7ff fb44 	bl	800659c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f14:	4b3d      	ldr	r3, [pc, #244]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f18:	4a3c      	ldr	r2, [pc, #240]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f20:	4b3a      	ldr	r3, [pc, #232]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f28:	623b      	str	r3, [r7, #32]
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f2c:	4b37      	ldr	r3, [pc, #220]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f30:	4a36      	ldr	r2, [pc, #216]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f38:	4b34      	ldr	r3, [pc, #208]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
 8006f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f44:	4b31      	ldr	r3, [pc, #196]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f48:	4a30      	ldr	r2, [pc, #192]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f4a:	f043 0308 	orr.w	r3, r3, #8
 8006f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f50:	4b2e      	ldr	r3, [pc, #184]	; (800700c <HAL_UART_MspInit+0x21c>)
 8006f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f60:	2302      	movs	r3, #2
 8006f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f72:	2307      	movs	r3, #7
 8006f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f82:	f002 fc29 	bl	80097d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006f86:	2340      	movs	r3, #64	; 0x40
 8006f88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f9c:	2307      	movs	r3, #7
 8006f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fa2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	481d      	ldr	r0, [pc, #116]	; (8007020 <HAL_UART_MspInit+0x230>)
 8006faa:	f002 fc15 	bl	80097d8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8006fae:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fb0:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <HAL_UART_MspInit+0x238>)
 8006fb2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fb6:	221b      	movs	r2, #27
 8006fb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fba:	4b1a      	ldr	r3, [pc, #104]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fbc:	2210      	movs	r2, #16
 8006fbe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fc0:	4b18      	ldr	r3, [pc, #96]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fc6:	4b17      	ldr	r3, [pc, #92]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fc8:	2280      	movs	r2, #128	; 0x80
 8006fca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006fcc:	4b15      	ldr	r3, [pc, #84]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fda:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8006fdc:	4b11      	ldr	r3, [pc, #68]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fde:	2220      	movs	r2, #32
 8006fe0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006fe2:	4b10      	ldr	r3, [pc, #64]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006fe8:	480e      	ldr	r0, [pc, #56]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006fea:	f002 f8d7 	bl	800919c <HAL_DMA_Init>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8006ff4:	f7ff fad2 	bl	800659c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <HAL_UART_MspInit+0x234>)
 8006ffc:	67da      	str	r2, [r3, #124]	; 0x7c
 8006ffe:	4a09      	ldr	r2, [pc, #36]	; (8007024 <HAL_UART_MspInit+0x234>)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007004:	e09f      	b.n	8007146 <HAL_UART_MspInit+0x356>
 8007006:	bf00      	nop
 8007008:	40013800 	.word	0x40013800
 800700c:	40021000 	.word	0x40021000
 8007010:	48000800 	.word	0x48000800
 8007014:	2000bee8 	.word	0x2000bee8
 8007018:	4002001c 	.word	0x4002001c
 800701c:	40004400 	.word	0x40004400
 8007020:	48000c00 	.word	0x48000c00
 8007024:	2000bf48 	.word	0x2000bf48
 8007028:	40020058 	.word	0x40020058
  else if(huart->Instance==USART3)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a47      	ldr	r2, [pc, #284]	; (8007150 <HAL_UART_MspInit+0x360>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f040 8087 	bne.w	8007146 <HAL_UART_MspInit+0x356>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007038:	2304      	movs	r3, #4
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800703c:	2300      	movs	r3, #0
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007044:	4618      	mov	r0, r3
 8007046:	f003 fc89 	bl	800a95c <HAL_RCCEx_PeriphCLKConfig>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_UART_MspInit+0x264>
      Error_Handler();
 8007050:	f7ff faa4 	bl	800659c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007054:	4b3f      	ldr	r3, [pc, #252]	; (8007154 <HAL_UART_MspInit+0x364>)
 8007056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007058:	4a3e      	ldr	r2, [pc, #248]	; (8007154 <HAL_UART_MspInit+0x364>)
 800705a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800705e:	6593      	str	r3, [r2, #88]	; 0x58
 8007060:	4b3c      	ldr	r3, [pc, #240]	; (8007154 <HAL_UART_MspInit+0x364>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800706c:	4b39      	ldr	r3, [pc, #228]	; (8007154 <HAL_UART_MspInit+0x364>)
 800706e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007070:	4a38      	ldr	r2, [pc, #224]	; (8007154 <HAL_UART_MspInit+0x364>)
 8007072:	f043 0310 	orr.w	r3, r3, #16
 8007076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007078:	4b36      	ldr	r3, [pc, #216]	; (8007154 <HAL_UART_MspInit+0x364>)
 800707a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007084:	4b33      	ldr	r3, [pc, #204]	; (8007154 <HAL_UART_MspInit+0x364>)
 8007086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007088:	4a32      	ldr	r2, [pc, #200]	; (8007154 <HAL_UART_MspInit+0x364>)
 800708a:	f043 0302 	orr.w	r3, r3, #2
 800708e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007090:	4b30      	ldr	r3, [pc, #192]	; (8007154 <HAL_UART_MspInit+0x364>)
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800709c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a2:	2302      	movs	r3, #2
 80070a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80070b4:	2307      	movs	r3, #7
 80070b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80070ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80070be:	4619      	mov	r1, r3
 80070c0:	4825      	ldr	r0, [pc, #148]	; (8007158 <HAL_UART_MspInit+0x368>)
 80070c2:	f002 fb89 	bl	80097d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80070c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070cc:	2302      	movs	r3, #2
 80070ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80070de:	2307      	movs	r3, #7
 80070e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80070e8:	4619      	mov	r1, r3
 80070ea:	481c      	ldr	r0, [pc, #112]	; (800715c <HAL_UART_MspInit+0x36c>)
 80070ec:	f002 fb74 	bl	80097d8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA2_Channel4;
 80070f0:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <HAL_UART_MspInit+0x370>)
 80070f2:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <HAL_UART_MspInit+0x374>)
 80070f4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80070f6:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <HAL_UART_MspInit+0x370>)
 80070f8:	221d      	movs	r2, #29
 80070fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070fc:	4b18      	ldr	r3, [pc, #96]	; (8007160 <HAL_UART_MspInit+0x370>)
 80070fe:	2210      	movs	r2, #16
 8007100:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007102:	4b17      	ldr	r3, [pc, #92]	; (8007160 <HAL_UART_MspInit+0x370>)
 8007104:	2200      	movs	r2, #0
 8007106:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007108:	4b15      	ldr	r3, [pc, #84]	; (8007160 <HAL_UART_MspInit+0x370>)
 800710a:	2280      	movs	r2, #128	; 0x80
 800710c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800710e:	4b14      	ldr	r3, [pc, #80]	; (8007160 <HAL_UART_MspInit+0x370>)
 8007110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007114:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007116:	4b12      	ldr	r3, [pc, #72]	; (8007160 <HAL_UART_MspInit+0x370>)
 8007118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800711c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <HAL_UART_MspInit+0x370>)
 8007120:	2220      	movs	r2, #32
 8007122:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007124:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <HAL_UART_MspInit+0x370>)
 8007126:	2200      	movs	r2, #0
 8007128:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800712a:	480d      	ldr	r0, [pc, #52]	; (8007160 <HAL_UART_MspInit+0x370>)
 800712c:	f002 f836 	bl	800919c <HAL_DMA_Init>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8007136:	f7ff fa31 	bl	800659c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a08      	ldr	r2, [pc, #32]	; (8007160 <HAL_UART_MspInit+0x370>)
 800713e:	67da      	str	r2, [r3, #124]	; 0x7c
 8007140:	4a07      	ldr	r2, [pc, #28]	; (8007160 <HAL_UART_MspInit+0x370>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007146:	bf00      	nop
 8007148:	3790      	adds	r7, #144	; 0x90
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40004800 	.word	0x40004800
 8007154:	40021000 	.word	0x40021000
 8007158:	48001000 	.word	0x48001000
 800715c:	48000400 	.word	0x48000400
 8007160:	2000bfa8 	.word	0x2000bfa8
 8007164:	40020444 	.word	0x40020444

08007168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800716c:	e7fe      	b.n	800716c <NMI_Handler+0x4>

0800716e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800716e:	b480      	push	{r7}
 8007170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007172:	e7fe      	b.n	8007172 <HardFault_Handler+0x4>

08007174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007178:	e7fe      	b.n	8007178 <MemManage_Handler+0x4>

0800717a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800717a:	b480      	push	{r7}
 800717c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800717e:	e7fe      	b.n	800717e <BusFault_Handler+0x4>

08007180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007184:	e7fe      	b.n	8007184 <UsageFault_Handler+0x4>

08007186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007186:	b480      	push	{r7}
 8007188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800718a:	bf00      	nop
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007198:	bf00      	nop
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80071a2:	b480      	push	{r7}
 80071a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80071a6:	bf00      	nop
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071b4:	f000 f9c4 	bl	8007540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}

080071bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80071c0:	4802      	ldr	r0, [pc, #8]	; (80071cc <DMA1_Channel1_IRQHandler+0x10>)
 80071c2:	f002 f90e 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80071c6:	bf00      	nop
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	2000b800 	.word	0x2000b800

080071d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80071d4:	4802      	ldr	r0, [pc, #8]	; (80071e0 <DMA1_Channel2_IRQHandler+0x10>)
 80071d6:	f002 f904 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80071da:	bf00      	nop
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	2000bee8 	.word	0x2000bee8

080071e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80071e8:	4802      	ldr	r0, [pc, #8]	; (80071f4 <DMA1_Channel3_IRQHandler+0x10>)
 80071ea:	f002 f8fa 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	2000b934 	.word	0x2000b934

080071f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <DMA1_Channel4_IRQHandler+0x10>)
 80071fe:	f002 f8f0 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	2000bb28 	.word	0x2000bb28

0800720c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007210:	4802      	ldr	r0, [pc, #8]	; (800721c <DMA1_Channel5_IRQHandler+0x10>)
 8007212:	f002 f8e6 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007216:	bf00      	nop
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	2000bf48 	.word	0x2000bf48

08007220 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007224:	4802      	ldr	r0, [pc, #8]	; (8007230 <DMA1_Channel6_IRQHandler+0x10>)
 8007226:	f002 f8dc 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000b860 	.word	0x2000b860

08007234 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8007238:	4802      	ldr	r0, [pc, #8]	; (8007244 <DMA2_Channel1_IRQHandler+0x10>)
 800723a:	f002 f8d2 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	2000b8c0 	.word	0x2000b8c0

08007248 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800724c:	4802      	ldr	r0, [pc, #8]	; (8007258 <DMA2_Channel4_IRQHandler+0x10>)
 800724e:	f002 f8c8 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	2000bfa8 	.word	0x2000bfa8

0800725c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8007260:	4802      	ldr	r0, [pc, #8]	; (800726c <DMA2_Channel5_IRQHandler+0x10>)
 8007262:	f002 f8be 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8007266:	bf00      	nop
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	2000bb88 	.word	0x2000bb88

08007270 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8007274:	4802      	ldr	r0, [pc, #8]	; (8007280 <DMA2_Channel6_IRQHandler+0x10>)
 8007276:	f002 f8b4 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800727a:	bf00      	nop
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	2000b994 	.word	0x2000b994

08007284 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8007288:	4802      	ldr	r0, [pc, #8]	; (8007294 <DMA2_Channel7_IRQHandler+0x10>)
 800728a:	f002 f8aa 	bl	80093e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 800728e:	bf00      	nop
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	2000bbe8 	.word	0x2000bbe8

08007298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return 1;
 800729c:	2301      	movs	r3, #1
}
 800729e:	4618      	mov	r0, r3
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <_kill>:

int _kill(int pid, int sig)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80072b2:	f007 f8ef 	bl	800e494 <__errno>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2216      	movs	r2, #22
 80072ba:	601a      	str	r2, [r3, #0]
  return -1;
 80072bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <_exit>:

void _exit (int status)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80072d0:	f04f 31ff 	mov.w	r1, #4294967295
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff ffe7 	bl	80072a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80072da:	e7fe      	b.n	80072da <_exit+0x12>

080072dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e00a      	b.n	8007304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80072ee:	f3af 8000 	nop.w
 80072f2:	4601      	mov	r1, r0
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	60ba      	str	r2, [r7, #8]
 80072fa:	b2ca      	uxtb	r2, r1
 80072fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3301      	adds	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	dbf0      	blt.n	80072ee <_read+0x12>
  }

  return len;
 800730c:	687b      	ldr	r3, [r7, #4]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	e009      	b.n	800733c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	60ba      	str	r2, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3301      	adds	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	dbf1      	blt.n	8007328 <_write+0x12>
  }
  return len;
 8007344:	687b      	ldr	r3, [r7, #4]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <_close>:

int _close(int file)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007376:	605a      	str	r2, [r3, #4]
  return 0;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <_isatty>:

int _isatty(int file)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800738e:	2301      	movs	r3, #1
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
	...

080073b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073c0:	4a14      	ldr	r2, [pc, #80]	; (8007414 <_sbrk+0x5c>)
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <_sbrk+0x60>)
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <_sbrk+0x64>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d102      	bne.n	80073da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80073d4:	4b11      	ldr	r3, [pc, #68]	; (800741c <_sbrk+0x64>)
 80073d6:	4a12      	ldr	r2, [pc, #72]	; (8007420 <_sbrk+0x68>)
 80073d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80073da:	4b10      	ldr	r3, [pc, #64]	; (800741c <_sbrk+0x64>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4413      	add	r3, r2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d207      	bcs.n	80073f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80073e8:	f007 f854 	bl	800e494 <__errno>
 80073ec:	4603      	mov	r3, r0
 80073ee:	220c      	movs	r2, #12
 80073f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	e009      	b.n	800740c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <_sbrk+0x64>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80073fe:	4b07      	ldr	r3, [pc, #28]	; (800741c <_sbrk+0x64>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	4a05      	ldr	r2, [pc, #20]	; (800741c <_sbrk+0x64>)
 8007408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	2001c000 	.word	0x2001c000
 8007418:	00000400 	.word	0x00000400
 800741c:	2001b4f8 	.word	0x2001b4f8
 8007420:	2001b650 	.word	0x2001b650

08007424 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <SystemInit+0x20>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742e:	4a05      	ldr	r2, [pc, #20]	; (8007444 <SystemInit+0x20>)
 8007430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007438:	bf00      	nop
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	e000ed00 	.word	0xe000ed00

08007448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007448:	480d      	ldr	r0, [pc, #52]	; (8007480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800744a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800744c:	f7ff ffea 	bl	8007424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007450:	480c      	ldr	r0, [pc, #48]	; (8007484 <LoopForever+0x6>)
  ldr r1, =_edata
 8007452:	490d      	ldr	r1, [pc, #52]	; (8007488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <LoopForever+0xe>)
  movs r3, #0
 8007456:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007458:	e002      	b.n	8007460 <LoopCopyDataInit>

0800745a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800745a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800745c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800745e:	3304      	adds	r3, #4

08007460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007464:	d3f9      	bcc.n	800745a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007466:	4a0a      	ldr	r2, [pc, #40]	; (8007490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007468:	4c0a      	ldr	r4, [pc, #40]	; (8007494 <LoopForever+0x16>)
  movs r3, #0
 800746a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800746c:	e001      	b.n	8007472 <LoopFillZerobss>

0800746e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800746e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007470:	3204      	adds	r2, #4

08007472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007474:	d3fb      	bcc.n	800746e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007476:	f007 f813 	bl	800e4a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800747a:	f7fd fcbd 	bl	8004df8 <main>

0800747e <LoopForever>:

LoopForever:
    b LoopForever
 800747e:	e7fe      	b.n	800747e <LoopForever>
  ldr   r0, =_estack
 8007480:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8007484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007488:	20007a50 	.word	0x20007a50
  ldr r2, =_sidata
 800748c:	08024960 	.word	0x08024960
  ldr r2, =_sbss
 8007490:	20007a50 	.word	0x20007a50
  ldr r4, =_ebss
 8007494:	2001b64c 	.word	0x2001b64c

08007498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007498:	e7fe      	b.n	8007498 <ADC1_2_IRQHandler>

0800749a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074a4:	2003      	movs	r0, #3
 80074a6:	f001 fc5f 	bl	8008d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80074aa:	200f      	movs	r0, #15
 80074ac:	f000 f80e 	bl	80074cc <HAL_InitTick>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	71fb      	strb	r3, [r7, #7]
 80074ba:	e001      	b.n	80074c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80074bc:	f7ff f874 	bl	80065a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80074c0:	79fb      	ldrb	r3, [r7, #7]

}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80074d8:	4b16      	ldr	r3, [pc, #88]	; (8007534 <HAL_InitTick+0x68>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d022      	beq.n	8007526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80074e0:	4b15      	ldr	r3, [pc, #84]	; (8007538 <HAL_InitTick+0x6c>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4b13      	ldr	r3, [pc, #76]	; (8007534 <HAL_InitTick+0x68>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80074ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80074f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fc6a 	bl	8008dce <HAL_SYSTICK_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10f      	bne.n	8007520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d809      	bhi.n	800751a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007506:	2200      	movs	r2, #0
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	f04f 30ff 	mov.w	r0, #4294967295
 800750e:	f001 fc36 	bl	8008d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007512:	4a0a      	ldr	r2, [pc, #40]	; (800753c <HAL_InitTick+0x70>)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	e007      	b.n	800752a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	73fb      	strb	r3, [r7, #15]
 800751e:	e004      	b.n	800752a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	e001      	b.n	800752a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	20007874 	.word	0x20007874
 8007538:	2000786c 	.word	0x2000786c
 800753c:	20007870 	.word	0x20007870

08007540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <HAL_IncTick+0x1c>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <HAL_IncTick+0x20>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4413      	add	r3, r2
 800754e:	4a03      	ldr	r2, [pc, #12]	; (800755c <HAL_IncTick+0x1c>)
 8007550:	6013      	str	r3, [r2, #0]
}
 8007552:	bf00      	nop
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	2001b4fc 	.word	0x2001b4fc
 8007560:	20007874 	.word	0x20007874

08007564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  return uwTick;
 8007568:	4b03      	ldr	r3, [pc, #12]	; (8007578 <HAL_GetTick+0x14>)
 800756a:	681b      	ldr	r3, [r3, #0]
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	2001b4fc 	.word	0x2001b4fc

0800757c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007584:	f7ff ffee 	bl	8007564 <HAL_GetTick>
 8007588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d004      	beq.n	80075a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <HAL_Delay+0x40>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80075a0:	bf00      	nop
 80075a2:	f7ff ffdf 	bl	8007564 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d8f7      	bhi.n	80075a2 <HAL_Delay+0x26>
  {
  }
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20007874 	.word	0x20007874

080075c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	609a      	str	r2, [r3, #8]
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	609a      	str	r2, [r3, #8]
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3360      	adds	r3, #96	; 0x60
 800763a:	461a      	mov	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4b08      	ldr	r3, [pc, #32]	; (800766c <LL_ADC_SetOffset+0x44>)
 800764a:	4013      	ands	r3, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	4313      	orrs	r3, r2
 8007658:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007660:	bf00      	nop
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	03fff000 	.word	0x03fff000

08007670 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3360      	adds	r3, #96	; 0x60
 800767e:	461a      	mov	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3360      	adds	r3, #96	; 0x60
 80076ac:	461a      	mov	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	431a      	orrs	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3360      	adds	r3, #96	; 0x60
 80076e2:	461a      	mov	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80076fc:	bf00      	nop
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3360      	adds	r3, #96	; 0x60
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	431a      	orrs	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	615a      	str	r2, [r3, #20]
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800778a:	b480      	push	{r7}
 800778c:	b087      	sub	sp, #28
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3330      	adds	r3, #48	; 0x30
 800779a:	461a      	mov	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	f003 030c 	and.w	r3, r3, #12
 80077a6:	4413      	add	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	211f      	movs	r1, #31
 80077b6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ba:	43db      	mvns	r3, r3
 80077bc:	401a      	ands	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	0e9b      	lsrs	r3, r3, #26
 80077c2:	f003 011f 	and.w	r1, r3, #31
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	fa01 f303 	lsl.w	r3, r1, r3
 80077d0:	431a      	orrs	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80077d6:	bf00      	nop
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b087      	sub	sp, #28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3314      	adds	r3, #20
 80077f2:	461a      	mov	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	0e5b      	lsrs	r3, r3, #25
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	4413      	add	r3, r2
 8007800:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	0d1b      	lsrs	r3, r3, #20
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2107      	movs	r1, #7
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	43db      	mvns	r3, r3
 8007816:	401a      	ands	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	0d1b      	lsrs	r3, r3, #20
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	431a      	orrs	r2, r3
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800782c:	bf00      	nop
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007850:	43db      	mvns	r3, r3
 8007852:	401a      	ands	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f003 0318 	and.w	r3, r3, #24
 800785a:	4908      	ldr	r1, [pc, #32]	; (800787c <LL_ADC_SetChannelSingleDiff+0x44>)
 800785c:	40d9      	lsrs	r1, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	400b      	ands	r3, r1
 8007862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007866:	431a      	orrs	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800786e:	bf00      	nop
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	0007ffff 	.word	0x0007ffff

08007880 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 031f 	and.w	r3, r3, #31
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80078ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6093      	str	r3, [r2, #8]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d4:	d101      	bne.n	80078da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80078f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80078fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007924:	d101      	bne.n	800792a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007948:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800794c:	f043 0201 	orr.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <LL_ADC_IsEnabled+0x18>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <LL_ADC_IsEnabled+0x1a>
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007996:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800799a:	f043 0204 	orr.w	r2, r3, #4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d101      	bne.n	80079c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d101      	bne.n	80079ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e000      	b.n	80079ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80079fc:	b590      	push	{r4, r7, lr}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e19b      	b.n	8007d4e <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe fde3 	bl	80065f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff ff3f 	bl	80078c0 <LL_ADC_IsDeepPowerDownEnabled>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff ff25 	bl	800789c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff ff5a 	bl	8007910 <LL_ADC_IsInternalRegulatorEnabled>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d115      	bne.n	8007a8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff ff3e 	bl	80078e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a6c:	4b97      	ldr	r3, [pc, #604]	; (8007ccc <HAL_ADC_Init+0x2d0>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	099b      	lsrs	r3, r3, #6
 8007a72:	4a97      	ldr	r2, [pc, #604]	; (8007cd0 <HAL_ADC_Init+0x2d4>)
 8007a74:	fba2 2303 	umull	r2, r3, r2, r3
 8007a78:	099b      	lsrs	r3, r3, #6
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007a80:	e002      	b.n	8007a88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f9      	bne.n	8007a82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff ff3c 	bl	8007910 <LL_ADC_IsInternalRegulatorEnabled>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10d      	bne.n	8007aba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa2:	f043 0210 	orr.w	r2, r3, #16
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aae:	f043 0201 	orr.w	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff ff75 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007ac4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 8134 	bne.w	8007d3c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 8130 	bne.w	8007d3c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007ae4:	f043 0202 	orr.w	r2, r3, #2
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff ff35 	bl	8007960 <LL_ADC_IsEnabled>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d137      	bne.n	8007b6c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b04:	d004      	beq.n	8007b10 <HAL_ADC_Init+0x114>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a72      	ldr	r2, [pc, #456]	; (8007cd4 <HAL_ADC_Init+0x2d8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10f      	bne.n	8007b30 <HAL_ADC_Init+0x134>
 8007b10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007b14:	f7ff ff24 	bl	8007960 <LL_ADC_IsEnabled>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	486e      	ldr	r0, [pc, #440]	; (8007cd4 <HAL_ADC_Init+0x2d8>)
 8007b1c:	f7ff ff20 	bl	8007960 <LL_ADC_IsEnabled>
 8007b20:	4603      	mov	r3, r0
 8007b22:	4323      	orrs	r3, r4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bf0c      	ite	eq
 8007b28:	2301      	moveq	r3, #1
 8007b2a:	2300      	movne	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	e008      	b.n	8007b42 <HAL_ADC_Init+0x146>
 8007b30:	4869      	ldr	r0, [pc, #420]	; (8007cd8 <HAL_ADC_Init+0x2dc>)
 8007b32:	f7ff ff15 	bl	8007960 <LL_ADC_IsEnabled>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2301      	moveq	r3, #1
 8007b3e:	2300      	movne	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d012      	beq.n	8007b6c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b4e:	d004      	beq.n	8007b5a <HAL_ADC_Init+0x15e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a5f      	ldr	r2, [pc, #380]	; (8007cd4 <HAL_ADC_Init+0x2d8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d101      	bne.n	8007b5e <HAL_ADC_Init+0x162>
 8007b5a:	4a60      	ldr	r2, [pc, #384]	; (8007cdc <HAL_ADC_Init+0x2e0>)
 8007b5c:	e000      	b.n	8007b60 <HAL_ADC_Init+0x164>
 8007b5e:	4a60      	ldr	r2, [pc, #384]	; (8007ce0 <HAL_ADC_Init+0x2e4>)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f7ff fd2a 	bl	80075c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7f5b      	ldrb	r3, [r3, #29]
 8007b70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007b7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007b82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d106      	bne.n	8007ba8 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	045b      	lsls	r3, r3, #17
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	4b46      	ldr	r3, [pc, #280]	; (8007ce4 <HAL_ADC_Init+0x2e8>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	69b9      	ldr	r1, [r7, #24]
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff feee 	bl	80079d4 <LL_ADC_INJ_IsConversionOngoing>
 8007bf8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d17b      	bne.n	8007cf8 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d178      	bne.n	8007cf8 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007c0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007c14:	4313      	orrs	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c22:	f023 0302 	bic.w	r3, r3, #2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	69b9      	ldr	r1, [r7, #24]
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691a      	ldr	r2, [r3, #16]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6911      	ldr	r1, [r2, #16]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	430b      	orrs	r3, r1
 8007c62:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007c66:	e013      	b.n	8007c90 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d126      	bne.n	8007ce8 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ca4:	f023 0304 	bic.w	r3, r3, #4
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cb0:	4311      	orrs	r1, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007cb6:	4311      	orrs	r1, r2
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0201 	orr.w	r2, r2, #1
 8007cc8:	611a      	str	r2, [r3, #16]
 8007cca:	e015      	b.n	8007cf8 <HAL_ADC_Init+0x2fc>
 8007ccc:	2000786c 	.word	0x2000786c
 8007cd0:	053e2d63 	.word	0x053e2d63
 8007cd4:	50000100 	.word	0x50000100
 8007cd8:	50000400 	.word	0x50000400
 8007cdc:	50000300 	.word	0x50000300
 8007ce0:	50000700 	.word	0x50000700
 8007ce4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0201 	bic.w	r2, r2, #1
 8007cf6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10c      	bne.n	8007d1a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	f023 010f 	bic.w	r1, r3, #15
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	1e5a      	subs	r2, r3, #1
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	631a      	str	r2, [r3, #48]	; 0x30
 8007d18:	e007      	b.n	8007d2a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 020f 	bic.w	r2, r2, #15
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	f043 0201 	orr.w	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d3a:	e007      	b.n	8007d4c <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d40:	f043 0210 	orr.w	r2, r3, #16
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3724      	adds	r7, #36	; 0x24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd90      	pop	{r4, r7, pc}
 8007d56:	bf00      	nop

08007d58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d6c:	d004      	beq.n	8007d78 <HAL_ADC_Start_DMA+0x20>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a57      	ldr	r2, [pc, #348]	; (8007ed0 <HAL_ADC_Start_DMA+0x178>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d101      	bne.n	8007d7c <HAL_ADC_Start_DMA+0x24>
 8007d78:	4b56      	ldr	r3, [pc, #344]	; (8007ed4 <HAL_ADC_Start_DMA+0x17c>)
 8007d7a:	e000      	b.n	8007d7e <HAL_ADC_Start_DMA+0x26>
 8007d7c:	4b56      	ldr	r3, [pc, #344]	; (8007ed8 <HAL_ADC_Start_DMA+0x180>)
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff fd7e 	bl	8007880 <LL_ADC_GetMultimode>
 8007d84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fe0f 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 8094 	bne.w	8007ec0 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_ADC_Start_DMA+0x4e>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e08f      	b.n	8007ec6 <HAL_ADC_Start_DMA+0x16e>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a4a      	ldr	r2, [pc, #296]	; (8007edc <HAL_ADC_Start_DMA+0x184>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d008      	beq.n	8007dca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b05      	cmp	r3, #5
 8007dc2:	d002      	beq.n	8007dca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d173      	bne.n	8007eb2 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 fcc4 	bl	8008758 <ADC_Enable>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d166      	bne.n	8007ea8 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a37      	ldr	r2, [pc, #220]	; (8007ed0 <HAL_ADC_Start_DMA+0x178>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d002      	beq.n	8007dfe <HAL_ADC_Start_DMA+0xa6>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	e001      	b.n	8007e02 <HAL_ADC_Start_DMA+0xaa>
 8007dfe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d002      	beq.n	8007e10 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d105      	bne.n	8007e1c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d006      	beq.n	8007e36 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2c:	f023 0206 	bic.w	r2, r3, #6
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	661a      	str	r2, [r3, #96]	; 0x60
 8007e34:	e002      	b.n	8007e3c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e40:	4a27      	ldr	r2, [pc, #156]	; (8007ee0 <HAL_ADC_Start_DMA+0x188>)
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e48:	4a26      	ldr	r2, [pc, #152]	; (8007ee4 <HAL_ADC_Start_DMA+0x18c>)
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	4a25      	ldr	r2, [pc, #148]	; (8007ee8 <HAL_ADC_Start_DMA+0x190>)
 8007e52:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	221c      	movs	r2, #28
 8007e5a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0210 	orr.w	r2, r2, #16
 8007e72:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0201 	orr.w	r2, r2, #1
 8007e82:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3340      	adds	r3, #64	; 0x40
 8007e8e:	4619      	mov	r1, r3
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f001 fa2a 	bl	80092ec <HAL_DMA_Start_IT>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fd70 	bl	8007986 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007ea6:	e00d      	b.n	8007ec4 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8007eb0:	e008      	b.n	8007ec4 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007ebe:	e001      	b.n	8007ec4 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	50000100 	.word	0x50000100
 8007ed4:	50000300 	.word	0x50000300
 8007ed8:	50000700 	.word	0x50000700
 8007edc:	50000400 	.word	0x50000400
 8007ee0:	08008885 	.word	0x08008885
 8007ee4:	0800895d 	.word	0x0800895d
 8007ee8:	08008979 	.word	0x08008979

08007eec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b0b6      	sub	sp, #216	; 0xd8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d102      	bne.n	8007f24 <HAL_ADC_ConfigChannel+0x24>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	f000 bc04 	b.w	800872c <HAL_ADC_ConfigChannel+0x82c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff fd3c 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 83e8 	bne.w	800870e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	6859      	ldr	r1, [r3, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f7ff fc1d 	bl	800778a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff fd2a 	bl	80079ae <LL_ADC_REG_IsConversionOngoing>
 8007f5a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fd36 	bl	80079d4 <LL_ADC_INJ_IsConversionOngoing>
 8007f68:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 81d9 	bne.w	8008328 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 81d4 	bne.w	8008328 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f88:	d10f      	bne.n	8007faa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	4619      	mov	r1, r3
 8007f96:	f7ff fc24 	bl	80077e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff fbcb 	bl	800773e <LL_ADC_SetSamplingTimeCommonConfig>
 8007fa8:	e00e      	b.n	8007fc8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6819      	ldr	r1, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7ff fc13 	bl	80077e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff fbbb 	bl	800773e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	08db      	lsrs	r3, r3, #3
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	fa02 f303 	lsl.w	r3, r2, r3
 8007fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d022      	beq.n	8008030 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6818      	ldr	r0, [r3, #0]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6919      	ldr	r1, [r3, #16]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ffa:	f7ff fb15 	bl	8007628 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6919      	ldr	r1, [r3, #16]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	461a      	mov	r2, r3
 800800c:	f7ff fb61 	bl	80076d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800801c:	2b01      	cmp	r3, #1
 800801e:	d102      	bne.n	8008026 <HAL_ADC_ConfigChannel+0x126>
 8008020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008024:	e000      	b.n	8008028 <HAL_ADC_ConfigChannel+0x128>
 8008026:	2300      	movs	r3, #0
 8008028:	461a      	mov	r2, r3
 800802a:	f7ff fb6d 	bl	8007708 <LL_ADC_SetOffsetSaturation>
 800802e:	e17b      	b.n	8008328 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fb1a 	bl	8007670 <LL_ADC_GetOffsetChannel>
 800803c:	4603      	mov	r3, r0
 800803e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <HAL_ADC_ConfigChannel+0x15c>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fb0f 	bl	8007670 <LL_ADC_GetOffsetChannel>
 8008052:	4603      	mov	r3, r0
 8008054:	0e9b      	lsrs	r3, r3, #26
 8008056:	f003 021f 	and.w	r2, r3, #31
 800805a:	e01e      	b.n	800809a <HAL_ADC_ConfigChannel+0x19a>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff fb04 	bl	8007670 <LL_ADC_GetOffsetChannel>
 8008068:	4603      	mov	r3, r0
 800806a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800806e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008072:	fa93 f3a3 	rbit	r3, r3
 8008076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800807a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800807e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800808a:	2320      	movs	r3, #32
 800808c:	e004      	b.n	8008098 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800808e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008092:	fab3 f383 	clz	r3, r3
 8008096:	b2db      	uxtb	r3, r3
 8008098:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d105      	bne.n	80080b2 <HAL_ADC_ConfigChannel+0x1b2>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	0e9b      	lsrs	r3, r3, #26
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	e018      	b.n	80080e4 <HAL_ADC_ConfigChannel+0x1e4>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080be:	fa93 f3a3 	rbit	r3, r3
 80080c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80080c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80080ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80080d6:	2320      	movs	r3, #32
 80080d8:	e004      	b.n	80080e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80080da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080de:	fab3 f383 	clz	r3, r3
 80080e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d106      	bne.n	80080f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2200      	movs	r2, #0
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fad3 	bl	800769c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2101      	movs	r1, #1
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff fab7 	bl	8007670 <LL_ADC_GetOffsetChannel>
 8008102:	4603      	mov	r3, r0
 8008104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <HAL_ADC_ConfigChannel+0x222>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2101      	movs	r1, #1
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff faac 	bl	8007670 <LL_ADC_GetOffsetChannel>
 8008118:	4603      	mov	r3, r0
 800811a:	0e9b      	lsrs	r3, r3, #26
 800811c:	f003 021f 	and.w	r2, r3, #31
 8008120:	e01e      	b.n	8008160 <HAL_ADC_ConfigChannel+0x260>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2101      	movs	r1, #1
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff faa1 	bl	8007670 <LL_ADC_GetOffsetChannel>
 800812e:	4603      	mov	r3, r0
 8008130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008138:	fa93 f3a3 	rbit	r3, r3
 800813c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008150:	2320      	movs	r3, #32
 8008152:	e004      	b.n	800815e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008158:	fab3 f383 	clz	r3, r3
 800815c:	b2db      	uxtb	r3, r3
 800815e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008168:	2b00      	cmp	r3, #0
 800816a:	d105      	bne.n	8008178 <HAL_ADC_ConfigChannel+0x278>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	0e9b      	lsrs	r3, r3, #26
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	e018      	b.n	80081aa <HAL_ADC_ConfigChannel+0x2aa>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008184:	fa93 f3a3 	rbit	r3, r3
 8008188:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800818c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800819c:	2320      	movs	r3, #32
 800819e:	e004      	b.n	80081aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80081a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081a4:	fab3 f383 	clz	r3, r3
 80081a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d106      	bne.n	80081bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	2101      	movs	r1, #1
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fa70 	bl	800769c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2102      	movs	r1, #2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fa54 	bl	8007670 <LL_ADC_GetOffsetChannel>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <HAL_ADC_ConfigChannel+0x2e8>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2102      	movs	r1, #2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fa49 	bl	8007670 <LL_ADC_GetOffsetChannel>
 80081de:	4603      	mov	r3, r0
 80081e0:	0e9b      	lsrs	r3, r3, #26
 80081e2:	f003 021f 	and.w	r2, r3, #31
 80081e6:	e01e      	b.n	8008226 <HAL_ADC_ConfigChannel+0x326>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2102      	movs	r1, #2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fa3e 	bl	8007670 <LL_ADC_GetOffsetChannel>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081fe:	fa93 f3a3 	rbit	r3, r3
 8008202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800820a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800820e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8008216:	2320      	movs	r3, #32
 8008218:	e004      	b.n	8008224 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800821a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800821e:	fab3 f383 	clz	r3, r3
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800822e:	2b00      	cmp	r3, #0
 8008230:	d105      	bne.n	800823e <HAL_ADC_ConfigChannel+0x33e>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	0e9b      	lsrs	r3, r3, #26
 8008238:	f003 031f 	and.w	r3, r3, #31
 800823c:	e016      	b.n	800826c <HAL_ADC_ConfigChannel+0x36c>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800824a:	fa93 f3a3 	rbit	r3, r3
 800824e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008250:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800825e:	2320      	movs	r3, #32
 8008260:	e004      	b.n	800826c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008266:	fab3 f383 	clz	r3, r3
 800826a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800826c:	429a      	cmp	r2, r3
 800826e:	d106      	bne.n	800827e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2200      	movs	r2, #0
 8008276:	2102      	movs	r1, #2
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff fa0f 	bl	800769c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2103      	movs	r1, #3
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff f9f3 	bl	8007670 <LL_ADC_GetOffsetChannel>
 800828a:	4603      	mov	r3, r0
 800828c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <HAL_ADC_ConfigChannel+0x3aa>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2103      	movs	r1, #3
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff f9e8 	bl	8007670 <LL_ADC_GetOffsetChannel>
 80082a0:	4603      	mov	r3, r0
 80082a2:	0e9b      	lsrs	r3, r3, #26
 80082a4:	f003 021f 	and.w	r2, r3, #31
 80082a8:	e017      	b.n	80082da <HAL_ADC_ConfigChannel+0x3da>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2103      	movs	r1, #3
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff f9dd 	bl	8007670 <LL_ADC_GetOffsetChannel>
 80082b6:	4603      	mov	r3, r0
 80082b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082bc:	fa93 f3a3 	rbit	r3, r3
 80082c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80082c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80082c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80082cc:	2320      	movs	r3, #32
 80082ce:	e003      	b.n	80082d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80082d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082d2:	fab3 f383 	clz	r3, r3
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d105      	bne.n	80082f2 <HAL_ADC_ConfigChannel+0x3f2>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	0e9b      	lsrs	r3, r3, #26
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	e011      	b.n	8008316 <HAL_ADC_ConfigChannel+0x416>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082fa:	fa93 f3a3 	rbit	r3, r3
 80082fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008302:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800830a:	2320      	movs	r3, #32
 800830c:	e003      	b.n	8008316 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800830e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008310:	fab3 f383 	clz	r3, r3
 8008314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008316:	429a      	cmp	r2, r3
 8008318:	d106      	bne.n	8008328 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2200      	movs	r2, #0
 8008320:	2103      	movs	r1, #3
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff f9ba 	bl	800769c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fb17 	bl	8007960 <LL_ADC_IsEnabled>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 813d 	bne.w	80085b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6819      	ldr	r1, [r3, #0]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	461a      	mov	r2, r3
 8008348:	f7ff fa76 	bl	8007838 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	4aa2      	ldr	r2, [pc, #648]	; (80085dc <HAL_ADC_ConfigChannel+0x6dc>)
 8008352:	4293      	cmp	r3, r2
 8008354:	f040 812e 	bne.w	80085b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <HAL_ADC_ConfigChannel+0x480>
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	0e9b      	lsrs	r3, r3, #26
 800836e:	3301      	adds	r3, #1
 8008370:	f003 031f 	and.w	r3, r3, #31
 8008374:	2b09      	cmp	r3, #9
 8008376:	bf94      	ite	ls
 8008378:	2301      	movls	r3, #1
 800837a:	2300      	movhi	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e019      	b.n	80083b4 <HAL_ADC_ConfigChannel+0x4b4>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008388:	fa93 f3a3 	rbit	r3, r3
 800838c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800838e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008390:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008398:	2320      	movs	r3, #32
 800839a:	e003      	b.n	80083a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800839c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800839e:	fab3 f383 	clz	r3, r3
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	3301      	adds	r3, #1
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	bf94      	ite	ls
 80083ae:	2301      	movls	r3, #1
 80083b0:	2300      	movhi	r3, #0
 80083b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d079      	beq.n	80084ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d107      	bne.n	80083d4 <HAL_ADC_ConfigChannel+0x4d4>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	0e9b      	lsrs	r3, r3, #26
 80083ca:	3301      	adds	r3, #1
 80083cc:	069b      	lsls	r3, r3, #26
 80083ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80083d2:	e015      	b.n	8008400 <HAL_ADC_ConfigChannel+0x500>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083dc:	fa93 f3a3 	rbit	r3, r3
 80083e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80083e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80083e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80083ec:	2320      	movs	r3, #32
 80083ee:	e003      	b.n	80083f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80083f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083f2:	fab3 f383 	clz	r3, r3
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	3301      	adds	r3, #1
 80083fa:	069b      	lsls	r3, r3, #26
 80083fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <HAL_ADC_ConfigChannel+0x520>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	0e9b      	lsrs	r3, r3, #26
 8008412:	3301      	adds	r3, #1
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	2101      	movs	r1, #1
 800841a:	fa01 f303 	lsl.w	r3, r1, r3
 800841e:	e017      	b.n	8008450 <HAL_ADC_ConfigChannel+0x550>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008428:	fa93 f3a3 	rbit	r3, r3
 800842c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800842e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008430:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8008438:	2320      	movs	r3, #32
 800843a:	e003      	b.n	8008444 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800843c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800843e:	fab3 f383 	clz	r3, r3
 8008442:	b2db      	uxtb	r3, r3
 8008444:	3301      	adds	r3, #1
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	2101      	movs	r1, #1
 800844c:	fa01 f303 	lsl.w	r3, r1, r3
 8008450:	ea42 0103 	orr.w	r1, r2, r3
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <HAL_ADC_ConfigChannel+0x576>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	0e9b      	lsrs	r3, r3, #26
 8008466:	3301      	adds	r3, #1
 8008468:	f003 021f 	and.w	r2, r3, #31
 800846c:	4613      	mov	r3, r2
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	4413      	add	r3, r2
 8008472:	051b      	lsls	r3, r3, #20
 8008474:	e018      	b.n	80084a8 <HAL_ADC_ConfigChannel+0x5a8>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	fa93 f3a3 	rbit	r3, r3
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800848e:	2320      	movs	r3, #32
 8008490:	e003      	b.n	800849a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8008492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008494:	fab3 f383 	clz	r3, r3
 8008498:	b2db      	uxtb	r3, r3
 800849a:	3301      	adds	r3, #1
 800849c:	f003 021f 	and.w	r2, r3, #31
 80084a0:	4613      	mov	r3, r2
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	4413      	add	r3, r2
 80084a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80084a8:	430b      	orrs	r3, r1
 80084aa:	e07e      	b.n	80085aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d107      	bne.n	80084c8 <HAL_ADC_ConfigChannel+0x5c8>
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	0e9b      	lsrs	r3, r3, #26
 80084be:	3301      	adds	r3, #1
 80084c0:	069b      	lsls	r3, r3, #26
 80084c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80084c6:	e015      	b.n	80084f4 <HAL_ADC_ConfigChannel+0x5f4>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	fa93 f3a3 	rbit	r3, r3
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80084e0:	2320      	movs	r3, #32
 80084e2:	e003      	b.n	80084ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	fab3 f383 	clz	r3, r3
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	3301      	adds	r3, #1
 80084ee:	069b      	lsls	r3, r3, #26
 80084f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <HAL_ADC_ConfigChannel+0x614>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	0e9b      	lsrs	r3, r3, #26
 8008506:	3301      	adds	r3, #1
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	2101      	movs	r1, #1
 800850e:	fa01 f303 	lsl.w	r3, r1, r3
 8008512:	e017      	b.n	8008544 <HAL_ADC_ConfigChannel+0x644>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	fa93 f3a3 	rbit	r3, r3
 8008520:	61fb      	str	r3, [r7, #28]
  return result;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800852c:	2320      	movs	r3, #32
 800852e:	e003      	b.n	8008538 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	fab3 f383 	clz	r3, r3
 8008536:	b2db      	uxtb	r3, r3
 8008538:	3301      	adds	r3, #1
 800853a:	f003 031f 	and.w	r3, r3, #31
 800853e:	2101      	movs	r1, #1
 8008540:	fa01 f303 	lsl.w	r3, r1, r3
 8008544:	ea42 0103 	orr.w	r1, r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10d      	bne.n	8008570 <HAL_ADC_ConfigChannel+0x670>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	0e9b      	lsrs	r3, r3, #26
 800855a:	3301      	adds	r3, #1
 800855c:	f003 021f 	and.w	r2, r3, #31
 8008560:	4613      	mov	r3, r2
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	3b1e      	subs	r3, #30
 8008568:	051b      	lsls	r3, r3, #20
 800856a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800856e:	e01b      	b.n	80085a8 <HAL_ADC_ConfigChannel+0x6a8>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	fa93 f3a3 	rbit	r3, r3
 800857c:	613b      	str	r3, [r7, #16]
  return result;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8008588:	2320      	movs	r3, #32
 800858a:	e003      	b.n	8008594 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	fab3 f383 	clz	r3, r3
 8008592:	b2db      	uxtb	r3, r3
 8008594:	3301      	adds	r3, #1
 8008596:	f003 021f 	and.w	r2, r3, #31
 800859a:	4613      	mov	r3, r2
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	4413      	add	r3, r2
 80085a0:	3b1e      	subs	r3, #30
 80085a2:	051b      	lsls	r3, r3, #20
 80085a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085ae:	4619      	mov	r1, r3
 80085b0:	f7ff f917 	bl	80077e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80af 	beq.w	8008720 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ca:	d004      	beq.n	80085d6 <HAL_ADC_ConfigChannel+0x6d6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d10a      	bne.n	80085ec <HAL_ADC_ConfigChannel+0x6ec>
 80085d6:	4b04      	ldr	r3, [pc, #16]	; (80085e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80085d8:	e009      	b.n	80085ee <HAL_ADC_ConfigChannel+0x6ee>
 80085da:	bf00      	nop
 80085dc:	407f0000 	.word	0x407f0000
 80085e0:	80080000 	.word	0x80080000
 80085e4:	50000100 	.word	0x50000100
 80085e8:	50000300 	.word	0x50000300
 80085ec:	4b51      	ldr	r3, [pc, #324]	; (8008734 <HAL_ADC_ConfigChannel+0x834>)
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff f80c 	bl	800760c <LL_ADC_GetCommonPathInternalCh>
 80085f4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a4e      	ldr	r2, [pc, #312]	; (8008738 <HAL_ADC_ConfigChannel+0x838>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <HAL_ADC_ConfigChannel+0x70c>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a4d      	ldr	r2, [pc, #308]	; (800873c <HAL_ADC_ConfigChannel+0x83c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d134      	bne.n	8008676 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800860c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d12e      	bne.n	8008676 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008620:	d17e      	bne.n	8008720 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800862a:	d004      	beq.n	8008636 <HAL_ADC_ConfigChannel+0x736>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a43      	ldr	r2, [pc, #268]	; (8008740 <HAL_ADC_ConfigChannel+0x840>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d101      	bne.n	800863a <HAL_ADC_ConfigChannel+0x73a>
 8008636:	4a43      	ldr	r2, [pc, #268]	; (8008744 <HAL_ADC_ConfigChannel+0x844>)
 8008638:	e000      	b.n	800863c <HAL_ADC_ConfigChannel+0x73c>
 800863a:	4a3e      	ldr	r2, [pc, #248]	; (8008734 <HAL_ADC_ConfigChannel+0x834>)
 800863c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f7fe ffcd 	bl	80075e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800864c:	4b3e      	ldr	r3, [pc, #248]	; (8008748 <HAL_ADC_ConfigChannel+0x848>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	099b      	lsrs	r3, r3, #6
 8008652:	4a3e      	ldr	r2, [pc, #248]	; (800874c <HAL_ADC_ConfigChannel+0x84c>)
 8008654:	fba2 2303 	umull	r2, r3, r2, r3
 8008658:	099b      	lsrs	r3, r3, #6
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	4613      	mov	r3, r2
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008666:	e002      	b.n	800866e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3b01      	subs	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f9      	bne.n	8008668 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008674:	e054      	b.n	8008720 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a35      	ldr	r2, [pc, #212]	; (8008750 <HAL_ADC_ConfigChannel+0x850>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d120      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d11a      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008694:	d144      	bne.n	8008720 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800869e:	d004      	beq.n	80086aa <HAL_ADC_ConfigChannel+0x7aa>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a26      	ldr	r2, [pc, #152]	; (8008740 <HAL_ADC_ConfigChannel+0x840>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d101      	bne.n	80086ae <HAL_ADC_ConfigChannel+0x7ae>
 80086aa:	4a26      	ldr	r2, [pc, #152]	; (8008744 <HAL_ADC_ConfigChannel+0x844>)
 80086ac:	e000      	b.n	80086b0 <HAL_ADC_ConfigChannel+0x7b0>
 80086ae:	4a21      	ldr	r2, [pc, #132]	; (8008734 <HAL_ADC_ConfigChannel+0x834>)
 80086b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe ff93 	bl	80075e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80086c0:	e02e      	b.n	8008720 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a23      	ldr	r2, [pc, #140]	; (8008754 <HAL_ADC_ConfigChannel+0x854>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d129      	bne.n	8008720 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80086cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d123      	bne.n	8008720 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a18      	ldr	r2, [pc, #96]	; (8008740 <HAL_ADC_ConfigChannel+0x840>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01e      	beq.n	8008720 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086ea:	d004      	beq.n	80086f6 <HAL_ADC_ConfigChannel+0x7f6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a13      	ldr	r2, [pc, #76]	; (8008740 <HAL_ADC_ConfigChannel+0x840>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d101      	bne.n	80086fa <HAL_ADC_ConfigChannel+0x7fa>
 80086f6:	4a13      	ldr	r2, [pc, #76]	; (8008744 <HAL_ADC_ConfigChannel+0x844>)
 80086f8:	e000      	b.n	80086fc <HAL_ADC_ConfigChannel+0x7fc>
 80086fa:	4a0e      	ldr	r2, [pc, #56]	; (8008734 <HAL_ADC_ConfigChannel+0x834>)
 80086fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe ff6d 	bl	80075e6 <LL_ADC_SetCommonPathInternalCh>
 800870c:	e008      	b.n	8008720 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008712:	f043 0220 	orr.w	r2, r3, #32
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008728:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800872c:	4618      	mov	r0, r3
 800872e:	37d8      	adds	r7, #216	; 0xd8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	50000700 	.word	0x50000700
 8008738:	c3210000 	.word	0xc3210000
 800873c:	90c00010 	.word	0x90c00010
 8008740:	50000100 	.word	0x50000100
 8008744:	50000300 	.word	0x50000300
 8008748:	2000786c 	.word	0x2000786c
 800874c:	053e2d63 	.word	0x053e2d63
 8008750:	c7520000 	.word	0xc7520000
 8008754:	cb840000 	.word	0xcb840000

08008758 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008760:	2300      	movs	r3, #0
 8008762:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff f8f9 	bl	8007960 <LL_ADC_IsEnabled>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d176      	bne.n	8008862 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	4b3c      	ldr	r3, [pc, #240]	; (800886c <ADC_Enable+0x114>)
 800877c:	4013      	ands	r3, r2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00d      	beq.n	800879e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008786:	f043 0210 	orr.w	r2, r3, #16
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008792:	f043 0201 	orr.w	r2, r3, #1
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e062      	b.n	8008864 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff f8c8 	bl	8007938 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087b0:	d004      	beq.n	80087bc <ADC_Enable+0x64>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2e      	ldr	r2, [pc, #184]	; (8008870 <ADC_Enable+0x118>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d101      	bne.n	80087c0 <ADC_Enable+0x68>
 80087bc:	4b2d      	ldr	r3, [pc, #180]	; (8008874 <ADC_Enable+0x11c>)
 80087be:	e000      	b.n	80087c2 <ADC_Enable+0x6a>
 80087c0:	4b2d      	ldr	r3, [pc, #180]	; (8008878 <ADC_Enable+0x120>)
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe ff22 	bl	800760c <LL_ADC_GetCommonPathInternalCh>
 80087c8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80087ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d013      	beq.n	80087fa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80087d2:	4b2a      	ldr	r3, [pc, #168]	; (800887c <ADC_Enable+0x124>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	099b      	lsrs	r3, r3, #6
 80087d8:	4a29      	ldr	r2, [pc, #164]	; (8008880 <ADC_Enable+0x128>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	099b      	lsrs	r3, r3, #6
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	4613      	mov	r3, r2
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80087ec:	e002      	b.n	80087f4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f9      	bne.n	80087ee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80087fa:	f7fe feb3 	bl	8007564 <HAL_GetTick>
 80087fe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008800:	e028      	b.n	8008854 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff f8aa 	bl	8007960 <LL_ADC_IsEnabled>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff f88e 	bl	8007938 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800881c:	f7fe fea2 	bl	8007564 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d914      	bls.n	8008854 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b01      	cmp	r3, #1
 8008836:	d00d      	beq.n	8008854 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	f043 0210 	orr.w	r2, r3, #16
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008848:	f043 0201 	orr.w	r2, r3, #1
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e007      	b.n	8008864 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b01      	cmp	r3, #1
 8008860:	d1cf      	bne.n	8008802 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	8000003f 	.word	0x8000003f
 8008870:	50000100 	.word	0x50000100
 8008874:	50000300 	.word	0x50000300
 8008878:	50000700 	.word	0x50000700
 800887c:	2000786c 	.word	0x2000786c
 8008880:	053e2d63 	.word	0x053e2d63

08008884 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008896:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800889a:	2b00      	cmp	r3, #0
 800889c:	d14b      	bne.n	8008936 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0308 	and.w	r3, r3, #8
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d021      	beq.n	80088fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe ff51 	bl	8007764 <LL_ADC_REG_IsTriggerSourceSWStart>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d032      	beq.n	800892e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d12b      	bne.n	800892e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d11f      	bne.n	800892e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f2:	f043 0201 	orr.w	r2, r3, #1
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80088fa:	e018      	b.n	800892e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d111      	bne.n	800892e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800890e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800891a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008926:	f043 0201 	orr.w	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7fd fd92 	bl	8006458 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008934:	e00e      	b.n	8008954 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800893a:	f003 0310 	and.w	r3, r3, #16
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7ff fad2 	bl	8007eec <HAL_ADC_ErrorCallback>
}
 8008948:	e004      	b.n	8008954 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7fd fce6 	bl	800633c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008996:	f043 0204 	orr.w	r2, r3, #4
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff faa4 	bl	8007eec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <LL_ADC_IsEnabled>:
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d101      	bne.n	80089c4 <LL_ADC_IsEnabled+0x18>
 80089c0:	2301      	movs	r3, #1
 80089c2:	e000      	b.n	80089c6 <LL_ADC_IsEnabled+0x1a>
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f003 0304 	and.w	r3, r3, #4
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d101      	bne.n	80089ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80089f8:	b590      	push	{r4, r7, lr}
 80089fa:	b0a1      	sub	sp, #132	; 0x84
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d101      	bne.n	8008a16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008a12:	2302      	movs	r3, #2
 8008a14:	e0cb      	b.n	8008bae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008a1e:	2300      	movs	r3, #0
 8008a20:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008a22:	2300      	movs	r3, #0
 8008a24:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a2e:	d102      	bne.n	8008a36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008a30:	4b61      	ldr	r3, [pc, #388]	; (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	e001      	b.n	8008a3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a44:	f043 0220 	orr.w	r2, r3, #32
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e0aa      	b.n	8008bae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff ffb9 	bl	80089d2 <LL_ADC_REG_IsConversionOngoing>
 8008a60:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff ffb3 	bl	80089d2 <LL_ADC_REG_IsConversionOngoing>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 808c 	bne.w	8008b8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f040 8088 	bne.w	8008b8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a84:	d004      	beq.n	8008a90 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a4b      	ldr	r2, [pc, #300]	; (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d101      	bne.n	8008a94 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8008a90:	4b4a      	ldr	r3, [pc, #296]	; (8008bbc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8008a92:	e000      	b.n	8008a96 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008a94:	4b4a      	ldr	r3, [pc, #296]	; (8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8008a96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d041      	beq.n	8008b24 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	6859      	ldr	r1, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ab2:	035b      	lsls	r3, r3, #13
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ac4:	d004      	beq.n	8008ad0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3b      	ldr	r2, [pc, #236]	; (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10f      	bne.n	8008af0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8008ad0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008ad4:	f7ff ff6a 	bl	80089ac <LL_ADC_IsEnabled>
 8008ad8:	4604      	mov	r4, r0
 8008ada:	4837      	ldr	r0, [pc, #220]	; (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008adc:	f7ff ff66 	bl	80089ac <LL_ADC_IsEnabled>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4323      	orrs	r3, r4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	e008      	b.n	8008b02 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8008af0:	4834      	ldr	r0, [pc, #208]	; (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8008af2:	f7ff ff5b 	bl	80089ac <LL_ADC_IsEnabled>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	bf0c      	ite	eq
 8008afc:	2301      	moveq	r3, #1
 8008afe:	2300      	movne	r3, #0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d04c      	beq.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008b0e:	f023 030f 	bic.w	r3, r3, #15
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	6811      	ldr	r1, [r2, #0]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	6892      	ldr	r2, [r2, #8]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b20:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008b22:	e03d      	b.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b38:	d004      	beq.n	8008b44 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1e      	ldr	r2, [pc, #120]	; (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d10f      	bne.n	8008b64 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8008b44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008b48:	f7ff ff30 	bl	80089ac <LL_ADC_IsEnabled>
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	481a      	ldr	r0, [pc, #104]	; (8008bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b50:	f7ff ff2c 	bl	80089ac <LL_ADC_IsEnabled>
 8008b54:	4603      	mov	r3, r0
 8008b56:	4323      	orrs	r3, r4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2301      	moveq	r3, #1
 8008b5e:	2300      	movne	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	e008      	b.n	8008b76 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8008b64:	4817      	ldr	r0, [pc, #92]	; (8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8008b66:	f7ff ff21 	bl	80089ac <LL_ADC_IsEnabled>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d012      	beq.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008b82:	f023 030f 	bic.w	r3, r3, #15
 8008b86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008b88:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008b8a:	e009      	b.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b90:	f043 0220 	orr.w	r2, r3, #32
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008b9e:	e000      	b.n	8008ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008ba0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008baa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3784      	adds	r7, #132	; 0x84
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd90      	pop	{r4, r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	50000100 	.word	0x50000100
 8008bbc:	50000300 	.word	0x50000300
 8008bc0:	50000700 	.word	0x50000700
 8008bc4:	50000400 	.word	0x50000400

08008bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <__NVIC_SetPriorityGrouping+0x44>)
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008be4:	4013      	ands	r3, r2
 8008be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bfa:	4a04      	ldr	r2, [pc, #16]	; (8008c0c <__NVIC_SetPriorityGrouping+0x44>)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	60d3      	str	r3, [r2, #12]
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	e000ed00 	.word	0xe000ed00

08008c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c10:	b480      	push	{r7}
 8008c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c14:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <__NVIC_GetPriorityGrouping+0x18>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	0a1b      	lsrs	r3, r3, #8
 8008c1a:	f003 0307 	and.w	r3, r3, #7
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	e000ed00 	.word	0xe000ed00

08008c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	db0b      	blt.n	8008c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	f003 021f 	and.w	r2, r3, #31
 8008c44:	4907      	ldr	r1, [pc, #28]	; (8008c64 <__NVIC_EnableIRQ+0x38>)
 8008c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c4a:	095b      	lsrs	r3, r3, #5
 8008c4c:	2001      	movs	r0, #1
 8008c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8008c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	e000e100 	.word	0xe000e100

08008c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	db0a      	blt.n	8008c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	490c      	ldr	r1, [pc, #48]	; (8008cb4 <__NVIC_SetPriority+0x4c>)
 8008c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c86:	0112      	lsls	r2, r2, #4
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c90:	e00a      	b.n	8008ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	4908      	ldr	r1, [pc, #32]	; (8008cb8 <__NVIC_SetPriority+0x50>)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	3b04      	subs	r3, #4
 8008ca0:	0112      	lsls	r2, r2, #4
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	761a      	strb	r2, [r3, #24]
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	e000e100 	.word	0xe000e100
 8008cb8:	e000ed00 	.word	0xe000ed00

08008cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b089      	sub	sp, #36	; 0x24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f1c3 0307 	rsb	r3, r3, #7
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	bf28      	it	cs
 8008cda:	2304      	movcs	r3, #4
 8008cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	2b06      	cmp	r3, #6
 8008ce4:	d902      	bls.n	8008cec <NVIC_EncodePriority+0x30>
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	3b03      	subs	r3, #3
 8008cea:	e000      	b.n	8008cee <NVIC_EncodePriority+0x32>
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	43da      	mvns	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	401a      	ands	r2, r3
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d04:	f04f 31ff 	mov.w	r1, #4294967295
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0e:	43d9      	mvns	r1, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d14:	4313      	orrs	r3, r2
         );
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3724      	adds	r7, #36	; 0x24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
	...

08008d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d34:	d301      	bcc.n	8008d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d36:	2301      	movs	r3, #1
 8008d38:	e00f      	b.n	8008d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <SysTick_Config+0x40>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d42:	210f      	movs	r1, #15
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	f7ff ff8e 	bl	8008c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d4c:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <SysTick_Config+0x40>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d52:	4b04      	ldr	r3, [pc, #16]	; (8008d64 <SysTick_Config+0x40>)
 8008d54:	2207      	movs	r2, #7
 8008d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	e000e010 	.word	0xe000e010

08008d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff ff29 	bl	8008bc8 <__NVIC_SetPriorityGrouping>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	4603      	mov	r3, r0
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d8c:	f7ff ff40 	bl	8008c10 <__NVIC_GetPriorityGrouping>
 8008d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	6978      	ldr	r0, [r7, #20]
 8008d98:	f7ff ff90 	bl	8008cbc <NVIC_EncodePriority>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff ff5f 	bl	8008c68 <__NVIC_SetPriority>
}
 8008daa:	bf00      	nop
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	4603      	mov	r3, r0
 8008dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff ff33 	bl	8008c2c <__NVIC_EnableIRQ>
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff ffa4 	bl	8008d24 <SysTick_Config>
 8008ddc:	4603      	mov	r3, r0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e014      	b.n	8008e22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	791b      	ldrb	r3, [r3, #4]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d105      	bne.n	8008e0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7fd fd7f 	bl	800690c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2202      	movs	r2, #2
 8008e12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	; 0x28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <HAL_DAC_ConfigChannel+0x1c>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e19e      	b.n	800918a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	795b      	ldrb	r3, [r3, #5]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_DAC_ConfigChannel+0x2c>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e198      	b.n	800918a <HAL_DAC_ConfigChannel+0x35e>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2202      	movs	r2, #2
 8008e62:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d17a      	bne.n	8008f62 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008e6c:	f7fe fb7a 	bl	8007564 <HAL_GetTick>
 8008e70:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d13d      	bne.n	8008ef4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008e78:	e018      	b.n	8008eac <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008e7a:	f7fe fb73 	bl	8007564 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d911      	bls.n	8008eac <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f043 0208 	orr.w	r2, r3, #8
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e16e      	b.n	800918a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1df      	bne.n	8008e7a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ec2:	641a      	str	r2, [r3, #64]	; 0x40
 8008ec4:	e020      	b.n	8008f08 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008ec6:	f7fe fb4d 	bl	8007564 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d90f      	bls.n	8008ef4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da0a      	bge.n	8008ef4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f043 0208 	orr.w	r2, r3, #8
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2203      	movs	r2, #3
 8008eee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e14a      	b.n	800918a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dbe3      	blt.n	8008ec6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f06:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008f18:	fa01 f303 	lsl.w	r3, r1, r3
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	ea02 0103 	and.w	r1, r2, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	409a      	lsls	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f003 0310 	and.w	r3, r3, #16
 8008f42:	21ff      	movs	r1, #255	; 0xff
 8008f44:	fa01 f303 	lsl.w	r3, r1, r3
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	ea02 0103 	and.w	r1, r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	409a      	lsls	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d11d      	bne.n	8008fa6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	221f      	movs	r2, #31
 8008f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7e:	43db      	mvns	r3, r3
 8008f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f82:	4013      	ands	r3, r2
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2207      	movs	r2, #7
 8008fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fba:	43db      	mvns	r3, r3
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d102      	bne.n	8008fd0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	623b      	str	r3, [r7, #32]
 8008fce:	e00f      	b.n	8008ff0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d102      	bne.n	8008fde <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	623b      	str	r3, [r7, #32]
 8008fdc:	e008      	b.n	8008ff0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d102      	bne.n	8008fec <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	623b      	str	r3, [r7, #32]
 8008fea:	e001      	b.n	8008ff0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	6a3a      	ldr	r2, [r7, #32]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f003 0310 	and.w	r3, r3, #16
 8009006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	43db      	mvns	r3, r3
 8009010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009012:	4013      	ands	r3, r2
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d102      	bne.n	8009024 <HAL_DAC_ConfigChannel+0x1f8>
 800901e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009022:	e000      	b.n	8009026 <HAL_DAC_ConfigChannel+0x1fa>
 8009024:	2300      	movs	r3, #0
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f003 0310 	and.w	r3, r3, #16
 8009032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	43db      	mvns	r3, r3
 800903c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903e:	4013      	ands	r3, r2
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	795b      	ldrb	r3, [r3, #5]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d102      	bne.n	8009050 <HAL_DAC_ConfigChannel+0x224>
 800904a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800904e:	e000      	b.n	8009052 <HAL_DAC_ConfigChannel+0x226>
 8009050:	2300      	movs	r3, #0
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	4313      	orrs	r3, r2
 8009056:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d114      	bne.n	8009092 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009068:	f001 fbfc 	bl	800a864 <HAL_RCC_GetHCLKFreq>
 800906c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	4a48      	ldr	r2, [pc, #288]	; (8009194 <HAL_DAC_ConfigChannel+0x368>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d904      	bls.n	8009080 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
 800907e:	e00f      	b.n	80090a0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4a45      	ldr	r2, [pc, #276]	; (8009198 <HAL_DAC_ConfigChannel+0x36c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d90a      	bls.n	800909e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
 8009090:	e006      	b.n	80090a0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009098:	4313      	orrs	r3, r2
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
 800909c:	e000      	b.n	80090a0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800909e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f003 0310 	and.w	r3, r3, #16
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ae:	4313      	orrs	r3, r2
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6819      	ldr	r1, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f003 0310 	and.w	r3, r3, #16
 80090c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	43da      	mvns	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	400a      	ands	r2, r1
 80090d6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f003 0310 	and.w	r3, r3, #16
 80090e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	43db      	mvns	r3, r3
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	4013      	ands	r3, r2
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f003 0310 	and.w	r3, r3, #16
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	fa02 f303 	lsl.w	r3, r2, r3
 8009108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800910a:	4313      	orrs	r3, r2
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009114:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6819      	ldr	r1, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f003 0310 	and.w	r3, r3, #16
 8009122:	22c0      	movs	r2, #192	; 0xc0
 8009124:	fa02 f303 	lsl.w	r3, r2, r3
 8009128:	43da      	mvns	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	400a      	ands	r2, r1
 8009130:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	089b      	lsrs	r3, r3, #2
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	089b      	lsrs	r3, r3, #2
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009160:	fa01 f303 	lsl.w	r3, r1, r3
 8009164:	43db      	mvns	r3, r3
 8009166:	ea02 0103 	and.w	r1, r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f003 0310 	and.w	r3, r3, #16
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	409a      	lsls	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009188:	7ffb      	ldrb	r3, [r7, #31]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3728      	adds	r7, #40	; 0x28
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	09896800 	.word	0x09896800
 8009198:	04c4b400 	.word	0x04c4b400

0800919c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e08d      	b.n	80092ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	4b47      	ldr	r3, [pc, #284]	; (80092d4 <HAL_DMA_Init+0x138>)
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d80f      	bhi.n	80091da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	4b45      	ldr	r3, [pc, #276]	; (80092d8 <HAL_DMA_Init+0x13c>)
 80091c2:	4413      	add	r3, r2
 80091c4:	4a45      	ldr	r2, [pc, #276]	; (80092dc <HAL_DMA_Init+0x140>)
 80091c6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ca:	091b      	lsrs	r3, r3, #4
 80091cc:	009a      	lsls	r2, r3, #2
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a42      	ldr	r2, [pc, #264]	; (80092e0 <HAL_DMA_Init+0x144>)
 80091d6:	641a      	str	r2, [r3, #64]	; 0x40
 80091d8:	e00e      	b.n	80091f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	4b40      	ldr	r3, [pc, #256]	; (80092e4 <HAL_DMA_Init+0x148>)
 80091e2:	4413      	add	r3, r2
 80091e4:	4a3d      	ldr	r2, [pc, #244]	; (80092dc <HAL_DMA_Init+0x140>)
 80091e6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ea:	091b      	lsrs	r3, r3, #4
 80091ec:	009a      	lsls	r2, r3, #2
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a3c      	ldr	r2, [pc, #240]	; (80092e8 <HAL_DMA_Init+0x14c>)
 80091f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800920e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009212:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800921c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f9b6 	bl	80095bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009258:	d102      	bne.n	8009260 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009274:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d010      	beq.n	80092a0 <HAL_DMA_Init+0x104>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b04      	cmp	r3, #4
 8009284:	d80c      	bhi.n	80092a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f9d6 	bl	8009638 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800929c:	605a      	str	r2, [r3, #4]
 800929e:	e008      	b.n	80092b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40020407 	.word	0x40020407
 80092d8:	bffdfff8 	.word	0xbffdfff8
 80092dc:	cccccccd 	.word	0xcccccccd
 80092e0:	40020000 	.word	0x40020000
 80092e4:	bffdfbf8 	.word	0xbffdfbf8
 80092e8:	40020400 	.word	0x40020400

080092ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_DMA_Start_IT+0x20>
 8009308:	2302      	movs	r3, #2
 800930a:	e066      	b.n	80093da <HAL_DMA_Start_IT+0xee>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	d155      	bne.n	80093cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 0201 	bic.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 f8fb 	bl	8009540 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934e:	2b00      	cmp	r3, #0
 8009350:	d008      	beq.n	8009364 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 020e 	orr.w	r2, r2, #14
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	e00f      	b.n	8009384 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0204 	bic.w	r2, r2, #4
 8009372:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 020a 	orr.w	r2, r2, #10
 8009382:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d007      	beq.n	80093a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800939c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d007      	beq.n	80093ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	e005      	b.n	80093d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80093d4:	2302      	movs	r3, #2
 80093d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fe:	f003 031f 	and.w	r3, r3, #31
 8009402:	2204      	movs	r2, #4
 8009404:	409a      	lsls	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4013      	ands	r3, r2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d026      	beq.n	800945c <HAL_DMA_IRQHandler+0x7a>
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d021      	beq.n	800945c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	d107      	bne.n	8009436 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0204 	bic.w	r2, r2, #4
 8009434:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943a:	f003 021f 	and.w	r2, r3, #31
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009442:	2104      	movs	r1, #4
 8009444:	fa01 f202 	lsl.w	r2, r1, r2
 8009448:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944e:	2b00      	cmp	r3, #0
 8009450:	d071      	beq.n	8009536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800945a:	e06c      	b.n	8009536 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009460:	f003 031f 	and.w	r3, r3, #31
 8009464:	2202      	movs	r2, #2
 8009466:	409a      	lsls	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4013      	ands	r3, r2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d02e      	beq.n	80094ce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d029      	beq.n	80094ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 020a 	bic.w	r2, r2, #10
 8009496:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a4:	f003 021f 	and.w	r2, r3, #31
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ac:	2102      	movs	r1, #2
 80094ae:	fa01 f202 	lsl.w	r2, r1, r2
 80094b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d038      	beq.n	8009536 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80094cc:	e033      	b.n	8009536 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d2:	f003 031f 	and.w	r3, r3, #31
 80094d6:	2208      	movs	r2, #8
 80094d8:	409a      	lsls	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d02a      	beq.n	8009538 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d025      	beq.n	8009538 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 020e 	bic.w	r2, r2, #14
 80094fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009500:	f003 021f 	and.w	r2, r3, #31
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	2101      	movs	r1, #1
 800950a:	fa01 f202 	lsl.w	r2, r1, r2
 800950e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009536:	bf00      	nop
 8009538:	bf00      	nop
}
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009556:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009568:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	f003 021f 	and.w	r2, r3, #31
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	2101      	movs	r1, #1
 8009578:	fa01 f202 	lsl.w	r2, r1, r2
 800957c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	2b10      	cmp	r3, #16
 800958c:	d108      	bne.n	80095a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800959e:	e007      	b.n	80095b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	60da      	str	r2, [r3, #12]
}
 80095b0:	bf00      	nop
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	4b16      	ldr	r3, [pc, #88]	; (8009624 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d802      	bhi.n	80095d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80095d0:	4b15      	ldr	r3, [pc, #84]	; (8009628 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e001      	b.n	80095da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80095d6:	4b15      	ldr	r3, [pc, #84]	; (800962c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80095d8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	3b08      	subs	r3, #8
 80095e6:	4a12      	ldr	r2, [pc, #72]	; (8009630 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80095e8:	fba2 2303 	umull	r2, r3, r2, r3
 80095ec:	091b      	lsrs	r3, r3, #4
 80095ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f4:	089b      	lsrs	r3, r3, #2
 80095f6:	009a      	lsls	r2, r3, #2
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	4413      	add	r3, r2
 80095fc:	461a      	mov	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a0b      	ldr	r2, [pc, #44]	; (8009634 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009606:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f003 031f 	and.w	r3, r3, #31
 800960e:	2201      	movs	r2, #1
 8009610:	409a      	lsls	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009616:	bf00      	nop
 8009618:	371c      	adds	r7, #28
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	40020407 	.word	0x40020407
 8009628:	40020800 	.word	0x40020800
 800962c:	40020820 	.word	0x40020820
 8009630:	cccccccd 	.word	0xcccccccd
 8009634:	40020880 	.word	0x40020880

08009638 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	461a      	mov	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a08      	ldr	r2, [pc, #32]	; (800967c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800965a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3b01      	subs	r3, #1
 8009660:	f003 031f 	and.w	r3, r3, #31
 8009664:	2201      	movs	r2, #1
 8009666:	409a      	lsls	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800966c:	bf00      	nop
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	1000823f 	.word	0x1000823f
 800967c:	40020940 	.word	0x40020940

08009680 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e033      	b.n	80096fa <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d106      	bne.n	80096ac <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7fd f9cc 	bl	8006a44 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f854 	bl	8009760 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f822 	bl	8009702 <FMAC_Reset>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d10c      	bne.n	80096de <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c8:	f043 0210 	orr.w	r2, r3, #16
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	22a0      	movs	r2, #160	; 0xa0
 80096d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	73fb      	strb	r3, [r7, #15]
 80096dc:	e008      	b.n	80096f0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800970a:	f7fd ff2b 	bl	8007564 <HAL_GetTick>
 800970e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800971e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8009720:	e00f      	b.n	8009742 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8009722:	f7fd ff1f 	bl	8007564 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009730:	d907      	bls.n	8009742 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e00a      	b.n	8009758 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e8      	bne.n	8009722 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f807 	bl	800977c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f81b 	bl	80097aa <FMAC_ResetOutputStateAndDataPointers>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2220      	movs	r2, #32
 800979a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80097e6:	e15a      	b.n	8009a9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	2101      	movs	r1, #1
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	fa01 f303 	lsl.w	r3, r1, r3
 80097f4:	4013      	ands	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 814c 	beq.w	8009a98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f003 0303 	and.w	r3, r3, #3
 8009808:	2b01      	cmp	r3, #1
 800980a:	d005      	beq.n	8009818 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009814:	2b02      	cmp	r3, #2
 8009816:	d130      	bne.n	800987a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	2203      	movs	r2, #3
 8009824:	fa02 f303 	lsl.w	r3, r2, r3
 8009828:	43db      	mvns	r3, r3
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4013      	ands	r3, r2
 800982e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	fa02 f303 	lsl.w	r3, r2, r3
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4313      	orrs	r3, r2
 8009840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800984e:	2201      	movs	r2, #1
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	fa02 f303 	lsl.w	r3, r2, r3
 8009856:	43db      	mvns	r3, r3
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4013      	ands	r3, r2
 800985c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	091b      	lsrs	r3, r3, #4
 8009864:	f003 0201 	and.w	r2, r3, #1
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	fa02 f303 	lsl.w	r3, r2, r3
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	4313      	orrs	r3, r2
 8009872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	2b03      	cmp	r3, #3
 8009884:	d017      	beq.n	80098b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	2203      	movs	r2, #3
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	43db      	mvns	r3, r3
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4013      	ands	r3, r2
 800989c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	689a      	ldr	r2, [r3, #8]
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	fa02 f303 	lsl.w	r3, r2, r3
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d123      	bne.n	800990a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	08da      	lsrs	r2, r3, #3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3208      	adds	r2, #8
 80098ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	220f      	movs	r2, #15
 80098da:	fa02 f303 	lsl.w	r3, r2, r3
 80098de:	43db      	mvns	r3, r3
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4013      	ands	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	fa02 f303 	lsl.w	r3, r2, r3
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	08da      	lsrs	r2, r3, #3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3208      	adds	r2, #8
 8009904:	6939      	ldr	r1, [r7, #16]
 8009906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	2203      	movs	r2, #3
 8009916:	fa02 f303 	lsl.w	r3, r2, r3
 800991a:	43db      	mvns	r3, r3
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4013      	ands	r3, r2
 8009920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f003 0203 	and.w	r2, r3, #3
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	4313      	orrs	r3, r2
 8009936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80a6 	beq.w	8009a98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800994c:	4b5b      	ldr	r3, [pc, #364]	; (8009abc <HAL_GPIO_Init+0x2e4>)
 800994e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009950:	4a5a      	ldr	r2, [pc, #360]	; (8009abc <HAL_GPIO_Init+0x2e4>)
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	6613      	str	r3, [r2, #96]	; 0x60
 8009958:	4b58      	ldr	r3, [pc, #352]	; (8009abc <HAL_GPIO_Init+0x2e4>)
 800995a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	60bb      	str	r3, [r7, #8]
 8009962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009964:	4a56      	ldr	r2, [pc, #344]	; (8009ac0 <HAL_GPIO_Init+0x2e8>)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	089b      	lsrs	r3, r3, #2
 800996a:	3302      	adds	r3, #2
 800996c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	220f      	movs	r2, #15
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	43db      	mvns	r3, r3
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4013      	ands	r3, r2
 8009986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800998e:	d01f      	beq.n	80099d0 <HAL_GPIO_Init+0x1f8>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a4c      	ldr	r2, [pc, #304]	; (8009ac4 <HAL_GPIO_Init+0x2ec>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d019      	beq.n	80099cc <HAL_GPIO_Init+0x1f4>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a4b      	ldr	r2, [pc, #300]	; (8009ac8 <HAL_GPIO_Init+0x2f0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d013      	beq.n	80099c8 <HAL_GPIO_Init+0x1f0>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a4a      	ldr	r2, [pc, #296]	; (8009acc <HAL_GPIO_Init+0x2f4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d00d      	beq.n	80099c4 <HAL_GPIO_Init+0x1ec>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a49      	ldr	r2, [pc, #292]	; (8009ad0 <HAL_GPIO_Init+0x2f8>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d007      	beq.n	80099c0 <HAL_GPIO_Init+0x1e8>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a48      	ldr	r2, [pc, #288]	; (8009ad4 <HAL_GPIO_Init+0x2fc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d101      	bne.n	80099bc <HAL_GPIO_Init+0x1e4>
 80099b8:	2305      	movs	r3, #5
 80099ba:	e00a      	b.n	80099d2 <HAL_GPIO_Init+0x1fa>
 80099bc:	2306      	movs	r3, #6
 80099be:	e008      	b.n	80099d2 <HAL_GPIO_Init+0x1fa>
 80099c0:	2304      	movs	r3, #4
 80099c2:	e006      	b.n	80099d2 <HAL_GPIO_Init+0x1fa>
 80099c4:	2303      	movs	r3, #3
 80099c6:	e004      	b.n	80099d2 <HAL_GPIO_Init+0x1fa>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e002      	b.n	80099d2 <HAL_GPIO_Init+0x1fa>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <HAL_GPIO_Init+0x1fa>
 80099d0:	2300      	movs	r3, #0
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	f002 0203 	and.w	r2, r2, #3
 80099d8:	0092      	lsls	r2, r2, #2
 80099da:	4093      	lsls	r3, r2
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4313      	orrs	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80099e2:	4937      	ldr	r1, [pc, #220]	; (8009ac0 <HAL_GPIO_Init+0x2e8>)
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	089b      	lsrs	r3, r3, #2
 80099e8:	3302      	adds	r3, #2
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80099f0:	4b39      	ldr	r3, [pc, #228]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	43db      	mvns	r3, r3
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4013      	ands	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009a14:	4a30      	ldr	r2, [pc, #192]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009a1a:	4b2f      	ldr	r3, [pc, #188]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	43db      	mvns	r3, r3
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4013      	ands	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009a3e:	4a26      	ldr	r2, [pc, #152]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009a44:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	43db      	mvns	r3, r3
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	4013      	ands	r3, r2
 8009a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009a68:	4a1b      	ldr	r2, [pc, #108]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009a6e:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	43db      	mvns	r3, r3
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a92:	4a11      	ldr	r2, [pc, #68]	; (8009ad8 <HAL_GPIO_Init+0x300>)
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f47f ae9d 	bne.w	80097e8 <HAL_GPIO_Init+0x10>
  }
}
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	40021000 	.word	0x40021000
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	48000400 	.word	0x48000400
 8009ac8:	48000800 	.word	0x48000800
 8009acc:	48000c00 	.word	0x48000c00
 8009ad0:	48001000 	.word	0x48001000
 8009ad4:	48001400 	.word	0x48001400
 8009ad8:	40010400 	.word	0x40010400

08009adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	807b      	strh	r3, [r7, #2]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009aec:	787b      	ldrb	r3, [r7, #1]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009af2:	887a      	ldrh	r2, [r7, #2]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009af8:	e002      	b.n	8009b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009afa:	887a      	ldrh	r2, [r7, #2]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009b16:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b18:	695a      	ldr	r2, [r3, #20]
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d006      	beq.n	8009b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009b22:	4a05      	ldr	r2, [pc, #20]	; (8009b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b24:	88fb      	ldrh	r3, [r7, #6]
 8009b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fc fbea 	bl	8006304 <HAL_GPIO_EXTI_Callback>
  }
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	40010400 	.word	0x40010400

08009b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e08d      	b.n	8009c6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7fc ff8e 	bl	8006a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2224      	movs	r2, #36	; 0x24
 8009b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 0201 	bic.w	r2, r2, #1
 8009b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d107      	bne.n	8009bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689a      	ldr	r2, [r3, #8]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bb2:	609a      	str	r2, [r3, #8]
 8009bb4:	e006      	b.n	8009bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	689a      	ldr	r2, [r3, #8]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d108      	bne.n	8009bde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bda:	605a      	str	r2, [r3, #4]
 8009bdc:	e007      	b.n	8009bee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68da      	ldr	r2, [r3, #12]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691a      	ldr	r2, [r3, #16]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	69d9      	ldr	r1, [r3, #28]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1a      	ldr	r2, [r3, #32]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0201 	orr.w	r2, r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d138      	bne.n	8009cfa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d101      	bne.n	8009c96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c92:	2302      	movs	r3, #2
 8009c94:	e032      	b.n	8009cfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2224      	movs	r2, #36	; 0x24
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cc4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6819      	ldr	r1, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f042 0201 	orr.w	r2, r2, #1
 8009ce4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e000      	b.n	8009cfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cfa:	2302      	movs	r3, #2
  }
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d139      	bne.n	8009d92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e033      	b.n	8009d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2224      	movs	r2, #36	; 0x24
 8009d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f022 0201 	bic.w	r2, r2, #1
 8009d4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	021b      	lsls	r3, r3, #8
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f042 0201 	orr.w	r2, r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e000      	b.n	8009d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d92:	2302      	movs	r3, #2
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d141      	bne.n	8009e32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009dae:	4b4b      	ldr	r3, [pc, #300]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dba:	d131      	bne.n	8009e20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009dbc:	4b47      	ldr	r3, [pc, #284]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dc2:	4a46      	ldr	r2, [pc, #280]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009dcc:	4b43      	ldr	r3, [pc, #268]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009dd4:	4a41      	ldr	r2, [pc, #260]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009ddc:	4b40      	ldr	r3, [pc, #256]	; (8009ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2232      	movs	r2, #50	; 0x32
 8009de2:	fb02 f303 	mul.w	r3, r2, r3
 8009de6:	4a3f      	ldr	r2, [pc, #252]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009de8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dec:	0c9b      	lsrs	r3, r3, #18
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009df2:	e002      	b.n	8009dfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009dfa:	4b38      	ldr	r3, [pc, #224]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e06:	d102      	bne.n	8009e0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f2      	bne.n	8009df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e0e:	4b33      	ldr	r3, [pc, #204]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e1a:	d158      	bne.n	8009ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e057      	b.n	8009ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e20:	4b2e      	ldr	r3, [pc, #184]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e26:	4a2d      	ldr	r2, [pc, #180]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009e30:	e04d      	b.n	8009ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e38:	d141      	bne.n	8009ebe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009e3a:	4b28      	ldr	r3, [pc, #160]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e46:	d131      	bne.n	8009eac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009e48:	4b24      	ldr	r3, [pc, #144]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e4e:	4a23      	ldr	r2, [pc, #140]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e58:	4b20      	ldr	r3, [pc, #128]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009e60:	4a1e      	ldr	r2, [pc, #120]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009e68:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2232      	movs	r2, #50	; 0x32
 8009e6e:	fb02 f303 	mul.w	r3, r2, r3
 8009e72:	4a1c      	ldr	r2, [pc, #112]	; (8009ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009e74:	fba2 2303 	umull	r2, r3, r2, r3
 8009e78:	0c9b      	lsrs	r3, r3, #18
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e7e:	e002      	b.n	8009e86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3b01      	subs	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e86:	4b15      	ldr	r3, [pc, #84]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e92:	d102      	bne.n	8009e9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1f2      	bne.n	8009e80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e9a:	4b10      	ldr	r3, [pc, #64]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ea6:	d112      	bne.n	8009ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e011      	b.n	8009ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009eac:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eb2:	4a0a      	ldr	r2, [pc, #40]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009ebc:	e007      	b.n	8009ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009ebe:	4b07      	ldr	r3, [pc, #28]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ec6:	4a05      	ldr	r2, [pc, #20]	; (8009edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ecc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	40007000 	.word	0x40007000
 8009ee0:	2000786c 	.word	0x2000786c
 8009ee4:	431bde83 	.word	0x431bde83

08009ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	4a04      	ldr	r2, [pc, #16]	; (8009f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ef6:	6093      	str	r3, [r2, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40007000 	.word	0x40007000

08009f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e2fe      	b.n	800a518 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d075      	beq.n	800a012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f26:	4b97      	ldr	r3, [pc, #604]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f003 030c 	and.w	r3, r3, #12
 8009f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f30:	4b94      	ldr	r3, [pc, #592]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f003 0303 	and.w	r3, r3, #3
 8009f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b0c      	cmp	r3, #12
 8009f3e:	d102      	bne.n	8009f46 <HAL_RCC_OscConfig+0x3e>
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d002      	beq.n	8009f4c <HAL_RCC_OscConfig+0x44>
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	d10b      	bne.n	8009f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f4c:	4b8d      	ldr	r3, [pc, #564]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d05b      	beq.n	800a010 <HAL_RCC_OscConfig+0x108>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d157      	bne.n	800a010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e2d9      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f6c:	d106      	bne.n	8009f7c <HAL_RCC_OscConfig+0x74>
 8009f6e:	4b85      	ldr	r3, [pc, #532]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a84      	ldr	r2, [pc, #528]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f78:	6013      	str	r3, [r2, #0]
 8009f7a:	e01d      	b.n	8009fb8 <HAL_RCC_OscConfig+0xb0>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f84:	d10c      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x98>
 8009f86:	4b7f      	ldr	r3, [pc, #508]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a7e      	ldr	r2, [pc, #504]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	4b7c      	ldr	r3, [pc, #496]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a7b      	ldr	r2, [pc, #492]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	e00b      	b.n	8009fb8 <HAL_RCC_OscConfig+0xb0>
 8009fa0:	4b78      	ldr	r3, [pc, #480]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a77      	ldr	r2, [pc, #476]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	4b75      	ldr	r3, [pc, #468]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a74      	ldr	r2, [pc, #464]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d013      	beq.n	8009fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc0:	f7fd fad0 	bl	8007564 <HAL_GetTick>
 8009fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fc6:	e008      	b.n	8009fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fc8:	f7fd facc 	bl	8007564 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	2b64      	cmp	r3, #100	; 0x64
 8009fd4:	d901      	bls.n	8009fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e29e      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fda:	4b6a      	ldr	r3, [pc, #424]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0f0      	beq.n	8009fc8 <HAL_RCC_OscConfig+0xc0>
 8009fe6:	e014      	b.n	800a012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7fd fabc 	bl	8007564 <HAL_GetTick>
 8009fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ff0:	f7fd fab8 	bl	8007564 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b64      	cmp	r3, #100	; 0x64
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e28a      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a002:	4b60      	ldr	r3, [pc, #384]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1f0      	bne.n	8009ff0 <HAL_RCC_OscConfig+0xe8>
 800a00e:	e000      	b.n	800a012 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d075      	beq.n	800a10a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a01e:	4b59      	ldr	r3, [pc, #356]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f003 030c 	and.w	r3, r3, #12
 800a026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a028:	4b56      	ldr	r3, [pc, #344]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	f003 0303 	and.w	r3, r3, #3
 800a030:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	2b0c      	cmp	r3, #12
 800a036:	d102      	bne.n	800a03e <HAL_RCC_OscConfig+0x136>
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d002      	beq.n	800a044 <HAL_RCC_OscConfig+0x13c>
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b04      	cmp	r3, #4
 800a042:	d11f      	bne.n	800a084 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a044:	4b4f      	ldr	r3, [pc, #316]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <HAL_RCC_OscConfig+0x154>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e25d      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a05c:	4b49      	ldr	r3, [pc, #292]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	061b      	lsls	r3, r3, #24
 800a06a:	4946      	ldr	r1, [pc, #280]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a070:	4b45      	ldr	r3, [pc, #276]	; (800a188 <HAL_RCC_OscConfig+0x280>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4618      	mov	r0, r3
 800a076:	f7fd fa29 	bl	80074cc <HAL_InitTick>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d043      	beq.n	800a108 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e249      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d023      	beq.n	800a0d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a08c:	4b3d      	ldr	r3, [pc, #244]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a3c      	ldr	r2, [pc, #240]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7fd fa64 	bl	8007564 <HAL_GetTick>
 800a09c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0a0:	f7fd fa60 	bl	8007564 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e232      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0b2:	4b34      	ldr	r3, [pc, #208]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0f0      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0be:	4b31      	ldr	r3, [pc, #196]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	061b      	lsls	r3, r3, #24
 800a0cc:	492d      	ldr	r1, [pc, #180]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	604b      	str	r3, [r1, #4]
 800a0d2:	e01a      	b.n	800a10a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0d4:	4b2b      	ldr	r3, [pc, #172]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a2a      	ldr	r2, [pc, #168]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a0da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7fd fa40 	bl	8007564 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0e8:	f7fd fa3c 	bl	8007564 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e20e      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0fa:	4b22      	ldr	r3, [pc, #136]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x1e0>
 800a106:	e000      	b.n	800a10a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0308 	and.w	r3, r3, #8
 800a112:	2b00      	cmp	r3, #0
 800a114:	d041      	beq.n	800a19a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d01c      	beq.n	800a158 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a11e:	4b19      	ldr	r3, [pc, #100]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a124:	4a17      	ldr	r2, [pc, #92]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a126:	f043 0301 	orr.w	r3, r3, #1
 800a12a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a12e:	f7fd fa19 	bl	8007564 <HAL_GetTick>
 800a132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a134:	e008      	b.n	800a148 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a136:	f7fd fa15 	bl	8007564 <HAL_GetTick>
 800a13a:	4602      	mov	r2, r0
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d901      	bls.n	800a148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e1e7      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a148:	4b0e      	ldr	r3, [pc, #56]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a14a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0ef      	beq.n	800a136 <HAL_RCC_OscConfig+0x22e>
 800a156:	e020      	b.n	800a19a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a15a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a15e:	4a09      	ldr	r2, [pc, #36]	; (800a184 <HAL_RCC_OscConfig+0x27c>)
 800a160:	f023 0301 	bic.w	r3, r3, #1
 800a164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a168:	f7fd f9fc 	bl	8007564 <HAL_GetTick>
 800a16c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a16e:	e00d      	b.n	800a18c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a170:	f7fd f9f8 	bl	8007564 <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d906      	bls.n	800a18c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e1ca      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
 800a182:	bf00      	nop
 800a184:	40021000 	.word	0x40021000
 800a188:	20007870 	.word	0x20007870
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a18c:	4b8c      	ldr	r3, [pc, #560]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a18e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1ea      	bne.n	800a170 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 80a6 	beq.w	800a2f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a1ac:	4b84      	ldr	r3, [pc, #528]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <HAL_RCC_OscConfig+0x2b4>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <HAL_RCC_OscConfig+0x2b6>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00d      	beq.n	800a1de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1c2:	4b7f      	ldr	r3, [pc, #508]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c6:	4a7e      	ldr	r2, [pc, #504]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a1c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1cc:	6593      	str	r3, [r2, #88]	; 0x58
 800a1ce:	4b7c      	ldr	r3, [pc, #496]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1de:	4b79      	ldr	r3, [pc, #484]	; (800a3c4 <HAL_RCC_OscConfig+0x4bc>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d118      	bne.n	800a21c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1ea:	4b76      	ldr	r3, [pc, #472]	; (800a3c4 <HAL_RCC_OscConfig+0x4bc>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a75      	ldr	r2, [pc, #468]	; (800a3c4 <HAL_RCC_OscConfig+0x4bc>)
 800a1f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1f6:	f7fd f9b5 	bl	8007564 <HAL_GetTick>
 800a1fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a1fc:	e008      	b.n	800a210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1fe:	f7fd f9b1 	bl	8007564 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e183      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a210:	4b6c      	ldr	r3, [pc, #432]	; (800a3c4 <HAL_RCC_OscConfig+0x4bc>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0f0      	beq.n	800a1fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d108      	bne.n	800a236 <HAL_RCC_OscConfig+0x32e>
 800a224:	4b66      	ldr	r3, [pc, #408]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a22a:	4a65      	ldr	r2, [pc, #404]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a22c:	f043 0301 	orr.w	r3, r3, #1
 800a230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a234:	e024      	b.n	800a280 <HAL_RCC_OscConfig+0x378>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2b05      	cmp	r3, #5
 800a23c:	d110      	bne.n	800a260 <HAL_RCC_OscConfig+0x358>
 800a23e:	4b60      	ldr	r3, [pc, #384]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a244:	4a5e      	ldr	r2, [pc, #376]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a246:	f043 0304 	orr.w	r3, r3, #4
 800a24a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a24e:	4b5c      	ldr	r3, [pc, #368]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a254:	4a5a      	ldr	r2, [pc, #360]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a25e:	e00f      	b.n	800a280 <HAL_RCC_OscConfig+0x378>
 800a260:	4b57      	ldr	r3, [pc, #348]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a266:	4a56      	ldr	r2, [pc, #344]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a268:	f023 0301 	bic.w	r3, r3, #1
 800a26c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a270:	4b53      	ldr	r3, [pc, #332]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a276:	4a52      	ldr	r2, [pc, #328]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a278:	f023 0304 	bic.w	r3, r3, #4
 800a27c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d016      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a288:	f7fd f96c 	bl	8007564 <HAL_GetTick>
 800a28c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a28e:	e00a      	b.n	800a2a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a290:	f7fd f968 	bl	8007564 <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e138      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a2a6:	4b46      	ldr	r3, [pc, #280]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0ed      	beq.n	800a290 <HAL_RCC_OscConfig+0x388>
 800a2b4:	e015      	b.n	800a2e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2b6:	f7fd f955 	bl	8007564 <HAL_GetTick>
 800a2ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2bc:	e00a      	b.n	800a2d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2be:	f7fd f951 	bl	8007564 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d901      	bls.n	800a2d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e121      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a2d4:	4b3a      	ldr	r3, [pc, #232]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1ed      	bne.n	800a2be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2e2:	7ffb      	ldrb	r3, [r7, #31]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d105      	bne.n	800a2f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2e8:	4b35      	ldr	r3, [pc, #212]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ec:	4a34      	ldr	r2, [pc, #208]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a2ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d03c      	beq.n	800a37a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01c      	beq.n	800a342 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a308:	4b2d      	ldr	r3, [pc, #180]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a30a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a30e:	4a2c      	ldr	r2, [pc, #176]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a310:	f043 0301 	orr.w	r3, r3, #1
 800a314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a318:	f7fd f924 	bl	8007564 <HAL_GetTick>
 800a31c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a31e:	e008      	b.n	800a332 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a320:	f7fd f920 	bl	8007564 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d901      	bls.n	800a332 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e0f2      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a332:	4b23      	ldr	r3, [pc, #140]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0ef      	beq.n	800a320 <HAL_RCC_OscConfig+0x418>
 800a340:	e01b      	b.n	800a37a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a342:	4b1f      	ldr	r3, [pc, #124]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a348:	4a1d      	ldr	r2, [pc, #116]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a34a:	f023 0301 	bic.w	r3, r3, #1
 800a34e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a352:	f7fd f907 	bl	8007564 <HAL_GetTick>
 800a356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a358:	e008      	b.n	800a36c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a35a:	f7fd f903 	bl	8007564 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d901      	bls.n	800a36c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e0d5      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a36e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1ef      	bne.n	800a35a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 80c9 	beq.w	800a516 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a384:	4b0e      	ldr	r3, [pc, #56]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f003 030c 	and.w	r3, r3, #12
 800a38c:	2b0c      	cmp	r3, #12
 800a38e:	f000 8083 	beq.w	800a498 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	2b02      	cmp	r3, #2
 800a398:	d15e      	bne.n	800a458 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a39a:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a08      	ldr	r2, [pc, #32]	; (800a3c0 <HAL_RCC_OscConfig+0x4b8>)
 800a3a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3a6:	f7fd f8dd 	bl	8007564 <HAL_GetTick>
 800a3aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3ac:	e00c      	b.n	800a3c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3ae:	f7fd f8d9 	bl	8007564 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d905      	bls.n	800a3c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e0ab      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
 800a3c0:	40021000 	.word	0x40021000
 800a3c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3c8:	4b55      	ldr	r3, [pc, #340]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1ec      	bne.n	800a3ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3d4:	4b52      	ldr	r3, [pc, #328]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	4b52      	ldr	r3, [pc, #328]	; (800a524 <HAL_RCC_OscConfig+0x61c>)
 800a3da:	4013      	ands	r3, r2
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	6a11      	ldr	r1, [r2, #32]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3e4:	3a01      	subs	r2, #1
 800a3e6:	0112      	lsls	r2, r2, #4
 800a3e8:	4311      	orrs	r1, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a3ee:	0212      	lsls	r2, r2, #8
 800a3f0:	4311      	orrs	r1, r2
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3f6:	0852      	lsrs	r2, r2, #1
 800a3f8:	3a01      	subs	r2, #1
 800a3fa:	0552      	lsls	r2, r2, #21
 800a3fc:	4311      	orrs	r1, r2
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a402:	0852      	lsrs	r2, r2, #1
 800a404:	3a01      	subs	r2, #1
 800a406:	0652      	lsls	r2, r2, #25
 800a408:	4311      	orrs	r1, r2
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a40e:	06d2      	lsls	r2, r2, #27
 800a410:	430a      	orrs	r2, r1
 800a412:	4943      	ldr	r1, [pc, #268]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a414:	4313      	orrs	r3, r2
 800a416:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a418:	4b41      	ldr	r3, [pc, #260]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a40      	ldr	r2, [pc, #256]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a41e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a422:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a424:	4b3e      	ldr	r3, [pc, #248]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	4a3d      	ldr	r2, [pc, #244]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a42a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a42e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a430:	f7fd f898 	bl	8007564 <HAL_GetTick>
 800a434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a436:	e008      	b.n	800a44a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a438:	f7fd f894 	bl	8007564 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b02      	cmp	r3, #2
 800a444:	d901      	bls.n	800a44a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e066      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a44a:	4b35      	ldr	r3, [pc, #212]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0f0      	beq.n	800a438 <HAL_RCC_OscConfig+0x530>
 800a456:	e05e      	b.n	800a516 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a458:	4b31      	ldr	r3, [pc, #196]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a30      	ldr	r2, [pc, #192]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a45e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a464:	f7fd f87e 	bl	8007564 <HAL_GetTick>
 800a468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a46c:	f7fd f87a 	bl	8007564 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e04c      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a47e:	4b28      	ldr	r3, [pc, #160]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f0      	bne.n	800a46c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a48a:	4b25      	ldr	r3, [pc, #148]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	4924      	ldr	r1, [pc, #144]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a490:	4b25      	ldr	r3, [pc, #148]	; (800a528 <HAL_RCC_OscConfig+0x620>)
 800a492:	4013      	ands	r3, r2
 800a494:	60cb      	str	r3, [r1, #12]
 800a496:	e03e      	b.n	800a516 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e039      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a4a4:	4b1e      	ldr	r3, [pc, #120]	; (800a520 <HAL_RCC_OscConfig+0x618>)
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f003 0203 	and.w	r2, r3, #3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d12c      	bne.n	800a512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d123      	bne.n	800a512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d11b      	bne.n	800a512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d113      	bne.n	800a512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f4:	085b      	lsrs	r3, r3, #1
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d109      	bne.n	800a512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	085b      	lsrs	r3, r3, #1
 800a50a:	3b01      	subs	r3, #1
 800a50c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a50e:	429a      	cmp	r2, r3
 800a510:	d001      	beq.n	800a516 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e000      	b.n	800a518 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	40021000 	.word	0x40021000
 800a524:	019f800c 	.word	0x019f800c
 800a528:	feeefffc 	.word	0xfeeefffc

0800a52c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e11e      	b.n	800a782 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a544:	4b91      	ldr	r3, [pc, #580]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 030f 	and.w	r3, r3, #15
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d910      	bls.n	800a574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a552:	4b8e      	ldr	r3, [pc, #568]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f023 020f 	bic.w	r2, r3, #15
 800a55a:	498c      	ldr	r1, [pc, #560]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	4313      	orrs	r3, r2
 800a560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a562:	4b8a      	ldr	r3, [pc, #552]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 030f 	and.w	r3, r3, #15
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d001      	beq.n	800a574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e106      	b.n	800a782 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d073      	beq.n	800a668 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b03      	cmp	r3, #3
 800a586:	d129      	bne.n	800a5dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a588:	4b81      	ldr	r3, [pc, #516]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e0f4      	b.n	800a782 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a598:	f000 f99c 	bl	800a8d4 <RCC_GetSysClockFreqFromPLLSource>
 800a59c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	4a7c      	ldr	r2, [pc, #496]	; (800a794 <HAL_RCC_ClockConfig+0x268>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d93f      	bls.n	800a626 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a5a6:	4b7a      	ldr	r3, [pc, #488]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d009      	beq.n	800a5c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d033      	beq.n	800a626 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d12f      	bne.n	800a626 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a5c6:	4b72      	ldr	r3, [pc, #456]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5ce:	4a70      	ldr	r2, [pc, #448]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a5d6:	2380      	movs	r3, #128	; 0x80
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	e024      	b.n	800a626 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d107      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5e4:	4b6a      	ldr	r3, [pc, #424]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e0c6      	b.n	800a782 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5f4:	4b66      	ldr	r3, [pc, #408]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e0be      	b.n	800a782 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a604:	f000 f8ce 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800a608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4a61      	ldr	r2, [pc, #388]	; (800a794 <HAL_RCC_ClockConfig+0x268>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d909      	bls.n	800a626 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a612:	4b5f      	ldr	r3, [pc, #380]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a61a:	4a5d      	ldr	r2, [pc, #372]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a620:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a622:	2380      	movs	r3, #128	; 0x80
 800a624:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a626:	4b5a      	ldr	r3, [pc, #360]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f023 0203 	bic.w	r2, r3, #3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	4957      	ldr	r1, [pc, #348]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a634:	4313      	orrs	r3, r2
 800a636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a638:	f7fc ff94 	bl	8007564 <HAL_GetTick>
 800a63c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a63e:	e00a      	b.n	800a656 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a640:	f7fc ff90 	bl	8007564 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64e:	4293      	cmp	r3, r2
 800a650:	d901      	bls.n	800a656 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a652:	2303      	movs	r3, #3
 800a654:	e095      	b.n	800a782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a656:	4b4e      	ldr	r3, [pc, #312]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f003 020c 	and.w	r2, r3, #12
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	429a      	cmp	r2, r3
 800a666:	d1eb      	bne.n	800a640 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0302 	and.w	r3, r3, #2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d023      	beq.n	800a6bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d005      	beq.n	800a68c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a680:	4b43      	ldr	r3, [pc, #268]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	4a42      	ldr	r2, [pc, #264]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a68a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0308 	and.w	r3, r3, #8
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a698:	4b3d      	ldr	r3, [pc, #244]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6a0:	4a3b      	ldr	r2, [pc, #236]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a6a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a6a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6a8:	4b39      	ldr	r3, [pc, #228]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	4936      	ldr	r1, [pc, #216]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	608b      	str	r3, [r1, #8]
 800a6ba:	e008      	b.n	800a6ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b80      	cmp	r3, #128	; 0x80
 800a6c0:	d105      	bne.n	800a6ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a6c2:	4b33      	ldr	r3, [pc, #204]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	4a32      	ldr	r2, [pc, #200]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a6c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6ce:	4b2f      	ldr	r3, [pc, #188]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d21d      	bcs.n	800a718 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6dc:	4b2b      	ldr	r3, [pc, #172]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f023 020f 	bic.w	r2, r3, #15
 800a6e4:	4929      	ldr	r1, [pc, #164]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a6ec:	f7fc ff3a 	bl	8007564 <HAL_GetTick>
 800a6f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6f2:	e00a      	b.n	800a70a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6f4:	f7fc ff36 	bl	8007564 <HAL_GetTick>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a702:	4293      	cmp	r3, r2
 800a704:	d901      	bls.n	800a70a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e03b      	b.n	800a782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a70a:	4b20      	ldr	r3, [pc, #128]	; (800a78c <HAL_RCC_ClockConfig+0x260>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 030f 	and.w	r3, r3, #15
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	429a      	cmp	r2, r3
 800a716:	d1ed      	bne.n	800a6f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d008      	beq.n	800a736 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a724:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	4917      	ldr	r1, [pc, #92]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a732:	4313      	orrs	r3, r2
 800a734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0308 	and.w	r3, r3, #8
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d009      	beq.n	800a756 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a742:	4b13      	ldr	r3, [pc, #76]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	490f      	ldr	r1, [pc, #60]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a752:	4313      	orrs	r3, r2
 800a754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a756:	f000 f825 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <HAL_RCC_ClockConfig+0x264>)
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	091b      	lsrs	r3, r3, #4
 800a762:	f003 030f 	and.w	r3, r3, #15
 800a766:	490c      	ldr	r1, [pc, #48]	; (800a798 <HAL_RCC_ClockConfig+0x26c>)
 800a768:	5ccb      	ldrb	r3, [r1, r3]
 800a76a:	f003 031f 	and.w	r3, r3, #31
 800a76e:	fa22 f303 	lsr.w	r3, r2, r3
 800a772:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <HAL_RCC_ClockConfig+0x270>)
 800a774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a776:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <HAL_RCC_ClockConfig+0x274>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fc fea6 	bl	80074cc <HAL_InitTick>
 800a780:	4603      	mov	r3, r0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	40022000 	.word	0x40022000
 800a790:	40021000 	.word	0x40021000
 800a794:	04c4b400 	.word	0x04c4b400
 800a798:	08011550 	.word	0x08011550
 800a79c:	2000786c 	.word	0x2000786c
 800a7a0:	20007870 	.word	0x20007870

0800a7a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a7aa:	4b2c      	ldr	r3, [pc, #176]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 030c 	and.w	r3, r3, #12
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d102      	bne.n	800a7bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a7b6:	4b2a      	ldr	r3, [pc, #168]	; (800a860 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a7b8:	613b      	str	r3, [r7, #16]
 800a7ba:	e047      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a7bc:	4b27      	ldr	r3, [pc, #156]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f003 030c 	and.w	r3, r3, #12
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d102      	bne.n	800a7ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a7c8:	4b25      	ldr	r3, [pc, #148]	; (800a860 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	e03e      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a7ce:	4b23      	ldr	r3, [pc, #140]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f003 030c 	and.w	r3, r3, #12
 800a7d6:	2b0c      	cmp	r3, #12
 800a7d8:	d136      	bne.n	800a848 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a7da:	4b20      	ldr	r3, [pc, #128]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	f003 0303 	and.w	r3, r3, #3
 800a7e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7e4:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	091b      	lsrs	r3, r3, #4
 800a7ea:	f003 030f 	and.w	r3, r3, #15
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d10c      	bne.n	800a812 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7f8:	4a19      	ldr	r2, [pc, #100]	; (800a860 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a800:	4a16      	ldr	r2, [pc, #88]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a802:	68d2      	ldr	r2, [r2, #12]
 800a804:	0a12      	lsrs	r2, r2, #8
 800a806:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a80a:	fb02 f303 	mul.w	r3, r2, r3
 800a80e:	617b      	str	r3, [r7, #20]
      break;
 800a810:	e00c      	b.n	800a82c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a812:	4a13      	ldr	r2, [pc, #76]	; (800a860 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	fbb2 f3f3 	udiv	r3, r2, r3
 800a81a:	4a10      	ldr	r2, [pc, #64]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a81c:	68d2      	ldr	r2, [r2, #12]
 800a81e:	0a12      	lsrs	r2, r2, #8
 800a820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a824:	fb02 f303 	mul.w	r3, r2, r3
 800a828:	617b      	str	r3, [r7, #20]
      break;
 800a82a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a82c:	4b0b      	ldr	r3, [pc, #44]	; (800a85c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	0e5b      	lsrs	r3, r3, #25
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	3301      	adds	r3, #1
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	fbb2 f3f3 	udiv	r3, r2, r3
 800a844:	613b      	str	r3, [r7, #16]
 800a846:	e001      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a84c:	693b      	ldr	r3, [r7, #16]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	371c      	adds	r7, #28
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40021000 	.word	0x40021000
 800a860:	00f42400 	.word	0x00f42400

0800a864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a864:	b480      	push	{r7}
 800a866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a868:	4b03      	ldr	r3, [pc, #12]	; (800a878 <HAL_RCC_GetHCLKFreq+0x14>)
 800a86a:	681b      	ldr	r3, [r3, #0]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	2000786c 	.word	0x2000786c

0800a87c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a880:	f7ff fff0 	bl	800a864 <HAL_RCC_GetHCLKFreq>
 800a884:	4602      	mov	r2, r0
 800a886:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	0a1b      	lsrs	r3, r3, #8
 800a88c:	f003 0307 	and.w	r3, r3, #7
 800a890:	4904      	ldr	r1, [pc, #16]	; (800a8a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a892:	5ccb      	ldrb	r3, [r1, r3]
 800a894:	f003 031f 	and.w	r3, r3, #31
 800a898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	40021000 	.word	0x40021000
 800a8a4:	08011560 	.word	0x08011560

0800a8a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a8ac:	f7ff ffda 	bl	800a864 <HAL_RCC_GetHCLKFreq>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	4b06      	ldr	r3, [pc, #24]	; (800a8cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	0adb      	lsrs	r3, r3, #11
 800a8b8:	f003 0307 	and.w	r3, r3, #7
 800a8bc:	4904      	ldr	r1, [pc, #16]	; (800a8d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8be:	5ccb      	ldrb	r3, [r1, r3]
 800a8c0:	f003 031f 	and.w	r3, r3, #31
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	40021000 	.word	0x40021000
 800a8d0:	08011560 	.word	0x08011560

0800a8d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a8da:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	f003 0303 	and.w	r3, r3, #3
 800a8e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a8e4:	4b1b      	ldr	r3, [pc, #108]	; (800a954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	091b      	lsrs	r3, r3, #4
 800a8ea:	f003 030f 	and.w	r3, r3, #15
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	d10c      	bne.n	800a912 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a8f8:	4a17      	ldr	r2, [pc, #92]	; (800a958 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a900:	4a14      	ldr	r2, [pc, #80]	; (800a954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a902:	68d2      	ldr	r2, [r2, #12]
 800a904:	0a12      	lsrs	r2, r2, #8
 800a906:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a90a:	fb02 f303 	mul.w	r3, r2, r3
 800a90e:	617b      	str	r3, [r7, #20]
    break;
 800a910:	e00c      	b.n	800a92c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a912:	4a11      	ldr	r2, [pc, #68]	; (800a958 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91a:	4a0e      	ldr	r2, [pc, #56]	; (800a954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a91c:	68d2      	ldr	r2, [r2, #12]
 800a91e:	0a12      	lsrs	r2, r2, #8
 800a920:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a924:	fb02 f303 	mul.w	r3, r2, r3
 800a928:	617b      	str	r3, [r7, #20]
    break;
 800a92a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a92c:	4b09      	ldr	r3, [pc, #36]	; (800a954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	0e5b      	lsrs	r3, r3, #25
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	3301      	adds	r3, #1
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	fbb2 f3f3 	udiv	r3, r2, r3
 800a944:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a946:	687b      	ldr	r3, [r7, #4]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	371c      	adds	r7, #28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	40021000 	.word	0x40021000
 800a958:	00f42400 	.word	0x00f42400

0800a95c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a964:	2300      	movs	r3, #0
 800a966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a968:	2300      	movs	r3, #0
 800a96a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 8098 	beq.w	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a97a:	2300      	movs	r3, #0
 800a97c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a97e:	4b43      	ldr	r3, [pc, #268]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10d      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a98a:	4b40      	ldr	r3, [pc, #256]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98e:	4a3f      	ldr	r2, [pc, #252]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a994:	6593      	str	r3, [r2, #88]	; 0x58
 800a996:	4b3d      	ldr	r3, [pc, #244]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a99e:	60bb      	str	r3, [r7, #8]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9a6:	4b3a      	ldr	r3, [pc, #232]	; (800aa90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a39      	ldr	r2, [pc, #228]	; (800aa90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a9ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9b2:	f7fc fdd7 	bl	8007564 <HAL_GetTick>
 800a9b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9b8:	e009      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9ba:	f7fc fdd3 	bl	8007564 <HAL_GetTick>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d902      	bls.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	74fb      	strb	r3, [r7, #19]
        break;
 800a9cc:	e005      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9ce:	4b30      	ldr	r3, [pc, #192]	; (800aa90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0ef      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a9da:	7cfb      	ldrb	r3, [r7, #19]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d159      	bne.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a9e0:	4b2a      	ldr	r3, [pc, #168]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d01e      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d019      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9fc:	4b23      	ldr	r3, [pc, #140]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa08:	4b20      	ldr	r3, [pc, #128]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa0e:	4a1f      	ldr	r2, [pc, #124]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa18:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1e:	4a1b      	ldr	r2, [pc, #108]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aa28:	4a18      	ldr	r2, [pc, #96]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d016      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3a:	f7fc fd93 	bl	8007564 <HAL_GetTick>
 800aa3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa40:	e00b      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa42:	f7fc fd8f 	bl	8007564 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d902      	bls.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	74fb      	strb	r3, [r7, #19]
            break;
 800aa58:	e006      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa5a:	4b0c      	ldr	r3, [pc, #48]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0ec      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800aa68:	7cfb      	ldrb	r3, [r7, #19]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10b      	bne.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa6e:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa7c:	4903      	ldr	r1, [pc, #12]	; (800aa8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa84:	e008      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa86:	7cfb      	ldrb	r3, [r7, #19]
 800aa88:	74bb      	strb	r3, [r7, #18]
 800aa8a:	e005      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800aa8c:	40021000 	.word	0x40021000
 800aa90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa94:	7cfb      	ldrb	r3, [r7, #19]
 800aa96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa98:	7c7b      	ldrb	r3, [r7, #17]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d105      	bne.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa9e:	4ba7      	ldr	r3, [pc, #668]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa2:	4aa6      	ldr	r2, [pc, #664]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aaa8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aab6:	4ba1      	ldr	r3, [pc, #644]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabc:	f023 0203 	bic.w	r2, r3, #3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	499d      	ldr	r1, [pc, #628]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aad8:	4b98      	ldr	r3, [pc, #608]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aade:	f023 020c 	bic.w	r2, r3, #12
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	4995      	ldr	r1, [pc, #596]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aafa:	4b90      	ldr	r3, [pc, #576]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	498c      	ldr	r1, [pc, #560]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0308 	and.w	r3, r3, #8
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00a      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab1c:	4b87      	ldr	r3, [pc, #540]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	4984      	ldr	r1, [pc, #528]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0310 	and.w	r3, r3, #16
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ab3e:	4b7f      	ldr	r3, [pc, #508]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	497b      	ldr	r1, [pc, #492]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab60:	4b76      	ldr	r3, [pc, #472]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	4973      	ldr	r1, [pc, #460]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab82:	4b6e      	ldr	r3, [pc, #440]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	496a      	ldr	r1, [pc, #424]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aba4:	4b65      	ldr	r3, [pc, #404]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	4962      	ldr	r1, [pc, #392]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abb4:	4313      	orrs	r3, r2
 800abb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800abc6:	4b5d      	ldr	r3, [pc, #372]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd4:	4959      	ldr	r1, [pc, #356]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800abe8:	4b54      	ldr	r3, [pc, #336]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	4951      	ldr	r1, [pc, #324]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800abf8:	4313      	orrs	r3, r2
 800abfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d015      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac0a:	4b4c      	ldr	r3, [pc, #304]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	4948      	ldr	r1, [pc, #288]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac28:	d105      	bne.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac2a:	4b44      	ldr	r3, [pc, #272]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	4a43      	ldr	r2, [pc, #268]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac34:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d015      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac42:	4b3e      	ldr	r3, [pc, #248]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac50:	493a      	ldr	r1, [pc, #232]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac60:	d105      	bne.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac62:	4b36      	ldr	r3, [pc, #216]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	4a35      	ldr	r2, [pc, #212]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac6c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d015      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac7a:	4b30      	ldr	r3, [pc, #192]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac88:	492c      	ldr	r1, [pc, #176]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac98:	d105      	bne.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac9a:	4b28      	ldr	r3, [pc, #160]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	4a27      	ldr	r2, [pc, #156]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aca4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d015      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acb2:	4b22      	ldr	r3, [pc, #136]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc0:	491e      	ldr	r1, [pc, #120]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acd0:	d105      	bne.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acd2:	4b1a      	ldr	r3, [pc, #104]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	4a19      	ldr	r2, [pc, #100]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acdc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d015      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acea:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf8:	4910      	ldr	r1, [pc, #64]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad08:	d105      	bne.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad0a:	4b0c      	ldr	r3, [pc, #48]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	4a0b      	ldr	r2, [pc, #44]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d018      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad30:	4902      	ldr	r1, [pc, #8]	; (800ad3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	e001      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ad3c:	40021000 	.word	0x40021000
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad46:	d105      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ad48:	4b21      	ldr	r3, [pc, #132]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	4a20      	ldr	r2, [pc, #128]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ad4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d015      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ad60:	4b1b      	ldr	r3, [pc, #108]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ad62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad66:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	4918      	ldr	r1, [pc, #96]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad7e:	d105      	bne.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ad80:	4b13      	ldr	r3, [pc, #76]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	4a12      	ldr	r2, [pc, #72]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ad86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d015      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ad98:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ad9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ada6:	490a      	ldr	r1, [pc, #40]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adb6:	d105      	bne.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	4a04      	ldr	r2, [pc, #16]	; (800add0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800adbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800adc4:	7cbb      	ldrb	r3, [r7, #18]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	40021000 	.word	0x40021000

0800add4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e049      	b.n	800ae7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7fb ffb0 	bl	8006d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2202      	movs	r2, #2
 800ae04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4619      	mov	r1, r3
 800ae12:	4610      	mov	r0, r2
 800ae14:	f000 f878 	bl	800af08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b082      	sub	sp, #8
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d101      	bne.n	800ae9a <HAL_TIM_SlaveConfigSynchro+0x18>
 800ae96:	2302      	movs	r3, #2
 800ae98:	e031      	b.n	800aefe <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2202      	movs	r2, #2
 800aea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f8d5 	bl	800b05c <TIM_SlaveTimer_SetConfig>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d009      	beq.n	800aecc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e018      	b.n	800aefe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeda:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68da      	ldr	r2, [r3, #12]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aeea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a48      	ldr	r2, [pc, #288]	; (800b03c <TIM_Base_SetConfig+0x134>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d013      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af26:	d00f      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a45      	ldr	r2, [pc, #276]	; (800b040 <TIM_Base_SetConfig+0x138>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00b      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a44      	ldr	r2, [pc, #272]	; (800b044 <TIM_Base_SetConfig+0x13c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d007      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a43      	ldr	r2, [pc, #268]	; (800b048 <TIM_Base_SetConfig+0x140>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d003      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a42      	ldr	r2, [pc, #264]	; (800b04c <TIM_Base_SetConfig+0x144>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d108      	bne.n	800af5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a37      	ldr	r2, [pc, #220]	; (800b03c <TIM_Base_SetConfig+0x134>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d01f      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af68:	d01b      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a34      	ldr	r2, [pc, #208]	; (800b040 <TIM_Base_SetConfig+0x138>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d017      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a33      	ldr	r2, [pc, #204]	; (800b044 <TIM_Base_SetConfig+0x13c>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d013      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a32      	ldr	r2, [pc, #200]	; (800b048 <TIM_Base_SetConfig+0x140>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00f      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a32      	ldr	r2, [pc, #200]	; (800b050 <TIM_Base_SetConfig+0x148>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d00b      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a31      	ldr	r2, [pc, #196]	; (800b054 <TIM_Base_SetConfig+0x14c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d007      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a30      	ldr	r2, [pc, #192]	; (800b058 <TIM_Base_SetConfig+0x150>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d003      	beq.n	800afa2 <TIM_Base_SetConfig+0x9a>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a2b      	ldr	r2, [pc, #172]	; (800b04c <TIM_Base_SetConfig+0x144>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d108      	bne.n	800afb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a18      	ldr	r2, [pc, #96]	; (800b03c <TIM_Base_SetConfig+0x134>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d013      	beq.n	800b008 <TIM_Base_SetConfig+0x100>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a19      	ldr	r2, [pc, #100]	; (800b048 <TIM_Base_SetConfig+0x140>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d00f      	beq.n	800b008 <TIM_Base_SetConfig+0x100>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a19      	ldr	r2, [pc, #100]	; (800b050 <TIM_Base_SetConfig+0x148>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d00b      	beq.n	800b008 <TIM_Base_SetConfig+0x100>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a18      	ldr	r2, [pc, #96]	; (800b054 <TIM_Base_SetConfig+0x14c>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d007      	beq.n	800b008 <TIM_Base_SetConfig+0x100>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a17      	ldr	r2, [pc, #92]	; (800b058 <TIM_Base_SetConfig+0x150>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d003      	beq.n	800b008 <TIM_Base_SetConfig+0x100>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a12      	ldr	r2, [pc, #72]	; (800b04c <TIM_Base_SetConfig+0x144>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d103      	bne.n	800b010 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d105      	bne.n	800b02e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	f023 0201 	bic.w	r2, r3, #1
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	611a      	str	r2, [r3, #16]
  }
}
 800b02e:	bf00      	nop
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40012c00 	.word	0x40012c00
 800b040:	40000400 	.word	0x40000400
 800b044:	40000800 	.word	0x40000800
 800b048:	40013400 	.word	0x40013400
 800b04c:	40015000 	.word	0x40015000
 800b050:	40014000 	.word	0x40014000
 800b054:	40014400 	.word	0x40014400
 800b058:	40014800 	.word	0x40014800

0800b05c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	4313      	orrs	r3, r2
 800b086:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b08e:	f023 0307 	bic.w	r3, r3, #7
 800b092:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	4a4e      	ldr	r2, [pc, #312]	; (800b1e4 <TIM_SlaveTimer_SetConfig+0x188>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	f000 8092 	beq.w	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b0b2:	4a4c      	ldr	r2, [pc, #304]	; (800b1e4 <TIM_SlaveTimer_SetConfig+0x188>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	f200 808b 	bhi.w	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b0ba:	4a4b      	ldr	r2, [pc, #300]	; (800b1e8 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	f000 808a 	beq.w	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b0c2:	4a49      	ldr	r2, [pc, #292]	; (800b1e8 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	f200 8083 	bhi.w	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b0ca:	4a48      	ldr	r2, [pc, #288]	; (800b1ec <TIM_SlaveTimer_SetConfig+0x190>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	f000 8082 	beq.w	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b0d2:	4a46      	ldr	r2, [pc, #280]	; (800b1ec <TIM_SlaveTimer_SetConfig+0x190>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d87b      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b0d8:	4a45      	ldr	r2, [pc, #276]	; (800b1f0 <TIM_SlaveTimer_SetConfig+0x194>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d07b      	beq.n	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b0de:	4a44      	ldr	r2, [pc, #272]	; (800b1f0 <TIM_SlaveTimer_SetConfig+0x194>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d875      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b0e4:	4a43      	ldr	r2, [pc, #268]	; (800b1f4 <TIM_SlaveTimer_SetConfig+0x198>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d075      	beq.n	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b0ea:	4a42      	ldr	r2, [pc, #264]	; (800b1f4 <TIM_SlaveTimer_SetConfig+0x198>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d86f      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b0f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b0f4:	d06f      	beq.n	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b0f6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b0fa:	d869      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b0fc:	2b70      	cmp	r3, #112	; 0x70
 800b0fe:	d01a      	beq.n	800b136 <TIM_SlaveTimer_SetConfig+0xda>
 800b100:	2b70      	cmp	r3, #112	; 0x70
 800b102:	d865      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b104:	2b60      	cmp	r3, #96	; 0x60
 800b106:	d059      	beq.n	800b1bc <TIM_SlaveTimer_SetConfig+0x160>
 800b108:	2b60      	cmp	r3, #96	; 0x60
 800b10a:	d861      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b10c:	2b50      	cmp	r3, #80	; 0x50
 800b10e:	d04b      	beq.n	800b1a8 <TIM_SlaveTimer_SetConfig+0x14c>
 800b110:	2b50      	cmp	r3, #80	; 0x50
 800b112:	d85d      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b114:	2b40      	cmp	r3, #64	; 0x40
 800b116:	d019      	beq.n	800b14c <TIM_SlaveTimer_SetConfig+0xf0>
 800b118:	2b40      	cmp	r3, #64	; 0x40
 800b11a:	d859      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b11c:	2b30      	cmp	r3, #48	; 0x30
 800b11e:	d05a      	beq.n	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b120:	2b30      	cmp	r3, #48	; 0x30
 800b122:	d855      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b124:	2b20      	cmp	r3, #32
 800b126:	d056      	beq.n	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d851      	bhi.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d052      	beq.n	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b130:	2b10      	cmp	r3, #16
 800b132:	d050      	beq.n	800b1d6 <TIM_SlaveTimer_SetConfig+0x17a>
 800b134:	e04c      	b.n	800b1d0 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b146:	f000 f8b6 	bl	800b2b6 <TIM_ETR_SetConfig>
      break;
 800b14a:	e045      	b.n	800b1d8 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b05      	cmp	r3, #5
 800b152:	d004      	beq.n	800b15e <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b158:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800b15c:	d101      	bne.n	800b162 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e03b      	b.n	800b1da <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6a1a      	ldr	r2, [r3, #32]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 0201 	bic.w	r2, r2, #1
 800b178:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b188:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	4313      	orrs	r3, r2
 800b194:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	621a      	str	r2, [r3, #32]
      break;
 800b1a6:	e017      	b.n	800b1d8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	f000 f81f 	bl	800b1f8 <TIM_TI1_ConfigInputStage>
      break;
 800b1ba:	e00d      	b.n	800b1d8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	f000 f844 	bl	800b256 <TIM_TI2_ConfigInputStage>
      break;
 800b1ce:	e003      	b.n	800b1d8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b1d4:	e000      	b.n	800b1d8 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800b1d6:	bf00      	nop
  }

  return status;
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	00100070 	.word	0x00100070
 800b1e8:	00100050 	.word	0x00100050
 800b1ec:	00100040 	.word	0x00100040
 800b1f0:	00100030 	.word	0x00100030
 800b1f4:	00100020 	.word	0x00100020

0800b1f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a1b      	ldr	r3, [r3, #32]
 800b208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	f023 0201 	bic.w	r2, r3, #1
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	011b      	lsls	r3, r3, #4
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f023 030a 	bic.w	r3, r3, #10
 800b234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	621a      	str	r2, [r3, #32]
}
 800b24a:	bf00      	nop
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b256:	b480      	push	{r7}
 800b258:	b087      	sub	sp, #28
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	f023 0210 	bic.w	r2, r3, #16
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	031b      	lsls	r3, r3, #12
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	4313      	orrs	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b292:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	621a      	str	r2, [r3, #32]
}
 800b2aa:	bf00      	nop
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b087      	sub	sp, #28
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	607a      	str	r2, [r7, #4]
 800b2c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	021a      	lsls	r2, r3, #8
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	431a      	orrs	r2, r3
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	609a      	str	r2, [r3, #8]
}
 800b2ea:	bf00      	nop
 800b2ec:	371c      	adds	r7, #28
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d101      	bne.n	800b310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e06f      	b.n	800b3f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2202      	movs	r2, #2
 800b31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a31      	ldr	r2, [pc, #196]	; (800b3fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d009      	beq.n	800b34e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a30      	ldr	r2, [pc, #192]	; (800b400 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d004      	beq.n	800b34e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a2e      	ldr	r2, [pc, #184]	; (800b404 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d108      	bne.n	800b360 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b354:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b36a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d01d      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b390:	d018      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a1c      	ldr	r2, [pc, #112]	; (800b408 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d013      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a1a      	ldr	r2, [pc, #104]	; (800b40c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d00e      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a15      	ldr	r2, [pc, #84]	; (800b400 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d009      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a16      	ldr	r2, [pc, #88]	; (800b410 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a11      	ldr	r2, [pc, #68]	; (800b404 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d10c      	bne.n	800b3de <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	40012c00 	.word	0x40012c00
 800b400:	40013400 	.word	0x40013400
 800b404:	40015000 	.word	0x40015000
 800b408:	40000400 	.word	0x40000400
 800b40c:	40000800 	.word	0x40000800
 800b410:	40014000 	.word	0x40014000

0800b414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e042      	b.n	800b4ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d106      	bne.n	800b43e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7fb fcd9 	bl	8006df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2224      	movs	r2, #36	; 0x24
 800b442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f022 0201 	bic.w	r2, r2, #1
 800b454:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fb24 	bl	800baac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f825 	bl	800b4b4 <UART_SetConfig>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d101      	bne.n	800b474 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e01b      	b.n	800b4ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	689a      	ldr	r2, [r3, #8]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f042 0201 	orr.w	r2, r2, #1
 800b4a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fba3 	bl	800bbf0 <UART_CheckIdleState>
 800b4aa:	4603      	mov	r3, r0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4b8:	b08c      	sub	sp, #48	; 0x30
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4baa      	ldr	r3, [pc, #680]	; (800b78c <UART_SetConfig+0x2d8>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	430a      	orrs	r2, r1
 800b504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a9f      	ldr	r2, [pc, #636]	; (800b790 <UART_SetConfig+0x2dc>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d004      	beq.n	800b520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b51c:	4313      	orrs	r3, r2
 800b51e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b52a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	6812      	ldr	r2, [r2, #0]
 800b532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b534:	430b      	orrs	r3, r1
 800b536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53e:	f023 010f 	bic.w	r1, r3, #15
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a90      	ldr	r2, [pc, #576]	; (800b794 <UART_SetConfig+0x2e0>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d125      	bne.n	800b5a4 <UART_SetConfig+0xf0>
 800b558:	4b8f      	ldr	r3, [pc, #572]	; (800b798 <UART_SetConfig+0x2e4>)
 800b55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	2b03      	cmp	r3, #3
 800b564:	d81a      	bhi.n	800b59c <UART_SetConfig+0xe8>
 800b566:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <UART_SetConfig+0xb8>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b57d 	.word	0x0800b57d
 800b570:	0800b58d 	.word	0x0800b58d
 800b574:	0800b585 	.word	0x0800b585
 800b578:	0800b595 	.word	0x0800b595
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b582:	e116      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b584:	2302      	movs	r3, #2
 800b586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b58a:	e112      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b58c:	2304      	movs	r3, #4
 800b58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b592:	e10e      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b594:	2308      	movs	r3, #8
 800b596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b59a:	e10a      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b59c:	2310      	movs	r3, #16
 800b59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5a2:	e106      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a7c      	ldr	r2, [pc, #496]	; (800b79c <UART_SetConfig+0x2e8>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d138      	bne.n	800b620 <UART_SetConfig+0x16c>
 800b5ae:	4b7a      	ldr	r3, [pc, #488]	; (800b798 <UART_SetConfig+0x2e4>)
 800b5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b4:	f003 030c 	and.w	r3, r3, #12
 800b5b8:	2b0c      	cmp	r3, #12
 800b5ba:	d82d      	bhi.n	800b618 <UART_SetConfig+0x164>
 800b5bc:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <UART_SetConfig+0x110>)
 800b5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c2:	bf00      	nop
 800b5c4:	0800b5f9 	.word	0x0800b5f9
 800b5c8:	0800b619 	.word	0x0800b619
 800b5cc:	0800b619 	.word	0x0800b619
 800b5d0:	0800b619 	.word	0x0800b619
 800b5d4:	0800b609 	.word	0x0800b609
 800b5d8:	0800b619 	.word	0x0800b619
 800b5dc:	0800b619 	.word	0x0800b619
 800b5e0:	0800b619 	.word	0x0800b619
 800b5e4:	0800b601 	.word	0x0800b601
 800b5e8:	0800b619 	.word	0x0800b619
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	0800b619 	.word	0x0800b619
 800b5f4:	0800b611 	.word	0x0800b611
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5fe:	e0d8      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b600:	2302      	movs	r3, #2
 800b602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b606:	e0d4      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b608:	2304      	movs	r3, #4
 800b60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b60e:	e0d0      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b610:	2308      	movs	r3, #8
 800b612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b616:	e0cc      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b618:	2310      	movs	r3, #16
 800b61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b61e:	e0c8      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a5e      	ldr	r2, [pc, #376]	; (800b7a0 <UART_SetConfig+0x2ec>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d125      	bne.n	800b676 <UART_SetConfig+0x1c2>
 800b62a:	4b5b      	ldr	r3, [pc, #364]	; (800b798 <UART_SetConfig+0x2e4>)
 800b62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b630:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b634:	2b30      	cmp	r3, #48	; 0x30
 800b636:	d016      	beq.n	800b666 <UART_SetConfig+0x1b2>
 800b638:	2b30      	cmp	r3, #48	; 0x30
 800b63a:	d818      	bhi.n	800b66e <UART_SetConfig+0x1ba>
 800b63c:	2b20      	cmp	r3, #32
 800b63e:	d00a      	beq.n	800b656 <UART_SetConfig+0x1a2>
 800b640:	2b20      	cmp	r3, #32
 800b642:	d814      	bhi.n	800b66e <UART_SetConfig+0x1ba>
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <UART_SetConfig+0x19a>
 800b648:	2b10      	cmp	r3, #16
 800b64a:	d008      	beq.n	800b65e <UART_SetConfig+0x1aa>
 800b64c:	e00f      	b.n	800b66e <UART_SetConfig+0x1ba>
 800b64e:	2300      	movs	r3, #0
 800b650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b654:	e0ad      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b656:	2302      	movs	r3, #2
 800b658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b65c:	e0a9      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b65e:	2304      	movs	r3, #4
 800b660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b664:	e0a5      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b666:	2308      	movs	r3, #8
 800b668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b66c:	e0a1      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b66e:	2310      	movs	r3, #16
 800b670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b674:	e09d      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a4a      	ldr	r2, [pc, #296]	; (800b7a4 <UART_SetConfig+0x2f0>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d125      	bne.n	800b6cc <UART_SetConfig+0x218>
 800b680:	4b45      	ldr	r3, [pc, #276]	; (800b798 <UART_SetConfig+0x2e4>)
 800b682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b68a:	2bc0      	cmp	r3, #192	; 0xc0
 800b68c:	d016      	beq.n	800b6bc <UART_SetConfig+0x208>
 800b68e:	2bc0      	cmp	r3, #192	; 0xc0
 800b690:	d818      	bhi.n	800b6c4 <UART_SetConfig+0x210>
 800b692:	2b80      	cmp	r3, #128	; 0x80
 800b694:	d00a      	beq.n	800b6ac <UART_SetConfig+0x1f8>
 800b696:	2b80      	cmp	r3, #128	; 0x80
 800b698:	d814      	bhi.n	800b6c4 <UART_SetConfig+0x210>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d002      	beq.n	800b6a4 <UART_SetConfig+0x1f0>
 800b69e:	2b40      	cmp	r3, #64	; 0x40
 800b6a0:	d008      	beq.n	800b6b4 <UART_SetConfig+0x200>
 800b6a2:	e00f      	b.n	800b6c4 <UART_SetConfig+0x210>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6aa:	e082      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6b2:	e07e      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6ba:	e07a      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b6bc:	2308      	movs	r3, #8
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6c2:	e076      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6ca:	e072      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a35      	ldr	r2, [pc, #212]	; (800b7a8 <UART_SetConfig+0x2f4>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d12a      	bne.n	800b72c <UART_SetConfig+0x278>
 800b6d6:	4b30      	ldr	r3, [pc, #192]	; (800b798 <UART_SetConfig+0x2e4>)
 800b6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6e4:	d01a      	beq.n	800b71c <UART_SetConfig+0x268>
 800b6e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6ea:	d81b      	bhi.n	800b724 <UART_SetConfig+0x270>
 800b6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f0:	d00c      	beq.n	800b70c <UART_SetConfig+0x258>
 800b6f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f6:	d815      	bhi.n	800b724 <UART_SetConfig+0x270>
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <UART_SetConfig+0x250>
 800b6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b700:	d008      	beq.n	800b714 <UART_SetConfig+0x260>
 800b702:	e00f      	b.n	800b724 <UART_SetConfig+0x270>
 800b704:	2300      	movs	r3, #0
 800b706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b70a:	e052      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b70c:	2302      	movs	r3, #2
 800b70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b712:	e04e      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b714:	2304      	movs	r3, #4
 800b716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b71a:	e04a      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b71c:	2308      	movs	r3, #8
 800b71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b722:	e046      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b724:	2310      	movs	r3, #16
 800b726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b72a:	e042      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a17      	ldr	r2, [pc, #92]	; (800b790 <UART_SetConfig+0x2dc>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d13a      	bne.n	800b7ac <UART_SetConfig+0x2f8>
 800b736:	4b18      	ldr	r3, [pc, #96]	; (800b798 <UART_SetConfig+0x2e4>)
 800b738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b73c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b744:	d01a      	beq.n	800b77c <UART_SetConfig+0x2c8>
 800b746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b74a:	d81b      	bhi.n	800b784 <UART_SetConfig+0x2d0>
 800b74c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b750:	d00c      	beq.n	800b76c <UART_SetConfig+0x2b8>
 800b752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b756:	d815      	bhi.n	800b784 <UART_SetConfig+0x2d0>
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <UART_SetConfig+0x2b0>
 800b75c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b760:	d008      	beq.n	800b774 <UART_SetConfig+0x2c0>
 800b762:	e00f      	b.n	800b784 <UART_SetConfig+0x2d0>
 800b764:	2300      	movs	r3, #0
 800b766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b76a:	e022      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b76c:	2302      	movs	r3, #2
 800b76e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b772:	e01e      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b774:	2304      	movs	r3, #4
 800b776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b77a:	e01a      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b77c:	2308      	movs	r3, #8
 800b77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b782:	e016      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b784:	2310      	movs	r3, #16
 800b786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b78a:	e012      	b.n	800b7b2 <UART_SetConfig+0x2fe>
 800b78c:	cfff69f3 	.word	0xcfff69f3
 800b790:	40008000 	.word	0x40008000
 800b794:	40013800 	.word	0x40013800
 800b798:	40021000 	.word	0x40021000
 800b79c:	40004400 	.word	0x40004400
 800b7a0:	40004800 	.word	0x40004800
 800b7a4:	40004c00 	.word	0x40004c00
 800b7a8:	40005000 	.word	0x40005000
 800b7ac:	2310      	movs	r3, #16
 800b7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4aae      	ldr	r2, [pc, #696]	; (800ba70 <UART_SetConfig+0x5bc>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	f040 8097 	bne.w	800b8ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7c2:	2b08      	cmp	r3, #8
 800b7c4:	d823      	bhi.n	800b80e <UART_SetConfig+0x35a>
 800b7c6:	a201      	add	r2, pc, #4	; (adr r2, 800b7cc <UART_SetConfig+0x318>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b7f1 	.word	0x0800b7f1
 800b7d0:	0800b80f 	.word	0x0800b80f
 800b7d4:	0800b7f9 	.word	0x0800b7f9
 800b7d8:	0800b80f 	.word	0x0800b80f
 800b7dc:	0800b7ff 	.word	0x0800b7ff
 800b7e0:	0800b80f 	.word	0x0800b80f
 800b7e4:	0800b80f 	.word	0x0800b80f
 800b7e8:	0800b80f 	.word	0x0800b80f
 800b7ec:	0800b807 	.word	0x0800b807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7f0:	f7ff f844 	bl	800a87c <HAL_RCC_GetPCLK1Freq>
 800b7f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7f6:	e010      	b.n	800b81a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7f8:	4b9e      	ldr	r3, [pc, #632]	; (800ba74 <UART_SetConfig+0x5c0>)
 800b7fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7fc:	e00d      	b.n	800b81a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7fe:	f7fe ffd1 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800b802:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b804:	e009      	b.n	800b81a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b80c:	e005      	b.n	800b81a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b80e:	2300      	movs	r3, #0
 800b810:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 8130 	beq.w	800ba82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	4a94      	ldr	r2, [pc, #592]	; (800ba78 <UART_SetConfig+0x5c4>)
 800b828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b82c:	461a      	mov	r2, r3
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	fbb3 f3f2 	udiv	r3, r3, r2
 800b834:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	4613      	mov	r3, r2
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	4413      	add	r3, r2
 800b840:	69ba      	ldr	r2, [r7, #24]
 800b842:	429a      	cmp	r2, r3
 800b844:	d305      	bcc.n	800b852 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d903      	bls.n	800b85a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b858:	e113      	b.n	800ba82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	2200      	movs	r2, #0
 800b85e:	60bb      	str	r3, [r7, #8]
 800b860:	60fa      	str	r2, [r7, #12]
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b866:	4a84      	ldr	r2, [pc, #528]	; (800ba78 <UART_SetConfig+0x5c4>)
 800b868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	2200      	movs	r2, #0
 800b870:	603b      	str	r3, [r7, #0]
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b878:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b87c:	f7f5 fa2c 	bl	8000cd8 <__aeabi_uldivmod>
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	4610      	mov	r0, r2
 800b886:	4619      	mov	r1, r3
 800b888:	f04f 0200 	mov.w	r2, #0
 800b88c:	f04f 0300 	mov.w	r3, #0
 800b890:	020b      	lsls	r3, r1, #8
 800b892:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b896:	0202      	lsls	r2, r0, #8
 800b898:	6979      	ldr	r1, [r7, #20]
 800b89a:	6849      	ldr	r1, [r1, #4]
 800b89c:	0849      	lsrs	r1, r1, #1
 800b89e:	2000      	movs	r0, #0
 800b8a0:	460c      	mov	r4, r1
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	eb12 0804 	adds.w	r8, r2, r4
 800b8a8:	eb43 0905 	adc.w	r9, r3, r5
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	469a      	mov	sl, r3
 800b8b4:	4693      	mov	fp, r2
 800b8b6:	4652      	mov	r2, sl
 800b8b8:	465b      	mov	r3, fp
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	4649      	mov	r1, r9
 800b8be:	f7f5 fa0b 	bl	8000cd8 <__aeabi_uldivmod>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8d0:	d308      	bcc.n	800b8e4 <UART_SetConfig+0x430>
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8d8:	d204      	bcs.n	800b8e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6a3a      	ldr	r2, [r7, #32]
 800b8e0:	60da      	str	r2, [r3, #12]
 800b8e2:	e0ce      	b.n	800ba82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b8ea:	e0ca      	b.n	800ba82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8f4:	d166      	bne.n	800b9c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b8f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8fa:	2b08      	cmp	r3, #8
 800b8fc:	d827      	bhi.n	800b94e <UART_SetConfig+0x49a>
 800b8fe:	a201      	add	r2, pc, #4	; (adr r2, 800b904 <UART_SetConfig+0x450>)
 800b900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b904:	0800b929 	.word	0x0800b929
 800b908:	0800b931 	.word	0x0800b931
 800b90c:	0800b939 	.word	0x0800b939
 800b910:	0800b94f 	.word	0x0800b94f
 800b914:	0800b93f 	.word	0x0800b93f
 800b918:	0800b94f 	.word	0x0800b94f
 800b91c:	0800b94f 	.word	0x0800b94f
 800b920:	0800b94f 	.word	0x0800b94f
 800b924:	0800b947 	.word	0x0800b947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b928:	f7fe ffa8 	bl	800a87c <HAL_RCC_GetPCLK1Freq>
 800b92c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b92e:	e014      	b.n	800b95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b930:	f7fe ffba 	bl	800a8a8 <HAL_RCC_GetPCLK2Freq>
 800b934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b936:	e010      	b.n	800b95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b938:	4b4e      	ldr	r3, [pc, #312]	; (800ba74 <UART_SetConfig+0x5c0>)
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b93c:	e00d      	b.n	800b95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b93e:	f7fe ff31 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800b942:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b944:	e009      	b.n	800b95a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b94a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b94c:	e005      	b.n	800b95a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8090 	beq.w	800ba82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	4a44      	ldr	r2, [pc, #272]	; (800ba78 <UART_SetConfig+0x5c4>)
 800b968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b96c:	461a      	mov	r2, r3
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	fbb3 f3f2 	udiv	r3, r3, r2
 800b974:	005a      	lsls	r2, r3, #1
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	085b      	lsrs	r3, r3, #1
 800b97c:	441a      	add	r2, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	fbb2 f3f3 	udiv	r3, r2, r3
 800b986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	2b0f      	cmp	r3, #15
 800b98c:	d916      	bls.n	800b9bc <UART_SetConfig+0x508>
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b994:	d212      	bcs.n	800b9bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	f023 030f 	bic.w	r3, r3, #15
 800b99e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	085b      	lsrs	r3, r3, #1
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	8bfb      	ldrh	r3, [r7, #30]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	8bfa      	ldrh	r2, [r7, #30]
 800b9b8:	60da      	str	r2, [r3, #12]
 800b9ba:	e062      	b.n	800ba82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b9c2:	e05e      	b.n	800ba82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	d828      	bhi.n	800ba1e <UART_SetConfig+0x56a>
 800b9cc:	a201      	add	r2, pc, #4	; (adr r2, 800b9d4 <UART_SetConfig+0x520>)
 800b9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d2:	bf00      	nop
 800b9d4:	0800b9f9 	.word	0x0800b9f9
 800b9d8:	0800ba01 	.word	0x0800ba01
 800b9dc:	0800ba09 	.word	0x0800ba09
 800b9e0:	0800ba1f 	.word	0x0800ba1f
 800b9e4:	0800ba0f 	.word	0x0800ba0f
 800b9e8:	0800ba1f 	.word	0x0800ba1f
 800b9ec:	0800ba1f 	.word	0x0800ba1f
 800b9f0:	0800ba1f 	.word	0x0800ba1f
 800b9f4:	0800ba17 	.word	0x0800ba17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9f8:	f7fe ff40 	bl	800a87c <HAL_RCC_GetPCLK1Freq>
 800b9fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9fe:	e014      	b.n	800ba2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba00:	f7fe ff52 	bl	800a8a8 <HAL_RCC_GetPCLK2Freq>
 800ba04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ba06:	e010      	b.n	800ba2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba08:	4b1a      	ldr	r3, [pc, #104]	; (800ba74 <UART_SetConfig+0x5c0>)
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ba0c:	e00d      	b.n	800ba2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba0e:	f7fe fec9 	bl	800a7a4 <HAL_RCC_GetSysClockFreq>
 800ba12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ba14:	e009      	b.n	800ba2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ba1c:	e005      	b.n	800ba2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ba28:	bf00      	nop
    }

    if (pclk != 0U)
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d028      	beq.n	800ba82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	4a10      	ldr	r2, [pc, #64]	; (800ba78 <UART_SetConfig+0x5c4>)
 800ba36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	085b      	lsrs	r3, r3, #1
 800ba48:	441a      	add	r2, r3
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	2b0f      	cmp	r3, #15
 800ba58:	d910      	bls.n	800ba7c <UART_SetConfig+0x5c8>
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba60:	d20c      	bcs.n	800ba7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60da      	str	r2, [r3, #12]
 800ba6c:	e009      	b.n	800ba82 <UART_SetConfig+0x5ce>
 800ba6e:	bf00      	nop
 800ba70:	40008000 	.word	0x40008000
 800ba74:	00f42400 	.word	0x00f42400
 800ba78:	08011568 	.word	0x08011568
      }
      else
      {
        ret = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2200      	movs	r2, #0
 800ba96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ba9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3730      	adds	r7, #48	; 0x30
 800baa6:	46bd      	mov	sp, r7
 800baa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800baac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab8:	f003 0308 	and.w	r3, r3, #8
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00a      	beq.n	800bad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	430a      	orrs	r2, r1
 800baf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00a      	beq.n	800bb1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	430a      	orrs	r2, r1
 800bb18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00a      	beq.n	800bb3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb40:	f003 0310 	and.w	r3, r3, #16
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00a      	beq.n	800bb5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb62:	f003 0320 	and.w	r3, r3, #32
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00a      	beq.n	800bb80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	430a      	orrs	r2, r1
 800bb7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d01a      	beq.n	800bbc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbaa:	d10a      	bne.n	800bbc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00a      	beq.n	800bbe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	430a      	orrs	r2, r1
 800bbe2:	605a      	str	r2, [r3, #4]
  }
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b098      	sub	sp, #96	; 0x60
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc00:	f7fb fcb0 	bl	8007564 <HAL_GetTick>
 800bc04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0308 	and.w	r3, r3, #8
 800bc10:	2b08      	cmp	r3, #8
 800bc12:	d12f      	bne.n	800bc74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f88e 	bl	800bd44 <UART_WaitOnFlagUntilTimeout>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d022      	beq.n	800bc74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc36:	e853 3f00 	ldrex	r3, [r3]
 800bc3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc42:	653b      	str	r3, [r7, #80]	; 0x50
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc4c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc54:	e841 2300 	strex	r3, r2, [r1]
 800bc58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1e6      	bne.n	800bc2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2220      	movs	r2, #32
 800bc64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e063      	b.n	800bd3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0304 	and.w	r3, r3, #4
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d149      	bne.n	800bd16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f857 	bl	800bd44 <UART_WaitOnFlagUntilTimeout>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d03c      	beq.n	800bd16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca4:	e853 3f00 	ldrex	r3, [r3]
 800bca8:	623b      	str	r3, [r7, #32]
   return(result);
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcba:	633b      	str	r3, [r7, #48]	; 0x30
 800bcbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcc2:	e841 2300 	strex	r3, r2, [r1]
 800bcc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e6      	bne.n	800bc9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	e853 3f00 	ldrex	r3, [r3]
 800bcdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f023 0301 	bic.w	r3, r3, #1
 800bce4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3308      	adds	r3, #8
 800bcec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcee:	61fa      	str	r2, [r7, #28]
 800bcf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf2:	69b9      	ldr	r1, [r7, #24]
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	e841 2300 	strex	r3, r2, [r1]
 800bcfa:	617b      	str	r3, [r7, #20]
   return(result);
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1e5      	bne.n	800bcce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e012      	b.n	800bd3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2220      	movs	r2, #32
 800bd1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2220      	movs	r2, #32
 800bd22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3758      	adds	r7, #88	; 0x58
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	603b      	str	r3, [r7, #0]
 800bd50:	4613      	mov	r3, r2
 800bd52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd54:	e04f      	b.n	800bdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5c:	d04b      	beq.n	800bdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd5e:	f7fb fc01 	bl	8007564 <HAL_GetTick>
 800bd62:	4602      	mov	r2, r0
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	69ba      	ldr	r2, [r7, #24]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d302      	bcc.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd74:	2303      	movs	r3, #3
 800bd76:	e04e      	b.n	800be16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 0304 	and.w	r3, r3, #4
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d037      	beq.n	800bdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b80      	cmp	r3, #128	; 0x80
 800bd8a:	d034      	beq.n	800bdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	d031      	beq.n	800bdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	69db      	ldr	r3, [r3, #28]
 800bd98:	f003 0308 	and.w	r3, r3, #8
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d110      	bne.n	800bdc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2208      	movs	r2, #8
 800bda6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bda8:	68f8      	ldr	r0, [r7, #12]
 800bdaa:	f000 f838 	bl	800be1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2208      	movs	r2, #8
 800bdb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e029      	b.n	800be16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	69db      	ldr	r3, [r3, #28]
 800bdc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd0:	d111      	bne.n	800bdf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 f81e 	bl	800be1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2220      	movs	r2, #32
 800bde6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e00f      	b.n	800be16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69da      	ldr	r2, [r3, #28]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4013      	ands	r3, r2
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	429a      	cmp	r2, r3
 800be04:	bf0c      	ite	eq
 800be06:	2301      	moveq	r3, #1
 800be08:	2300      	movne	r3, #0
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	461a      	mov	r2, r3
 800be0e:	79fb      	ldrb	r3, [r7, #7]
 800be10:	429a      	cmp	r2, r3
 800be12:	d0a0      	beq.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be1e:	b480      	push	{r7}
 800be20:	b095      	sub	sp, #84	; 0x54
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2e:	e853 3f00 	ldrex	r3, [r3]
 800be32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be44:	643b      	str	r3, [r7, #64]	; 0x40
 800be46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e6      	bne.n	800be26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3308      	adds	r3, #8
 800be5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	e853 3f00 	ldrex	r3, [r3]
 800be66:	61fb      	str	r3, [r7, #28]
   return(result);
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be6e:	f023 0301 	bic.w	r3, r3, #1
 800be72:	64bb      	str	r3, [r7, #72]	; 0x48
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3308      	adds	r3, #8
 800be7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be84:	e841 2300 	strex	r3, r2, [r1]
 800be88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1e3      	bne.n	800be58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be94:	2b01      	cmp	r3, #1
 800be96:	d118      	bne.n	800beca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	e853 3f00 	ldrex	r3, [r3]
 800bea4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	f023 0310 	bic.w	r3, r3, #16
 800beac:	647b      	str	r3, [r7, #68]	; 0x44
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beb6:	61bb      	str	r3, [r7, #24]
 800beb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beba:	6979      	ldr	r1, [r7, #20]
 800bebc:	69ba      	ldr	r2, [r7, #24]
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	613b      	str	r3, [r7, #16]
   return(result);
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1e6      	bne.n	800be98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2220      	movs	r2, #32
 800bece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bede:	bf00      	nop
 800bee0:	3754      	adds	r7, #84	; 0x54
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800beea:	b480      	push	{r7}
 800beec:	b085      	sub	sp, #20
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_UARTEx_DisableFifoMode+0x16>
 800befc:	2302      	movs	r3, #2
 800befe:	e027      	b.n	800bf50 <HAL_UARTEx_DisableFifoMode+0x66>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2224      	movs	r2, #36	; 0x24
 800bf0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0201 	bic.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d101      	bne.n	800bf74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf70:	2302      	movs	r3, #2
 800bf72:	e02d      	b.n	800bfd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2224      	movs	r2, #36	; 0x24
 800bf80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0201 	bic.w	r2, r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f84f 	bl	800c054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d101      	bne.n	800bff0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfec:	2302      	movs	r3, #2
 800bfee:	e02d      	b.n	800c04c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2224      	movs	r2, #36	; 0x24
 800bffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 0201 	bic.w	r2, r2, #1
 800c016:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f811 	bl	800c054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c060:	2b00      	cmp	r3, #0
 800c062:	d108      	bne.n	800c076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c074:	e031      	b.n	800c0da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c076:	2308      	movs	r3, #8
 800c078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c07a:	2308      	movs	r3, #8
 800c07c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	0e5b      	lsrs	r3, r3, #25
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 0307 	and.w	r3, r3, #7
 800c08c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	0f5b      	lsrs	r3, r3, #29
 800c096:	b2db      	uxtb	r3, r3
 800c098:	f003 0307 	and.w	r3, r3, #7
 800c09c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	7b3a      	ldrb	r2, [r7, #12]
 800c0a2:	4911      	ldr	r1, [pc, #68]	; (800c0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c0a4:	5c8a      	ldrb	r2, [r1, r2]
 800c0a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c0aa:	7b3a      	ldrb	r2, [r7, #12]
 800c0ac:	490f      	ldr	r1, [pc, #60]	; (800c0ec <UARTEx_SetNbDataToProcess+0x98>)
 800c0ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	7b7a      	ldrb	r2, [r7, #13]
 800c0c0:	4909      	ldr	r1, [pc, #36]	; (800c0e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c0c2:	5c8a      	ldrb	r2, [r1, r2]
 800c0c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0c8:	7b7a      	ldrb	r2, [r7, #13]
 800c0ca:	4908      	ldr	r1, [pc, #32]	; (800c0ec <UARTEx_SetNbDataToProcess+0x98>)
 800c0cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0da:	bf00      	nop
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	08011580 	.word	0x08011580
 800c0ec:	08011588 	.word	0x08011588

0800c0f0 <arm_rfft_32_fast_init_f32>:
 800c0f0:	b178      	cbz	r0, 800c112 <arm_rfft_32_fast_init_f32+0x22>
 800c0f2:	b430      	push	{r4, r5}
 800c0f4:	4908      	ldr	r1, [pc, #32]	; (800c118 <arm_rfft_32_fast_init_f32+0x28>)
 800c0f6:	4a09      	ldr	r2, [pc, #36]	; (800c11c <arm_rfft_32_fast_init_f32+0x2c>)
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c0fe:	8003      	strh	r3, [r0, #0]
 800c100:	2520      	movs	r5, #32
 800c102:	2414      	movs	r4, #20
 800c104:	4b06      	ldr	r3, [pc, #24]	; (800c120 <arm_rfft_32_fast_init_f32+0x30>)
 800c106:	8205      	strh	r5, [r0, #16]
 800c108:	8184      	strh	r4, [r0, #12]
 800c10a:	6143      	str	r3, [r0, #20]
 800c10c:	bc30      	pop	{r4, r5}
 800c10e:	2000      	movs	r0, #0
 800c110:	4770      	bx	lr
 800c112:	f04f 30ff 	mov.w	r0, #4294967295
 800c116:	4770      	bx	lr
 800c118:	08012540 	.word	0x08012540
 800c11c:	08016e78 	.word	0x08016e78
 800c120:	0801fbf8 	.word	0x0801fbf8

0800c124 <arm_rfft_64_fast_init_f32>:
 800c124:	b178      	cbz	r0, 800c146 <arm_rfft_64_fast_init_f32+0x22>
 800c126:	b430      	push	{r4, r5}
 800c128:	4908      	ldr	r1, [pc, #32]	; (800c14c <arm_rfft_64_fast_init_f32+0x28>)
 800c12a:	4a09      	ldr	r2, [pc, #36]	; (800c150 <arm_rfft_64_fast_init_f32+0x2c>)
 800c12c:	2320      	movs	r3, #32
 800c12e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c132:	8003      	strh	r3, [r0, #0]
 800c134:	2540      	movs	r5, #64	; 0x40
 800c136:	2430      	movs	r4, #48	; 0x30
 800c138:	4b06      	ldr	r3, [pc, #24]	; (800c154 <arm_rfft_64_fast_init_f32+0x30>)
 800c13a:	8205      	strh	r5, [r0, #16]
 800c13c:	8184      	strh	r4, [r0, #12]
 800c13e:	6143      	str	r3, [r0, #20]
 800c140:	bc30      	pop	{r4, r5}
 800c142:	2000      	movs	r0, #0
 800c144:	4770      	bx	lr
 800c146:	f04f 30ff 	mov.w	r0, #4294967295
 800c14a:	4770      	bx	lr
 800c14c:	08014698 	.word	0x08014698
 800c150:	0801b6f8 	.word	0x0801b6f8
 800c154:	08024478 	.word	0x08024478

0800c158 <arm_rfft_256_fast_init_f32>:
 800c158:	b180      	cbz	r0, 800c17c <arm_rfft_256_fast_init_f32+0x24>
 800c15a:	b430      	push	{r4, r5}
 800c15c:	4909      	ldr	r1, [pc, #36]	; (800c184 <arm_rfft_256_fast_init_f32+0x2c>)
 800c15e:	4a0a      	ldr	r2, [pc, #40]	; (800c188 <arm_rfft_256_fast_init_f32+0x30>)
 800c160:	2380      	movs	r3, #128	; 0x80
 800c162:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c166:	8003      	strh	r3, [r0, #0]
 800c168:	f44f 7580 	mov.w	r5, #256	; 0x100
 800c16c:	24d0      	movs	r4, #208	; 0xd0
 800c16e:	4b07      	ldr	r3, [pc, #28]	; (800c18c <arm_rfft_256_fast_init_f32+0x34>)
 800c170:	8205      	strh	r5, [r0, #16]
 800c172:	8184      	strh	r4, [r0, #12]
 800c174:	6143      	str	r3, [r0, #20]
 800c176:	bc30      	pop	{r4, r5}
 800c178:	2000      	movs	r0, #0
 800c17a:	4770      	bx	lr
 800c17c:	f04f 30ff 	mov.w	r0, #4294967295
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	080123a0 	.word	0x080123a0
 800c188:	08016a78 	.word	0x08016a78
 800c18c:	0801f7f8 	.word	0x0801f7f8

0800c190 <arm_rfft_512_fast_init_f32>:
 800c190:	b190      	cbz	r0, 800c1b8 <arm_rfft_512_fast_init_f32+0x28>
 800c192:	b430      	push	{r4, r5}
 800c194:	490a      	ldr	r1, [pc, #40]	; (800c1c0 <arm_rfft_512_fast_init_f32+0x30>)
 800c196:	4a0b      	ldr	r2, [pc, #44]	; (800c1c4 <arm_rfft_512_fast_init_f32+0x34>)
 800c198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c19c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c1a0:	8003      	strh	r3, [r0, #0]
 800c1a2:	f44f 7500 	mov.w	r5, #512	; 0x200
 800c1a6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800c1aa:	4b07      	ldr	r3, [pc, #28]	; (800c1c8 <arm_rfft_512_fast_init_f32+0x38>)
 800c1ac:	8205      	strh	r5, [r0, #16]
 800c1ae:	8184      	strh	r4, [r0, #12]
 800c1b0:	6143      	str	r3, [r0, #20]
 800c1b2:	bc30      	pop	{r4, r5}
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	4770      	bx	lr
 800c1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	08014328 	.word	0x08014328
 800c1c4:	0801aef8 	.word	0x0801aef8
 800c1c8:	08023c78 	.word	0x08023c78

0800c1cc <arm_rfft_1024_fast_init_f32>:
 800c1cc:	b190      	cbz	r0, 800c1f4 <arm_rfft_1024_fast_init_f32+0x28>
 800c1ce:	b430      	push	{r4, r5}
 800c1d0:	490a      	ldr	r1, [pc, #40]	; (800c1fc <arm_rfft_1024_fast_init_f32+0x30>)
 800c1d2:	4a0b      	ldr	r2, [pc, #44]	; (800c200 <arm_rfft_1024_fast_init_f32+0x34>)
 800c1d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1d8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c1dc:	8003      	strh	r3, [r0, #0]
 800c1de:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800c1e2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800c1e6:	4b07      	ldr	r3, [pc, #28]	; (800c204 <arm_rfft_1024_fast_init_f32+0x38>)
 800c1e8:	8205      	strh	r5, [r0, #16]
 800c1ea:	8184      	strh	r4, [r0, #12]
 800c1ec:	6143      	str	r3, [r0, #20]
 800c1ee:	bc30      	pop	{r4, r5}
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	4770      	bx	lr
 800c1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	080146f8 	.word	0x080146f8
 800c200:	0801b7f8 	.word	0x0801b7f8
 800c204:	0801c7f8 	.word	0x0801c7f8

0800c208 <arm_rfft_2048_fast_init_f32>:
 800c208:	b190      	cbz	r0, 800c230 <arm_rfft_2048_fast_init_f32+0x28>
 800c20a:	b430      	push	{r4, r5}
 800c20c:	490a      	ldr	r1, [pc, #40]	; (800c238 <arm_rfft_2048_fast_init_f32+0x30>)
 800c20e:	4a0b      	ldr	r2, [pc, #44]	; (800c23c <arm_rfft_2048_fast_init_f32+0x34>)
 800c210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c214:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c218:	8003      	strh	r3, [r0, #0]
 800c21a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800c21e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800c222:	4b07      	ldr	r3, [pc, #28]	; (800c240 <arm_rfft_2048_fast_init_f32+0x38>)
 800c224:	8205      	strh	r5, [r0, #16]
 800c226:	8184      	strh	r4, [r0, #12]
 800c228:	6143      	str	r3, [r0, #20]
 800c22a:	bc30      	pop	{r4, r5}
 800c22c:	2000      	movs	r0, #0
 800c22e:	4770      	bx	lr
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	08011590 	.word	0x08011590
 800c23c:	08014a78 	.word	0x08014a78
 800c240:	0801d7f8 	.word	0x0801d7f8

0800c244 <arm_rfft_4096_fast_init_f32>:
 800c244:	b190      	cbz	r0, 800c26c <arm_rfft_4096_fast_init_f32+0x28>
 800c246:	b430      	push	{r4, r5}
 800c248:	490a      	ldr	r1, [pc, #40]	; (800c274 <arm_rfft_4096_fast_init_f32+0x30>)
 800c24a:	4a0b      	ldr	r2, [pc, #44]	; (800c278 <arm_rfft_4096_fast_init_f32+0x34>)
 800c24c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c250:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c254:	8003      	strh	r3, [r0, #0]
 800c256:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800c25a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800c25e:	4b07      	ldr	r3, [pc, #28]	; (800c27c <arm_rfft_4096_fast_init_f32+0x38>)
 800c260:	8205      	strh	r5, [r0, #16]
 800c262:	8184      	strh	r4, [r0, #12]
 800c264:	6143      	str	r3, [r0, #20]
 800c266:	bc30      	pop	{r4, r5}
 800c268:	2000      	movs	r0, #0
 800c26a:	4770      	bx	lr
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	08012568 	.word	0x08012568
 800c278:	08016ef8 	.word	0x08016ef8
 800c27c:	0801fc78 	.word	0x0801fc78

0800c280 <arm_rfft_fast_init_f32>:
 800c280:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c284:	d01f      	beq.n	800c2c6 <arm_rfft_fast_init_f32+0x46>
 800c286:	d90b      	bls.n	800c2a0 <arm_rfft_fast_init_f32+0x20>
 800c288:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c28c:	d019      	beq.n	800c2c2 <arm_rfft_fast_init_f32+0x42>
 800c28e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c292:	d012      	beq.n	800c2ba <arm_rfft_fast_init_f32+0x3a>
 800c294:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c298:	d00d      	beq.n	800c2b6 <arm_rfft_fast_init_f32+0x36>
 800c29a:	f04f 30ff 	mov.w	r0, #4294967295
 800c29e:	4770      	bx	lr
 800c2a0:	2940      	cmp	r1, #64	; 0x40
 800c2a2:	d00c      	beq.n	800c2be <arm_rfft_fast_init_f32+0x3e>
 800c2a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c2a8:	d003      	beq.n	800c2b2 <arm_rfft_fast_init_f32+0x32>
 800c2aa:	2920      	cmp	r1, #32
 800c2ac:	d1f5      	bne.n	800c29a <arm_rfft_fast_init_f32+0x1a>
 800c2ae:	4b07      	ldr	r3, [pc, #28]	; (800c2cc <arm_rfft_fast_init_f32+0x4c>)
 800c2b0:	4718      	bx	r3
 800c2b2:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <arm_rfft_fast_init_f32+0x50>)
 800c2b4:	4718      	bx	r3
 800c2b6:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <arm_rfft_fast_init_f32+0x54>)
 800c2b8:	4718      	bx	r3
 800c2ba:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <arm_rfft_fast_init_f32+0x58>)
 800c2bc:	4718      	bx	r3
 800c2be:	4b07      	ldr	r3, [pc, #28]	; (800c2dc <arm_rfft_fast_init_f32+0x5c>)
 800c2c0:	e7f6      	b.n	800c2b0 <arm_rfft_fast_init_f32+0x30>
 800c2c2:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <arm_rfft_fast_init_f32+0x60>)
 800c2c4:	e7f4      	b.n	800c2b0 <arm_rfft_fast_init_f32+0x30>
 800c2c6:	4b07      	ldr	r3, [pc, #28]	; (800c2e4 <arm_rfft_fast_init_f32+0x64>)
 800c2c8:	e7f2      	b.n	800c2b0 <arm_rfft_fast_init_f32+0x30>
 800c2ca:	bf00      	nop
 800c2cc:	0800c0f1 	.word	0x0800c0f1
 800c2d0:	0800c159 	.word	0x0800c159
 800c2d4:	0800c1cd 	.word	0x0800c1cd
 800c2d8:	0800c245 	.word	0x0800c245
 800c2dc:	0800c125 	.word	0x0800c125
 800c2e0:	0800c209 	.word	0x0800c209
 800c2e4:	0800c191 	.word	0x0800c191

0800c2e8 <stage_rfft_f32>:
 800c2e8:	b410      	push	{r4}
 800c2ea:	edd1 7a00 	vldr	s15, [r1]
 800c2ee:	ed91 7a01 	vldr	s14, [r1, #4]
 800c2f2:	8804      	ldrh	r4, [r0, #0]
 800c2f4:	6940      	ldr	r0, [r0, #20]
 800c2f6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c2fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c2fe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c302:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c30a:	3c01      	subs	r4, #1
 800c30c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800c310:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c314:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800c318:	ed82 7a00 	vstr	s14, [r2]
 800c31c:	edc2 7a01 	vstr	s15, [r2, #4]
 800c320:	3010      	adds	r0, #16
 800c322:	3210      	adds	r2, #16
 800c324:	3b08      	subs	r3, #8
 800c326:	3110      	adds	r1, #16
 800c328:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c32c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c330:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c334:	edd3 4a03 	vldr	s9, [r3, #12]
 800c338:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c33c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c340:	ee77 5a45 	vsub.f32	s11, s14, s10
 800c344:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c348:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c34c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c350:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c354:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c358:	ee37 7a23 	vadd.f32	s14, s14, s7
 800c35c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c360:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c364:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c368:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c36c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c370:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c374:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c378:	3c01      	subs	r4, #1
 800c37a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c37e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c382:	f1a3 0308 	sub.w	r3, r3, #8
 800c386:	f101 0108 	add.w	r1, r1, #8
 800c38a:	f100 0008 	add.w	r0, r0, #8
 800c38e:	f102 0208 	add.w	r2, r2, #8
 800c392:	d1c9      	bne.n	800c328 <stage_rfft_f32+0x40>
 800c394:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop

0800c39c <merge_rfft_f32>:
 800c39c:	b410      	push	{r4}
 800c39e:	edd1 7a00 	vldr	s15, [r1]
 800c3a2:	edd1 6a01 	vldr	s13, [r1, #4]
 800c3a6:	8804      	ldrh	r4, [r0, #0]
 800c3a8:	6940      	ldr	r0, [r0, #20]
 800c3aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c3ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c3b2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c3b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c3ba:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c3be:	3c01      	subs	r4, #1
 800c3c0:	ed82 7a00 	vstr	s14, [r2]
 800c3c4:	edc2 7a01 	vstr	s15, [r2, #4]
 800c3c8:	b3dc      	cbz	r4, 800c442 <merge_rfft_f32+0xa6>
 800c3ca:	00e3      	lsls	r3, r4, #3
 800c3cc:	3b08      	subs	r3, #8
 800c3ce:	440b      	add	r3, r1
 800c3d0:	3010      	adds	r0, #16
 800c3d2:	3210      	adds	r2, #16
 800c3d4:	3110      	adds	r1, #16
 800c3d6:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c3da:	ed93 7a02 	vldr	s14, [r3, #8]
 800c3de:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c3e2:	edd3 4a03 	vldr	s9, [r3, #12]
 800c3e6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c3ea:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c3ee:	ee75 5a47 	vsub.f32	s11, s10, s14
 800c3f2:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c3f6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c3fa:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c3fe:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c402:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c406:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c40a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c40e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c412:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c416:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c41a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c41e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c422:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c426:	3c01      	subs	r4, #1
 800c428:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c42c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c430:	f1a3 0308 	sub.w	r3, r3, #8
 800c434:	f101 0108 	add.w	r1, r1, #8
 800c438:	f100 0008 	add.w	r0, r0, #8
 800c43c:	f102 0208 	add.w	r2, r2, #8
 800c440:	d1c9      	bne.n	800c3d6 <merge_rfft_f32+0x3a>
 800c442:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <arm_rfft_fast_f32>:
 800c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44c:	8a05      	ldrh	r5, [r0, #16]
 800c44e:	086d      	lsrs	r5, r5, #1
 800c450:	8005      	strh	r5, [r0, #0]
 800c452:	4604      	mov	r4, r0
 800c454:	4616      	mov	r6, r2
 800c456:	461d      	mov	r5, r3
 800c458:	b14b      	cbz	r3, 800c46e <arm_rfft_fast_f32+0x26>
 800c45a:	f7ff ff9f 	bl	800c39c <merge_rfft_f32>
 800c45e:	462a      	mov	r2, r5
 800c460:	4631      	mov	r1, r6
 800c462:	4620      	mov	r0, r4
 800c464:	2301      	movs	r3, #1
 800c466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	f000 bb33 	b.w	800cad4 <arm_cfft_f32>
 800c46e:	460f      	mov	r7, r1
 800c470:	461a      	mov	r2, r3
 800c472:	2301      	movs	r3, #1
 800c474:	f000 fb2e 	bl	800cad4 <arm_cfft_f32>
 800c478:	4632      	mov	r2, r6
 800c47a:	4639      	mov	r1, r7
 800c47c:	4620      	mov	r0, r4
 800c47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c482:	f7ff bf31 	b.w	800c2e8 <stage_rfft_f32>
 800c486:	bf00      	nop

0800c488 <arm_cfft_radix8by2_f32>:
 800c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48c:	ed2d 8b08 	vpush	{d8-d11}
 800c490:	4607      	mov	r7, r0
 800c492:	4608      	mov	r0, r1
 800c494:	f8b7 c000 	ldrh.w	ip, [r7]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c49e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c4a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c4a6:	f000 80b0 	beq.w	800c60a <arm_cfft_radix8by2_f32+0x182>
 800c4aa:	008c      	lsls	r4, r1, #2
 800c4ac:	3410      	adds	r4, #16
 800c4ae:	f100 0310 	add.w	r3, r0, #16
 800c4b2:	1906      	adds	r6, r0, r4
 800c4b4:	3210      	adds	r2, #16
 800c4b6:	4444      	add	r4, r8
 800c4b8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c4bc:	f108 0510 	add.w	r5, r8, #16
 800c4c0:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c4c4:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c4c8:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c4cc:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c4d0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c4d4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c4d8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c4dc:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c4e0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c4e4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c4e8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c4ec:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c4f0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c4f4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c4f8:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c4fc:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c500:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c504:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c508:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c50c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c510:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c514:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c518:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c51c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c520:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c524:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c528:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c52c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c530:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c534:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c538:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c53c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c540:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c544:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c548:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c54c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c550:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c554:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c558:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c55c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c560:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c564:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c568:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c56c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c570:	ee64 6a26 	vmul.f32	s13, s8, s13
 800c574:	ee24 4a03 	vmul.f32	s8, s8, s6
 800c578:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c57c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c580:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c584:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c588:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c58c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c590:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c594:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c598:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c59c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c5a0:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c5a4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c5a8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c5ac:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c5b0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800c5b4:	ee66 4a87 	vmul.f32	s9, s13, s14
 800c5b8:	ee25 4a25 	vmul.f32	s8, s10, s11
 800c5bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c5c0:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c5c4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c5c8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c5cc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c5d0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c5d4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800c5d8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c5dc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c5e0:	3310      	adds	r3, #16
 800c5e2:	4563      	cmp	r3, ip
 800c5e4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800c5e8:	f106 0610 	add.w	r6, r6, #16
 800c5ec:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c5f0:	f102 0210 	add.w	r2, r2, #16
 800c5f4:	ed04 6a02 	vstr	s12, [r4, #-8]
 800c5f8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c5fc:	f105 0510 	add.w	r5, r5, #16
 800c600:	f104 0410 	add.w	r4, r4, #16
 800c604:	f47f af5c 	bne.w	800c4c0 <arm_cfft_radix8by2_f32+0x38>
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	b28c      	uxth	r4, r1
 800c60c:	4621      	mov	r1, r4
 800c60e:	2302      	movs	r3, #2
 800c610:	f000 fec2 	bl	800d398 <arm_radix8_butterfly_f32>
 800c614:	ecbd 8b08 	vpop	{d8-d11}
 800c618:	4621      	mov	r1, r4
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4640      	mov	r0, r8
 800c61e:	2302      	movs	r3, #2
 800c620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c624:	f000 beb8 	b.w	800d398 <arm_radix8_butterfly_f32>

0800c628 <arm_cfft_radix8by4_f32>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	ed2d 8b0a 	vpush	{d8-d12}
 800c630:	b08d      	sub	sp, #52	; 0x34
 800c632:	460d      	mov	r5, r1
 800c634:	910b      	str	r1, [sp, #44]	; 0x2c
 800c636:	8801      	ldrh	r1, [r0, #0]
 800c638:	6842      	ldr	r2, [r0, #4]
 800c63a:	900a      	str	r0, [sp, #40]	; 0x28
 800c63c:	0849      	lsrs	r1, r1, #1
 800c63e:	008b      	lsls	r3, r1, #2
 800c640:	18ee      	adds	r6, r5, r3
 800c642:	18f0      	adds	r0, r6, r3
 800c644:	edd0 5a00 	vldr	s11, [r0]
 800c648:	edd5 7a00 	vldr	s15, [r5]
 800c64c:	ed96 7a00 	vldr	s14, [r6]
 800c650:	edd0 3a01 	vldr	s7, [r0, #4]
 800c654:	ed96 4a01 	vldr	s8, [r6, #4]
 800c658:	ed95 5a01 	vldr	s10, [r5, #4]
 800c65c:	9008      	str	r0, [sp, #32]
 800c65e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800c662:	18c7      	adds	r7, r0, r3
 800c664:	edd7 4a00 	vldr	s9, [r7]
 800c668:	ed97 3a01 	vldr	s6, [r7, #4]
 800c66c:	9701      	str	r7, [sp, #4]
 800c66e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800c672:	462c      	mov	r4, r5
 800c674:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c678:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c67c:	ee16 ca90 	vmov	ip, s13
 800c680:	f844 cb08 	str.w	ip, [r4], #8
 800c684:	ee75 6a23 	vadd.f32	s13, s10, s7
 800c688:	edd6 5a01 	vldr	s11, [r6, #4]
 800c68c:	edd7 2a01 	vldr	s5, [r7, #4]
 800c690:	9404      	str	r4, [sp, #16]
 800c692:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c696:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c69a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c69e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800c6a2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c6a6:	0849      	lsrs	r1, r1, #1
 800c6a8:	f102 0e08 	add.w	lr, r2, #8
 800c6ac:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c6b0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c6b4:	9109      	str	r1, [sp, #36]	; 0x24
 800c6b6:	ee35 4a47 	vsub.f32	s8, s10, s14
 800c6ba:	f1a1 0902 	sub.w	r9, r1, #2
 800c6be:	f8cd e00c 	str.w	lr, [sp, #12]
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	ee13 ea90 	vmov	lr, s7
 800c6c8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800c6cc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	edc5 5a01 	vstr	s11, [r5, #4]
 800c6d6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c6da:	f841 eb08 	str.w	lr, [r1], #8
 800c6de:	ee34 5a24 	vadd.f32	s10, s8, s9
 800c6e2:	ee16 ea10 	vmov	lr, s12
 800c6e6:	ed86 5a01 	vstr	s10, [r6, #4]
 800c6ea:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c6ee:	f844 eb08 	str.w	lr, [r4], #8
 800c6f2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c6f6:	edc0 6a01 	vstr	s13, [r0, #4]
 800c6fa:	9405      	str	r4, [sp, #20]
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	ee17 0a90 	vmov	r0, s15
 800c702:	9106      	str	r1, [sp, #24]
 800c704:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c708:	f102 0110 	add.w	r1, r2, #16
 800c70c:	46bc      	mov	ip, r7
 800c70e:	9100      	str	r1, [sp, #0]
 800c710:	f847 0b08 	str.w	r0, [r7], #8
 800c714:	f102 0118 	add.w	r1, r2, #24
 800c718:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800c71c:	9102      	str	r1, [sp, #8]
 800c71e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c722:	9007      	str	r0, [sp, #28]
 800c724:	f000 8134 	beq.w	800c990 <arm_cfft_radix8by4_f32+0x368>
 800c728:	f102 0920 	add.w	r9, r2, #32
 800c72c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800c730:	9a01      	ldr	r2, [sp, #4]
 800c732:	f8dd a000 	ldr.w	sl, [sp]
 800c736:	3b0c      	subs	r3, #12
 800c738:	4683      	mov	fp, r0
 800c73a:	4463      	add	r3, ip
 800c73c:	f105 0e10 	add.w	lr, r5, #16
 800c740:	f1a4 010c 	sub.w	r1, r4, #12
 800c744:	f104 0510 	add.w	r5, r4, #16
 800c748:	f1a6 0c0c 	sub.w	ip, r6, #12
 800c74c:	f1a2 040c 	sub.w	r4, r2, #12
 800c750:	f106 0010 	add.w	r0, r6, #16
 800c754:	3210      	adds	r2, #16
 800c756:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800c75a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c75e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c762:	ed52 1a02 	vldr	s3, [r2, #-8]
 800c766:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c76a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800c76e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800c772:	ed10 8a01 	vldr	s16, [r0, #-4]
 800c776:	ee35 4a25 	vadd.f32	s8, s10, s11
 800c77a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800c77e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800c782:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c786:	ee37 7a21 	vadd.f32	s14, s14, s3
 800c78a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c78e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800c792:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c796:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c79a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c79e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800c7a2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c7a6:	ee70 3a67 	vsub.f32	s7, s0, s15
 800c7aa:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800c7ae:	ed94 7a02 	vldr	s14, [r4, #8]
 800c7b2:	ed9c 2a02 	vldr	s4, [ip, #8]
 800c7b6:	ed91 ba02 	vldr	s22, [r1, #8]
 800c7ba:	edd3 9a02 	vldr	s19, [r3, #8]
 800c7be:	edd4 2a01 	vldr	s5, [r4, #4]
 800c7c2:	ed9c 9a01 	vldr	s18, [ip, #4]
 800c7c6:	ed93 5a01 	vldr	s10, [r3, #4]
 800c7ca:	edd1 0a01 	vldr	s1, [r1, #4]
 800c7ce:	ee72 6a07 	vadd.f32	s13, s4, s14
 800c7d2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800c7d6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800c7da:	ee79 4a22 	vadd.f32	s9, s18, s5
 800c7de:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800c7e2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800c7e6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800c7ea:	ed91 7a01 	vldr	s14, [r1, #4]
 800c7ee:	edd3 8a01 	vldr	s17, [r3, #4]
 800c7f2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800c7f6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800c7fa:	ee37 7a28 	vadd.f32	s14, s14, s17
 800c7fe:	ee32 9a60 	vsub.f32	s18, s4, s1
 800c802:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c806:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800c80a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800c80e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800c812:	ee39 9a05 	vadd.f32	s18, s18, s10
 800c816:	ee7a aac1 	vsub.f32	s21, s21, s2
 800c81a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c81e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800c822:	ee69 ba07 	vmul.f32	s23, s18, s14
 800c826:	ee6a aa87 	vmul.f32	s21, s21, s14
 800c82a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800c82e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800c832:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800c836:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800c83a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800c83e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800c842:	ee78 8a89 	vadd.f32	s17, s17, s18
 800c846:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800c84a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800c84e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800c852:	ee76 6acb 	vsub.f32	s13, s13, s22
 800c856:	ee36 6a48 	vsub.f32	s12, s12, s16
 800c85a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800c85e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800c862:	ed40 3a01 	vstr	s7, [r0, #-4]
 800c866:	edc1 8a01 	vstr	s17, [r1, #4]
 800c86a:	ed81 aa02 	vstr	s20, [r1, #8]
 800c86e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800c872:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800c876:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800c87a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800c87e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800c882:	ee36 6a41 	vsub.f32	s12, s12, s2
 800c886:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800c88a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800c88e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800c892:	ee26 6a23 	vmul.f32	s12, s12, s7
 800c896:	ee24 4a26 	vmul.f32	s8, s8, s13
 800c89a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c89e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c8a2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800c8a6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c8aa:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c8ae:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800c8b2:	ee79 3a29 	vadd.f32	s7, s18, s19
 800c8b6:	ee75 6a60 	vsub.f32	s13, s10, s1
 800c8ba:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800c8be:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c8c2:	ed45 3a02 	vstr	s7, [r5, #-8]
 800c8c6:	ed05 6a01 	vstr	s12, [r5, #-4]
 800c8ca:	ed84 7a01 	vstr	s14, [r4, #4]
 800c8ce:	ed84 4a02 	vstr	s8, [r4, #8]
 800c8d2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800c8d6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800c8da:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800c8de:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800c8e2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800c8e6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800c8ea:	ee67 2a26 	vmul.f32	s5, s14, s13
 800c8ee:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c8f2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800c8f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c8fa:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c8fe:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c902:	ee63 6a26 	vmul.f32	s13, s6, s13
 800c906:	ee23 3a25 	vmul.f32	s6, s6, s11
 800c90a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c90e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800c912:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800c916:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c91a:	f1bb 0b01 	subs.w	fp, fp, #1
 800c91e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800c922:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c926:	f10e 0e08 	add.w	lr, lr, #8
 800c92a:	ed83 3a02 	vstr	s6, [r3, #8]
 800c92e:	ed83 7a01 	vstr	s14, [r3, #4]
 800c932:	f1ac 0c08 	sub.w	ip, ip, #8
 800c936:	f10a 0a08 	add.w	sl, sl, #8
 800c93a:	f100 0008 	add.w	r0, r0, #8
 800c93e:	f1a1 0108 	sub.w	r1, r1, #8
 800c942:	f109 0910 	add.w	r9, r9, #16
 800c946:	f105 0508 	add.w	r5, r5, #8
 800c94a:	f1a4 0408 	sub.w	r4, r4, #8
 800c94e:	f108 0818 	add.w	r8, r8, #24
 800c952:	f102 0208 	add.w	r2, r2, #8
 800c956:	f1a3 0308 	sub.w	r3, r3, #8
 800c95a:	f47f aefc 	bne.w	800c756 <arm_cfft_radix8by4_f32+0x12e>
 800c95e:	9907      	ldr	r1, [sp, #28]
 800c960:	9800      	ldr	r0, [sp, #0]
 800c962:	00cb      	lsls	r3, r1, #3
 800c964:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c968:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c96c:	9100      	str	r1, [sp, #0]
 800c96e:	9904      	ldr	r1, [sp, #16]
 800c970:	4419      	add	r1, r3
 800c972:	9104      	str	r1, [sp, #16]
 800c974:	9903      	ldr	r1, [sp, #12]
 800c976:	4419      	add	r1, r3
 800c978:	9103      	str	r1, [sp, #12]
 800c97a:	9906      	ldr	r1, [sp, #24]
 800c97c:	4419      	add	r1, r3
 800c97e:	9106      	str	r1, [sp, #24]
 800c980:	9905      	ldr	r1, [sp, #20]
 800c982:	441f      	add	r7, r3
 800c984:	4419      	add	r1, r3
 800c986:	9b02      	ldr	r3, [sp, #8]
 800c988:	9105      	str	r1, [sp, #20]
 800c98a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c98e:	9302      	str	r3, [sp, #8]
 800c990:	9904      	ldr	r1, [sp, #16]
 800c992:	9805      	ldr	r0, [sp, #20]
 800c994:	ed91 4a00 	vldr	s8, [r1]
 800c998:	edd0 6a00 	vldr	s13, [r0]
 800c99c:	9b06      	ldr	r3, [sp, #24]
 800c99e:	ed97 3a00 	vldr	s6, [r7]
 800c9a2:	edd3 7a00 	vldr	s15, [r3]
 800c9a6:	edd0 4a01 	vldr	s9, [r0, #4]
 800c9aa:	edd1 3a01 	vldr	s7, [r1, #4]
 800c9ae:	ed97 2a01 	vldr	s4, [r7, #4]
 800c9b2:	ed93 7a01 	vldr	s14, [r3, #4]
 800c9b6:	9a03      	ldr	r2, [sp, #12]
 800c9b8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800c9bc:	ee34 6a26 	vadd.f32	s12, s8, s13
 800c9c0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800c9c4:	ee37 5a86 	vadd.f32	s10, s15, s12
 800c9c8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c9cc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c9d0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800c9d4:	ed81 5a00 	vstr	s10, [r1]
 800c9d8:	ed93 5a01 	vldr	s10, [r3, #4]
 800c9dc:	edd7 4a01 	vldr	s9, [r7, #4]
 800c9e0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800c9e4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800c9e8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c9ec:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800c9f0:	ed81 5a01 	vstr	s10, [r1, #4]
 800c9f4:	edd2 1a00 	vldr	s3, [r2]
 800c9f8:	edd2 2a01 	vldr	s5, [r2, #4]
 800c9fc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ca00:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ca04:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ca08:	ee64 4a21 	vmul.f32	s9, s8, s3
 800ca0c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ca10:	ee65 2a22 	vmul.f32	s5, s10, s5
 800ca14:	ee25 5a21 	vmul.f32	s10, s10, s3
 800ca18:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ca1c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ca20:	edc3 2a00 	vstr	s5, [r3]
 800ca24:	ed83 5a01 	vstr	s10, [r3, #4]
 800ca28:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800ca2c:	9b00      	ldr	r3, [sp, #0]
 800ca2e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ca32:	ed93 4a01 	vldr	s8, [r3, #4]
 800ca36:	ed93 5a00 	vldr	s10, [r3]
 800ca3a:	9b02      	ldr	r3, [sp, #8]
 800ca3c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ca40:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ca44:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ca48:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ca4c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ca50:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ca54:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800ca58:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ca5c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ca60:	ed80 6a01 	vstr	s12, [r0, #4]
 800ca64:	edc0 5a00 	vstr	s11, [r0]
 800ca68:	edd3 5a01 	vldr	s11, [r3, #4]
 800ca6c:	edd3 6a00 	vldr	s13, [r3]
 800ca70:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ca74:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ca78:	ee27 6a26 	vmul.f32	s12, s14, s13
 800ca7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ca80:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ca84:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ca88:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ca8c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ca90:	ed87 7a01 	vstr	s14, [r7, #4]
 800ca94:	edc7 7a00 	vstr	s15, [r7]
 800ca98:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	686a      	ldr	r2, [r5, #4]
 800caa0:	2304      	movs	r3, #4
 800caa2:	f000 fc79 	bl	800d398 <arm_radix8_butterfly_f32>
 800caa6:	4630      	mov	r0, r6
 800caa8:	4621      	mov	r1, r4
 800caaa:	686a      	ldr	r2, [r5, #4]
 800caac:	2304      	movs	r3, #4
 800caae:	f000 fc73 	bl	800d398 <arm_radix8_butterfly_f32>
 800cab2:	9808      	ldr	r0, [sp, #32]
 800cab4:	686a      	ldr	r2, [r5, #4]
 800cab6:	4621      	mov	r1, r4
 800cab8:	2304      	movs	r3, #4
 800caba:	f000 fc6d 	bl	800d398 <arm_radix8_butterfly_f32>
 800cabe:	686a      	ldr	r2, [r5, #4]
 800cac0:	9801      	ldr	r0, [sp, #4]
 800cac2:	4621      	mov	r1, r4
 800cac4:	2304      	movs	r3, #4
 800cac6:	b00d      	add	sp, #52	; 0x34
 800cac8:	ecbd 8b0a 	vpop	{d8-d12}
 800cacc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad0:	f000 bc62 	b.w	800d398 <arm_radix8_butterfly_f32>

0800cad4 <arm_cfft_f32>:
 800cad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad8:	2a01      	cmp	r2, #1
 800cada:	4606      	mov	r6, r0
 800cadc:	4617      	mov	r7, r2
 800cade:	460c      	mov	r4, r1
 800cae0:	4698      	mov	r8, r3
 800cae2:	8805      	ldrh	r5, [r0, #0]
 800cae4:	d056      	beq.n	800cb94 <arm_cfft_f32+0xc0>
 800cae6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800caea:	d063      	beq.n	800cbb4 <arm_cfft_f32+0xe0>
 800caec:	d916      	bls.n	800cb1c <arm_cfft_f32+0x48>
 800caee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800caf2:	d01a      	beq.n	800cb2a <arm_cfft_f32+0x56>
 800caf4:	d947      	bls.n	800cb86 <arm_cfft_f32+0xb2>
 800caf6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cafa:	d05b      	beq.n	800cbb4 <arm_cfft_f32+0xe0>
 800cafc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800cb00:	d105      	bne.n	800cb0e <arm_cfft_f32+0x3a>
 800cb02:	2301      	movs	r3, #1
 800cb04:	6872      	ldr	r2, [r6, #4]
 800cb06:	4629      	mov	r1, r5
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f000 fc45 	bl	800d398 <arm_radix8_butterfly_f32>
 800cb0e:	f1b8 0f00 	cmp.w	r8, #0
 800cb12:	d111      	bne.n	800cb38 <arm_cfft_f32+0x64>
 800cb14:	2f01      	cmp	r7, #1
 800cb16:	d016      	beq.n	800cb46 <arm_cfft_f32+0x72>
 800cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1c:	2d20      	cmp	r5, #32
 800cb1e:	d049      	beq.n	800cbb4 <arm_cfft_f32+0xe0>
 800cb20:	d935      	bls.n	800cb8e <arm_cfft_f32+0xba>
 800cb22:	2d40      	cmp	r5, #64	; 0x40
 800cb24:	d0ed      	beq.n	800cb02 <arm_cfft_f32+0x2e>
 800cb26:	2d80      	cmp	r5, #128	; 0x80
 800cb28:	d1f1      	bne.n	800cb0e <arm_cfft_f32+0x3a>
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f7ff fcab 	bl	800c488 <arm_cfft_radix8by2_f32>
 800cb32:	f1b8 0f00 	cmp.w	r8, #0
 800cb36:	d0ed      	beq.n	800cb14 <arm_cfft_f32+0x40>
 800cb38:	68b2      	ldr	r2, [r6, #8]
 800cb3a:	89b1      	ldrh	r1, [r6, #12]
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f000 f841 	bl	800cbc4 <arm_bitreversal_32>
 800cb42:	2f01      	cmp	r7, #1
 800cb44:	d1e8      	bne.n	800cb18 <arm_cfft_f32+0x44>
 800cb46:	ee07 5a90 	vmov	s15, r5
 800cb4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cb56:	2d00      	cmp	r5, #0
 800cb58:	d0de      	beq.n	800cb18 <arm_cfft_f32+0x44>
 800cb5a:	f104 0108 	add.w	r1, r4, #8
 800cb5e:	2300      	movs	r3, #0
 800cb60:	3301      	adds	r3, #1
 800cb62:	429d      	cmp	r5, r3
 800cb64:	f101 0108 	add.w	r1, r1, #8
 800cb68:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cb6c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800cb70:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cb74:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cb78:	ed01 7a04 	vstr	s14, [r1, #-16]
 800cb7c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800cb80:	d1ee      	bne.n	800cb60 <arm_cfft_f32+0x8c>
 800cb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb86:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800cb8a:	d0ba      	beq.n	800cb02 <arm_cfft_f32+0x2e>
 800cb8c:	e7bf      	b.n	800cb0e <arm_cfft_f32+0x3a>
 800cb8e:	2d10      	cmp	r5, #16
 800cb90:	d0cb      	beq.n	800cb2a <arm_cfft_f32+0x56>
 800cb92:	e7bc      	b.n	800cb0e <arm_cfft_f32+0x3a>
 800cb94:	b19d      	cbz	r5, 800cbbe <arm_cfft_f32+0xea>
 800cb96:	f101 030c 	add.w	r3, r1, #12
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cba0:	3201      	adds	r2, #1
 800cba2:	eef1 7a67 	vneg.f32	s15, s15
 800cba6:	4295      	cmp	r5, r2
 800cba8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800cbac:	f103 0308 	add.w	r3, r3, #8
 800cbb0:	d1f4      	bne.n	800cb9c <arm_cfft_f32+0xc8>
 800cbb2:	e798      	b.n	800cae6 <arm_cfft_f32+0x12>
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f7ff fd36 	bl	800c628 <arm_cfft_radix8by4_f32>
 800cbbc:	e7a7      	b.n	800cb0e <arm_cfft_f32+0x3a>
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0aa      	beq.n	800cb18 <arm_cfft_f32+0x44>
 800cbc2:	e7b9      	b.n	800cb38 <arm_cfft_f32+0x64>

0800cbc4 <arm_bitreversal_32>:
 800cbc4:	b1e9      	cbz	r1, 800cc02 <arm_bitreversal_32+0x3e>
 800cbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbc8:	2500      	movs	r5, #0
 800cbca:	f102 0e02 	add.w	lr, r2, #2
 800cbce:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800cbd2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800cbd6:	08a4      	lsrs	r4, r4, #2
 800cbd8:	089b      	lsrs	r3, r3, #2
 800cbda:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800cbde:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800cbe2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800cbe6:	00a6      	lsls	r6, r4, #2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	1d34      	adds	r4, r6, #4
 800cbf2:	3502      	adds	r5, #2
 800cbf4:	58c6      	ldr	r6, [r0, r3]
 800cbf6:	5907      	ldr	r7, [r0, r4]
 800cbf8:	50c7      	str	r7, [r0, r3]
 800cbfa:	428d      	cmp	r5, r1
 800cbfc:	5106      	str	r6, [r0, r4]
 800cbfe:	d3e6      	bcc.n	800cbce <arm_bitreversal_32+0xa>
 800cc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc02:	4770      	bx	lr

0800cc04 <arm_mat_mult_f32>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	8845      	ldrh	r5, [r0, #2]
 800cc0a:	880b      	ldrh	r3, [r1, #0]
 800cc0c:	8806      	ldrh	r6, [r0, #0]
 800cc0e:	6847      	ldr	r7, [r0, #4]
 800cc10:	6854      	ldr	r4, [r2, #4]
 800cc12:	6848      	ldr	r0, [r1, #4]
 800cc14:	b08b      	sub	sp, #44	; 0x2c
 800cc16:	42ab      	cmp	r3, r5
 800cc18:	9109      	str	r1, [sp, #36]	; 0x24
 800cc1a:	9604      	str	r6, [sp, #16]
 800cc1c:	8849      	ldrh	r1, [r1, #2]
 800cc1e:	f040 808a 	bne.w	800cd36 <arm_mat_mult_f32+0x132>
 800cc22:	8815      	ldrh	r5, [r2, #0]
 800cc24:	42b5      	cmp	r5, r6
 800cc26:	f040 8086 	bne.w	800cd36 <arm_mat_mult_f32+0x132>
 800cc2a:	8852      	ldrh	r2, [r2, #2]
 800cc2c:	428a      	cmp	r2, r1
 800cc2e:	f040 8082 	bne.w	800cd36 <arm_mat_mult_f32+0x132>
 800cc32:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800cc36:	1d01      	adds	r1, r0, #4
 800cc38:	0116      	lsls	r6, r2, #4
 800cc3a:	9108      	str	r1, [sp, #32]
 800cc3c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800cc40:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800cc44:	9101      	str	r1, [sp, #4]
 800cc46:	fb06 f108 	mul.w	r1, r6, r8
 800cc4a:	0095      	lsls	r5, r2, #2
 800cc4c:	9103      	str	r1, [sp, #12]
 800cc4e:	00d2      	lsls	r2, r2, #3
 800cc50:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800cc54:	f003 0903 	and.w	r9, r3, #3
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	f107 0b10 	add.w	fp, r7, #16
 800cc5e:	eb04 0a05 	add.w	sl, r4, r5
 800cc62:	9107      	str	r1, [sp, #28]
 800cc64:	9202      	str	r2, [sp, #8]
 800cc66:	9306      	str	r3, [sp, #24]
 800cc68:	f1ab 0310 	sub.w	r3, fp, #16
 800cc6c:	9305      	str	r3, [sp, #20]
 800cc6e:	9b07      	ldr	r3, [sp, #28]
 800cc70:	f8dd e020 	ldr.w	lr, [sp, #32]
 800cc74:	eb03 0c0a 	add.w	ip, r3, sl
 800cc78:	eddf 7a31 	vldr	s15, [pc, #196]	; 800cd40 <arm_mat_mult_f32+0x13c>
 800cc7c:	f1b8 0f00 	cmp.w	r8, #0
 800cc80:	d053      	beq.n	800cd2a <arm_mat_mult_f32+0x126>
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	4644      	mov	r4, r8
 800cc86:	18c1      	adds	r1, r0, r3
 800cc88:	4602      	mov	r2, r0
 800cc8a:	465b      	mov	r3, fp
 800cc8c:	ed92 6a00 	vldr	s12, [r2]
 800cc90:	ed13 7a04 	vldr	s14, [r3, #-16]
 800cc94:	ed53 4a03 	vldr	s9, [r3, #-12]
 800cc98:	ed53 6a02 	vldr	s13, [r3, #-8]
 800cc9c:	ed91 5a00 	vldr	s10, [r1]
 800cca0:	ed53 5a01 	vldr	s11, [r3, #-4]
 800cca4:	1957      	adds	r7, r2, r5
 800cca6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ccaa:	ed97 6a00 	vldr	s12, [r7]
 800ccae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccb2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ccb6:	194f      	adds	r7, r1, r5
 800ccb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ccbc:	ee26 7a85 	vmul.f32	s14, s13, s10
 800ccc0:	edd7 7a00 	vldr	s15, [r7]
 800ccc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ccc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cccc:	3c01      	subs	r4, #1
 800ccce:	4432      	add	r2, r6
 800ccd0:	4431      	add	r1, r6
 800ccd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccd6:	f103 0310 	add.w	r3, r3, #16
 800ccda:	d1d7      	bne.n	800cc8c <arm_mat_mult_f32+0x88>
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	9a01      	ldr	r2, [sp, #4]
 800cce0:	4418      	add	r0, r3
 800cce2:	f1b9 0f00 	cmp.w	r9, #0
 800cce6:	d00b      	beq.n	800cd00 <arm_mat_mult_f32+0xfc>
 800cce8:	464b      	mov	r3, r9
 800ccea:	edd0 6a00 	vldr	s13, [r0]
 800ccee:	ecb2 7a01 	vldmia	r2!, {s14}
 800ccf2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	4428      	add	r0, r5
 800ccfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccfe:	d1f4      	bne.n	800ccea <arm_mat_mult_f32+0xe6>
 800cd00:	ecec 7a01 	vstmia	ip!, {s15}
 800cd04:	45d4      	cmp	ip, sl
 800cd06:	4670      	mov	r0, lr
 800cd08:	f10e 0e04 	add.w	lr, lr, #4
 800cd0c:	d1b4      	bne.n	800cc78 <arm_mat_mult_f32+0x74>
 800cd0e:	9a01      	ldr	r2, [sp, #4]
 800cd10:	9b06      	ldr	r3, [sp, #24]
 800cd12:	4611      	mov	r1, r2
 800cd14:	4419      	add	r1, r3
 800cd16:	449b      	add	fp, r3
 800cd18:	9b04      	ldr	r3, [sp, #16]
 800cd1a:	9101      	str	r1, [sp, #4]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	44aa      	add	sl, r5
 800cd20:	9304      	str	r3, [sp, #16]
 800cd22:	d004      	beq.n	800cd2e <arm_mat_mult_f32+0x12a>
 800cd24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd26:	6858      	ldr	r0, [r3, #4]
 800cd28:	e79e      	b.n	800cc68 <arm_mat_mult_f32+0x64>
 800cd2a:	9a05      	ldr	r2, [sp, #20]
 800cd2c:	e7d9      	b.n	800cce2 <arm_mat_mult_f32+0xde>
 800cd2e:	4618      	mov	r0, r3
 800cd30:	b00b      	add	sp, #44	; 0x2c
 800cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd36:	f06f 0002 	mvn.w	r0, #2
 800cd3a:	b00b      	add	sp, #44	; 0x2c
 800cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	00000000 	.word	0x00000000

0800cd44 <arm_mat_inverse_f32>:
 800cd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	8843      	ldrh	r3, [r0, #2]
 800cd4a:	8804      	ldrh	r4, [r0, #0]
 800cd4c:	684e      	ldr	r6, [r1, #4]
 800cd4e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800cd52:	b087      	sub	sp, #28
 800cd54:	429c      	cmp	r4, r3
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	9603      	str	r6, [sp, #12]
 800cd5a:	f040 80ea 	bne.w	800cf32 <arm_mat_inverse_f32+0x1ee>
 800cd5e:	880a      	ldrh	r2, [r1, #0]
 800cd60:	884b      	ldrh	r3, [r1, #2]
 800cd62:	4293      	cmp	r3, r2
 800cd64:	f040 80e5 	bne.w	800cf32 <arm_mat_inverse_f32+0x1ee>
 800cd68:	429c      	cmp	r4, r3
 800cd6a:	f040 80e2 	bne.w	800cf32 <arm_mat_inverse_f32+0x1ee>
 800cd6e:	9005      	str	r0, [sp, #20]
 800cd70:	b30c      	cbz	r4, 800cdb6 <arm_mat_inverse_f32+0x72>
 800cd72:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800cd76:	1e67      	subs	r7, r4, #1
 800cd78:	f846 bb04 	str.w	fp, [r6], #4
 800cd7c:	d01b      	beq.n	800cdb6 <arm_mat_inverse_f32+0x72>
 800cd7e:	f04f 0801 	mov.w	r8, #1
 800cd82:	00ba      	lsls	r2, r7, #2
 800cd84:	eb06 0a02 	add.w	sl, r6, r2
 800cd88:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	2100      	movs	r1, #0
 800cd90:	f001 fb2d 	bl	800e3ee <memset>
 800cd94:	eb0a 0605 	add.w	r6, sl, r5
 800cd98:	462a      	mov	r2, r5
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	4650      	mov	r0, sl
 800cd9e:	f1b8 0f00 	cmp.w	r8, #0
 800cda2:	f000 80cb 	beq.w	800cf3c <arm_mat_inverse_f32+0x1f8>
 800cda6:	f001 fb22 	bl	800e3ee <memset>
 800cdaa:	3f01      	subs	r7, #1
 800cdac:	f108 0801 	add.w	r8, r8, #1
 800cdb0:	f846 bb04 	str.w	fp, [r6], #4
 800cdb4:	d1e5      	bne.n	800cd82 <arm_mat_inverse_f32+0x3e>
 800cdb6:	9b01      	ldr	r3, [sp, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 80b5 	beq.w	800cf28 <arm_mat_inverse_f32+0x1e4>
 800cdbe:	009d      	lsls	r5, r3, #2
 800cdc0:	eb09 0205 	add.w	r2, r9, r5
 800cdc4:	46cc      	mov	ip, r9
 800cdc6:	9202      	str	r2, [sp, #8]
 800cdc8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cdcc:	1d2a      	adds	r2, r5, #4
 800cdce:	9204      	str	r2, [sp, #16]
 800cdd0:	462f      	mov	r7, r5
 800cdd2:	469e      	mov	lr, r3
 800cdd4:	2600      	movs	r6, #0
 800cdd6:	9b02      	ldr	r3, [sp, #8]
 800cdd8:	eddc 6a00 	vldr	s13, [ip]
 800cddc:	42b4      	cmp	r4, r6
 800cdde:	eba3 0b07 	sub.w	fp, r3, r7
 800cde2:	f000 80a1 	beq.w	800cf28 <arm_mat_inverse_f32+0x1e4>
 800cde6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800cf4c <arm_mat_inverse_f32+0x208>
 800cdea:	4632      	mov	r2, r6
 800cdec:	4663      	mov	r3, ip
 800cdee:	e00b      	b.n	800ce08 <arm_mat_inverse_f32+0xc4>
 800cdf0:	eef4 7a47 	vcmp.f32	s15, s14
 800cdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf8:	f102 0201 	add.w	r2, r2, #1
 800cdfc:	bfc8      	it	gt
 800cdfe:	eeb0 7a67 	vmovgt.f32	s14, s15
 800ce02:	42a2      	cmp	r2, r4
 800ce04:	442b      	add	r3, r5
 800ce06:	d014      	beq.n	800ce32 <arm_mat_inverse_f32+0xee>
 800ce08:	edd3 7a00 	vldr	s15, [r3]
 800ce0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce14:	eeb1 6a67 	vneg.f32	s12, s15
 800ce18:	dcea      	bgt.n	800cdf0 <arm_mat_inverse_f32+0xac>
 800ce1a:	eeb4 6a47 	vcmp.f32	s12, s14
 800ce1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce22:	f102 0201 	add.w	r2, r2, #1
 800ce26:	bfc8      	it	gt
 800ce28:	eeb0 7a46 	vmovgt.f32	s14, s12
 800ce2c:	42a2      	cmp	r2, r4
 800ce2e:	442b      	add	r3, r5
 800ce30:	d1ea      	bne.n	800ce08 <arm_mat_inverse_f32+0xc4>
 800ce32:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ce36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce3a:	d075      	beq.n	800cf28 <arm_mat_inverse_f32+0x1e4>
 800ce3c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	d070      	beq.n	800cf28 <arm_mat_inverse_f32+0x1e4>
 800ce46:	4672      	mov	r2, lr
 800ce48:	4663      	mov	r3, ip
 800ce4a:	ed93 7a00 	vldr	s14, [r3]
 800ce4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce52:	3a01      	subs	r2, #1
 800ce54:	ece3 7a01 	vstmia	r3!, {s15}
 800ce58:	d1f7      	bne.n	800ce4a <arm_mat_inverse_f32+0x106>
 800ce5a:	9901      	ldr	r1, [sp, #4]
 800ce5c:	464b      	mov	r3, r9
 800ce5e:	ed93 7a00 	vldr	s14, [r3]
 800ce62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ce66:	3901      	subs	r1, #1
 800ce68:	ece3 7a01 	vstmia	r3!, {s15}
 800ce6c:	d1f7      	bne.n	800ce5e <arm_mat_inverse_f32+0x11a>
 800ce6e:	9803      	ldr	r0, [sp, #12]
 800ce70:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800ce74:	42b1      	cmp	r1, r6
 800ce76:	d039      	beq.n	800ceec <arm_mat_inverse_f32+0x1a8>
 800ce78:	eddb 6a00 	vldr	s13, [fp]
 800ce7c:	465a      	mov	r2, fp
 800ce7e:	4673      	mov	r3, lr
 800ce80:	46e2      	mov	sl, ip
 800ce82:	ecba 7a01 	vldmia	sl!, {s14}
 800ce86:	edd2 7a00 	vldr	s15, [r2]
 800ce8a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce94:	ece2 7a01 	vstmia	r2!, {s15}
 800ce98:	d1f3      	bne.n	800ce82 <arm_mat_inverse_f32+0x13e>
 800ce9a:	9b01      	ldr	r3, [sp, #4]
 800ce9c:	44bb      	add	fp, r7
 800ce9e:	4602      	mov	r2, r0
 800cea0:	46ca      	mov	sl, r9
 800cea2:	ecba 7a01 	vldmia	sl!, {s14}
 800cea6:	edd2 7a00 	vldr	s15, [r2]
 800ceaa:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ceb4:	ece2 7a01 	vstmia	r2!, {s15}
 800ceb8:	d1f3      	bne.n	800cea2 <arm_mat_inverse_f32+0x15e>
 800ceba:	4428      	add	r0, r5
 800cebc:	3101      	adds	r1, #1
 800cebe:	428c      	cmp	r4, r1
 800cec0:	44c3      	add	fp, r8
 800cec2:	d1d7      	bne.n	800ce74 <arm_mat_inverse_f32+0x130>
 800cec4:	9b04      	ldr	r3, [sp, #16]
 800cec6:	f1be 0e01 	subs.w	lr, lr, #1
 800ceca:	f106 0601 	add.w	r6, r6, #1
 800cece:	449c      	add	ip, r3
 800ced0:	f1a7 0704 	sub.w	r7, r7, #4
 800ced4:	44a9      	add	r9, r5
 800ced6:	f47f af7e 	bne.w	800cdd6 <arm_mat_inverse_f32+0x92>
 800ceda:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee2:	d006      	beq.n	800cef2 <arm_mat_inverse_f32+0x1ae>
 800cee4:	2000      	movs	r0, #0
 800cee6:	b007      	add	sp, #28
 800cee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceec:	44bb      	add	fp, r7
 800ceee:	4428      	add	r0, r5
 800cef0:	e7e4      	b.n	800cebc <arm_mat_inverse_f32+0x178>
 800cef2:	9b05      	ldr	r3, [sp, #20]
 800cef4:	9a01      	ldr	r2, [sp, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	edd3 7a00 	vldr	s15, [r3]
 800cefc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf00:	fb02 f204 	mul.w	r2, r2, r4
 800cf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf08:	4614      	mov	r4, r2
 800cf0a:	bf08      	it	eq
 800cf0c:	3304      	addeq	r3, #4
 800cf0e:	d007      	beq.n	800cf20 <arm_mat_inverse_f32+0x1dc>
 800cf10:	e7e8      	b.n	800cee4 <arm_mat_inverse_f32+0x1a0>
 800cf12:	ecf3 7a01 	vldmia	r3!, {s15}
 800cf16:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1e:	d1e1      	bne.n	800cee4 <arm_mat_inverse_f32+0x1a0>
 800cf20:	f10e 0e01 	add.w	lr, lr, #1
 800cf24:	4574      	cmp	r4, lr
 800cf26:	d1f4      	bne.n	800cf12 <arm_mat_inverse_f32+0x1ce>
 800cf28:	f06f 0004 	mvn.w	r0, #4
 800cf2c:	b007      	add	sp, #28
 800cf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf32:	f06f 0002 	mvn.w	r0, #2
 800cf36:	b007      	add	sp, #28
 800cf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3c:	4656      	mov	r6, sl
 800cf3e:	3f01      	subs	r7, #1
 800cf40:	f846 bb04 	str.w	fp, [r6], #4
 800cf44:	f47f af1b 	bne.w	800cd7e <arm_mat_inverse_f32+0x3a>
 800cf48:	e735      	b.n	800cdb6 <arm_mat_inverse_f32+0x72>
 800cf4a:	bf00      	nop
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <arm_mat_init_f32>:
 800cf50:	8001      	strh	r1, [r0, #0]
 800cf52:	8042      	strh	r2, [r0, #2]
 800cf54:	6043      	str	r3, [r0, #4]
 800cf56:	4770      	bx	lr

0800cf58 <arm_biquad_cascade_df2T_f32>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	7807      	ldrb	r7, [r0, #0]
 800cf5e:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800cf62:	6885      	ldr	r5, [r0, #8]
 800cf64:	3514      	adds	r5, #20
 800cf66:	6846      	ldr	r6, [r0, #4]
 800cf68:	3608      	adds	r6, #8
 800cf6a:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800cf6e:	eb02 0b09 	add.w	fp, r2, r9
 800cf72:	f003 080f 	and.w	r8, r3, #15
 800cf76:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800cf7a:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800cf7e:	ed15 7a04 	vldr	s14, [r5, #-16]
 800cf82:	ed55 6a03 	vldr	s13, [r5, #-12]
 800cf86:	ed15 6a02 	vldr	s12, [r5, #-8]
 800cf8a:	ed55 5a01 	vldr	s11, [r5, #-4]
 800cf8e:	46b4      	mov	ip, r6
 800cf90:	ed56 3a02 	vldr	s7, [r6, #-8]
 800cf94:	ed16 4a01 	vldr	s8, [r6, #-4]
 800cf98:	f1be 0f00 	cmp.w	lr, #0
 800cf9c:	f000 8195 	beq.w	800d2ca <arm_biquad_cascade_df2T_f32+0x372>
 800cfa0:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800cfa4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800cfa8:	4674      	mov	r4, lr
 800cfaa:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800cfae:	ee27 5a83 	vmul.f32	s10, s15, s6
 800cfb2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800cfb6:	ee67 4a03 	vmul.f32	s9, s14, s6
 800cfba:	ee34 4a84 	vadd.f32	s8, s9, s8
 800cfbe:	ee66 4a05 	vmul.f32	s9, s12, s10
 800cfc2:	ee34 4a84 	vadd.f32	s8, s9, s8
 800cfc6:	ee26 3a83 	vmul.f32	s6, s13, s6
 800cfca:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800cfce:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 800cfd2:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800cfd6:	ee74 4a84 	vadd.f32	s9, s9, s8
 800cfda:	ee25 5a85 	vmul.f32	s10, s11, s10
 800cfde:	ee35 5a03 	vadd.f32	s10, s10, s6
 800cfe2:	ee27 4a23 	vmul.f32	s8, s14, s7
 800cfe6:	ee35 5a04 	vadd.f32	s10, s10, s8
 800cfea:	ee26 3a24 	vmul.f32	s6, s12, s9
 800cfee:	ee33 3a05 	vadd.f32	s6, s6, s10
 800cff2:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800cff6:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800cffa:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800cffe:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d002:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d006:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d00a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d00e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d012:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d016:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d01a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d01e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d022:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800d026:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800d02a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d02e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d032:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d036:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d03a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d03e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d042:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d046:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d04a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d04e:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800d052:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 800d056:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d05a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d05e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d062:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d066:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d06a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d06e:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d072:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d076:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d07a:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800d07e:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800d082:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d086:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d08a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d08e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d092:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d096:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d09a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d09e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d0a2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d0a6:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800d0aa:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800d0ae:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d0b2:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d0b6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d0ba:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d0be:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d0c2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d0c6:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d0ca:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d0ce:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d0d2:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800d0d6:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800d0da:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d0de:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d0e2:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d0e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d0ea:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d0ee:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d0f2:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d0f6:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d0fa:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d0fe:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800d102:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800d106:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d10a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d10e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d112:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d116:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d11a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d11e:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d122:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d126:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d12a:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800d12e:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800d132:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d136:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d13a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d13e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d142:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d146:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d14a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d14e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d152:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d156:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800d15a:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800d15e:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d162:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d166:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d16a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d16e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d172:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d176:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d17a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d17e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d182:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 800d186:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800d18a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d18e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d192:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d196:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d19a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d19e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d1a2:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d1a6:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d1aa:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d1ae:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800d1b2:	ed10 4a04 	vldr	s8, [r0, #-16]
 800d1b6:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d1ba:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d1be:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d1c2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d1c6:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d1ca:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d1ce:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d1d2:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d1d6:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d1da:	ed03 5a04 	vstr	s10, [r3, #-16]
 800d1de:	ed10 4a03 	vldr	s8, [r0, #-12]
 800d1e2:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d1e6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d1ea:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d1ee:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d1f2:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d1f6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d1fa:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d1fe:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d202:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d206:	ed43 4a03 	vstr	s9, [r3, #-12]
 800d20a:	ed10 4a02 	vldr	s8, [r0, #-8]
 800d20e:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d212:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d216:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d21a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d21e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d222:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d226:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d22a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d22e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d232:	ed03 5a02 	vstr	s10, [r3, #-8]
 800d236:	ed10 4a01 	vldr	s8, [r0, #-4]
 800d23a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d23e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d242:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d246:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d24a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d24e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d252:	ee66 3a24 	vmul.f32	s7, s12, s9
 800d256:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d25a:	ee26 5a84 	vmul.f32	s10, s13, s8
 800d25e:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800d262:	ee34 4a05 	vadd.f32	s8, s8, s10
 800d266:	ed43 4a01 	vstr	s9, [r3, #-4]
 800d26a:	3040      	adds	r0, #64	; 0x40
 800d26c:	3340      	adds	r3, #64	; 0x40
 800d26e:	3c01      	subs	r4, #1
 800d270:	f47f ae9b 	bne.w	800cfaa <arm_biquad_cascade_df2T_f32+0x52>
 800d274:	4449      	add	r1, r9
 800d276:	465b      	mov	r3, fp
 800d278:	f1b8 0f00 	cmp.w	r8, #0
 800d27c:	d019      	beq.n	800d2b2 <arm_biquad_cascade_df2T_f32+0x35a>
 800d27e:	eb01 000a 	add.w	r0, r1, sl
 800d282:	ecf1 2a01 	vldmia	r1!, {s5}
 800d286:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800d28a:	ee33 3a23 	vadd.f32	s6, s6, s7
 800d28e:	ee67 3a22 	vmul.f32	s7, s14, s5
 800d292:	ee33 4a84 	vadd.f32	s8, s7, s8
 800d296:	ee26 5a03 	vmul.f32	s10, s12, s6
 800d29a:	ee75 3a04 	vadd.f32	s7, s10, s8
 800d29e:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800d2a2:	ee25 4a83 	vmul.f32	s8, s11, s6
 800d2a6:	ee34 4a22 	vadd.f32	s8, s8, s5
 800d2aa:	eca3 3a01 	vstmia	r3!, {s6}
 800d2ae:	4281      	cmp	r1, r0
 800d2b0:	d1e7      	bne.n	800d282 <arm_biquad_cascade_df2T_f32+0x32a>
 800d2b2:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800d2b6:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800d2ba:	3514      	adds	r5, #20
 800d2bc:	3608      	adds	r6, #8
 800d2be:	4611      	mov	r1, r2
 800d2c0:	3f01      	subs	r7, #1
 800d2c2:	f47f ae5a 	bne.w	800cf7a <arm_biquad_cascade_df2T_f32+0x22>
 800d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	e7d4      	b.n	800d278 <arm_biquad_cascade_df2T_f32+0x320>
	...

0800d2d0 <arm_biquad_cascade_df2T_init_f32>:
 800d2d0:	b510      	push	{r4, lr}
 800d2d2:	6082      	str	r2, [r0, #8]
 800d2d4:	7001      	strb	r1, [r0, #0]
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	00ca      	lsls	r2, r1, #3
 800d2da:	4618      	mov	r0, r3
 800d2dc:	2100      	movs	r1, #0
 800d2de:	f001 f886 	bl	800e3ee <memset>
 800d2e2:	6060      	str	r0, [r4, #4]
 800d2e4:	bd10      	pop	{r4, pc}
 800d2e6:	bf00      	nop

0800d2e8 <arm_dot_prod_f32>:
 800d2e8:	b4f0      	push	{r4, r5, r6, r7}
 800d2ea:	0897      	lsrs	r7, r2, #2
 800d2ec:	eddf 5a29 	vldr	s11, [pc, #164]	; 800d394 <arm_dot_prod_f32+0xac>
 800d2f0:	d02d      	beq.n	800d34e <arm_dot_prod_f32+0x66>
 800d2f2:	f100 0510 	add.w	r5, r0, #16
 800d2f6:	f101 0410 	add.w	r4, r1, #16
 800d2fa:	463e      	mov	r6, r7
 800d2fc:	ed55 6a04 	vldr	s13, [r5, #-16]
 800d300:	ed54 3a04 	vldr	s7, [r4, #-16]
 800d304:	ed15 7a03 	vldr	s14, [r5, #-12]
 800d308:	ed14 4a03 	vldr	s8, [r4, #-12]
 800d30c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800d310:	ed54 4a02 	vldr	s9, [r4, #-8]
 800d314:	ed15 6a01 	vldr	s12, [r5, #-4]
 800d318:	ed14 5a01 	vldr	s10, [r4, #-4]
 800d31c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d320:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d324:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d328:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d32c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d330:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d334:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d338:	3e01      	subs	r6, #1
 800d33a:	f105 0510 	add.w	r5, r5, #16
 800d33e:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d342:	f104 0410 	add.w	r4, r4, #16
 800d346:	d1d9      	bne.n	800d2fc <arm_dot_prod_f32+0x14>
 800d348:	013f      	lsls	r7, r7, #4
 800d34a:	4438      	add	r0, r7
 800d34c:	4439      	add	r1, r7
 800d34e:	f012 0203 	ands.w	r2, r2, #3
 800d352:	d01b      	beq.n	800d38c <arm_dot_prod_f32+0xa4>
 800d354:	edd1 7a00 	vldr	s15, [r1]
 800d358:	ed90 7a00 	vldr	s14, [r0]
 800d35c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d360:	3a01      	subs	r2, #1
 800d362:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d366:	d011      	beq.n	800d38c <arm_dot_prod_f32+0xa4>
 800d368:	edd1 7a01 	vldr	s15, [r1, #4]
 800d36c:	ed90 7a01 	vldr	s14, [r0, #4]
 800d370:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d374:	2a01      	cmp	r2, #1
 800d376:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d37a:	d007      	beq.n	800d38c <arm_dot_prod_f32+0xa4>
 800d37c:	edd0 7a02 	vldr	s15, [r0, #8]
 800d380:	ed91 7a02 	vldr	s14, [r1, #8]
 800d384:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d388:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d38c:	edc3 5a00 	vstr	s11, [r3]
 800d390:	bcf0      	pop	{r4, r5, r6, r7}
 800d392:	4770      	bx	lr
 800d394:	00000000 	.word	0x00000000

0800d398 <arm_radix8_butterfly_f32>:
 800d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	ed2d 8b10 	vpush	{d8-d15}
 800d3a0:	b095      	sub	sp, #84	; 0x54
 800d3a2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	ed9f bab9 	vldr	s22, [pc, #740]	; 800d690 <arm_radix8_butterfly_f32+0x2f8>
 800d3ae:	9012      	str	r0, [sp, #72]	; 0x48
 800d3b0:	468b      	mov	fp, r1
 800d3b2:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3b4:	4689      	mov	r9, r1
 800d3b6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800d3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3bc:	960f      	str	r6, [sp, #60]	; 0x3c
 800d3be:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800d3c2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800d3c6:	eb03 0508 	add.w	r5, r3, r8
 800d3ca:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d3ce:	eb05 040e 	add.w	r4, r5, lr
 800d3d2:	0137      	lsls	r7, r6, #4
 800d3d4:	eba6 030a 	sub.w	r3, r6, sl
 800d3d8:	eb04 000e 	add.w	r0, r4, lr
 800d3dc:	44b2      	add	sl, r6
 800d3de:	1d3a      	adds	r2, r7, #4
 800d3e0:	9702      	str	r7, [sp, #8]
 800d3e2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d3e6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800d3ea:	ebae 0c06 	sub.w	ip, lr, r6
 800d3ee:	9703      	str	r7, [sp, #12]
 800d3f0:	eb03 0708 	add.w	r7, r3, r8
 800d3f4:	9701      	str	r7, [sp, #4]
 800d3f6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800d3fa:	9706      	str	r7, [sp, #24]
 800d3fc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d3fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800d402:	f10e 0104 	add.w	r1, lr, #4
 800d406:	4439      	add	r1, r7
 800d408:	443a      	add	r2, r7
 800d40a:	0137      	lsls	r7, r6, #4
 800d40c:	00f6      	lsls	r6, r6, #3
 800d40e:	9704      	str	r7, [sp, #16]
 800d410:	9605      	str	r6, [sp, #20]
 800d412:	9f01      	ldr	r7, [sp, #4]
 800d414:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d416:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800d41a:	f04f 0c00 	mov.w	ip, #0
 800d41e:	edd4 6a00 	vldr	s13, [r4]
 800d422:	edd7 1a00 	vldr	s3, [r7]
 800d426:	ed16 aa01 	vldr	s20, [r6, #-4]
 800d42a:	edd5 5a00 	vldr	s11, [r5]
 800d42e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800d432:	ed90 6a00 	vldr	s12, [r0]
 800d436:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d43a:	ed93 3a00 	vldr	s6, [r3]
 800d43e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800d442:	ee33 2a21 	vadd.f32	s4, s6, s3
 800d446:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800d44a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800d44e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800d452:	ee34 4a80 	vadd.f32	s8, s9, s0
 800d456:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d45a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800d45e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800d462:	ed46 6a01 	vstr	s13, [r6, #-4]
 800d466:	ed85 4a00 	vstr	s8, [r5]
 800d46a:	edd1 6a00 	vldr	s13, [r1]
 800d46e:	ed94 9a01 	vldr	s18, [r4, #4]
 800d472:	edd3 2a01 	vldr	s5, [r3, #4]
 800d476:	edd7 8a01 	vldr	s17, [r7, #4]
 800d47a:	edd6 0a00 	vldr	s1, [r6]
 800d47e:	edd5 3a01 	vldr	s7, [r5, #4]
 800d482:	ed90 8a01 	vldr	s16, [r0, #4]
 800d486:	ed92 7a00 	vldr	s14, [r2]
 800d48a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d48e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800d492:	ee72 aae8 	vsub.f32	s21, s5, s17
 800d496:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800d49a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800d49e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d4a2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800d4a6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800d4aa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800d4ae:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800d4b2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800d4b6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800d4ba:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800d4be:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d4c2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800d4c6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800d4ca:	ee76 6a89 	vadd.f32	s13, s13, s18
 800d4ce:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800d4d2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d4d6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d4da:	ee35 5a42 	vsub.f32	s10, s10, s4
 800d4de:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800d4e2:	ee33 2a20 	vadd.f32	s4, s6, s1
 800d4e6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800d4ea:	ee33 3a60 	vsub.f32	s6, s6, s1
 800d4ee:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800d4f2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800d4f6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d4fa:	ee37 7a41 	vsub.f32	s14, s14, s2
 800d4fe:	ee73 1a84 	vadd.f32	s3, s7, s8
 800d502:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d506:	ee76 3a27 	vadd.f32	s7, s12, s15
 800d50a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d50e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800d512:	ee33 1a45 	vsub.f32	s2, s6, s10
 800d516:	ee32 2a40 	vsub.f32	s4, s4, s0
 800d51a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d51e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800d522:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800d526:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d52a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800d52e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800d532:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800d536:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800d53a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d53e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800d542:	44dc      	add	ip, fp
 800d544:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d548:	45e1      	cmp	r9, ip
 800d54a:	ed86 8a00 	vstr	s16, [r6]
 800d54e:	ed85 2a01 	vstr	s4, [r5, #4]
 800d552:	4456      	add	r6, sl
 800d554:	ed02 0a01 	vstr	s0, [r2, #-4]
 800d558:	4455      	add	r5, sl
 800d55a:	edc0 6a00 	vstr	s13, [r0]
 800d55e:	ed82 1a00 	vstr	s2, [r2]
 800d562:	ed80 5a01 	vstr	s10, [r0, #4]
 800d566:	4452      	add	r2, sl
 800d568:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d56c:	4450      	add	r0, sl
 800d56e:	edc7 2a00 	vstr	s5, [r7]
 800d572:	edc4 4a00 	vstr	s9, [r4]
 800d576:	ed83 7a00 	vstr	s14, [r3]
 800d57a:	edc1 5a00 	vstr	s11, [r1]
 800d57e:	edc7 3a01 	vstr	s7, [r7, #4]
 800d582:	4451      	add	r1, sl
 800d584:	ed84 6a01 	vstr	s12, [r4, #4]
 800d588:	4457      	add	r7, sl
 800d58a:	edc3 7a01 	vstr	s15, [r3, #4]
 800d58e:	4454      	add	r4, sl
 800d590:	4453      	add	r3, sl
 800d592:	f63f af44 	bhi.w	800d41e <arm_radix8_butterfly_f32+0x86>
 800d596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d598:	2b07      	cmp	r3, #7
 800d59a:	f240 81b7 	bls.w	800d90c <arm_radix8_butterfly_f32+0x574>
 800d59e:	9b06      	ldr	r3, [sp, #24]
 800d5a0:	9903      	ldr	r1, [sp, #12]
 800d5a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d5a4:	9e05      	ldr	r6, [sp, #20]
 800d5a6:	9a04      	ldr	r2, [sp, #16]
 800d5a8:	f103 0c08 	add.w	ip, r3, #8
 800d5ac:	9b02      	ldr	r3, [sp, #8]
 800d5ae:	3108      	adds	r1, #8
 800d5b0:	f108 0808 	add.w	r8, r8, #8
 800d5b4:	1841      	adds	r1, r0, r1
 800d5b6:	3608      	adds	r6, #8
 800d5b8:	330c      	adds	r3, #12
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4444      	add	r4, r8
 800d5be:	18c3      	adds	r3, r0, r3
 800d5c0:	9109      	str	r1, [sp, #36]	; 0x24
 800d5c2:	1981      	adds	r1, r0, r6
 800d5c4:	f10e 0e08 	add.w	lr, lr, #8
 800d5c8:	3208      	adds	r2, #8
 800d5ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800d5cc:	9107      	str	r1, [sp, #28]
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	9304      	str	r3, [sp, #16]
 800d5d4:	f100 030c 	add.w	r3, r0, #12
 800d5d8:	4474      	add	r4, lr
 800d5da:	f04f 0801 	mov.w	r8, #1
 800d5de:	1882      	adds	r2, r0, r2
 800d5e0:	4461      	add	r1, ip
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	464b      	mov	r3, r9
 800d5e6:	940a      	str	r4, [sp, #40]	; 0x28
 800d5e8:	46c1      	mov	r9, r8
 800d5ea:	9208      	str	r2, [sp, #32]
 800d5ec:	46d8      	mov	r8, fp
 800d5ee:	9106      	str	r1, [sp, #24]
 800d5f0:	f04f 0e00 	mov.w	lr, #0
 800d5f4:	469b      	mov	fp, r3
 800d5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d5fa:	449e      	add	lr, r3
 800d5fc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800d600:	441a      	add	r2, r3
 800d602:	920e      	str	r2, [sp, #56]	; 0x38
 800d604:	441a      	add	r2, r3
 800d606:	18d4      	adds	r4, r2, r3
 800d608:	18e5      	adds	r5, r4, r3
 800d60a:	18ee      	adds	r6, r5, r3
 800d60c:	18f7      	adds	r7, r6, r3
 800d60e:	eb07 0c03 	add.w	ip, r7, r3
 800d612:	920d      	str	r2, [sp, #52]	; 0x34
 800d614:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800d618:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800d61c:	910c      	str	r1, [sp, #48]	; 0x30
 800d61e:	4419      	add	r1, r3
 800d620:	9103      	str	r1, [sp, #12]
 800d622:	4419      	add	r1, r3
 800d624:	18ca      	adds	r2, r1, r3
 800d626:	9202      	str	r2, [sp, #8]
 800d628:	441a      	add	r2, r3
 800d62a:	18d0      	adds	r0, r2, r3
 800d62c:	ed92 ea01 	vldr	s28, [r2, #4]
 800d630:	9a02      	ldr	r2, [sp, #8]
 800d632:	edd4 7a00 	vldr	s15, [r4]
 800d636:	edd2 da01 	vldr	s27, [r2, #4]
 800d63a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d63c:	ed91 da01 	vldr	s26, [r1, #4]
 800d640:	ed92 ca01 	vldr	s24, [r2, #4]
 800d644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d646:	9903      	ldr	r1, [sp, #12]
 800d648:	edcd 7a03 	vstr	s15, [sp, #12]
 800d64c:	edd2 7a00 	vldr	s15, [r2]
 800d650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d652:	edcd 7a02 	vstr	s15, [sp, #8]
 800d656:	edd2 7a00 	vldr	s15, [r2]
 800d65a:	edd0 ea01 	vldr	s29, [r0, #4]
 800d65e:	edd1 ca01 	vldr	s25, [r1, #4]
 800d662:	eddc ba00 	vldr	s23, [ip]
 800d666:	edd7 aa00 	vldr	s21, [r7]
 800d66a:	ed96 aa00 	vldr	s20, [r6]
 800d66e:	edd5 9a00 	vldr	s19, [r5]
 800d672:	edcd 7a01 	vstr	s15, [sp, #4]
 800d676:	4403      	add	r3, r0
 800d678:	ed93 fa01 	vldr	s30, [r3, #4]
 800d67c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800d680:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800d684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d688:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d68c:	46cc      	mov	ip, r9
 800d68e:	e001      	b.n	800d694 <arm_radix8_butterfly_f32+0x2fc>
 800d690:	3f3504f3 	.word	0x3f3504f3
 800d694:	ed91 6a00 	vldr	s12, [r1]
 800d698:	ed93 5a00 	vldr	s10, [r3]
 800d69c:	edd0 fa00 	vldr	s31, [r0]
 800d6a0:	edd4 7a00 	vldr	s15, [r4]
 800d6a4:	ed95 7a00 	vldr	s14, [r5]
 800d6a8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800d6ac:	ed17 3a01 	vldr	s6, [r7, #-4]
 800d6b0:	ed92 2a00 	vldr	s4, [r2]
 800d6b4:	ed96 0a00 	vldr	s0, [r6]
 800d6b8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d6bc:	ee32 1a06 	vadd.f32	s2, s4, s12
 800d6c0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800d6c4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d6c8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800d6cc:	ee71 6a24 	vadd.f32	s13, s2, s9
 800d6d0:	ee32 2a46 	vsub.f32	s4, s4, s12
 800d6d4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800d6d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6dc:	ed06 6a01 	vstr	s12, [r6, #-4]
 800d6e0:	edd4 8a01 	vldr	s17, [r4, #4]
 800d6e4:	ed92 9a01 	vldr	s18, [r2, #4]
 800d6e8:	edd7 0a00 	vldr	s1, [r7]
 800d6ec:	edd1 2a01 	vldr	s5, [r1, #4]
 800d6f0:	ed95 7a01 	vldr	s14, [r5, #4]
 800d6f4:	ed93 6a01 	vldr	s12, [r3, #4]
 800d6f8:	edd0 5a01 	vldr	s11, [r0, #4]
 800d6fc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800d700:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800d704:	ee39 5a62 	vsub.f32	s10, s18, s5
 800d708:	ee78 fac7 	vsub.f32	s31, s17, s14
 800d70c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d710:	ee38 7a87 	vadd.f32	s14, s17, s14
 800d714:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800d718:	ee79 2a22 	vadd.f32	s5, s18, s5
 800d71c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800d720:	ee72 7a67 	vsub.f32	s15, s4, s15
 800d724:	ee30 2a06 	vadd.f32	s4, s0, s12
 800d728:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800d72c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d730:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800d734:	ee32 1a08 	vadd.f32	s2, s4, s16
 800d738:	ee72 fa87 	vadd.f32	s31, s5, s14
 800d73c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800d740:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800d744:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800d748:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d74c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800d750:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800d754:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800d758:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800d75c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d760:	ee30 6a46 	vsub.f32	s12, s0, s12
 800d764:	ee74 0a22 	vadd.f32	s1, s8, s5
 800d768:	ee36 0a28 	vadd.f32	s0, s12, s17
 800d76c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d770:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d774:	ee32 4a64 	vsub.f32	s8, s4, s9
 800d778:	ee73 8a09 	vadd.f32	s17, s6, s18
 800d77c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800d780:	ee33 9a49 	vsub.f32	s18, s6, s18
 800d784:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800d788:	ee35 3a85 	vadd.f32	s6, s11, s10
 800d78c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d790:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800d794:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d798:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800d79c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800d7a0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800d7a4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800d7a8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d7ac:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800d7b0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800d7b4:	eddd 1a02 	vldr	s3, [sp, #8]
 800d7b8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800d7bc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800d7c0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800d7c4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800d7c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d7cc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800d7d0:	ee76 5a49 	vsub.f32	s11, s12, s18
 800d7d4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800d7d8:	ee39 6a06 	vadd.f32	s12, s18, s12
 800d7dc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800d7e0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800d7e4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800d7e8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800d7ec:	ee22 2a08 	vmul.f32	s4, s4, s16
 800d7f0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d7f4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800d7f8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800d7fc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800d800:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800d804:	ee74 0a60 	vsub.f32	s1, s8, s1
 800d808:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d80c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800d810:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800d814:	ee72 1a21 	vadd.f32	s3, s4, s3
 800d818:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800d81c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800d820:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d824:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d828:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d82c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d830:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d834:	eddd 5a03 	vldr	s11, [sp, #12]
 800d838:	edc6 fa00 	vstr	s31, [r6]
 800d83c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d840:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d844:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d848:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d84c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d850:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d854:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d858:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d85c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d860:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d864:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d868:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d86c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d870:	44c4      	add	ip, r8
 800d872:	45e3      	cmp	fp, ip
 800d874:	edc3 3a00 	vstr	s7, [r3]
 800d878:	edc3 6a01 	vstr	s13, [r3, #4]
 800d87c:	4456      	add	r6, sl
 800d87e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d882:	edc7 0a00 	vstr	s1, [r7]
 800d886:	4453      	add	r3, sl
 800d888:	ed80 2a00 	vstr	s4, [r0]
 800d88c:	edc0 2a01 	vstr	s5, [r0, #4]
 800d890:	4457      	add	r7, sl
 800d892:	edc2 1a00 	vstr	s3, [r2]
 800d896:	ed82 7a01 	vstr	s14, [r2, #4]
 800d89a:	4450      	add	r0, sl
 800d89c:	ed85 8a00 	vstr	s16, [r5]
 800d8a0:	ed85 0a01 	vstr	s0, [r5, #4]
 800d8a4:	4452      	add	r2, sl
 800d8a6:	edc1 4a00 	vstr	s9, [r1]
 800d8aa:	4455      	add	r5, sl
 800d8ac:	ed81 3a01 	vstr	s6, [r1, #4]
 800d8b0:	edc4 8a00 	vstr	s17, [r4]
 800d8b4:	ed84 6a01 	vstr	s12, [r4, #4]
 800d8b8:	4451      	add	r1, sl
 800d8ba:	4454      	add	r4, sl
 800d8bc:	f63f aeea 	bhi.w	800d694 <arm_radix8_butterfly_f32+0x2fc>
 800d8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d2:	9b08      	ldr	r3, [sp, #32]
 800d8d4:	3308      	adds	r3, #8
 800d8d6:	9308      	str	r3, [sp, #32]
 800d8d8:	9b07      	ldr	r3, [sp, #28]
 800d8da:	3308      	adds	r3, #8
 800d8dc:	9307      	str	r3, [sp, #28]
 800d8de:	9b06      	ldr	r3, [sp, #24]
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	9306      	str	r3, [sp, #24]
 800d8e4:	9b05      	ldr	r3, [sp, #20]
 800d8e6:	3308      	adds	r3, #8
 800d8e8:	9305      	str	r3, [sp, #20]
 800d8ea:	9b04      	ldr	r3, [sp, #16]
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	9304      	str	r3, [sp, #16]
 800d8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8f2:	f109 0901 	add.w	r9, r9, #1
 800d8f6:	454b      	cmp	r3, r9
 800d8f8:	f47f ae7d 	bne.w	800d5f6 <arm_radix8_butterfly_f32+0x25e>
 800d8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	b29b      	uxth	r3, r3
 800d902:	46d9      	mov	r9, fp
 800d904:	9310      	str	r3, [sp, #64]	; 0x40
 800d906:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800d90a:	e554      	b.n	800d3b6 <arm_radix8_butterfly_f32+0x1e>
 800d90c:	b015      	add	sp, #84	; 0x54
 800d90e:	ecbd 8b10 	vpop	{d8-d15}
 800d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d916:	bf00      	nop

0800d918 <__cvt>:
 800d918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d91c:	ec55 4b10 	vmov	r4, r5, d0
 800d920:	2d00      	cmp	r5, #0
 800d922:	460e      	mov	r6, r1
 800d924:	4619      	mov	r1, r3
 800d926:	462b      	mov	r3, r5
 800d928:	bfbb      	ittet	lt
 800d92a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d92e:	461d      	movlt	r5, r3
 800d930:	2300      	movge	r3, #0
 800d932:	232d      	movlt	r3, #45	; 0x2d
 800d934:	700b      	strb	r3, [r1, #0]
 800d936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d938:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d93c:	4691      	mov	r9, r2
 800d93e:	f023 0820 	bic.w	r8, r3, #32
 800d942:	bfbc      	itt	lt
 800d944:	4622      	movlt	r2, r4
 800d946:	4614      	movlt	r4, r2
 800d948:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d94c:	d005      	beq.n	800d95a <__cvt+0x42>
 800d94e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d952:	d100      	bne.n	800d956 <__cvt+0x3e>
 800d954:	3601      	adds	r6, #1
 800d956:	2102      	movs	r1, #2
 800d958:	e000      	b.n	800d95c <__cvt+0x44>
 800d95a:	2103      	movs	r1, #3
 800d95c:	ab03      	add	r3, sp, #12
 800d95e:	9301      	str	r3, [sp, #4]
 800d960:	ab02      	add	r3, sp, #8
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	ec45 4b10 	vmov	d0, r4, r5
 800d968:	4653      	mov	r3, sl
 800d96a:	4632      	mov	r2, r6
 800d96c:	f000 fe48 	bl	800e600 <_dtoa_r>
 800d970:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d974:	4607      	mov	r7, r0
 800d976:	d102      	bne.n	800d97e <__cvt+0x66>
 800d978:	f019 0f01 	tst.w	r9, #1
 800d97c:	d022      	beq.n	800d9c4 <__cvt+0xac>
 800d97e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d982:	eb07 0906 	add.w	r9, r7, r6
 800d986:	d110      	bne.n	800d9aa <__cvt+0x92>
 800d988:	783b      	ldrb	r3, [r7, #0]
 800d98a:	2b30      	cmp	r3, #48	; 0x30
 800d98c:	d10a      	bne.n	800d9a4 <__cvt+0x8c>
 800d98e:	2200      	movs	r2, #0
 800d990:	2300      	movs	r3, #0
 800d992:	4620      	mov	r0, r4
 800d994:	4629      	mov	r1, r5
 800d996:	f7f3 f8bf 	bl	8000b18 <__aeabi_dcmpeq>
 800d99a:	b918      	cbnz	r0, 800d9a4 <__cvt+0x8c>
 800d99c:	f1c6 0601 	rsb	r6, r6, #1
 800d9a0:	f8ca 6000 	str.w	r6, [sl]
 800d9a4:	f8da 3000 	ldr.w	r3, [sl]
 800d9a8:	4499      	add	r9, r3
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	f7f3 f8b1 	bl	8000b18 <__aeabi_dcmpeq>
 800d9b6:	b108      	cbz	r0, 800d9bc <__cvt+0xa4>
 800d9b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9bc:	2230      	movs	r2, #48	; 0x30
 800d9be:	9b03      	ldr	r3, [sp, #12]
 800d9c0:	454b      	cmp	r3, r9
 800d9c2:	d307      	bcc.n	800d9d4 <__cvt+0xbc>
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9c8:	1bdb      	subs	r3, r3, r7
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	6013      	str	r3, [r2, #0]
 800d9ce:	b004      	add	sp, #16
 800d9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d4:	1c59      	adds	r1, r3, #1
 800d9d6:	9103      	str	r1, [sp, #12]
 800d9d8:	701a      	strb	r2, [r3, #0]
 800d9da:	e7f0      	b.n	800d9be <__cvt+0xa6>

0800d9dc <__exponent>:
 800d9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2900      	cmp	r1, #0
 800d9e2:	bfb8      	it	lt
 800d9e4:	4249      	neglt	r1, r1
 800d9e6:	f803 2b02 	strb.w	r2, [r3], #2
 800d9ea:	bfb4      	ite	lt
 800d9ec:	222d      	movlt	r2, #45	; 0x2d
 800d9ee:	222b      	movge	r2, #43	; 0x2b
 800d9f0:	2909      	cmp	r1, #9
 800d9f2:	7042      	strb	r2, [r0, #1]
 800d9f4:	dd2a      	ble.n	800da4c <__exponent+0x70>
 800d9f6:	f10d 0207 	add.w	r2, sp, #7
 800d9fa:	4617      	mov	r7, r2
 800d9fc:	260a      	movs	r6, #10
 800d9fe:	4694      	mov	ip, r2
 800da00:	fb91 f5f6 	sdiv	r5, r1, r6
 800da04:	fb06 1415 	mls	r4, r6, r5, r1
 800da08:	3430      	adds	r4, #48	; 0x30
 800da0a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800da0e:	460c      	mov	r4, r1
 800da10:	2c63      	cmp	r4, #99	; 0x63
 800da12:	f102 32ff 	add.w	r2, r2, #4294967295
 800da16:	4629      	mov	r1, r5
 800da18:	dcf1      	bgt.n	800d9fe <__exponent+0x22>
 800da1a:	3130      	adds	r1, #48	; 0x30
 800da1c:	f1ac 0402 	sub.w	r4, ip, #2
 800da20:	f802 1c01 	strb.w	r1, [r2, #-1]
 800da24:	1c41      	adds	r1, r0, #1
 800da26:	4622      	mov	r2, r4
 800da28:	42ba      	cmp	r2, r7
 800da2a:	d30a      	bcc.n	800da42 <__exponent+0x66>
 800da2c:	f10d 0209 	add.w	r2, sp, #9
 800da30:	eba2 020c 	sub.w	r2, r2, ip
 800da34:	42bc      	cmp	r4, r7
 800da36:	bf88      	it	hi
 800da38:	2200      	movhi	r2, #0
 800da3a:	4413      	add	r3, r2
 800da3c:	1a18      	subs	r0, r3, r0
 800da3e:	b003      	add	sp, #12
 800da40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da42:	f812 5b01 	ldrb.w	r5, [r2], #1
 800da46:	f801 5f01 	strb.w	r5, [r1, #1]!
 800da4a:	e7ed      	b.n	800da28 <__exponent+0x4c>
 800da4c:	2330      	movs	r3, #48	; 0x30
 800da4e:	3130      	adds	r1, #48	; 0x30
 800da50:	7083      	strb	r3, [r0, #2]
 800da52:	70c1      	strb	r1, [r0, #3]
 800da54:	1d03      	adds	r3, r0, #4
 800da56:	e7f1      	b.n	800da3c <__exponent+0x60>

0800da58 <_printf_float>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	ed2d 8b02 	vpush	{d8}
 800da60:	b08d      	sub	sp, #52	; 0x34
 800da62:	460c      	mov	r4, r1
 800da64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800da68:	4616      	mov	r6, r2
 800da6a:	461f      	mov	r7, r3
 800da6c:	4605      	mov	r5, r0
 800da6e:	f000 fcc7 	bl	800e400 <_localeconv_r>
 800da72:	f8d0 a000 	ldr.w	sl, [r0]
 800da76:	4650      	mov	r0, sl
 800da78:	f7f2 fc22 	bl	80002c0 <strlen>
 800da7c:	2300      	movs	r3, #0
 800da7e:	930a      	str	r3, [sp, #40]	; 0x28
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	9305      	str	r3, [sp, #20]
 800da84:	f8d8 3000 	ldr.w	r3, [r8]
 800da88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800da8c:	3307      	adds	r3, #7
 800da8e:	f023 0307 	bic.w	r3, r3, #7
 800da92:	f103 0208 	add.w	r2, r3, #8
 800da96:	f8c8 2000 	str.w	r2, [r8]
 800da9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800daa2:	9307      	str	r3, [sp, #28]
 800daa4:	f8cd 8018 	str.w	r8, [sp, #24]
 800daa8:	ee08 0a10 	vmov	s16, r0
 800daac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dab4:	4b9e      	ldr	r3, [pc, #632]	; (800dd30 <_printf_float+0x2d8>)
 800dab6:	f04f 32ff 	mov.w	r2, #4294967295
 800daba:	f7f3 f85f 	bl	8000b7c <__aeabi_dcmpun>
 800dabe:	bb88      	cbnz	r0, 800db24 <_printf_float+0xcc>
 800dac0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dac4:	4b9a      	ldr	r3, [pc, #616]	; (800dd30 <_printf_float+0x2d8>)
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	f7f3 f839 	bl	8000b40 <__aeabi_dcmple>
 800dace:	bb48      	cbnz	r0, 800db24 <_printf_float+0xcc>
 800dad0:	2200      	movs	r2, #0
 800dad2:	2300      	movs	r3, #0
 800dad4:	4640      	mov	r0, r8
 800dad6:	4649      	mov	r1, r9
 800dad8:	f7f3 f828 	bl	8000b2c <__aeabi_dcmplt>
 800dadc:	b110      	cbz	r0, 800dae4 <_printf_float+0x8c>
 800dade:	232d      	movs	r3, #45	; 0x2d
 800dae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dae4:	4a93      	ldr	r2, [pc, #588]	; (800dd34 <_printf_float+0x2dc>)
 800dae6:	4b94      	ldr	r3, [pc, #592]	; (800dd38 <_printf_float+0x2e0>)
 800dae8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800daec:	bf94      	ite	ls
 800daee:	4690      	movls	r8, r2
 800daf0:	4698      	movhi	r8, r3
 800daf2:	2303      	movs	r3, #3
 800daf4:	6123      	str	r3, [r4, #16]
 800daf6:	9b05      	ldr	r3, [sp, #20]
 800daf8:	f023 0304 	bic.w	r3, r3, #4
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	f04f 0900 	mov.w	r9, #0
 800db02:	9700      	str	r7, [sp, #0]
 800db04:	4633      	mov	r3, r6
 800db06:	aa0b      	add	r2, sp, #44	; 0x2c
 800db08:	4621      	mov	r1, r4
 800db0a:	4628      	mov	r0, r5
 800db0c:	f000 f9da 	bl	800dec4 <_printf_common>
 800db10:	3001      	adds	r0, #1
 800db12:	f040 8090 	bne.w	800dc36 <_printf_float+0x1de>
 800db16:	f04f 30ff 	mov.w	r0, #4294967295
 800db1a:	b00d      	add	sp, #52	; 0x34
 800db1c:	ecbd 8b02 	vpop	{d8}
 800db20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db24:	4642      	mov	r2, r8
 800db26:	464b      	mov	r3, r9
 800db28:	4640      	mov	r0, r8
 800db2a:	4649      	mov	r1, r9
 800db2c:	f7f3 f826 	bl	8000b7c <__aeabi_dcmpun>
 800db30:	b140      	cbz	r0, 800db44 <_printf_float+0xec>
 800db32:	464b      	mov	r3, r9
 800db34:	2b00      	cmp	r3, #0
 800db36:	bfbc      	itt	lt
 800db38:	232d      	movlt	r3, #45	; 0x2d
 800db3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800db3e:	4a7f      	ldr	r2, [pc, #508]	; (800dd3c <_printf_float+0x2e4>)
 800db40:	4b7f      	ldr	r3, [pc, #508]	; (800dd40 <_printf_float+0x2e8>)
 800db42:	e7d1      	b.n	800dae8 <_printf_float+0x90>
 800db44:	6863      	ldr	r3, [r4, #4]
 800db46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800db4a:	9206      	str	r2, [sp, #24]
 800db4c:	1c5a      	adds	r2, r3, #1
 800db4e:	d13f      	bne.n	800dbd0 <_printf_float+0x178>
 800db50:	2306      	movs	r3, #6
 800db52:	6063      	str	r3, [r4, #4]
 800db54:	9b05      	ldr	r3, [sp, #20]
 800db56:	6861      	ldr	r1, [r4, #4]
 800db58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800db5c:	2300      	movs	r3, #0
 800db5e:	9303      	str	r3, [sp, #12]
 800db60:	ab0a      	add	r3, sp, #40	; 0x28
 800db62:	e9cd b301 	strd	fp, r3, [sp, #4]
 800db66:	ab09      	add	r3, sp, #36	; 0x24
 800db68:	ec49 8b10 	vmov	d0, r8, r9
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	6022      	str	r2, [r4, #0]
 800db70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db74:	4628      	mov	r0, r5
 800db76:	f7ff fecf 	bl	800d918 <__cvt>
 800db7a:	9b06      	ldr	r3, [sp, #24]
 800db7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db7e:	2b47      	cmp	r3, #71	; 0x47
 800db80:	4680      	mov	r8, r0
 800db82:	d108      	bne.n	800db96 <_printf_float+0x13e>
 800db84:	1cc8      	adds	r0, r1, #3
 800db86:	db02      	blt.n	800db8e <_printf_float+0x136>
 800db88:	6863      	ldr	r3, [r4, #4]
 800db8a:	4299      	cmp	r1, r3
 800db8c:	dd41      	ble.n	800dc12 <_printf_float+0x1ba>
 800db8e:	f1ab 0302 	sub.w	r3, fp, #2
 800db92:	fa5f fb83 	uxtb.w	fp, r3
 800db96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db9a:	d820      	bhi.n	800dbde <_printf_float+0x186>
 800db9c:	3901      	subs	r1, #1
 800db9e:	465a      	mov	r2, fp
 800dba0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dba4:	9109      	str	r1, [sp, #36]	; 0x24
 800dba6:	f7ff ff19 	bl	800d9dc <__exponent>
 800dbaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbac:	1813      	adds	r3, r2, r0
 800dbae:	2a01      	cmp	r2, #1
 800dbb0:	4681      	mov	r9, r0
 800dbb2:	6123      	str	r3, [r4, #16]
 800dbb4:	dc02      	bgt.n	800dbbc <_printf_float+0x164>
 800dbb6:	6822      	ldr	r2, [r4, #0]
 800dbb8:	07d2      	lsls	r2, r2, #31
 800dbba:	d501      	bpl.n	800dbc0 <_printf_float+0x168>
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	6123      	str	r3, [r4, #16]
 800dbc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d09c      	beq.n	800db02 <_printf_float+0xaa>
 800dbc8:	232d      	movs	r3, #45	; 0x2d
 800dbca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbce:	e798      	b.n	800db02 <_printf_float+0xaa>
 800dbd0:	9a06      	ldr	r2, [sp, #24]
 800dbd2:	2a47      	cmp	r2, #71	; 0x47
 800dbd4:	d1be      	bne.n	800db54 <_printf_float+0xfc>
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1bc      	bne.n	800db54 <_printf_float+0xfc>
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e7b9      	b.n	800db52 <_printf_float+0xfa>
 800dbde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dbe2:	d118      	bne.n	800dc16 <_printf_float+0x1be>
 800dbe4:	2900      	cmp	r1, #0
 800dbe6:	6863      	ldr	r3, [r4, #4]
 800dbe8:	dd0b      	ble.n	800dc02 <_printf_float+0x1aa>
 800dbea:	6121      	str	r1, [r4, #16]
 800dbec:	b913      	cbnz	r3, 800dbf4 <_printf_float+0x19c>
 800dbee:	6822      	ldr	r2, [r4, #0]
 800dbf0:	07d0      	lsls	r0, r2, #31
 800dbf2:	d502      	bpl.n	800dbfa <_printf_float+0x1a2>
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	440b      	add	r3, r1
 800dbf8:	6123      	str	r3, [r4, #16]
 800dbfa:	65a1      	str	r1, [r4, #88]	; 0x58
 800dbfc:	f04f 0900 	mov.w	r9, #0
 800dc00:	e7de      	b.n	800dbc0 <_printf_float+0x168>
 800dc02:	b913      	cbnz	r3, 800dc0a <_printf_float+0x1b2>
 800dc04:	6822      	ldr	r2, [r4, #0]
 800dc06:	07d2      	lsls	r2, r2, #31
 800dc08:	d501      	bpl.n	800dc0e <_printf_float+0x1b6>
 800dc0a:	3302      	adds	r3, #2
 800dc0c:	e7f4      	b.n	800dbf8 <_printf_float+0x1a0>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e7f2      	b.n	800dbf8 <_printf_float+0x1a0>
 800dc12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dc16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc18:	4299      	cmp	r1, r3
 800dc1a:	db05      	blt.n	800dc28 <_printf_float+0x1d0>
 800dc1c:	6823      	ldr	r3, [r4, #0]
 800dc1e:	6121      	str	r1, [r4, #16]
 800dc20:	07d8      	lsls	r0, r3, #31
 800dc22:	d5ea      	bpl.n	800dbfa <_printf_float+0x1a2>
 800dc24:	1c4b      	adds	r3, r1, #1
 800dc26:	e7e7      	b.n	800dbf8 <_printf_float+0x1a0>
 800dc28:	2900      	cmp	r1, #0
 800dc2a:	bfd4      	ite	le
 800dc2c:	f1c1 0202 	rsble	r2, r1, #2
 800dc30:	2201      	movgt	r2, #1
 800dc32:	4413      	add	r3, r2
 800dc34:	e7e0      	b.n	800dbf8 <_printf_float+0x1a0>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	055a      	lsls	r2, r3, #21
 800dc3a:	d407      	bmi.n	800dc4c <_printf_float+0x1f4>
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	4642      	mov	r2, r8
 800dc40:	4631      	mov	r1, r6
 800dc42:	4628      	mov	r0, r5
 800dc44:	47b8      	blx	r7
 800dc46:	3001      	adds	r0, #1
 800dc48:	d12c      	bne.n	800dca4 <_printf_float+0x24c>
 800dc4a:	e764      	b.n	800db16 <_printf_float+0xbe>
 800dc4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc50:	f240 80e0 	bls.w	800de14 <_printf_float+0x3bc>
 800dc54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f7f2 ff5c 	bl	8000b18 <__aeabi_dcmpeq>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d034      	beq.n	800dcce <_printf_float+0x276>
 800dc64:	4a37      	ldr	r2, [pc, #220]	; (800dd44 <_printf_float+0x2ec>)
 800dc66:	2301      	movs	r3, #1
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	47b8      	blx	r7
 800dc6e:	3001      	adds	r0, #1
 800dc70:	f43f af51 	beq.w	800db16 <_printf_float+0xbe>
 800dc74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	db02      	blt.n	800dc82 <_printf_float+0x22a>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	07d8      	lsls	r0, r3, #31
 800dc80:	d510      	bpl.n	800dca4 <_printf_float+0x24c>
 800dc82:	ee18 3a10 	vmov	r3, s16
 800dc86:	4652      	mov	r2, sl
 800dc88:	4631      	mov	r1, r6
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	47b8      	blx	r7
 800dc8e:	3001      	adds	r0, #1
 800dc90:	f43f af41 	beq.w	800db16 <_printf_float+0xbe>
 800dc94:	f04f 0800 	mov.w	r8, #0
 800dc98:	f104 091a 	add.w	r9, r4, #26
 800dc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	4543      	cmp	r3, r8
 800dca2:	dc09      	bgt.n	800dcb8 <_printf_float+0x260>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	079b      	lsls	r3, r3, #30
 800dca8:	f100 8107 	bmi.w	800deba <_printf_float+0x462>
 800dcac:	68e0      	ldr	r0, [r4, #12]
 800dcae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcb0:	4298      	cmp	r0, r3
 800dcb2:	bfb8      	it	lt
 800dcb4:	4618      	movlt	r0, r3
 800dcb6:	e730      	b.n	800db1a <_printf_float+0xc2>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	464a      	mov	r2, r9
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	47b8      	blx	r7
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	f43f af27 	beq.w	800db16 <_printf_float+0xbe>
 800dcc8:	f108 0801 	add.w	r8, r8, #1
 800dccc:	e7e6      	b.n	800dc9c <_printf_float+0x244>
 800dcce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	dc39      	bgt.n	800dd48 <_printf_float+0x2f0>
 800dcd4:	4a1b      	ldr	r2, [pc, #108]	; (800dd44 <_printf_float+0x2ec>)
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	4631      	mov	r1, r6
 800dcda:	4628      	mov	r0, r5
 800dcdc:	47b8      	blx	r7
 800dcde:	3001      	adds	r0, #1
 800dce0:	f43f af19 	beq.w	800db16 <_printf_float+0xbe>
 800dce4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dce8:	4313      	orrs	r3, r2
 800dcea:	d102      	bne.n	800dcf2 <_printf_float+0x29a>
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	07d9      	lsls	r1, r3, #31
 800dcf0:	d5d8      	bpl.n	800dca4 <_printf_float+0x24c>
 800dcf2:	ee18 3a10 	vmov	r3, s16
 800dcf6:	4652      	mov	r2, sl
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	f43f af09 	beq.w	800db16 <_printf_float+0xbe>
 800dd04:	f04f 0900 	mov.w	r9, #0
 800dd08:	f104 0a1a 	add.w	sl, r4, #26
 800dd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0e:	425b      	negs	r3, r3
 800dd10:	454b      	cmp	r3, r9
 800dd12:	dc01      	bgt.n	800dd18 <_printf_float+0x2c0>
 800dd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd16:	e792      	b.n	800dc3e <_printf_float+0x1e6>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	4652      	mov	r2, sl
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4628      	mov	r0, r5
 800dd20:	47b8      	blx	r7
 800dd22:	3001      	adds	r0, #1
 800dd24:	f43f aef7 	beq.w	800db16 <_printf_float+0xbe>
 800dd28:	f109 0901 	add.w	r9, r9, #1
 800dd2c:	e7ee      	b.n	800dd0c <_printf_float+0x2b4>
 800dd2e:	bf00      	nop
 800dd30:	7fefffff 	.word	0x7fefffff
 800dd34:	08024578 	.word	0x08024578
 800dd38:	0802457c 	.word	0x0802457c
 800dd3c:	08024580 	.word	0x08024580
 800dd40:	08024584 	.word	0x08024584
 800dd44:	08024588 	.word	0x08024588
 800dd48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	bfa8      	it	ge
 800dd50:	461a      	movge	r2, r3
 800dd52:	2a00      	cmp	r2, #0
 800dd54:	4691      	mov	r9, r2
 800dd56:	dc37      	bgt.n	800ddc8 <_printf_float+0x370>
 800dd58:	f04f 0b00 	mov.w	fp, #0
 800dd5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd60:	f104 021a 	add.w	r2, r4, #26
 800dd64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd66:	9305      	str	r3, [sp, #20]
 800dd68:	eba3 0309 	sub.w	r3, r3, r9
 800dd6c:	455b      	cmp	r3, fp
 800dd6e:	dc33      	bgt.n	800ddd8 <_printf_float+0x380>
 800dd70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd74:	429a      	cmp	r2, r3
 800dd76:	db3b      	blt.n	800ddf0 <_printf_float+0x398>
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	07da      	lsls	r2, r3, #31
 800dd7c:	d438      	bmi.n	800ddf0 <_printf_float+0x398>
 800dd7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dd82:	eba2 0903 	sub.w	r9, r2, r3
 800dd86:	9b05      	ldr	r3, [sp, #20]
 800dd88:	1ad2      	subs	r2, r2, r3
 800dd8a:	4591      	cmp	r9, r2
 800dd8c:	bfa8      	it	ge
 800dd8e:	4691      	movge	r9, r2
 800dd90:	f1b9 0f00 	cmp.w	r9, #0
 800dd94:	dc35      	bgt.n	800de02 <_printf_float+0x3aa>
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd9e:	f104 0a1a 	add.w	sl, r4, #26
 800dda2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dda6:	1a9b      	subs	r3, r3, r2
 800dda8:	eba3 0309 	sub.w	r3, r3, r9
 800ddac:	4543      	cmp	r3, r8
 800ddae:	f77f af79 	ble.w	800dca4 <_printf_float+0x24c>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	4652      	mov	r2, sl
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	4628      	mov	r0, r5
 800ddba:	47b8      	blx	r7
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	f43f aeaa 	beq.w	800db16 <_printf_float+0xbe>
 800ddc2:	f108 0801 	add.w	r8, r8, #1
 800ddc6:	e7ec      	b.n	800dda2 <_printf_float+0x34a>
 800ddc8:	4613      	mov	r3, r2
 800ddca:	4631      	mov	r1, r6
 800ddcc:	4642      	mov	r2, r8
 800ddce:	4628      	mov	r0, r5
 800ddd0:	47b8      	blx	r7
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d1c0      	bne.n	800dd58 <_printf_float+0x300>
 800ddd6:	e69e      	b.n	800db16 <_printf_float+0xbe>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	4631      	mov	r1, r6
 800dddc:	4628      	mov	r0, r5
 800ddde:	9205      	str	r2, [sp, #20]
 800dde0:	47b8      	blx	r7
 800dde2:	3001      	adds	r0, #1
 800dde4:	f43f ae97 	beq.w	800db16 <_printf_float+0xbe>
 800dde8:	9a05      	ldr	r2, [sp, #20]
 800ddea:	f10b 0b01 	add.w	fp, fp, #1
 800ddee:	e7b9      	b.n	800dd64 <_printf_float+0x30c>
 800ddf0:	ee18 3a10 	vmov	r3, s16
 800ddf4:	4652      	mov	r2, sl
 800ddf6:	4631      	mov	r1, r6
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	47b8      	blx	r7
 800ddfc:	3001      	adds	r0, #1
 800ddfe:	d1be      	bne.n	800dd7e <_printf_float+0x326>
 800de00:	e689      	b.n	800db16 <_printf_float+0xbe>
 800de02:	9a05      	ldr	r2, [sp, #20]
 800de04:	464b      	mov	r3, r9
 800de06:	4442      	add	r2, r8
 800de08:	4631      	mov	r1, r6
 800de0a:	4628      	mov	r0, r5
 800de0c:	47b8      	blx	r7
 800de0e:	3001      	adds	r0, #1
 800de10:	d1c1      	bne.n	800dd96 <_printf_float+0x33e>
 800de12:	e680      	b.n	800db16 <_printf_float+0xbe>
 800de14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de16:	2a01      	cmp	r2, #1
 800de18:	dc01      	bgt.n	800de1e <_printf_float+0x3c6>
 800de1a:	07db      	lsls	r3, r3, #31
 800de1c:	d53a      	bpl.n	800de94 <_printf_float+0x43c>
 800de1e:	2301      	movs	r3, #1
 800de20:	4642      	mov	r2, r8
 800de22:	4631      	mov	r1, r6
 800de24:	4628      	mov	r0, r5
 800de26:	47b8      	blx	r7
 800de28:	3001      	adds	r0, #1
 800de2a:	f43f ae74 	beq.w	800db16 <_printf_float+0xbe>
 800de2e:	ee18 3a10 	vmov	r3, s16
 800de32:	4652      	mov	r2, sl
 800de34:	4631      	mov	r1, r6
 800de36:	4628      	mov	r0, r5
 800de38:	47b8      	blx	r7
 800de3a:	3001      	adds	r0, #1
 800de3c:	f43f ae6b 	beq.w	800db16 <_printf_float+0xbe>
 800de40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de44:	2200      	movs	r2, #0
 800de46:	2300      	movs	r3, #0
 800de48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800de4c:	f7f2 fe64 	bl	8000b18 <__aeabi_dcmpeq>
 800de50:	b9d8      	cbnz	r0, 800de8a <_printf_float+0x432>
 800de52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800de56:	f108 0201 	add.w	r2, r8, #1
 800de5a:	4631      	mov	r1, r6
 800de5c:	4628      	mov	r0, r5
 800de5e:	47b8      	blx	r7
 800de60:	3001      	adds	r0, #1
 800de62:	d10e      	bne.n	800de82 <_printf_float+0x42a>
 800de64:	e657      	b.n	800db16 <_printf_float+0xbe>
 800de66:	2301      	movs	r3, #1
 800de68:	4652      	mov	r2, sl
 800de6a:	4631      	mov	r1, r6
 800de6c:	4628      	mov	r0, r5
 800de6e:	47b8      	blx	r7
 800de70:	3001      	adds	r0, #1
 800de72:	f43f ae50 	beq.w	800db16 <_printf_float+0xbe>
 800de76:	f108 0801 	add.w	r8, r8, #1
 800de7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de7c:	3b01      	subs	r3, #1
 800de7e:	4543      	cmp	r3, r8
 800de80:	dcf1      	bgt.n	800de66 <_printf_float+0x40e>
 800de82:	464b      	mov	r3, r9
 800de84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de88:	e6da      	b.n	800dc40 <_printf_float+0x1e8>
 800de8a:	f04f 0800 	mov.w	r8, #0
 800de8e:	f104 0a1a 	add.w	sl, r4, #26
 800de92:	e7f2      	b.n	800de7a <_printf_float+0x422>
 800de94:	2301      	movs	r3, #1
 800de96:	4642      	mov	r2, r8
 800de98:	e7df      	b.n	800de5a <_printf_float+0x402>
 800de9a:	2301      	movs	r3, #1
 800de9c:	464a      	mov	r2, r9
 800de9e:	4631      	mov	r1, r6
 800dea0:	4628      	mov	r0, r5
 800dea2:	47b8      	blx	r7
 800dea4:	3001      	adds	r0, #1
 800dea6:	f43f ae36 	beq.w	800db16 <_printf_float+0xbe>
 800deaa:	f108 0801 	add.w	r8, r8, #1
 800deae:	68e3      	ldr	r3, [r4, #12]
 800deb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800deb2:	1a5b      	subs	r3, r3, r1
 800deb4:	4543      	cmp	r3, r8
 800deb6:	dcf0      	bgt.n	800de9a <_printf_float+0x442>
 800deb8:	e6f8      	b.n	800dcac <_printf_float+0x254>
 800deba:	f04f 0800 	mov.w	r8, #0
 800debe:	f104 0919 	add.w	r9, r4, #25
 800dec2:	e7f4      	b.n	800deae <_printf_float+0x456>

0800dec4 <_printf_common>:
 800dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dec8:	4616      	mov	r6, r2
 800deca:	4699      	mov	r9, r3
 800decc:	688a      	ldr	r2, [r1, #8]
 800dece:	690b      	ldr	r3, [r1, #16]
 800ded0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ded4:	4293      	cmp	r3, r2
 800ded6:	bfb8      	it	lt
 800ded8:	4613      	movlt	r3, r2
 800deda:	6033      	str	r3, [r6, #0]
 800dedc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dee0:	4607      	mov	r7, r0
 800dee2:	460c      	mov	r4, r1
 800dee4:	b10a      	cbz	r2, 800deea <_printf_common+0x26>
 800dee6:	3301      	adds	r3, #1
 800dee8:	6033      	str	r3, [r6, #0]
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	0699      	lsls	r1, r3, #26
 800deee:	bf42      	ittt	mi
 800def0:	6833      	ldrmi	r3, [r6, #0]
 800def2:	3302      	addmi	r3, #2
 800def4:	6033      	strmi	r3, [r6, #0]
 800def6:	6825      	ldr	r5, [r4, #0]
 800def8:	f015 0506 	ands.w	r5, r5, #6
 800defc:	d106      	bne.n	800df0c <_printf_common+0x48>
 800defe:	f104 0a19 	add.w	sl, r4, #25
 800df02:	68e3      	ldr	r3, [r4, #12]
 800df04:	6832      	ldr	r2, [r6, #0]
 800df06:	1a9b      	subs	r3, r3, r2
 800df08:	42ab      	cmp	r3, r5
 800df0a:	dc26      	bgt.n	800df5a <_printf_common+0x96>
 800df0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df10:	1e13      	subs	r3, r2, #0
 800df12:	6822      	ldr	r2, [r4, #0]
 800df14:	bf18      	it	ne
 800df16:	2301      	movne	r3, #1
 800df18:	0692      	lsls	r2, r2, #26
 800df1a:	d42b      	bmi.n	800df74 <_printf_common+0xb0>
 800df1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df20:	4649      	mov	r1, r9
 800df22:	4638      	mov	r0, r7
 800df24:	47c0      	blx	r8
 800df26:	3001      	adds	r0, #1
 800df28:	d01e      	beq.n	800df68 <_printf_common+0xa4>
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	6922      	ldr	r2, [r4, #16]
 800df2e:	f003 0306 	and.w	r3, r3, #6
 800df32:	2b04      	cmp	r3, #4
 800df34:	bf02      	ittt	eq
 800df36:	68e5      	ldreq	r5, [r4, #12]
 800df38:	6833      	ldreq	r3, [r6, #0]
 800df3a:	1aed      	subeq	r5, r5, r3
 800df3c:	68a3      	ldr	r3, [r4, #8]
 800df3e:	bf0c      	ite	eq
 800df40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df44:	2500      	movne	r5, #0
 800df46:	4293      	cmp	r3, r2
 800df48:	bfc4      	itt	gt
 800df4a:	1a9b      	subgt	r3, r3, r2
 800df4c:	18ed      	addgt	r5, r5, r3
 800df4e:	2600      	movs	r6, #0
 800df50:	341a      	adds	r4, #26
 800df52:	42b5      	cmp	r5, r6
 800df54:	d11a      	bne.n	800df8c <_printf_common+0xc8>
 800df56:	2000      	movs	r0, #0
 800df58:	e008      	b.n	800df6c <_printf_common+0xa8>
 800df5a:	2301      	movs	r3, #1
 800df5c:	4652      	mov	r2, sl
 800df5e:	4649      	mov	r1, r9
 800df60:	4638      	mov	r0, r7
 800df62:	47c0      	blx	r8
 800df64:	3001      	adds	r0, #1
 800df66:	d103      	bne.n	800df70 <_printf_common+0xac>
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df70:	3501      	adds	r5, #1
 800df72:	e7c6      	b.n	800df02 <_printf_common+0x3e>
 800df74:	18e1      	adds	r1, r4, r3
 800df76:	1c5a      	adds	r2, r3, #1
 800df78:	2030      	movs	r0, #48	; 0x30
 800df7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df7e:	4422      	add	r2, r4
 800df80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df88:	3302      	adds	r3, #2
 800df8a:	e7c7      	b.n	800df1c <_printf_common+0x58>
 800df8c:	2301      	movs	r3, #1
 800df8e:	4622      	mov	r2, r4
 800df90:	4649      	mov	r1, r9
 800df92:	4638      	mov	r0, r7
 800df94:	47c0      	blx	r8
 800df96:	3001      	adds	r0, #1
 800df98:	d0e6      	beq.n	800df68 <_printf_common+0xa4>
 800df9a:	3601      	adds	r6, #1
 800df9c:	e7d9      	b.n	800df52 <_printf_common+0x8e>
	...

0800dfa0 <_printf_i>:
 800dfa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa4:	7e0f      	ldrb	r7, [r1, #24]
 800dfa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dfa8:	2f78      	cmp	r7, #120	; 0x78
 800dfaa:	4691      	mov	r9, r2
 800dfac:	4680      	mov	r8, r0
 800dfae:	460c      	mov	r4, r1
 800dfb0:	469a      	mov	sl, r3
 800dfb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dfb6:	d807      	bhi.n	800dfc8 <_printf_i+0x28>
 800dfb8:	2f62      	cmp	r7, #98	; 0x62
 800dfba:	d80a      	bhi.n	800dfd2 <_printf_i+0x32>
 800dfbc:	2f00      	cmp	r7, #0
 800dfbe:	f000 80d4 	beq.w	800e16a <_printf_i+0x1ca>
 800dfc2:	2f58      	cmp	r7, #88	; 0x58
 800dfc4:	f000 80c0 	beq.w	800e148 <_printf_i+0x1a8>
 800dfc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfd0:	e03a      	b.n	800e048 <_printf_i+0xa8>
 800dfd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfd6:	2b15      	cmp	r3, #21
 800dfd8:	d8f6      	bhi.n	800dfc8 <_printf_i+0x28>
 800dfda:	a101      	add	r1, pc, #4	; (adr r1, 800dfe0 <_printf_i+0x40>)
 800dfdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfe0:	0800e039 	.word	0x0800e039
 800dfe4:	0800e04d 	.word	0x0800e04d
 800dfe8:	0800dfc9 	.word	0x0800dfc9
 800dfec:	0800dfc9 	.word	0x0800dfc9
 800dff0:	0800dfc9 	.word	0x0800dfc9
 800dff4:	0800dfc9 	.word	0x0800dfc9
 800dff8:	0800e04d 	.word	0x0800e04d
 800dffc:	0800dfc9 	.word	0x0800dfc9
 800e000:	0800dfc9 	.word	0x0800dfc9
 800e004:	0800dfc9 	.word	0x0800dfc9
 800e008:	0800dfc9 	.word	0x0800dfc9
 800e00c:	0800e151 	.word	0x0800e151
 800e010:	0800e079 	.word	0x0800e079
 800e014:	0800e10b 	.word	0x0800e10b
 800e018:	0800dfc9 	.word	0x0800dfc9
 800e01c:	0800dfc9 	.word	0x0800dfc9
 800e020:	0800e173 	.word	0x0800e173
 800e024:	0800dfc9 	.word	0x0800dfc9
 800e028:	0800e079 	.word	0x0800e079
 800e02c:	0800dfc9 	.word	0x0800dfc9
 800e030:	0800dfc9 	.word	0x0800dfc9
 800e034:	0800e113 	.word	0x0800e113
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	1d1a      	adds	r2, r3, #4
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	602a      	str	r2, [r5, #0]
 800e040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e048:	2301      	movs	r3, #1
 800e04a:	e09f      	b.n	800e18c <_printf_i+0x1ec>
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	682b      	ldr	r3, [r5, #0]
 800e050:	0607      	lsls	r7, r0, #24
 800e052:	f103 0104 	add.w	r1, r3, #4
 800e056:	6029      	str	r1, [r5, #0]
 800e058:	d501      	bpl.n	800e05e <_printf_i+0xbe>
 800e05a:	681e      	ldr	r6, [r3, #0]
 800e05c:	e003      	b.n	800e066 <_printf_i+0xc6>
 800e05e:	0646      	lsls	r6, r0, #25
 800e060:	d5fb      	bpl.n	800e05a <_printf_i+0xba>
 800e062:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e066:	2e00      	cmp	r6, #0
 800e068:	da03      	bge.n	800e072 <_printf_i+0xd2>
 800e06a:	232d      	movs	r3, #45	; 0x2d
 800e06c:	4276      	negs	r6, r6
 800e06e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e072:	485a      	ldr	r0, [pc, #360]	; (800e1dc <_printf_i+0x23c>)
 800e074:	230a      	movs	r3, #10
 800e076:	e012      	b.n	800e09e <_printf_i+0xfe>
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	6820      	ldr	r0, [r4, #0]
 800e07c:	1d19      	adds	r1, r3, #4
 800e07e:	6029      	str	r1, [r5, #0]
 800e080:	0605      	lsls	r5, r0, #24
 800e082:	d501      	bpl.n	800e088 <_printf_i+0xe8>
 800e084:	681e      	ldr	r6, [r3, #0]
 800e086:	e002      	b.n	800e08e <_printf_i+0xee>
 800e088:	0641      	lsls	r1, r0, #25
 800e08a:	d5fb      	bpl.n	800e084 <_printf_i+0xe4>
 800e08c:	881e      	ldrh	r6, [r3, #0]
 800e08e:	4853      	ldr	r0, [pc, #332]	; (800e1dc <_printf_i+0x23c>)
 800e090:	2f6f      	cmp	r7, #111	; 0x6f
 800e092:	bf0c      	ite	eq
 800e094:	2308      	moveq	r3, #8
 800e096:	230a      	movne	r3, #10
 800e098:	2100      	movs	r1, #0
 800e09a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e09e:	6865      	ldr	r5, [r4, #4]
 800e0a0:	60a5      	str	r5, [r4, #8]
 800e0a2:	2d00      	cmp	r5, #0
 800e0a4:	bfa2      	ittt	ge
 800e0a6:	6821      	ldrge	r1, [r4, #0]
 800e0a8:	f021 0104 	bicge.w	r1, r1, #4
 800e0ac:	6021      	strge	r1, [r4, #0]
 800e0ae:	b90e      	cbnz	r6, 800e0b4 <_printf_i+0x114>
 800e0b0:	2d00      	cmp	r5, #0
 800e0b2:	d04b      	beq.n	800e14c <_printf_i+0x1ac>
 800e0b4:	4615      	mov	r5, r2
 800e0b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e0ba:	fb03 6711 	mls	r7, r3, r1, r6
 800e0be:	5dc7      	ldrb	r7, [r0, r7]
 800e0c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e0c4:	4637      	mov	r7, r6
 800e0c6:	42bb      	cmp	r3, r7
 800e0c8:	460e      	mov	r6, r1
 800e0ca:	d9f4      	bls.n	800e0b6 <_printf_i+0x116>
 800e0cc:	2b08      	cmp	r3, #8
 800e0ce:	d10b      	bne.n	800e0e8 <_printf_i+0x148>
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	07de      	lsls	r6, r3, #31
 800e0d4:	d508      	bpl.n	800e0e8 <_printf_i+0x148>
 800e0d6:	6923      	ldr	r3, [r4, #16]
 800e0d8:	6861      	ldr	r1, [r4, #4]
 800e0da:	4299      	cmp	r1, r3
 800e0dc:	bfde      	ittt	le
 800e0de:	2330      	movle	r3, #48	; 0x30
 800e0e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e0e8:	1b52      	subs	r2, r2, r5
 800e0ea:	6122      	str	r2, [r4, #16]
 800e0ec:	f8cd a000 	str.w	sl, [sp]
 800e0f0:	464b      	mov	r3, r9
 800e0f2:	aa03      	add	r2, sp, #12
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4640      	mov	r0, r8
 800e0f8:	f7ff fee4 	bl	800dec4 <_printf_common>
 800e0fc:	3001      	adds	r0, #1
 800e0fe:	d14a      	bne.n	800e196 <_printf_i+0x1f6>
 800e100:	f04f 30ff 	mov.w	r0, #4294967295
 800e104:	b004      	add	sp, #16
 800e106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	f043 0320 	orr.w	r3, r3, #32
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	4833      	ldr	r0, [pc, #204]	; (800e1e0 <_printf_i+0x240>)
 800e114:	2778      	movs	r7, #120	; 0x78
 800e116:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e11a:	6823      	ldr	r3, [r4, #0]
 800e11c:	6829      	ldr	r1, [r5, #0]
 800e11e:	061f      	lsls	r7, r3, #24
 800e120:	f851 6b04 	ldr.w	r6, [r1], #4
 800e124:	d402      	bmi.n	800e12c <_printf_i+0x18c>
 800e126:	065f      	lsls	r7, r3, #25
 800e128:	bf48      	it	mi
 800e12a:	b2b6      	uxthmi	r6, r6
 800e12c:	07df      	lsls	r7, r3, #31
 800e12e:	bf48      	it	mi
 800e130:	f043 0320 	orrmi.w	r3, r3, #32
 800e134:	6029      	str	r1, [r5, #0]
 800e136:	bf48      	it	mi
 800e138:	6023      	strmi	r3, [r4, #0]
 800e13a:	b91e      	cbnz	r6, 800e144 <_printf_i+0x1a4>
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	f023 0320 	bic.w	r3, r3, #32
 800e142:	6023      	str	r3, [r4, #0]
 800e144:	2310      	movs	r3, #16
 800e146:	e7a7      	b.n	800e098 <_printf_i+0xf8>
 800e148:	4824      	ldr	r0, [pc, #144]	; (800e1dc <_printf_i+0x23c>)
 800e14a:	e7e4      	b.n	800e116 <_printf_i+0x176>
 800e14c:	4615      	mov	r5, r2
 800e14e:	e7bd      	b.n	800e0cc <_printf_i+0x12c>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	6826      	ldr	r6, [r4, #0]
 800e154:	6961      	ldr	r1, [r4, #20]
 800e156:	1d18      	adds	r0, r3, #4
 800e158:	6028      	str	r0, [r5, #0]
 800e15a:	0635      	lsls	r5, r6, #24
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	d501      	bpl.n	800e164 <_printf_i+0x1c4>
 800e160:	6019      	str	r1, [r3, #0]
 800e162:	e002      	b.n	800e16a <_printf_i+0x1ca>
 800e164:	0670      	lsls	r0, r6, #25
 800e166:	d5fb      	bpl.n	800e160 <_printf_i+0x1c0>
 800e168:	8019      	strh	r1, [r3, #0]
 800e16a:	2300      	movs	r3, #0
 800e16c:	6123      	str	r3, [r4, #16]
 800e16e:	4615      	mov	r5, r2
 800e170:	e7bc      	b.n	800e0ec <_printf_i+0x14c>
 800e172:	682b      	ldr	r3, [r5, #0]
 800e174:	1d1a      	adds	r2, r3, #4
 800e176:	602a      	str	r2, [r5, #0]
 800e178:	681d      	ldr	r5, [r3, #0]
 800e17a:	6862      	ldr	r2, [r4, #4]
 800e17c:	2100      	movs	r1, #0
 800e17e:	4628      	mov	r0, r5
 800e180:	f7f2 f84e 	bl	8000220 <memchr>
 800e184:	b108      	cbz	r0, 800e18a <_printf_i+0x1ea>
 800e186:	1b40      	subs	r0, r0, r5
 800e188:	6060      	str	r0, [r4, #4]
 800e18a:	6863      	ldr	r3, [r4, #4]
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	2300      	movs	r3, #0
 800e190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e194:	e7aa      	b.n	800e0ec <_printf_i+0x14c>
 800e196:	6923      	ldr	r3, [r4, #16]
 800e198:	462a      	mov	r2, r5
 800e19a:	4649      	mov	r1, r9
 800e19c:	4640      	mov	r0, r8
 800e19e:	47d0      	blx	sl
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d0ad      	beq.n	800e100 <_printf_i+0x160>
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	079b      	lsls	r3, r3, #30
 800e1a8:	d413      	bmi.n	800e1d2 <_printf_i+0x232>
 800e1aa:	68e0      	ldr	r0, [r4, #12]
 800e1ac:	9b03      	ldr	r3, [sp, #12]
 800e1ae:	4298      	cmp	r0, r3
 800e1b0:	bfb8      	it	lt
 800e1b2:	4618      	movlt	r0, r3
 800e1b4:	e7a6      	b.n	800e104 <_printf_i+0x164>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	4632      	mov	r2, r6
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	4640      	mov	r0, r8
 800e1be:	47d0      	blx	sl
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d09d      	beq.n	800e100 <_printf_i+0x160>
 800e1c4:	3501      	adds	r5, #1
 800e1c6:	68e3      	ldr	r3, [r4, #12]
 800e1c8:	9903      	ldr	r1, [sp, #12]
 800e1ca:	1a5b      	subs	r3, r3, r1
 800e1cc:	42ab      	cmp	r3, r5
 800e1ce:	dcf2      	bgt.n	800e1b6 <_printf_i+0x216>
 800e1d0:	e7eb      	b.n	800e1aa <_printf_i+0x20a>
 800e1d2:	2500      	movs	r5, #0
 800e1d4:	f104 0619 	add.w	r6, r4, #25
 800e1d8:	e7f5      	b.n	800e1c6 <_printf_i+0x226>
 800e1da:	bf00      	nop
 800e1dc:	0802458a 	.word	0x0802458a
 800e1e0:	0802459b 	.word	0x0802459b

0800e1e4 <std>:
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	b510      	push	{r4, lr}
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e1ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1f2:	6083      	str	r3, [r0, #8]
 800e1f4:	8181      	strh	r1, [r0, #12]
 800e1f6:	6643      	str	r3, [r0, #100]	; 0x64
 800e1f8:	81c2      	strh	r2, [r0, #14]
 800e1fa:	6183      	str	r3, [r0, #24]
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	2208      	movs	r2, #8
 800e200:	305c      	adds	r0, #92	; 0x5c
 800e202:	f000 f8f4 	bl	800e3ee <memset>
 800e206:	4b0d      	ldr	r3, [pc, #52]	; (800e23c <std+0x58>)
 800e208:	6263      	str	r3, [r4, #36]	; 0x24
 800e20a:	4b0d      	ldr	r3, [pc, #52]	; (800e240 <std+0x5c>)
 800e20c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e20e:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <std+0x60>)
 800e210:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e212:	4b0d      	ldr	r3, [pc, #52]	; (800e248 <std+0x64>)
 800e214:	6323      	str	r3, [r4, #48]	; 0x30
 800e216:	4b0d      	ldr	r3, [pc, #52]	; (800e24c <std+0x68>)
 800e218:	6224      	str	r4, [r4, #32]
 800e21a:	429c      	cmp	r4, r3
 800e21c:	d006      	beq.n	800e22c <std+0x48>
 800e21e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e222:	4294      	cmp	r4, r2
 800e224:	d002      	beq.n	800e22c <std+0x48>
 800e226:	33d0      	adds	r3, #208	; 0xd0
 800e228:	429c      	cmp	r4, r3
 800e22a:	d105      	bne.n	800e238 <std+0x54>
 800e22c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e234:	f000 b958 	b.w	800e4e8 <__retarget_lock_init_recursive>
 800e238:	bd10      	pop	{r4, pc}
 800e23a:	bf00      	nop
 800e23c:	0800e369 	.word	0x0800e369
 800e240:	0800e38b 	.word	0x0800e38b
 800e244:	0800e3c3 	.word	0x0800e3c3
 800e248:	0800e3e7 	.word	0x0800e3e7
 800e24c:	2001b500 	.word	0x2001b500

0800e250 <stdio_exit_handler>:
 800e250:	4a02      	ldr	r2, [pc, #8]	; (800e25c <stdio_exit_handler+0xc>)
 800e252:	4903      	ldr	r1, [pc, #12]	; (800e260 <stdio_exit_handler+0x10>)
 800e254:	4803      	ldr	r0, [pc, #12]	; (800e264 <stdio_exit_handler+0x14>)
 800e256:	f000 b869 	b.w	800e32c <_fwalk_sglue>
 800e25a:	bf00      	nop
 800e25c:	20007878 	.word	0x20007878
 800e260:	0800fbe9 	.word	0x0800fbe9
 800e264:	20007884 	.word	0x20007884

0800e268 <cleanup_stdio>:
 800e268:	6841      	ldr	r1, [r0, #4]
 800e26a:	4b0c      	ldr	r3, [pc, #48]	; (800e29c <cleanup_stdio+0x34>)
 800e26c:	4299      	cmp	r1, r3
 800e26e:	b510      	push	{r4, lr}
 800e270:	4604      	mov	r4, r0
 800e272:	d001      	beq.n	800e278 <cleanup_stdio+0x10>
 800e274:	f001 fcb8 	bl	800fbe8 <_fflush_r>
 800e278:	68a1      	ldr	r1, [r4, #8]
 800e27a:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <cleanup_stdio+0x38>)
 800e27c:	4299      	cmp	r1, r3
 800e27e:	d002      	beq.n	800e286 <cleanup_stdio+0x1e>
 800e280:	4620      	mov	r0, r4
 800e282:	f001 fcb1 	bl	800fbe8 <_fflush_r>
 800e286:	68e1      	ldr	r1, [r4, #12]
 800e288:	4b06      	ldr	r3, [pc, #24]	; (800e2a4 <cleanup_stdio+0x3c>)
 800e28a:	4299      	cmp	r1, r3
 800e28c:	d004      	beq.n	800e298 <cleanup_stdio+0x30>
 800e28e:	4620      	mov	r0, r4
 800e290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e294:	f001 bca8 	b.w	800fbe8 <_fflush_r>
 800e298:	bd10      	pop	{r4, pc}
 800e29a:	bf00      	nop
 800e29c:	2001b500 	.word	0x2001b500
 800e2a0:	2001b568 	.word	0x2001b568
 800e2a4:	2001b5d0 	.word	0x2001b5d0

0800e2a8 <global_stdio_init.part.0>:
 800e2a8:	b510      	push	{r4, lr}
 800e2aa:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <global_stdio_init.part.0+0x30>)
 800e2ac:	4c0b      	ldr	r4, [pc, #44]	; (800e2dc <global_stdio_init.part.0+0x34>)
 800e2ae:	4a0c      	ldr	r2, [pc, #48]	; (800e2e0 <global_stdio_init.part.0+0x38>)
 800e2b0:	601a      	str	r2, [r3, #0]
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2104      	movs	r1, #4
 800e2b8:	f7ff ff94 	bl	800e1e4 <std>
 800e2bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	2109      	movs	r1, #9
 800e2c4:	f7ff ff8e 	bl	800e1e4 <std>
 800e2c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e2cc:	2202      	movs	r2, #2
 800e2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d2:	2112      	movs	r1, #18
 800e2d4:	f7ff bf86 	b.w	800e1e4 <std>
 800e2d8:	2001b638 	.word	0x2001b638
 800e2dc:	2001b500 	.word	0x2001b500
 800e2e0:	0800e251 	.word	0x0800e251

0800e2e4 <__sfp_lock_acquire>:
 800e2e4:	4801      	ldr	r0, [pc, #4]	; (800e2ec <__sfp_lock_acquire+0x8>)
 800e2e6:	f000 b900 	b.w	800e4ea <__retarget_lock_acquire_recursive>
 800e2ea:	bf00      	nop
 800e2ec:	2001b641 	.word	0x2001b641

0800e2f0 <__sfp_lock_release>:
 800e2f0:	4801      	ldr	r0, [pc, #4]	; (800e2f8 <__sfp_lock_release+0x8>)
 800e2f2:	f000 b8fb 	b.w	800e4ec <__retarget_lock_release_recursive>
 800e2f6:	bf00      	nop
 800e2f8:	2001b641 	.word	0x2001b641

0800e2fc <__sinit>:
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	4604      	mov	r4, r0
 800e300:	f7ff fff0 	bl	800e2e4 <__sfp_lock_acquire>
 800e304:	6a23      	ldr	r3, [r4, #32]
 800e306:	b11b      	cbz	r3, 800e310 <__sinit+0x14>
 800e308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e30c:	f7ff bff0 	b.w	800e2f0 <__sfp_lock_release>
 800e310:	4b04      	ldr	r3, [pc, #16]	; (800e324 <__sinit+0x28>)
 800e312:	6223      	str	r3, [r4, #32]
 800e314:	4b04      	ldr	r3, [pc, #16]	; (800e328 <__sinit+0x2c>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1f5      	bne.n	800e308 <__sinit+0xc>
 800e31c:	f7ff ffc4 	bl	800e2a8 <global_stdio_init.part.0>
 800e320:	e7f2      	b.n	800e308 <__sinit+0xc>
 800e322:	bf00      	nop
 800e324:	0800e269 	.word	0x0800e269
 800e328:	2001b638 	.word	0x2001b638

0800e32c <_fwalk_sglue>:
 800e32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e330:	4607      	mov	r7, r0
 800e332:	4688      	mov	r8, r1
 800e334:	4614      	mov	r4, r2
 800e336:	2600      	movs	r6, #0
 800e338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e33c:	f1b9 0901 	subs.w	r9, r9, #1
 800e340:	d505      	bpl.n	800e34e <_fwalk_sglue+0x22>
 800e342:	6824      	ldr	r4, [r4, #0]
 800e344:	2c00      	cmp	r4, #0
 800e346:	d1f7      	bne.n	800e338 <_fwalk_sglue+0xc>
 800e348:	4630      	mov	r0, r6
 800e34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d907      	bls.n	800e364 <_fwalk_sglue+0x38>
 800e354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e358:	3301      	adds	r3, #1
 800e35a:	d003      	beq.n	800e364 <_fwalk_sglue+0x38>
 800e35c:	4629      	mov	r1, r5
 800e35e:	4638      	mov	r0, r7
 800e360:	47c0      	blx	r8
 800e362:	4306      	orrs	r6, r0
 800e364:	3568      	adds	r5, #104	; 0x68
 800e366:	e7e9      	b.n	800e33c <_fwalk_sglue+0x10>

0800e368 <__sread>:
 800e368:	b510      	push	{r4, lr}
 800e36a:	460c      	mov	r4, r1
 800e36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e370:	f000 f86c 	bl	800e44c <_read_r>
 800e374:	2800      	cmp	r0, #0
 800e376:	bfab      	itete	ge
 800e378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e37a:	89a3      	ldrhlt	r3, [r4, #12]
 800e37c:	181b      	addge	r3, r3, r0
 800e37e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e382:	bfac      	ite	ge
 800e384:	6563      	strge	r3, [r4, #84]	; 0x54
 800e386:	81a3      	strhlt	r3, [r4, #12]
 800e388:	bd10      	pop	{r4, pc}

0800e38a <__swrite>:
 800e38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	461f      	mov	r7, r3
 800e390:	898b      	ldrh	r3, [r1, #12]
 800e392:	05db      	lsls	r3, r3, #23
 800e394:	4605      	mov	r5, r0
 800e396:	460c      	mov	r4, r1
 800e398:	4616      	mov	r6, r2
 800e39a:	d505      	bpl.n	800e3a8 <__swrite+0x1e>
 800e39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f000 f840 	bl	800e428 <_lseek_r>
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3b2:	81a3      	strh	r3, [r4, #12]
 800e3b4:	4632      	mov	r2, r6
 800e3b6:	463b      	mov	r3, r7
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3be:	f000 b857 	b.w	800e470 <_write_r>

0800e3c2 <__sseek>:
 800e3c2:	b510      	push	{r4, lr}
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ca:	f000 f82d 	bl	800e428 <_lseek_r>
 800e3ce:	1c43      	adds	r3, r0, #1
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	bf15      	itete	ne
 800e3d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3de:	81a3      	strheq	r3, [r4, #12]
 800e3e0:	bf18      	it	ne
 800e3e2:	81a3      	strhne	r3, [r4, #12]
 800e3e4:	bd10      	pop	{r4, pc}

0800e3e6 <__sclose>:
 800e3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ea:	f000 b80d 	b.w	800e408 <_close_r>

0800e3ee <memset>:
 800e3ee:	4402      	add	r2, r0
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d100      	bne.n	800e3f8 <memset+0xa>
 800e3f6:	4770      	bx	lr
 800e3f8:	f803 1b01 	strb.w	r1, [r3], #1
 800e3fc:	e7f9      	b.n	800e3f2 <memset+0x4>
	...

0800e400 <_localeconv_r>:
 800e400:	4800      	ldr	r0, [pc, #0]	; (800e404 <_localeconv_r+0x4>)
 800e402:	4770      	bx	lr
 800e404:	200079c4 	.word	0x200079c4

0800e408 <_close_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	4d06      	ldr	r5, [pc, #24]	; (800e424 <_close_r+0x1c>)
 800e40c:	2300      	movs	r3, #0
 800e40e:	4604      	mov	r4, r0
 800e410:	4608      	mov	r0, r1
 800e412:	602b      	str	r3, [r5, #0]
 800e414:	f7f8 ff9b 	bl	800734e <_close>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	d102      	bne.n	800e422 <_close_r+0x1a>
 800e41c:	682b      	ldr	r3, [r5, #0]
 800e41e:	b103      	cbz	r3, 800e422 <_close_r+0x1a>
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	bd38      	pop	{r3, r4, r5, pc}
 800e424:	2001b63c 	.word	0x2001b63c

0800e428 <_lseek_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d07      	ldr	r5, [pc, #28]	; (800e448 <_lseek_r+0x20>)
 800e42c:	4604      	mov	r4, r0
 800e42e:	4608      	mov	r0, r1
 800e430:	4611      	mov	r1, r2
 800e432:	2200      	movs	r2, #0
 800e434:	602a      	str	r2, [r5, #0]
 800e436:	461a      	mov	r2, r3
 800e438:	f7f8 ffb0 	bl	800739c <_lseek>
 800e43c:	1c43      	adds	r3, r0, #1
 800e43e:	d102      	bne.n	800e446 <_lseek_r+0x1e>
 800e440:	682b      	ldr	r3, [r5, #0]
 800e442:	b103      	cbz	r3, 800e446 <_lseek_r+0x1e>
 800e444:	6023      	str	r3, [r4, #0]
 800e446:	bd38      	pop	{r3, r4, r5, pc}
 800e448:	2001b63c 	.word	0x2001b63c

0800e44c <_read_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	4d07      	ldr	r5, [pc, #28]	; (800e46c <_read_r+0x20>)
 800e450:	4604      	mov	r4, r0
 800e452:	4608      	mov	r0, r1
 800e454:	4611      	mov	r1, r2
 800e456:	2200      	movs	r2, #0
 800e458:	602a      	str	r2, [r5, #0]
 800e45a:	461a      	mov	r2, r3
 800e45c:	f7f8 ff3e 	bl	80072dc <_read>
 800e460:	1c43      	adds	r3, r0, #1
 800e462:	d102      	bne.n	800e46a <_read_r+0x1e>
 800e464:	682b      	ldr	r3, [r5, #0]
 800e466:	b103      	cbz	r3, 800e46a <_read_r+0x1e>
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	bd38      	pop	{r3, r4, r5, pc}
 800e46c:	2001b63c 	.word	0x2001b63c

0800e470 <_write_r>:
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	4d07      	ldr	r5, [pc, #28]	; (800e490 <_write_r+0x20>)
 800e474:	4604      	mov	r4, r0
 800e476:	4608      	mov	r0, r1
 800e478:	4611      	mov	r1, r2
 800e47a:	2200      	movs	r2, #0
 800e47c:	602a      	str	r2, [r5, #0]
 800e47e:	461a      	mov	r2, r3
 800e480:	f7f8 ff49 	bl	8007316 <_write>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d102      	bne.n	800e48e <_write_r+0x1e>
 800e488:	682b      	ldr	r3, [r5, #0]
 800e48a:	b103      	cbz	r3, 800e48e <_write_r+0x1e>
 800e48c:	6023      	str	r3, [r4, #0]
 800e48e:	bd38      	pop	{r3, r4, r5, pc}
 800e490:	2001b63c 	.word	0x2001b63c

0800e494 <__errno>:
 800e494:	4b01      	ldr	r3, [pc, #4]	; (800e49c <__errno+0x8>)
 800e496:	6818      	ldr	r0, [r3, #0]
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	200078d0 	.word	0x200078d0

0800e4a0 <__libc_init_array>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	4d0d      	ldr	r5, [pc, #52]	; (800e4d8 <__libc_init_array+0x38>)
 800e4a4:	4c0d      	ldr	r4, [pc, #52]	; (800e4dc <__libc_init_array+0x3c>)
 800e4a6:	1b64      	subs	r4, r4, r5
 800e4a8:	10a4      	asrs	r4, r4, #2
 800e4aa:	2600      	movs	r6, #0
 800e4ac:	42a6      	cmp	r6, r4
 800e4ae:	d109      	bne.n	800e4c4 <__libc_init_array+0x24>
 800e4b0:	4d0b      	ldr	r5, [pc, #44]	; (800e4e0 <__libc_init_array+0x40>)
 800e4b2:	4c0c      	ldr	r4, [pc, #48]	; (800e4e4 <__libc_init_array+0x44>)
 800e4b4:	f003 f83e 	bl	8011534 <_init>
 800e4b8:	1b64      	subs	r4, r4, r5
 800e4ba:	10a4      	asrs	r4, r4, #2
 800e4bc:	2600      	movs	r6, #0
 800e4be:	42a6      	cmp	r6, r4
 800e4c0:	d105      	bne.n	800e4ce <__libc_init_array+0x2e>
 800e4c2:	bd70      	pop	{r4, r5, r6, pc}
 800e4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4c8:	4798      	blx	r3
 800e4ca:	3601      	adds	r6, #1
 800e4cc:	e7ee      	b.n	800e4ac <__libc_init_array+0xc>
 800e4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4d2:	4798      	blx	r3
 800e4d4:	3601      	adds	r6, #1
 800e4d6:	e7f2      	b.n	800e4be <__libc_init_array+0x1e>
 800e4d8:	08024958 	.word	0x08024958
 800e4dc:	08024958 	.word	0x08024958
 800e4e0:	08024958 	.word	0x08024958
 800e4e4:	0802495c 	.word	0x0802495c

0800e4e8 <__retarget_lock_init_recursive>:
 800e4e8:	4770      	bx	lr

0800e4ea <__retarget_lock_acquire_recursive>:
 800e4ea:	4770      	bx	lr

0800e4ec <__retarget_lock_release_recursive>:
 800e4ec:	4770      	bx	lr

0800e4ee <quorem>:
 800e4ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f2:	6903      	ldr	r3, [r0, #16]
 800e4f4:	690c      	ldr	r4, [r1, #16]
 800e4f6:	42a3      	cmp	r3, r4
 800e4f8:	4607      	mov	r7, r0
 800e4fa:	db7e      	blt.n	800e5fa <quorem+0x10c>
 800e4fc:	3c01      	subs	r4, #1
 800e4fe:	f101 0814 	add.w	r8, r1, #20
 800e502:	f100 0514 	add.w	r5, r0, #20
 800e506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e514:	3301      	adds	r3, #1
 800e516:	429a      	cmp	r2, r3
 800e518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e51c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e520:	fbb2 f6f3 	udiv	r6, r2, r3
 800e524:	d331      	bcc.n	800e58a <quorem+0x9c>
 800e526:	f04f 0e00 	mov.w	lr, #0
 800e52a:	4640      	mov	r0, r8
 800e52c:	46ac      	mov	ip, r5
 800e52e:	46f2      	mov	sl, lr
 800e530:	f850 2b04 	ldr.w	r2, [r0], #4
 800e534:	b293      	uxth	r3, r2
 800e536:	fb06 e303 	mla	r3, r6, r3, lr
 800e53a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e53e:	0c1a      	lsrs	r2, r3, #16
 800e540:	b29b      	uxth	r3, r3
 800e542:	ebaa 0303 	sub.w	r3, sl, r3
 800e546:	f8dc a000 	ldr.w	sl, [ip]
 800e54a:	fa13 f38a 	uxtah	r3, r3, sl
 800e54e:	fb06 220e 	mla	r2, r6, lr, r2
 800e552:	9300      	str	r3, [sp, #0]
 800e554:	9b00      	ldr	r3, [sp, #0]
 800e556:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e55a:	b292      	uxth	r2, r2
 800e55c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e564:	f8bd 3000 	ldrh.w	r3, [sp]
 800e568:	4581      	cmp	r9, r0
 800e56a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e56e:	f84c 3b04 	str.w	r3, [ip], #4
 800e572:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e576:	d2db      	bcs.n	800e530 <quorem+0x42>
 800e578:	f855 300b 	ldr.w	r3, [r5, fp]
 800e57c:	b92b      	cbnz	r3, 800e58a <quorem+0x9c>
 800e57e:	9b01      	ldr	r3, [sp, #4]
 800e580:	3b04      	subs	r3, #4
 800e582:	429d      	cmp	r5, r3
 800e584:	461a      	mov	r2, r3
 800e586:	d32c      	bcc.n	800e5e2 <quorem+0xf4>
 800e588:	613c      	str	r4, [r7, #16]
 800e58a:	4638      	mov	r0, r7
 800e58c:	f001 f9a6 	bl	800f8dc <__mcmp>
 800e590:	2800      	cmp	r0, #0
 800e592:	db22      	blt.n	800e5da <quorem+0xec>
 800e594:	3601      	adds	r6, #1
 800e596:	4629      	mov	r1, r5
 800e598:	2000      	movs	r0, #0
 800e59a:	f858 2b04 	ldr.w	r2, [r8], #4
 800e59e:	f8d1 c000 	ldr.w	ip, [r1]
 800e5a2:	b293      	uxth	r3, r2
 800e5a4:	1ac3      	subs	r3, r0, r3
 800e5a6:	0c12      	lsrs	r2, r2, #16
 800e5a8:	fa13 f38c 	uxtah	r3, r3, ip
 800e5ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e5b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5ba:	45c1      	cmp	r9, r8
 800e5bc:	f841 3b04 	str.w	r3, [r1], #4
 800e5c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e5c4:	d2e9      	bcs.n	800e59a <quorem+0xac>
 800e5c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5ce:	b922      	cbnz	r2, 800e5da <quorem+0xec>
 800e5d0:	3b04      	subs	r3, #4
 800e5d2:	429d      	cmp	r5, r3
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	d30a      	bcc.n	800e5ee <quorem+0x100>
 800e5d8:	613c      	str	r4, [r7, #16]
 800e5da:	4630      	mov	r0, r6
 800e5dc:	b003      	add	sp, #12
 800e5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e2:	6812      	ldr	r2, [r2, #0]
 800e5e4:	3b04      	subs	r3, #4
 800e5e6:	2a00      	cmp	r2, #0
 800e5e8:	d1ce      	bne.n	800e588 <quorem+0x9a>
 800e5ea:	3c01      	subs	r4, #1
 800e5ec:	e7c9      	b.n	800e582 <quorem+0x94>
 800e5ee:	6812      	ldr	r2, [r2, #0]
 800e5f0:	3b04      	subs	r3, #4
 800e5f2:	2a00      	cmp	r2, #0
 800e5f4:	d1f0      	bne.n	800e5d8 <quorem+0xea>
 800e5f6:	3c01      	subs	r4, #1
 800e5f8:	e7eb      	b.n	800e5d2 <quorem+0xe4>
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	e7ee      	b.n	800e5dc <quorem+0xee>
	...

0800e600 <_dtoa_r>:
 800e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e604:	ed2d 8b04 	vpush	{d8-d9}
 800e608:	69c5      	ldr	r5, [r0, #28]
 800e60a:	b093      	sub	sp, #76	; 0x4c
 800e60c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e610:	ec57 6b10 	vmov	r6, r7, d0
 800e614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e618:	9107      	str	r1, [sp, #28]
 800e61a:	4604      	mov	r4, r0
 800e61c:	920a      	str	r2, [sp, #40]	; 0x28
 800e61e:	930d      	str	r3, [sp, #52]	; 0x34
 800e620:	b975      	cbnz	r5, 800e640 <_dtoa_r+0x40>
 800e622:	2010      	movs	r0, #16
 800e624:	f000 fe2a 	bl	800f27c <malloc>
 800e628:	4602      	mov	r2, r0
 800e62a:	61e0      	str	r0, [r4, #28]
 800e62c:	b920      	cbnz	r0, 800e638 <_dtoa_r+0x38>
 800e62e:	4bae      	ldr	r3, [pc, #696]	; (800e8e8 <_dtoa_r+0x2e8>)
 800e630:	21ef      	movs	r1, #239	; 0xef
 800e632:	48ae      	ldr	r0, [pc, #696]	; (800e8ec <_dtoa_r+0x2ec>)
 800e634:	f001 fb1e 	bl	800fc74 <__assert_func>
 800e638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e63c:	6005      	str	r5, [r0, #0]
 800e63e:	60c5      	str	r5, [r0, #12]
 800e640:	69e3      	ldr	r3, [r4, #28]
 800e642:	6819      	ldr	r1, [r3, #0]
 800e644:	b151      	cbz	r1, 800e65c <_dtoa_r+0x5c>
 800e646:	685a      	ldr	r2, [r3, #4]
 800e648:	604a      	str	r2, [r1, #4]
 800e64a:	2301      	movs	r3, #1
 800e64c:	4093      	lsls	r3, r2
 800e64e:	608b      	str	r3, [r1, #8]
 800e650:	4620      	mov	r0, r4
 800e652:	f000 ff07 	bl	800f464 <_Bfree>
 800e656:	69e3      	ldr	r3, [r4, #28]
 800e658:	2200      	movs	r2, #0
 800e65a:	601a      	str	r2, [r3, #0]
 800e65c:	1e3b      	subs	r3, r7, #0
 800e65e:	bfbb      	ittet	lt
 800e660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e664:	9303      	strlt	r3, [sp, #12]
 800e666:	2300      	movge	r3, #0
 800e668:	2201      	movlt	r2, #1
 800e66a:	bfac      	ite	ge
 800e66c:	f8c8 3000 	strge.w	r3, [r8]
 800e670:	f8c8 2000 	strlt.w	r2, [r8]
 800e674:	4b9e      	ldr	r3, [pc, #632]	; (800e8f0 <_dtoa_r+0x2f0>)
 800e676:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e67a:	ea33 0308 	bics.w	r3, r3, r8
 800e67e:	d11b      	bne.n	800e6b8 <_dtoa_r+0xb8>
 800e680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e682:	f242 730f 	movw	r3, #9999	; 0x270f
 800e686:	6013      	str	r3, [r2, #0]
 800e688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e68c:	4333      	orrs	r3, r6
 800e68e:	f000 8593 	beq.w	800f1b8 <_dtoa_r+0xbb8>
 800e692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e694:	b963      	cbnz	r3, 800e6b0 <_dtoa_r+0xb0>
 800e696:	4b97      	ldr	r3, [pc, #604]	; (800e8f4 <_dtoa_r+0x2f4>)
 800e698:	e027      	b.n	800e6ea <_dtoa_r+0xea>
 800e69a:	4b97      	ldr	r3, [pc, #604]	; (800e8f8 <_dtoa_r+0x2f8>)
 800e69c:	9300      	str	r3, [sp, #0]
 800e69e:	3308      	adds	r3, #8
 800e6a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	9800      	ldr	r0, [sp, #0]
 800e6a6:	b013      	add	sp, #76	; 0x4c
 800e6a8:	ecbd 8b04 	vpop	{d8-d9}
 800e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b0:	4b90      	ldr	r3, [pc, #576]	; (800e8f4 <_dtoa_r+0x2f4>)
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	3303      	adds	r3, #3
 800e6b6:	e7f3      	b.n	800e6a0 <_dtoa_r+0xa0>
 800e6b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	ec51 0b17 	vmov	r0, r1, d7
 800e6c2:	eeb0 8a47 	vmov.f32	s16, s14
 800e6c6:	eef0 8a67 	vmov.f32	s17, s15
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	f7f2 fa24 	bl	8000b18 <__aeabi_dcmpeq>
 800e6d0:	4681      	mov	r9, r0
 800e6d2:	b160      	cbz	r0, 800e6ee <_dtoa_r+0xee>
 800e6d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	6013      	str	r3, [r2, #0]
 800e6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 8568 	beq.w	800f1b2 <_dtoa_r+0xbb2>
 800e6e2:	4b86      	ldr	r3, [pc, #536]	; (800e8fc <_dtoa_r+0x2fc>)
 800e6e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6e6:	6013      	str	r3, [r2, #0]
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	e7da      	b.n	800e6a4 <_dtoa_r+0xa4>
 800e6ee:	aa10      	add	r2, sp, #64	; 0x40
 800e6f0:	a911      	add	r1, sp, #68	; 0x44
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	eeb0 0a48 	vmov.f32	s0, s16
 800e6f8:	eef0 0a68 	vmov.f32	s1, s17
 800e6fc:	f001 f994 	bl	800fa28 <__d2b>
 800e700:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e704:	4682      	mov	sl, r0
 800e706:	2d00      	cmp	r5, #0
 800e708:	d07f      	beq.n	800e80a <_dtoa_r+0x20a>
 800e70a:	ee18 3a90 	vmov	r3, s17
 800e70e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e712:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e716:	ec51 0b18 	vmov	r0, r1, d8
 800e71a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e71e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e722:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e726:	4619      	mov	r1, r3
 800e728:	2200      	movs	r2, #0
 800e72a:	4b75      	ldr	r3, [pc, #468]	; (800e900 <_dtoa_r+0x300>)
 800e72c:	f7f1 fdd4 	bl	80002d8 <__aeabi_dsub>
 800e730:	a367      	add	r3, pc, #412	; (adr r3, 800e8d0 <_dtoa_r+0x2d0>)
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	f7f1 ff87 	bl	8000648 <__aeabi_dmul>
 800e73a:	a367      	add	r3, pc, #412	; (adr r3, 800e8d8 <_dtoa_r+0x2d8>)
 800e73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e740:	f7f1 fdcc 	bl	80002dc <__adddf3>
 800e744:	4606      	mov	r6, r0
 800e746:	4628      	mov	r0, r5
 800e748:	460f      	mov	r7, r1
 800e74a:	f7f1 ff13 	bl	8000574 <__aeabi_i2d>
 800e74e:	a364      	add	r3, pc, #400	; (adr r3, 800e8e0 <_dtoa_r+0x2e0>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	f7f1 ff78 	bl	8000648 <__aeabi_dmul>
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	4630      	mov	r0, r6
 800e75e:	4639      	mov	r1, r7
 800e760:	f7f1 fdbc 	bl	80002dc <__adddf3>
 800e764:	4606      	mov	r6, r0
 800e766:	460f      	mov	r7, r1
 800e768:	f7f2 fa1e 	bl	8000ba8 <__aeabi_d2iz>
 800e76c:	2200      	movs	r2, #0
 800e76e:	4683      	mov	fp, r0
 800e770:	2300      	movs	r3, #0
 800e772:	4630      	mov	r0, r6
 800e774:	4639      	mov	r1, r7
 800e776:	f7f2 f9d9 	bl	8000b2c <__aeabi_dcmplt>
 800e77a:	b148      	cbz	r0, 800e790 <_dtoa_r+0x190>
 800e77c:	4658      	mov	r0, fp
 800e77e:	f7f1 fef9 	bl	8000574 <__aeabi_i2d>
 800e782:	4632      	mov	r2, r6
 800e784:	463b      	mov	r3, r7
 800e786:	f7f2 f9c7 	bl	8000b18 <__aeabi_dcmpeq>
 800e78a:	b908      	cbnz	r0, 800e790 <_dtoa_r+0x190>
 800e78c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e790:	f1bb 0f16 	cmp.w	fp, #22
 800e794:	d857      	bhi.n	800e846 <_dtoa_r+0x246>
 800e796:	4b5b      	ldr	r3, [pc, #364]	; (800e904 <_dtoa_r+0x304>)
 800e798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	ec51 0b18 	vmov	r0, r1, d8
 800e7a4:	f7f2 f9c2 	bl	8000b2c <__aeabi_dcmplt>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d04e      	beq.n	800e84a <_dtoa_r+0x24a>
 800e7ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	930c      	str	r3, [sp, #48]	; 0x30
 800e7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7b6:	1b5b      	subs	r3, r3, r5
 800e7b8:	1e5a      	subs	r2, r3, #1
 800e7ba:	bf45      	ittet	mi
 800e7bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800e7c0:	9305      	strmi	r3, [sp, #20]
 800e7c2:	2300      	movpl	r3, #0
 800e7c4:	2300      	movmi	r3, #0
 800e7c6:	9206      	str	r2, [sp, #24]
 800e7c8:	bf54      	ite	pl
 800e7ca:	9305      	strpl	r3, [sp, #20]
 800e7cc:	9306      	strmi	r3, [sp, #24]
 800e7ce:	f1bb 0f00 	cmp.w	fp, #0
 800e7d2:	db3c      	blt.n	800e84e <_dtoa_r+0x24e>
 800e7d4:	9b06      	ldr	r3, [sp, #24]
 800e7d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e7da:	445b      	add	r3, fp
 800e7dc:	9306      	str	r3, [sp, #24]
 800e7de:	2300      	movs	r3, #0
 800e7e0:	9308      	str	r3, [sp, #32]
 800e7e2:	9b07      	ldr	r3, [sp, #28]
 800e7e4:	2b09      	cmp	r3, #9
 800e7e6:	d868      	bhi.n	800e8ba <_dtoa_r+0x2ba>
 800e7e8:	2b05      	cmp	r3, #5
 800e7ea:	bfc4      	itt	gt
 800e7ec:	3b04      	subgt	r3, #4
 800e7ee:	9307      	strgt	r3, [sp, #28]
 800e7f0:	9b07      	ldr	r3, [sp, #28]
 800e7f2:	f1a3 0302 	sub.w	r3, r3, #2
 800e7f6:	bfcc      	ite	gt
 800e7f8:	2500      	movgt	r5, #0
 800e7fa:	2501      	movle	r5, #1
 800e7fc:	2b03      	cmp	r3, #3
 800e7fe:	f200 8085 	bhi.w	800e90c <_dtoa_r+0x30c>
 800e802:	e8df f003 	tbb	[pc, r3]
 800e806:	3b2e      	.short	0x3b2e
 800e808:	5839      	.short	0x5839
 800e80a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e80e:	441d      	add	r5, r3
 800e810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e814:	2b20      	cmp	r3, #32
 800e816:	bfc1      	itttt	gt
 800e818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e81c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e820:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e824:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e828:	bfd6      	itet	le
 800e82a:	f1c3 0320 	rsble	r3, r3, #32
 800e82e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e832:	fa06 f003 	lslle.w	r0, r6, r3
 800e836:	f7f1 fe8d 	bl	8000554 <__aeabi_ui2d>
 800e83a:	2201      	movs	r2, #1
 800e83c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e840:	3d01      	subs	r5, #1
 800e842:	920e      	str	r2, [sp, #56]	; 0x38
 800e844:	e76f      	b.n	800e726 <_dtoa_r+0x126>
 800e846:	2301      	movs	r3, #1
 800e848:	e7b3      	b.n	800e7b2 <_dtoa_r+0x1b2>
 800e84a:	900c      	str	r0, [sp, #48]	; 0x30
 800e84c:	e7b2      	b.n	800e7b4 <_dtoa_r+0x1b4>
 800e84e:	9b05      	ldr	r3, [sp, #20]
 800e850:	eba3 030b 	sub.w	r3, r3, fp
 800e854:	9305      	str	r3, [sp, #20]
 800e856:	f1cb 0300 	rsb	r3, fp, #0
 800e85a:	9308      	str	r3, [sp, #32]
 800e85c:	2300      	movs	r3, #0
 800e85e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e860:	e7bf      	b.n	800e7e2 <_dtoa_r+0x1e2>
 800e862:	2300      	movs	r3, #0
 800e864:	9309      	str	r3, [sp, #36]	; 0x24
 800e866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e868:	2b00      	cmp	r3, #0
 800e86a:	dc52      	bgt.n	800e912 <_dtoa_r+0x312>
 800e86c:	2301      	movs	r3, #1
 800e86e:	9301      	str	r3, [sp, #4]
 800e870:	9304      	str	r3, [sp, #16]
 800e872:	461a      	mov	r2, r3
 800e874:	920a      	str	r2, [sp, #40]	; 0x28
 800e876:	e00b      	b.n	800e890 <_dtoa_r+0x290>
 800e878:	2301      	movs	r3, #1
 800e87a:	e7f3      	b.n	800e864 <_dtoa_r+0x264>
 800e87c:	2300      	movs	r3, #0
 800e87e:	9309      	str	r3, [sp, #36]	; 0x24
 800e880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e882:	445b      	add	r3, fp
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	3301      	adds	r3, #1
 800e888:	2b01      	cmp	r3, #1
 800e88a:	9304      	str	r3, [sp, #16]
 800e88c:	bfb8      	it	lt
 800e88e:	2301      	movlt	r3, #1
 800e890:	69e0      	ldr	r0, [r4, #28]
 800e892:	2100      	movs	r1, #0
 800e894:	2204      	movs	r2, #4
 800e896:	f102 0614 	add.w	r6, r2, #20
 800e89a:	429e      	cmp	r6, r3
 800e89c:	d93d      	bls.n	800e91a <_dtoa_r+0x31a>
 800e89e:	6041      	str	r1, [r0, #4]
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f000 fd9f 	bl	800f3e4 <_Balloc>
 800e8a6:	9000      	str	r0, [sp, #0]
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d139      	bne.n	800e920 <_dtoa_r+0x320>
 800e8ac:	4b16      	ldr	r3, [pc, #88]	; (800e908 <_dtoa_r+0x308>)
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	f240 11af 	movw	r1, #431	; 0x1af
 800e8b4:	e6bd      	b.n	800e632 <_dtoa_r+0x32>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e7e1      	b.n	800e87e <_dtoa_r+0x27e>
 800e8ba:	2501      	movs	r5, #1
 800e8bc:	2300      	movs	r3, #0
 800e8be:	9307      	str	r3, [sp, #28]
 800e8c0:	9509      	str	r5, [sp, #36]	; 0x24
 800e8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c6:	9301      	str	r3, [sp, #4]
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	2312      	movs	r3, #18
 800e8ce:	e7d1      	b.n	800e874 <_dtoa_r+0x274>
 800e8d0:	636f4361 	.word	0x636f4361
 800e8d4:	3fd287a7 	.word	0x3fd287a7
 800e8d8:	8b60c8b3 	.word	0x8b60c8b3
 800e8dc:	3fc68a28 	.word	0x3fc68a28
 800e8e0:	509f79fb 	.word	0x509f79fb
 800e8e4:	3fd34413 	.word	0x3fd34413
 800e8e8:	080245b9 	.word	0x080245b9
 800e8ec:	080245d0 	.word	0x080245d0
 800e8f0:	7ff00000 	.word	0x7ff00000
 800e8f4:	080245b5 	.word	0x080245b5
 800e8f8:	080245ac 	.word	0x080245ac
 800e8fc:	08024589 	.word	0x08024589
 800e900:	3ff80000 	.word	0x3ff80000
 800e904:	080246c0 	.word	0x080246c0
 800e908:	08024628 	.word	0x08024628
 800e90c:	2301      	movs	r3, #1
 800e90e:	9309      	str	r3, [sp, #36]	; 0x24
 800e910:	e7d7      	b.n	800e8c2 <_dtoa_r+0x2c2>
 800e912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e914:	9301      	str	r3, [sp, #4]
 800e916:	9304      	str	r3, [sp, #16]
 800e918:	e7ba      	b.n	800e890 <_dtoa_r+0x290>
 800e91a:	3101      	adds	r1, #1
 800e91c:	0052      	lsls	r2, r2, #1
 800e91e:	e7ba      	b.n	800e896 <_dtoa_r+0x296>
 800e920:	69e3      	ldr	r3, [r4, #28]
 800e922:	9a00      	ldr	r2, [sp, #0]
 800e924:	601a      	str	r2, [r3, #0]
 800e926:	9b04      	ldr	r3, [sp, #16]
 800e928:	2b0e      	cmp	r3, #14
 800e92a:	f200 80a8 	bhi.w	800ea7e <_dtoa_r+0x47e>
 800e92e:	2d00      	cmp	r5, #0
 800e930:	f000 80a5 	beq.w	800ea7e <_dtoa_r+0x47e>
 800e934:	f1bb 0f00 	cmp.w	fp, #0
 800e938:	dd38      	ble.n	800e9ac <_dtoa_r+0x3ac>
 800e93a:	4bc0      	ldr	r3, [pc, #768]	; (800ec3c <_dtoa_r+0x63c>)
 800e93c:	f00b 020f 	and.w	r2, fp, #15
 800e940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e944:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e948:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e94c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e950:	d019      	beq.n	800e986 <_dtoa_r+0x386>
 800e952:	4bbb      	ldr	r3, [pc, #748]	; (800ec40 <_dtoa_r+0x640>)
 800e954:	ec51 0b18 	vmov	r0, r1, d8
 800e958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e95c:	f7f1 ff9e 	bl	800089c <__aeabi_ddiv>
 800e960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e964:	f008 080f 	and.w	r8, r8, #15
 800e968:	2503      	movs	r5, #3
 800e96a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ec40 <_dtoa_r+0x640>
 800e96e:	f1b8 0f00 	cmp.w	r8, #0
 800e972:	d10a      	bne.n	800e98a <_dtoa_r+0x38a>
 800e974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e978:	4632      	mov	r2, r6
 800e97a:	463b      	mov	r3, r7
 800e97c:	f7f1 ff8e 	bl	800089c <__aeabi_ddiv>
 800e980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e984:	e02b      	b.n	800e9de <_dtoa_r+0x3de>
 800e986:	2502      	movs	r5, #2
 800e988:	e7ef      	b.n	800e96a <_dtoa_r+0x36a>
 800e98a:	f018 0f01 	tst.w	r8, #1
 800e98e:	d008      	beq.n	800e9a2 <_dtoa_r+0x3a2>
 800e990:	4630      	mov	r0, r6
 800e992:	4639      	mov	r1, r7
 800e994:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e998:	f7f1 fe56 	bl	8000648 <__aeabi_dmul>
 800e99c:	3501      	adds	r5, #1
 800e99e:	4606      	mov	r6, r0
 800e9a0:	460f      	mov	r7, r1
 800e9a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9a6:	f109 0908 	add.w	r9, r9, #8
 800e9aa:	e7e0      	b.n	800e96e <_dtoa_r+0x36e>
 800e9ac:	f000 809f 	beq.w	800eaee <_dtoa_r+0x4ee>
 800e9b0:	f1cb 0600 	rsb	r6, fp, #0
 800e9b4:	4ba1      	ldr	r3, [pc, #644]	; (800ec3c <_dtoa_r+0x63c>)
 800e9b6:	4fa2      	ldr	r7, [pc, #648]	; (800ec40 <_dtoa_r+0x640>)
 800e9b8:	f006 020f 	and.w	r2, r6, #15
 800e9bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c4:	ec51 0b18 	vmov	r0, r1, d8
 800e9c8:	f7f1 fe3e 	bl	8000648 <__aeabi_dmul>
 800e9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9d0:	1136      	asrs	r6, r6, #4
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	2502      	movs	r5, #2
 800e9d6:	2e00      	cmp	r6, #0
 800e9d8:	d17e      	bne.n	800ead8 <_dtoa_r+0x4d8>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1d0      	bne.n	800e980 <_dtoa_r+0x380>
 800e9de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 8084 	beq.w	800eaf2 <_dtoa_r+0x4f2>
 800e9ea:	4b96      	ldr	r3, [pc, #600]	; (800ec44 <_dtoa_r+0x644>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	4649      	mov	r1, r9
 800e9f2:	f7f2 f89b 	bl	8000b2c <__aeabi_dcmplt>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d07b      	beq.n	800eaf2 <_dtoa_r+0x4f2>
 800e9fa:	9b04      	ldr	r3, [sp, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d078      	beq.n	800eaf2 <_dtoa_r+0x4f2>
 800ea00:	9b01      	ldr	r3, [sp, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	dd39      	ble.n	800ea7a <_dtoa_r+0x47a>
 800ea06:	4b90      	ldr	r3, [pc, #576]	; (800ec48 <_dtoa_r+0x648>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4640      	mov	r0, r8
 800ea0c:	4649      	mov	r1, r9
 800ea0e:	f7f1 fe1b 	bl	8000648 <__aeabi_dmul>
 800ea12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea16:	9e01      	ldr	r6, [sp, #4]
 800ea18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ea1c:	3501      	adds	r5, #1
 800ea1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea22:	4628      	mov	r0, r5
 800ea24:	f7f1 fda6 	bl	8000574 <__aeabi_i2d>
 800ea28:	4642      	mov	r2, r8
 800ea2a:	464b      	mov	r3, r9
 800ea2c:	f7f1 fe0c 	bl	8000648 <__aeabi_dmul>
 800ea30:	4b86      	ldr	r3, [pc, #536]	; (800ec4c <_dtoa_r+0x64c>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	f7f1 fc52 	bl	80002dc <__adddf3>
 800ea38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ea3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea40:	9303      	str	r3, [sp, #12]
 800ea42:	2e00      	cmp	r6, #0
 800ea44:	d158      	bne.n	800eaf8 <_dtoa_r+0x4f8>
 800ea46:	4b82      	ldr	r3, [pc, #520]	; (800ec50 <_dtoa_r+0x650>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	4640      	mov	r0, r8
 800ea4c:	4649      	mov	r1, r9
 800ea4e:	f7f1 fc43 	bl	80002d8 <__aeabi_dsub>
 800ea52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea56:	4680      	mov	r8, r0
 800ea58:	4689      	mov	r9, r1
 800ea5a:	f7f2 f885 	bl	8000b68 <__aeabi_dcmpgt>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	f040 8296 	bne.w	800ef90 <_dtoa_r+0x990>
 800ea64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ea68:	4640      	mov	r0, r8
 800ea6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea6e:	4649      	mov	r1, r9
 800ea70:	f7f2 f85c 	bl	8000b2c <__aeabi_dcmplt>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f040 8289 	bne.w	800ef8c <_dtoa_r+0x98c>
 800ea7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ea7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f2c0 814e 	blt.w	800ed22 <_dtoa_r+0x722>
 800ea86:	f1bb 0f0e 	cmp.w	fp, #14
 800ea8a:	f300 814a 	bgt.w	800ed22 <_dtoa_r+0x722>
 800ea8e:	4b6b      	ldr	r3, [pc, #428]	; (800ec3c <_dtoa_r+0x63c>)
 800ea90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f280 80dc 	bge.w	800ec58 <_dtoa_r+0x658>
 800eaa0:	9b04      	ldr	r3, [sp, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f300 80d8 	bgt.w	800ec58 <_dtoa_r+0x658>
 800eaa8:	f040 826f 	bne.w	800ef8a <_dtoa_r+0x98a>
 800eaac:	4b68      	ldr	r3, [pc, #416]	; (800ec50 <_dtoa_r+0x650>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	4640      	mov	r0, r8
 800eab2:	4649      	mov	r1, r9
 800eab4:	f7f1 fdc8 	bl	8000648 <__aeabi_dmul>
 800eab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eabc:	f7f2 f84a 	bl	8000b54 <__aeabi_dcmpge>
 800eac0:	9e04      	ldr	r6, [sp, #16]
 800eac2:	4637      	mov	r7, r6
 800eac4:	2800      	cmp	r0, #0
 800eac6:	f040 8245 	bne.w	800ef54 <_dtoa_r+0x954>
 800eaca:	9d00      	ldr	r5, [sp, #0]
 800eacc:	2331      	movs	r3, #49	; 0x31
 800eace:	f805 3b01 	strb.w	r3, [r5], #1
 800ead2:	f10b 0b01 	add.w	fp, fp, #1
 800ead6:	e241      	b.n	800ef5c <_dtoa_r+0x95c>
 800ead8:	07f2      	lsls	r2, r6, #31
 800eada:	d505      	bpl.n	800eae8 <_dtoa_r+0x4e8>
 800eadc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eae0:	f7f1 fdb2 	bl	8000648 <__aeabi_dmul>
 800eae4:	3501      	adds	r5, #1
 800eae6:	2301      	movs	r3, #1
 800eae8:	1076      	asrs	r6, r6, #1
 800eaea:	3708      	adds	r7, #8
 800eaec:	e773      	b.n	800e9d6 <_dtoa_r+0x3d6>
 800eaee:	2502      	movs	r5, #2
 800eaf0:	e775      	b.n	800e9de <_dtoa_r+0x3de>
 800eaf2:	9e04      	ldr	r6, [sp, #16]
 800eaf4:	465f      	mov	r7, fp
 800eaf6:	e792      	b.n	800ea1e <_dtoa_r+0x41e>
 800eaf8:	9900      	ldr	r1, [sp, #0]
 800eafa:	4b50      	ldr	r3, [pc, #320]	; (800ec3c <_dtoa_r+0x63c>)
 800eafc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb00:	4431      	add	r1, r6
 800eb02:	9102      	str	r1, [sp, #8]
 800eb04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb06:	eeb0 9a47 	vmov.f32	s18, s14
 800eb0a:	eef0 9a67 	vmov.f32	s19, s15
 800eb0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eb12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb16:	2900      	cmp	r1, #0
 800eb18:	d044      	beq.n	800eba4 <_dtoa_r+0x5a4>
 800eb1a:	494e      	ldr	r1, [pc, #312]	; (800ec54 <_dtoa_r+0x654>)
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	f7f1 febd 	bl	800089c <__aeabi_ddiv>
 800eb22:	ec53 2b19 	vmov	r2, r3, d9
 800eb26:	f7f1 fbd7 	bl	80002d8 <__aeabi_dsub>
 800eb2a:	9d00      	ldr	r5, [sp, #0]
 800eb2c:	ec41 0b19 	vmov	d9, r0, r1
 800eb30:	4649      	mov	r1, r9
 800eb32:	4640      	mov	r0, r8
 800eb34:	f7f2 f838 	bl	8000ba8 <__aeabi_d2iz>
 800eb38:	4606      	mov	r6, r0
 800eb3a:	f7f1 fd1b 	bl	8000574 <__aeabi_i2d>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	460b      	mov	r3, r1
 800eb42:	4640      	mov	r0, r8
 800eb44:	4649      	mov	r1, r9
 800eb46:	f7f1 fbc7 	bl	80002d8 <__aeabi_dsub>
 800eb4a:	3630      	adds	r6, #48	; 0x30
 800eb4c:	f805 6b01 	strb.w	r6, [r5], #1
 800eb50:	ec53 2b19 	vmov	r2, r3, d9
 800eb54:	4680      	mov	r8, r0
 800eb56:	4689      	mov	r9, r1
 800eb58:	f7f1 ffe8 	bl	8000b2c <__aeabi_dcmplt>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d164      	bne.n	800ec2a <_dtoa_r+0x62a>
 800eb60:	4642      	mov	r2, r8
 800eb62:	464b      	mov	r3, r9
 800eb64:	4937      	ldr	r1, [pc, #220]	; (800ec44 <_dtoa_r+0x644>)
 800eb66:	2000      	movs	r0, #0
 800eb68:	f7f1 fbb6 	bl	80002d8 <__aeabi_dsub>
 800eb6c:	ec53 2b19 	vmov	r2, r3, d9
 800eb70:	f7f1 ffdc 	bl	8000b2c <__aeabi_dcmplt>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	f040 80b6 	bne.w	800ece6 <_dtoa_r+0x6e6>
 800eb7a:	9b02      	ldr	r3, [sp, #8]
 800eb7c:	429d      	cmp	r5, r3
 800eb7e:	f43f af7c 	beq.w	800ea7a <_dtoa_r+0x47a>
 800eb82:	4b31      	ldr	r3, [pc, #196]	; (800ec48 <_dtoa_r+0x648>)
 800eb84:	ec51 0b19 	vmov	r0, r1, d9
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f7f1 fd5d 	bl	8000648 <__aeabi_dmul>
 800eb8e:	4b2e      	ldr	r3, [pc, #184]	; (800ec48 <_dtoa_r+0x648>)
 800eb90:	ec41 0b19 	vmov	d9, r0, r1
 800eb94:	2200      	movs	r2, #0
 800eb96:	4640      	mov	r0, r8
 800eb98:	4649      	mov	r1, r9
 800eb9a:	f7f1 fd55 	bl	8000648 <__aeabi_dmul>
 800eb9e:	4680      	mov	r8, r0
 800eba0:	4689      	mov	r9, r1
 800eba2:	e7c5      	b.n	800eb30 <_dtoa_r+0x530>
 800eba4:	ec51 0b17 	vmov	r0, r1, d7
 800eba8:	f7f1 fd4e 	bl	8000648 <__aeabi_dmul>
 800ebac:	9b02      	ldr	r3, [sp, #8]
 800ebae:	9d00      	ldr	r5, [sp, #0]
 800ebb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebb2:	ec41 0b19 	vmov	d9, r0, r1
 800ebb6:	4649      	mov	r1, r9
 800ebb8:	4640      	mov	r0, r8
 800ebba:	f7f1 fff5 	bl	8000ba8 <__aeabi_d2iz>
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	f7f1 fcd8 	bl	8000574 <__aeabi_i2d>
 800ebc4:	3630      	adds	r6, #48	; 0x30
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4640      	mov	r0, r8
 800ebcc:	4649      	mov	r1, r9
 800ebce:	f7f1 fb83 	bl	80002d8 <__aeabi_dsub>
 800ebd2:	f805 6b01 	strb.w	r6, [r5], #1
 800ebd6:	9b02      	ldr	r3, [sp, #8]
 800ebd8:	429d      	cmp	r5, r3
 800ebda:	4680      	mov	r8, r0
 800ebdc:	4689      	mov	r9, r1
 800ebde:	f04f 0200 	mov.w	r2, #0
 800ebe2:	d124      	bne.n	800ec2e <_dtoa_r+0x62e>
 800ebe4:	4b1b      	ldr	r3, [pc, #108]	; (800ec54 <_dtoa_r+0x654>)
 800ebe6:	ec51 0b19 	vmov	r0, r1, d9
 800ebea:	f7f1 fb77 	bl	80002dc <__adddf3>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	4640      	mov	r0, r8
 800ebf4:	4649      	mov	r1, r9
 800ebf6:	f7f1 ffb7 	bl	8000b68 <__aeabi_dcmpgt>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d173      	bne.n	800ece6 <_dtoa_r+0x6e6>
 800ebfe:	ec53 2b19 	vmov	r2, r3, d9
 800ec02:	4914      	ldr	r1, [pc, #80]	; (800ec54 <_dtoa_r+0x654>)
 800ec04:	2000      	movs	r0, #0
 800ec06:	f7f1 fb67 	bl	80002d8 <__aeabi_dsub>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4640      	mov	r0, r8
 800ec10:	4649      	mov	r1, r9
 800ec12:	f7f1 ff8b 	bl	8000b2c <__aeabi_dcmplt>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	f43f af2f 	beq.w	800ea7a <_dtoa_r+0x47a>
 800ec1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ec1e:	1e6b      	subs	r3, r5, #1
 800ec20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ec26:	2b30      	cmp	r3, #48	; 0x30
 800ec28:	d0f8      	beq.n	800ec1c <_dtoa_r+0x61c>
 800ec2a:	46bb      	mov	fp, r7
 800ec2c:	e04a      	b.n	800ecc4 <_dtoa_r+0x6c4>
 800ec2e:	4b06      	ldr	r3, [pc, #24]	; (800ec48 <_dtoa_r+0x648>)
 800ec30:	f7f1 fd0a 	bl	8000648 <__aeabi_dmul>
 800ec34:	4680      	mov	r8, r0
 800ec36:	4689      	mov	r9, r1
 800ec38:	e7bd      	b.n	800ebb6 <_dtoa_r+0x5b6>
 800ec3a:	bf00      	nop
 800ec3c:	080246c0 	.word	0x080246c0
 800ec40:	08024698 	.word	0x08024698
 800ec44:	3ff00000 	.word	0x3ff00000
 800ec48:	40240000 	.word	0x40240000
 800ec4c:	401c0000 	.word	0x401c0000
 800ec50:	40140000 	.word	0x40140000
 800ec54:	3fe00000 	.word	0x3fe00000
 800ec58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec5c:	9d00      	ldr	r5, [sp, #0]
 800ec5e:	4642      	mov	r2, r8
 800ec60:	464b      	mov	r3, r9
 800ec62:	4630      	mov	r0, r6
 800ec64:	4639      	mov	r1, r7
 800ec66:	f7f1 fe19 	bl	800089c <__aeabi_ddiv>
 800ec6a:	f7f1 ff9d 	bl	8000ba8 <__aeabi_d2iz>
 800ec6e:	9001      	str	r0, [sp, #4]
 800ec70:	f7f1 fc80 	bl	8000574 <__aeabi_i2d>
 800ec74:	4642      	mov	r2, r8
 800ec76:	464b      	mov	r3, r9
 800ec78:	f7f1 fce6 	bl	8000648 <__aeabi_dmul>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	460b      	mov	r3, r1
 800ec80:	4630      	mov	r0, r6
 800ec82:	4639      	mov	r1, r7
 800ec84:	f7f1 fb28 	bl	80002d8 <__aeabi_dsub>
 800ec88:	9e01      	ldr	r6, [sp, #4]
 800ec8a:	9f04      	ldr	r7, [sp, #16]
 800ec8c:	3630      	adds	r6, #48	; 0x30
 800ec8e:	f805 6b01 	strb.w	r6, [r5], #1
 800ec92:	9e00      	ldr	r6, [sp, #0]
 800ec94:	1bae      	subs	r6, r5, r6
 800ec96:	42b7      	cmp	r7, r6
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	d134      	bne.n	800ed08 <_dtoa_r+0x708>
 800ec9e:	f7f1 fb1d 	bl	80002dc <__adddf3>
 800eca2:	4642      	mov	r2, r8
 800eca4:	464b      	mov	r3, r9
 800eca6:	4606      	mov	r6, r0
 800eca8:	460f      	mov	r7, r1
 800ecaa:	f7f1 ff5d 	bl	8000b68 <__aeabi_dcmpgt>
 800ecae:	b9c8      	cbnz	r0, 800ece4 <_dtoa_r+0x6e4>
 800ecb0:	4642      	mov	r2, r8
 800ecb2:	464b      	mov	r3, r9
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	f7f1 ff2e 	bl	8000b18 <__aeabi_dcmpeq>
 800ecbc:	b110      	cbz	r0, 800ecc4 <_dtoa_r+0x6c4>
 800ecbe:	9b01      	ldr	r3, [sp, #4]
 800ecc0:	07db      	lsls	r3, r3, #31
 800ecc2:	d40f      	bmi.n	800ece4 <_dtoa_r+0x6e4>
 800ecc4:	4651      	mov	r1, sl
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 fbcc 	bl	800f464 <_Bfree>
 800eccc:	2300      	movs	r3, #0
 800ecce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ecd0:	702b      	strb	r3, [r5, #0]
 800ecd2:	f10b 0301 	add.w	r3, fp, #1
 800ecd6:	6013      	str	r3, [r2, #0]
 800ecd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f43f ace2 	beq.w	800e6a4 <_dtoa_r+0xa4>
 800ece0:	601d      	str	r5, [r3, #0]
 800ece2:	e4df      	b.n	800e6a4 <_dtoa_r+0xa4>
 800ece4:	465f      	mov	r7, fp
 800ece6:	462b      	mov	r3, r5
 800ece8:	461d      	mov	r5, r3
 800ecea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecee:	2a39      	cmp	r2, #57	; 0x39
 800ecf0:	d106      	bne.n	800ed00 <_dtoa_r+0x700>
 800ecf2:	9a00      	ldr	r2, [sp, #0]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d1f7      	bne.n	800ece8 <_dtoa_r+0x6e8>
 800ecf8:	9900      	ldr	r1, [sp, #0]
 800ecfa:	2230      	movs	r2, #48	; 0x30
 800ecfc:	3701      	adds	r7, #1
 800ecfe:	700a      	strb	r2, [r1, #0]
 800ed00:	781a      	ldrb	r2, [r3, #0]
 800ed02:	3201      	adds	r2, #1
 800ed04:	701a      	strb	r2, [r3, #0]
 800ed06:	e790      	b.n	800ec2a <_dtoa_r+0x62a>
 800ed08:	4ba3      	ldr	r3, [pc, #652]	; (800ef98 <_dtoa_r+0x998>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f7f1 fc9c 	bl	8000648 <__aeabi_dmul>
 800ed10:	2200      	movs	r2, #0
 800ed12:	2300      	movs	r3, #0
 800ed14:	4606      	mov	r6, r0
 800ed16:	460f      	mov	r7, r1
 800ed18:	f7f1 fefe 	bl	8000b18 <__aeabi_dcmpeq>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d09e      	beq.n	800ec5e <_dtoa_r+0x65e>
 800ed20:	e7d0      	b.n	800ecc4 <_dtoa_r+0x6c4>
 800ed22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed24:	2a00      	cmp	r2, #0
 800ed26:	f000 80ca 	beq.w	800eebe <_dtoa_r+0x8be>
 800ed2a:	9a07      	ldr	r2, [sp, #28]
 800ed2c:	2a01      	cmp	r2, #1
 800ed2e:	f300 80ad 	bgt.w	800ee8c <_dtoa_r+0x88c>
 800ed32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	f000 80a5 	beq.w	800ee84 <_dtoa_r+0x884>
 800ed3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ed3e:	9e08      	ldr	r6, [sp, #32]
 800ed40:	9d05      	ldr	r5, [sp, #20]
 800ed42:	9a05      	ldr	r2, [sp, #20]
 800ed44:	441a      	add	r2, r3
 800ed46:	9205      	str	r2, [sp, #20]
 800ed48:	9a06      	ldr	r2, [sp, #24]
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	441a      	add	r2, r3
 800ed4e:	4620      	mov	r0, r4
 800ed50:	9206      	str	r2, [sp, #24]
 800ed52:	f000 fc3d 	bl	800f5d0 <__i2b>
 800ed56:	4607      	mov	r7, r0
 800ed58:	b165      	cbz	r5, 800ed74 <_dtoa_r+0x774>
 800ed5a:	9b06      	ldr	r3, [sp, #24]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	dd09      	ble.n	800ed74 <_dtoa_r+0x774>
 800ed60:	42ab      	cmp	r3, r5
 800ed62:	9a05      	ldr	r2, [sp, #20]
 800ed64:	bfa8      	it	ge
 800ed66:	462b      	movge	r3, r5
 800ed68:	1ad2      	subs	r2, r2, r3
 800ed6a:	9205      	str	r2, [sp, #20]
 800ed6c:	9a06      	ldr	r2, [sp, #24]
 800ed6e:	1aed      	subs	r5, r5, r3
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	9306      	str	r3, [sp, #24]
 800ed74:	9b08      	ldr	r3, [sp, #32]
 800ed76:	b1f3      	cbz	r3, 800edb6 <_dtoa_r+0x7b6>
 800ed78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 80a3 	beq.w	800eec6 <_dtoa_r+0x8c6>
 800ed80:	2e00      	cmp	r6, #0
 800ed82:	dd10      	ble.n	800eda6 <_dtoa_r+0x7a6>
 800ed84:	4639      	mov	r1, r7
 800ed86:	4632      	mov	r2, r6
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f000 fce1 	bl	800f750 <__pow5mult>
 800ed8e:	4652      	mov	r2, sl
 800ed90:	4601      	mov	r1, r0
 800ed92:	4607      	mov	r7, r0
 800ed94:	4620      	mov	r0, r4
 800ed96:	f000 fc31 	bl	800f5fc <__multiply>
 800ed9a:	4651      	mov	r1, sl
 800ed9c:	4680      	mov	r8, r0
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 fb60 	bl	800f464 <_Bfree>
 800eda4:	46c2      	mov	sl, r8
 800eda6:	9b08      	ldr	r3, [sp, #32]
 800eda8:	1b9a      	subs	r2, r3, r6
 800edaa:	d004      	beq.n	800edb6 <_dtoa_r+0x7b6>
 800edac:	4651      	mov	r1, sl
 800edae:	4620      	mov	r0, r4
 800edb0:	f000 fcce 	bl	800f750 <__pow5mult>
 800edb4:	4682      	mov	sl, r0
 800edb6:	2101      	movs	r1, #1
 800edb8:	4620      	mov	r0, r4
 800edba:	f000 fc09 	bl	800f5d0 <__i2b>
 800edbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	4606      	mov	r6, r0
 800edc4:	f340 8081 	ble.w	800eeca <_dtoa_r+0x8ca>
 800edc8:	461a      	mov	r2, r3
 800edca:	4601      	mov	r1, r0
 800edcc:	4620      	mov	r0, r4
 800edce:	f000 fcbf 	bl	800f750 <__pow5mult>
 800edd2:	9b07      	ldr	r3, [sp, #28]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	4606      	mov	r6, r0
 800edd8:	dd7a      	ble.n	800eed0 <_dtoa_r+0x8d0>
 800edda:	f04f 0800 	mov.w	r8, #0
 800edde:	6933      	ldr	r3, [r6, #16]
 800ede0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ede4:	6918      	ldr	r0, [r3, #16]
 800ede6:	f000 fba5 	bl	800f534 <__hi0bits>
 800edea:	f1c0 0020 	rsb	r0, r0, #32
 800edee:	9b06      	ldr	r3, [sp, #24]
 800edf0:	4418      	add	r0, r3
 800edf2:	f010 001f 	ands.w	r0, r0, #31
 800edf6:	f000 8094 	beq.w	800ef22 <_dtoa_r+0x922>
 800edfa:	f1c0 0320 	rsb	r3, r0, #32
 800edfe:	2b04      	cmp	r3, #4
 800ee00:	f340 8085 	ble.w	800ef0e <_dtoa_r+0x90e>
 800ee04:	9b05      	ldr	r3, [sp, #20]
 800ee06:	f1c0 001c 	rsb	r0, r0, #28
 800ee0a:	4403      	add	r3, r0
 800ee0c:	9305      	str	r3, [sp, #20]
 800ee0e:	9b06      	ldr	r3, [sp, #24]
 800ee10:	4403      	add	r3, r0
 800ee12:	4405      	add	r5, r0
 800ee14:	9306      	str	r3, [sp, #24]
 800ee16:	9b05      	ldr	r3, [sp, #20]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	dd05      	ble.n	800ee28 <_dtoa_r+0x828>
 800ee1c:	4651      	mov	r1, sl
 800ee1e:	461a      	mov	r2, r3
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 fcef 	bl	800f804 <__lshift>
 800ee26:	4682      	mov	sl, r0
 800ee28:	9b06      	ldr	r3, [sp, #24]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dd05      	ble.n	800ee3a <_dtoa_r+0x83a>
 800ee2e:	4631      	mov	r1, r6
 800ee30:	461a      	mov	r2, r3
 800ee32:	4620      	mov	r0, r4
 800ee34:	f000 fce6 	bl	800f804 <__lshift>
 800ee38:	4606      	mov	r6, r0
 800ee3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d072      	beq.n	800ef26 <_dtoa_r+0x926>
 800ee40:	4631      	mov	r1, r6
 800ee42:	4650      	mov	r0, sl
 800ee44:	f000 fd4a 	bl	800f8dc <__mcmp>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	da6c      	bge.n	800ef26 <_dtoa_r+0x926>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4651      	mov	r1, sl
 800ee50:	220a      	movs	r2, #10
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 fb28 	bl	800f4a8 <__multadd>
 800ee58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee5e:	4682      	mov	sl, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	f000 81b0 	beq.w	800f1c6 <_dtoa_r+0xbc6>
 800ee66:	2300      	movs	r3, #0
 800ee68:	4639      	mov	r1, r7
 800ee6a:	220a      	movs	r2, #10
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f000 fb1b 	bl	800f4a8 <__multadd>
 800ee72:	9b01      	ldr	r3, [sp, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	4607      	mov	r7, r0
 800ee78:	f300 8096 	bgt.w	800efa8 <_dtoa_r+0x9a8>
 800ee7c:	9b07      	ldr	r3, [sp, #28]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	dc59      	bgt.n	800ef36 <_dtoa_r+0x936>
 800ee82:	e091      	b.n	800efa8 <_dtoa_r+0x9a8>
 800ee84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee8a:	e758      	b.n	800ed3e <_dtoa_r+0x73e>
 800ee8c:	9b04      	ldr	r3, [sp, #16]
 800ee8e:	1e5e      	subs	r6, r3, #1
 800ee90:	9b08      	ldr	r3, [sp, #32]
 800ee92:	42b3      	cmp	r3, r6
 800ee94:	bfbf      	itttt	lt
 800ee96:	9b08      	ldrlt	r3, [sp, #32]
 800ee98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ee9a:	9608      	strlt	r6, [sp, #32]
 800ee9c:	1af3      	sublt	r3, r6, r3
 800ee9e:	bfb4      	ite	lt
 800eea0:	18d2      	addlt	r2, r2, r3
 800eea2:	1b9e      	subge	r6, r3, r6
 800eea4:	9b04      	ldr	r3, [sp, #16]
 800eea6:	bfbc      	itt	lt
 800eea8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eeaa:	2600      	movlt	r6, #0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	bfb7      	itett	lt
 800eeb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eeb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eeb8:	1a9d      	sublt	r5, r3, r2
 800eeba:	2300      	movlt	r3, #0
 800eebc:	e741      	b.n	800ed42 <_dtoa_r+0x742>
 800eebe:	9e08      	ldr	r6, [sp, #32]
 800eec0:	9d05      	ldr	r5, [sp, #20]
 800eec2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eec4:	e748      	b.n	800ed58 <_dtoa_r+0x758>
 800eec6:	9a08      	ldr	r2, [sp, #32]
 800eec8:	e770      	b.n	800edac <_dtoa_r+0x7ac>
 800eeca:	9b07      	ldr	r3, [sp, #28]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	dc19      	bgt.n	800ef04 <_dtoa_r+0x904>
 800eed0:	9b02      	ldr	r3, [sp, #8]
 800eed2:	b9bb      	cbnz	r3, 800ef04 <_dtoa_r+0x904>
 800eed4:	9b03      	ldr	r3, [sp, #12]
 800eed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eeda:	b99b      	cbnz	r3, 800ef04 <_dtoa_r+0x904>
 800eedc:	9b03      	ldr	r3, [sp, #12]
 800eede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eee2:	0d1b      	lsrs	r3, r3, #20
 800eee4:	051b      	lsls	r3, r3, #20
 800eee6:	b183      	cbz	r3, 800ef0a <_dtoa_r+0x90a>
 800eee8:	9b05      	ldr	r3, [sp, #20]
 800eeea:	3301      	adds	r3, #1
 800eeec:	9305      	str	r3, [sp, #20]
 800eeee:	9b06      	ldr	r3, [sp, #24]
 800eef0:	3301      	adds	r3, #1
 800eef2:	9306      	str	r3, [sp, #24]
 800eef4:	f04f 0801 	mov.w	r8, #1
 800eef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f47f af6f 	bne.w	800edde <_dtoa_r+0x7de>
 800ef00:	2001      	movs	r0, #1
 800ef02:	e774      	b.n	800edee <_dtoa_r+0x7ee>
 800ef04:	f04f 0800 	mov.w	r8, #0
 800ef08:	e7f6      	b.n	800eef8 <_dtoa_r+0x8f8>
 800ef0a:	4698      	mov	r8, r3
 800ef0c:	e7f4      	b.n	800eef8 <_dtoa_r+0x8f8>
 800ef0e:	d082      	beq.n	800ee16 <_dtoa_r+0x816>
 800ef10:	9a05      	ldr	r2, [sp, #20]
 800ef12:	331c      	adds	r3, #28
 800ef14:	441a      	add	r2, r3
 800ef16:	9205      	str	r2, [sp, #20]
 800ef18:	9a06      	ldr	r2, [sp, #24]
 800ef1a:	441a      	add	r2, r3
 800ef1c:	441d      	add	r5, r3
 800ef1e:	9206      	str	r2, [sp, #24]
 800ef20:	e779      	b.n	800ee16 <_dtoa_r+0x816>
 800ef22:	4603      	mov	r3, r0
 800ef24:	e7f4      	b.n	800ef10 <_dtoa_r+0x910>
 800ef26:	9b04      	ldr	r3, [sp, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	dc37      	bgt.n	800ef9c <_dtoa_r+0x99c>
 800ef2c:	9b07      	ldr	r3, [sp, #28]
 800ef2e:	2b02      	cmp	r3, #2
 800ef30:	dd34      	ble.n	800ef9c <_dtoa_r+0x99c>
 800ef32:	9b04      	ldr	r3, [sp, #16]
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	9b01      	ldr	r3, [sp, #4]
 800ef38:	b963      	cbnz	r3, 800ef54 <_dtoa_r+0x954>
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	2205      	movs	r2, #5
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f000 fab2 	bl	800f4a8 <__multadd>
 800ef44:	4601      	mov	r1, r0
 800ef46:	4606      	mov	r6, r0
 800ef48:	4650      	mov	r0, sl
 800ef4a:	f000 fcc7 	bl	800f8dc <__mcmp>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	f73f adbb 	bgt.w	800eaca <_dtoa_r+0x4ca>
 800ef54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef56:	9d00      	ldr	r5, [sp, #0]
 800ef58:	ea6f 0b03 	mvn.w	fp, r3
 800ef5c:	f04f 0800 	mov.w	r8, #0
 800ef60:	4631      	mov	r1, r6
 800ef62:	4620      	mov	r0, r4
 800ef64:	f000 fa7e 	bl	800f464 <_Bfree>
 800ef68:	2f00      	cmp	r7, #0
 800ef6a:	f43f aeab 	beq.w	800ecc4 <_dtoa_r+0x6c4>
 800ef6e:	f1b8 0f00 	cmp.w	r8, #0
 800ef72:	d005      	beq.n	800ef80 <_dtoa_r+0x980>
 800ef74:	45b8      	cmp	r8, r7
 800ef76:	d003      	beq.n	800ef80 <_dtoa_r+0x980>
 800ef78:	4641      	mov	r1, r8
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 fa72 	bl	800f464 <_Bfree>
 800ef80:	4639      	mov	r1, r7
 800ef82:	4620      	mov	r0, r4
 800ef84:	f000 fa6e 	bl	800f464 <_Bfree>
 800ef88:	e69c      	b.n	800ecc4 <_dtoa_r+0x6c4>
 800ef8a:	2600      	movs	r6, #0
 800ef8c:	4637      	mov	r7, r6
 800ef8e:	e7e1      	b.n	800ef54 <_dtoa_r+0x954>
 800ef90:	46bb      	mov	fp, r7
 800ef92:	4637      	mov	r7, r6
 800ef94:	e599      	b.n	800eaca <_dtoa_r+0x4ca>
 800ef96:	bf00      	nop
 800ef98:	40240000 	.word	0x40240000
 800ef9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 80c8 	beq.w	800f134 <_dtoa_r+0xb34>
 800efa4:	9b04      	ldr	r3, [sp, #16]
 800efa6:	9301      	str	r3, [sp, #4]
 800efa8:	2d00      	cmp	r5, #0
 800efaa:	dd05      	ble.n	800efb8 <_dtoa_r+0x9b8>
 800efac:	4639      	mov	r1, r7
 800efae:	462a      	mov	r2, r5
 800efb0:	4620      	mov	r0, r4
 800efb2:	f000 fc27 	bl	800f804 <__lshift>
 800efb6:	4607      	mov	r7, r0
 800efb8:	f1b8 0f00 	cmp.w	r8, #0
 800efbc:	d05b      	beq.n	800f076 <_dtoa_r+0xa76>
 800efbe:	6879      	ldr	r1, [r7, #4]
 800efc0:	4620      	mov	r0, r4
 800efc2:	f000 fa0f 	bl	800f3e4 <_Balloc>
 800efc6:	4605      	mov	r5, r0
 800efc8:	b928      	cbnz	r0, 800efd6 <_dtoa_r+0x9d6>
 800efca:	4b83      	ldr	r3, [pc, #524]	; (800f1d8 <_dtoa_r+0xbd8>)
 800efcc:	4602      	mov	r2, r0
 800efce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800efd2:	f7ff bb2e 	b.w	800e632 <_dtoa_r+0x32>
 800efd6:	693a      	ldr	r2, [r7, #16]
 800efd8:	3202      	adds	r2, #2
 800efda:	0092      	lsls	r2, r2, #2
 800efdc:	f107 010c 	add.w	r1, r7, #12
 800efe0:	300c      	adds	r0, #12
 800efe2:	f000 fe39 	bl	800fc58 <memcpy>
 800efe6:	2201      	movs	r2, #1
 800efe8:	4629      	mov	r1, r5
 800efea:	4620      	mov	r0, r4
 800efec:	f000 fc0a 	bl	800f804 <__lshift>
 800eff0:	9b00      	ldr	r3, [sp, #0]
 800eff2:	3301      	adds	r3, #1
 800eff4:	9304      	str	r3, [sp, #16]
 800eff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800effa:	4413      	add	r3, r2
 800effc:	9308      	str	r3, [sp, #32]
 800effe:	9b02      	ldr	r3, [sp, #8]
 800f000:	f003 0301 	and.w	r3, r3, #1
 800f004:	46b8      	mov	r8, r7
 800f006:	9306      	str	r3, [sp, #24]
 800f008:	4607      	mov	r7, r0
 800f00a:	9b04      	ldr	r3, [sp, #16]
 800f00c:	4631      	mov	r1, r6
 800f00e:	3b01      	subs	r3, #1
 800f010:	4650      	mov	r0, sl
 800f012:	9301      	str	r3, [sp, #4]
 800f014:	f7ff fa6b 	bl	800e4ee <quorem>
 800f018:	4641      	mov	r1, r8
 800f01a:	9002      	str	r0, [sp, #8]
 800f01c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f020:	4650      	mov	r0, sl
 800f022:	f000 fc5b 	bl	800f8dc <__mcmp>
 800f026:	463a      	mov	r2, r7
 800f028:	9005      	str	r0, [sp, #20]
 800f02a:	4631      	mov	r1, r6
 800f02c:	4620      	mov	r0, r4
 800f02e:	f000 fc71 	bl	800f914 <__mdiff>
 800f032:	68c2      	ldr	r2, [r0, #12]
 800f034:	4605      	mov	r5, r0
 800f036:	bb02      	cbnz	r2, 800f07a <_dtoa_r+0xa7a>
 800f038:	4601      	mov	r1, r0
 800f03a:	4650      	mov	r0, sl
 800f03c:	f000 fc4e 	bl	800f8dc <__mcmp>
 800f040:	4602      	mov	r2, r0
 800f042:	4629      	mov	r1, r5
 800f044:	4620      	mov	r0, r4
 800f046:	9209      	str	r2, [sp, #36]	; 0x24
 800f048:	f000 fa0c 	bl	800f464 <_Bfree>
 800f04c:	9b07      	ldr	r3, [sp, #28]
 800f04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f050:	9d04      	ldr	r5, [sp, #16]
 800f052:	ea43 0102 	orr.w	r1, r3, r2
 800f056:	9b06      	ldr	r3, [sp, #24]
 800f058:	4319      	orrs	r1, r3
 800f05a:	d110      	bne.n	800f07e <_dtoa_r+0xa7e>
 800f05c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f060:	d029      	beq.n	800f0b6 <_dtoa_r+0xab6>
 800f062:	9b05      	ldr	r3, [sp, #20]
 800f064:	2b00      	cmp	r3, #0
 800f066:	dd02      	ble.n	800f06e <_dtoa_r+0xa6e>
 800f068:	9b02      	ldr	r3, [sp, #8]
 800f06a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f06e:	9b01      	ldr	r3, [sp, #4]
 800f070:	f883 9000 	strb.w	r9, [r3]
 800f074:	e774      	b.n	800ef60 <_dtoa_r+0x960>
 800f076:	4638      	mov	r0, r7
 800f078:	e7ba      	b.n	800eff0 <_dtoa_r+0x9f0>
 800f07a:	2201      	movs	r2, #1
 800f07c:	e7e1      	b.n	800f042 <_dtoa_r+0xa42>
 800f07e:	9b05      	ldr	r3, [sp, #20]
 800f080:	2b00      	cmp	r3, #0
 800f082:	db04      	blt.n	800f08e <_dtoa_r+0xa8e>
 800f084:	9907      	ldr	r1, [sp, #28]
 800f086:	430b      	orrs	r3, r1
 800f088:	9906      	ldr	r1, [sp, #24]
 800f08a:	430b      	orrs	r3, r1
 800f08c:	d120      	bne.n	800f0d0 <_dtoa_r+0xad0>
 800f08e:	2a00      	cmp	r2, #0
 800f090:	dded      	ble.n	800f06e <_dtoa_r+0xa6e>
 800f092:	4651      	mov	r1, sl
 800f094:	2201      	movs	r2, #1
 800f096:	4620      	mov	r0, r4
 800f098:	f000 fbb4 	bl	800f804 <__lshift>
 800f09c:	4631      	mov	r1, r6
 800f09e:	4682      	mov	sl, r0
 800f0a0:	f000 fc1c 	bl	800f8dc <__mcmp>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	dc03      	bgt.n	800f0b0 <_dtoa_r+0xab0>
 800f0a8:	d1e1      	bne.n	800f06e <_dtoa_r+0xa6e>
 800f0aa:	f019 0f01 	tst.w	r9, #1
 800f0ae:	d0de      	beq.n	800f06e <_dtoa_r+0xa6e>
 800f0b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f0b4:	d1d8      	bne.n	800f068 <_dtoa_r+0xa68>
 800f0b6:	9a01      	ldr	r2, [sp, #4]
 800f0b8:	2339      	movs	r3, #57	; 0x39
 800f0ba:	7013      	strb	r3, [r2, #0]
 800f0bc:	462b      	mov	r3, r5
 800f0be:	461d      	mov	r5, r3
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f0c6:	2a39      	cmp	r2, #57	; 0x39
 800f0c8:	d06c      	beq.n	800f1a4 <_dtoa_r+0xba4>
 800f0ca:	3201      	adds	r2, #1
 800f0cc:	701a      	strb	r2, [r3, #0]
 800f0ce:	e747      	b.n	800ef60 <_dtoa_r+0x960>
 800f0d0:	2a00      	cmp	r2, #0
 800f0d2:	dd07      	ble.n	800f0e4 <_dtoa_r+0xae4>
 800f0d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f0d8:	d0ed      	beq.n	800f0b6 <_dtoa_r+0xab6>
 800f0da:	9a01      	ldr	r2, [sp, #4]
 800f0dc:	f109 0301 	add.w	r3, r9, #1
 800f0e0:	7013      	strb	r3, [r2, #0]
 800f0e2:	e73d      	b.n	800ef60 <_dtoa_r+0x960>
 800f0e4:	9b04      	ldr	r3, [sp, #16]
 800f0e6:	9a08      	ldr	r2, [sp, #32]
 800f0e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d043      	beq.n	800f178 <_dtoa_r+0xb78>
 800f0f0:	4651      	mov	r1, sl
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	220a      	movs	r2, #10
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f000 f9d6 	bl	800f4a8 <__multadd>
 800f0fc:	45b8      	cmp	r8, r7
 800f0fe:	4682      	mov	sl, r0
 800f100:	f04f 0300 	mov.w	r3, #0
 800f104:	f04f 020a 	mov.w	r2, #10
 800f108:	4641      	mov	r1, r8
 800f10a:	4620      	mov	r0, r4
 800f10c:	d107      	bne.n	800f11e <_dtoa_r+0xb1e>
 800f10e:	f000 f9cb 	bl	800f4a8 <__multadd>
 800f112:	4680      	mov	r8, r0
 800f114:	4607      	mov	r7, r0
 800f116:	9b04      	ldr	r3, [sp, #16]
 800f118:	3301      	adds	r3, #1
 800f11a:	9304      	str	r3, [sp, #16]
 800f11c:	e775      	b.n	800f00a <_dtoa_r+0xa0a>
 800f11e:	f000 f9c3 	bl	800f4a8 <__multadd>
 800f122:	4639      	mov	r1, r7
 800f124:	4680      	mov	r8, r0
 800f126:	2300      	movs	r3, #0
 800f128:	220a      	movs	r2, #10
 800f12a:	4620      	mov	r0, r4
 800f12c:	f000 f9bc 	bl	800f4a8 <__multadd>
 800f130:	4607      	mov	r7, r0
 800f132:	e7f0      	b.n	800f116 <_dtoa_r+0xb16>
 800f134:	9b04      	ldr	r3, [sp, #16]
 800f136:	9301      	str	r3, [sp, #4]
 800f138:	9d00      	ldr	r5, [sp, #0]
 800f13a:	4631      	mov	r1, r6
 800f13c:	4650      	mov	r0, sl
 800f13e:	f7ff f9d6 	bl	800e4ee <quorem>
 800f142:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	f805 9b01 	strb.w	r9, [r5], #1
 800f14c:	1aea      	subs	r2, r5, r3
 800f14e:	9b01      	ldr	r3, [sp, #4]
 800f150:	4293      	cmp	r3, r2
 800f152:	dd07      	ble.n	800f164 <_dtoa_r+0xb64>
 800f154:	4651      	mov	r1, sl
 800f156:	2300      	movs	r3, #0
 800f158:	220a      	movs	r2, #10
 800f15a:	4620      	mov	r0, r4
 800f15c:	f000 f9a4 	bl	800f4a8 <__multadd>
 800f160:	4682      	mov	sl, r0
 800f162:	e7ea      	b.n	800f13a <_dtoa_r+0xb3a>
 800f164:	9b01      	ldr	r3, [sp, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfc8      	it	gt
 800f16a:	461d      	movgt	r5, r3
 800f16c:	9b00      	ldr	r3, [sp, #0]
 800f16e:	bfd8      	it	le
 800f170:	2501      	movle	r5, #1
 800f172:	441d      	add	r5, r3
 800f174:	f04f 0800 	mov.w	r8, #0
 800f178:	4651      	mov	r1, sl
 800f17a:	2201      	movs	r2, #1
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 fb41 	bl	800f804 <__lshift>
 800f182:	4631      	mov	r1, r6
 800f184:	4682      	mov	sl, r0
 800f186:	f000 fba9 	bl	800f8dc <__mcmp>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	dc96      	bgt.n	800f0bc <_dtoa_r+0xabc>
 800f18e:	d102      	bne.n	800f196 <_dtoa_r+0xb96>
 800f190:	f019 0f01 	tst.w	r9, #1
 800f194:	d192      	bne.n	800f0bc <_dtoa_r+0xabc>
 800f196:	462b      	mov	r3, r5
 800f198:	461d      	mov	r5, r3
 800f19a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f19e:	2a30      	cmp	r2, #48	; 0x30
 800f1a0:	d0fa      	beq.n	800f198 <_dtoa_r+0xb98>
 800f1a2:	e6dd      	b.n	800ef60 <_dtoa_r+0x960>
 800f1a4:	9a00      	ldr	r2, [sp, #0]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d189      	bne.n	800f0be <_dtoa_r+0xabe>
 800f1aa:	f10b 0b01 	add.w	fp, fp, #1
 800f1ae:	2331      	movs	r3, #49	; 0x31
 800f1b0:	e796      	b.n	800f0e0 <_dtoa_r+0xae0>
 800f1b2:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <_dtoa_r+0xbdc>)
 800f1b4:	f7ff ba99 	b.w	800e6ea <_dtoa_r+0xea>
 800f1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	f47f aa6d 	bne.w	800e69a <_dtoa_r+0x9a>
 800f1c0:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <_dtoa_r+0xbe0>)
 800f1c2:	f7ff ba92 	b.w	800e6ea <_dtoa_r+0xea>
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	dcb5      	bgt.n	800f138 <_dtoa_r+0xb38>
 800f1cc:	9b07      	ldr	r3, [sp, #28]
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	f73f aeb1 	bgt.w	800ef36 <_dtoa_r+0x936>
 800f1d4:	e7b0      	b.n	800f138 <_dtoa_r+0xb38>
 800f1d6:	bf00      	nop
 800f1d8:	08024628 	.word	0x08024628
 800f1dc:	08024588 	.word	0x08024588
 800f1e0:	080245ac 	.word	0x080245ac

0800f1e4 <_free_r>:
 800f1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1e6:	2900      	cmp	r1, #0
 800f1e8:	d044      	beq.n	800f274 <_free_r+0x90>
 800f1ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1ee:	9001      	str	r0, [sp, #4]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f1a1 0404 	sub.w	r4, r1, #4
 800f1f6:	bfb8      	it	lt
 800f1f8:	18e4      	addlt	r4, r4, r3
 800f1fa:	f000 f8e7 	bl	800f3cc <__malloc_lock>
 800f1fe:	4a1e      	ldr	r2, [pc, #120]	; (800f278 <_free_r+0x94>)
 800f200:	9801      	ldr	r0, [sp, #4]
 800f202:	6813      	ldr	r3, [r2, #0]
 800f204:	b933      	cbnz	r3, 800f214 <_free_r+0x30>
 800f206:	6063      	str	r3, [r4, #4]
 800f208:	6014      	str	r4, [r2, #0]
 800f20a:	b003      	add	sp, #12
 800f20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f210:	f000 b8e2 	b.w	800f3d8 <__malloc_unlock>
 800f214:	42a3      	cmp	r3, r4
 800f216:	d908      	bls.n	800f22a <_free_r+0x46>
 800f218:	6825      	ldr	r5, [r4, #0]
 800f21a:	1961      	adds	r1, r4, r5
 800f21c:	428b      	cmp	r3, r1
 800f21e:	bf01      	itttt	eq
 800f220:	6819      	ldreq	r1, [r3, #0]
 800f222:	685b      	ldreq	r3, [r3, #4]
 800f224:	1949      	addeq	r1, r1, r5
 800f226:	6021      	streq	r1, [r4, #0]
 800f228:	e7ed      	b.n	800f206 <_free_r+0x22>
 800f22a:	461a      	mov	r2, r3
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	b10b      	cbz	r3, 800f234 <_free_r+0x50>
 800f230:	42a3      	cmp	r3, r4
 800f232:	d9fa      	bls.n	800f22a <_free_r+0x46>
 800f234:	6811      	ldr	r1, [r2, #0]
 800f236:	1855      	adds	r5, r2, r1
 800f238:	42a5      	cmp	r5, r4
 800f23a:	d10b      	bne.n	800f254 <_free_r+0x70>
 800f23c:	6824      	ldr	r4, [r4, #0]
 800f23e:	4421      	add	r1, r4
 800f240:	1854      	adds	r4, r2, r1
 800f242:	42a3      	cmp	r3, r4
 800f244:	6011      	str	r1, [r2, #0]
 800f246:	d1e0      	bne.n	800f20a <_free_r+0x26>
 800f248:	681c      	ldr	r4, [r3, #0]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	6053      	str	r3, [r2, #4]
 800f24e:	440c      	add	r4, r1
 800f250:	6014      	str	r4, [r2, #0]
 800f252:	e7da      	b.n	800f20a <_free_r+0x26>
 800f254:	d902      	bls.n	800f25c <_free_r+0x78>
 800f256:	230c      	movs	r3, #12
 800f258:	6003      	str	r3, [r0, #0]
 800f25a:	e7d6      	b.n	800f20a <_free_r+0x26>
 800f25c:	6825      	ldr	r5, [r4, #0]
 800f25e:	1961      	adds	r1, r4, r5
 800f260:	428b      	cmp	r3, r1
 800f262:	bf04      	itt	eq
 800f264:	6819      	ldreq	r1, [r3, #0]
 800f266:	685b      	ldreq	r3, [r3, #4]
 800f268:	6063      	str	r3, [r4, #4]
 800f26a:	bf04      	itt	eq
 800f26c:	1949      	addeq	r1, r1, r5
 800f26e:	6021      	streq	r1, [r4, #0]
 800f270:	6054      	str	r4, [r2, #4]
 800f272:	e7ca      	b.n	800f20a <_free_r+0x26>
 800f274:	b003      	add	sp, #12
 800f276:	bd30      	pop	{r4, r5, pc}
 800f278:	2001b644 	.word	0x2001b644

0800f27c <malloc>:
 800f27c:	4b02      	ldr	r3, [pc, #8]	; (800f288 <malloc+0xc>)
 800f27e:	4601      	mov	r1, r0
 800f280:	6818      	ldr	r0, [r3, #0]
 800f282:	f000 b823 	b.w	800f2cc <_malloc_r>
 800f286:	bf00      	nop
 800f288:	200078d0 	.word	0x200078d0

0800f28c <sbrk_aligned>:
 800f28c:	b570      	push	{r4, r5, r6, lr}
 800f28e:	4e0e      	ldr	r6, [pc, #56]	; (800f2c8 <sbrk_aligned+0x3c>)
 800f290:	460c      	mov	r4, r1
 800f292:	6831      	ldr	r1, [r6, #0]
 800f294:	4605      	mov	r5, r0
 800f296:	b911      	cbnz	r1, 800f29e <sbrk_aligned+0x12>
 800f298:	f000 fcce 	bl	800fc38 <_sbrk_r>
 800f29c:	6030      	str	r0, [r6, #0]
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f000 fcc9 	bl	800fc38 <_sbrk_r>
 800f2a6:	1c43      	adds	r3, r0, #1
 800f2a8:	d00a      	beq.n	800f2c0 <sbrk_aligned+0x34>
 800f2aa:	1cc4      	adds	r4, r0, #3
 800f2ac:	f024 0403 	bic.w	r4, r4, #3
 800f2b0:	42a0      	cmp	r0, r4
 800f2b2:	d007      	beq.n	800f2c4 <sbrk_aligned+0x38>
 800f2b4:	1a21      	subs	r1, r4, r0
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	f000 fcbe 	bl	800fc38 <_sbrk_r>
 800f2bc:	3001      	adds	r0, #1
 800f2be:	d101      	bne.n	800f2c4 <sbrk_aligned+0x38>
 800f2c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	bd70      	pop	{r4, r5, r6, pc}
 800f2c8:	2001b648 	.word	0x2001b648

0800f2cc <_malloc_r>:
 800f2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2d0:	1ccd      	adds	r5, r1, #3
 800f2d2:	f025 0503 	bic.w	r5, r5, #3
 800f2d6:	3508      	adds	r5, #8
 800f2d8:	2d0c      	cmp	r5, #12
 800f2da:	bf38      	it	cc
 800f2dc:	250c      	movcc	r5, #12
 800f2de:	2d00      	cmp	r5, #0
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	db01      	blt.n	800f2e8 <_malloc_r+0x1c>
 800f2e4:	42a9      	cmp	r1, r5
 800f2e6:	d905      	bls.n	800f2f4 <_malloc_r+0x28>
 800f2e8:	230c      	movs	r3, #12
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	2600      	movs	r6, #0
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f3c8 <_malloc_r+0xfc>
 800f2f8:	f000 f868 	bl	800f3cc <__malloc_lock>
 800f2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f300:	461c      	mov	r4, r3
 800f302:	bb5c      	cbnz	r4, 800f35c <_malloc_r+0x90>
 800f304:	4629      	mov	r1, r5
 800f306:	4638      	mov	r0, r7
 800f308:	f7ff ffc0 	bl	800f28c <sbrk_aligned>
 800f30c:	1c43      	adds	r3, r0, #1
 800f30e:	4604      	mov	r4, r0
 800f310:	d155      	bne.n	800f3be <_malloc_r+0xf2>
 800f312:	f8d8 4000 	ldr.w	r4, [r8]
 800f316:	4626      	mov	r6, r4
 800f318:	2e00      	cmp	r6, #0
 800f31a:	d145      	bne.n	800f3a8 <_malloc_r+0xdc>
 800f31c:	2c00      	cmp	r4, #0
 800f31e:	d048      	beq.n	800f3b2 <_malloc_r+0xe6>
 800f320:	6823      	ldr	r3, [r4, #0]
 800f322:	4631      	mov	r1, r6
 800f324:	4638      	mov	r0, r7
 800f326:	eb04 0903 	add.w	r9, r4, r3
 800f32a:	f000 fc85 	bl	800fc38 <_sbrk_r>
 800f32e:	4581      	cmp	r9, r0
 800f330:	d13f      	bne.n	800f3b2 <_malloc_r+0xe6>
 800f332:	6821      	ldr	r1, [r4, #0]
 800f334:	1a6d      	subs	r5, r5, r1
 800f336:	4629      	mov	r1, r5
 800f338:	4638      	mov	r0, r7
 800f33a:	f7ff ffa7 	bl	800f28c <sbrk_aligned>
 800f33e:	3001      	adds	r0, #1
 800f340:	d037      	beq.n	800f3b2 <_malloc_r+0xe6>
 800f342:	6823      	ldr	r3, [r4, #0]
 800f344:	442b      	add	r3, r5
 800f346:	6023      	str	r3, [r4, #0]
 800f348:	f8d8 3000 	ldr.w	r3, [r8]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d038      	beq.n	800f3c2 <_malloc_r+0xf6>
 800f350:	685a      	ldr	r2, [r3, #4]
 800f352:	42a2      	cmp	r2, r4
 800f354:	d12b      	bne.n	800f3ae <_malloc_r+0xe2>
 800f356:	2200      	movs	r2, #0
 800f358:	605a      	str	r2, [r3, #4]
 800f35a:	e00f      	b.n	800f37c <_malloc_r+0xb0>
 800f35c:	6822      	ldr	r2, [r4, #0]
 800f35e:	1b52      	subs	r2, r2, r5
 800f360:	d41f      	bmi.n	800f3a2 <_malloc_r+0xd6>
 800f362:	2a0b      	cmp	r2, #11
 800f364:	d917      	bls.n	800f396 <_malloc_r+0xca>
 800f366:	1961      	adds	r1, r4, r5
 800f368:	42a3      	cmp	r3, r4
 800f36a:	6025      	str	r5, [r4, #0]
 800f36c:	bf18      	it	ne
 800f36e:	6059      	strne	r1, [r3, #4]
 800f370:	6863      	ldr	r3, [r4, #4]
 800f372:	bf08      	it	eq
 800f374:	f8c8 1000 	streq.w	r1, [r8]
 800f378:	5162      	str	r2, [r4, r5]
 800f37a:	604b      	str	r3, [r1, #4]
 800f37c:	4638      	mov	r0, r7
 800f37e:	f104 060b 	add.w	r6, r4, #11
 800f382:	f000 f829 	bl	800f3d8 <__malloc_unlock>
 800f386:	f026 0607 	bic.w	r6, r6, #7
 800f38a:	1d23      	adds	r3, r4, #4
 800f38c:	1af2      	subs	r2, r6, r3
 800f38e:	d0ae      	beq.n	800f2ee <_malloc_r+0x22>
 800f390:	1b9b      	subs	r3, r3, r6
 800f392:	50a3      	str	r3, [r4, r2]
 800f394:	e7ab      	b.n	800f2ee <_malloc_r+0x22>
 800f396:	42a3      	cmp	r3, r4
 800f398:	6862      	ldr	r2, [r4, #4]
 800f39a:	d1dd      	bne.n	800f358 <_malloc_r+0x8c>
 800f39c:	f8c8 2000 	str.w	r2, [r8]
 800f3a0:	e7ec      	b.n	800f37c <_malloc_r+0xb0>
 800f3a2:	4623      	mov	r3, r4
 800f3a4:	6864      	ldr	r4, [r4, #4]
 800f3a6:	e7ac      	b.n	800f302 <_malloc_r+0x36>
 800f3a8:	4634      	mov	r4, r6
 800f3aa:	6876      	ldr	r6, [r6, #4]
 800f3ac:	e7b4      	b.n	800f318 <_malloc_r+0x4c>
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	e7cc      	b.n	800f34c <_malloc_r+0x80>
 800f3b2:	230c      	movs	r3, #12
 800f3b4:	603b      	str	r3, [r7, #0]
 800f3b6:	4638      	mov	r0, r7
 800f3b8:	f000 f80e 	bl	800f3d8 <__malloc_unlock>
 800f3bc:	e797      	b.n	800f2ee <_malloc_r+0x22>
 800f3be:	6025      	str	r5, [r4, #0]
 800f3c0:	e7dc      	b.n	800f37c <_malloc_r+0xb0>
 800f3c2:	605b      	str	r3, [r3, #4]
 800f3c4:	deff      	udf	#255	; 0xff
 800f3c6:	bf00      	nop
 800f3c8:	2001b644 	.word	0x2001b644

0800f3cc <__malloc_lock>:
 800f3cc:	4801      	ldr	r0, [pc, #4]	; (800f3d4 <__malloc_lock+0x8>)
 800f3ce:	f7ff b88c 	b.w	800e4ea <__retarget_lock_acquire_recursive>
 800f3d2:	bf00      	nop
 800f3d4:	2001b640 	.word	0x2001b640

0800f3d8 <__malloc_unlock>:
 800f3d8:	4801      	ldr	r0, [pc, #4]	; (800f3e0 <__malloc_unlock+0x8>)
 800f3da:	f7ff b887 	b.w	800e4ec <__retarget_lock_release_recursive>
 800f3de:	bf00      	nop
 800f3e0:	2001b640 	.word	0x2001b640

0800f3e4 <_Balloc>:
 800f3e4:	b570      	push	{r4, r5, r6, lr}
 800f3e6:	69c6      	ldr	r6, [r0, #28]
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	460d      	mov	r5, r1
 800f3ec:	b976      	cbnz	r6, 800f40c <_Balloc+0x28>
 800f3ee:	2010      	movs	r0, #16
 800f3f0:	f7ff ff44 	bl	800f27c <malloc>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	61e0      	str	r0, [r4, #28]
 800f3f8:	b920      	cbnz	r0, 800f404 <_Balloc+0x20>
 800f3fa:	4b18      	ldr	r3, [pc, #96]	; (800f45c <_Balloc+0x78>)
 800f3fc:	4818      	ldr	r0, [pc, #96]	; (800f460 <_Balloc+0x7c>)
 800f3fe:	216b      	movs	r1, #107	; 0x6b
 800f400:	f000 fc38 	bl	800fc74 <__assert_func>
 800f404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f408:	6006      	str	r6, [r0, #0]
 800f40a:	60c6      	str	r6, [r0, #12]
 800f40c:	69e6      	ldr	r6, [r4, #28]
 800f40e:	68f3      	ldr	r3, [r6, #12]
 800f410:	b183      	cbz	r3, 800f434 <_Balloc+0x50>
 800f412:	69e3      	ldr	r3, [r4, #28]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f41a:	b9b8      	cbnz	r0, 800f44c <_Balloc+0x68>
 800f41c:	2101      	movs	r1, #1
 800f41e:	fa01 f605 	lsl.w	r6, r1, r5
 800f422:	1d72      	adds	r2, r6, #5
 800f424:	0092      	lsls	r2, r2, #2
 800f426:	4620      	mov	r0, r4
 800f428:	f000 fc42 	bl	800fcb0 <_calloc_r>
 800f42c:	b160      	cbz	r0, 800f448 <_Balloc+0x64>
 800f42e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f432:	e00e      	b.n	800f452 <_Balloc+0x6e>
 800f434:	2221      	movs	r2, #33	; 0x21
 800f436:	2104      	movs	r1, #4
 800f438:	4620      	mov	r0, r4
 800f43a:	f000 fc39 	bl	800fcb0 <_calloc_r>
 800f43e:	69e3      	ldr	r3, [r4, #28]
 800f440:	60f0      	str	r0, [r6, #12]
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d1e4      	bne.n	800f412 <_Balloc+0x2e>
 800f448:	2000      	movs	r0, #0
 800f44a:	bd70      	pop	{r4, r5, r6, pc}
 800f44c:	6802      	ldr	r2, [r0, #0]
 800f44e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f452:	2300      	movs	r3, #0
 800f454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f458:	e7f7      	b.n	800f44a <_Balloc+0x66>
 800f45a:	bf00      	nop
 800f45c:	080245b9 	.word	0x080245b9
 800f460:	08024639 	.word	0x08024639

0800f464 <_Bfree>:
 800f464:	b570      	push	{r4, r5, r6, lr}
 800f466:	69c6      	ldr	r6, [r0, #28]
 800f468:	4605      	mov	r5, r0
 800f46a:	460c      	mov	r4, r1
 800f46c:	b976      	cbnz	r6, 800f48c <_Bfree+0x28>
 800f46e:	2010      	movs	r0, #16
 800f470:	f7ff ff04 	bl	800f27c <malloc>
 800f474:	4602      	mov	r2, r0
 800f476:	61e8      	str	r0, [r5, #28]
 800f478:	b920      	cbnz	r0, 800f484 <_Bfree+0x20>
 800f47a:	4b09      	ldr	r3, [pc, #36]	; (800f4a0 <_Bfree+0x3c>)
 800f47c:	4809      	ldr	r0, [pc, #36]	; (800f4a4 <_Bfree+0x40>)
 800f47e:	218f      	movs	r1, #143	; 0x8f
 800f480:	f000 fbf8 	bl	800fc74 <__assert_func>
 800f484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f488:	6006      	str	r6, [r0, #0]
 800f48a:	60c6      	str	r6, [r0, #12]
 800f48c:	b13c      	cbz	r4, 800f49e <_Bfree+0x3a>
 800f48e:	69eb      	ldr	r3, [r5, #28]
 800f490:	6862      	ldr	r2, [r4, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f498:	6021      	str	r1, [r4, #0]
 800f49a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f49e:	bd70      	pop	{r4, r5, r6, pc}
 800f4a0:	080245b9 	.word	0x080245b9
 800f4a4:	08024639 	.word	0x08024639

0800f4a8 <__multadd>:
 800f4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ac:	690d      	ldr	r5, [r1, #16]
 800f4ae:	4607      	mov	r7, r0
 800f4b0:	460c      	mov	r4, r1
 800f4b2:	461e      	mov	r6, r3
 800f4b4:	f101 0c14 	add.w	ip, r1, #20
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f4be:	b299      	uxth	r1, r3
 800f4c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f4c4:	0c1e      	lsrs	r6, r3, #16
 800f4c6:	0c0b      	lsrs	r3, r1, #16
 800f4c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f4cc:	b289      	uxth	r1, r1
 800f4ce:	3001      	adds	r0, #1
 800f4d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4d4:	4285      	cmp	r5, r0
 800f4d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f4da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4de:	dcec      	bgt.n	800f4ba <__multadd+0x12>
 800f4e0:	b30e      	cbz	r6, 800f526 <__multadd+0x7e>
 800f4e2:	68a3      	ldr	r3, [r4, #8]
 800f4e4:	42ab      	cmp	r3, r5
 800f4e6:	dc19      	bgt.n	800f51c <__multadd+0x74>
 800f4e8:	6861      	ldr	r1, [r4, #4]
 800f4ea:	4638      	mov	r0, r7
 800f4ec:	3101      	adds	r1, #1
 800f4ee:	f7ff ff79 	bl	800f3e4 <_Balloc>
 800f4f2:	4680      	mov	r8, r0
 800f4f4:	b928      	cbnz	r0, 800f502 <__multadd+0x5a>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	4b0c      	ldr	r3, [pc, #48]	; (800f52c <__multadd+0x84>)
 800f4fa:	480d      	ldr	r0, [pc, #52]	; (800f530 <__multadd+0x88>)
 800f4fc:	21ba      	movs	r1, #186	; 0xba
 800f4fe:	f000 fbb9 	bl	800fc74 <__assert_func>
 800f502:	6922      	ldr	r2, [r4, #16]
 800f504:	3202      	adds	r2, #2
 800f506:	f104 010c 	add.w	r1, r4, #12
 800f50a:	0092      	lsls	r2, r2, #2
 800f50c:	300c      	adds	r0, #12
 800f50e:	f000 fba3 	bl	800fc58 <memcpy>
 800f512:	4621      	mov	r1, r4
 800f514:	4638      	mov	r0, r7
 800f516:	f7ff ffa5 	bl	800f464 <_Bfree>
 800f51a:	4644      	mov	r4, r8
 800f51c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f520:	3501      	adds	r5, #1
 800f522:	615e      	str	r6, [r3, #20]
 800f524:	6125      	str	r5, [r4, #16]
 800f526:	4620      	mov	r0, r4
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52c:	08024628 	.word	0x08024628
 800f530:	08024639 	.word	0x08024639

0800f534 <__hi0bits>:
 800f534:	0c03      	lsrs	r3, r0, #16
 800f536:	041b      	lsls	r3, r3, #16
 800f538:	b9d3      	cbnz	r3, 800f570 <__hi0bits+0x3c>
 800f53a:	0400      	lsls	r0, r0, #16
 800f53c:	2310      	movs	r3, #16
 800f53e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f542:	bf04      	itt	eq
 800f544:	0200      	lsleq	r0, r0, #8
 800f546:	3308      	addeq	r3, #8
 800f548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f54c:	bf04      	itt	eq
 800f54e:	0100      	lsleq	r0, r0, #4
 800f550:	3304      	addeq	r3, #4
 800f552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f556:	bf04      	itt	eq
 800f558:	0080      	lsleq	r0, r0, #2
 800f55a:	3302      	addeq	r3, #2
 800f55c:	2800      	cmp	r0, #0
 800f55e:	db05      	blt.n	800f56c <__hi0bits+0x38>
 800f560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f564:	f103 0301 	add.w	r3, r3, #1
 800f568:	bf08      	it	eq
 800f56a:	2320      	moveq	r3, #32
 800f56c:	4618      	mov	r0, r3
 800f56e:	4770      	bx	lr
 800f570:	2300      	movs	r3, #0
 800f572:	e7e4      	b.n	800f53e <__hi0bits+0xa>

0800f574 <__lo0bits>:
 800f574:	6803      	ldr	r3, [r0, #0]
 800f576:	f013 0207 	ands.w	r2, r3, #7
 800f57a:	d00c      	beq.n	800f596 <__lo0bits+0x22>
 800f57c:	07d9      	lsls	r1, r3, #31
 800f57e:	d422      	bmi.n	800f5c6 <__lo0bits+0x52>
 800f580:	079a      	lsls	r2, r3, #30
 800f582:	bf49      	itett	mi
 800f584:	085b      	lsrmi	r3, r3, #1
 800f586:	089b      	lsrpl	r3, r3, #2
 800f588:	6003      	strmi	r3, [r0, #0]
 800f58a:	2201      	movmi	r2, #1
 800f58c:	bf5c      	itt	pl
 800f58e:	6003      	strpl	r3, [r0, #0]
 800f590:	2202      	movpl	r2, #2
 800f592:	4610      	mov	r0, r2
 800f594:	4770      	bx	lr
 800f596:	b299      	uxth	r1, r3
 800f598:	b909      	cbnz	r1, 800f59e <__lo0bits+0x2a>
 800f59a:	0c1b      	lsrs	r3, r3, #16
 800f59c:	2210      	movs	r2, #16
 800f59e:	b2d9      	uxtb	r1, r3
 800f5a0:	b909      	cbnz	r1, 800f5a6 <__lo0bits+0x32>
 800f5a2:	3208      	adds	r2, #8
 800f5a4:	0a1b      	lsrs	r3, r3, #8
 800f5a6:	0719      	lsls	r1, r3, #28
 800f5a8:	bf04      	itt	eq
 800f5aa:	091b      	lsreq	r3, r3, #4
 800f5ac:	3204      	addeq	r2, #4
 800f5ae:	0799      	lsls	r1, r3, #30
 800f5b0:	bf04      	itt	eq
 800f5b2:	089b      	lsreq	r3, r3, #2
 800f5b4:	3202      	addeq	r2, #2
 800f5b6:	07d9      	lsls	r1, r3, #31
 800f5b8:	d403      	bmi.n	800f5c2 <__lo0bits+0x4e>
 800f5ba:	085b      	lsrs	r3, r3, #1
 800f5bc:	f102 0201 	add.w	r2, r2, #1
 800f5c0:	d003      	beq.n	800f5ca <__lo0bits+0x56>
 800f5c2:	6003      	str	r3, [r0, #0]
 800f5c4:	e7e5      	b.n	800f592 <__lo0bits+0x1e>
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	e7e3      	b.n	800f592 <__lo0bits+0x1e>
 800f5ca:	2220      	movs	r2, #32
 800f5cc:	e7e1      	b.n	800f592 <__lo0bits+0x1e>
	...

0800f5d0 <__i2b>:
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	f7ff ff05 	bl	800f3e4 <_Balloc>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	b928      	cbnz	r0, 800f5ea <__i2b+0x1a>
 800f5de:	4b05      	ldr	r3, [pc, #20]	; (800f5f4 <__i2b+0x24>)
 800f5e0:	4805      	ldr	r0, [pc, #20]	; (800f5f8 <__i2b+0x28>)
 800f5e2:	f240 1145 	movw	r1, #325	; 0x145
 800f5e6:	f000 fb45 	bl	800fc74 <__assert_func>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	6144      	str	r4, [r0, #20]
 800f5ee:	6103      	str	r3, [r0, #16]
 800f5f0:	bd10      	pop	{r4, pc}
 800f5f2:	bf00      	nop
 800f5f4:	08024628 	.word	0x08024628
 800f5f8:	08024639 	.word	0x08024639

0800f5fc <__multiply>:
 800f5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f600:	4691      	mov	r9, r2
 800f602:	690a      	ldr	r2, [r1, #16]
 800f604:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f608:	429a      	cmp	r2, r3
 800f60a:	bfb8      	it	lt
 800f60c:	460b      	movlt	r3, r1
 800f60e:	460c      	mov	r4, r1
 800f610:	bfbc      	itt	lt
 800f612:	464c      	movlt	r4, r9
 800f614:	4699      	movlt	r9, r3
 800f616:	6927      	ldr	r7, [r4, #16]
 800f618:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f61c:	68a3      	ldr	r3, [r4, #8]
 800f61e:	6861      	ldr	r1, [r4, #4]
 800f620:	eb07 060a 	add.w	r6, r7, sl
 800f624:	42b3      	cmp	r3, r6
 800f626:	b085      	sub	sp, #20
 800f628:	bfb8      	it	lt
 800f62a:	3101      	addlt	r1, #1
 800f62c:	f7ff feda 	bl	800f3e4 <_Balloc>
 800f630:	b930      	cbnz	r0, 800f640 <__multiply+0x44>
 800f632:	4602      	mov	r2, r0
 800f634:	4b44      	ldr	r3, [pc, #272]	; (800f748 <__multiply+0x14c>)
 800f636:	4845      	ldr	r0, [pc, #276]	; (800f74c <__multiply+0x150>)
 800f638:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f63c:	f000 fb1a 	bl	800fc74 <__assert_func>
 800f640:	f100 0514 	add.w	r5, r0, #20
 800f644:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f648:	462b      	mov	r3, r5
 800f64a:	2200      	movs	r2, #0
 800f64c:	4543      	cmp	r3, r8
 800f64e:	d321      	bcc.n	800f694 <__multiply+0x98>
 800f650:	f104 0314 	add.w	r3, r4, #20
 800f654:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f658:	f109 0314 	add.w	r3, r9, #20
 800f65c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f660:	9202      	str	r2, [sp, #8]
 800f662:	1b3a      	subs	r2, r7, r4
 800f664:	3a15      	subs	r2, #21
 800f666:	f022 0203 	bic.w	r2, r2, #3
 800f66a:	3204      	adds	r2, #4
 800f66c:	f104 0115 	add.w	r1, r4, #21
 800f670:	428f      	cmp	r7, r1
 800f672:	bf38      	it	cc
 800f674:	2204      	movcc	r2, #4
 800f676:	9201      	str	r2, [sp, #4]
 800f678:	9a02      	ldr	r2, [sp, #8]
 800f67a:	9303      	str	r3, [sp, #12]
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d80c      	bhi.n	800f69a <__multiply+0x9e>
 800f680:	2e00      	cmp	r6, #0
 800f682:	dd03      	ble.n	800f68c <__multiply+0x90>
 800f684:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d05b      	beq.n	800f744 <__multiply+0x148>
 800f68c:	6106      	str	r6, [r0, #16]
 800f68e:	b005      	add	sp, #20
 800f690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f694:	f843 2b04 	str.w	r2, [r3], #4
 800f698:	e7d8      	b.n	800f64c <__multiply+0x50>
 800f69a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f69e:	f1ba 0f00 	cmp.w	sl, #0
 800f6a2:	d024      	beq.n	800f6ee <__multiply+0xf2>
 800f6a4:	f104 0e14 	add.w	lr, r4, #20
 800f6a8:	46a9      	mov	r9, r5
 800f6aa:	f04f 0c00 	mov.w	ip, #0
 800f6ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f6b2:	f8d9 1000 	ldr.w	r1, [r9]
 800f6b6:	fa1f fb82 	uxth.w	fp, r2
 800f6ba:	b289      	uxth	r1, r1
 800f6bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f6c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f6c4:	f8d9 2000 	ldr.w	r2, [r9]
 800f6c8:	4461      	add	r1, ip
 800f6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800f6d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f6d6:	b289      	uxth	r1, r1
 800f6d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f6dc:	4577      	cmp	r7, lr
 800f6de:	f849 1b04 	str.w	r1, [r9], #4
 800f6e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6e6:	d8e2      	bhi.n	800f6ae <__multiply+0xb2>
 800f6e8:	9a01      	ldr	r2, [sp, #4]
 800f6ea:	f845 c002 	str.w	ip, [r5, r2]
 800f6ee:	9a03      	ldr	r2, [sp, #12]
 800f6f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	f1b9 0f00 	cmp.w	r9, #0
 800f6fa:	d021      	beq.n	800f740 <__multiply+0x144>
 800f6fc:	6829      	ldr	r1, [r5, #0]
 800f6fe:	f104 0c14 	add.w	ip, r4, #20
 800f702:	46ae      	mov	lr, r5
 800f704:	f04f 0a00 	mov.w	sl, #0
 800f708:	f8bc b000 	ldrh.w	fp, [ip]
 800f70c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f710:	fb09 220b 	mla	r2, r9, fp, r2
 800f714:	4452      	add	r2, sl
 800f716:	b289      	uxth	r1, r1
 800f718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f71c:	f84e 1b04 	str.w	r1, [lr], #4
 800f720:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f724:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f728:	f8be 1000 	ldrh.w	r1, [lr]
 800f72c:	fb09 110a 	mla	r1, r9, sl, r1
 800f730:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f734:	4567      	cmp	r7, ip
 800f736:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f73a:	d8e5      	bhi.n	800f708 <__multiply+0x10c>
 800f73c:	9a01      	ldr	r2, [sp, #4]
 800f73e:	50a9      	str	r1, [r5, r2]
 800f740:	3504      	adds	r5, #4
 800f742:	e799      	b.n	800f678 <__multiply+0x7c>
 800f744:	3e01      	subs	r6, #1
 800f746:	e79b      	b.n	800f680 <__multiply+0x84>
 800f748:	08024628 	.word	0x08024628
 800f74c:	08024639 	.word	0x08024639

0800f750 <__pow5mult>:
 800f750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f754:	4615      	mov	r5, r2
 800f756:	f012 0203 	ands.w	r2, r2, #3
 800f75a:	4606      	mov	r6, r0
 800f75c:	460f      	mov	r7, r1
 800f75e:	d007      	beq.n	800f770 <__pow5mult+0x20>
 800f760:	4c25      	ldr	r4, [pc, #148]	; (800f7f8 <__pow5mult+0xa8>)
 800f762:	3a01      	subs	r2, #1
 800f764:	2300      	movs	r3, #0
 800f766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f76a:	f7ff fe9d 	bl	800f4a8 <__multadd>
 800f76e:	4607      	mov	r7, r0
 800f770:	10ad      	asrs	r5, r5, #2
 800f772:	d03d      	beq.n	800f7f0 <__pow5mult+0xa0>
 800f774:	69f4      	ldr	r4, [r6, #28]
 800f776:	b97c      	cbnz	r4, 800f798 <__pow5mult+0x48>
 800f778:	2010      	movs	r0, #16
 800f77a:	f7ff fd7f 	bl	800f27c <malloc>
 800f77e:	4602      	mov	r2, r0
 800f780:	61f0      	str	r0, [r6, #28]
 800f782:	b928      	cbnz	r0, 800f790 <__pow5mult+0x40>
 800f784:	4b1d      	ldr	r3, [pc, #116]	; (800f7fc <__pow5mult+0xac>)
 800f786:	481e      	ldr	r0, [pc, #120]	; (800f800 <__pow5mult+0xb0>)
 800f788:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f78c:	f000 fa72 	bl	800fc74 <__assert_func>
 800f790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f794:	6004      	str	r4, [r0, #0]
 800f796:	60c4      	str	r4, [r0, #12]
 800f798:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f79c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f7a0:	b94c      	cbnz	r4, 800f7b6 <__pow5mult+0x66>
 800f7a2:	f240 2171 	movw	r1, #625	; 0x271
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f7ff ff12 	bl	800f5d0 <__i2b>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	6003      	str	r3, [r0, #0]
 800f7b6:	f04f 0900 	mov.w	r9, #0
 800f7ba:	07eb      	lsls	r3, r5, #31
 800f7bc:	d50a      	bpl.n	800f7d4 <__pow5mult+0x84>
 800f7be:	4639      	mov	r1, r7
 800f7c0:	4622      	mov	r2, r4
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f7ff ff1a 	bl	800f5fc <__multiply>
 800f7c8:	4639      	mov	r1, r7
 800f7ca:	4680      	mov	r8, r0
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	f7ff fe49 	bl	800f464 <_Bfree>
 800f7d2:	4647      	mov	r7, r8
 800f7d4:	106d      	asrs	r5, r5, #1
 800f7d6:	d00b      	beq.n	800f7f0 <__pow5mult+0xa0>
 800f7d8:	6820      	ldr	r0, [r4, #0]
 800f7da:	b938      	cbnz	r0, 800f7ec <__pow5mult+0x9c>
 800f7dc:	4622      	mov	r2, r4
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f7ff ff0b 	bl	800f5fc <__multiply>
 800f7e6:	6020      	str	r0, [r4, #0]
 800f7e8:	f8c0 9000 	str.w	r9, [r0]
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	e7e4      	b.n	800f7ba <__pow5mult+0x6a>
 800f7f0:	4638      	mov	r0, r7
 800f7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f6:	bf00      	nop
 800f7f8:	08024788 	.word	0x08024788
 800f7fc:	080245b9 	.word	0x080245b9
 800f800:	08024639 	.word	0x08024639

0800f804 <__lshift>:
 800f804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f808:	460c      	mov	r4, r1
 800f80a:	6849      	ldr	r1, [r1, #4]
 800f80c:	6923      	ldr	r3, [r4, #16]
 800f80e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f812:	68a3      	ldr	r3, [r4, #8]
 800f814:	4607      	mov	r7, r0
 800f816:	4691      	mov	r9, r2
 800f818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f81c:	f108 0601 	add.w	r6, r8, #1
 800f820:	42b3      	cmp	r3, r6
 800f822:	db0b      	blt.n	800f83c <__lshift+0x38>
 800f824:	4638      	mov	r0, r7
 800f826:	f7ff fddd 	bl	800f3e4 <_Balloc>
 800f82a:	4605      	mov	r5, r0
 800f82c:	b948      	cbnz	r0, 800f842 <__lshift+0x3e>
 800f82e:	4602      	mov	r2, r0
 800f830:	4b28      	ldr	r3, [pc, #160]	; (800f8d4 <__lshift+0xd0>)
 800f832:	4829      	ldr	r0, [pc, #164]	; (800f8d8 <__lshift+0xd4>)
 800f834:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f838:	f000 fa1c 	bl	800fc74 <__assert_func>
 800f83c:	3101      	adds	r1, #1
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	e7ee      	b.n	800f820 <__lshift+0x1c>
 800f842:	2300      	movs	r3, #0
 800f844:	f100 0114 	add.w	r1, r0, #20
 800f848:	f100 0210 	add.w	r2, r0, #16
 800f84c:	4618      	mov	r0, r3
 800f84e:	4553      	cmp	r3, sl
 800f850:	db33      	blt.n	800f8ba <__lshift+0xb6>
 800f852:	6920      	ldr	r0, [r4, #16]
 800f854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f858:	f104 0314 	add.w	r3, r4, #20
 800f85c:	f019 091f 	ands.w	r9, r9, #31
 800f860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f864:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f868:	d02b      	beq.n	800f8c2 <__lshift+0xbe>
 800f86a:	f1c9 0e20 	rsb	lr, r9, #32
 800f86e:	468a      	mov	sl, r1
 800f870:	2200      	movs	r2, #0
 800f872:	6818      	ldr	r0, [r3, #0]
 800f874:	fa00 f009 	lsl.w	r0, r0, r9
 800f878:	4310      	orrs	r0, r2
 800f87a:	f84a 0b04 	str.w	r0, [sl], #4
 800f87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f882:	459c      	cmp	ip, r3
 800f884:	fa22 f20e 	lsr.w	r2, r2, lr
 800f888:	d8f3      	bhi.n	800f872 <__lshift+0x6e>
 800f88a:	ebac 0304 	sub.w	r3, ip, r4
 800f88e:	3b15      	subs	r3, #21
 800f890:	f023 0303 	bic.w	r3, r3, #3
 800f894:	3304      	adds	r3, #4
 800f896:	f104 0015 	add.w	r0, r4, #21
 800f89a:	4584      	cmp	ip, r0
 800f89c:	bf38      	it	cc
 800f89e:	2304      	movcc	r3, #4
 800f8a0:	50ca      	str	r2, [r1, r3]
 800f8a2:	b10a      	cbz	r2, 800f8a8 <__lshift+0xa4>
 800f8a4:	f108 0602 	add.w	r6, r8, #2
 800f8a8:	3e01      	subs	r6, #1
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	612e      	str	r6, [r5, #16]
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	f7ff fdd8 	bl	800f464 <_Bfree>
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8be:	3301      	adds	r3, #1
 800f8c0:	e7c5      	b.n	800f84e <__lshift+0x4a>
 800f8c2:	3904      	subs	r1, #4
 800f8c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f8cc:	459c      	cmp	ip, r3
 800f8ce:	d8f9      	bhi.n	800f8c4 <__lshift+0xc0>
 800f8d0:	e7ea      	b.n	800f8a8 <__lshift+0xa4>
 800f8d2:	bf00      	nop
 800f8d4:	08024628 	.word	0x08024628
 800f8d8:	08024639 	.word	0x08024639

0800f8dc <__mcmp>:
 800f8dc:	b530      	push	{r4, r5, lr}
 800f8de:	6902      	ldr	r2, [r0, #16]
 800f8e0:	690c      	ldr	r4, [r1, #16]
 800f8e2:	1b12      	subs	r2, r2, r4
 800f8e4:	d10e      	bne.n	800f904 <__mcmp+0x28>
 800f8e6:	f100 0314 	add.w	r3, r0, #20
 800f8ea:	3114      	adds	r1, #20
 800f8ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f8f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f8f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f8f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f8fc:	42a5      	cmp	r5, r4
 800f8fe:	d003      	beq.n	800f908 <__mcmp+0x2c>
 800f900:	d305      	bcc.n	800f90e <__mcmp+0x32>
 800f902:	2201      	movs	r2, #1
 800f904:	4610      	mov	r0, r2
 800f906:	bd30      	pop	{r4, r5, pc}
 800f908:	4283      	cmp	r3, r0
 800f90a:	d3f3      	bcc.n	800f8f4 <__mcmp+0x18>
 800f90c:	e7fa      	b.n	800f904 <__mcmp+0x28>
 800f90e:	f04f 32ff 	mov.w	r2, #4294967295
 800f912:	e7f7      	b.n	800f904 <__mcmp+0x28>

0800f914 <__mdiff>:
 800f914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f918:	460c      	mov	r4, r1
 800f91a:	4606      	mov	r6, r0
 800f91c:	4611      	mov	r1, r2
 800f91e:	4620      	mov	r0, r4
 800f920:	4690      	mov	r8, r2
 800f922:	f7ff ffdb 	bl	800f8dc <__mcmp>
 800f926:	1e05      	subs	r5, r0, #0
 800f928:	d110      	bne.n	800f94c <__mdiff+0x38>
 800f92a:	4629      	mov	r1, r5
 800f92c:	4630      	mov	r0, r6
 800f92e:	f7ff fd59 	bl	800f3e4 <_Balloc>
 800f932:	b930      	cbnz	r0, 800f942 <__mdiff+0x2e>
 800f934:	4b3a      	ldr	r3, [pc, #232]	; (800fa20 <__mdiff+0x10c>)
 800f936:	4602      	mov	r2, r0
 800f938:	f240 2137 	movw	r1, #567	; 0x237
 800f93c:	4839      	ldr	r0, [pc, #228]	; (800fa24 <__mdiff+0x110>)
 800f93e:	f000 f999 	bl	800fc74 <__assert_func>
 800f942:	2301      	movs	r3, #1
 800f944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f94c:	bfa4      	itt	ge
 800f94e:	4643      	movge	r3, r8
 800f950:	46a0      	movge	r8, r4
 800f952:	4630      	mov	r0, r6
 800f954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f958:	bfa6      	itte	ge
 800f95a:	461c      	movge	r4, r3
 800f95c:	2500      	movge	r5, #0
 800f95e:	2501      	movlt	r5, #1
 800f960:	f7ff fd40 	bl	800f3e4 <_Balloc>
 800f964:	b920      	cbnz	r0, 800f970 <__mdiff+0x5c>
 800f966:	4b2e      	ldr	r3, [pc, #184]	; (800fa20 <__mdiff+0x10c>)
 800f968:	4602      	mov	r2, r0
 800f96a:	f240 2145 	movw	r1, #581	; 0x245
 800f96e:	e7e5      	b.n	800f93c <__mdiff+0x28>
 800f970:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f974:	6926      	ldr	r6, [r4, #16]
 800f976:	60c5      	str	r5, [r0, #12]
 800f978:	f104 0914 	add.w	r9, r4, #20
 800f97c:	f108 0514 	add.w	r5, r8, #20
 800f980:	f100 0e14 	add.w	lr, r0, #20
 800f984:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f98c:	f108 0210 	add.w	r2, r8, #16
 800f990:	46f2      	mov	sl, lr
 800f992:	2100      	movs	r1, #0
 800f994:	f859 3b04 	ldr.w	r3, [r9], #4
 800f998:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f99c:	fa11 f88b 	uxtah	r8, r1, fp
 800f9a0:	b299      	uxth	r1, r3
 800f9a2:	0c1b      	lsrs	r3, r3, #16
 800f9a4:	eba8 0801 	sub.w	r8, r8, r1
 800f9a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f9ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f9b0:	fa1f f888 	uxth.w	r8, r8
 800f9b4:	1419      	asrs	r1, r3, #16
 800f9b6:	454e      	cmp	r6, r9
 800f9b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f9bc:	f84a 3b04 	str.w	r3, [sl], #4
 800f9c0:	d8e8      	bhi.n	800f994 <__mdiff+0x80>
 800f9c2:	1b33      	subs	r3, r6, r4
 800f9c4:	3b15      	subs	r3, #21
 800f9c6:	f023 0303 	bic.w	r3, r3, #3
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	3415      	adds	r4, #21
 800f9ce:	42a6      	cmp	r6, r4
 800f9d0:	bf38      	it	cc
 800f9d2:	2304      	movcc	r3, #4
 800f9d4:	441d      	add	r5, r3
 800f9d6:	4473      	add	r3, lr
 800f9d8:	469e      	mov	lr, r3
 800f9da:	462e      	mov	r6, r5
 800f9dc:	4566      	cmp	r6, ip
 800f9de:	d30e      	bcc.n	800f9fe <__mdiff+0xea>
 800f9e0:	f10c 0203 	add.w	r2, ip, #3
 800f9e4:	1b52      	subs	r2, r2, r5
 800f9e6:	f022 0203 	bic.w	r2, r2, #3
 800f9ea:	3d03      	subs	r5, #3
 800f9ec:	45ac      	cmp	ip, r5
 800f9ee:	bf38      	it	cc
 800f9f0:	2200      	movcc	r2, #0
 800f9f2:	4413      	add	r3, r2
 800f9f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f9f8:	b17a      	cbz	r2, 800fa1a <__mdiff+0x106>
 800f9fa:	6107      	str	r7, [r0, #16]
 800f9fc:	e7a4      	b.n	800f948 <__mdiff+0x34>
 800f9fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa02:	fa11 f288 	uxtah	r2, r1, r8
 800fa06:	1414      	asrs	r4, r2, #16
 800fa08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fa0c:	b292      	uxth	r2, r2
 800fa0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fa12:	f84e 2b04 	str.w	r2, [lr], #4
 800fa16:	1421      	asrs	r1, r4, #16
 800fa18:	e7e0      	b.n	800f9dc <__mdiff+0xc8>
 800fa1a:	3f01      	subs	r7, #1
 800fa1c:	e7ea      	b.n	800f9f4 <__mdiff+0xe0>
 800fa1e:	bf00      	nop
 800fa20:	08024628 	.word	0x08024628
 800fa24:	08024639 	.word	0x08024639

0800fa28 <__d2b>:
 800fa28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa2c:	460f      	mov	r7, r1
 800fa2e:	2101      	movs	r1, #1
 800fa30:	ec59 8b10 	vmov	r8, r9, d0
 800fa34:	4616      	mov	r6, r2
 800fa36:	f7ff fcd5 	bl	800f3e4 <_Balloc>
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	b930      	cbnz	r0, 800fa4c <__d2b+0x24>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	4b24      	ldr	r3, [pc, #144]	; (800fad4 <__d2b+0xac>)
 800fa42:	4825      	ldr	r0, [pc, #148]	; (800fad8 <__d2b+0xb0>)
 800fa44:	f240 310f 	movw	r1, #783	; 0x30f
 800fa48:	f000 f914 	bl	800fc74 <__assert_func>
 800fa4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fa50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa54:	bb2d      	cbnz	r5, 800faa2 <__d2b+0x7a>
 800fa56:	9301      	str	r3, [sp, #4]
 800fa58:	f1b8 0300 	subs.w	r3, r8, #0
 800fa5c:	d026      	beq.n	800faac <__d2b+0x84>
 800fa5e:	4668      	mov	r0, sp
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	f7ff fd87 	bl	800f574 <__lo0bits>
 800fa66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fa6a:	b1e8      	cbz	r0, 800faa8 <__d2b+0x80>
 800fa6c:	f1c0 0320 	rsb	r3, r0, #32
 800fa70:	fa02 f303 	lsl.w	r3, r2, r3
 800fa74:	430b      	orrs	r3, r1
 800fa76:	40c2      	lsrs	r2, r0
 800fa78:	6163      	str	r3, [r4, #20]
 800fa7a:	9201      	str	r2, [sp, #4]
 800fa7c:	9b01      	ldr	r3, [sp, #4]
 800fa7e:	61a3      	str	r3, [r4, #24]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	bf14      	ite	ne
 800fa84:	2202      	movne	r2, #2
 800fa86:	2201      	moveq	r2, #1
 800fa88:	6122      	str	r2, [r4, #16]
 800fa8a:	b1bd      	cbz	r5, 800fabc <__d2b+0x94>
 800fa8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fa90:	4405      	add	r5, r0
 800fa92:	603d      	str	r5, [r7, #0]
 800fa94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa98:	6030      	str	r0, [r6, #0]
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	b003      	add	sp, #12
 800fa9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800faa6:	e7d6      	b.n	800fa56 <__d2b+0x2e>
 800faa8:	6161      	str	r1, [r4, #20]
 800faaa:	e7e7      	b.n	800fa7c <__d2b+0x54>
 800faac:	a801      	add	r0, sp, #4
 800faae:	f7ff fd61 	bl	800f574 <__lo0bits>
 800fab2:	9b01      	ldr	r3, [sp, #4]
 800fab4:	6163      	str	r3, [r4, #20]
 800fab6:	3020      	adds	r0, #32
 800fab8:	2201      	movs	r2, #1
 800faba:	e7e5      	b.n	800fa88 <__d2b+0x60>
 800fabc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fac0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fac4:	6038      	str	r0, [r7, #0]
 800fac6:	6918      	ldr	r0, [r3, #16]
 800fac8:	f7ff fd34 	bl	800f534 <__hi0bits>
 800facc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fad0:	e7e2      	b.n	800fa98 <__d2b+0x70>
 800fad2:	bf00      	nop
 800fad4:	08024628 	.word	0x08024628
 800fad8:	08024639 	.word	0x08024639

0800fadc <__sflush_r>:
 800fadc:	898a      	ldrh	r2, [r1, #12]
 800fade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae2:	4605      	mov	r5, r0
 800fae4:	0710      	lsls	r0, r2, #28
 800fae6:	460c      	mov	r4, r1
 800fae8:	d458      	bmi.n	800fb9c <__sflush_r+0xc0>
 800faea:	684b      	ldr	r3, [r1, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	dc05      	bgt.n	800fafc <__sflush_r+0x20>
 800faf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	dc02      	bgt.n	800fafc <__sflush_r+0x20>
 800faf6:	2000      	movs	r0, #0
 800faf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fafc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fafe:	2e00      	cmp	r6, #0
 800fb00:	d0f9      	beq.n	800faf6 <__sflush_r+0x1a>
 800fb02:	2300      	movs	r3, #0
 800fb04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb08:	682f      	ldr	r7, [r5, #0]
 800fb0a:	6a21      	ldr	r1, [r4, #32]
 800fb0c:	602b      	str	r3, [r5, #0]
 800fb0e:	d032      	beq.n	800fb76 <__sflush_r+0x9a>
 800fb10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb12:	89a3      	ldrh	r3, [r4, #12]
 800fb14:	075a      	lsls	r2, r3, #29
 800fb16:	d505      	bpl.n	800fb24 <__sflush_r+0x48>
 800fb18:	6863      	ldr	r3, [r4, #4]
 800fb1a:	1ac0      	subs	r0, r0, r3
 800fb1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb1e:	b10b      	cbz	r3, 800fb24 <__sflush_r+0x48>
 800fb20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb22:	1ac0      	subs	r0, r0, r3
 800fb24:	2300      	movs	r3, #0
 800fb26:	4602      	mov	r2, r0
 800fb28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb2a:	6a21      	ldr	r1, [r4, #32]
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	47b0      	blx	r6
 800fb30:	1c43      	adds	r3, r0, #1
 800fb32:	89a3      	ldrh	r3, [r4, #12]
 800fb34:	d106      	bne.n	800fb44 <__sflush_r+0x68>
 800fb36:	6829      	ldr	r1, [r5, #0]
 800fb38:	291d      	cmp	r1, #29
 800fb3a:	d82b      	bhi.n	800fb94 <__sflush_r+0xb8>
 800fb3c:	4a29      	ldr	r2, [pc, #164]	; (800fbe4 <__sflush_r+0x108>)
 800fb3e:	410a      	asrs	r2, r1
 800fb40:	07d6      	lsls	r6, r2, #31
 800fb42:	d427      	bmi.n	800fb94 <__sflush_r+0xb8>
 800fb44:	2200      	movs	r2, #0
 800fb46:	6062      	str	r2, [r4, #4]
 800fb48:	04d9      	lsls	r1, r3, #19
 800fb4a:	6922      	ldr	r2, [r4, #16]
 800fb4c:	6022      	str	r2, [r4, #0]
 800fb4e:	d504      	bpl.n	800fb5a <__sflush_r+0x7e>
 800fb50:	1c42      	adds	r2, r0, #1
 800fb52:	d101      	bne.n	800fb58 <__sflush_r+0x7c>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	b903      	cbnz	r3, 800fb5a <__sflush_r+0x7e>
 800fb58:	6560      	str	r0, [r4, #84]	; 0x54
 800fb5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb5c:	602f      	str	r7, [r5, #0]
 800fb5e:	2900      	cmp	r1, #0
 800fb60:	d0c9      	beq.n	800faf6 <__sflush_r+0x1a>
 800fb62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb66:	4299      	cmp	r1, r3
 800fb68:	d002      	beq.n	800fb70 <__sflush_r+0x94>
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f7ff fb3a 	bl	800f1e4 <_free_r>
 800fb70:	2000      	movs	r0, #0
 800fb72:	6360      	str	r0, [r4, #52]	; 0x34
 800fb74:	e7c0      	b.n	800faf8 <__sflush_r+0x1c>
 800fb76:	2301      	movs	r3, #1
 800fb78:	4628      	mov	r0, r5
 800fb7a:	47b0      	blx	r6
 800fb7c:	1c41      	adds	r1, r0, #1
 800fb7e:	d1c8      	bne.n	800fb12 <__sflush_r+0x36>
 800fb80:	682b      	ldr	r3, [r5, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d0c5      	beq.n	800fb12 <__sflush_r+0x36>
 800fb86:	2b1d      	cmp	r3, #29
 800fb88:	d001      	beq.n	800fb8e <__sflush_r+0xb2>
 800fb8a:	2b16      	cmp	r3, #22
 800fb8c:	d101      	bne.n	800fb92 <__sflush_r+0xb6>
 800fb8e:	602f      	str	r7, [r5, #0]
 800fb90:	e7b1      	b.n	800faf6 <__sflush_r+0x1a>
 800fb92:	89a3      	ldrh	r3, [r4, #12]
 800fb94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb98:	81a3      	strh	r3, [r4, #12]
 800fb9a:	e7ad      	b.n	800faf8 <__sflush_r+0x1c>
 800fb9c:	690f      	ldr	r7, [r1, #16]
 800fb9e:	2f00      	cmp	r7, #0
 800fba0:	d0a9      	beq.n	800faf6 <__sflush_r+0x1a>
 800fba2:	0793      	lsls	r3, r2, #30
 800fba4:	680e      	ldr	r6, [r1, #0]
 800fba6:	bf08      	it	eq
 800fba8:	694b      	ldreq	r3, [r1, #20]
 800fbaa:	600f      	str	r7, [r1, #0]
 800fbac:	bf18      	it	ne
 800fbae:	2300      	movne	r3, #0
 800fbb0:	eba6 0807 	sub.w	r8, r6, r7
 800fbb4:	608b      	str	r3, [r1, #8]
 800fbb6:	f1b8 0f00 	cmp.w	r8, #0
 800fbba:	dd9c      	ble.n	800faf6 <__sflush_r+0x1a>
 800fbbc:	6a21      	ldr	r1, [r4, #32]
 800fbbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbc0:	4643      	mov	r3, r8
 800fbc2:	463a      	mov	r2, r7
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	47b0      	blx	r6
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	dc06      	bgt.n	800fbda <__sflush_r+0xfe>
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbd2:	81a3      	strh	r3, [r4, #12]
 800fbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd8:	e78e      	b.n	800faf8 <__sflush_r+0x1c>
 800fbda:	4407      	add	r7, r0
 800fbdc:	eba8 0800 	sub.w	r8, r8, r0
 800fbe0:	e7e9      	b.n	800fbb6 <__sflush_r+0xda>
 800fbe2:	bf00      	nop
 800fbe4:	dfbffffe 	.word	0xdfbffffe

0800fbe8 <_fflush_r>:
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	690b      	ldr	r3, [r1, #16]
 800fbec:	4605      	mov	r5, r0
 800fbee:	460c      	mov	r4, r1
 800fbf0:	b913      	cbnz	r3, 800fbf8 <_fflush_r+0x10>
 800fbf2:	2500      	movs	r5, #0
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	bd38      	pop	{r3, r4, r5, pc}
 800fbf8:	b118      	cbz	r0, 800fc02 <_fflush_r+0x1a>
 800fbfa:	6a03      	ldr	r3, [r0, #32]
 800fbfc:	b90b      	cbnz	r3, 800fc02 <_fflush_r+0x1a>
 800fbfe:	f7fe fb7d 	bl	800e2fc <__sinit>
 800fc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d0f3      	beq.n	800fbf2 <_fflush_r+0xa>
 800fc0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc0c:	07d0      	lsls	r0, r2, #31
 800fc0e:	d404      	bmi.n	800fc1a <_fflush_r+0x32>
 800fc10:	0599      	lsls	r1, r3, #22
 800fc12:	d402      	bmi.n	800fc1a <_fflush_r+0x32>
 800fc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc16:	f7fe fc68 	bl	800e4ea <__retarget_lock_acquire_recursive>
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	4621      	mov	r1, r4
 800fc1e:	f7ff ff5d 	bl	800fadc <__sflush_r>
 800fc22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc24:	07da      	lsls	r2, r3, #31
 800fc26:	4605      	mov	r5, r0
 800fc28:	d4e4      	bmi.n	800fbf4 <_fflush_r+0xc>
 800fc2a:	89a3      	ldrh	r3, [r4, #12]
 800fc2c:	059b      	lsls	r3, r3, #22
 800fc2e:	d4e1      	bmi.n	800fbf4 <_fflush_r+0xc>
 800fc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc32:	f7fe fc5b 	bl	800e4ec <__retarget_lock_release_recursive>
 800fc36:	e7dd      	b.n	800fbf4 <_fflush_r+0xc>

0800fc38 <_sbrk_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d06      	ldr	r5, [pc, #24]	; (800fc54 <_sbrk_r+0x1c>)
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4604      	mov	r4, r0
 800fc40:	4608      	mov	r0, r1
 800fc42:	602b      	str	r3, [r5, #0]
 800fc44:	f7f7 fbb8 	bl	80073b8 <_sbrk>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d102      	bne.n	800fc52 <_sbrk_r+0x1a>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	b103      	cbz	r3, 800fc52 <_sbrk_r+0x1a>
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	2001b63c 	.word	0x2001b63c

0800fc58 <memcpy>:
 800fc58:	440a      	add	r2, r1
 800fc5a:	4291      	cmp	r1, r2
 800fc5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc60:	d100      	bne.n	800fc64 <memcpy+0xc>
 800fc62:	4770      	bx	lr
 800fc64:	b510      	push	{r4, lr}
 800fc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc6e:	4291      	cmp	r1, r2
 800fc70:	d1f9      	bne.n	800fc66 <memcpy+0xe>
 800fc72:	bd10      	pop	{r4, pc}

0800fc74 <__assert_func>:
 800fc74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc76:	4614      	mov	r4, r2
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4b09      	ldr	r3, [pc, #36]	; (800fca0 <__assert_func+0x2c>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4605      	mov	r5, r0
 800fc80:	68d8      	ldr	r0, [r3, #12]
 800fc82:	b14c      	cbz	r4, 800fc98 <__assert_func+0x24>
 800fc84:	4b07      	ldr	r3, [pc, #28]	; (800fca4 <__assert_func+0x30>)
 800fc86:	9100      	str	r1, [sp, #0]
 800fc88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc8c:	4906      	ldr	r1, [pc, #24]	; (800fca8 <__assert_func+0x34>)
 800fc8e:	462b      	mov	r3, r5
 800fc90:	f000 f844 	bl	800fd1c <fiprintf>
 800fc94:	f000 f854 	bl	800fd40 <abort>
 800fc98:	4b04      	ldr	r3, [pc, #16]	; (800fcac <__assert_func+0x38>)
 800fc9a:	461c      	mov	r4, r3
 800fc9c:	e7f3      	b.n	800fc86 <__assert_func+0x12>
 800fc9e:	bf00      	nop
 800fca0:	200078d0 	.word	0x200078d0
 800fca4:	0802479e 	.word	0x0802479e
 800fca8:	080247ab 	.word	0x080247ab
 800fcac:	080247d9 	.word	0x080247d9

0800fcb0 <_calloc_r>:
 800fcb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcb2:	fba1 2402 	umull	r2, r4, r1, r2
 800fcb6:	b94c      	cbnz	r4, 800fccc <_calloc_r+0x1c>
 800fcb8:	4611      	mov	r1, r2
 800fcba:	9201      	str	r2, [sp, #4]
 800fcbc:	f7ff fb06 	bl	800f2cc <_malloc_r>
 800fcc0:	9a01      	ldr	r2, [sp, #4]
 800fcc2:	4605      	mov	r5, r0
 800fcc4:	b930      	cbnz	r0, 800fcd4 <_calloc_r+0x24>
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	b003      	add	sp, #12
 800fcca:	bd30      	pop	{r4, r5, pc}
 800fccc:	220c      	movs	r2, #12
 800fcce:	6002      	str	r2, [r0, #0]
 800fcd0:	2500      	movs	r5, #0
 800fcd2:	e7f8      	b.n	800fcc6 <_calloc_r+0x16>
 800fcd4:	4621      	mov	r1, r4
 800fcd6:	f7fe fb8a 	bl	800e3ee <memset>
 800fcda:	e7f4      	b.n	800fcc6 <_calloc_r+0x16>

0800fcdc <__ascii_mbtowc>:
 800fcdc:	b082      	sub	sp, #8
 800fcde:	b901      	cbnz	r1, 800fce2 <__ascii_mbtowc+0x6>
 800fce0:	a901      	add	r1, sp, #4
 800fce2:	b142      	cbz	r2, 800fcf6 <__ascii_mbtowc+0x1a>
 800fce4:	b14b      	cbz	r3, 800fcfa <__ascii_mbtowc+0x1e>
 800fce6:	7813      	ldrb	r3, [r2, #0]
 800fce8:	600b      	str	r3, [r1, #0]
 800fcea:	7812      	ldrb	r2, [r2, #0]
 800fcec:	1e10      	subs	r0, r2, #0
 800fcee:	bf18      	it	ne
 800fcf0:	2001      	movne	r0, #1
 800fcf2:	b002      	add	sp, #8
 800fcf4:	4770      	bx	lr
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	e7fb      	b.n	800fcf2 <__ascii_mbtowc+0x16>
 800fcfa:	f06f 0001 	mvn.w	r0, #1
 800fcfe:	e7f8      	b.n	800fcf2 <__ascii_mbtowc+0x16>

0800fd00 <__ascii_wctomb>:
 800fd00:	b149      	cbz	r1, 800fd16 <__ascii_wctomb+0x16>
 800fd02:	2aff      	cmp	r2, #255	; 0xff
 800fd04:	bf85      	ittet	hi
 800fd06:	238a      	movhi	r3, #138	; 0x8a
 800fd08:	6003      	strhi	r3, [r0, #0]
 800fd0a:	700a      	strbls	r2, [r1, #0]
 800fd0c:	f04f 30ff 	movhi.w	r0, #4294967295
 800fd10:	bf98      	it	ls
 800fd12:	2001      	movls	r0, #1
 800fd14:	4770      	bx	lr
 800fd16:	4608      	mov	r0, r1
 800fd18:	4770      	bx	lr
	...

0800fd1c <fiprintf>:
 800fd1c:	b40e      	push	{r1, r2, r3}
 800fd1e:	b503      	push	{r0, r1, lr}
 800fd20:	4601      	mov	r1, r0
 800fd22:	ab03      	add	r3, sp, #12
 800fd24:	4805      	ldr	r0, [pc, #20]	; (800fd3c <fiprintf+0x20>)
 800fd26:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd2a:	6800      	ldr	r0, [r0, #0]
 800fd2c:	9301      	str	r3, [sp, #4]
 800fd2e:	f000 f837 	bl	800fda0 <_vfiprintf_r>
 800fd32:	b002      	add	sp, #8
 800fd34:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd38:	b003      	add	sp, #12
 800fd3a:	4770      	bx	lr
 800fd3c:	200078d0 	.word	0x200078d0

0800fd40 <abort>:
 800fd40:	b508      	push	{r3, lr}
 800fd42:	2006      	movs	r0, #6
 800fd44:	f000 fa04 	bl	8010150 <raise>
 800fd48:	2001      	movs	r0, #1
 800fd4a:	f7f7 fabd 	bl	80072c8 <_exit>

0800fd4e <__sfputc_r>:
 800fd4e:	6893      	ldr	r3, [r2, #8]
 800fd50:	3b01      	subs	r3, #1
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	b410      	push	{r4}
 800fd56:	6093      	str	r3, [r2, #8]
 800fd58:	da08      	bge.n	800fd6c <__sfputc_r+0x1e>
 800fd5a:	6994      	ldr	r4, [r2, #24]
 800fd5c:	42a3      	cmp	r3, r4
 800fd5e:	db01      	blt.n	800fd64 <__sfputc_r+0x16>
 800fd60:	290a      	cmp	r1, #10
 800fd62:	d103      	bne.n	800fd6c <__sfputc_r+0x1e>
 800fd64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd68:	f000 b934 	b.w	800ffd4 <__swbuf_r>
 800fd6c:	6813      	ldr	r3, [r2, #0]
 800fd6e:	1c58      	adds	r0, r3, #1
 800fd70:	6010      	str	r0, [r2, #0]
 800fd72:	7019      	strb	r1, [r3, #0]
 800fd74:	4608      	mov	r0, r1
 800fd76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <__sfputs_r>:
 800fd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7e:	4606      	mov	r6, r0
 800fd80:	460f      	mov	r7, r1
 800fd82:	4614      	mov	r4, r2
 800fd84:	18d5      	adds	r5, r2, r3
 800fd86:	42ac      	cmp	r4, r5
 800fd88:	d101      	bne.n	800fd8e <__sfputs_r+0x12>
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	e007      	b.n	800fd9e <__sfputs_r+0x22>
 800fd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd92:	463a      	mov	r2, r7
 800fd94:	4630      	mov	r0, r6
 800fd96:	f7ff ffda 	bl	800fd4e <__sfputc_r>
 800fd9a:	1c43      	adds	r3, r0, #1
 800fd9c:	d1f3      	bne.n	800fd86 <__sfputs_r+0xa>
 800fd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fda0 <_vfiprintf_r>:
 800fda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda4:	460d      	mov	r5, r1
 800fda6:	b09d      	sub	sp, #116	; 0x74
 800fda8:	4614      	mov	r4, r2
 800fdaa:	4698      	mov	r8, r3
 800fdac:	4606      	mov	r6, r0
 800fdae:	b118      	cbz	r0, 800fdb8 <_vfiprintf_r+0x18>
 800fdb0:	6a03      	ldr	r3, [r0, #32]
 800fdb2:	b90b      	cbnz	r3, 800fdb8 <_vfiprintf_r+0x18>
 800fdb4:	f7fe faa2 	bl	800e2fc <__sinit>
 800fdb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdba:	07d9      	lsls	r1, r3, #31
 800fdbc:	d405      	bmi.n	800fdca <_vfiprintf_r+0x2a>
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	059a      	lsls	r2, r3, #22
 800fdc2:	d402      	bmi.n	800fdca <_vfiprintf_r+0x2a>
 800fdc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdc6:	f7fe fb90 	bl	800e4ea <__retarget_lock_acquire_recursive>
 800fdca:	89ab      	ldrh	r3, [r5, #12]
 800fdcc:	071b      	lsls	r3, r3, #28
 800fdce:	d501      	bpl.n	800fdd4 <_vfiprintf_r+0x34>
 800fdd0:	692b      	ldr	r3, [r5, #16]
 800fdd2:	b99b      	cbnz	r3, 800fdfc <_vfiprintf_r+0x5c>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f000 f93a 	bl	8010050 <__swsetup_r>
 800fddc:	b170      	cbz	r0, 800fdfc <_vfiprintf_r+0x5c>
 800fdde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fde0:	07dc      	lsls	r4, r3, #31
 800fde2:	d504      	bpl.n	800fdee <_vfiprintf_r+0x4e>
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295
 800fde8:	b01d      	add	sp, #116	; 0x74
 800fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdee:	89ab      	ldrh	r3, [r5, #12]
 800fdf0:	0598      	lsls	r0, r3, #22
 800fdf2:	d4f7      	bmi.n	800fde4 <_vfiprintf_r+0x44>
 800fdf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdf6:	f7fe fb79 	bl	800e4ec <__retarget_lock_release_recursive>
 800fdfa:	e7f3      	b.n	800fde4 <_vfiprintf_r+0x44>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	9309      	str	r3, [sp, #36]	; 0x24
 800fe00:	2320      	movs	r3, #32
 800fe02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe06:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe0a:	2330      	movs	r3, #48	; 0x30
 800fe0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ffc0 <_vfiprintf_r+0x220>
 800fe10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe14:	f04f 0901 	mov.w	r9, #1
 800fe18:	4623      	mov	r3, r4
 800fe1a:	469a      	mov	sl, r3
 800fe1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe20:	b10a      	cbz	r2, 800fe26 <_vfiprintf_r+0x86>
 800fe22:	2a25      	cmp	r2, #37	; 0x25
 800fe24:	d1f9      	bne.n	800fe1a <_vfiprintf_r+0x7a>
 800fe26:	ebba 0b04 	subs.w	fp, sl, r4
 800fe2a:	d00b      	beq.n	800fe44 <_vfiprintf_r+0xa4>
 800fe2c:	465b      	mov	r3, fp
 800fe2e:	4622      	mov	r2, r4
 800fe30:	4629      	mov	r1, r5
 800fe32:	4630      	mov	r0, r6
 800fe34:	f7ff ffa2 	bl	800fd7c <__sfputs_r>
 800fe38:	3001      	adds	r0, #1
 800fe3a:	f000 80a9 	beq.w	800ff90 <_vfiprintf_r+0x1f0>
 800fe3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe40:	445a      	add	r2, fp
 800fe42:	9209      	str	r2, [sp, #36]	; 0x24
 800fe44:	f89a 3000 	ldrb.w	r3, [sl]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f000 80a1 	beq.w	800ff90 <_vfiprintf_r+0x1f0>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	f04f 32ff 	mov.w	r2, #4294967295
 800fe54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe58:	f10a 0a01 	add.w	sl, sl, #1
 800fe5c:	9304      	str	r3, [sp, #16]
 800fe5e:	9307      	str	r3, [sp, #28]
 800fe60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe64:	931a      	str	r3, [sp, #104]	; 0x68
 800fe66:	4654      	mov	r4, sl
 800fe68:	2205      	movs	r2, #5
 800fe6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe6e:	4854      	ldr	r0, [pc, #336]	; (800ffc0 <_vfiprintf_r+0x220>)
 800fe70:	f7f0 f9d6 	bl	8000220 <memchr>
 800fe74:	9a04      	ldr	r2, [sp, #16]
 800fe76:	b9d8      	cbnz	r0, 800feb0 <_vfiprintf_r+0x110>
 800fe78:	06d1      	lsls	r1, r2, #27
 800fe7a:	bf44      	itt	mi
 800fe7c:	2320      	movmi	r3, #32
 800fe7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe82:	0713      	lsls	r3, r2, #28
 800fe84:	bf44      	itt	mi
 800fe86:	232b      	movmi	r3, #43	; 0x2b
 800fe88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe8c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe90:	2b2a      	cmp	r3, #42	; 0x2a
 800fe92:	d015      	beq.n	800fec0 <_vfiprintf_r+0x120>
 800fe94:	9a07      	ldr	r2, [sp, #28]
 800fe96:	4654      	mov	r4, sl
 800fe98:	2000      	movs	r0, #0
 800fe9a:	f04f 0c0a 	mov.w	ip, #10
 800fe9e:	4621      	mov	r1, r4
 800fea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fea4:	3b30      	subs	r3, #48	; 0x30
 800fea6:	2b09      	cmp	r3, #9
 800fea8:	d94d      	bls.n	800ff46 <_vfiprintf_r+0x1a6>
 800feaa:	b1b0      	cbz	r0, 800feda <_vfiprintf_r+0x13a>
 800feac:	9207      	str	r2, [sp, #28]
 800feae:	e014      	b.n	800feda <_vfiprintf_r+0x13a>
 800feb0:	eba0 0308 	sub.w	r3, r0, r8
 800feb4:	fa09 f303 	lsl.w	r3, r9, r3
 800feb8:	4313      	orrs	r3, r2
 800feba:	9304      	str	r3, [sp, #16]
 800febc:	46a2      	mov	sl, r4
 800febe:	e7d2      	b.n	800fe66 <_vfiprintf_r+0xc6>
 800fec0:	9b03      	ldr	r3, [sp, #12]
 800fec2:	1d19      	adds	r1, r3, #4
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	9103      	str	r1, [sp, #12]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	bfbb      	ittet	lt
 800fecc:	425b      	neglt	r3, r3
 800fece:	f042 0202 	orrlt.w	r2, r2, #2
 800fed2:	9307      	strge	r3, [sp, #28]
 800fed4:	9307      	strlt	r3, [sp, #28]
 800fed6:	bfb8      	it	lt
 800fed8:	9204      	strlt	r2, [sp, #16]
 800feda:	7823      	ldrb	r3, [r4, #0]
 800fedc:	2b2e      	cmp	r3, #46	; 0x2e
 800fede:	d10c      	bne.n	800fefa <_vfiprintf_r+0x15a>
 800fee0:	7863      	ldrb	r3, [r4, #1]
 800fee2:	2b2a      	cmp	r3, #42	; 0x2a
 800fee4:	d134      	bne.n	800ff50 <_vfiprintf_r+0x1b0>
 800fee6:	9b03      	ldr	r3, [sp, #12]
 800fee8:	1d1a      	adds	r2, r3, #4
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	9203      	str	r2, [sp, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	bfb8      	it	lt
 800fef2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fef6:	3402      	adds	r4, #2
 800fef8:	9305      	str	r3, [sp, #20]
 800fefa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ffd0 <_vfiprintf_r+0x230>
 800fefe:	7821      	ldrb	r1, [r4, #0]
 800ff00:	2203      	movs	r2, #3
 800ff02:	4650      	mov	r0, sl
 800ff04:	f7f0 f98c 	bl	8000220 <memchr>
 800ff08:	b138      	cbz	r0, 800ff1a <_vfiprintf_r+0x17a>
 800ff0a:	9b04      	ldr	r3, [sp, #16]
 800ff0c:	eba0 000a 	sub.w	r0, r0, sl
 800ff10:	2240      	movs	r2, #64	; 0x40
 800ff12:	4082      	lsls	r2, r0
 800ff14:	4313      	orrs	r3, r2
 800ff16:	3401      	adds	r4, #1
 800ff18:	9304      	str	r3, [sp, #16]
 800ff1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff1e:	4829      	ldr	r0, [pc, #164]	; (800ffc4 <_vfiprintf_r+0x224>)
 800ff20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff24:	2206      	movs	r2, #6
 800ff26:	f7f0 f97b 	bl	8000220 <memchr>
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d03f      	beq.n	800ffae <_vfiprintf_r+0x20e>
 800ff2e:	4b26      	ldr	r3, [pc, #152]	; (800ffc8 <_vfiprintf_r+0x228>)
 800ff30:	bb1b      	cbnz	r3, 800ff7a <_vfiprintf_r+0x1da>
 800ff32:	9b03      	ldr	r3, [sp, #12]
 800ff34:	3307      	adds	r3, #7
 800ff36:	f023 0307 	bic.w	r3, r3, #7
 800ff3a:	3308      	adds	r3, #8
 800ff3c:	9303      	str	r3, [sp, #12]
 800ff3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff40:	443b      	add	r3, r7
 800ff42:	9309      	str	r3, [sp, #36]	; 0x24
 800ff44:	e768      	b.n	800fe18 <_vfiprintf_r+0x78>
 800ff46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	2001      	movs	r0, #1
 800ff4e:	e7a6      	b.n	800fe9e <_vfiprintf_r+0xfe>
 800ff50:	2300      	movs	r3, #0
 800ff52:	3401      	adds	r4, #1
 800ff54:	9305      	str	r3, [sp, #20]
 800ff56:	4619      	mov	r1, r3
 800ff58:	f04f 0c0a 	mov.w	ip, #10
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff62:	3a30      	subs	r2, #48	; 0x30
 800ff64:	2a09      	cmp	r2, #9
 800ff66:	d903      	bls.n	800ff70 <_vfiprintf_r+0x1d0>
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d0c6      	beq.n	800fefa <_vfiprintf_r+0x15a>
 800ff6c:	9105      	str	r1, [sp, #20]
 800ff6e:	e7c4      	b.n	800fefa <_vfiprintf_r+0x15a>
 800ff70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff74:	4604      	mov	r4, r0
 800ff76:	2301      	movs	r3, #1
 800ff78:	e7f0      	b.n	800ff5c <_vfiprintf_r+0x1bc>
 800ff7a:	ab03      	add	r3, sp, #12
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	462a      	mov	r2, r5
 800ff80:	4b12      	ldr	r3, [pc, #72]	; (800ffcc <_vfiprintf_r+0x22c>)
 800ff82:	a904      	add	r1, sp, #16
 800ff84:	4630      	mov	r0, r6
 800ff86:	f7fd fd67 	bl	800da58 <_printf_float>
 800ff8a:	4607      	mov	r7, r0
 800ff8c:	1c78      	adds	r0, r7, #1
 800ff8e:	d1d6      	bne.n	800ff3e <_vfiprintf_r+0x19e>
 800ff90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff92:	07d9      	lsls	r1, r3, #31
 800ff94:	d405      	bmi.n	800ffa2 <_vfiprintf_r+0x202>
 800ff96:	89ab      	ldrh	r3, [r5, #12]
 800ff98:	059a      	lsls	r2, r3, #22
 800ff9a:	d402      	bmi.n	800ffa2 <_vfiprintf_r+0x202>
 800ff9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff9e:	f7fe faa5 	bl	800e4ec <__retarget_lock_release_recursive>
 800ffa2:	89ab      	ldrh	r3, [r5, #12]
 800ffa4:	065b      	lsls	r3, r3, #25
 800ffa6:	f53f af1d 	bmi.w	800fde4 <_vfiprintf_r+0x44>
 800ffaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffac:	e71c      	b.n	800fde8 <_vfiprintf_r+0x48>
 800ffae:	ab03      	add	r3, sp, #12
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	462a      	mov	r2, r5
 800ffb4:	4b05      	ldr	r3, [pc, #20]	; (800ffcc <_vfiprintf_r+0x22c>)
 800ffb6:	a904      	add	r1, sp, #16
 800ffb8:	4630      	mov	r0, r6
 800ffba:	f7fd fff1 	bl	800dfa0 <_printf_i>
 800ffbe:	e7e4      	b.n	800ff8a <_vfiprintf_r+0x1ea>
 800ffc0:	080248db 	.word	0x080248db
 800ffc4:	080248e5 	.word	0x080248e5
 800ffc8:	0800da59 	.word	0x0800da59
 800ffcc:	0800fd7d 	.word	0x0800fd7d
 800ffd0:	080248e1 	.word	0x080248e1

0800ffd4 <__swbuf_r>:
 800ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd6:	460e      	mov	r6, r1
 800ffd8:	4614      	mov	r4, r2
 800ffda:	4605      	mov	r5, r0
 800ffdc:	b118      	cbz	r0, 800ffe6 <__swbuf_r+0x12>
 800ffde:	6a03      	ldr	r3, [r0, #32]
 800ffe0:	b90b      	cbnz	r3, 800ffe6 <__swbuf_r+0x12>
 800ffe2:	f7fe f98b 	bl	800e2fc <__sinit>
 800ffe6:	69a3      	ldr	r3, [r4, #24]
 800ffe8:	60a3      	str	r3, [r4, #8]
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	071a      	lsls	r2, r3, #28
 800ffee:	d525      	bpl.n	801003c <__swbuf_r+0x68>
 800fff0:	6923      	ldr	r3, [r4, #16]
 800fff2:	b31b      	cbz	r3, 801003c <__swbuf_r+0x68>
 800fff4:	6823      	ldr	r3, [r4, #0]
 800fff6:	6922      	ldr	r2, [r4, #16]
 800fff8:	1a98      	subs	r0, r3, r2
 800fffa:	6963      	ldr	r3, [r4, #20]
 800fffc:	b2f6      	uxtb	r6, r6
 800fffe:	4283      	cmp	r3, r0
 8010000:	4637      	mov	r7, r6
 8010002:	dc04      	bgt.n	801000e <__swbuf_r+0x3a>
 8010004:	4621      	mov	r1, r4
 8010006:	4628      	mov	r0, r5
 8010008:	f7ff fdee 	bl	800fbe8 <_fflush_r>
 801000c:	b9e0      	cbnz	r0, 8010048 <__swbuf_r+0x74>
 801000e:	68a3      	ldr	r3, [r4, #8]
 8010010:	3b01      	subs	r3, #1
 8010012:	60a3      	str	r3, [r4, #8]
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	1c5a      	adds	r2, r3, #1
 8010018:	6022      	str	r2, [r4, #0]
 801001a:	701e      	strb	r6, [r3, #0]
 801001c:	6962      	ldr	r2, [r4, #20]
 801001e:	1c43      	adds	r3, r0, #1
 8010020:	429a      	cmp	r2, r3
 8010022:	d004      	beq.n	801002e <__swbuf_r+0x5a>
 8010024:	89a3      	ldrh	r3, [r4, #12]
 8010026:	07db      	lsls	r3, r3, #31
 8010028:	d506      	bpl.n	8010038 <__swbuf_r+0x64>
 801002a:	2e0a      	cmp	r6, #10
 801002c:	d104      	bne.n	8010038 <__swbuf_r+0x64>
 801002e:	4621      	mov	r1, r4
 8010030:	4628      	mov	r0, r5
 8010032:	f7ff fdd9 	bl	800fbe8 <_fflush_r>
 8010036:	b938      	cbnz	r0, 8010048 <__swbuf_r+0x74>
 8010038:	4638      	mov	r0, r7
 801003a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801003c:	4621      	mov	r1, r4
 801003e:	4628      	mov	r0, r5
 8010040:	f000 f806 	bl	8010050 <__swsetup_r>
 8010044:	2800      	cmp	r0, #0
 8010046:	d0d5      	beq.n	800fff4 <__swbuf_r+0x20>
 8010048:	f04f 37ff 	mov.w	r7, #4294967295
 801004c:	e7f4      	b.n	8010038 <__swbuf_r+0x64>
	...

08010050 <__swsetup_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	4b2a      	ldr	r3, [pc, #168]	; (80100fc <__swsetup_r+0xac>)
 8010054:	4605      	mov	r5, r0
 8010056:	6818      	ldr	r0, [r3, #0]
 8010058:	460c      	mov	r4, r1
 801005a:	b118      	cbz	r0, 8010064 <__swsetup_r+0x14>
 801005c:	6a03      	ldr	r3, [r0, #32]
 801005e:	b90b      	cbnz	r3, 8010064 <__swsetup_r+0x14>
 8010060:	f7fe f94c 	bl	800e2fc <__sinit>
 8010064:	89a3      	ldrh	r3, [r4, #12]
 8010066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801006a:	0718      	lsls	r0, r3, #28
 801006c:	d422      	bmi.n	80100b4 <__swsetup_r+0x64>
 801006e:	06d9      	lsls	r1, r3, #27
 8010070:	d407      	bmi.n	8010082 <__swsetup_r+0x32>
 8010072:	2309      	movs	r3, #9
 8010074:	602b      	str	r3, [r5, #0]
 8010076:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	f04f 30ff 	mov.w	r0, #4294967295
 8010080:	e034      	b.n	80100ec <__swsetup_r+0x9c>
 8010082:	0758      	lsls	r0, r3, #29
 8010084:	d512      	bpl.n	80100ac <__swsetup_r+0x5c>
 8010086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010088:	b141      	cbz	r1, 801009c <__swsetup_r+0x4c>
 801008a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801008e:	4299      	cmp	r1, r3
 8010090:	d002      	beq.n	8010098 <__swsetup_r+0x48>
 8010092:	4628      	mov	r0, r5
 8010094:	f7ff f8a6 	bl	800f1e4 <_free_r>
 8010098:	2300      	movs	r3, #0
 801009a:	6363      	str	r3, [r4, #52]	; 0x34
 801009c:	89a3      	ldrh	r3, [r4, #12]
 801009e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80100a2:	81a3      	strh	r3, [r4, #12]
 80100a4:	2300      	movs	r3, #0
 80100a6:	6063      	str	r3, [r4, #4]
 80100a8:	6923      	ldr	r3, [r4, #16]
 80100aa:	6023      	str	r3, [r4, #0]
 80100ac:	89a3      	ldrh	r3, [r4, #12]
 80100ae:	f043 0308 	orr.w	r3, r3, #8
 80100b2:	81a3      	strh	r3, [r4, #12]
 80100b4:	6923      	ldr	r3, [r4, #16]
 80100b6:	b94b      	cbnz	r3, 80100cc <__swsetup_r+0x7c>
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80100be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100c2:	d003      	beq.n	80100cc <__swsetup_r+0x7c>
 80100c4:	4621      	mov	r1, r4
 80100c6:	4628      	mov	r0, r5
 80100c8:	f000 f884 	bl	80101d4 <__smakebuf_r>
 80100cc:	89a0      	ldrh	r0, [r4, #12]
 80100ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100d2:	f010 0301 	ands.w	r3, r0, #1
 80100d6:	d00a      	beq.n	80100ee <__swsetup_r+0x9e>
 80100d8:	2300      	movs	r3, #0
 80100da:	60a3      	str	r3, [r4, #8]
 80100dc:	6963      	ldr	r3, [r4, #20]
 80100de:	425b      	negs	r3, r3
 80100e0:	61a3      	str	r3, [r4, #24]
 80100e2:	6923      	ldr	r3, [r4, #16]
 80100e4:	b943      	cbnz	r3, 80100f8 <__swsetup_r+0xa8>
 80100e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80100ea:	d1c4      	bne.n	8010076 <__swsetup_r+0x26>
 80100ec:	bd38      	pop	{r3, r4, r5, pc}
 80100ee:	0781      	lsls	r1, r0, #30
 80100f0:	bf58      	it	pl
 80100f2:	6963      	ldrpl	r3, [r4, #20]
 80100f4:	60a3      	str	r3, [r4, #8]
 80100f6:	e7f4      	b.n	80100e2 <__swsetup_r+0x92>
 80100f8:	2000      	movs	r0, #0
 80100fa:	e7f7      	b.n	80100ec <__swsetup_r+0x9c>
 80100fc:	200078d0 	.word	0x200078d0

08010100 <_raise_r>:
 8010100:	291f      	cmp	r1, #31
 8010102:	b538      	push	{r3, r4, r5, lr}
 8010104:	4604      	mov	r4, r0
 8010106:	460d      	mov	r5, r1
 8010108:	d904      	bls.n	8010114 <_raise_r+0x14>
 801010a:	2316      	movs	r3, #22
 801010c:	6003      	str	r3, [r0, #0]
 801010e:	f04f 30ff 	mov.w	r0, #4294967295
 8010112:	bd38      	pop	{r3, r4, r5, pc}
 8010114:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010116:	b112      	cbz	r2, 801011e <_raise_r+0x1e>
 8010118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801011c:	b94b      	cbnz	r3, 8010132 <_raise_r+0x32>
 801011e:	4620      	mov	r0, r4
 8010120:	f000 f830 	bl	8010184 <_getpid_r>
 8010124:	462a      	mov	r2, r5
 8010126:	4601      	mov	r1, r0
 8010128:	4620      	mov	r0, r4
 801012a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801012e:	f000 b817 	b.w	8010160 <_kill_r>
 8010132:	2b01      	cmp	r3, #1
 8010134:	d00a      	beq.n	801014c <_raise_r+0x4c>
 8010136:	1c59      	adds	r1, r3, #1
 8010138:	d103      	bne.n	8010142 <_raise_r+0x42>
 801013a:	2316      	movs	r3, #22
 801013c:	6003      	str	r3, [r0, #0]
 801013e:	2001      	movs	r0, #1
 8010140:	e7e7      	b.n	8010112 <_raise_r+0x12>
 8010142:	2400      	movs	r4, #0
 8010144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010148:	4628      	mov	r0, r5
 801014a:	4798      	blx	r3
 801014c:	2000      	movs	r0, #0
 801014e:	e7e0      	b.n	8010112 <_raise_r+0x12>

08010150 <raise>:
 8010150:	4b02      	ldr	r3, [pc, #8]	; (801015c <raise+0xc>)
 8010152:	4601      	mov	r1, r0
 8010154:	6818      	ldr	r0, [r3, #0]
 8010156:	f7ff bfd3 	b.w	8010100 <_raise_r>
 801015a:	bf00      	nop
 801015c:	200078d0 	.word	0x200078d0

08010160 <_kill_r>:
 8010160:	b538      	push	{r3, r4, r5, lr}
 8010162:	4d07      	ldr	r5, [pc, #28]	; (8010180 <_kill_r+0x20>)
 8010164:	2300      	movs	r3, #0
 8010166:	4604      	mov	r4, r0
 8010168:	4608      	mov	r0, r1
 801016a:	4611      	mov	r1, r2
 801016c:	602b      	str	r3, [r5, #0]
 801016e:	f7f7 f89b 	bl	80072a8 <_kill>
 8010172:	1c43      	adds	r3, r0, #1
 8010174:	d102      	bne.n	801017c <_kill_r+0x1c>
 8010176:	682b      	ldr	r3, [r5, #0]
 8010178:	b103      	cbz	r3, 801017c <_kill_r+0x1c>
 801017a:	6023      	str	r3, [r4, #0]
 801017c:	bd38      	pop	{r3, r4, r5, pc}
 801017e:	bf00      	nop
 8010180:	2001b63c 	.word	0x2001b63c

08010184 <_getpid_r>:
 8010184:	f7f7 b888 	b.w	8007298 <_getpid>

08010188 <__swhatbuf_r>:
 8010188:	b570      	push	{r4, r5, r6, lr}
 801018a:	460c      	mov	r4, r1
 801018c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010190:	2900      	cmp	r1, #0
 8010192:	b096      	sub	sp, #88	; 0x58
 8010194:	4615      	mov	r5, r2
 8010196:	461e      	mov	r6, r3
 8010198:	da0d      	bge.n	80101b6 <__swhatbuf_r+0x2e>
 801019a:	89a3      	ldrh	r3, [r4, #12]
 801019c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80101a0:	f04f 0100 	mov.w	r1, #0
 80101a4:	bf0c      	ite	eq
 80101a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80101aa:	2340      	movne	r3, #64	; 0x40
 80101ac:	2000      	movs	r0, #0
 80101ae:	6031      	str	r1, [r6, #0]
 80101b0:	602b      	str	r3, [r5, #0]
 80101b2:	b016      	add	sp, #88	; 0x58
 80101b4:	bd70      	pop	{r4, r5, r6, pc}
 80101b6:	466a      	mov	r2, sp
 80101b8:	f000 f848 	bl	801024c <_fstat_r>
 80101bc:	2800      	cmp	r0, #0
 80101be:	dbec      	blt.n	801019a <__swhatbuf_r+0x12>
 80101c0:	9901      	ldr	r1, [sp, #4]
 80101c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80101c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80101ca:	4259      	negs	r1, r3
 80101cc:	4159      	adcs	r1, r3
 80101ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101d2:	e7eb      	b.n	80101ac <__swhatbuf_r+0x24>

080101d4 <__smakebuf_r>:
 80101d4:	898b      	ldrh	r3, [r1, #12]
 80101d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101d8:	079d      	lsls	r5, r3, #30
 80101da:	4606      	mov	r6, r0
 80101dc:	460c      	mov	r4, r1
 80101de:	d507      	bpl.n	80101f0 <__smakebuf_r+0x1c>
 80101e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101e4:	6023      	str	r3, [r4, #0]
 80101e6:	6123      	str	r3, [r4, #16]
 80101e8:	2301      	movs	r3, #1
 80101ea:	6163      	str	r3, [r4, #20]
 80101ec:	b002      	add	sp, #8
 80101ee:	bd70      	pop	{r4, r5, r6, pc}
 80101f0:	ab01      	add	r3, sp, #4
 80101f2:	466a      	mov	r2, sp
 80101f4:	f7ff ffc8 	bl	8010188 <__swhatbuf_r>
 80101f8:	9900      	ldr	r1, [sp, #0]
 80101fa:	4605      	mov	r5, r0
 80101fc:	4630      	mov	r0, r6
 80101fe:	f7ff f865 	bl	800f2cc <_malloc_r>
 8010202:	b948      	cbnz	r0, 8010218 <__smakebuf_r+0x44>
 8010204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010208:	059a      	lsls	r2, r3, #22
 801020a:	d4ef      	bmi.n	80101ec <__smakebuf_r+0x18>
 801020c:	f023 0303 	bic.w	r3, r3, #3
 8010210:	f043 0302 	orr.w	r3, r3, #2
 8010214:	81a3      	strh	r3, [r4, #12]
 8010216:	e7e3      	b.n	80101e0 <__smakebuf_r+0xc>
 8010218:	89a3      	ldrh	r3, [r4, #12]
 801021a:	6020      	str	r0, [r4, #0]
 801021c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010220:	81a3      	strh	r3, [r4, #12]
 8010222:	9b00      	ldr	r3, [sp, #0]
 8010224:	6163      	str	r3, [r4, #20]
 8010226:	9b01      	ldr	r3, [sp, #4]
 8010228:	6120      	str	r0, [r4, #16]
 801022a:	b15b      	cbz	r3, 8010244 <__smakebuf_r+0x70>
 801022c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010230:	4630      	mov	r0, r6
 8010232:	f000 f81d 	bl	8010270 <_isatty_r>
 8010236:	b128      	cbz	r0, 8010244 <__smakebuf_r+0x70>
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	f023 0303 	bic.w	r3, r3, #3
 801023e:	f043 0301 	orr.w	r3, r3, #1
 8010242:	81a3      	strh	r3, [r4, #12]
 8010244:	89a3      	ldrh	r3, [r4, #12]
 8010246:	431d      	orrs	r5, r3
 8010248:	81a5      	strh	r5, [r4, #12]
 801024a:	e7cf      	b.n	80101ec <__smakebuf_r+0x18>

0801024c <_fstat_r>:
 801024c:	b538      	push	{r3, r4, r5, lr}
 801024e:	4d07      	ldr	r5, [pc, #28]	; (801026c <_fstat_r+0x20>)
 8010250:	2300      	movs	r3, #0
 8010252:	4604      	mov	r4, r0
 8010254:	4608      	mov	r0, r1
 8010256:	4611      	mov	r1, r2
 8010258:	602b      	str	r3, [r5, #0]
 801025a:	f7f7 f884 	bl	8007366 <_fstat>
 801025e:	1c43      	adds	r3, r0, #1
 8010260:	d102      	bne.n	8010268 <_fstat_r+0x1c>
 8010262:	682b      	ldr	r3, [r5, #0]
 8010264:	b103      	cbz	r3, 8010268 <_fstat_r+0x1c>
 8010266:	6023      	str	r3, [r4, #0]
 8010268:	bd38      	pop	{r3, r4, r5, pc}
 801026a:	bf00      	nop
 801026c:	2001b63c 	.word	0x2001b63c

08010270 <_isatty_r>:
 8010270:	b538      	push	{r3, r4, r5, lr}
 8010272:	4d06      	ldr	r5, [pc, #24]	; (801028c <_isatty_r+0x1c>)
 8010274:	2300      	movs	r3, #0
 8010276:	4604      	mov	r4, r0
 8010278:	4608      	mov	r0, r1
 801027a:	602b      	str	r3, [r5, #0]
 801027c:	f7f7 f883 	bl	8007386 <_isatty>
 8010280:	1c43      	adds	r3, r0, #1
 8010282:	d102      	bne.n	801028a <_isatty_r+0x1a>
 8010284:	682b      	ldr	r3, [r5, #0]
 8010286:	b103      	cbz	r3, 801028a <_isatty_r+0x1a>
 8010288:	6023      	str	r3, [r4, #0]
 801028a:	bd38      	pop	{r3, r4, r5, pc}
 801028c:	2001b63c 	.word	0x2001b63c

08010290 <exp>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	ed2d 8b02 	vpush	{d8}
 8010296:	ec55 4b10 	vmov	r4, r5, d0
 801029a:	f000 f9e5 	bl	8010668 <__ieee754_exp>
 801029e:	eeb0 8a40 	vmov.f32	s16, s0
 80102a2:	eef0 8a60 	vmov.f32	s17, s1
 80102a6:	ec45 4b10 	vmov	d0, r4, r5
 80102aa:	f000 f8f3 	bl	8010494 <finite>
 80102ae:	b168      	cbz	r0, 80102cc <exp+0x3c>
 80102b0:	a317      	add	r3, pc, #92	; (adr r3, 8010310 <exp+0x80>)
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	4620      	mov	r0, r4
 80102b8:	4629      	mov	r1, r5
 80102ba:	f7f0 fc55 	bl	8000b68 <__aeabi_dcmpgt>
 80102be:	b160      	cbz	r0, 80102da <exp+0x4a>
 80102c0:	f7fe f8e8 	bl	800e494 <__errno>
 80102c4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010300 <exp+0x70>
 80102c8:	2322      	movs	r3, #34	; 0x22
 80102ca:	6003      	str	r3, [r0, #0]
 80102cc:	eeb0 0a48 	vmov.f32	s0, s16
 80102d0:	eef0 0a68 	vmov.f32	s1, s17
 80102d4:	ecbd 8b02 	vpop	{d8}
 80102d8:	bd38      	pop	{r3, r4, r5, pc}
 80102da:	a30f      	add	r3, pc, #60	; (adr r3, 8010318 <exp+0x88>)
 80102dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e0:	4620      	mov	r0, r4
 80102e2:	4629      	mov	r1, r5
 80102e4:	f7f0 fc22 	bl	8000b2c <__aeabi_dcmplt>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	d0ef      	beq.n	80102cc <exp+0x3c>
 80102ec:	f7fe f8d2 	bl	800e494 <__errno>
 80102f0:	2322      	movs	r3, #34	; 0x22
 80102f2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010308 <exp+0x78>
 80102f6:	6003      	str	r3, [r0, #0]
 80102f8:	e7e8      	b.n	80102cc <exp+0x3c>
 80102fa:	bf00      	nop
 80102fc:	f3af 8000 	nop.w
 8010300:	00000000 	.word	0x00000000
 8010304:	7ff00000 	.word	0x7ff00000
	...
 8010310:	fefa39ef 	.word	0xfefa39ef
 8010314:	40862e42 	.word	0x40862e42
 8010318:	d52d3051 	.word	0xd52d3051
 801031c:	c0874910 	.word	0xc0874910

08010320 <pow>:
 8010320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010322:	ed2d 8b02 	vpush	{d8}
 8010326:	eeb0 8a40 	vmov.f32	s16, s0
 801032a:	eef0 8a60 	vmov.f32	s17, s1
 801032e:	ec55 4b11 	vmov	r4, r5, d1
 8010332:	f000 fb1d 	bl	8010970 <__ieee754_pow>
 8010336:	4622      	mov	r2, r4
 8010338:	462b      	mov	r3, r5
 801033a:	4620      	mov	r0, r4
 801033c:	4629      	mov	r1, r5
 801033e:	ec57 6b10 	vmov	r6, r7, d0
 8010342:	f7f0 fc1b 	bl	8000b7c <__aeabi_dcmpun>
 8010346:	2800      	cmp	r0, #0
 8010348:	d13b      	bne.n	80103c2 <pow+0xa2>
 801034a:	ec51 0b18 	vmov	r0, r1, d8
 801034e:	2200      	movs	r2, #0
 8010350:	2300      	movs	r3, #0
 8010352:	f7f0 fbe1 	bl	8000b18 <__aeabi_dcmpeq>
 8010356:	b1b8      	cbz	r0, 8010388 <pow+0x68>
 8010358:	2200      	movs	r2, #0
 801035a:	2300      	movs	r3, #0
 801035c:	4620      	mov	r0, r4
 801035e:	4629      	mov	r1, r5
 8010360:	f7f0 fbda 	bl	8000b18 <__aeabi_dcmpeq>
 8010364:	2800      	cmp	r0, #0
 8010366:	d146      	bne.n	80103f6 <pow+0xd6>
 8010368:	ec45 4b10 	vmov	d0, r4, r5
 801036c:	f000 f892 	bl	8010494 <finite>
 8010370:	b338      	cbz	r0, 80103c2 <pow+0xa2>
 8010372:	2200      	movs	r2, #0
 8010374:	2300      	movs	r3, #0
 8010376:	4620      	mov	r0, r4
 8010378:	4629      	mov	r1, r5
 801037a:	f7f0 fbd7 	bl	8000b2c <__aeabi_dcmplt>
 801037e:	b300      	cbz	r0, 80103c2 <pow+0xa2>
 8010380:	f7fe f888 	bl	800e494 <__errno>
 8010384:	2322      	movs	r3, #34	; 0x22
 8010386:	e01b      	b.n	80103c0 <pow+0xa0>
 8010388:	ec47 6b10 	vmov	d0, r6, r7
 801038c:	f000 f882 	bl	8010494 <finite>
 8010390:	b9e0      	cbnz	r0, 80103cc <pow+0xac>
 8010392:	eeb0 0a48 	vmov.f32	s0, s16
 8010396:	eef0 0a68 	vmov.f32	s1, s17
 801039a:	f000 f87b 	bl	8010494 <finite>
 801039e:	b1a8      	cbz	r0, 80103cc <pow+0xac>
 80103a0:	ec45 4b10 	vmov	d0, r4, r5
 80103a4:	f000 f876 	bl	8010494 <finite>
 80103a8:	b180      	cbz	r0, 80103cc <pow+0xac>
 80103aa:	4632      	mov	r2, r6
 80103ac:	463b      	mov	r3, r7
 80103ae:	4630      	mov	r0, r6
 80103b0:	4639      	mov	r1, r7
 80103b2:	f7f0 fbe3 	bl	8000b7c <__aeabi_dcmpun>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d0e2      	beq.n	8010380 <pow+0x60>
 80103ba:	f7fe f86b 	bl	800e494 <__errno>
 80103be:	2321      	movs	r3, #33	; 0x21
 80103c0:	6003      	str	r3, [r0, #0]
 80103c2:	ecbd 8b02 	vpop	{d8}
 80103c6:	ec47 6b10 	vmov	d0, r6, r7
 80103ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103cc:	2200      	movs	r2, #0
 80103ce:	2300      	movs	r3, #0
 80103d0:	4630      	mov	r0, r6
 80103d2:	4639      	mov	r1, r7
 80103d4:	f7f0 fba0 	bl	8000b18 <__aeabi_dcmpeq>
 80103d8:	2800      	cmp	r0, #0
 80103da:	d0f2      	beq.n	80103c2 <pow+0xa2>
 80103dc:	eeb0 0a48 	vmov.f32	s0, s16
 80103e0:	eef0 0a68 	vmov.f32	s1, s17
 80103e4:	f000 f856 	bl	8010494 <finite>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d0ea      	beq.n	80103c2 <pow+0xa2>
 80103ec:	ec45 4b10 	vmov	d0, r4, r5
 80103f0:	f000 f850 	bl	8010494 <finite>
 80103f4:	e7c3      	b.n	801037e <pow+0x5e>
 80103f6:	4f01      	ldr	r7, [pc, #4]	; (80103fc <pow+0xdc>)
 80103f8:	2600      	movs	r6, #0
 80103fa:	e7e2      	b.n	80103c2 <pow+0xa2>
 80103fc:	3ff00000 	.word	0x3ff00000

08010400 <sqrt>:
 8010400:	b538      	push	{r3, r4, r5, lr}
 8010402:	ed2d 8b02 	vpush	{d8}
 8010406:	ec55 4b10 	vmov	r4, r5, d0
 801040a:	f000 f84f 	bl	80104ac <__ieee754_sqrt>
 801040e:	4622      	mov	r2, r4
 8010410:	462b      	mov	r3, r5
 8010412:	4620      	mov	r0, r4
 8010414:	4629      	mov	r1, r5
 8010416:	eeb0 8a40 	vmov.f32	s16, s0
 801041a:	eef0 8a60 	vmov.f32	s17, s1
 801041e:	f7f0 fbad 	bl	8000b7c <__aeabi_dcmpun>
 8010422:	b990      	cbnz	r0, 801044a <sqrt+0x4a>
 8010424:	2200      	movs	r2, #0
 8010426:	2300      	movs	r3, #0
 8010428:	4620      	mov	r0, r4
 801042a:	4629      	mov	r1, r5
 801042c:	f7f0 fb7e 	bl	8000b2c <__aeabi_dcmplt>
 8010430:	b158      	cbz	r0, 801044a <sqrt+0x4a>
 8010432:	f7fe f82f 	bl	800e494 <__errno>
 8010436:	2321      	movs	r3, #33	; 0x21
 8010438:	6003      	str	r3, [r0, #0]
 801043a:	2200      	movs	r2, #0
 801043c:	2300      	movs	r3, #0
 801043e:	4610      	mov	r0, r2
 8010440:	4619      	mov	r1, r3
 8010442:	f7f0 fa2b 	bl	800089c <__aeabi_ddiv>
 8010446:	ec41 0b18 	vmov	d8, r0, r1
 801044a:	eeb0 0a48 	vmov.f32	s0, s16
 801044e:	eef0 0a68 	vmov.f32	s1, s17
 8010452:	ecbd 8b02 	vpop	{d8}
 8010456:	bd38      	pop	{r3, r4, r5, pc}

08010458 <sqrtf>:
 8010458:	b508      	push	{r3, lr}
 801045a:	ed2d 8b02 	vpush	{d8}
 801045e:	eeb0 8a40 	vmov.f32	s16, s0
 8010462:	f000 f8fd 	bl	8010660 <__ieee754_sqrtf>
 8010466:	eeb4 8a48 	vcmp.f32	s16, s16
 801046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046e:	d60c      	bvs.n	801048a <sqrtf+0x32>
 8010470:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010490 <sqrtf+0x38>
 8010474:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047c:	d505      	bpl.n	801048a <sqrtf+0x32>
 801047e:	f7fe f809 	bl	800e494 <__errno>
 8010482:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010486:	2321      	movs	r3, #33	; 0x21
 8010488:	6003      	str	r3, [r0, #0]
 801048a:	ecbd 8b02 	vpop	{d8}
 801048e:	bd08      	pop	{r3, pc}
 8010490:	00000000 	.word	0x00000000

08010494 <finite>:
 8010494:	b082      	sub	sp, #8
 8010496:	ed8d 0b00 	vstr	d0, [sp]
 801049a:	9801      	ldr	r0, [sp, #4]
 801049c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104a0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104a4:	0fc0      	lsrs	r0, r0, #31
 80104a6:	b002      	add	sp, #8
 80104a8:	4770      	bx	lr
	...

080104ac <__ieee754_sqrt>:
 80104ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b0:	ec55 4b10 	vmov	r4, r5, d0
 80104b4:	4e67      	ldr	r6, [pc, #412]	; (8010654 <__ieee754_sqrt+0x1a8>)
 80104b6:	43ae      	bics	r6, r5
 80104b8:	ee10 0a10 	vmov	r0, s0
 80104bc:	ee10 2a10 	vmov	r2, s0
 80104c0:	4629      	mov	r1, r5
 80104c2:	462b      	mov	r3, r5
 80104c4:	d10d      	bne.n	80104e2 <__ieee754_sqrt+0x36>
 80104c6:	f7f0 f8bf 	bl	8000648 <__aeabi_dmul>
 80104ca:	4602      	mov	r2, r0
 80104cc:	460b      	mov	r3, r1
 80104ce:	4620      	mov	r0, r4
 80104d0:	4629      	mov	r1, r5
 80104d2:	f7ef ff03 	bl	80002dc <__adddf3>
 80104d6:	4604      	mov	r4, r0
 80104d8:	460d      	mov	r5, r1
 80104da:	ec45 4b10 	vmov	d0, r4, r5
 80104de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e2:	2d00      	cmp	r5, #0
 80104e4:	dc0b      	bgt.n	80104fe <__ieee754_sqrt+0x52>
 80104e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80104ea:	4326      	orrs	r6, r4
 80104ec:	d0f5      	beq.n	80104da <__ieee754_sqrt+0x2e>
 80104ee:	b135      	cbz	r5, 80104fe <__ieee754_sqrt+0x52>
 80104f0:	f7ef fef2 	bl	80002d8 <__aeabi_dsub>
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	f7f0 f9d0 	bl	800089c <__aeabi_ddiv>
 80104fc:	e7eb      	b.n	80104d6 <__ieee754_sqrt+0x2a>
 80104fe:	1509      	asrs	r1, r1, #20
 8010500:	f000 808d 	beq.w	801061e <__ieee754_sqrt+0x172>
 8010504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010508:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010510:	07c9      	lsls	r1, r1, #31
 8010512:	bf5c      	itt	pl
 8010514:	005b      	lslpl	r3, r3, #1
 8010516:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801051a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801051e:	bf58      	it	pl
 8010520:	0052      	lslpl	r2, r2, #1
 8010522:	2500      	movs	r5, #0
 8010524:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010528:	1076      	asrs	r6, r6, #1
 801052a:	0052      	lsls	r2, r2, #1
 801052c:	f04f 0e16 	mov.w	lr, #22
 8010530:	46ac      	mov	ip, r5
 8010532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010536:	eb0c 0001 	add.w	r0, ip, r1
 801053a:	4298      	cmp	r0, r3
 801053c:	bfde      	ittt	le
 801053e:	1a1b      	suble	r3, r3, r0
 8010540:	eb00 0c01 	addle.w	ip, r0, r1
 8010544:	186d      	addle	r5, r5, r1
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	f1be 0e01 	subs.w	lr, lr, #1
 801054c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010550:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010554:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010558:	d1ed      	bne.n	8010536 <__ieee754_sqrt+0x8a>
 801055a:	4674      	mov	r4, lr
 801055c:	2720      	movs	r7, #32
 801055e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010562:	4563      	cmp	r3, ip
 8010564:	eb01 000e 	add.w	r0, r1, lr
 8010568:	dc02      	bgt.n	8010570 <__ieee754_sqrt+0xc4>
 801056a:	d113      	bne.n	8010594 <__ieee754_sqrt+0xe8>
 801056c:	4290      	cmp	r0, r2
 801056e:	d811      	bhi.n	8010594 <__ieee754_sqrt+0xe8>
 8010570:	2800      	cmp	r0, #0
 8010572:	eb00 0e01 	add.w	lr, r0, r1
 8010576:	da57      	bge.n	8010628 <__ieee754_sqrt+0x17c>
 8010578:	f1be 0f00 	cmp.w	lr, #0
 801057c:	db54      	blt.n	8010628 <__ieee754_sqrt+0x17c>
 801057e:	f10c 0801 	add.w	r8, ip, #1
 8010582:	eba3 030c 	sub.w	r3, r3, ip
 8010586:	4290      	cmp	r0, r2
 8010588:	bf88      	it	hi
 801058a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801058e:	1a12      	subs	r2, r2, r0
 8010590:	440c      	add	r4, r1
 8010592:	46c4      	mov	ip, r8
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	3f01      	subs	r7, #1
 8010598:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801059c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80105a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80105a4:	d1dd      	bne.n	8010562 <__ieee754_sqrt+0xb6>
 80105a6:	4313      	orrs	r3, r2
 80105a8:	d01b      	beq.n	80105e2 <__ieee754_sqrt+0x136>
 80105aa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010658 <__ieee754_sqrt+0x1ac>
 80105ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801065c <__ieee754_sqrt+0x1b0>
 80105b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80105b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80105ba:	f7ef fe8d 	bl	80002d8 <__aeabi_dsub>
 80105be:	e9da 8900 	ldrd	r8, r9, [sl]
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4640      	mov	r0, r8
 80105c8:	4649      	mov	r1, r9
 80105ca:	f7f0 fab9 	bl	8000b40 <__aeabi_dcmple>
 80105ce:	b140      	cbz	r0, 80105e2 <__ieee754_sqrt+0x136>
 80105d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80105d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80105d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80105dc:	d126      	bne.n	801062c <__ieee754_sqrt+0x180>
 80105de:	3501      	adds	r5, #1
 80105e0:	463c      	mov	r4, r7
 80105e2:	106a      	asrs	r2, r5, #1
 80105e4:	0863      	lsrs	r3, r4, #1
 80105e6:	07e9      	lsls	r1, r5, #31
 80105e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80105ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80105f0:	bf48      	it	mi
 80105f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80105f6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80105fa:	461c      	mov	r4, r3
 80105fc:	e76d      	b.n	80104da <__ieee754_sqrt+0x2e>
 80105fe:	0ad3      	lsrs	r3, r2, #11
 8010600:	3815      	subs	r0, #21
 8010602:	0552      	lsls	r2, r2, #21
 8010604:	2b00      	cmp	r3, #0
 8010606:	d0fa      	beq.n	80105fe <__ieee754_sqrt+0x152>
 8010608:	02dc      	lsls	r4, r3, #11
 801060a:	d50a      	bpl.n	8010622 <__ieee754_sqrt+0x176>
 801060c:	f1c1 0420 	rsb	r4, r1, #32
 8010610:	fa22 f404 	lsr.w	r4, r2, r4
 8010614:	1e4d      	subs	r5, r1, #1
 8010616:	408a      	lsls	r2, r1
 8010618:	4323      	orrs	r3, r4
 801061a:	1b41      	subs	r1, r0, r5
 801061c:	e772      	b.n	8010504 <__ieee754_sqrt+0x58>
 801061e:	4608      	mov	r0, r1
 8010620:	e7f0      	b.n	8010604 <__ieee754_sqrt+0x158>
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	3101      	adds	r1, #1
 8010626:	e7ef      	b.n	8010608 <__ieee754_sqrt+0x15c>
 8010628:	46e0      	mov	r8, ip
 801062a:	e7aa      	b.n	8010582 <__ieee754_sqrt+0xd6>
 801062c:	f7ef fe56 	bl	80002dc <__adddf3>
 8010630:	e9da 8900 	ldrd	r8, r9, [sl]
 8010634:	4602      	mov	r2, r0
 8010636:	460b      	mov	r3, r1
 8010638:	4640      	mov	r0, r8
 801063a:	4649      	mov	r1, r9
 801063c:	f7f0 fa76 	bl	8000b2c <__aeabi_dcmplt>
 8010640:	b120      	cbz	r0, 801064c <__ieee754_sqrt+0x1a0>
 8010642:	1ca0      	adds	r0, r4, #2
 8010644:	bf08      	it	eq
 8010646:	3501      	addeq	r5, #1
 8010648:	3402      	adds	r4, #2
 801064a:	e7ca      	b.n	80105e2 <__ieee754_sqrt+0x136>
 801064c:	3401      	adds	r4, #1
 801064e:	f024 0401 	bic.w	r4, r4, #1
 8010652:	e7c6      	b.n	80105e2 <__ieee754_sqrt+0x136>
 8010654:	7ff00000 	.word	0x7ff00000
 8010658:	20007a40 	.word	0x20007a40
 801065c:	20007a48 	.word	0x20007a48

08010660 <__ieee754_sqrtf>:
 8010660:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010664:	4770      	bx	lr
	...

08010668 <__ieee754_exp>:
 8010668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801066c:	ec55 4b10 	vmov	r4, r5, d0
 8010670:	49b5      	ldr	r1, [pc, #724]	; (8010948 <__ieee754_exp+0x2e0>)
 8010672:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010676:	428a      	cmp	r2, r1
 8010678:	ed2d 8b04 	vpush	{d8-d9}
 801067c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010680:	d93b      	bls.n	80106fa <__ieee754_exp+0x92>
 8010682:	49b2      	ldr	r1, [pc, #712]	; (801094c <__ieee754_exp+0x2e4>)
 8010684:	428a      	cmp	r2, r1
 8010686:	d916      	bls.n	80106b6 <__ieee754_exp+0x4e>
 8010688:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801068c:	4323      	orrs	r3, r4
 801068e:	ee10 2a10 	vmov	r2, s0
 8010692:	d007      	beq.n	80106a4 <__ieee754_exp+0x3c>
 8010694:	462b      	mov	r3, r5
 8010696:	4620      	mov	r0, r4
 8010698:	4629      	mov	r1, r5
 801069a:	f7ef fe1f 	bl	80002dc <__adddf3>
 801069e:	4604      	mov	r4, r0
 80106a0:	460d      	mov	r5, r1
 80106a2:	e002      	b.n	80106aa <__ieee754_exp+0x42>
 80106a4:	b10e      	cbz	r6, 80106aa <__ieee754_exp+0x42>
 80106a6:	2400      	movs	r4, #0
 80106a8:	2500      	movs	r5, #0
 80106aa:	ecbd 8b04 	vpop	{d8-d9}
 80106ae:	ec45 4b10 	vmov	d0, r4, r5
 80106b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b6:	a38e      	add	r3, pc, #568	; (adr r3, 80108f0 <__ieee754_exp+0x288>)
 80106b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106bc:	ee10 0a10 	vmov	r0, s0
 80106c0:	4629      	mov	r1, r5
 80106c2:	f7f0 fa51 	bl	8000b68 <__aeabi_dcmpgt>
 80106c6:	4607      	mov	r7, r0
 80106c8:	b130      	cbz	r0, 80106d8 <__ieee754_exp+0x70>
 80106ca:	ecbd 8b04 	vpop	{d8-d9}
 80106ce:	2000      	movs	r0, #0
 80106d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106d4:	f000 bf25 	b.w	8011522 <__math_oflow>
 80106d8:	a387      	add	r3, pc, #540	; (adr r3, 80108f8 <__ieee754_exp+0x290>)
 80106da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106de:	4620      	mov	r0, r4
 80106e0:	4629      	mov	r1, r5
 80106e2:	f7f0 fa23 	bl	8000b2c <__aeabi_dcmplt>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	f000 808b 	beq.w	8010802 <__ieee754_exp+0x19a>
 80106ec:	ecbd 8b04 	vpop	{d8-d9}
 80106f0:	4638      	mov	r0, r7
 80106f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106f6:	f000 bf0b 	b.w	8011510 <__math_uflow>
 80106fa:	4b95      	ldr	r3, [pc, #596]	; (8010950 <__ieee754_exp+0x2e8>)
 80106fc:	429a      	cmp	r2, r3
 80106fe:	f240 80ac 	bls.w	801085a <__ieee754_exp+0x1f2>
 8010702:	4b94      	ldr	r3, [pc, #592]	; (8010954 <__ieee754_exp+0x2ec>)
 8010704:	429a      	cmp	r2, r3
 8010706:	d87c      	bhi.n	8010802 <__ieee754_exp+0x19a>
 8010708:	4b93      	ldr	r3, [pc, #588]	; (8010958 <__ieee754_exp+0x2f0>)
 801070a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	ee10 0a10 	vmov	r0, s0
 8010716:	4629      	mov	r1, r5
 8010718:	f7ef fdde 	bl	80002d8 <__aeabi_dsub>
 801071c:	4b8f      	ldr	r3, [pc, #572]	; (801095c <__ieee754_exp+0x2f4>)
 801071e:	00f7      	lsls	r7, r6, #3
 8010720:	443b      	add	r3, r7
 8010722:	ed93 7b00 	vldr	d7, [r3]
 8010726:	f1c6 0a01 	rsb	sl, r6, #1
 801072a:	4680      	mov	r8, r0
 801072c:	4689      	mov	r9, r1
 801072e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010732:	eeb0 8a47 	vmov.f32	s16, s14
 8010736:	eef0 8a67 	vmov.f32	s17, s15
 801073a:	ec53 2b18 	vmov	r2, r3, d8
 801073e:	4640      	mov	r0, r8
 8010740:	4649      	mov	r1, r9
 8010742:	f7ef fdc9 	bl	80002d8 <__aeabi_dsub>
 8010746:	4604      	mov	r4, r0
 8010748:	460d      	mov	r5, r1
 801074a:	4622      	mov	r2, r4
 801074c:	462b      	mov	r3, r5
 801074e:	4620      	mov	r0, r4
 8010750:	4629      	mov	r1, r5
 8010752:	f7ef ff79 	bl	8000648 <__aeabi_dmul>
 8010756:	a36a      	add	r3, pc, #424	; (adr r3, 8010900 <__ieee754_exp+0x298>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	4606      	mov	r6, r0
 801075e:	460f      	mov	r7, r1
 8010760:	f7ef ff72 	bl	8000648 <__aeabi_dmul>
 8010764:	a368      	add	r3, pc, #416	; (adr r3, 8010908 <__ieee754_exp+0x2a0>)
 8010766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076a:	f7ef fdb5 	bl	80002d8 <__aeabi_dsub>
 801076e:	4632      	mov	r2, r6
 8010770:	463b      	mov	r3, r7
 8010772:	f7ef ff69 	bl	8000648 <__aeabi_dmul>
 8010776:	a366      	add	r3, pc, #408	; (adr r3, 8010910 <__ieee754_exp+0x2a8>)
 8010778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077c:	f7ef fdae 	bl	80002dc <__adddf3>
 8010780:	4632      	mov	r2, r6
 8010782:	463b      	mov	r3, r7
 8010784:	f7ef ff60 	bl	8000648 <__aeabi_dmul>
 8010788:	a363      	add	r3, pc, #396	; (adr r3, 8010918 <__ieee754_exp+0x2b0>)
 801078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078e:	f7ef fda3 	bl	80002d8 <__aeabi_dsub>
 8010792:	4632      	mov	r2, r6
 8010794:	463b      	mov	r3, r7
 8010796:	f7ef ff57 	bl	8000648 <__aeabi_dmul>
 801079a:	a361      	add	r3, pc, #388	; (adr r3, 8010920 <__ieee754_exp+0x2b8>)
 801079c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a0:	f7ef fd9c 	bl	80002dc <__adddf3>
 80107a4:	4632      	mov	r2, r6
 80107a6:	463b      	mov	r3, r7
 80107a8:	f7ef ff4e 	bl	8000648 <__aeabi_dmul>
 80107ac:	4602      	mov	r2, r0
 80107ae:	460b      	mov	r3, r1
 80107b0:	4620      	mov	r0, r4
 80107b2:	4629      	mov	r1, r5
 80107b4:	f7ef fd90 	bl	80002d8 <__aeabi_dsub>
 80107b8:	4602      	mov	r2, r0
 80107ba:	460b      	mov	r3, r1
 80107bc:	4606      	mov	r6, r0
 80107be:	460f      	mov	r7, r1
 80107c0:	4620      	mov	r0, r4
 80107c2:	4629      	mov	r1, r5
 80107c4:	f7ef ff40 	bl	8000648 <__aeabi_dmul>
 80107c8:	ec41 0b19 	vmov	d9, r0, r1
 80107cc:	f1ba 0f00 	cmp.w	sl, #0
 80107d0:	d15d      	bne.n	801088e <__ieee754_exp+0x226>
 80107d2:	2200      	movs	r2, #0
 80107d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107d8:	4630      	mov	r0, r6
 80107da:	4639      	mov	r1, r7
 80107dc:	f7ef fd7c 	bl	80002d8 <__aeabi_dsub>
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	ec51 0b19 	vmov	r0, r1, d9
 80107e8:	f7f0 f858 	bl	800089c <__aeabi_ddiv>
 80107ec:	4622      	mov	r2, r4
 80107ee:	462b      	mov	r3, r5
 80107f0:	f7ef fd72 	bl	80002d8 <__aeabi_dsub>
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	2000      	movs	r0, #0
 80107fa:	4959      	ldr	r1, [pc, #356]	; (8010960 <__ieee754_exp+0x2f8>)
 80107fc:	f7ef fd6c 	bl	80002d8 <__aeabi_dsub>
 8010800:	e74d      	b.n	801069e <__ieee754_exp+0x36>
 8010802:	4b58      	ldr	r3, [pc, #352]	; (8010964 <__ieee754_exp+0x2fc>)
 8010804:	4620      	mov	r0, r4
 8010806:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801080a:	4629      	mov	r1, r5
 801080c:	a346      	add	r3, pc, #280	; (adr r3, 8010928 <__ieee754_exp+0x2c0>)
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	f7ef ff19 	bl	8000648 <__aeabi_dmul>
 8010816:	e9d6 2300 	ldrd	r2, r3, [r6]
 801081a:	f7ef fd5f 	bl	80002dc <__adddf3>
 801081e:	f7f0 f9c3 	bl	8000ba8 <__aeabi_d2iz>
 8010822:	4682      	mov	sl, r0
 8010824:	f7ef fea6 	bl	8000574 <__aeabi_i2d>
 8010828:	a341      	add	r3, pc, #260	; (adr r3, 8010930 <__ieee754_exp+0x2c8>)
 801082a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082e:	4606      	mov	r6, r0
 8010830:	460f      	mov	r7, r1
 8010832:	f7ef ff09 	bl	8000648 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4620      	mov	r0, r4
 801083c:	4629      	mov	r1, r5
 801083e:	f7ef fd4b 	bl	80002d8 <__aeabi_dsub>
 8010842:	a33d      	add	r3, pc, #244	; (adr r3, 8010938 <__ieee754_exp+0x2d0>)
 8010844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010848:	4680      	mov	r8, r0
 801084a:	4689      	mov	r9, r1
 801084c:	4630      	mov	r0, r6
 801084e:	4639      	mov	r1, r7
 8010850:	f7ef fefa 	bl	8000648 <__aeabi_dmul>
 8010854:	ec41 0b18 	vmov	d8, r0, r1
 8010858:	e76f      	b.n	801073a <__ieee754_exp+0xd2>
 801085a:	4b43      	ldr	r3, [pc, #268]	; (8010968 <__ieee754_exp+0x300>)
 801085c:	429a      	cmp	r2, r3
 801085e:	d811      	bhi.n	8010884 <__ieee754_exp+0x21c>
 8010860:	a337      	add	r3, pc, #220	; (adr r3, 8010940 <__ieee754_exp+0x2d8>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	ee10 0a10 	vmov	r0, s0
 801086a:	4629      	mov	r1, r5
 801086c:	f7ef fd36 	bl	80002dc <__adddf3>
 8010870:	4b3b      	ldr	r3, [pc, #236]	; (8010960 <__ieee754_exp+0x2f8>)
 8010872:	2200      	movs	r2, #0
 8010874:	f7f0 f978 	bl	8000b68 <__aeabi_dcmpgt>
 8010878:	b138      	cbz	r0, 801088a <__ieee754_exp+0x222>
 801087a:	4b39      	ldr	r3, [pc, #228]	; (8010960 <__ieee754_exp+0x2f8>)
 801087c:	2200      	movs	r2, #0
 801087e:	4620      	mov	r0, r4
 8010880:	4629      	mov	r1, r5
 8010882:	e70a      	b.n	801069a <__ieee754_exp+0x32>
 8010884:	f04f 0a00 	mov.w	sl, #0
 8010888:	e75f      	b.n	801074a <__ieee754_exp+0xe2>
 801088a:	4682      	mov	sl, r0
 801088c:	e75d      	b.n	801074a <__ieee754_exp+0xe2>
 801088e:	4632      	mov	r2, r6
 8010890:	463b      	mov	r3, r7
 8010892:	2000      	movs	r0, #0
 8010894:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010898:	f7ef fd1e 	bl	80002d8 <__aeabi_dsub>
 801089c:	4602      	mov	r2, r0
 801089e:	460b      	mov	r3, r1
 80108a0:	ec51 0b19 	vmov	r0, r1, d9
 80108a4:	f7ef fffa 	bl	800089c <__aeabi_ddiv>
 80108a8:	4602      	mov	r2, r0
 80108aa:	460b      	mov	r3, r1
 80108ac:	ec51 0b18 	vmov	r0, r1, d8
 80108b0:	f7ef fd12 	bl	80002d8 <__aeabi_dsub>
 80108b4:	4642      	mov	r2, r8
 80108b6:	464b      	mov	r3, r9
 80108b8:	f7ef fd0e 	bl	80002d8 <__aeabi_dsub>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	2000      	movs	r0, #0
 80108c2:	4927      	ldr	r1, [pc, #156]	; (8010960 <__ieee754_exp+0x2f8>)
 80108c4:	f7ef fd08 	bl	80002d8 <__aeabi_dsub>
 80108c8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80108cc:	4592      	cmp	sl, r2
 80108ce:	db02      	blt.n	80108d6 <__ieee754_exp+0x26e>
 80108d0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80108d4:	e6e3      	b.n	801069e <__ieee754_exp+0x36>
 80108d6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80108da:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80108de:	2200      	movs	r2, #0
 80108e0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80108e4:	f7ef feb0 	bl	8000648 <__aeabi_dmul>
 80108e8:	e6d9      	b.n	801069e <__ieee754_exp+0x36>
 80108ea:	bf00      	nop
 80108ec:	f3af 8000 	nop.w
 80108f0:	fefa39ef 	.word	0xfefa39ef
 80108f4:	40862e42 	.word	0x40862e42
 80108f8:	d52d3051 	.word	0xd52d3051
 80108fc:	c0874910 	.word	0xc0874910
 8010900:	72bea4d0 	.word	0x72bea4d0
 8010904:	3e663769 	.word	0x3e663769
 8010908:	c5d26bf1 	.word	0xc5d26bf1
 801090c:	3ebbbd41 	.word	0x3ebbbd41
 8010910:	af25de2c 	.word	0xaf25de2c
 8010914:	3f11566a 	.word	0x3f11566a
 8010918:	16bebd93 	.word	0x16bebd93
 801091c:	3f66c16c 	.word	0x3f66c16c
 8010920:	5555553e 	.word	0x5555553e
 8010924:	3fc55555 	.word	0x3fc55555
 8010928:	652b82fe 	.word	0x652b82fe
 801092c:	3ff71547 	.word	0x3ff71547
 8010930:	fee00000 	.word	0xfee00000
 8010934:	3fe62e42 	.word	0x3fe62e42
 8010938:	35793c76 	.word	0x35793c76
 801093c:	3dea39ef 	.word	0x3dea39ef
 8010940:	8800759c 	.word	0x8800759c
 8010944:	7e37e43c 	.word	0x7e37e43c
 8010948:	40862e41 	.word	0x40862e41
 801094c:	7fefffff 	.word	0x7fefffff
 8010950:	3fd62e42 	.word	0x3fd62e42
 8010954:	3ff0a2b1 	.word	0x3ff0a2b1
 8010958:	08024900 	.word	0x08024900
 801095c:	08024910 	.word	0x08024910
 8010960:	3ff00000 	.word	0x3ff00000
 8010964:	080248f0 	.word	0x080248f0
 8010968:	3defffff 	.word	0x3defffff
 801096c:	00000000 	.word	0x00000000

08010970 <__ieee754_pow>:
 8010970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010974:	ed2d 8b06 	vpush	{d8-d10}
 8010978:	b089      	sub	sp, #36	; 0x24
 801097a:	ed8d 1b00 	vstr	d1, [sp]
 801097e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010982:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010986:	ea58 0102 	orrs.w	r1, r8, r2
 801098a:	ec57 6b10 	vmov	r6, r7, d0
 801098e:	d115      	bne.n	80109bc <__ieee754_pow+0x4c>
 8010990:	19b3      	adds	r3, r6, r6
 8010992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010996:	4152      	adcs	r2, r2
 8010998:	4299      	cmp	r1, r3
 801099a:	4b89      	ldr	r3, [pc, #548]	; (8010bc0 <__ieee754_pow+0x250>)
 801099c:	4193      	sbcs	r3, r2
 801099e:	f080 84d1 	bcs.w	8011344 <__ieee754_pow+0x9d4>
 80109a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109a6:	4630      	mov	r0, r6
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7ef fc97 	bl	80002dc <__adddf3>
 80109ae:	ec41 0b10 	vmov	d0, r0, r1
 80109b2:	b009      	add	sp, #36	; 0x24
 80109b4:	ecbd 8b06 	vpop	{d8-d10}
 80109b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109bc:	4b81      	ldr	r3, [pc, #516]	; (8010bc4 <__ieee754_pow+0x254>)
 80109be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80109c2:	429c      	cmp	r4, r3
 80109c4:	ee10 aa10 	vmov	sl, s0
 80109c8:	463d      	mov	r5, r7
 80109ca:	dc06      	bgt.n	80109da <__ieee754_pow+0x6a>
 80109cc:	d101      	bne.n	80109d2 <__ieee754_pow+0x62>
 80109ce:	2e00      	cmp	r6, #0
 80109d0:	d1e7      	bne.n	80109a2 <__ieee754_pow+0x32>
 80109d2:	4598      	cmp	r8, r3
 80109d4:	dc01      	bgt.n	80109da <__ieee754_pow+0x6a>
 80109d6:	d10f      	bne.n	80109f8 <__ieee754_pow+0x88>
 80109d8:	b172      	cbz	r2, 80109f8 <__ieee754_pow+0x88>
 80109da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80109de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80109e2:	ea55 050a 	orrs.w	r5, r5, sl
 80109e6:	d1dc      	bne.n	80109a2 <__ieee754_pow+0x32>
 80109e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80109ec:	18db      	adds	r3, r3, r3
 80109ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80109f2:	4152      	adcs	r2, r2
 80109f4:	429d      	cmp	r5, r3
 80109f6:	e7d0      	b.n	801099a <__ieee754_pow+0x2a>
 80109f8:	2d00      	cmp	r5, #0
 80109fa:	da3b      	bge.n	8010a74 <__ieee754_pow+0x104>
 80109fc:	4b72      	ldr	r3, [pc, #456]	; (8010bc8 <__ieee754_pow+0x258>)
 80109fe:	4598      	cmp	r8, r3
 8010a00:	dc51      	bgt.n	8010aa6 <__ieee754_pow+0x136>
 8010a02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010a06:	4598      	cmp	r8, r3
 8010a08:	f340 84ab 	ble.w	8011362 <__ieee754_pow+0x9f2>
 8010a0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010a10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a14:	2b14      	cmp	r3, #20
 8010a16:	dd0f      	ble.n	8010a38 <__ieee754_pow+0xc8>
 8010a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010a1c:	fa22 f103 	lsr.w	r1, r2, r3
 8010a20:	fa01 f303 	lsl.w	r3, r1, r3
 8010a24:	4293      	cmp	r3, r2
 8010a26:	f040 849c 	bne.w	8011362 <__ieee754_pow+0x9f2>
 8010a2a:	f001 0101 	and.w	r1, r1, #1
 8010a2e:	f1c1 0302 	rsb	r3, r1, #2
 8010a32:	9304      	str	r3, [sp, #16]
 8010a34:	b182      	cbz	r2, 8010a58 <__ieee754_pow+0xe8>
 8010a36:	e05f      	b.n	8010af8 <__ieee754_pow+0x188>
 8010a38:	2a00      	cmp	r2, #0
 8010a3a:	d15b      	bne.n	8010af4 <__ieee754_pow+0x184>
 8010a3c:	f1c3 0314 	rsb	r3, r3, #20
 8010a40:	fa48 f103 	asr.w	r1, r8, r3
 8010a44:	fa01 f303 	lsl.w	r3, r1, r3
 8010a48:	4543      	cmp	r3, r8
 8010a4a:	f040 8487 	bne.w	801135c <__ieee754_pow+0x9ec>
 8010a4e:	f001 0101 	and.w	r1, r1, #1
 8010a52:	f1c1 0302 	rsb	r3, r1, #2
 8010a56:	9304      	str	r3, [sp, #16]
 8010a58:	4b5c      	ldr	r3, [pc, #368]	; (8010bcc <__ieee754_pow+0x25c>)
 8010a5a:	4598      	cmp	r8, r3
 8010a5c:	d132      	bne.n	8010ac4 <__ieee754_pow+0x154>
 8010a5e:	f1b9 0f00 	cmp.w	r9, #0
 8010a62:	f280 8477 	bge.w	8011354 <__ieee754_pow+0x9e4>
 8010a66:	4959      	ldr	r1, [pc, #356]	; (8010bcc <__ieee754_pow+0x25c>)
 8010a68:	4632      	mov	r2, r6
 8010a6a:	463b      	mov	r3, r7
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	f7ef ff15 	bl	800089c <__aeabi_ddiv>
 8010a72:	e79c      	b.n	80109ae <__ieee754_pow+0x3e>
 8010a74:	2300      	movs	r3, #0
 8010a76:	9304      	str	r3, [sp, #16]
 8010a78:	2a00      	cmp	r2, #0
 8010a7a:	d13d      	bne.n	8010af8 <__ieee754_pow+0x188>
 8010a7c:	4b51      	ldr	r3, [pc, #324]	; (8010bc4 <__ieee754_pow+0x254>)
 8010a7e:	4598      	cmp	r8, r3
 8010a80:	d1ea      	bne.n	8010a58 <__ieee754_pow+0xe8>
 8010a82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010a86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8010a8e:	f000 8459 	beq.w	8011344 <__ieee754_pow+0x9d4>
 8010a92:	4b4f      	ldr	r3, [pc, #316]	; (8010bd0 <__ieee754_pow+0x260>)
 8010a94:	429c      	cmp	r4, r3
 8010a96:	dd08      	ble.n	8010aaa <__ieee754_pow+0x13a>
 8010a98:	f1b9 0f00 	cmp.w	r9, #0
 8010a9c:	f2c0 8456 	blt.w	801134c <__ieee754_pow+0x9dc>
 8010aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010aa4:	e783      	b.n	80109ae <__ieee754_pow+0x3e>
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	e7e5      	b.n	8010a76 <__ieee754_pow+0x106>
 8010aaa:	f1b9 0f00 	cmp.w	r9, #0
 8010aae:	f04f 0000 	mov.w	r0, #0
 8010ab2:	f04f 0100 	mov.w	r1, #0
 8010ab6:	f6bf af7a 	bge.w	80109ae <__ieee754_pow+0x3e>
 8010aba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ac2:	e774      	b.n	80109ae <__ieee754_pow+0x3e>
 8010ac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010ac8:	d106      	bne.n	8010ad8 <__ieee754_pow+0x168>
 8010aca:	4632      	mov	r2, r6
 8010acc:	463b      	mov	r3, r7
 8010ace:	4630      	mov	r0, r6
 8010ad0:	4639      	mov	r1, r7
 8010ad2:	f7ef fdb9 	bl	8000648 <__aeabi_dmul>
 8010ad6:	e76a      	b.n	80109ae <__ieee754_pow+0x3e>
 8010ad8:	4b3e      	ldr	r3, [pc, #248]	; (8010bd4 <__ieee754_pow+0x264>)
 8010ada:	4599      	cmp	r9, r3
 8010adc:	d10c      	bne.n	8010af8 <__ieee754_pow+0x188>
 8010ade:	2d00      	cmp	r5, #0
 8010ae0:	db0a      	blt.n	8010af8 <__ieee754_pow+0x188>
 8010ae2:	ec47 6b10 	vmov	d0, r6, r7
 8010ae6:	b009      	add	sp, #36	; 0x24
 8010ae8:	ecbd 8b06 	vpop	{d8-d10}
 8010aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af0:	f7ff bcdc 	b.w	80104ac <__ieee754_sqrt>
 8010af4:	2300      	movs	r3, #0
 8010af6:	9304      	str	r3, [sp, #16]
 8010af8:	ec47 6b10 	vmov	d0, r6, r7
 8010afc:	f000 fc62 	bl	80113c4 <fabs>
 8010b00:	ec51 0b10 	vmov	r0, r1, d0
 8010b04:	f1ba 0f00 	cmp.w	sl, #0
 8010b08:	d129      	bne.n	8010b5e <__ieee754_pow+0x1ee>
 8010b0a:	b124      	cbz	r4, 8010b16 <__ieee754_pow+0x1a6>
 8010b0c:	4b2f      	ldr	r3, [pc, #188]	; (8010bcc <__ieee754_pow+0x25c>)
 8010b0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d123      	bne.n	8010b5e <__ieee754_pow+0x1ee>
 8010b16:	f1b9 0f00 	cmp.w	r9, #0
 8010b1a:	da05      	bge.n	8010b28 <__ieee754_pow+0x1b8>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	2000      	movs	r0, #0
 8010b22:	492a      	ldr	r1, [pc, #168]	; (8010bcc <__ieee754_pow+0x25c>)
 8010b24:	f7ef feba 	bl	800089c <__aeabi_ddiv>
 8010b28:	2d00      	cmp	r5, #0
 8010b2a:	f6bf af40 	bge.w	80109ae <__ieee754_pow+0x3e>
 8010b2e:	9b04      	ldr	r3, [sp, #16]
 8010b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b38:	431c      	orrs	r4, r3
 8010b3a:	d108      	bne.n	8010b4e <__ieee754_pow+0x1de>
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	460b      	mov	r3, r1
 8010b40:	4610      	mov	r0, r2
 8010b42:	4619      	mov	r1, r3
 8010b44:	f7ef fbc8 	bl	80002d8 <__aeabi_dsub>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	e78f      	b.n	8010a6e <__ieee754_pow+0xfe>
 8010b4e:	9b04      	ldr	r3, [sp, #16]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	f47f af2c 	bne.w	80109ae <__ieee754_pow+0x3e>
 8010b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	e727      	b.n	80109ae <__ieee754_pow+0x3e>
 8010b5e:	0feb      	lsrs	r3, r5, #31
 8010b60:	3b01      	subs	r3, #1
 8010b62:	9306      	str	r3, [sp, #24]
 8010b64:	9a06      	ldr	r2, [sp, #24]
 8010b66:	9b04      	ldr	r3, [sp, #16]
 8010b68:	4313      	orrs	r3, r2
 8010b6a:	d102      	bne.n	8010b72 <__ieee754_pow+0x202>
 8010b6c:	4632      	mov	r2, r6
 8010b6e:	463b      	mov	r3, r7
 8010b70:	e7e6      	b.n	8010b40 <__ieee754_pow+0x1d0>
 8010b72:	4b19      	ldr	r3, [pc, #100]	; (8010bd8 <__ieee754_pow+0x268>)
 8010b74:	4598      	cmp	r8, r3
 8010b76:	f340 80fb 	ble.w	8010d70 <__ieee754_pow+0x400>
 8010b7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010b7e:	4598      	cmp	r8, r3
 8010b80:	4b13      	ldr	r3, [pc, #76]	; (8010bd0 <__ieee754_pow+0x260>)
 8010b82:	dd0c      	ble.n	8010b9e <__ieee754_pow+0x22e>
 8010b84:	429c      	cmp	r4, r3
 8010b86:	dc0f      	bgt.n	8010ba8 <__ieee754_pow+0x238>
 8010b88:	f1b9 0f00 	cmp.w	r9, #0
 8010b8c:	da0f      	bge.n	8010bae <__ieee754_pow+0x23e>
 8010b8e:	2000      	movs	r0, #0
 8010b90:	b009      	add	sp, #36	; 0x24
 8010b92:	ecbd 8b06 	vpop	{d8-d10}
 8010b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9a:	f000 bcc2 	b.w	8011522 <__math_oflow>
 8010b9e:	429c      	cmp	r4, r3
 8010ba0:	dbf2      	blt.n	8010b88 <__ieee754_pow+0x218>
 8010ba2:	4b0a      	ldr	r3, [pc, #40]	; (8010bcc <__ieee754_pow+0x25c>)
 8010ba4:	429c      	cmp	r4, r3
 8010ba6:	dd19      	ble.n	8010bdc <__ieee754_pow+0x26c>
 8010ba8:	f1b9 0f00 	cmp.w	r9, #0
 8010bac:	dcef      	bgt.n	8010b8e <__ieee754_pow+0x21e>
 8010bae:	2000      	movs	r0, #0
 8010bb0:	b009      	add	sp, #36	; 0x24
 8010bb2:	ecbd 8b06 	vpop	{d8-d10}
 8010bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bba:	f000 bca9 	b.w	8011510 <__math_uflow>
 8010bbe:	bf00      	nop
 8010bc0:	fff00000 	.word	0xfff00000
 8010bc4:	7ff00000 	.word	0x7ff00000
 8010bc8:	433fffff 	.word	0x433fffff
 8010bcc:	3ff00000 	.word	0x3ff00000
 8010bd0:	3fefffff 	.word	0x3fefffff
 8010bd4:	3fe00000 	.word	0x3fe00000
 8010bd8:	41e00000 	.word	0x41e00000
 8010bdc:	4b60      	ldr	r3, [pc, #384]	; (8010d60 <__ieee754_pow+0x3f0>)
 8010bde:	2200      	movs	r2, #0
 8010be0:	f7ef fb7a 	bl	80002d8 <__aeabi_dsub>
 8010be4:	a354      	add	r3, pc, #336	; (adr r3, 8010d38 <__ieee754_pow+0x3c8>)
 8010be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bea:	4604      	mov	r4, r0
 8010bec:	460d      	mov	r5, r1
 8010bee:	f7ef fd2b 	bl	8000648 <__aeabi_dmul>
 8010bf2:	a353      	add	r3, pc, #332	; (adr r3, 8010d40 <__ieee754_pow+0x3d0>)
 8010bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf8:	4606      	mov	r6, r0
 8010bfa:	460f      	mov	r7, r1
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	4629      	mov	r1, r5
 8010c00:	f7ef fd22 	bl	8000648 <__aeabi_dmul>
 8010c04:	4b57      	ldr	r3, [pc, #348]	; (8010d64 <__ieee754_pow+0x3f4>)
 8010c06:	4682      	mov	sl, r0
 8010c08:	468b      	mov	fp, r1
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	4629      	mov	r1, r5
 8010c10:	f7ef fd1a 	bl	8000648 <__aeabi_dmul>
 8010c14:	4602      	mov	r2, r0
 8010c16:	460b      	mov	r3, r1
 8010c18:	a14b      	add	r1, pc, #300	; (adr r1, 8010d48 <__ieee754_pow+0x3d8>)
 8010c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c1e:	f7ef fb5b 	bl	80002d8 <__aeabi_dsub>
 8010c22:	4622      	mov	r2, r4
 8010c24:	462b      	mov	r3, r5
 8010c26:	f7ef fd0f 	bl	8000648 <__aeabi_dmul>
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	2000      	movs	r0, #0
 8010c30:	494d      	ldr	r1, [pc, #308]	; (8010d68 <__ieee754_pow+0x3f8>)
 8010c32:	f7ef fb51 	bl	80002d8 <__aeabi_dsub>
 8010c36:	4622      	mov	r2, r4
 8010c38:	4680      	mov	r8, r0
 8010c3a:	4689      	mov	r9, r1
 8010c3c:	462b      	mov	r3, r5
 8010c3e:	4620      	mov	r0, r4
 8010c40:	4629      	mov	r1, r5
 8010c42:	f7ef fd01 	bl	8000648 <__aeabi_dmul>
 8010c46:	4602      	mov	r2, r0
 8010c48:	460b      	mov	r3, r1
 8010c4a:	4640      	mov	r0, r8
 8010c4c:	4649      	mov	r1, r9
 8010c4e:	f7ef fcfb 	bl	8000648 <__aeabi_dmul>
 8010c52:	a33f      	add	r3, pc, #252	; (adr r3, 8010d50 <__ieee754_pow+0x3e0>)
 8010c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c58:	f7ef fcf6 	bl	8000648 <__aeabi_dmul>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	4650      	mov	r0, sl
 8010c62:	4659      	mov	r1, fp
 8010c64:	f7ef fb38 	bl	80002d8 <__aeabi_dsub>
 8010c68:	4602      	mov	r2, r0
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	4680      	mov	r8, r0
 8010c6e:	4689      	mov	r9, r1
 8010c70:	4630      	mov	r0, r6
 8010c72:	4639      	mov	r1, r7
 8010c74:	f7ef fb32 	bl	80002dc <__adddf3>
 8010c78:	2000      	movs	r0, #0
 8010c7a:	4632      	mov	r2, r6
 8010c7c:	463b      	mov	r3, r7
 8010c7e:	4604      	mov	r4, r0
 8010c80:	460d      	mov	r5, r1
 8010c82:	f7ef fb29 	bl	80002d8 <__aeabi_dsub>
 8010c86:	4602      	mov	r2, r0
 8010c88:	460b      	mov	r3, r1
 8010c8a:	4640      	mov	r0, r8
 8010c8c:	4649      	mov	r1, r9
 8010c8e:	f7ef fb23 	bl	80002d8 <__aeabi_dsub>
 8010c92:	9b04      	ldr	r3, [sp, #16]
 8010c94:	9a06      	ldr	r2, [sp, #24]
 8010c96:	3b01      	subs	r3, #1
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	4682      	mov	sl, r0
 8010c9c:	468b      	mov	fp, r1
 8010c9e:	f040 81e7 	bne.w	8011070 <__ieee754_pow+0x700>
 8010ca2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010d58 <__ieee754_pow+0x3e8>
 8010ca6:	eeb0 8a47 	vmov.f32	s16, s14
 8010caa:	eef0 8a67 	vmov.f32	s17, s15
 8010cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010cb2:	2600      	movs	r6, #0
 8010cb4:	4632      	mov	r2, r6
 8010cb6:	463b      	mov	r3, r7
 8010cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cbc:	f7ef fb0c 	bl	80002d8 <__aeabi_dsub>
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	462b      	mov	r3, r5
 8010cc4:	f7ef fcc0 	bl	8000648 <__aeabi_dmul>
 8010cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ccc:	4680      	mov	r8, r0
 8010cce:	4689      	mov	r9, r1
 8010cd0:	4650      	mov	r0, sl
 8010cd2:	4659      	mov	r1, fp
 8010cd4:	f7ef fcb8 	bl	8000648 <__aeabi_dmul>
 8010cd8:	4602      	mov	r2, r0
 8010cda:	460b      	mov	r3, r1
 8010cdc:	4640      	mov	r0, r8
 8010cde:	4649      	mov	r1, r9
 8010ce0:	f7ef fafc 	bl	80002dc <__adddf3>
 8010ce4:	4632      	mov	r2, r6
 8010ce6:	463b      	mov	r3, r7
 8010ce8:	4680      	mov	r8, r0
 8010cea:	4689      	mov	r9, r1
 8010cec:	4620      	mov	r0, r4
 8010cee:	4629      	mov	r1, r5
 8010cf0:	f7ef fcaa 	bl	8000648 <__aeabi_dmul>
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	460d      	mov	r5, r1
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	4649      	mov	r1, r9
 8010cfe:	4640      	mov	r0, r8
 8010d00:	f7ef faec 	bl	80002dc <__adddf3>
 8010d04:	4b19      	ldr	r3, [pc, #100]	; (8010d6c <__ieee754_pow+0x3fc>)
 8010d06:	4299      	cmp	r1, r3
 8010d08:	ec45 4b19 	vmov	d9, r4, r5
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	460f      	mov	r7, r1
 8010d10:	468b      	mov	fp, r1
 8010d12:	f340 82f0 	ble.w	80112f6 <__ieee754_pow+0x986>
 8010d16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010d1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010d1e:	4303      	orrs	r3, r0
 8010d20:	f000 81e4 	beq.w	80110ec <__ieee754_pow+0x77c>
 8010d24:	ec51 0b18 	vmov	r0, r1, d8
 8010d28:	2200      	movs	r2, #0
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f7ef fefe 	bl	8000b2c <__aeabi_dcmplt>
 8010d30:	3800      	subs	r0, #0
 8010d32:	bf18      	it	ne
 8010d34:	2001      	movne	r0, #1
 8010d36:	e72b      	b.n	8010b90 <__ieee754_pow+0x220>
 8010d38:	60000000 	.word	0x60000000
 8010d3c:	3ff71547 	.word	0x3ff71547
 8010d40:	f85ddf44 	.word	0xf85ddf44
 8010d44:	3e54ae0b 	.word	0x3e54ae0b
 8010d48:	55555555 	.word	0x55555555
 8010d4c:	3fd55555 	.word	0x3fd55555
 8010d50:	652b82fe 	.word	0x652b82fe
 8010d54:	3ff71547 	.word	0x3ff71547
 8010d58:	00000000 	.word	0x00000000
 8010d5c:	bff00000 	.word	0xbff00000
 8010d60:	3ff00000 	.word	0x3ff00000
 8010d64:	3fd00000 	.word	0x3fd00000
 8010d68:	3fe00000 	.word	0x3fe00000
 8010d6c:	408fffff 	.word	0x408fffff
 8010d70:	4bd5      	ldr	r3, [pc, #852]	; (80110c8 <__ieee754_pow+0x758>)
 8010d72:	402b      	ands	r3, r5
 8010d74:	2200      	movs	r2, #0
 8010d76:	b92b      	cbnz	r3, 8010d84 <__ieee754_pow+0x414>
 8010d78:	4bd4      	ldr	r3, [pc, #848]	; (80110cc <__ieee754_pow+0x75c>)
 8010d7a:	f7ef fc65 	bl	8000648 <__aeabi_dmul>
 8010d7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010d82:	460c      	mov	r4, r1
 8010d84:	1523      	asrs	r3, r4, #20
 8010d86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d8a:	4413      	add	r3, r2
 8010d8c:	9305      	str	r3, [sp, #20]
 8010d8e:	4bd0      	ldr	r3, [pc, #832]	; (80110d0 <__ieee754_pow+0x760>)
 8010d90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010d94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010d98:	429c      	cmp	r4, r3
 8010d9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010d9e:	dd08      	ble.n	8010db2 <__ieee754_pow+0x442>
 8010da0:	4bcc      	ldr	r3, [pc, #816]	; (80110d4 <__ieee754_pow+0x764>)
 8010da2:	429c      	cmp	r4, r3
 8010da4:	f340 8162 	ble.w	801106c <__ieee754_pow+0x6fc>
 8010da8:	9b05      	ldr	r3, [sp, #20]
 8010daa:	3301      	adds	r3, #1
 8010dac:	9305      	str	r3, [sp, #20]
 8010dae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010db2:	2400      	movs	r4, #0
 8010db4:	00e3      	lsls	r3, r4, #3
 8010db6:	9307      	str	r3, [sp, #28]
 8010db8:	4bc7      	ldr	r3, [pc, #796]	; (80110d8 <__ieee754_pow+0x768>)
 8010dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010dbe:	ed93 7b00 	vldr	d7, [r3]
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	ec53 2b17 	vmov	r2, r3, d7
 8010dc8:	eeb0 9a47 	vmov.f32	s18, s14
 8010dcc:	eef0 9a67 	vmov.f32	s19, s15
 8010dd0:	4682      	mov	sl, r0
 8010dd2:	f7ef fa81 	bl	80002d8 <__aeabi_dsub>
 8010dd6:	4652      	mov	r2, sl
 8010dd8:	4606      	mov	r6, r0
 8010dda:	460f      	mov	r7, r1
 8010ddc:	462b      	mov	r3, r5
 8010dde:	ec51 0b19 	vmov	r0, r1, d9
 8010de2:	f7ef fa7b 	bl	80002dc <__adddf3>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	2000      	movs	r0, #0
 8010dec:	49bb      	ldr	r1, [pc, #748]	; (80110dc <__ieee754_pow+0x76c>)
 8010dee:	f7ef fd55 	bl	800089c <__aeabi_ddiv>
 8010df2:	ec41 0b1a 	vmov	d10, r0, r1
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	4639      	mov	r1, r7
 8010dfe:	f7ef fc23 	bl	8000648 <__aeabi_dmul>
 8010e02:	2300      	movs	r3, #0
 8010e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e08:	9302      	str	r3, [sp, #8]
 8010e0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010e0e:	46ab      	mov	fp, r5
 8010e10:	106d      	asrs	r5, r5, #1
 8010e12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010e1a:	ec41 0b18 	vmov	d8, r0, r1
 8010e1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010e22:	2200      	movs	r2, #0
 8010e24:	4640      	mov	r0, r8
 8010e26:	4649      	mov	r1, r9
 8010e28:	4614      	mov	r4, r2
 8010e2a:	461d      	mov	r5, r3
 8010e2c:	f7ef fc0c 	bl	8000648 <__aeabi_dmul>
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	4630      	mov	r0, r6
 8010e36:	4639      	mov	r1, r7
 8010e38:	f7ef fa4e 	bl	80002d8 <__aeabi_dsub>
 8010e3c:	ec53 2b19 	vmov	r2, r3, d9
 8010e40:	4606      	mov	r6, r0
 8010e42:	460f      	mov	r7, r1
 8010e44:	4620      	mov	r0, r4
 8010e46:	4629      	mov	r1, r5
 8010e48:	f7ef fa46 	bl	80002d8 <__aeabi_dsub>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	4650      	mov	r0, sl
 8010e52:	4659      	mov	r1, fp
 8010e54:	f7ef fa40 	bl	80002d8 <__aeabi_dsub>
 8010e58:	4642      	mov	r2, r8
 8010e5a:	464b      	mov	r3, r9
 8010e5c:	f7ef fbf4 	bl	8000648 <__aeabi_dmul>
 8010e60:	4602      	mov	r2, r0
 8010e62:	460b      	mov	r3, r1
 8010e64:	4630      	mov	r0, r6
 8010e66:	4639      	mov	r1, r7
 8010e68:	f7ef fa36 	bl	80002d8 <__aeabi_dsub>
 8010e6c:	ec53 2b1a 	vmov	r2, r3, d10
 8010e70:	f7ef fbea 	bl	8000648 <__aeabi_dmul>
 8010e74:	ec53 2b18 	vmov	r2, r3, d8
 8010e78:	ec41 0b19 	vmov	d9, r0, r1
 8010e7c:	ec51 0b18 	vmov	r0, r1, d8
 8010e80:	f7ef fbe2 	bl	8000648 <__aeabi_dmul>
 8010e84:	a37c      	add	r3, pc, #496	; (adr r3, 8011078 <__ieee754_pow+0x708>)
 8010e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	460d      	mov	r5, r1
 8010e8e:	f7ef fbdb 	bl	8000648 <__aeabi_dmul>
 8010e92:	a37b      	add	r3, pc, #492	; (adr r3, 8011080 <__ieee754_pow+0x710>)
 8010e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e98:	f7ef fa20 	bl	80002dc <__adddf3>
 8010e9c:	4622      	mov	r2, r4
 8010e9e:	462b      	mov	r3, r5
 8010ea0:	f7ef fbd2 	bl	8000648 <__aeabi_dmul>
 8010ea4:	a378      	add	r3, pc, #480	; (adr r3, 8011088 <__ieee754_pow+0x718>)
 8010ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eaa:	f7ef fa17 	bl	80002dc <__adddf3>
 8010eae:	4622      	mov	r2, r4
 8010eb0:	462b      	mov	r3, r5
 8010eb2:	f7ef fbc9 	bl	8000648 <__aeabi_dmul>
 8010eb6:	a376      	add	r3, pc, #472	; (adr r3, 8011090 <__ieee754_pow+0x720>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	f7ef fa0e 	bl	80002dc <__adddf3>
 8010ec0:	4622      	mov	r2, r4
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	f7ef fbc0 	bl	8000648 <__aeabi_dmul>
 8010ec8:	a373      	add	r3, pc, #460	; (adr r3, 8011098 <__ieee754_pow+0x728>)
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	f7ef fa05 	bl	80002dc <__adddf3>
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	462b      	mov	r3, r5
 8010ed6:	f7ef fbb7 	bl	8000648 <__aeabi_dmul>
 8010eda:	a371      	add	r3, pc, #452	; (adr r3, 80110a0 <__ieee754_pow+0x730>)
 8010edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee0:	f7ef f9fc 	bl	80002dc <__adddf3>
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	460f      	mov	r7, r1
 8010eea:	462b      	mov	r3, r5
 8010eec:	4620      	mov	r0, r4
 8010eee:	4629      	mov	r1, r5
 8010ef0:	f7ef fbaa 	bl	8000648 <__aeabi_dmul>
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	4630      	mov	r0, r6
 8010efa:	4639      	mov	r1, r7
 8010efc:	f7ef fba4 	bl	8000648 <__aeabi_dmul>
 8010f00:	4642      	mov	r2, r8
 8010f02:	4604      	mov	r4, r0
 8010f04:	460d      	mov	r5, r1
 8010f06:	464b      	mov	r3, r9
 8010f08:	ec51 0b18 	vmov	r0, r1, d8
 8010f0c:	f7ef f9e6 	bl	80002dc <__adddf3>
 8010f10:	ec53 2b19 	vmov	r2, r3, d9
 8010f14:	f7ef fb98 	bl	8000648 <__aeabi_dmul>
 8010f18:	4622      	mov	r2, r4
 8010f1a:	462b      	mov	r3, r5
 8010f1c:	f7ef f9de 	bl	80002dc <__adddf3>
 8010f20:	4642      	mov	r2, r8
 8010f22:	4682      	mov	sl, r0
 8010f24:	468b      	mov	fp, r1
 8010f26:	464b      	mov	r3, r9
 8010f28:	4640      	mov	r0, r8
 8010f2a:	4649      	mov	r1, r9
 8010f2c:	f7ef fb8c 	bl	8000648 <__aeabi_dmul>
 8010f30:	4b6b      	ldr	r3, [pc, #428]	; (80110e0 <__ieee754_pow+0x770>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	4606      	mov	r6, r0
 8010f36:	460f      	mov	r7, r1
 8010f38:	f7ef f9d0 	bl	80002dc <__adddf3>
 8010f3c:	4652      	mov	r2, sl
 8010f3e:	465b      	mov	r3, fp
 8010f40:	f7ef f9cc 	bl	80002dc <__adddf3>
 8010f44:	2000      	movs	r0, #0
 8010f46:	4604      	mov	r4, r0
 8010f48:	460d      	mov	r5, r1
 8010f4a:	4602      	mov	r2, r0
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	4640      	mov	r0, r8
 8010f50:	4649      	mov	r1, r9
 8010f52:	f7ef fb79 	bl	8000648 <__aeabi_dmul>
 8010f56:	4b62      	ldr	r3, [pc, #392]	; (80110e0 <__ieee754_pow+0x770>)
 8010f58:	4680      	mov	r8, r0
 8010f5a:	4689      	mov	r9, r1
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	4620      	mov	r0, r4
 8010f60:	4629      	mov	r1, r5
 8010f62:	f7ef f9b9 	bl	80002d8 <__aeabi_dsub>
 8010f66:	4632      	mov	r2, r6
 8010f68:	463b      	mov	r3, r7
 8010f6a:	f7ef f9b5 	bl	80002d8 <__aeabi_dsub>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	4650      	mov	r0, sl
 8010f74:	4659      	mov	r1, fp
 8010f76:	f7ef f9af 	bl	80002d8 <__aeabi_dsub>
 8010f7a:	ec53 2b18 	vmov	r2, r3, d8
 8010f7e:	f7ef fb63 	bl	8000648 <__aeabi_dmul>
 8010f82:	4622      	mov	r2, r4
 8010f84:	4606      	mov	r6, r0
 8010f86:	460f      	mov	r7, r1
 8010f88:	462b      	mov	r3, r5
 8010f8a:	ec51 0b19 	vmov	r0, r1, d9
 8010f8e:	f7ef fb5b 	bl	8000648 <__aeabi_dmul>
 8010f92:	4602      	mov	r2, r0
 8010f94:	460b      	mov	r3, r1
 8010f96:	4630      	mov	r0, r6
 8010f98:	4639      	mov	r1, r7
 8010f9a:	f7ef f99f 	bl	80002dc <__adddf3>
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	460f      	mov	r7, r1
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	4649      	mov	r1, r9
 8010faa:	f7ef f997 	bl	80002dc <__adddf3>
 8010fae:	a33e      	add	r3, pc, #248	; (adr r3, 80110a8 <__ieee754_pow+0x738>)
 8010fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	460d      	mov	r5, r1
 8010fba:	f7ef fb45 	bl	8000648 <__aeabi_dmul>
 8010fbe:	4642      	mov	r2, r8
 8010fc0:	ec41 0b18 	vmov	d8, r0, r1
 8010fc4:	464b      	mov	r3, r9
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	4629      	mov	r1, r5
 8010fca:	f7ef f985 	bl	80002d8 <__aeabi_dsub>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	4639      	mov	r1, r7
 8010fd6:	f7ef f97f 	bl	80002d8 <__aeabi_dsub>
 8010fda:	a335      	add	r3, pc, #212	; (adr r3, 80110b0 <__ieee754_pow+0x740>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	f7ef fb32 	bl	8000648 <__aeabi_dmul>
 8010fe4:	a334      	add	r3, pc, #208	; (adr r3, 80110b8 <__ieee754_pow+0x748>)
 8010fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fea:	4606      	mov	r6, r0
 8010fec:	460f      	mov	r7, r1
 8010fee:	4620      	mov	r0, r4
 8010ff0:	4629      	mov	r1, r5
 8010ff2:	f7ef fb29 	bl	8000648 <__aeabi_dmul>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	f7ef f96d 	bl	80002dc <__adddf3>
 8011002:	9a07      	ldr	r2, [sp, #28]
 8011004:	4b37      	ldr	r3, [pc, #220]	; (80110e4 <__ieee754_pow+0x774>)
 8011006:	4413      	add	r3, r2
 8011008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100c:	f7ef f966 	bl	80002dc <__adddf3>
 8011010:	4682      	mov	sl, r0
 8011012:	9805      	ldr	r0, [sp, #20]
 8011014:	468b      	mov	fp, r1
 8011016:	f7ef faad 	bl	8000574 <__aeabi_i2d>
 801101a:	9a07      	ldr	r2, [sp, #28]
 801101c:	4b32      	ldr	r3, [pc, #200]	; (80110e8 <__ieee754_pow+0x778>)
 801101e:	4413      	add	r3, r2
 8011020:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011024:	4606      	mov	r6, r0
 8011026:	460f      	mov	r7, r1
 8011028:	4652      	mov	r2, sl
 801102a:	465b      	mov	r3, fp
 801102c:	ec51 0b18 	vmov	r0, r1, d8
 8011030:	f7ef f954 	bl	80002dc <__adddf3>
 8011034:	4642      	mov	r2, r8
 8011036:	464b      	mov	r3, r9
 8011038:	f7ef f950 	bl	80002dc <__adddf3>
 801103c:	4632      	mov	r2, r6
 801103e:	463b      	mov	r3, r7
 8011040:	f7ef f94c 	bl	80002dc <__adddf3>
 8011044:	2000      	movs	r0, #0
 8011046:	4632      	mov	r2, r6
 8011048:	463b      	mov	r3, r7
 801104a:	4604      	mov	r4, r0
 801104c:	460d      	mov	r5, r1
 801104e:	f7ef f943 	bl	80002d8 <__aeabi_dsub>
 8011052:	4642      	mov	r2, r8
 8011054:	464b      	mov	r3, r9
 8011056:	f7ef f93f 	bl	80002d8 <__aeabi_dsub>
 801105a:	ec53 2b18 	vmov	r2, r3, d8
 801105e:	f7ef f93b 	bl	80002d8 <__aeabi_dsub>
 8011062:	4602      	mov	r2, r0
 8011064:	460b      	mov	r3, r1
 8011066:	4650      	mov	r0, sl
 8011068:	4659      	mov	r1, fp
 801106a:	e610      	b.n	8010c8e <__ieee754_pow+0x31e>
 801106c:	2401      	movs	r4, #1
 801106e:	e6a1      	b.n	8010db4 <__ieee754_pow+0x444>
 8011070:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80110c0 <__ieee754_pow+0x750>
 8011074:	e617      	b.n	8010ca6 <__ieee754_pow+0x336>
 8011076:	bf00      	nop
 8011078:	4a454eef 	.word	0x4a454eef
 801107c:	3fca7e28 	.word	0x3fca7e28
 8011080:	93c9db65 	.word	0x93c9db65
 8011084:	3fcd864a 	.word	0x3fcd864a
 8011088:	a91d4101 	.word	0xa91d4101
 801108c:	3fd17460 	.word	0x3fd17460
 8011090:	518f264d 	.word	0x518f264d
 8011094:	3fd55555 	.word	0x3fd55555
 8011098:	db6fabff 	.word	0xdb6fabff
 801109c:	3fdb6db6 	.word	0x3fdb6db6
 80110a0:	33333303 	.word	0x33333303
 80110a4:	3fe33333 	.word	0x3fe33333
 80110a8:	e0000000 	.word	0xe0000000
 80110ac:	3feec709 	.word	0x3feec709
 80110b0:	dc3a03fd 	.word	0xdc3a03fd
 80110b4:	3feec709 	.word	0x3feec709
 80110b8:	145b01f5 	.word	0x145b01f5
 80110bc:	be3e2fe0 	.word	0xbe3e2fe0
 80110c0:	00000000 	.word	0x00000000
 80110c4:	3ff00000 	.word	0x3ff00000
 80110c8:	7ff00000 	.word	0x7ff00000
 80110cc:	43400000 	.word	0x43400000
 80110d0:	0003988e 	.word	0x0003988e
 80110d4:	000bb679 	.word	0x000bb679
 80110d8:	08024920 	.word	0x08024920
 80110dc:	3ff00000 	.word	0x3ff00000
 80110e0:	40080000 	.word	0x40080000
 80110e4:	08024940 	.word	0x08024940
 80110e8:	08024930 	.word	0x08024930
 80110ec:	a3b3      	add	r3, pc, #716	; (adr r3, 80113bc <__ieee754_pow+0xa4c>)
 80110ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f2:	4640      	mov	r0, r8
 80110f4:	4649      	mov	r1, r9
 80110f6:	f7ef f8f1 	bl	80002dc <__adddf3>
 80110fa:	4622      	mov	r2, r4
 80110fc:	ec41 0b1a 	vmov	d10, r0, r1
 8011100:	462b      	mov	r3, r5
 8011102:	4630      	mov	r0, r6
 8011104:	4639      	mov	r1, r7
 8011106:	f7ef f8e7 	bl	80002d8 <__aeabi_dsub>
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	ec51 0b1a 	vmov	r0, r1, d10
 8011112:	f7ef fd29 	bl	8000b68 <__aeabi_dcmpgt>
 8011116:	2800      	cmp	r0, #0
 8011118:	f47f ae04 	bne.w	8010d24 <__ieee754_pow+0x3b4>
 801111c:	4aa2      	ldr	r2, [pc, #648]	; (80113a8 <__ieee754_pow+0xa38>)
 801111e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011122:	4293      	cmp	r3, r2
 8011124:	f340 8107 	ble.w	8011336 <__ieee754_pow+0x9c6>
 8011128:	151b      	asrs	r3, r3, #20
 801112a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801112e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011132:	fa4a fa03 	asr.w	sl, sl, r3
 8011136:	44da      	add	sl, fp
 8011138:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801113c:	489b      	ldr	r0, [pc, #620]	; (80113ac <__ieee754_pow+0xa3c>)
 801113e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011142:	4108      	asrs	r0, r1
 8011144:	ea00 030a 	and.w	r3, r0, sl
 8011148:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801114c:	f1c1 0114 	rsb	r1, r1, #20
 8011150:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011154:	fa4a fa01 	asr.w	sl, sl, r1
 8011158:	f1bb 0f00 	cmp.w	fp, #0
 801115c:	f04f 0200 	mov.w	r2, #0
 8011160:	4620      	mov	r0, r4
 8011162:	4629      	mov	r1, r5
 8011164:	bfb8      	it	lt
 8011166:	f1ca 0a00 	rsblt	sl, sl, #0
 801116a:	f7ef f8b5 	bl	80002d8 <__aeabi_dsub>
 801116e:	ec41 0b19 	vmov	d9, r0, r1
 8011172:	4642      	mov	r2, r8
 8011174:	464b      	mov	r3, r9
 8011176:	ec51 0b19 	vmov	r0, r1, d9
 801117a:	f7ef f8af 	bl	80002dc <__adddf3>
 801117e:	a37a      	add	r3, pc, #488	; (adr r3, 8011368 <__ieee754_pow+0x9f8>)
 8011180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011184:	2000      	movs	r0, #0
 8011186:	4604      	mov	r4, r0
 8011188:	460d      	mov	r5, r1
 801118a:	f7ef fa5d 	bl	8000648 <__aeabi_dmul>
 801118e:	ec53 2b19 	vmov	r2, r3, d9
 8011192:	4606      	mov	r6, r0
 8011194:	460f      	mov	r7, r1
 8011196:	4620      	mov	r0, r4
 8011198:	4629      	mov	r1, r5
 801119a:	f7ef f89d 	bl	80002d8 <__aeabi_dsub>
 801119e:	4602      	mov	r2, r0
 80111a0:	460b      	mov	r3, r1
 80111a2:	4640      	mov	r0, r8
 80111a4:	4649      	mov	r1, r9
 80111a6:	f7ef f897 	bl	80002d8 <__aeabi_dsub>
 80111aa:	a371      	add	r3, pc, #452	; (adr r3, 8011370 <__ieee754_pow+0xa00>)
 80111ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b0:	f7ef fa4a 	bl	8000648 <__aeabi_dmul>
 80111b4:	a370      	add	r3, pc, #448	; (adr r3, 8011378 <__ieee754_pow+0xa08>)
 80111b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ba:	4680      	mov	r8, r0
 80111bc:	4689      	mov	r9, r1
 80111be:	4620      	mov	r0, r4
 80111c0:	4629      	mov	r1, r5
 80111c2:	f7ef fa41 	bl	8000648 <__aeabi_dmul>
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	4640      	mov	r0, r8
 80111cc:	4649      	mov	r1, r9
 80111ce:	f7ef f885 	bl	80002dc <__adddf3>
 80111d2:	4604      	mov	r4, r0
 80111d4:	460d      	mov	r5, r1
 80111d6:	4602      	mov	r2, r0
 80111d8:	460b      	mov	r3, r1
 80111da:	4630      	mov	r0, r6
 80111dc:	4639      	mov	r1, r7
 80111de:	f7ef f87d 	bl	80002dc <__adddf3>
 80111e2:	4632      	mov	r2, r6
 80111e4:	463b      	mov	r3, r7
 80111e6:	4680      	mov	r8, r0
 80111e8:	4689      	mov	r9, r1
 80111ea:	f7ef f875 	bl	80002d8 <__aeabi_dsub>
 80111ee:	4602      	mov	r2, r0
 80111f0:	460b      	mov	r3, r1
 80111f2:	4620      	mov	r0, r4
 80111f4:	4629      	mov	r1, r5
 80111f6:	f7ef f86f 	bl	80002d8 <__aeabi_dsub>
 80111fa:	4642      	mov	r2, r8
 80111fc:	4606      	mov	r6, r0
 80111fe:	460f      	mov	r7, r1
 8011200:	464b      	mov	r3, r9
 8011202:	4640      	mov	r0, r8
 8011204:	4649      	mov	r1, r9
 8011206:	f7ef fa1f 	bl	8000648 <__aeabi_dmul>
 801120a:	a35d      	add	r3, pc, #372	; (adr r3, 8011380 <__ieee754_pow+0xa10>)
 801120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011210:	4604      	mov	r4, r0
 8011212:	460d      	mov	r5, r1
 8011214:	f7ef fa18 	bl	8000648 <__aeabi_dmul>
 8011218:	a35b      	add	r3, pc, #364	; (adr r3, 8011388 <__ieee754_pow+0xa18>)
 801121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121e:	f7ef f85b 	bl	80002d8 <__aeabi_dsub>
 8011222:	4622      	mov	r2, r4
 8011224:	462b      	mov	r3, r5
 8011226:	f7ef fa0f 	bl	8000648 <__aeabi_dmul>
 801122a:	a359      	add	r3, pc, #356	; (adr r3, 8011390 <__ieee754_pow+0xa20>)
 801122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011230:	f7ef f854 	bl	80002dc <__adddf3>
 8011234:	4622      	mov	r2, r4
 8011236:	462b      	mov	r3, r5
 8011238:	f7ef fa06 	bl	8000648 <__aeabi_dmul>
 801123c:	a356      	add	r3, pc, #344	; (adr r3, 8011398 <__ieee754_pow+0xa28>)
 801123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011242:	f7ef f849 	bl	80002d8 <__aeabi_dsub>
 8011246:	4622      	mov	r2, r4
 8011248:	462b      	mov	r3, r5
 801124a:	f7ef f9fd 	bl	8000648 <__aeabi_dmul>
 801124e:	a354      	add	r3, pc, #336	; (adr r3, 80113a0 <__ieee754_pow+0xa30>)
 8011250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011254:	f7ef f842 	bl	80002dc <__adddf3>
 8011258:	4622      	mov	r2, r4
 801125a:	462b      	mov	r3, r5
 801125c:	f7ef f9f4 	bl	8000648 <__aeabi_dmul>
 8011260:	4602      	mov	r2, r0
 8011262:	460b      	mov	r3, r1
 8011264:	4640      	mov	r0, r8
 8011266:	4649      	mov	r1, r9
 8011268:	f7ef f836 	bl	80002d8 <__aeabi_dsub>
 801126c:	4604      	mov	r4, r0
 801126e:	460d      	mov	r5, r1
 8011270:	4602      	mov	r2, r0
 8011272:	460b      	mov	r3, r1
 8011274:	4640      	mov	r0, r8
 8011276:	4649      	mov	r1, r9
 8011278:	f7ef f9e6 	bl	8000648 <__aeabi_dmul>
 801127c:	2200      	movs	r2, #0
 801127e:	ec41 0b19 	vmov	d9, r0, r1
 8011282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011286:	4620      	mov	r0, r4
 8011288:	4629      	mov	r1, r5
 801128a:	f7ef f825 	bl	80002d8 <__aeabi_dsub>
 801128e:	4602      	mov	r2, r0
 8011290:	460b      	mov	r3, r1
 8011292:	ec51 0b19 	vmov	r0, r1, d9
 8011296:	f7ef fb01 	bl	800089c <__aeabi_ddiv>
 801129a:	4632      	mov	r2, r6
 801129c:	4604      	mov	r4, r0
 801129e:	460d      	mov	r5, r1
 80112a0:	463b      	mov	r3, r7
 80112a2:	4640      	mov	r0, r8
 80112a4:	4649      	mov	r1, r9
 80112a6:	f7ef f9cf 	bl	8000648 <__aeabi_dmul>
 80112aa:	4632      	mov	r2, r6
 80112ac:	463b      	mov	r3, r7
 80112ae:	f7ef f815 	bl	80002dc <__adddf3>
 80112b2:	4602      	mov	r2, r0
 80112b4:	460b      	mov	r3, r1
 80112b6:	4620      	mov	r0, r4
 80112b8:	4629      	mov	r1, r5
 80112ba:	f7ef f80d 	bl	80002d8 <__aeabi_dsub>
 80112be:	4642      	mov	r2, r8
 80112c0:	464b      	mov	r3, r9
 80112c2:	f7ef f809 	bl	80002d8 <__aeabi_dsub>
 80112c6:	460b      	mov	r3, r1
 80112c8:	4602      	mov	r2, r0
 80112ca:	4939      	ldr	r1, [pc, #228]	; (80113b0 <__ieee754_pow+0xa40>)
 80112cc:	2000      	movs	r0, #0
 80112ce:	f7ef f803 	bl	80002d8 <__aeabi_dsub>
 80112d2:	ec41 0b10 	vmov	d0, r0, r1
 80112d6:	ee10 3a90 	vmov	r3, s1
 80112da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80112de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112e2:	da2b      	bge.n	801133c <__ieee754_pow+0x9cc>
 80112e4:	4650      	mov	r0, sl
 80112e6:	f000 f877 	bl	80113d8 <scalbn>
 80112ea:	ec51 0b10 	vmov	r0, r1, d0
 80112ee:	ec53 2b18 	vmov	r2, r3, d8
 80112f2:	f7ff bbee 	b.w	8010ad2 <__ieee754_pow+0x162>
 80112f6:	4b2f      	ldr	r3, [pc, #188]	; (80113b4 <__ieee754_pow+0xa44>)
 80112f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80112fc:	429e      	cmp	r6, r3
 80112fe:	f77f af0d 	ble.w	801111c <__ieee754_pow+0x7ac>
 8011302:	4b2d      	ldr	r3, [pc, #180]	; (80113b8 <__ieee754_pow+0xa48>)
 8011304:	440b      	add	r3, r1
 8011306:	4303      	orrs	r3, r0
 8011308:	d009      	beq.n	801131e <__ieee754_pow+0x9ae>
 801130a:	ec51 0b18 	vmov	r0, r1, d8
 801130e:	2200      	movs	r2, #0
 8011310:	2300      	movs	r3, #0
 8011312:	f7ef fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8011316:	3800      	subs	r0, #0
 8011318:	bf18      	it	ne
 801131a:	2001      	movne	r0, #1
 801131c:	e448      	b.n	8010bb0 <__ieee754_pow+0x240>
 801131e:	4622      	mov	r2, r4
 8011320:	462b      	mov	r3, r5
 8011322:	f7ee ffd9 	bl	80002d8 <__aeabi_dsub>
 8011326:	4642      	mov	r2, r8
 8011328:	464b      	mov	r3, r9
 801132a:	f7ef fc13 	bl	8000b54 <__aeabi_dcmpge>
 801132e:	2800      	cmp	r0, #0
 8011330:	f43f aef4 	beq.w	801111c <__ieee754_pow+0x7ac>
 8011334:	e7e9      	b.n	801130a <__ieee754_pow+0x99a>
 8011336:	f04f 0a00 	mov.w	sl, #0
 801133a:	e71a      	b.n	8011172 <__ieee754_pow+0x802>
 801133c:	ec51 0b10 	vmov	r0, r1, d0
 8011340:	4619      	mov	r1, r3
 8011342:	e7d4      	b.n	80112ee <__ieee754_pow+0x97e>
 8011344:	491a      	ldr	r1, [pc, #104]	; (80113b0 <__ieee754_pow+0xa40>)
 8011346:	2000      	movs	r0, #0
 8011348:	f7ff bb31 	b.w	80109ae <__ieee754_pow+0x3e>
 801134c:	2000      	movs	r0, #0
 801134e:	2100      	movs	r1, #0
 8011350:	f7ff bb2d 	b.w	80109ae <__ieee754_pow+0x3e>
 8011354:	4630      	mov	r0, r6
 8011356:	4639      	mov	r1, r7
 8011358:	f7ff bb29 	b.w	80109ae <__ieee754_pow+0x3e>
 801135c:	9204      	str	r2, [sp, #16]
 801135e:	f7ff bb7b 	b.w	8010a58 <__ieee754_pow+0xe8>
 8011362:	2300      	movs	r3, #0
 8011364:	f7ff bb65 	b.w	8010a32 <__ieee754_pow+0xc2>
 8011368:	00000000 	.word	0x00000000
 801136c:	3fe62e43 	.word	0x3fe62e43
 8011370:	fefa39ef 	.word	0xfefa39ef
 8011374:	3fe62e42 	.word	0x3fe62e42
 8011378:	0ca86c39 	.word	0x0ca86c39
 801137c:	be205c61 	.word	0xbe205c61
 8011380:	72bea4d0 	.word	0x72bea4d0
 8011384:	3e663769 	.word	0x3e663769
 8011388:	c5d26bf1 	.word	0xc5d26bf1
 801138c:	3ebbbd41 	.word	0x3ebbbd41
 8011390:	af25de2c 	.word	0xaf25de2c
 8011394:	3f11566a 	.word	0x3f11566a
 8011398:	16bebd93 	.word	0x16bebd93
 801139c:	3f66c16c 	.word	0x3f66c16c
 80113a0:	5555553e 	.word	0x5555553e
 80113a4:	3fc55555 	.word	0x3fc55555
 80113a8:	3fe00000 	.word	0x3fe00000
 80113ac:	fff00000 	.word	0xfff00000
 80113b0:	3ff00000 	.word	0x3ff00000
 80113b4:	4090cbff 	.word	0x4090cbff
 80113b8:	3f6f3400 	.word	0x3f6f3400
 80113bc:	652b82fe 	.word	0x652b82fe
 80113c0:	3c971547 	.word	0x3c971547

080113c4 <fabs>:
 80113c4:	ec51 0b10 	vmov	r0, r1, d0
 80113c8:	ee10 2a10 	vmov	r2, s0
 80113cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113d0:	ec43 2b10 	vmov	d0, r2, r3
 80113d4:	4770      	bx	lr
	...

080113d8 <scalbn>:
 80113d8:	b570      	push	{r4, r5, r6, lr}
 80113da:	ec55 4b10 	vmov	r4, r5, d0
 80113de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80113e2:	4606      	mov	r6, r0
 80113e4:	462b      	mov	r3, r5
 80113e6:	b999      	cbnz	r1, 8011410 <scalbn+0x38>
 80113e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80113ec:	4323      	orrs	r3, r4
 80113ee:	d03f      	beq.n	8011470 <scalbn+0x98>
 80113f0:	4b35      	ldr	r3, [pc, #212]	; (80114c8 <scalbn+0xf0>)
 80113f2:	4629      	mov	r1, r5
 80113f4:	ee10 0a10 	vmov	r0, s0
 80113f8:	2200      	movs	r2, #0
 80113fa:	f7ef f925 	bl	8000648 <__aeabi_dmul>
 80113fe:	4b33      	ldr	r3, [pc, #204]	; (80114cc <scalbn+0xf4>)
 8011400:	429e      	cmp	r6, r3
 8011402:	4604      	mov	r4, r0
 8011404:	460d      	mov	r5, r1
 8011406:	da10      	bge.n	801142a <scalbn+0x52>
 8011408:	a327      	add	r3, pc, #156	; (adr r3, 80114a8 <scalbn+0xd0>)
 801140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140e:	e01f      	b.n	8011450 <scalbn+0x78>
 8011410:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011414:	4291      	cmp	r1, r2
 8011416:	d10c      	bne.n	8011432 <scalbn+0x5a>
 8011418:	ee10 2a10 	vmov	r2, s0
 801141c:	4620      	mov	r0, r4
 801141e:	4629      	mov	r1, r5
 8011420:	f7ee ff5c 	bl	80002dc <__adddf3>
 8011424:	4604      	mov	r4, r0
 8011426:	460d      	mov	r5, r1
 8011428:	e022      	b.n	8011470 <scalbn+0x98>
 801142a:	460b      	mov	r3, r1
 801142c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011430:	3936      	subs	r1, #54	; 0x36
 8011432:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011436:	4296      	cmp	r6, r2
 8011438:	dd0d      	ble.n	8011456 <scalbn+0x7e>
 801143a:	2d00      	cmp	r5, #0
 801143c:	a11c      	add	r1, pc, #112	; (adr r1, 80114b0 <scalbn+0xd8>)
 801143e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011442:	da02      	bge.n	801144a <scalbn+0x72>
 8011444:	a11c      	add	r1, pc, #112	; (adr r1, 80114b8 <scalbn+0xe0>)
 8011446:	e9d1 0100 	ldrd	r0, r1, [r1]
 801144a:	a319      	add	r3, pc, #100	; (adr r3, 80114b0 <scalbn+0xd8>)
 801144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011450:	f7ef f8fa 	bl	8000648 <__aeabi_dmul>
 8011454:	e7e6      	b.n	8011424 <scalbn+0x4c>
 8011456:	1872      	adds	r2, r6, r1
 8011458:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801145c:	428a      	cmp	r2, r1
 801145e:	dcec      	bgt.n	801143a <scalbn+0x62>
 8011460:	2a00      	cmp	r2, #0
 8011462:	dd08      	ble.n	8011476 <scalbn+0x9e>
 8011464:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801146c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011470:	ec45 4b10 	vmov	d0, r4, r5
 8011474:	bd70      	pop	{r4, r5, r6, pc}
 8011476:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801147a:	da08      	bge.n	801148e <scalbn+0xb6>
 801147c:	2d00      	cmp	r5, #0
 801147e:	a10a      	add	r1, pc, #40	; (adr r1, 80114a8 <scalbn+0xd0>)
 8011480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011484:	dac0      	bge.n	8011408 <scalbn+0x30>
 8011486:	a10e      	add	r1, pc, #56	; (adr r1, 80114c0 <scalbn+0xe8>)
 8011488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801148c:	e7bc      	b.n	8011408 <scalbn+0x30>
 801148e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011492:	3236      	adds	r2, #54	; 0x36
 8011494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801149c:	4620      	mov	r0, r4
 801149e:	4b0c      	ldr	r3, [pc, #48]	; (80114d0 <scalbn+0xf8>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	e7d5      	b.n	8011450 <scalbn+0x78>
 80114a4:	f3af 8000 	nop.w
 80114a8:	c2f8f359 	.word	0xc2f8f359
 80114ac:	01a56e1f 	.word	0x01a56e1f
 80114b0:	8800759c 	.word	0x8800759c
 80114b4:	7e37e43c 	.word	0x7e37e43c
 80114b8:	8800759c 	.word	0x8800759c
 80114bc:	fe37e43c 	.word	0xfe37e43c
 80114c0:	c2f8f359 	.word	0xc2f8f359
 80114c4:	81a56e1f 	.word	0x81a56e1f
 80114c8:	43500000 	.word	0x43500000
 80114cc:	ffff3cb0 	.word	0xffff3cb0
 80114d0:	3c900000 	.word	0x3c900000

080114d4 <with_errno>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	460d      	mov	r5, r1
 80114da:	4616      	mov	r6, r2
 80114dc:	f7fc ffda 	bl	800e494 <__errno>
 80114e0:	4629      	mov	r1, r5
 80114e2:	6006      	str	r6, [r0, #0]
 80114e4:	4620      	mov	r0, r4
 80114e6:	bd70      	pop	{r4, r5, r6, pc}

080114e8 <xflow>:
 80114e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114ea:	4614      	mov	r4, r2
 80114ec:	461d      	mov	r5, r3
 80114ee:	b108      	cbz	r0, 80114f4 <xflow+0xc>
 80114f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80114f4:	e9cd 2300 	strd	r2, r3, [sp]
 80114f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114fc:	4620      	mov	r0, r4
 80114fe:	4629      	mov	r1, r5
 8011500:	f7ef f8a2 	bl	8000648 <__aeabi_dmul>
 8011504:	2222      	movs	r2, #34	; 0x22
 8011506:	b003      	add	sp, #12
 8011508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801150c:	f7ff bfe2 	b.w	80114d4 <with_errno>

08011510 <__math_uflow>:
 8011510:	b508      	push	{r3, lr}
 8011512:	2200      	movs	r2, #0
 8011514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011518:	f7ff ffe6 	bl	80114e8 <xflow>
 801151c:	ec41 0b10 	vmov	d0, r0, r1
 8011520:	bd08      	pop	{r3, pc}

08011522 <__math_oflow>:
 8011522:	b508      	push	{r3, lr}
 8011524:	2200      	movs	r2, #0
 8011526:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801152a:	f7ff ffdd 	bl	80114e8 <xflow>
 801152e:	ec41 0b10 	vmov	d0, r0, r1
 8011532:	bd08      	pop	{r3, pc}

08011534 <_init>:
 8011534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011536:	bf00      	nop
 8011538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801153a:	bc08      	pop	{r3}
 801153c:	469e      	mov	lr, r3
 801153e:	4770      	bx	lr

08011540 <_fini>:
 8011540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011542:	bf00      	nop
 8011544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011546:	bc08      	pop	{r3}
 8011548:	469e      	mov	lr, r3
 801154a:	4770      	bx	lr
