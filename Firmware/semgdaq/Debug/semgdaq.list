
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013400  080119a0  080119a0  000219a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024da0  08024da0  00047a50  2**0
                  CONTENTS
  4 .ARM          00000008  08024da0  08024da0  00034da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024da8  08024da8  00047a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024da8  08024da8  00034da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024dac  08024dac  00034dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007a50  20000000  08024db0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013ddc  20007a50  0802c800  00047a50  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b82c  0802c800  0004b82c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00047a50  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00047a80  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031508  00000000  00000000  00047b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062e2  00000000  00000000  00079040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002128  00000000  00000000  0007f328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001858  00000000  00000000  00081450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002641a  00000000  00000000  00082ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e21e  00000000  00000000  000a90c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2ae5  00000000  00000000  000d72e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009e08  00000000  00000000  001c9dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001d3bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004cd8  00000000  00000000  001d3c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000118  00000000  00000000  001d8933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20007a50 	.word	0x20007a50
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011984 	.word	0x08011984

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20007a54 	.word	0x20007a54
 800021c:	08011984 	.word	0x08011984

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <ADC1_IN1_autocorr_calc>:
arm_status StatusCoeffs_5;
arm_status StatusCoeffs_6;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e01e      	b.n	800101e <ADC1_IN1_autocorr_calc+0x4a>
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag  for the data set*/
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000fe6:	239b      	movs	r3, #155	; 0x9b
 8000fe8:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1); // A CMSIS DSP function for computing dot products
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3308      	adds	r3, #8
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <ADC1_IN1_autocorr_calc+0x5c>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	1d18      	adds	r0, r3, #4
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <ADC1_IN1_autocorr_calc+0x60>)
 8000ffc:	f00c fb9a 	bl	800d734 <arm_dot_prod_f32>

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001000:	ed97 7a01 	vldr	s14, [r7, #4]
 8001004:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001038 <ADC1_IN1_autocorr_calc+0x64>
 8001008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <ADC1_IN1_autocorr_calc+0x68>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b0a      	cmp	r3, #10
 8001022:	d9dd      	bls.n	8000fe0 <ADC1_IN1_autocorr_calc+0xc>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20007c64 	.word	0x20007c64
 8001034:	20007c88 	.word	0x20007c88
 8001038:	43250000 	.word	0x43250000
 800103c:	20007a6c 	.word	0x20007a6c

08001040 <ADC1_IN1_autoreg_coeffs>:

float32_t* ADC1_IN1_autoreg_coeffs(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001046:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800104e:	e013      	b.n	8001078 <ADC1_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001050:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001054:	3301      	adds	r3, #1
 8001056:	4a43      	ldr	r2, [pc, #268]	; (8001164 <ADC1_IN1_autoreg_coeffs+0x124>)
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001068:	443b      	add	r3, r7
 800106a:	3b38      	subs	r3, #56	; 0x38
 800106c:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800106e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001072:	3301      	adds	r3, #1
 8001074:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001078:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800107c:	2b09      	cmp	r3, #9
 800107e:	d9e7      	bls.n	8001050 <ADC1_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1); // Initializes the autocorrelations matrix
 8001080:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001084:	2201      	movs	r2, #1
 8001086:	210a      	movs	r1, #10
 8001088:	4837      	ldr	r0, [pc, #220]	; (8001168 <ADC1_IN1_autoreg_coeffs+0x128>)
 800108a:	f00c f987 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001094:	e02f      	b.n	80010f6 <ADC1_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800109c:	e022      	b.n	80010e4 <ADC1_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800109e:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80010a2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80010ac:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80010b0:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	461a      	mov	r2, r3
 80010be:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010c2:	4413      	add	r3, r2
 80010c4:	4827      	ldr	r0, [pc, #156]	; (8001164 <ADC1_IN1_autoreg_coeffs+0x124>)
 80010c6:	008a      	lsls	r2, r1, #2
 80010c8:	4402      	add	r2, r0
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80010d0:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80010da:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010de:	3301      	adds	r3, #1
 80010e0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80010e4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	ddd8      	ble.n	800109e <ADC1_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80010ec:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80010f0:	3301      	adds	r3, #1
 80010f2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80010f6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80010fa:	2b09      	cmp	r3, #9
 80010fc:	ddcb      	ble.n	8001096 <ADC1_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1); // Initializes the Yule-Walker matrix
 80010fe:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001102:	220a      	movs	r2, #10
 8001104:	210a      	movs	r1, #10
 8001106:	4819      	ldr	r0, [pc, #100]	; (800116c <ADC1_IN1_autoreg_coeffs+0x12c>)
 8001108:	f00c f948 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1); // Initializes the inverse Yule-Walker matrix
 800110c:	463b      	mov	r3, r7
 800110e:	220a      	movs	r2, #10
 8001110:	210a      	movs	r1, #10
 8001112:	4817      	ldr	r0, [pc, #92]	; (8001170 <ADC1_IN1_autoreg_coeffs+0x130>)
 8001114:	f00c f942 	bl	800d39c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);
 8001118:	4915      	ldr	r1, [pc, #84]	; (8001170 <ADC1_IN1_autoreg_coeffs+0x130>)
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <ADC1_IN1_autoreg_coeffs+0x12c>)
 800111c:	f00c f838 	bl	800d190 <arm_mat_inverse_f32>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001126:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800112a:	2b00      	cmp	r3, #0
 800112c:	d113      	bne.n	8001156 <ADC1_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4810      	ldr	r0, [pc, #64]	; (8001174 <ADC1_IN1_autoreg_coeffs+0x134>)
 8001134:	f00d fb81 	bl	800e83a <memset>

		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1); //Initializes the coefficients Matrix
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <ADC1_IN1_autoreg_coeffs+0x134>)
 800113a:	2201      	movs	r2, #1
 800113c:	210a      	movs	r1, #10
 800113e:	480e      	ldr	r0, [pc, #56]	; (8001178 <ADC1_IN1_autoreg_coeffs+0x138>)
 8001140:	f00c f92c 	bl	800d39c <arm_mat_init_f32>

        StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <ADC1_IN1_autoreg_coeffs+0x138>)
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <ADC1_IN1_autoreg_coeffs+0x128>)
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <ADC1_IN1_autoreg_coeffs+0x130>)
 800114a:	f00b ff81 	bl	800d050 <arm_mat_mult_f32>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <ADC1_IN1_autoreg_coeffs+0x13c>)
 8001154:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_1;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <ADC1_IN1_autoreg_coeffs+0x134>)
}
 8001158:	4618      	mov	r0, r3
 800115a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20007a6c 	.word	0x20007a6c
 8001168:	20009c8c 	.word	0x20009c8c
 800116c:	20009c2c 	.word	0x20009c2c
 8001170:	20009c5c 	.word	0x20009c5c
 8001174:	20007b74 	.word	0x20007b74
 8001178:	20009cbc 	.word	0x20009cbc
 800117c:	20009cec 	.word	0x20009cec

08001180 <ADC1_IN2_autocorr_calc>:



void ADC1_IN2_autocorr_calc(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e01e      	b.n	80011ca <ADC1_IN2_autocorr_calc+0x4a>
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001192:	239b      	movs	r3, #155	; 0x9b
 8001194:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3308      	adds	r3, #8
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <ADC1_IN2_autocorr_calc+0x5c>)
 800119e:	4413      	add	r3, r2
 80011a0:	1d18      	adds	r0, r3, #4
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	490e      	ldr	r1, [pc, #56]	; (80011e0 <ADC1_IN2_autocorr_calc+0x60>)
 80011a8:	f00c fac4 	bl	800d734 <arm_dot_prod_f32>

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80011ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80011e4 <ADC1_IN2_autocorr_calc+0x64>
 80011b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <ADC1_IN2_autocorr_calc+0x68>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d9dd      	bls.n	800118c <ADC1_IN2_autocorr_calc+0xc>
	}
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200081b0 	.word	0x200081b0
 80011e0:	200081d4 	.word	0x200081d4
 80011e4:	43250000 	.word	0x43250000
 80011e8:	20007a98 	.word	0x20007a98

080011ec <ADC1_IN2_autoreg_coeffs>:

float32_t* ADC1_IN2_autoreg_coeffs(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80011f2:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_2 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80011fa:	e013      	b.n	8001224 <ADC1_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_2[n] = AutoCorr_2[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80011fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001200:	3301      	adds	r3, #1
 8001202:	4a43      	ldr	r2, [pc, #268]	; (8001310 <ADC1_IN2_autoreg_coeffs+0x124>)
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001214:	443b      	add	r3, r7
 8001216:	3b38      	subs	r3, #56	; 0x38
 8001218:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800121a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001224:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001228:	2b09      	cmp	r3, #9
 800122a:	d9e7      	bls.n	80011fc <ADC1_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_2); //Initializes the autocorrelations matrix
 800122c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001230:	2201      	movs	r2, #1
 8001232:	210a      	movs	r1, #10
 8001234:	4837      	ldr	r0, [pc, #220]	; (8001314 <ADC1_IN2_autoreg_coeffs+0x128>)
 8001236:	f00c f8b1 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_2[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001240:	e02f      	b.n	80012a2 <ADC1_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001248:	e022      	b.n	8001290 <ADC1_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_2[r * 10 + c] = AutoCorr_2[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800124a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800124e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001258:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800125c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	461a      	mov	r2, r3
 800126a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800126e:	4413      	add	r3, r2
 8001270:	4827      	ldr	r0, [pc, #156]	; (8001310 <ADC1_IN2_autoreg_coeffs+0x124>)
 8001272:	008a      	lsls	r2, r1, #2
 8001274:	4402      	add	r2, r0
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800127c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001286:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800128a:	3301      	adds	r3, #1
 800128c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001290:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001294:	2b09      	cmp	r3, #9
 8001296:	ddd8      	ble.n	800124a <ADC1_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001298:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800129c:	3301      	adds	r3, #1
 800129e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80012a2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80012a6:	2b09      	cmp	r3, #9
 80012a8:	ddcb      	ble.n	8001242 <ADC1_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_2); // Initializes the Yule-Walker matrix
 80012aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80012ae:	220a      	movs	r2, #10
 80012b0:	210a      	movs	r1, #10
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <ADC1_IN2_autoreg_coeffs+0x12c>)
 80012b4:	f00c f872 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_2[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_2); // Initializes the inverse Yule-Walker matrix
 80012b8:	463b      	mov	r3, r7
 80012ba:	220a      	movs	r2, #10
 80012bc:	210a      	movs	r1, #10
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <ADC1_IN2_autoreg_coeffs+0x130>)
 80012c0:	f00c f86c 	bl	800d39c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_2 = arm_mat_inverse_f32(&ADC1_IN2_YW_mtx, &ADC1_IN2_Inv_YW_mtx);
 80012c4:	4915      	ldr	r1, [pc, #84]	; (800131c <ADC1_IN2_autoreg_coeffs+0x130>)
 80012c6:	4814      	ldr	r0, [pc, #80]	; (8001318 <ADC1_IN2_autoreg_coeffs+0x12c>)
 80012c8:	f00b ff62 	bl	800d190 <arm_mat_inverse_f32>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_2 == ARM_MATH_SUCCESS) // Check if operation was successful
 80012d2:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <ADC1_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_2, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <ADC1_IN2_autoreg_coeffs+0x134>)
 80012e0:	f00d faab 	bl	800e83a <memset>

		arm_mat_init_f32(&ADC1_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_2); //Initializes the coefficients Matrix
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <ADC1_IN2_autoreg_coeffs+0x134>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	210a      	movs	r1, #10
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <ADC1_IN2_autoreg_coeffs+0x138>)
 80012ec:	f00c f856 	bl	800d39c <arm_mat_init_f32>

        StatusCoeffs_2 = arm_mat_mult_f32( &ADC1_IN2_Inv_YW_mtx, &ADC1_IN2_AC_mtx, &ADC1_IN2_coeffs_mtx );
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <ADC1_IN2_autoreg_coeffs+0x138>)
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <ADC1_IN2_autoreg_coeffs+0x128>)
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <ADC1_IN2_autoreg_coeffs+0x130>)
 80012f6:	f00b feab 	bl	800d050 <arm_mat_mult_f32>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <ADC1_IN2_autoreg_coeffs+0x13c>)
 8001300:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_2;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <ADC1_IN2_autoreg_coeffs+0x134>)
}
 8001304:	4618      	mov	r0, r3
 8001306:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20007a98 	.word	0x20007a98
 8001314:	20009c94 	.word	0x20009c94
 8001318:	20009c34 	.word	0x20009c34
 800131c:	20009c64 	.word	0x20009c64
 8001320:	20007b9c 	.word	0x20007b9c
 8001324:	20009cc4 	.word	0x20009cc4
 8001328:	20009ced 	.word	0x20009ced

0800132c <ADC2_IN3_autocorr_calc>:



void ADC2_IN3_autocorr_calc(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e01e      	b.n	8001376 <ADC2_IN3_autocorr_calc+0x4a>
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 800133e:	239b      	movs	r3, #155	; 0x9b
 8001340:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3308      	adds	r3, #8
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <ADC2_IN3_autocorr_calc+0x5c>)
 800134a:	4413      	add	r3, r2
 800134c:	1d18      	adds	r0, r3, #4
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <ADC2_IN3_autocorr_calc+0x60>)
 8001354:	f00c f9ee 	bl	800d734 <arm_dot_prod_f32>

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001358:	ed97 7a01 	vldr	s14, [r7, #4]
 800135c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001390 <ADC2_IN3_autocorr_calc+0x64>
 8001360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <ADC2_IN3_autocorr_calc+0x68>)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b09      	cmp	r3, #9
 800137a:	d9dd      	bls.n	8001338 <ADC2_IN3_autocorr_calc+0xc>
	}
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200086fc 	.word	0x200086fc
 800138c:	20008720 	.word	0x20008720
 8001390:	43250000 	.word	0x43250000
 8001394:	20007ac4 	.word	0x20007ac4

08001398 <ADC2_IN3_autoreg_coeffs>:

float32_t* ADC2_IN3_autoreg_coeffs(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800139e:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_3 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80013a6:	e013      	b.n	80013d0 <ADC2_IN3_autoreg_coeffs+0x38>
	{
		AC_Matrix_3[n] = AutoCorr_3[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80013a8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a43      	ldr	r2, [pc, #268]	; (80014bc <ADC2_IN3_autoreg_coeffs+0x124>)
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80013c0:	443b      	add	r3, r7
 80013c2:	3b38      	subs	r3, #56	; 0x38
 80013c4:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80013c6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013ca:	3301      	adds	r3, #1
 80013cc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80013d0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d9e7      	bls.n	80013a8 <ADC2_IN3_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN3_AC_mtx, AR_ORDER, 1, AC_Matrix_3); //Initializes the autocorrelations matrix
 80013d8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80013dc:	2201      	movs	r2, #1
 80013de:	210a      	movs	r1, #10
 80013e0:	4837      	ldr	r0, [pc, #220]	; (80014c0 <ADC2_IN3_autoreg_coeffs+0x128>)
 80013e2:	f00b ffdb 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_3[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80013ec:	e02f      	b.n	800144e <ADC2_IN3_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80013f4:	e022      	b.n	800143c <ADC2_IN3_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_3[r * 10 + c] = AutoCorr_3[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80013f6:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80013fa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001404:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001408:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	461a      	mov	r2, r3
 8001416:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800141a:	4413      	add	r3, r2
 800141c:	4827      	ldr	r0, [pc, #156]	; (80014bc <ADC2_IN3_autoreg_coeffs+0x124>)
 800141e:	008a      	lsls	r2, r1, #2
 8001420:	4402      	add	r2, r0
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001428:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001432:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001436:	3301      	adds	r3, #1
 8001438:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800143c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001440:	2b09      	cmp	r3, #9
 8001442:	ddd8      	ble.n	80013f6 <ADC2_IN3_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001444:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001448:	3301      	adds	r3, #1
 800144a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800144e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001452:	2b09      	cmp	r3, #9
 8001454:	ddcb      	ble.n	80013ee <ADC2_IN3_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN3_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_3); // Initializes the Yule-Walker matrix
 8001456:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800145a:	220a      	movs	r2, #10
 800145c:	210a      	movs	r1, #10
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <ADC2_IN3_autoreg_coeffs+0x12c>)
 8001460:	f00b ff9c 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_3[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN3_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_3); // Initializes the inverse Yule-Walker matrix
 8001464:	463b      	mov	r3, r7
 8001466:	220a      	movs	r2, #10
 8001468:	210a      	movs	r1, #10
 800146a:	4817      	ldr	r0, [pc, #92]	; (80014c8 <ADC2_IN3_autoreg_coeffs+0x130>)
 800146c:	f00b ff96 	bl	800d39c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_3 = arm_mat_inverse_f32(&ADC2_IN3_YW_mtx, &ADC2_IN3_Inv_YW_mtx);
 8001470:	4915      	ldr	r1, [pc, #84]	; (80014c8 <ADC2_IN3_autoreg_coeffs+0x130>)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <ADC2_IN3_autoreg_coeffs+0x12c>)
 8001474:	f00b fe8c 	bl	800d190 <arm_mat_inverse_f32>
 8001478:	4603      	mov	r3, r0
 800147a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_3 == ARM_MATH_SUCCESS) // Check if operation was successful
 800147e:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001482:	2b00      	cmp	r3, #0
 8001484:	d113      	bne.n	80014ae <ADC2_IN3_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_3, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8001486:	2228      	movs	r2, #40	; 0x28
 8001488:	2100      	movs	r1, #0
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <ADC2_IN3_autoreg_coeffs+0x134>)
 800148c:	f00d f9d5 	bl	800e83a <memset>

		arm_mat_init_f32(&ADC2_IN3_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_3); //Initializes the coefficients Matrix
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <ADC2_IN3_autoreg_coeffs+0x134>)
 8001492:	2201      	movs	r2, #1
 8001494:	210a      	movs	r1, #10
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <ADC2_IN3_autoreg_coeffs+0x138>)
 8001498:	f00b ff80 	bl	800d39c <arm_mat_init_f32>

        StatusCoeffs_3 = arm_mat_mult_f32( &ADC2_IN3_Inv_YW_mtx, &ADC2_IN3_AC_mtx, &ADC2_IN3_coeffs_mtx );
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <ADC2_IN3_autoreg_coeffs+0x138>)
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <ADC2_IN3_autoreg_coeffs+0x128>)
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <ADC2_IN3_autoreg_coeffs+0x130>)
 80014a2:	f00b fdd5 	bl	800d050 <arm_mat_mult_f32>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <ADC2_IN3_autoreg_coeffs+0x13c>)
 80014ac:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_3;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <ADC2_IN3_autoreg_coeffs+0x134>)
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20007ac4 	.word	0x20007ac4
 80014c0:	20009c9c 	.word	0x20009c9c
 80014c4:	20009c3c 	.word	0x20009c3c
 80014c8:	20009c6c 	.word	0x20009c6c
 80014cc:	20007bc4 	.word	0x20007bc4
 80014d0:	20009ccc 	.word	0x20009ccc
 80014d4:	20009cee 	.word	0x20009cee

080014d8 <ADC2_IN4_autocorr_calc>:



void ADC2_IN4_autocorr_calc(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e01e      	b.n	8001522 <ADC2_IN4_autocorr_calc+0x4a>
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80014ea:	239b      	movs	r3, #155	; 0x9b
 80014ec:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3308      	adds	r3, #8
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <ADC2_IN4_autocorr_calc+0x5c>)
 80014f6:	4413      	add	r3, r2
 80014f8:	1d18      	adds	r0, r3, #4
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	490e      	ldr	r1, [pc, #56]	; (8001538 <ADC2_IN4_autocorr_calc+0x60>)
 8001500:	f00c f918 	bl	800d734 <arm_dot_prod_f32>

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001504:	ed97 7a01 	vldr	s14, [r7, #4]
 8001508:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800153c <ADC2_IN4_autocorr_calc+0x64>
 800150c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <ADC2_IN4_autocorr_calc+0x68>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b09      	cmp	r3, #9
 8001526:	d9dd      	bls.n	80014e4 <ADC2_IN4_autocorr_calc+0xc>
	}
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20008c48 	.word	0x20008c48
 8001538:	20008c6c 	.word	0x20008c6c
 800153c:	43250000 	.word	0x43250000
 8001540:	20007af0 	.word	0x20007af0

08001544 <ADC2_IN4_autoreg_coeffs>:

float32_t* ADC2_IN4_autoreg_coeffs(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800154a:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_4 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001552:	e013      	b.n	800157c <ADC2_IN4_autoreg_coeffs+0x38>
	{
		AC_Matrix_4[n] = AutoCorr_4[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001554:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001558:	3301      	adds	r3, #1
 800155a:	4a43      	ldr	r2, [pc, #268]	; (8001668 <ADC2_IN4_autoreg_coeffs+0x124>)
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800156c:	443b      	add	r3, r7
 800156e:	3b38      	subs	r3, #56	; 0x38
 8001570:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8001572:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800157c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001580:	2b09      	cmp	r3, #9
 8001582:	d9e7      	bls.n	8001554 <ADC2_IN4_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN4_AC_mtx, AR_ORDER, 1, AC_Matrix_4); //Initializes the autocorrelations matrix
 8001584:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001588:	2201      	movs	r2, #1
 800158a:	210a      	movs	r1, #10
 800158c:	4837      	ldr	r0, [pc, #220]	; (800166c <ADC2_IN4_autoreg_coeffs+0x128>)
 800158e:	f00b ff05 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_4[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001598:	e02f      	b.n	80015fa <ADC2_IN4_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80015a0:	e022      	b.n	80015e8 <ADC2_IN4_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_4[r * 10 + c] = AutoCorr_4[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80015a2:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80015a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80015b0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80015b4:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	461a      	mov	r2, r3
 80015c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015c6:	4413      	add	r3, r2
 80015c8:	4827      	ldr	r0, [pc, #156]	; (8001668 <ADC2_IN4_autoreg_coeffs+0x124>)
 80015ca:	008a      	lsls	r2, r1, #2
 80015cc:	4402      	add	r2, r0
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80015d4:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80015de:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015e2:	3301      	adds	r3, #1
 80015e4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80015e8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	ddd8      	ble.n	80015a2 <ADC2_IN4_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80015f0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80015f4:	3301      	adds	r3, #1
 80015f6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80015fa:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80015fe:	2b09      	cmp	r3, #9
 8001600:	ddcb      	ble.n	800159a <ADC2_IN4_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN4_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_4); // Initializes the Yule-Walker matrix
 8001602:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001606:	220a      	movs	r2, #10
 8001608:	210a      	movs	r1, #10
 800160a:	4819      	ldr	r0, [pc, #100]	; (8001670 <ADC2_IN4_autoreg_coeffs+0x12c>)
 800160c:	f00b fec6 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_4[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN4_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_4); // Initializes the inverse Yule-Walker matrix
 8001610:	463b      	mov	r3, r7
 8001612:	220a      	movs	r2, #10
 8001614:	210a      	movs	r1, #10
 8001616:	4817      	ldr	r0, [pc, #92]	; (8001674 <ADC2_IN4_autoreg_coeffs+0x130>)
 8001618:	f00b fec0 	bl	800d39c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_4 = arm_mat_inverse_f32(&ADC2_IN4_YW_mtx, &ADC2_IN4_Inv_YW_mtx);
 800161c:	4915      	ldr	r1, [pc, #84]	; (8001674 <ADC2_IN4_autoreg_coeffs+0x130>)
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <ADC2_IN4_autoreg_coeffs+0x12c>)
 8001620:	f00b fdb6 	bl	800d190 <arm_mat_inverse_f32>
 8001624:	4603      	mov	r3, r0
 8001626:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_4 == ARM_MATH_SUCCESS) // Check if operation was successful
 800162a:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800162e:	2b00      	cmp	r3, #0
 8001630:	d113      	bne.n	800165a <ADC2_IN4_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_4, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8001632:	2228      	movs	r2, #40	; 0x28
 8001634:	2100      	movs	r1, #0
 8001636:	4810      	ldr	r0, [pc, #64]	; (8001678 <ADC2_IN4_autoreg_coeffs+0x134>)
 8001638:	f00d f8ff 	bl	800e83a <memset>

		arm_mat_init_f32(&ADC2_IN4_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_4); //Initializes the coefficients Matrix
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <ADC2_IN4_autoreg_coeffs+0x134>)
 800163e:	2201      	movs	r2, #1
 8001640:	210a      	movs	r1, #10
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <ADC2_IN4_autoreg_coeffs+0x138>)
 8001644:	f00b feaa 	bl	800d39c <arm_mat_init_f32>

        StatusCoeffs_4 = arm_mat_mult_f32( &ADC2_IN4_Inv_YW_mtx, &ADC2_IN4_AC_mtx, &ADC2_IN4_coeffs_mtx );
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <ADC2_IN4_autoreg_coeffs+0x138>)
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <ADC2_IN4_autoreg_coeffs+0x128>)
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <ADC2_IN4_autoreg_coeffs+0x130>)
 800164e:	f00b fcff 	bl	800d050 <arm_mat_mult_f32>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <ADC2_IN4_autoreg_coeffs+0x13c>)
 8001658:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_4;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <ADC2_IN4_autoreg_coeffs+0x134>)
}
 800165c:	4618      	mov	r0, r3
 800165e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20007af0 	.word	0x20007af0
 800166c:	20009ca4 	.word	0x20009ca4
 8001670:	20009c44 	.word	0x20009c44
 8001674:	20009c74 	.word	0x20009c74
 8001678:	20007bec 	.word	0x20007bec
 800167c:	20009cd4 	.word	0x20009cd4
 8001680:	20009cef 	.word	0x20009cef

08001684 <ADC3_IN1_autocorr_calc>:



void ADC3_IN1_autocorr_calc(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e01e      	b.n	80016ce <ADC3_IN1_autocorr_calc+0x4a>
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001696:	239b      	movs	r3, #155	; 0x9b
 8001698:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3308      	adds	r3, #8
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <ADC3_IN1_autocorr_calc+0x5c>)
 80016a2:	4413      	add	r3, r2
 80016a4:	1d18      	adds	r0, r3, #4
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	490e      	ldr	r1, [pc, #56]	; (80016e4 <ADC3_IN1_autocorr_calc+0x60>)
 80016ac:	f00c f842 	bl	800d734 <arm_dot_prod_f32>

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80016b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80016e8 <ADC3_IN1_autocorr_calc+0x64>
 80016b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <ADC3_IN1_autocorr_calc+0x68>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	d9dd      	bls.n	8001690 <ADC3_IN1_autocorr_calc+0xc>
	}
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20009194 	.word	0x20009194
 80016e4:	200091b8 	.word	0x200091b8
 80016e8:	43250000 	.word	0x43250000
 80016ec:	20007b1c 	.word	0x20007b1c

080016f0 <ADC3_IN1_autoreg_coeffs>:

float32_t* ADC3_IN1_autoreg_coeffs(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80016f6:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_5 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80016fe:	e013      	b.n	8001728 <ADC3_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_5[n] = AutoCorr_5[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001700:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001704:	3301      	adds	r3, #1
 8001706:	4a43      	ldr	r2, [pc, #268]	; (8001814 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001718:	443b      	add	r3, r7
 800171a:	3b38      	subs	r3, #56	; 0x38
 800171c:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800171e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001722:	3301      	adds	r3, #1
 8001724:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001728:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800172c:	2b09      	cmp	r3, #9
 800172e:	d9e7      	bls.n	8001700 <ADC3_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_5); //Initializes the autocorrelations matrix
 8001730:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001734:	2201      	movs	r2, #1
 8001736:	210a      	movs	r1, #10
 8001738:	4837      	ldr	r0, [pc, #220]	; (8001818 <ADC3_IN1_autoreg_coeffs+0x128>)
 800173a:	f00b fe2f 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_5[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001744:	e02f      	b.n	80017a6 <ADC3_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800174c:	e022      	b.n	8001794 <ADC3_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_5[r * 10 + c] = AutoCorr_5[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800174e:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001752:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800175c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001760:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	461a      	mov	r2, r3
 800176e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001772:	4413      	add	r3, r2
 8001774:	4827      	ldr	r0, [pc, #156]	; (8001814 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001776:	008a      	lsls	r2, r1, #2
 8001778:	4402      	add	r2, r0
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001780:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800178a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800178e:	3301      	adds	r3, #1
 8001790:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001794:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001798:	2b09      	cmp	r3, #9
 800179a:	ddd8      	ble.n	800174e <ADC3_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 800179c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80017a6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	ddcb      	ble.n	8001746 <ADC3_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_5); // Initializes the Yule-Walker matrix
 80017ae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80017b2:	220a      	movs	r2, #10
 80017b4:	210a      	movs	r1, #10
 80017b6:	4819      	ldr	r0, [pc, #100]	; (800181c <ADC3_IN1_autoreg_coeffs+0x12c>)
 80017b8:	f00b fdf0 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_5[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_5); // Initializes the inverse Yule-Walker matrix
 80017bc:	463b      	mov	r3, r7
 80017be:	220a      	movs	r2, #10
 80017c0:	210a      	movs	r1, #10
 80017c2:	4817      	ldr	r0, [pc, #92]	; (8001820 <ADC3_IN1_autoreg_coeffs+0x130>)
 80017c4:	f00b fdea 	bl	800d39c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_5 = arm_mat_inverse_f32(&ADC3_IN1_YW_mtx, &ADC3_IN1_Inv_YW_mtx);
 80017c8:	4915      	ldr	r1, [pc, #84]	; (8001820 <ADC3_IN1_autoreg_coeffs+0x130>)
 80017ca:	4814      	ldr	r0, [pc, #80]	; (800181c <ADC3_IN1_autoreg_coeffs+0x12c>)
 80017cc:	f00b fce0 	bl	800d190 <arm_mat_inverse_f32>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_5 == ARM_MATH_SUCCESS) // Check if operation was successful
 80017d6:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d113      	bne.n	8001806 <ADC3_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	4810      	ldr	r0, [pc, #64]	; (8001824 <ADC3_IN1_autoreg_coeffs+0x134>)
 80017e4:	f00d f829 	bl	800e83a <memset>

		arm_mat_init_f32(&ADC3_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_5); //Initializes the coefficients Matrix
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <ADC3_IN1_autoreg_coeffs+0x138>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	210a      	movs	r1, #10
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <ADC3_IN1_autoreg_coeffs+0x13c>)
 80017f0:	f00b fdd4 	bl	800d39c <arm_mat_init_f32>

        StatusCoeffs_5 = arm_mat_mult_f32( &ADC3_IN1_Inv_YW_mtx, &ADC3_IN1_AC_mtx, &ADC3_IN1_coeffs_mtx );
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <ADC3_IN1_autoreg_coeffs+0x13c>)
 80017f6:	4908      	ldr	r1, [pc, #32]	; (8001818 <ADC3_IN1_autoreg_coeffs+0x128>)
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <ADC3_IN1_autoreg_coeffs+0x130>)
 80017fa:	f00b fc29 	bl	800d050 <arm_mat_mult_f32>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <ADC3_IN1_autoreg_coeffs+0x140>)
 8001804:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_5;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <ADC3_IN1_autoreg_coeffs+0x138>)
}
 8001808:	4618      	mov	r0, r3
 800180a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20007b1c 	.word	0x20007b1c
 8001818:	20009cac 	.word	0x20009cac
 800181c:	20009c4c 	.word	0x20009c4c
 8001820:	20009c7c 	.word	0x20009c7c
 8001824:	20007b74 	.word	0x20007b74
 8001828:	20007c14 	.word	0x20007c14
 800182c:	20009cdc 	.word	0x20009cdc
 8001830:	20009cf0 	.word	0x20009cf0

08001834 <ADC3_IN2_autocorr_calc>:



void ADC3_IN2_autocorr_calc(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e01e      	b.n	800187e <ADC3_IN2_autocorr_calc+0x4a>
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001846:	239b      	movs	r3, #155	; 0x9b
 8001848:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3308      	adds	r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <ADC3_IN2_autocorr_calc+0x5c>)
 8001852:	4413      	add	r3, r2
 8001854:	1d18      	adds	r0, r3, #4
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	490e      	ldr	r1, [pc, #56]	; (8001894 <ADC3_IN2_autocorr_calc+0x60>)
 800185c:	f00b ff6a 	bl	800d734 <arm_dot_prod_f32>

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001860:	ed97 7a01 	vldr	s14, [r7, #4]
 8001864:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001898 <ADC3_IN2_autocorr_calc+0x64>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <ADC3_IN2_autocorr_calc+0x68>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d9dd      	bls.n	8001840 <ADC3_IN2_autocorr_calc+0xc>
	}
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200096e0 	.word	0x200096e0
 8001894:	20009704 	.word	0x20009704
 8001898:	43250000 	.word	0x43250000
 800189c:	20007b48 	.word	0x20007b48

080018a0 <ADC3_IN2_autoreg_coeffs>:

float32_t* ADC3_IN2_autoreg_coeffs(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80018a6:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_6 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80018ae:	e013      	b.n	80018d8 <ADC3_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_6[n] = AutoCorr_6[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80018b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <ADC3_IN2_autoreg_coeffs+0x124>)
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80018c8:	443b      	add	r3, r7
 80018ca:	3b38      	subs	r3, #56	; 0x38
 80018cc:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80018ce:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018d2:	3301      	adds	r3, #1
 80018d4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80018d8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d9e7      	bls.n	80018b0 <ADC3_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_6); //Initializes the autocorrelations matrix
 80018e0:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80018e4:	2201      	movs	r2, #1
 80018e6:	210a      	movs	r1, #10
 80018e8:	4837      	ldr	r0, [pc, #220]	; (80019c8 <ADC3_IN2_autoreg_coeffs+0x128>)
 80018ea:	f00b fd57 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_6[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80018f4:	e02f      	b.n	8001956 <ADC3_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80018fc:	e022      	b.n	8001944 <ADC3_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_6[r * 10 + c] = AutoCorr_6[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80018fe:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001902:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800190c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001910:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	461a      	mov	r2, r3
 800191e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001922:	4413      	add	r3, r2
 8001924:	4827      	ldr	r0, [pc, #156]	; (80019c4 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001926:	008a      	lsls	r2, r1, #2
 8001928:	4402      	add	r2, r0
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001930:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800193a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800193e:	3301      	adds	r3, #1
 8001940:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001944:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001948:	2b09      	cmp	r3, #9
 800194a:	ddd8      	ble.n	80018fe <ADC3_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 800194c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001950:	3301      	adds	r3, #1
 8001952:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001956:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800195a:	2b09      	cmp	r3, #9
 800195c:	ddcb      	ble.n	80018f6 <ADC3_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_6); // Initializes the Yule-Walker matrix
 800195e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001962:	220a      	movs	r2, #10
 8001964:	210a      	movs	r1, #10
 8001966:	4819      	ldr	r0, [pc, #100]	; (80019cc <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001968:	f00b fd18 	bl	800d39c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_6[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_6); // Initializes the inverse Yule-Walker matrix
 800196c:	463b      	mov	r3, r7
 800196e:	220a      	movs	r2, #10
 8001970:	210a      	movs	r1, #10
 8001972:	4817      	ldr	r0, [pc, #92]	; (80019d0 <ADC3_IN2_autoreg_coeffs+0x130>)
 8001974:	f00b fd12 	bl	800d39c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_6 = arm_mat_inverse_f32(&ADC3_IN2_YW_mtx, &ADC3_IN2_Inv_YW_mtx);
 8001978:	4915      	ldr	r1, [pc, #84]	; (80019d0 <ADC3_IN2_autoreg_coeffs+0x130>)
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <ADC3_IN2_autoreg_coeffs+0x12c>)
 800197c:	f00b fc08 	bl	800d190 <arm_mat_inverse_f32>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_6 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001986:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <ADC3_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_6, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800198e:	2228      	movs	r2, #40	; 0x28
 8001990:	2100      	movs	r1, #0
 8001992:	4810      	ldr	r0, [pc, #64]	; (80019d4 <ADC3_IN2_autoreg_coeffs+0x134>)
 8001994:	f00c ff51 	bl	800e83a <memset>

		arm_mat_init_f32(&ADC3_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_6); //Initializes the coefficients Matrix
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <ADC3_IN2_autoreg_coeffs+0x134>)
 800199a:	2201      	movs	r2, #1
 800199c:	210a      	movs	r1, #10
 800199e:	480e      	ldr	r0, [pc, #56]	; (80019d8 <ADC3_IN2_autoreg_coeffs+0x138>)
 80019a0:	f00b fcfc 	bl	800d39c <arm_mat_init_f32>

        StatusCoeffs_6 = arm_mat_mult_f32( &ADC3_IN2_Inv_YW_mtx, &ADC3_IN2_AC_mtx, &ADC3_IN2_coeffs_mtx );
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <ADC3_IN2_autoreg_coeffs+0x138>)
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <ADC3_IN2_autoreg_coeffs+0x128>)
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <ADC3_IN2_autoreg_coeffs+0x130>)
 80019aa:	f00b fb51 	bl	800d050 <arm_mat_mult_f32>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <ADC3_IN2_autoreg_coeffs+0x13c>)
 80019b4:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_6;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <ADC3_IN2_autoreg_coeffs+0x134>)
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20007b48 	.word	0x20007b48
 80019c8:	20009cb4 	.word	0x20009cb4
 80019cc:	20009c54 	.word	0x20009c54
 80019d0:	20009c84 	.word	0x20009c84
 80019d4:	20007c3c 	.word	0x20007c3c
 80019d8:	20009ce4 	.word	0x20009ce4
 80019dc:	20009cf1 	.word	0x20009cf1

080019e0 <ADC2_IN3_DAC_Update>:
}
#endif

#ifdef MONITOR_CHANNEL_2_LEFT
void ADC2_IN3_DAC_Update(ADC2_IN3_MA *ADC2_IN3_DAC_ptr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	6078      	str	r0, [r7, #4]
	for (uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e02d      	b.n	8001a4a <ADC2_IN3_DAC_Update+0x6a>
	{
		float Filt_Volt_2 = ADC2_IN3_DAC_ptr->MA_ADC2_IN3_OutBfr[n];
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3308      	adds	r3, #8
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	3304      	adds	r3, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
		uint32_t DAC_Level_2 = (Filt_Volt_2 / LEVEL_VALUE_SCALAR);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7fe fdca 	bl	8000598 <__aeabi_f2d>
 8001a04:	a31b      	add	r3, pc, #108	; (adr r3, 8001a74 <ADC2_IN3_DAC_Update+0x94>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe ff47 	bl	800089c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8ef 	bl	8000bf8 <__aeabi_d2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	613b      	str	r3, [r7, #16]

		if (DAC_Level_2 > 4095)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a24:	d302      	bcc.n	8001a2c <ADC2_IN3_DAC_Update+0x4c>
		{
			DAC_Level_2 = 4095;
 8001a26:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001a2a:	613b      	str	r3, [r7, #16]
		else if (DAC_Level_2 < 0)
		{
			DAC_Level_2 = 0;
		}

		ADC2_IN3_DAC_ptr->MA_ADC2_IN3_Level_OutBfr[n] = DAC_Level_2;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	33ae      	adds	r3, #174	; 0xae
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2ba4      	cmp	r3, #164	; 0xa4
 8001a4e:	d9ce      	bls.n	80019ee <ADC2_IN3_DAC_Update+0xe>
	}

   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t* )ADC2_IN3_DAC_ptr->MA_ADC2_IN3_Level_OutBfr, ADC_DMA_SIXTEENTHBUFFERSIZE, DAC_ALIGN_12B_R);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f503 722e 	add.w	r2, r3, #696	; 0x2b8
 8001a56:	2300      	movs	r3, #0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	23a5      	movs	r3, #165	; 0xa5
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <ADC2_IN3_DAC_Update+0x90>)
 8001a60:	f007 fa8e 	bl	8008f80 <HAL_DAC_Start_DMA>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	f3af 8000 	nop.w
 8001a70:	2000b770 	.word	0x2000b770
 8001a74:	66666666 	.word	0x66666666
 8001a78:	3f4a6666 	.word	0x3f4a6666
 8001a7c:	00000000 	.word	0x00000000

08001a80 <ADC1_IN2_DAC_Update>:
#endif


#ifdef MONITOR_CHANNEL_4_RIGHT
void ADC1_IN2_DAC_Update(ADC1_IN2_MA *ADC1_IN2_DAC_ptr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	6078      	str	r0, [r7, #4]
	for (uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e02d      	b.n	8001aea <ADC1_IN2_DAC_Update+0x6a>
	{
		float Filt_Volt_4 = ADC1_IN2_DAC_ptr->MA_ADC1_IN2_OutBfr[n];
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3308      	adds	r3, #8
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3304      	adds	r3, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
		uint32_t DAC_Level_4 = (Filt_Volt_4 / LEVEL_VALUE_SCALAR);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7fe fd7a 	bl	8000598 <__aeabi_f2d>
 8001aa4:	a31b      	add	r3, pc, #108	; (adr r3, 8001b14 <ADC1_IN2_DAC_Update+0x94>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fef7 	bl	800089c <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff f89f 	bl	8000bf8 <__aeabi_d2uiz>
 8001aba:	4603      	mov	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]

		if (DAC_Level_4 > 4095)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac4:	d302      	bcc.n	8001acc <ADC1_IN2_DAC_Update+0x4c>
		{
			DAC_Level_4 = 4095;
 8001ac6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001aca:	613b      	str	r3, [r7, #16]
		else if (DAC_Level_4 < 0)
		{
			DAC_Level_4 = 0;
		}

		ADC1_IN2_DAC_ptr->MA_ADC1_IN2_Level_OutBfr[n] = DAC_Level_4;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	33ae      	adds	r3, #174	; 0xae
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2ba4      	cmp	r3, #164	; 0xa4
 8001aee:	d9ce      	bls.n	8001a8e <ADC1_IN2_DAC_Update+0xe>
	}

   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t* )ADC1_IN2_DAC_ptr->MA_ADC1_IN2_Level_OutBfr, ADC_DMA_SIXTEENTHBUFFERSIZE, DAC_ALIGN_12B_R);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f503 722e 	add.w	r2, r3, #696	; 0x2b8
 8001af6:	2300      	movs	r3, #0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	23a5      	movs	r3, #165	; 0xa5
 8001afc:	2110      	movs	r1, #16
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <ADC1_IN2_DAC_Update+0x90>)
 8001b00:	f007 fa3e 	bl	8008f80 <HAL_DAC_Start_DMA>
}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	f3af 8000 	nop.w
 8001b10:	2000b770 	.word	0x2000b770
 8001b14:	66666666 	.word	0x66666666
 8001b18:	3f4a6666 	.word	0x3f4a6666

08001b1c <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e00a      	b.n	8001b40 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9f1      	bls.n	8001b2a <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	e00b      	b.n	8001b6a <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3308      	adds	r3, #8
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2ba4      	cmp	r3, #164	; 0xa4
 8001b6e:	d9f0      	bls.n	8001b52 <MA_ADC1_IN1_Init+0x36>
	}
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e05a      	b.n	8001c44 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4932      	ldr	r1, [pc, #200]	; (8001c5c <MA_ADC1_IN1_Update+0xdc>)
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	3212      	adds	r2, #18
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	440a      	add	r2, r1
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d102      	bne.n	8001bc0 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3308      	adds	r3, #8
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3304      	adds	r3, #4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e02c      	b.n	8001c38 <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	e001      	b.n	8001bf0 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 8001bec:	2307      	movs	r3, #7
 8001bee:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <MA_ADC1_IN1_Update+0xe0>)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	edd3 6a00 	vldr	s13, [r3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3304      	adds	r3, #4
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3308      	adds	r3, #8
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b07      	cmp	r3, #7
 8001c3c:	d9cf      	bls.n	8001bde <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d99f      	bls.n	8001b8e <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	20000048 	.word	0x20000048
 8001c60:	20000000 	.word	0x20000000

08001c64 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e00a      	b.n	8001c88 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	3301      	adds	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b07      	cmp	r3, #7
 8001c8c:	d9f1      	bls.n	8001c72 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	e00b      	b.n	8001cb2 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2ba4      	cmp	r3, #164	; 0xa4
 8001cb6:	d9f0      	bls.n	8001c9a <MA_ADC1_IN2_Init+0x36>
	}
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e05a      	b.n	8001d8c <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4932      	ldr	r1, [pc, #200]	; (8001da4 <MA_ADC1_IN2_Update+0xdc>)
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	3212      	adds	r2, #18
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	440a      	add	r2, r1
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3304      	adds	r3, #4
 8001cee:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d102      	bne.n	8001d08 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3308      	adds	r3, #8
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e02c      	b.n	8001d80 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e001      	b.n	8001d38 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8001d34:	2307      	movs	r3, #7
 8001d36:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <MA_ADC1_IN2_Update+0xe0>)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	edd3 6a00 	vldr	s13, [r3]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b07      	cmp	r3, #7
 8001d84:	d9cf      	bls.n	8001d26 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d99f      	bls.n	8001cd6 <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20001454 	.word	0x20001454
 8001da8:	20000000 	.word	0x20000000

08001dac <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e00a      	b.n	8001dd0 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	d9f1      	bls.n	8001dba <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	e00b      	b.n	8001dfa <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3308      	adds	r3, #8
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3304      	adds	r3, #4
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	3301      	adds	r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2ba4      	cmp	r3, #164	; 0xa4
 8001dfe:	d9f0      	bls.n	8001de2 <MA_ADC2_IN3_Init+0x36>
	}
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e05a      	b.n	8001ed4 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4932      	ldr	r1, [pc, #200]	; (8001eec <MA_ADC2_IN3_Update+0xdc>)
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	3212      	adds	r2, #18
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	440a      	add	r2, r1
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3304      	adds	r3, #4
 8001e36:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d102      	bne.n	8001e50 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3308      	adds	r3, #8
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e02c      	b.n	8001ec8 <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e001      	b.n	8001e80 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3308      	adds	r3, #8
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <MA_ADC2_IN3_Update+0xe0>)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	edd3 6a00 	vldr	s13, [r3]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3308      	adds	r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b07      	cmp	r3, #7
 8001ecc:	d9cf      	bls.n	8001e6e <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d99f      	bls.n	8001e1e <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20002860 	.word	0x20002860
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e00a      	b.n	8001f18 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3301      	adds	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	d9f1      	bls.n	8001f02 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e00b      	b.n	8001f42 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3308      	adds	r3, #8
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2ba4      	cmp	r3, #164	; 0xa4
 8001f46:	d9f0      	bls.n	8001f2a <MA_ADC2_IN4_Init+0x36>
	}
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e05a      	b.n	800201c <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4932      	ldr	r1, [pc, #200]	; (8002034 <MA_ADC2_IN4_Update+0xdc>)
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	3212      	adds	r2, #18
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	440a      	add	r2, r1
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d102      	bne.n	8001f98 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3308      	adds	r3, #8
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e02c      	b.n	8002010 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e001      	b.n	8001fc8 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3308      	adds	r3, #8
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <MA_ADC2_IN4_Update+0xe0>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	edd3 6a00 	vldr	s13, [r3]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3308      	adds	r3, #8
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b07      	cmp	r3, #7
 8002014:	d9cf      	bls.n	8001fb6 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002022:	4293      	cmp	r3, r2
 8002024:	d99f      	bls.n	8001f66 <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	20003c6c 	.word	0x20003c6c
 8002038:	20000000 	.word	0x20000000

0800203c <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e00a      	b.n	8002060 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3304      	adds	r3, #4
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	3301      	adds	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b07      	cmp	r3, #7
 8002064:	d9f1      	bls.n	800204a <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	e00b      	b.n	800208a <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3308      	adds	r3, #8
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3301      	adds	r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2ba4      	cmp	r3, #164	; 0xa4
 800208e:	d9f0      	bls.n	8002072 <MA_ADC3_IN1_Init+0x36>
	}
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e05a      	b.n	8002164 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4932      	ldr	r1, [pc, #200]	; (800217c <MA_ADC3_IN1_Update+0xdc>)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	3212      	adds	r2, #18
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	440a      	add	r2, r1
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3304      	adds	r3, #4
 80020c6:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d102      	bne.n	80020e0 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3308      	adds	r3, #8
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e02c      	b.n	8002158 <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	3b01      	subs	r3, #1
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e001      	b.n	8002110 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 800210c:	2307      	movs	r3, #7
 800210e:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3308      	adds	r3, #8
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3304      	adds	r3, #4
 800211c:	ed93 7a00 	vldr	s14, [r3]
 8002120:	4a17      	ldr	r2, [pc, #92]	; (8002180 <MA_ADC3_IN1_Update+0xe0>)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	edd3 6a00 	vldr	s13, [r3]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800213e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3308      	adds	r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b07      	cmp	r3, #7
 800215c:	d9cf      	bls.n	80020fe <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800216a:	4293      	cmp	r3, r2
 800216c:	d99f      	bls.n	80020ae <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20005078 	.word	0x20005078
 8002180:	20000000 	.word	0x20000000

08002184 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e00a      	b.n	80021a8 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	3301      	adds	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b07      	cmp	r3, #7
 80021ac:	d9f1      	bls.n	8002192 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	e00b      	b.n	80021d2 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3308      	adds	r3, #8
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3301      	adds	r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2ba4      	cmp	r3, #164	; 0xa4
 80021d6:	d9f0      	bls.n	80021ba <MA_ADC3_IN2_Init+0x36>
	}
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e05a      	b.n	80022ac <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4932      	ldr	r1, [pc, #200]	; (80022c4 <MA_ADC3_IN2_Update+0xdc>)
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	3212      	adds	r2, #18
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	440a      	add	r2, r1
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b08      	cmp	r3, #8
 8002220:	d102      	bne.n	8002228 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3308      	adds	r3, #8
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e02c      	b.n	80022a0 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3b01      	subs	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e001      	b.n	8002258 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8002254:	2307      	movs	r3, #7
 8002256:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3308      	adds	r3, #8
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3304      	adds	r3, #4
 8002264:	ed93 7a00 	vldr	s14, [r3]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <MA_ADC3_IN2_Update+0xe0>)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	edd3 6a00 	vldr	s13, [r3]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3308      	adds	r3, #8
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3304      	adds	r3, #4
 8002296:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	d9cf      	bls.n	8002246 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d99f      	bls.n	80021f6 <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20006484 	.word	0x20006484
 80022c8:	20000000 	.word	0x20000000

080022cc <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
	if(ADC1_Current_buffer == 1)
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <init_ADC1_IN1_struct+0x34>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <init_ADC1_IN1_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <init_ADC1_IN1_struct+0x38>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80022e0:	331c      	adds	r3, #28
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <init_ADC1_IN1_struct+0x3c>)
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
	}
  }
 80022e6:	e006      	b.n	80022f6 <init_ADC1_IN1_struct+0x2a>
	   ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <init_ADC1_IN1_struct+0x38>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80022f0:	3314      	adds	r3, #20
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <init_ADC1_IN1_struct+0x3c>)
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20007868 	.word	0x20007868
 8002304:	2000be58 	.word	0x2000be58
 8002308:	20000048 	.word	0x20000048

0800230c <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8002312:	7819      	ldrb	r1, [r3, #0]
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <init_ADC1_IN1_FO_biquad_filter+0x20>)
 800231e:	f00b f9fd 	bl	800d71c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000048 	.word	0x20000048
 800232c:	20001420 	.word	0x20001420

08002330 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8002336:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 800233a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 800234e:	f00b f829 	bl	800d3a4 <arm_biquad_cascade_df2T_f32>
   }
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000048 	.word	0x20000048
 800235c:	20001420 	.word	0x20001420

08002360 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

	if(ADC1_Current_buffer == 1)
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <init_ADC1_IN2_struct+0x34>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <init_ADC1_IN2_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt);
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <init_ADC1_IN2_struct+0x38>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8002374:	3330      	adds	r3, #48	; 0x30
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <init_ADC1_IN2_struct+0x3c>)
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
	}
  }
 800237a:	e006      	b.n	800238a <init_ADC1_IN2_struct+0x2a>
	   ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <init_ADC1_IN2_struct+0x38>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8002384:	3328      	adds	r3, #40	; 0x28
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <init_ADC1_IN2_struct+0x3c>)
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	20007868 	.word	0x20007868
 8002398:	2000be58 	.word	0x2000be58
 800239c:	20001454 	.word	0x20001454

080023a0 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80023a6:	7819      	ldrb	r1, [r3, #0]
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 80023b2:	f00b f9b3 	bl	800d71c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20001454 	.word	0x20001454
 80023c0:	2000282c 	.word	0x2000282c

080023c4 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <update_ADC1_IN2_FO_biquad_filter+0x28>)
 80023ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <update_ADC1_IN2_FO_biquad_filter+0x28>)
 80023ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d2:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <update_ADC1_IN2_FO_biquad_filter+0x28>)
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 80023e2:	f00a ffdf 	bl	800d3a4 <arm_biquad_cascade_df2T_f32>
   }
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20001454 	.word	0x20001454
 80023f0:	2000282c 	.word	0x2000282c

080023f4 <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

	if(ADC2_Current_buffer == 1)
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <init_ADC2_IN3_struct+0x34>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d107      	bne.n	8002410 <init_ADC2_IN3_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <init_ADC2_IN3_struct+0x38>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8002408:	331c      	adds	r3, #28
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <init_ADC2_IN3_struct+0x3c>)
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
	}
  }
 800240e:	e006      	b.n	800241e <init_ADC2_IN3_struct+0x2a>
	   ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <init_ADC2_IN3_struct+0x38>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002418:	3314      	adds	r3, #20
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <init_ADC2_IN3_struct+0x3c>)
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	20007869 	.word	0x20007869
 800242c:	2000be5c 	.word	0x2000be5c
 8002430:	20002860 	.word	0x20002860

08002434 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 800243a:	7819      	ldrb	r1, [r3, #0]
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8002446:	f00b f969 	bl	800d71c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20002860 	.word	0x20002860
 8002454:	20003c38 	.word	0x20003c38

08002458 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 800245e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8002462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002466:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8002476:	f00a ff95 	bl	800d3a4 <arm_biquad_cascade_df2T_f32>
   }
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20002860 	.word	0x20002860
 8002484:	20003c38 	.word	0x20003c38

08002488 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

	if(ADC2_Current_buffer == 1)
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <init_ADC2_IN4_struct+0x34>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <init_ADC2_IN4_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <init_ADC2_IN4_struct+0x38>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 800249c:	3330      	adds	r3, #48	; 0x30
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <init_ADC2_IN4_struct+0x3c>)
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
	}
  }
 80024a2:	e006      	b.n	80024b2 <init_ADC2_IN4_struct+0x2a>
	   ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <init_ADC2_IN4_struct+0x38>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80024ac:	3328      	adds	r3, #40	; 0x28
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <init_ADC2_IN4_struct+0x3c>)
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	20007869 	.word	0x20007869
 80024c0:	2000be5c 	.word	0x2000be5c
 80024c4:	20003c6c 	.word	0x20003c6c

080024c8 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80024ce:	7819      	ldrb	r1, [r3, #0]
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80024d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4803      	ldr	r0, [pc, #12]	; (80024e8 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 80024da:	f00b f91f 	bl	800d71c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20003c6c 	.word	0x20003c6c
 80024e8:	20005044 	.word	0x20005044

080024ec <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80024f2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80024f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fa:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8002500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002504:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 800250a:	f00a ff4b 	bl	800d3a4 <arm_biquad_cascade_df2T_f32>
   }
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20003c6c 	.word	0x20003c6c
 8002518:	20005044 	.word	0x20005044

0800251c <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
    if(ADC3_Current_buffer == 1)
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <init_ADC3_IN1_struct+0x34>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <init_ADC3_IN1_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt);
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <init_ADC3_IN1_struct+0x38>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8002530:	331c      	adds	r3, #28
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <init_ADC3_IN1_struct+0x3c>)
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
	}
  }
 8002536:	e006      	b.n	8002546 <init_ADC3_IN1_struct+0x2a>
	   ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <init_ADC3_IN1_struct+0x38>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002540:	3314      	adds	r3, #20
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <init_ADC3_IN1_struct+0x3c>)
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	2000786a 	.word	0x2000786a
 8002554:	2000be60 	.word	0x2000be60
 8002558:	20005078 	.word	0x20005078

0800255c <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8002562:	7819      	ldrb	r1, [r3, #0]
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <init_ADC3_IN1_FO_biquad_filter+0x20>)
 800256e:	f00b f8d5 	bl	800d71c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20005078 	.word	0x20005078
 800257c:	20006450 	.word	0x20006450

08002580 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8002586:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800258a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 800259e:	f00a ff01 	bl	800d3a4 <arm_biquad_cascade_df2T_f32>
   }
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20005078 	.word	0x20005078
 80025ac:	20006450 	.word	0x20006450

080025b0 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
    if(ADC3_Current_buffer == 1)
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <init_ADC3_IN2_struct+0x34>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <init_ADC3_IN2_struct+0x1c>
	{
       //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt);
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <init_ADC3_IN2_struct+0x38>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80025c4:	3330      	adds	r3, #48	; 0x30
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <init_ADC3_IN2_struct+0x3c>)
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
	   //Ensure that ADC1_DMA_sort_ptr is initialized
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);
	}
  }
 80025ca:	e006      	b.n	80025da <init_ADC3_IN2_struct+0x2a>
	   ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <init_ADC3_IN2_struct+0x38>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80025d4:	3328      	adds	r3, #40	; 0x28
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <init_ADC3_IN2_struct+0x3c>)
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	2000786a 	.word	0x2000786a
 80025e8:	2000be60 	.word	0x2000be60
 80025ec:	20006484 	.word	0x20006484

080025f0 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80025f6:	7819      	ldrb	r1, [r3, #0]
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80025fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4803      	ldr	r0, [pc, #12]	; (8002610 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 8002602:	f00b f88b 	bl	800d71c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20006484 	.word	0x20006484
 8002610:	2000785c 	.word	0x2000785c

08002614 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <update_ADC3_IN2_FO_biquad_filter+0x28>)
 800261a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <update_ADC3_IN2_FO_biquad_filter+0x28>)
 800261e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002622:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 8002632:	f00a feb7 	bl	800d3a4 <arm_biquad_cascade_df2T_f32>
   }
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20006484 	.word	0x20006484
 8002640:	2000785c 	.word	0x2000785c

08002644 <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	e010      	b.n	800267a <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3308      	adds	r3, #8
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3304      	adds	r3, #4
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ed97 7a03 	vldr	s14, [r7, #12]
 800266c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002670:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	3301      	adds	r3, #1
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2ba4      	cmp	r3, #164	; 0xa4
 800267e:	d9eb      	bls.n	8002658 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002680:	edd7 7a03 	vldr	s15, [r7, #12]
 8002684:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80026a0 <ADC1_IN1_OffsetCalc+0x5c>
 8002688:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800268c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002690:	eeb0 0a67 	vmov.f32	s0, s15
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	43250000 	.word	0x43250000

080026a4 <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	e010      	b.n	80026da <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3308      	adds	r3, #8
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80026cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d0:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2ba4      	cmp	r3, #164	; 0xa4
 80026de:	d9eb      	bls.n	80026b8 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80026e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002700 <ADC1_IN2_OffsetCalc+0x5c>
 80026e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	43250000 	.word	0x43250000

08002704 <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	e010      	b.n	800273a <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3308      	adds	r3, #8
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ed97 7a03 	vldr	s14, [r7, #12]
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3301      	adds	r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2ba4      	cmp	r3, #164	; 0xa4
 800273e:	d9eb      	bls.n	8002718 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002740:	edd7 7a03 	vldr	s15, [r7, #12]
 8002744:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002760 <ADC2_IN3_OffsetCalc+0x5c>
 8002748:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800274c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002750:	eeb0 0a67 	vmov.f32	s0, s15
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	43250000 	.word	0x43250000

08002764 <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	e010      	b.n	800279a <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3308      	adds	r3, #8
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ed97 7a03 	vldr	s14, [r7, #12]
 800278c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002790:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3301      	adds	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2ba4      	cmp	r3, #164	; 0xa4
 800279e:	d9eb      	bls.n	8002778 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80027a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027c0 <ADC2_IN4_OffsetCalc+0x5c>
 80027a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80027b0:	eeb0 0a67 	vmov.f32	s0, s15
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	43250000 	.word	0x43250000

080027c4 <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	e010      	b.n	80027fa <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3308      	adds	r3, #8
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80027ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f0:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3301      	adds	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2ba4      	cmp	r3, #164	; 0xa4
 80027fe:	d9eb      	bls.n	80027d8 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002800:	edd7 7a03 	vldr	s15, [r7, #12]
 8002804:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002820 <ADC3_IN1_OffsetCalc+0x5c>
 8002808:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800280c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002810:	eeb0 0a67 	vmov.f32	s0, s15
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	43250000 	.word	0x43250000

08002824 <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	e010      	b.n	800285a <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3308      	adds	r3, #8
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	ed97 7a03 	vldr	s14, [r7, #12]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3301      	adds	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2ba4      	cmp	r3, #164	; 0xa4
 800285e:	d9eb      	bls.n	8002838 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002860:	edd7 7a03 	vldr	s15, [r7, #12]
 8002864:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002880 <ADC3_IN2_OffsetCalc+0x5c>
 8002868:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800286c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	43250000 	.word	0x43250000

08002884 <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	e01a      	b.n	80028d2 <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	3308      	adds	r3, #8
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	ed93 7a00 	vldr	s14, [r3]
 80028ac:	edd7 7a00 	vldr	s15, [r7]
 80028b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 80028b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80028c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3301      	adds	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2ba4      	cmp	r3, #164	; 0xa4
 80028d6:	d9e1      	bls.n	800289c <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80028d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80028dc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002918 <ADC1_IN1_SD_BL+0x94>
 80028e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e4:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 80028e8:	6978      	ldr	r0, [r7, #20]
 80028ea:	f7fd fe55 	bl	8000598 <__aeabi_f2d>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	ec43 2b10 	vmov	d0, r2, r3
 80028f6:	f00d ffab 	bl	8010850 <sqrt>
 80028fa:	ec53 2b10 	vmov	r2, r3, d0
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f7fe f999 	bl	8000c38 <__aeabi_d2f>
 8002906:	4603      	mov	r3, r0
 8002908:	ee07 3a90 	vmov	s15, r3
}
 800290c:	eeb0 0a67 	vmov.f32	s0, s15
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	43250000 	.word	0x43250000

0800291c <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e01a      	b.n	800296a <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	3308      	adds	r3, #8
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	edd7 7a00 	vldr	s15, [r7]
 8002948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 8002950:	edd7 7a03 	vldr	s15, [r7, #12]
 8002954:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002958:	ed97 7a05 	vldr	s14, [r7, #20]
 800295c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002960:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	3301      	adds	r3, #1
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2ba4      	cmp	r3, #164	; 0xa4
 800296e:	d9e1      	bls.n	8002934 <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002970:	ed97 7a05 	vldr	s14, [r7, #20]
 8002974:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80029b0 <ADC1_IN2_SD_BL+0x94>
 8002978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297c:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f7fd fe09 	bl	8000598 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	ec43 2b10 	vmov	d0, r2, r3
 800298e:	f00d ff5f 	bl	8010850 <sqrt>
 8002992:	ec53 2b10 	vmov	r2, r3, d0
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fe f94d 	bl	8000c38 <__aeabi_d2f>
 800299e:	4603      	mov	r3, r0
 80029a0:	ee07 3a90 	vmov	s15, r3

}
 80029a4:	eeb0 0a67 	vmov.f32	s0, s15
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	43250000 	.word	0x43250000

080029b4 <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	e01a      	b.n	8002a02 <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3308      	adds	r3, #8
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	edd7 7a00 	vldr	s15, [r7]
 80029e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 80029e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80029f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	3301      	adds	r3, #1
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2ba4      	cmp	r3, #164	; 0xa4
 8002a06:	d9e1      	bls.n	80029cc <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002a08:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a0c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002a48 <ADC2_IN3_SD_BL+0x94>
 8002a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a14:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 8002a18:	6978      	ldr	r0, [r7, #20]
 8002a1a:	f7fd fdbd 	bl	8000598 <__aeabi_f2d>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	ec43 2b10 	vmov	d0, r2, r3
 8002a26:	f00d ff13 	bl	8010850 <sqrt>
 8002a2a:	ec53 2b10 	vmov	r2, r3, d0
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7fe f901 	bl	8000c38 <__aeabi_d2f>
 8002a36:	4603      	mov	r3, r0
 8002a38:	ee07 3a90 	vmov	s15, r3

}
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	43250000 	.word	0x43250000

08002a4c <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e01a      	b.n	8002a9a <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3304      	adds	r3, #4
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	edd7 7a00 	vldr	s15, [r7]
 8002a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 8002a80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a88:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a90:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	3301      	adds	r3, #1
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2ba4      	cmp	r3, #164	; 0xa4
 8002a9e:	d9e1      	bls.n	8002a64 <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002aa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002aa4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002ae0 <ADC2_IN4_SD_BL+0x94>
 8002aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aac:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 8002ab0:	6978      	ldr	r0, [r7, #20]
 8002ab2:	f7fd fd71 	bl	8000598 <__aeabi_f2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	ec43 2b10 	vmov	d0, r2, r3
 8002abe:	f00d fec7 	bl	8010850 <sqrt>
 8002ac2:	ec53 2b10 	vmov	r2, r3, d0
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fe f8b5 	bl	8000c38 <__aeabi_d2f>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	ee07 3a90 	vmov	s15, r3

}
 8002ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	43250000 	.word	0x43250000

08002ae4 <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	e01a      	b.n	8002b32 <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	3308      	adds	r3, #8
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	ed93 7a00 	vldr	s14, [r3]
 8002b0c:	edd7 7a00 	vldr	s15, [r7]
 8002b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b14:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 8002b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b20:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b28:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2ba4      	cmp	r3, #164	; 0xa4
 8002b36:	d9e1      	bls.n	8002afc <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002b38:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b3c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002b78 <ADC3_IN1_SD_BL+0x94>
 8002b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b44:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 8002b48:	6978      	ldr	r0, [r7, #20]
 8002b4a:	f7fd fd25 	bl	8000598 <__aeabi_f2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	ec43 2b10 	vmov	d0, r2, r3
 8002b56:	f00d fe7b 	bl	8010850 <sqrt>
 8002b5a:	ec53 2b10 	vmov	r2, r3, d0
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f869 	bl	8000c38 <__aeabi_d2f>
 8002b66:	4603      	mov	r3, r0
 8002b68:	ee07 3a90 	vmov	s15, r3

}
 8002b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	43250000 	.word	0x43250000

08002b7c <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	e01a      	b.n	8002bca <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	3308      	adds	r3, #8
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	ed93 7a00 	vldr	s14, [r3]
 8002ba4:	edd7 7a00 	vldr	s15, [r7]
 8002ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bac:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 8002bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2ba4      	cmp	r3, #164	; 0xa4
 8002bce:	d9e1      	bls.n	8002b94 <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002bd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bd4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002c10 <ADC3_IN2_SD_BL+0x94>
 8002bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bdc:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 8002be0:	6978      	ldr	r0, [r7, #20]
 8002be2:	f7fd fcd9 	bl	8000598 <__aeabi_f2d>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	ec43 2b10 	vmov	d0, r2, r3
 8002bee:	f00d fe2f 	bl	8010850 <sqrt>
 8002bf2:	ec53 2b10 	vmov	r2, r3, d0
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fe f81d 	bl	8000c38 <__aeabi_d2f>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	ee07 3a90 	vmov	s15, r3

}
 8002c04:	eeb0 0a67 	vmov.f32	s0, s15
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	43250000 	.word	0x43250000

08002c14 <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002c26:	2301      	movs	r3, #1
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	e055      	b.n	8002cd8 <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3308      	adds	r3, #8
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	3308      	adds	r3, #8
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c52:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3304      	adds	r3, #4
 8002c64:	ed93 7a00 	vldr	s14, [r3]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	3304      	adds	r3, #4
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7c:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 8002c80:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	dd1d      	ble.n	8002cd2 <ADC1_IN1_SSC+0xbe>
 8002c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c9e:	ed97 7a00 	vldr	s14, [r7]
 8002ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	d40a      	bmi.n	8002cc2 <ADC1_IN1_SSC+0xae>
 8002cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8002cb4:	ed97 7a00 	vldr	s14, [r7]
 8002cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d507      	bpl.n	8002cd2 <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 8002cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cce:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2ba4      	cmp	r3, #164	; 0xa4
 8002cdc:	d9a6      	bls.n	8002c2c <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	ee07 3a90 	vmov	s15, r3
}
 8002ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b087      	sub	sp, #28
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002d04:	2301      	movs	r3, #1
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	e055      	b.n	8002db6 <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	3308      	adds	r3, #8
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3304      	adds	r3, #4
 8002d16:	ed93 7a00 	vldr	s14, [r3]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	3308      	adds	r3, #8
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3304      	adds	r3, #4
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d30:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	ed93 7a00 	vldr	s14, [r3]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 8002d5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	dd1d      	ble.n	8002db0 <ADC1_IN2_SSC+0xbe>
 8002d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d78:	eef0 7ae7 	vabs.f32	s15, s15
 8002d7c:	ed97 7a00 	vldr	s14, [r7]
 8002d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d88:	d40a      	bmi.n	8002da0 <ADC1_IN2_SSC+0xae>
 8002d8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d8e:	eef0 7ae7 	vabs.f32	s15, s15
 8002d92:	ed97 7a00 	vldr	s14, [r7]
 8002d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	d507      	bpl.n	8002db0 <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 8002da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dac:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	3301      	adds	r3, #1
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2ba4      	cmp	r3, #164	; 0xa4
 8002dba:	d9a6      	bls.n	8002d0a <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	ee07 3a90 	vmov	s15, r3
}
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002de2:	2301      	movs	r3, #1
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e055      	b.n	8002e94 <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	3308      	adds	r3, #8
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	ed93 7a00 	vldr	s14, [r3]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3301      	adds	r3, #1
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3304      	adds	r3, #4
 8002e20:	ed93 7a00 	vldr	s14, [r3]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	3308      	adds	r3, #8
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3304      	adds	r3, #4
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 8002e3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	dd1d      	ble.n	8002e8e <ADC2_IN3_SSC+0xbe>
 8002e52:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e56:	eef0 7ae7 	vabs.f32	s15, s15
 8002e5a:	ed97 7a00 	vldr	s14, [r7]
 8002e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	d40a      	bmi.n	8002e7e <ADC2_IN3_SSC+0xae>
 8002e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e6c:	eef0 7ae7 	vabs.f32	s15, s15
 8002e70:	ed97 7a00 	vldr	s14, [r7]
 8002e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d507      	bpl.n	8002e8e <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 8002e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e8a:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	3301      	adds	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2ba4      	cmp	r3, #164	; 0xa4
 8002e98:	d9a6      	bls.n	8002de8 <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	ee07 3a90 	vmov	s15, r3
}
 8002ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	e055      	b.n	8002f72 <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	ed93 7a00 	vldr	s14, [r3]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	3308      	adds	r3, #8
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eec:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	ed93 7a00 	vldr	s14, [r3]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3308      	adds	r3, #8
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	edd3 7a00 	vldr	s15, [r3]
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 8002f1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	dd1d      	ble.n	8002f6c <ADC2_IN4_SSC+0xbe>
 8002f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f34:	eef0 7ae7 	vabs.f32	s15, s15
 8002f38:	ed97 7a00 	vldr	s14, [r7]
 8002f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	d40a      	bmi.n	8002f5c <ADC2_IN4_SSC+0xae>
 8002f46:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f4a:	eef0 7ae7 	vabs.f32	s15, s15
 8002f4e:	ed97 7a00 	vldr	s14, [r7]
 8002f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	d507      	bpl.n	8002f6c <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 8002f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f68:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2ba4      	cmp	r3, #164	; 0xa4
 8002f76:	d9a6      	bls.n	8002ec6 <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	ee07 3a90 	vmov	s15, r3
}
 8002f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e055      	b.n	8003050 <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	3308      	adds	r3, #8
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3304      	adds	r3, #4
 8002fb0:	ed93 7a00 	vldr	s14, [r3]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fca:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3304      	adds	r3, #4
 8002fdc:	ed93 7a00 	vldr	s14, [r3]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 8002ff8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300c:	dd1d      	ble.n	800304a <ADC3_IN1_SSC+0xbe>
 800300e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003012:	eef0 7ae7 	vabs.f32	s15, s15
 8003016:	ed97 7a00 	vldr	s14, [r7]
 800301a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d40a      	bmi.n	800303a <ADC3_IN1_SSC+0xae>
 8003024:	edd7 7a02 	vldr	s15, [r7, #8]
 8003028:	eef0 7ae7 	vabs.f32	s15, s15
 800302c:	ed97 7a00 	vldr	s14, [r7]
 8003030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003038:	d507      	bpl.n	800304a <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 800303a:	edd7 7a05 	vldr	s15, [r7, #20]
 800303e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003046:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2ba4      	cmp	r3, #164	; 0xa4
 8003054:	d9a6      	bls.n	8002fa4 <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	ee07 3a90 	vmov	s15, r3
}
 800305c:	eeb0 0a67 	vmov.f32	s0, s15
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 800306a:	b480      	push	{r7}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	e055      	b.n	800312e <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3308      	adds	r3, #8
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	ed93 7a00 	vldr	s14, [r3]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3b01      	subs	r3, #1
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	3308      	adds	r3, #8
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3301      	adds	r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	3308      	adds	r3, #8
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	ed93 7a00 	vldr	s14, [r3]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3308      	adds	r3, #8
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	3304      	adds	r3, #4
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d2:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 80030d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80030da:	edd7 7a02 	vldr	s15, [r7, #8]
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ea:	dd1d      	ble.n	8003128 <ADC3_IN2_SSC+0xbe>
 80030ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80030f0:	eef0 7ae7 	vabs.f32	s15, s15
 80030f4:	ed97 7a00 	vldr	s14, [r7]
 80030f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	d40a      	bmi.n	8003118 <ADC3_IN2_SSC+0xae>
 8003102:	edd7 7a02 	vldr	s15, [r7, #8]
 8003106:	eef0 7ae7 	vabs.f32	s15, s15
 800310a:	ed97 7a00 	vldr	s14, [r7]
 800310e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	d507      	bpl.n	8003128 <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 8003118:	edd7 7a05 	vldr	s15, [r7, #20]
 800311c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003124:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	3301      	adds	r3, #1
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2ba4      	cmp	r3, #164	; 0xa4
 8003132:	d9a6      	bls.n	8003082 <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	ee07 3a90 	vmov	s15, r3
}
 800313a:	eeb0 0a67 	vmov.f32	s0, s15
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <ADC1_IN1_STFT_Update>:
float32_t FFT_Mag_Res_6[ADC_DMA_SIXTEENTHBUFFERSIZE / 2];


//FUNCTION DEFINITIONS
float32_t* ADC1_IN1_STFT_Update(ADC1_IN1_STFT_par*ADC1_IN1_STFT_par_ptr, ADC1_IN1_MA*ADC1_IN1_STFT_ptr)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	ADC1_IN1_STFT_par_ptr->Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a68      	ldr	r2, [pc, #416]	; (80032f8 <ADC1_IN1_STFT_Update+0x1b0>)
 8003156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	ADC1_IN1_STFT_par_ptr->mu_1 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f)); // To ensure symmetry
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a67      	ldr	r2, [pc, #412]	; (80032fc <ADC1_IN1_STFT_Update+0x1b4>)
 800315e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	e041      	b.n	80031ec <ADC1_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_1 = -0.5f*(pow(((n - ADC1_IN1_STFT_par_ptr->mu_1)/ADC1_IN1_STFT_par_ptr->Sigma_1), 2));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8003178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8003182:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003186:	ee16 0a90 	vmov	r0, s13
 800318a:	f7fd fa05 	bl	8000598 <__aeabi_f2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	ed9f 1b57 	vldr	d1, [pc, #348]	; 80032f0 <ADC1_IN1_STFT_Update+0x1a8>
 8003196:	ec43 2b10 	vmov	d0, r2, r3
 800319a:	f00d fae9 	bl	8010770 <pow>
 800319e:	ec51 0b10 	vmov	r0, r1, d0
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	4b56      	ldr	r3, [pc, #344]	; (8003300 <ADC1_IN1_STFT_Update+0x1b8>)
 80031a8:	f7fd fa4e 	bl	8000648 <__aeabi_dmul>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	f7fd fd40 	bl	8000c38 <__aeabi_d2f>
 80031b8:	4603      	mov	r3, r0
 80031ba:	60bb      	str	r3, [r7, #8]
		ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[n] = exp(exponent_1);
 80031bc:	68b8      	ldr	r0, [r7, #8]
 80031be:	f7fd f9eb 	bl	8000598 <__aeabi_f2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	ec43 2b10 	vmov	d0, r2, r3
 80031ca:	f00d fa89 	bl	80106e0 <exp>
 80031ce:	ec53 2b10 	vmov	r2, r3, d0
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7fd fd2f 	bl	8000c38 <__aeabi_d2f>
 80031da:	4601      	mov	r1, r0
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2ba4      	cmp	r3, #164	; 0xa4
 80031f0:	d9ba      	bls.n	8003168 <ADC1_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e01a      	b.n	800322e <ADC1_IN1_STFT_Update+0xe6>
	{
		ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1[m] = ADC1_IN1_STFT_ptr->MA_ADC1_IN1_OutBfr[m] * ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[m];
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	3308      	adds	r3, #8
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	33a6      	adds	r3, #166	; 0xa6
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	3301      	adds	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2ba4      	cmp	r3, #164	; 0xa4
 8003232:	d9e1      	bls.n	80031f8 <ADC1_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_1 = arm_rfft_fast_init_f32 (&ADC1_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003234:	21a5      	movs	r1, #165	; 0xa5
 8003236:	4833      	ldr	r0, [pc, #204]	; (8003304 <ADC1_IN1_STFT_Update+0x1bc>)
 8003238:	f009 fa48 	bl	800c6cc <arm_rfft_fast_init_f32>
 800323c:	4603      	mov	r3, r0
 800323e:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_1 == ARM_MATH_SUCCESS)
 8003240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d14b      	bne.n	80032e0 <ADC1_IN1_STFT_Update+0x198>
	{
		arm_rfft_fast_f32 (&ADC1_IN1_FFT, ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1 , ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr, 0 );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 8003254:	2300      	movs	r3, #0
 8003256:	482b      	ldr	r0, [pc, #172]	; (8003304 <ADC1_IN1_STFT_Update+0x1bc>)
 8003258:	f009 fb1c 	bl	800c894 <arm_rfft_fast_f32>

		uint32_t mag_indx_1 = 0.0f; // Index to fill the frequency magnitude response buffer without skips
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e039      	b.n	80032da <ADC1_IN1_STFT_Update+0x192>
		{
			FFT_Mag_Res_1[mag_indx_1] = sqrtf((ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p]) + (ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1])); // Calculates the magnitude response
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	ed93 7a00 	vldr	s14, [r3]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	3301      	adds	r3, #1
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	edd3 6a00 	vldr	s13, [r3]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	3301      	adds	r3, #1
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	f00d faf5 	bl	80108a8 <sqrtf>
 80032be:	eef0 7a40 	vmov.f32	s15, s0
 80032c2:	4a11      	ldr	r2, [pc, #68]	; (8003308 <ADC1_IN1_STFT_Update+0x1c0>)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_1++;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3301      	adds	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	3302      	adds	r3, #2
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2ba4      	cmp	r3, #164	; 0xa4
 80032de:	d9c2      	bls.n	8003266 <ADC1_IN1_STFT_Update+0x11e>
		}
	}

	return FFT_Mag_Res_1;
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <ADC1_IN1_STFT_Update+0x1c0>)
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	f3af 8000 	nop.w
 80032f0:	00000000 	.word	0x00000000
 80032f4:	40000000 	.word	0x40000000
 80032f8:	41d80000 	.word	0x41d80000
 80032fc:	42a40000 	.word	0x42a40000
 8003300:	bfe00000 	.word	0xbfe00000
 8003304:	20009d54 	.word	0x20009d54
 8003308:	20009de4 	.word	0x20009de4
 800330c:	00000000 	.word	0x00000000

08003310 <ADC1_IN2_STFT_Update>:

float32_t* ADC1_IN2_STFT_Update(ADC1_IN2_STFT_par*ADC1_IN2_STFT_par_ptr, ADC1_IN2_MA*ADC1_IN2_STFT_ptr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	ADC1_IN2_STFT_par_ptr->Sigma_2 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a66      	ldr	r2, [pc, #408]	; (80034b8 <ADC1_IN2_STFT_Update+0x1a8>)
 800331e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	ADC1_IN2_STFT_par_ptr->mu_2 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a65      	ldr	r2, [pc, #404]	; (80034bc <ADC1_IN2_STFT_Update+0x1ac>)
 8003326:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e041      	b.n	80033b4 <ADC1_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_2 = -0.5f*(pow(((n - ADC1_IN2_STFT_par_ptr->mu_2)/ADC1_IN2_STFT_par_ptr->Sigma_2), 2));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8003340:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800334a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800334e:	ee16 0a90 	vmov	r0, s13
 8003352:	f7fd f921 	bl	8000598 <__aeabi_f2d>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80034b0 <ADC1_IN2_STFT_Update+0x1a0>
 800335e:	ec43 2b10 	vmov	d0, r2, r3
 8003362:	f00d fa05 	bl	8010770 <pow>
 8003366:	ec51 0b10 	vmov	r0, r1, d0
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <ADC1_IN2_STFT_Update+0x1b0>)
 8003370:	f7fd f96a 	bl	8000648 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc5c 	bl	8000c38 <__aeabi_d2f>
 8003380:	4603      	mov	r3, r0
 8003382:	60bb      	str	r3, [r7, #8]
		ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[n] = exp(exponent_2);
 8003384:	68b8      	ldr	r0, [r7, #8]
 8003386:	f7fd f907 	bl	8000598 <__aeabi_f2d>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	ec43 2b10 	vmov	d0, r2, r3
 8003392:	f00d f9a5 	bl	80106e0 <exp>
 8003396:	ec53 2b10 	vmov	r2, r3, d0
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f7fd fc4b 	bl	8000c38 <__aeabi_d2f>
 80033a2:	4601      	mov	r1, r0
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2ba4      	cmp	r3, #164	; 0xa4
 80033b8:	d9ba      	bls.n	8003330 <ADC1_IN2_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e01a      	b.n	80033f6 <ADC1_IN2_STFT_Update+0xe6>
	{
		ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2[m] = ADC1_IN2_STFT_ptr->MA_ADC1_IN2_OutBfr[m] * ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[m];
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	3308      	adds	r3, #8
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	ed93 7a00 	vldr	s14, [r3]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	33a6      	adds	r3, #166	; 0xa6
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2ba4      	cmp	r3, #164	; 0xa4
 80033fa:	d9e1      	bls.n	80033c0 <ADC1_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_2 = arm_rfft_fast_init_f32 (&ADC1_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80033fc:	21a5      	movs	r1, #165	; 0xa5
 80033fe:	4831      	ldr	r0, [pc, #196]	; (80034c4 <ADC1_IN2_STFT_Update+0x1b4>)
 8003400:	f009 f964 	bl	800c6cc <arm_rfft_fast_init_f32>
 8003404:	4603      	mov	r3, r0
 8003406:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_2 == ARM_MATH_SUCCESS)
 8003408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d149      	bne.n	80034a4 <ADC1_IN2_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC1_IN2_FFT, ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2 , ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr, 0 );
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 800341c:	2300      	movs	r3, #0
 800341e:	4829      	ldr	r0, [pc, #164]	; (80034c4 <ADC1_IN2_STFT_Update+0x1b4>)
 8003420:	f009 fa38 	bl	800c894 <arm_rfft_fast_f32>

		uint32_t mag_indx_2 = 0.0f;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003428:	e039      	b.n	800349e <ADC1_IN2_STFT_Update+0x18e>
		{
			FFT_Mag_Res_2[mag_indx_2] = sqrtf((ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p]) + (ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1]));
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	ed93 7a00 	vldr	s14, [r3]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3301      	adds	r3, #1
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	edd3 6a00 	vldr	s13, [r3]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	3301      	adds	r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347a:	eeb0 0a67 	vmov.f32	s0, s15
 800347e:	f00d fa13 	bl	80108a8 <sqrtf>
 8003482:	eef0 7a40 	vmov.f32	s15, s0
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <ADC1_IN2_STFT_Update+0x1b8>)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_2++;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	3301      	adds	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	3302      	adds	r3, #2
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2ba4      	cmp	r3, #164	; 0xa4
 80034a2:	d9c2      	bls.n	800342a <ADC1_IN2_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_2;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <ADC1_IN2_STFT_Update+0x1b8>)
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	00000000 	.word	0x00000000
 80034b4:	40000000 	.word	0x40000000
 80034b8:	41d80000 	.word	0x41d80000
 80034bc:	42a40000 	.word	0x42a40000
 80034c0:	bfe00000 	.word	0xbfe00000
 80034c4:	20009d6c 	.word	0x20009d6c
 80034c8:	20009f2c 	.word	0x20009f2c
 80034cc:	00000000 	.word	0x00000000

080034d0 <ADC2_IN3_STFT_Update>:

float32_t* ADC2_IN3_STFT_Update(ADC2_IN3_STFT_par*ADC2_IN3_STFT_par_ptr, ADC2_IN3_MA*ADC2_IN3_STFT_ptr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	ADC2_IN3_STFT_par_ptr->Sigma_3 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a66      	ldr	r2, [pc, #408]	; (8003678 <ADC2_IN3_STFT_Update+0x1a8>)
 80034de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	ADC2_IN3_STFT_par_ptr->mu_3 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a65      	ldr	r2, [pc, #404]	; (800367c <ADC2_IN3_STFT_Update+0x1ac>)
 80034e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e041      	b.n	8003574 <ADC2_IN3_STFT_Update+0xa4>
	{
		float32_t exponent_3 = -0.5f*(pow(((n - ADC2_IN3_STFT_par_ptr->mu_3)/ADC2_IN3_STFT_par_ptr->Sigma_3), 2));
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8003500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800350a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800350e:	ee16 0a90 	vmov	r0, s13
 8003512:	f7fd f841 	bl	8000598 <__aeabi_f2d>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003670 <ADC2_IN3_STFT_Update+0x1a0>
 800351e:	ec43 2b10 	vmov	d0, r2, r3
 8003522:	f00d f925 	bl	8010770 <pow>
 8003526:	ec51 0b10 	vmov	r0, r1, d0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <ADC2_IN3_STFT_Update+0x1b0>)
 8003530:	f7fd f88a 	bl	8000648 <__aeabi_dmul>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	f7fd fb7c 	bl	8000c38 <__aeabi_d2f>
 8003540:	4603      	mov	r3, r0
 8003542:	60bb      	str	r3, [r7, #8]
		ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[n] = exp(exponent_3);
 8003544:	68b8      	ldr	r0, [r7, #8]
 8003546:	f7fd f827 	bl	8000598 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	ec43 2b10 	vmov	d0, r2, r3
 8003552:	f00d f8c5 	bl	80106e0 <exp>
 8003556:	ec53 2b10 	vmov	r2, r3, d0
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	f7fd fb6b 	bl	8000c38 <__aeabi_d2f>
 8003562:	4601      	mov	r1, r0
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3301      	adds	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2ba4      	cmp	r3, #164	; 0xa4
 8003578:	d9ba      	bls.n	80034f0 <ADC2_IN3_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e01a      	b.n	80035b6 <ADC2_IN3_STFT_Update+0xe6>
	{
		ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3[m] = ADC2_IN3_STFT_ptr->MA_ADC2_IN3_OutBfr[m] * ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[m];
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	3308      	adds	r3, #8
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	3304      	adds	r3, #4
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	33a6      	adds	r3, #166	; 0xa6
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2ba4      	cmp	r3, #164	; 0xa4
 80035ba:	d9e1      	bls.n	8003580 <ADC2_IN3_STFT_Update+0xb0>
	}

	arm_status FFT_status_3 = arm_rfft_fast_init_f32 (&ADC2_IN3_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80035bc:	21a5      	movs	r1, #165	; 0xa5
 80035be:	4831      	ldr	r0, [pc, #196]	; (8003684 <ADC2_IN3_STFT_Update+0x1b4>)
 80035c0:	f009 f884 	bl	800c6cc <arm_rfft_fast_init_f32>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_3 == ARM_MATH_SUCCESS)
 80035c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d149      	bne.n	8003664 <ADC2_IN3_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC2_IN3_FFT, ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3 , ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr, 0 );
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 80035dc:	2300      	movs	r3, #0
 80035de:	4829      	ldr	r0, [pc, #164]	; (8003684 <ADC2_IN3_STFT_Update+0x1b4>)
 80035e0:	f009 f958 	bl	800c894 <arm_rfft_fast_f32>

		uint32_t mag_indx_3 = 0.0f;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80035e8:	e039      	b.n	800365e <ADC2_IN3_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_3] = sqrtf((ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p]) + (ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1]));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	ed93 7a00 	vldr	s14, [r3]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3301      	adds	r3, #1
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	edd3 6a00 	vldr	s13, [r3]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3301      	adds	r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363a:	eeb0 0a67 	vmov.f32	s0, s15
 800363e:	f00d f933 	bl	80108a8 <sqrtf>
 8003642:	eef0 7a40 	vmov.f32	s15, s0
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <ADC2_IN3_STFT_Update+0x1b8>)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_3++;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3301      	adds	r3, #1
 8003656:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3302      	adds	r3, #2
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2ba4      	cmp	r3, #164	; 0xa4
 8003662:	d9c2      	bls.n	80035ea <ADC2_IN3_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_3;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <ADC2_IN3_STFT_Update+0x1b8>)
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	00000000 	.word	0x00000000
 8003674:	40000000 	.word	0x40000000
 8003678:	41d80000 	.word	0x41d80000
 800367c:	42a40000 	.word	0x42a40000
 8003680:	bfe00000 	.word	0xbfe00000
 8003684:	20009d84 	.word	0x20009d84
 8003688:	2000a074 	.word	0x2000a074
 800368c:	00000000 	.word	0x00000000

08003690 <ADC2_IN4_STFT_Update>:

float32_t* ADC2_IN4_STFT_Update(ADC2_IN4_STFT_par*ADC2_IN4_STFT_par_ptr, ADC2_IN4_MA*ADC2_IN4_STFT_ptr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
	ADC2_IN4_STFT_par_ptr->Sigma_4 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a66      	ldr	r2, [pc, #408]	; (8003838 <ADC2_IN4_STFT_Update+0x1a8>)
 800369e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	ADC2_IN4_STFT_par_ptr->mu_4 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a65      	ldr	r2, [pc, #404]	; (800383c <ADC2_IN4_STFT_Update+0x1ac>)
 80036a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	e041      	b.n	8003734 <ADC2_IN4_STFT_Update+0xa4>
	{
		float32_t exponent_4 = -0.5f*(pow(((n - ADC2_IN4_STFT_par_ptr->mu_4)/ADC2_IN4_STFT_par_ptr->Sigma_4), 2));
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 80036c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80036ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036ce:	ee16 0a90 	vmov	r0, s13
 80036d2:	f7fc ff61 	bl	8000598 <__aeabi_f2d>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003830 <ADC2_IN4_STFT_Update+0x1a0>
 80036de:	ec43 2b10 	vmov	d0, r2, r3
 80036e2:	f00d f845 	bl	8010770 <pow>
 80036e6:	ec51 0b10 	vmov	r0, r1, d0
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	4b54      	ldr	r3, [pc, #336]	; (8003840 <ADC2_IN4_STFT_Update+0x1b0>)
 80036f0:	f7fc ffaa 	bl	8000648 <__aeabi_dmul>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7fd fa9c 	bl	8000c38 <__aeabi_d2f>
 8003700:	4603      	mov	r3, r0
 8003702:	60bb      	str	r3, [r7, #8]
		ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[n] = exp(exponent_4);
 8003704:	68b8      	ldr	r0, [r7, #8]
 8003706:	f7fc ff47 	bl	8000598 <__aeabi_f2d>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	ec43 2b10 	vmov	d0, r2, r3
 8003712:	f00c ffe5 	bl	80106e0 <exp>
 8003716:	ec53 2b10 	vmov	r2, r3, d0
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	f7fd fa8b 	bl	8000c38 <__aeabi_d2f>
 8003722:	4601      	mov	r1, r0
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2ba4      	cmp	r3, #164	; 0xa4
 8003738:	d9ba      	bls.n	80036b0 <ADC2_IN4_STFT_Update+0x20>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e01a      	b.n	8003776 <ADC2_IN4_STFT_Update+0xe6>
	{
		ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4[m] = ADC2_IN4_STFT_ptr->MA_ADC2_IN4_OutBfr[m] * ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[m];
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	3308      	adds	r3, #8
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	ed93 7a00 	vldr	s14, [r3]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	33a6      	adds	r3, #166	; 0xa6
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	3301      	adds	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2ba4      	cmp	r3, #164	; 0xa4
 800377a:	d9e1      	bls.n	8003740 <ADC2_IN4_STFT_Update+0xb0>
	}

	arm_status FFT_status_4 = arm_rfft_fast_init_f32 (&ADC2_IN4_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 800377c:	21a5      	movs	r1, #165	; 0xa5
 800377e:	4831      	ldr	r0, [pc, #196]	; (8003844 <ADC2_IN4_STFT_Update+0x1b4>)
 8003780:	f008 ffa4 	bl	800c6cc <arm_rfft_fast_init_f32>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_4 == ARM_MATH_SUCCESS)
 8003788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d149      	bne.n	8003824 <ADC2_IN4_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC2_IN4_FFT, ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4 , ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr, 0 );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 800379c:	2300      	movs	r3, #0
 800379e:	4829      	ldr	r0, [pc, #164]	; (8003844 <ADC2_IN4_STFT_Update+0x1b4>)
 80037a0:	f009 f878 	bl	800c894 <arm_rfft_fast_f32>

		uint32_t mag_indx_4 = 0.0f;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80037a8:	e039      	b.n	800381e <ADC2_IN4_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_4] = sqrtf((ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p]) + (ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1]));
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	ed93 7a00 	vldr	s14, [r3]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	3301      	adds	r3, #1
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	edd3 6a00 	vldr	s13, [r3]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	f00d f853 	bl	80108a8 <sqrtf>
 8003802:	eef0 7a40 	vmov.f32	s15, s0
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <ADC2_IN4_STFT_Update+0x1b8>)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_4++;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	3301      	adds	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	3302      	adds	r3, #2
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2ba4      	cmp	r3, #164	; 0xa4
 8003822:	d9c2      	bls.n	80037aa <ADC2_IN4_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_4;
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <ADC2_IN4_STFT_Update+0x1bc>)
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	00000000 	.word	0x00000000
 8003834:	40000000 	.word	0x40000000
 8003838:	41d80000 	.word	0x41d80000
 800383c:	42a40000 	.word	0x42a40000
 8003840:	bfe00000 	.word	0xbfe00000
 8003844:	20009d9c 	.word	0x20009d9c
 8003848:	2000a074 	.word	0x2000a074
 800384c:	2000a1bc 	.word	0x2000a1bc

08003850 <ADC3_IN1_STFT_Update>:

float32_t* ADC3_IN1_STFT_Update(ADC3_IN1_STFT_par*ADC3_IN1_STFT_par_ptr, ADC3_IN1_MA*ADC3_IN1_STFT_ptr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
	ADC3_IN1_STFT_par_ptr->Sigma_5 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a66      	ldr	r2, [pc, #408]	; (80039f8 <ADC3_IN1_STFT_Update+0x1a8>)
 800385e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	ADC3_IN1_STFT_par_ptr->mu_5 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <ADC3_IN1_STFT_Update+0x1ac>)
 8003866:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e041      	b.n	80038f4 <ADC3_IN1_STFT_Update+0xa4>
	{
		float32_t exponent_5 = -0.5f*(pow(((n - ADC3_IN1_STFT_par_ptr->mu_5)/ADC3_IN1_STFT_par_ptr->Sigma_5), 2));
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8003880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800388a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800388e:	ee16 0a90 	vmov	r0, s13
 8003892:	f7fc fe81 	bl	8000598 <__aeabi_f2d>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80039f0 <ADC3_IN1_STFT_Update+0x1a0>
 800389e:	ec43 2b10 	vmov	d0, r2, r3
 80038a2:	f00c ff65 	bl	8010770 <pow>
 80038a6:	ec51 0b10 	vmov	r0, r1, d0
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	4b54      	ldr	r3, [pc, #336]	; (8003a00 <ADC3_IN1_STFT_Update+0x1b0>)
 80038b0:	f7fc feca 	bl	8000648 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7fd f9bc 	bl	8000c38 <__aeabi_d2f>
 80038c0:	4603      	mov	r3, r0
 80038c2:	60bb      	str	r3, [r7, #8]
		ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[n] = exp(exponent_5);
 80038c4:	68b8      	ldr	r0, [r7, #8]
 80038c6:	f7fc fe67 	bl	8000598 <__aeabi_f2d>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	ec43 2b10 	vmov	d0, r2, r3
 80038d2:	f00c ff05 	bl	80106e0 <exp>
 80038d6:	ec53 2b10 	vmov	r2, r3, d0
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	f7fd f9ab 	bl	8000c38 <__aeabi_d2f>
 80038e2:	4601      	mov	r1, r0
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3301      	adds	r3, #1
 80038f2:	61fb      	str	r3, [r7, #28]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2ba4      	cmp	r3, #164	; 0xa4
 80038f8:	d9ba      	bls.n	8003870 <ADC3_IN1_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e01a      	b.n	8003936 <ADC3_IN1_STFT_Update+0xe6>
	{
		ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5[m] = ADC3_IN1_STFT_ptr->MA_ADC3_IN1_OutBfr[m] * ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[m];
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	3308      	adds	r3, #8
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	3304      	adds	r3, #4
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	33a6      	adds	r3, #166	; 0xa6
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	3301      	adds	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2ba4      	cmp	r3, #164	; 0xa4
 800393a:	d9e1      	bls.n	8003900 <ADC3_IN1_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_5 = arm_rfft_fast_init_f32 (&ADC3_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 800393c:	21a5      	movs	r1, #165	; 0xa5
 800393e:	4831      	ldr	r0, [pc, #196]	; (8003a04 <ADC3_IN1_STFT_Update+0x1b4>)
 8003940:	f008 fec4 	bl	800c6cc <arm_rfft_fast_init_f32>
 8003944:	4603      	mov	r3, r0
 8003946:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_5 == ARM_MATH_SUCCESS)
 8003948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d149      	bne.n	80039e4 <ADC3_IN1_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC3_IN1_FFT, ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5 , ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr, 0 );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 800395c:	2300      	movs	r3, #0
 800395e:	4829      	ldr	r0, [pc, #164]	; (8003a04 <ADC3_IN1_STFT_Update+0x1b4>)
 8003960:	f008 ff98 	bl	800c894 <arm_rfft_fast_f32>

		uint32_t mag_indx_5 = 0.0f;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003968:	e039      	b.n	80039de <ADC3_IN1_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_5] = sqrtf((ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p]) + (ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1]));
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	ed93 7a00 	vldr	s14, [r3]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3301      	adds	r3, #1
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	edd3 6a00 	vldr	s13, [r3]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	3301      	adds	r3, #1
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ba:	eeb0 0a67 	vmov.f32	s0, s15
 80039be:	f00c ff73 	bl	80108a8 <sqrtf>
 80039c2:	eef0 7a40 	vmov.f32	s15, s0
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <ADC3_IN1_STFT_Update+0x1b8>)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_5++;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3302      	adds	r3, #2
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2ba4      	cmp	r3, #164	; 0xa4
 80039e2:	d9c2      	bls.n	800396a <ADC3_IN1_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_5;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <ADC3_IN1_STFT_Update+0x1bc>)
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	00000000 	.word	0x00000000
 80039f4:	40000000 	.word	0x40000000
 80039f8:	41d80000 	.word	0x41d80000
 80039fc:	42a40000 	.word	0x42a40000
 8003a00:	bfe00000 	.word	0xbfe00000
 8003a04:	20009db4 	.word	0x20009db4
 8003a08:	2000a074 	.word	0x2000a074
 8003a0c:	2000a304 	.word	0x2000a304

08003a10 <ADC3_IN2_STFT_Update>:

float32_t* ADC3_IN2_STFT_Update(ADC3_IN2_STFT_par*ADC3_IN2_STFT_par_ptr, ADC3_IN2_MA*ADC3_IN2_STFT_ptr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
	ADC3_IN2_STFT_par_ptr->Sigma_6 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a66      	ldr	r2, [pc, #408]	; (8003bb8 <ADC3_IN2_STFT_Update+0x1a8>)
 8003a1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	ADC3_IN2_STFT_par_ptr->mu_6 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <ADC3_IN2_STFT_Update+0x1ac>)
 8003a26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e041      	b.n	8003ab4 <ADC3_IN2_STFT_Update+0xa4>
	{
		float32_t exponent_6 = -0.5f*(pow(((n - ADC3_IN2_STFT_par_ptr->mu_6)/ADC3_IN2_STFT_par_ptr->Sigma_6), 2));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8003a40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8003a4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a4e:	ee16 0a90 	vmov	r0, s13
 8003a52:	f7fc fda1 	bl	8000598 <__aeabi_f2d>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003bb0 <ADC3_IN2_STFT_Update+0x1a0>
 8003a5e:	ec43 2b10 	vmov	d0, r2, r3
 8003a62:	f00c fe85 	bl	8010770 <pow>
 8003a66:	ec51 0b10 	vmov	r0, r1, d0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	4b54      	ldr	r3, [pc, #336]	; (8003bc0 <ADC3_IN2_STFT_Update+0x1b0>)
 8003a70:	f7fc fdea 	bl	8000648 <__aeabi_dmul>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f8dc 	bl	8000c38 <__aeabi_d2f>
 8003a80:	4603      	mov	r3, r0
 8003a82:	60bb      	str	r3, [r7, #8]
		ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[n] = exp(exponent_6);
 8003a84:	68b8      	ldr	r0, [r7, #8]
 8003a86:	f7fc fd87 	bl	8000598 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	ec43 2b10 	vmov	d0, r2, r3
 8003a92:	f00c fe25 	bl	80106e0 <exp>
 8003a96:	ec53 2b10 	vmov	r2, r3, d0
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f7fd f8cb 	bl	8000c38 <__aeabi_d2f>
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2ba4      	cmp	r3, #164	; 0xa4
 8003ab8:	d9ba      	bls.n	8003a30 <ADC3_IN2_STFT_Update+0x20>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e01a      	b.n	8003af6 <ADC3_IN2_STFT_Update+0xe6>
	{
		ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6[m] = ADC3_IN2_STFT_ptr->MA_ADC3_IN2_OutBfr[m] * ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[m];
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	3304      	adds	r3, #4
 8003acc:	ed93 7a00 	vldr	s14, [r3]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	33a6      	adds	r3, #166	; 0xa6
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	3301      	adds	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2ba4      	cmp	r3, #164	; 0xa4
 8003afa:	d9e1      	bls.n	8003ac0 <ADC3_IN2_STFT_Update+0xb0>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_6 = arm_rfft_fast_init_f32 (&ADC3_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003afc:	21a5      	movs	r1, #165	; 0xa5
 8003afe:	4831      	ldr	r0, [pc, #196]	; (8003bc4 <ADC3_IN2_STFT_Update+0x1b4>)
 8003b00:	f008 fde4 	bl	800c6cc <arm_rfft_fast_init_f32>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_6 == ARM_MATH_SUCCESS)
 8003b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d149      	bne.n	8003ba4 <ADC3_IN2_STFT_Update+0x194>
	{
		arm_rfft_fast_f32 (&ADC3_IN2_FFT, ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6 , ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr, 0 );
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4829      	ldr	r0, [pc, #164]	; (8003bc4 <ADC3_IN2_STFT_Update+0x1b4>)
 8003b20:	f008 feb8 	bl	800c894 <arm_rfft_fast_f32>

		uint32_t mag_indx_6 = 0.0f;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003b28:	e039      	b.n	8003b9e <ADC3_IN2_STFT_Update+0x18e>
		{
			FFT_Mag_Res_3[mag_indx_6] = sqrtf((ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p]) + (ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1]));
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	3301      	adds	r3, #1
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	edd3 6a00 	vldr	s13, [r3]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3301      	adds	r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	edd3 7a00 	vldr	s15, [r3]
 8003b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	f00c fe93 	bl	80108a8 <sqrtf>
 8003b82:	eef0 7a40 	vmov.f32	s15, s0
 8003b86:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <ADC3_IN2_STFT_Update+0x1b8>)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_6++;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	3301      	adds	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2ba4      	cmp	r3, #164	; 0xa4
 8003ba2:	d9c2      	bls.n	8003b2a <ADC3_IN2_STFT_Update+0x11a>
		}
	}

	return FFT_Mag_Res_6;
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <ADC3_IN2_STFT_Update+0x1bc>)
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	40000000 	.word	0x40000000
 8003bb8:	41d80000 	.word	0x41d80000
 8003bbc:	42a40000 	.word	0x42a40000
 8003bc0:	bfe00000 	.word	0xbfe00000
 8003bc4:	20009dcc 	.word	0x20009dcc
 8003bc8:	2000a074 	.word	0x2000a074
 8003bcc:	2000a44c 	.word	0x2000a44c

08003bd0 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003bdc:	2301      	movs	r3, #1
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be0:	e030      	b.n	8003c44 <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	3308      	adds	r3, #8
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	3304      	adds	r3, #4
 8003bee:	ed93 7a00 	vldr	s14, [r3]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	3304      	adds	r3, #4
 8003c14:	edd3 6a00 	vldr	s13, [r3]
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	edd3 7a00 	vldr	s15, [r3]
 8003c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c32:	4a47      	ldr	r2, [pc, #284]	; (8003d50 <ADC1_IN1_TKEO+0x180>)
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	3301      	adds	r3, #1
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	2ba3      	cmp	r3, #163	; 0xa3
 8003c48:	d9cb      	bls.n	8003be2 <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 8003c4a:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <ADC1_IN1_TKEO+0x180>)
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003c52:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <ADC1_IN1_TKEO+0x180>)
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	e00e      	b.n	8003c9c <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 8003c7e:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <ADC1_IN1_TKEO+0x180>)
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c92:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	2ba4      	cmp	r3, #164	; 0xa4
 8003ca0:	d9ed      	bls.n	8003c7e <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003ca2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ca6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003d54 <ADC1_IN1_TKEO+0x184>
 8003caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cae:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e018      	b.n	8003cea <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 8003cb8:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <ADC1_IN1_TKEO+0x180>)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	ed93 7a00 	vldr	s14, [r3]
 8003cc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ccc:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 8003cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cd8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2ba4      	cmp	r3, #164	; 0xa4
 8003cee:	d9e3      	bls.n	8003cb8 <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003cf0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cf4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003d54 <ADC1_IN1_TKEO+0x184>
 8003cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cfc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8003d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d02:	f7fc fc49 	bl	8000598 <__aeabi_f2d>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	ec43 2b10 	vmov	d0, r2, r3
 8003d0e:	f00c fd9f 	bl	8010850 <sqrt>
 8003d12:	ec53 2b10 	vmov	r2, r3, d0
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc ff8d 	bl	8000c38 <__aeabi_d2f>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 8003d22:	edd7 7a00 	vldr	s15, [r7]
 8003d26:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3a:	dd03      	ble.n	8003d44 <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	e000      	b.n	8003d46 <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003d44:	2300      	movs	r3, #0
  }


}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3730      	adds	r7, #48	; 0x30
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2000a594 	.word	0x2000a594
 8003d54:	43250000 	.word	0x43250000

08003d58 <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003d64:	2301      	movs	r3, #1
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d68:	e030      	b.n	8003dcc <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	3308      	adds	r3, #8
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	3304      	adds	r3, #4
 8003d76:	ed93 7a00 	vldr	s14, [r3]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	3308      	adds	r3, #8
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	3304      	adds	r3, #4
 8003d86:	edd3 7a00 	vldr	s15, [r3]
 8003d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	3b01      	subs	r3, #1
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	3308      	adds	r3, #8
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	edd3 6a00 	vldr	s13, [r3]
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	3301      	adds	r3, #1
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	3308      	adds	r3, #8
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	edd3 7a00 	vldr	s15, [r3]
 8003db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dba:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <ADC1_IN2_TKEO+0x180>)
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	3301      	adds	r3, #1
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	2ba3      	cmp	r3, #163	; 0xa3
 8003dd0:	d9cb      	bls.n	8003d6a <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <ADC1_IN2_TKEO+0x180>)
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003dda:	4b3f      	ldr	r3, [pc, #252]	; (8003ed8 <ADC1_IN2_TKEO+0x180>)
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290


  float32_t Tkeo_Sum_2 = 0.0f;
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	e00e      	b.n	8003e24 <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 8003e06:	4a34      	ldr	r2, [pc, #208]	; (8003ed8 <ADC1_IN2_TKEO+0x180>)
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	3301      	adds	r3, #1
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	2ba4      	cmp	r3, #164	; 0xa4
 8003e28:	d9ed      	bls.n	8003e06 <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003e2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003e2e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003edc <ADC1_IN2_TKEO+0x184>
 8003e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e36:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	e018      	b.n	8003e72 <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <ADC1_IN2_TKEO+0x180>)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	ed93 7a00 	vldr	s14, [r3]
 8003e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e54:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 8003e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2ba4      	cmp	r3, #164	; 0xa4
 8003e76:	d9e3      	bls.n	8003e40 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003e78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e7c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003edc <ADC1_IN2_TKEO+0x184>
 8003e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 8003e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8a:	f7fc fb85 	bl	8000598 <__aeabi_f2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	ec43 2b10 	vmov	d0, r2, r3
 8003e96:	f00c fcdb 	bl	8010850 <sqrt>
 8003e9a:	ec53 2b10 	vmov	r2, r3, d0
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f7fc fec9 	bl	8000c38 <__aeabi_d2f>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 8003eaa:	edd7 7a00 	vldr	s15, [r7]
 8003eae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec2:	dd03      	ble.n	8003ecc <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	e000      	b.n	8003ece <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003ecc:	2300      	movs	r3, #0
  }


}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3730      	adds	r7, #48	; 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000a828 	.word	0x2000a828
 8003edc:	43250000 	.word	0x43250000

08003ee0 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08c      	sub	sp, #48	; 0x30
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003eec:	2301      	movs	r3, #1
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef0:	e030      	b.n	8003f54 <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	3304      	adds	r3, #4
 8003efe:	ed93 7a00 	vldr	s14, [r3]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	3308      	adds	r3, #8
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	3304      	adds	r3, #4
 8003f24:	edd3 6a00 	vldr	s13, [r3]
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3304      	adds	r3, #4
 8003f36:	edd3 7a00 	vldr	s15, [r3]
 8003f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f42:	4a47      	ldr	r2, [pc, #284]	; (8004060 <ADC2_IN3_TKEO+0x180>)
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	3301      	adds	r3, #1
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	2ba3      	cmp	r3, #163	; 0xa3
 8003f58:	d9cb      	bls.n	8003ef2 <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <ADC2_IN3_TKEO+0x180>)
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <ADC2_IN3_TKEO+0x180>)
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290


  float32_t Tkeo_Sum_3 = 0.0f;
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	623b      	str	r3, [r7, #32]
 8003f8c:	e00e      	b.n	8003fac <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 8003f8e:	4a34      	ldr	r2, [pc, #208]	; (8004060 <ADC2_IN3_TKEO+0x180>)
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	edd3 7a00 	vldr	s15, [r3]
 8003f9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	2ba4      	cmp	r3, #164	; 0xa4
 8003fb0:	d9ed      	bls.n	8003f8e <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003fb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003fb6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004064 <ADC2_IN3_TKEO+0x184>
 8003fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fbe:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e018      	b.n	8003ffa <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 8003fc8:	4a25      	ldr	r2, [pc, #148]	; (8004060 <ADC2_IN3_TKEO+0x180>)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	ed93 7a00 	vldr	s14, [r3]
 8003fd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fdc:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8003fe0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fe4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fe8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2ba4      	cmp	r3, #164	; 0xa4
 8003ffe:	d9e3      	bls.n	8003fc8 <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8004000:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004004:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004064 <ADC2_IN3_TKEO+0x184>
 8004008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800400c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8004010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004012:	f7fc fac1 	bl	8000598 <__aeabi_f2d>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	ec43 2b10 	vmov	d0, r2, r3
 800401e:	f00c fc17 	bl	8010850 <sqrt>
 8004022:	ec53 2b10 	vmov	r2, r3, d0
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7fc fe05 	bl	8000c38 <__aeabi_d2f>
 800402e:	4603      	mov	r3, r0
 8004030:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8004032:	edd7 7a00 	vldr	s15, [r7]
 8004036:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800403a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800403e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404a:	dd03      	ble.n	8004054 <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 800404c:	2301      	movs	r3, #1
 800404e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	e000      	b.n	8004056 <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8004054:	2300      	movs	r3, #0
  }


}
 8004056:	4618      	mov	r0, r3
 8004058:	3730      	adds	r7, #48	; 0x30
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2000aabc 	.word	0x2000aabc
 8004064:	43250000 	.word	0x43250000

08004068 <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8004074:	2301      	movs	r3, #1
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004078:	e030      	b.n	80040dc <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	3308      	adds	r3, #8
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	ed93 7a00 	vldr	s14, [r3]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	3308      	adds	r3, #8
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	edd3 7a00 	vldr	s15, [r3]
 800409a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	3b01      	subs	r3, #1
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	3308      	adds	r3, #8
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	edd3 6a00 	vldr	s13, [r3]
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	3301      	adds	r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	3308      	adds	r3, #8
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	edd3 7a00 	vldr	s15, [r3]
 80040c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ca:	4a47      	ldr	r2, [pc, #284]	; (80041e8 <ADC2_IN4_TKEO+0x180>)
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	3301      	adds	r3, #1
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040de:	2ba3      	cmp	r3, #163	; 0xa3
 80040e0:	d9cb      	bls.n	800407a <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <ADC2_IN4_TKEO+0x180>)
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <ADC2_IN4_TKEO+0x180>)
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290


  float32_t Tkeo_Sum_4 = 0.0f;
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8004110:	2300      	movs	r3, #0
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	e00e      	b.n	8004134 <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 8004116:	4a34      	ldr	r2, [pc, #208]	; (80041e8 <ADC2_IN4_TKEO+0x180>)
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	edd3 7a00 	vldr	s15, [r3]
 8004122:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800412a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	3301      	adds	r3, #1
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2ba4      	cmp	r3, #164	; 0xa4
 8004138:	d9ed      	bls.n	8004116 <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800413a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800413e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80041ec <ADC2_IN4_TKEO+0x184>
 8004142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004146:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e018      	b.n	8004182 <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 8004150:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <ADC2_IN4_TKEO+0x180>)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	ed93 7a00 	vldr	s14, [r3]
 800415c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004164:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 8004168:	edd7 7a03 	vldr	s15, [r7, #12]
 800416c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004170:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004178:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2ba4      	cmp	r3, #164	; 0xa4
 8004186:	d9e3      	bls.n	8004150 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8004188:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800418c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80041ec <ADC2_IN4_TKEO+0x184>
 8004190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004194:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 8004198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800419a:	f7fc f9fd 	bl	8000598 <__aeabi_f2d>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	ec43 2b10 	vmov	d0, r2, r3
 80041a6:	f00c fb53 	bl	8010850 <sqrt>
 80041aa:	ec53 2b10 	vmov	r2, r3, d0
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7fc fd41 	bl	8000c38 <__aeabi_d2f>
 80041b6:	4603      	mov	r3, r0
 80041b8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 80041ba:	edd7 7a00 	vldr	s15, [r7]
 80041be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80041c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80041ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	dd03      	ble.n	80041dc <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 80041d4:	2301      	movs	r3, #1
 80041d6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	e000      	b.n	80041de <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 80041dc:	2300      	movs	r3, #0
  }


}
 80041de:	4618      	mov	r0, r3
 80041e0:	3730      	adds	r7, #48	; 0x30
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000ad50 	.word	0x2000ad50
 80041ec:	43250000 	.word	0x43250000

080041f0 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08c      	sub	sp, #48	; 0x30
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80041fc:	2301      	movs	r3, #1
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004200:	e030      	b.n	8004264 <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	3308      	adds	r3, #8
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	3304      	adds	r3, #4
 800420e:	ed93 7a00 	vldr	s14, [r3]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	3308      	adds	r3, #8
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	3b01      	subs	r3, #1
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	3308      	adds	r3, #8
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	3304      	adds	r3, #4
 8004234:	edd3 6a00 	vldr	s13, [r3]
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	3301      	adds	r3, #1
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	3308      	adds	r3, #8
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	3304      	adds	r3, #4
 8004246:	edd3 7a00 	vldr	s15, [r3]
 800424a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800424e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004252:	4a47      	ldr	r2, [pc, #284]	; (8004370 <ADC3_IN1_TKEO+0x180>)
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	3301      	adds	r3, #1
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	2ba3      	cmp	r3, #163	; 0xa3
 8004268:	d9cb      	bls.n	8004202 <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 800426a:	4b41      	ldr	r3, [pc, #260]	; (8004370 <ADC3_IN1_TKEO+0x180>)
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8004272:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <ADC3_IN1_TKEO+0x180>)
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8004298:	2300      	movs	r3, #0
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	e00e      	b.n	80042bc <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 800429e:	4a34      	ldr	r2, [pc, #208]	; (8004370 <ADC3_IN1_TKEO+0x180>)
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	edd3 7a00 	vldr	s15, [r3]
 80042aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80042ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	3301      	adds	r3, #1
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2ba4      	cmp	r3, #164	; 0xa4
 80042c0:	d9ed      	bls.n	800429e <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80042c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80042c6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004374 <ADC3_IN1_TKEO+0x184>
 80042ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042ce:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	e018      	b.n	800430a <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <ADC3_IN1_TKEO+0x180>)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	ed93 7a00 	vldr	s14, [r3]
 80042e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80042e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ec:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 80042f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80042f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004300:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2ba4      	cmp	r3, #164	; 0xa4
 800430e:	d9e3      	bls.n	80042d8 <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8004310:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004314:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004374 <ADC3_IN1_TKEO+0x184>
 8004318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800431c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 8004320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004322:	f7fc f939 	bl	8000598 <__aeabi_f2d>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	ec43 2b10 	vmov	d0, r2, r3
 800432e:	f00c fa8f 	bl	8010850 <sqrt>
 8004332:	ec53 2b10 	vmov	r2, r3, d0
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f7fc fc7d 	bl	8000c38 <__aeabi_d2f>
 800433e:	4603      	mov	r3, r0
 8004340:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8004342:	edd7 7a00 	vldr	s15, [r7]
 8004346:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800434a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800434e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435a:	dd03      	ble.n	8004364 <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 800435c:	2301      	movs	r3, #1
 800435e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	e000      	b.n	8004366 <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8004364:	2300      	movs	r3, #0
  }


}
 8004366:	4618      	mov	r0, r3
 8004368:	3730      	adds	r7, #48	; 0x30
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	2000afe4 	.word	0x2000afe4
 8004374:	43250000 	.word	0x43250000

08004378 <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	; 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8004384:	2301      	movs	r3, #1
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004388:	e030      	b.n	80043ec <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	3308      	adds	r3, #8
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	ed93 7a00 	vldr	s14, [r3]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	3308      	adds	r3, #8
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	edd3 7a00 	vldr	s15, [r3]
 80043aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	3b01      	subs	r3, #1
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	3308      	adds	r3, #8
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	edd3 6a00 	vldr	s13, [r3]
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	3301      	adds	r3, #1
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	3308      	adds	r3, #8
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	edd3 7a00 	vldr	s15, [r3]
 80043d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043da:	4a47      	ldr	r2, [pc, #284]	; (80044f8 <ADC3_IN2_TKEO+0x180>)
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	3301      	adds	r3, #1
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	2ba3      	cmp	r3, #163	; 0xa3
 80043f0:	d9cb      	bls.n	800438a <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 80043f2:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <ADC3_IN2_TKEO+0x180>)
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <ADC3_IN2_TKEO+0x180>)
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290


  float32_t Tkeo_Sum_6 = 0.0f;
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8004420:	2300      	movs	r3, #0
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	e00e      	b.n	8004444 <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 8004426:	4a34      	ldr	r2, [pc, #208]	; (80044f8 <ADC3_IN2_TKEO+0x180>)
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800443a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	3301      	adds	r3, #1
 8004442:	623b      	str	r3, [r7, #32]
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	2ba4      	cmp	r3, #164	; 0xa4
 8004448:	d9ed      	bls.n	8004426 <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800444a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800444e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80044fc <ADC3_IN2_TKEO+0x184>
 8004452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004456:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e018      	b.n	8004492 <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 8004460:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <ADC3_IN2_TKEO+0x180>)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	ed93 7a00 	vldr	s14, [r3]
 800446c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004474:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 8004478:	edd7 7a03 	vldr	s15, [r7, #12]
 800447c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004480:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004488:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	3301      	adds	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	2ba4      	cmp	r3, #164	; 0xa4
 8004496:	d9e3      	bls.n	8004460 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8004498:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800449c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80044fc <ADC3_IN2_TKEO+0x184>
 80044a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 80044a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044aa:	f7fc f875 	bl	8000598 <__aeabi_f2d>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	ec43 2b10 	vmov	d0, r2, r3
 80044b6:	f00c f9cb 	bl	8010850 <sqrt>
 80044ba:	ec53 2b10 	vmov	r2, r3, d0
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	f7fc fbb9 	bl	8000c38 <__aeabi_d2f>
 80044c6:	4603      	mov	r3, r0
 80044c8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 80044ca:	edd7 7a00 	vldr	s15, [r7]
 80044ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80044d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80044da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e2:	dd03      	ble.n	80044ec <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	e000      	b.n	80044ee <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 80044ec:	2300      	movs	r3, #0
  }


}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3730      	adds	r7, #48	; 0x30
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	2000b278 	.word	0x2000b278
 80044fc:	43250000 	.word	0x43250000

08004500 <ADC1_DMA_sort_uhb>:
uint8_t ADC2_Current_buffer = 1;
uint8_t ADC3_Current_buffer = 1;

//FUNCTION DEFINITIONS
void ADC1_DMA_sort_uhb (void)
{
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
  if(ADC1_Current_buffer == 1)
 8004506:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <ADC1_DMA_sort_uhb+0x1a0>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d15f      	bne.n	80045ce <ADC1_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e057      	b.n	80045c4 <ADC1_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <ADC1_DMA_sort_uhb+0x24>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d126      	bne.n	8004572 <ADC1_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	e01e      	b.n	8004568 <ADC1_DMA_sort_uhb+0x68>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 800452a:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc f80d 	bl	8000554 <__aeabi_ui2d>
 800453a:	a357      	add	r3, pc, #348	; (adr r3, 8004698 <ADC1_DMA_sort_uhb+0x198>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f7fc f882 	bl	8000648 <__aeabi_dmul>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4956      	ldr	r1, [pc, #344]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 800454a:	680c      	ldr	r4, [r1, #0]
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	f7fc fb52 	bl	8000bf8 <__aeabi_d2uiz>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4423      	add	r3, r4
 8004560:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800456e:	d3dc      	bcc.n	800452a <ADC1_DMA_sort_uhb+0x2a>
 8004570:	e025      	b.n	80045be <ADC1_DMA_sort_uhb+0xbe>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e01e      	b.n	80045b6 <ADC1_DMA_sort_uhb+0xb6>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004578:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fb ffe6 	bl	8000554 <__aeabi_ui2d>
 8004588:	a343      	add	r3, pc, #268	; (adr r3, 8004698 <ADC1_DMA_sort_uhb+0x198>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f7fc f85b 	bl	8000648 <__aeabi_dmul>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4943      	ldr	r1, [pc, #268]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 8004598:	680c      	ldr	r4, [r1, #0]
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	f7fc fb2b 	bl	8000bf8 <__aeabi_d2uiz>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80045aa:	330a      	adds	r3, #10
 80045ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3301      	adds	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80045bc:	d3dc      	bcc.n	8004578 <ADC1_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80045ca:	d9a3      	bls.n	8004514 <ADC1_DMA_sort_uhb+0x14>
	  			}
	  		}
	     }

  }
};
 80045cc:	e05e      	b.n	800468c <ADC1_DMA_sort_uhb+0x18c>
	  for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	e057      	b.n	8004684 <ADC1_DMA_sort_uhb+0x184>
	  		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <ADC1_DMA_sort_uhb+0xe4>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d126      	bne.n	8004632 <ADC1_DMA_sort_uhb+0x132>
	  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 80045e4:	2300      	movs	r3, #0
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e01e      	b.n	8004628 <ADC1_DMA_sort_uhb+0x128>
	  				ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80045ea:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fb ffad 	bl	8000554 <__aeabi_ui2d>
 80045fa:	a327      	add	r3, pc, #156	; (adr r3, 8004698 <ADC1_DMA_sort_uhb+0x198>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fc f822 	bl	8000648 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4926      	ldr	r1, [pc, #152]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 800460a:	680c      	ldr	r4, [r1, #0]
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f7fc faf2 	bl	8000bf8 <__aeabi_d2uiz>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4423      	add	r3, r4
 8004620:	605a      	str	r2, [r3, #4]
	  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3301      	adds	r3, #1
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800462e:	d3dc      	bcc.n	80045ea <ADC1_DMA_sort_uhb+0xea>
 8004630:	e025      	b.n	800467e <ADC1_DMA_sort_uhb+0x17e>
	  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004632:	2300      	movs	r3, #0
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	e01e      	b.n	8004676 <ADC1_DMA_sort_uhb+0x176>
	  				ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004638:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fb ff86 	bl	8000554 <__aeabi_ui2d>
 8004648:	a313      	add	r3, pc, #76	; (adr r3, 8004698 <ADC1_DMA_sort_uhb+0x198>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb fffb 	bl	8000648 <__aeabi_dmul>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4913      	ldr	r1, [pc, #76]	; (80046a4 <ADC1_DMA_sort_uhb+0x1a4>)
 8004658:	680c      	ldr	r4, [r1, #0]
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	f7fc facb 	bl	8000bf8 <__aeabi_d2uiz>
 8004662:	4602      	mov	r2, r0
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 800466a:	330c      	adds	r3, #12
 800466c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800467c:	d3dc      	bcc.n	8004638 <ADC1_DMA_sort_uhb+0x138>
	  for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3301      	adds	r3, #1
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800468a:	d9a3      	bls.n	80045d4 <ADC1_DMA_sort_uhb+0xd4>
};
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	f3af 8000 	nop.w
 8004698:	66666666 	.word	0x66666666
 800469c:	3f4a6666 	.word	0x3f4a6666
 80046a0:	20007868 	.word	0x20007868
 80046a4:	2000be58 	.word	0x2000be58

080046a8 <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
  if (ADC1_Current_buffer == 1)
 80046ae:	4b6c      	ldr	r3, [pc, #432]	; (8004860 <ADC1_DMA_sort_lhb+0x1b8>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d166      	bne.n	8004784 <ADC1_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 80046b6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e059      	b.n	8004772 <ADC1_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <ADC1_DMA_sort_lhb+0x26>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d127      	bne.n	800471e <ADC1_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 80046ce:	f240 2371 	movw	r3, #625	; 0x271
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	e01e      	b.n	8004714 <ADC1_DMA_sort_lhb+0x6c>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80046d6:	4b63      	ldr	r3, [pc, #396]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fb ff37 	bl	8000554 <__aeabi_ui2d>
 80046e6:	a35c      	add	r3, pc, #368	; (adr r3, 8004858 <ADC1_DMA_sort_lhb+0x1b0>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb ffac 	bl	8000648 <__aeabi_dmul>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	495b      	ldr	r1, [pc, #364]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 80046f6:	680c      	ldr	r4, [r1, #0]
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	f7fc fa7c 	bl	8000bf8 <__aeabi_d2uiz>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4423      	add	r3, r4
 800470c:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3301      	adds	r3, #1
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800471a:	d9dc      	bls.n	80046d6 <ADC1_DMA_sort_lhb+0x2e>
 800471c:	e026      	b.n	800476c <ADC1_DMA_sort_lhb+0xc4>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800471e:	f240 2371 	movw	r3, #625	; 0x271
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e01e      	b.n	8004764 <ADC1_DMA_sort_lhb+0xbc>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004726:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb ff0f 	bl	8000554 <__aeabi_ui2d>
 8004736:	a348      	add	r3, pc, #288	; (adr r3, 8004858 <ADC1_DMA_sort_lhb+0x1b0>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb ff84 	bl	8000648 <__aeabi_dmul>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4947      	ldr	r1, [pc, #284]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 8004746:	680c      	ldr	r4, [r1, #0]
 8004748:	4610      	mov	r0, r2
 800474a:	4619      	mov	r1, r3
 800474c:	f7fc fa54 	bl	8000bf8 <__aeabi_d2uiz>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004758:	330a      	adds	r3, #10
 800475a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3301      	adds	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800476a:	d9dc      	bls.n	8004726 <ADC1_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3301      	adds	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004778:	4293      	cmp	r3, r2
 800477a:	d9a0      	bls.n	80046be <ADC1_DMA_sort_lhb+0x16>
			}
		}
     }

	ADC1_Current_buffer = 2;
 800477c:	4b38      	ldr	r3, [pc, #224]	; (8004860 <ADC1_DMA_sort_lhb+0x1b8>)
 800477e:	2202      	movs	r2, #2
 8004780:	701a      	strb	r2, [r3, #0]
	 }

	ADC1_Current_buffer = 1;
   }

};
 8004782:	e065      	b.n	8004850 <ADC1_DMA_sort_lhb+0x1a8>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8004784:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	e059      	b.n	8004840 <ADC1_DMA_sort_lhb+0x198>
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <ADC1_DMA_sort_lhb+0xf4>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d127      	bne.n	80047ec <ADC1_DMA_sort_lhb+0x144>
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800479c:	f240 2371 	movw	r3, #625	; 0x271
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	e01e      	b.n	80047e2 <ADC1_DMA_sort_lhb+0x13a>
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr_alt[n] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80047a4:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fed0 	bl	8000554 <__aeabi_ui2d>
 80047b4:	a328      	add	r3, pc, #160	; (adr r3, 8004858 <ADC1_DMA_sort_lhb+0x1b0>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f7fb ff45 	bl	8000648 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4928      	ldr	r1, [pc, #160]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 80047c4:	680c      	ldr	r4, [r1, #0]
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7fc fa15 	bl	8000bf8 <__aeabi_d2uiz>
 80047ce:	4602      	mov	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4423      	add	r3, r4
 80047da:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3301      	adds	r3, #1
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80047e8:	d9dc      	bls.n	80047a4 <ADC1_DMA_sort_lhb+0xfc>
 80047ea:	e026      	b.n	800483a <ADC1_DMA_sort_lhb+0x192>
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 80047ec:	f240 2371 	movw	r3, #625	; 0x271
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	e01e      	b.n	8004832 <ADC1_DMA_sort_lhb+0x18a>
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr_alt[p] = ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fb fea8 	bl	8000554 <__aeabi_ui2d>
 8004804:	a314      	add	r3, pc, #80	; (adr r3, 8004858 <ADC1_DMA_sort_lhb+0x1b0>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb ff1d 	bl	8000648 <__aeabi_dmul>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4914      	ldr	r1, [pc, #80]	; (8004864 <ADC1_DMA_sort_lhb+0x1bc>)
 8004814:	680c      	ldr	r4, [r1, #0]
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f7fc f9ed 	bl	8000bf8 <__aeabi_d2uiz>
 800481e:	4602      	mov	r2, r0
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004826:	330c      	adds	r3, #12
 8004828:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004838:	d9dc      	bls.n	80047f4 <ADC1_DMA_sort_lhb+0x14c>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	3301      	adds	r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004846:	4293      	cmp	r3, r2
 8004848:	d9a0      	bls.n	800478c <ADC1_DMA_sort_lhb+0xe4>
	ADC1_Current_buffer = 1;
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <ADC1_DMA_sort_lhb+0x1b8>)
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
};
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd90      	pop	{r4, r7, pc}
 8004858:	66666666 	.word	0x66666666
 800485c:	3f4a6666 	.word	0x3f4a6666
 8004860:	20007868 	.word	0x20007868
 8004864:	2000be58 	.word	0x2000be58

08004868 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
  if(ADC2_Current_buffer == 1)
 800486e:	4b66      	ldr	r3, [pc, #408]	; (8004a08 <ADC2_DMA_sort_uhb+0x1a0>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d15f      	bne.n	8004936 <ADC2_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e057      	b.n	800492c <ADC2_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <ADC2_DMA_sort_uhb+0x24>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d126      	bne.n	80048da <ADC2_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e01e      	b.n	80048d0 <ADC2_DMA_sort_uhb+0x68>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004892:	4b5e      	ldr	r3, [pc, #376]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fe59 	bl	8000554 <__aeabi_ui2d>
 80048a2:	a357      	add	r3, pc, #348	; (adr r3, 8004a00 <ADC2_DMA_sort_uhb+0x198>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fece 	bl	8000648 <__aeabi_dmul>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4956      	ldr	r1, [pc, #344]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 80048b2:	680c      	ldr	r4, [r1, #0]
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f7fc f99e 	bl	8000bf8 <__aeabi_d2uiz>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4423      	add	r3, r4
 80048c8:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3301      	adds	r3, #1
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80048d6:	d3dc      	bcc.n	8004892 <ADC2_DMA_sort_uhb+0x2a>
 80048d8:	e025      	b.n	8004926 <ADC2_DMA_sort_uhb+0xbe>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e01e      	b.n	800491e <ADC2_DMA_sort_uhb+0xb6>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80048e0:	4b4a      	ldr	r3, [pc, #296]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fb fe32 	bl	8000554 <__aeabi_ui2d>
 80048f0:	a343      	add	r3, pc, #268	; (adr r3, 8004a00 <ADC2_DMA_sort_uhb+0x198>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fea7 	bl	8000648 <__aeabi_dmul>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4943      	ldr	r1, [pc, #268]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 8004900:	680c      	ldr	r4, [r1, #0]
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	f7fc f977 	bl	8000bf8 <__aeabi_d2uiz>
 800490a:	4602      	mov	r2, r0
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004912:	330a      	adds	r3, #10
 8004914:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004924:	d3dc      	bcc.n	80048e0 <ADC2_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3301      	adds	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004932:	d9a3      	bls.n	800487c <ADC2_DMA_sort_uhb+0x14>
  			}
  		}
     }
   }

};
 8004934:	e05e      	b.n	80049f4 <ADC2_DMA_sort_uhb+0x18c>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	e057      	b.n	80049ec <ADC2_DMA_sort_uhb+0x184>
  		if(m==0 || (m%2==0))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <ADC2_DMA_sort_uhb+0xe4>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d126      	bne.n	800499a <ADC2_DMA_sort_uhb+0x132>
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800494c:	2300      	movs	r3, #0
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	e01e      	b.n	8004990 <ADC2_DMA_sort_uhb+0x128>
  				ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495c:	4618      	mov	r0, r3
 800495e:	f7fb fdf9 	bl	8000554 <__aeabi_ui2d>
 8004962:	a327      	add	r3, pc, #156	; (adr r3, 8004a00 <ADC2_DMA_sort_uhb+0x198>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fe6e 	bl	8000648 <__aeabi_dmul>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4926      	ldr	r1, [pc, #152]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 8004972:	680c      	ldr	r4, [r1, #0]
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	f7fc f93e 	bl	8000bf8 <__aeabi_d2uiz>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4423      	add	r3, r4
 8004988:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3301      	adds	r3, #1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004996:	d3dc      	bcc.n	8004952 <ADC2_DMA_sort_uhb+0xea>
 8004998:	e025      	b.n	80049e6 <ADC2_DMA_sort_uhb+0x17e>
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800499a:	2300      	movs	r3, #0
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	e01e      	b.n	80049de <ADC2_DMA_sort_uhb+0x176>
  				ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fdd2 	bl	8000554 <__aeabi_ui2d>
 80049b0:	a313      	add	r3, pc, #76	; (adr r3, 8004a00 <ADC2_DMA_sort_uhb+0x198>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fe47 	bl	8000648 <__aeabi_dmul>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4913      	ldr	r1, [pc, #76]	; (8004a0c <ADC2_DMA_sort_uhb+0x1a4>)
 80049c0:	680c      	ldr	r4, [r1, #0]
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7fc f917 	bl	8000bf8 <__aeabi_d2uiz>
 80049ca:	4602      	mov	r2, r0
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 80049d2:	330c      	adds	r3, #12
 80049d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80049e4:	d3dc      	bcc.n	80049a0 <ADC2_DMA_sort_uhb+0x138>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80049f2:	d9a3      	bls.n	800493c <ADC2_DMA_sort_uhb+0xd4>
};
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}
 80049fc:	f3af 8000 	nop.w
 8004a00:	66666666 	.word	0x66666666
 8004a04:	3f4a6666 	.word	0x3f4a6666
 8004a08:	20007869 	.word	0x20007869
 8004a0c:	2000be5c 	.word	0x2000be5c

08004a10 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8004a10:	b590      	push	{r4, r7, lr}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
  if(ADC2_Current_buffer == 1)
 8004a16:	4b6c      	ldr	r3, [pc, #432]	; (8004bc8 <ADC2_DMA_sort_lhb+0x1b8>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d166      	bne.n	8004aec <ADC2_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004a1e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e059      	b.n	8004ada <ADC2_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <ADC2_DMA_sort_lhb+0x26>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d127      	bne.n	8004a86 <ADC2_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004a36:	f240 2371 	movw	r3, #625	; 0x271
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	e01e      	b.n	8004a7c <ADC2_DMA_sort_lhb+0x6c>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004a3e:	4b63      	ldr	r3, [pc, #396]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fd83 	bl	8000554 <__aeabi_ui2d>
 8004a4e:	a35c      	add	r3, pc, #368	; (adr r3, 8004bc0 <ADC2_DMA_sort_lhb+0x1b0>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f7fb fdf8 	bl	8000648 <__aeabi_dmul>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	495b      	ldr	r1, [pc, #364]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004a5e:	680c      	ldr	r4, [r1, #0]
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7fc f8c8 	bl	8000bf8 <__aeabi_d2uiz>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4423      	add	r3, r4
 8004a74:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004a82:	d9dc      	bls.n	8004a3e <ADC2_DMA_sort_lhb+0x2e>
 8004a84:	e026      	b.n	8004ad4 <ADC2_DMA_sort_lhb+0xc4>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004a86:	f240 2371 	movw	r3, #625	; 0x271
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e01e      	b.n	8004acc <ADC2_DMA_sort_lhb+0xbc>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004a8e:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fb fd5b 	bl	8000554 <__aeabi_ui2d>
 8004a9e:	a348      	add	r3, pc, #288	; (adr r3, 8004bc0 <ADC2_DMA_sort_lhb+0x1b0>)
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f7fb fdd0 	bl	8000648 <__aeabi_dmul>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4947      	ldr	r1, [pc, #284]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004aae:	680c      	ldr	r4, [r1, #0]
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f7fc f8a0 	bl	8000bf8 <__aeabi_d2uiz>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004ac0:	330a      	adds	r3, #10
 8004ac2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004ad2:	d9dc      	bls.n	8004a8e <ADC2_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d9a0      	bls.n	8004a26 <ADC2_DMA_sort_lhb+0x16>
			}
		}
	}

	ADC2_Current_buffer = 2;
 8004ae4:	4b38      	ldr	r3, [pc, #224]	; (8004bc8 <ADC2_DMA_sort_lhb+0x1b8>)
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	701a      	strb	r2, [r3, #0]
  	 }

  	ADC2_Current_buffer = 1;
   }

};
 8004aea:	e065      	b.n	8004bb8 <ADC2_DMA_sort_lhb+0x1a8>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004aec:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	e059      	b.n	8004ba8 <ADC2_DMA_sort_lhb+0x198>
  		if(m==0||(m%2==0))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <ADC2_DMA_sort_lhb+0xf4>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d127      	bne.n	8004b54 <ADC2_DMA_sort_lhb+0x144>
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004b04:	f240 2371 	movw	r3, #625	; 0x271
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	e01e      	b.n	8004b4a <ADC2_DMA_sort_lhb+0x13a>
  				ADC2_DMA_sort_ptr->ADC2_IN3_bfr_alt[n] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004b0c:	4b2f      	ldr	r3, [pc, #188]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fb fd1c 	bl	8000554 <__aeabi_ui2d>
 8004b1c:	a328      	add	r3, pc, #160	; (adr r3, 8004bc0 <ADC2_DMA_sort_lhb+0x1b0>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fd91 	bl	8000648 <__aeabi_dmul>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4928      	ldr	r1, [pc, #160]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004b2c:	680c      	ldr	r4, [r1, #0]
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	f7fc f861 	bl	8000bf8 <__aeabi_d2uiz>
 8004b36:	4602      	mov	r2, r0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4423      	add	r3, r4
 8004b42:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3301      	adds	r3, #1
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004b50:	d9dc      	bls.n	8004b0c <ADC2_DMA_sort_lhb+0xfc>
 8004b52:	e026      	b.n	8004ba2 <ADC2_DMA_sort_lhb+0x192>
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004b54:	f240 2371 	movw	r3, #625	; 0x271
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	e01e      	b.n	8004b9a <ADC2_DMA_sort_lhb+0x18a>
  				ADC2_DMA_sort_ptr->ADC2_IN4_bfr_alt[p] = ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fb fcf4 	bl	8000554 <__aeabi_ui2d>
 8004b6c:	a314      	add	r3, pc, #80	; (adr r3, 8004bc0 <ADC2_DMA_sort_lhb+0x1b0>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb fd69 	bl	8000648 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4914      	ldr	r1, [pc, #80]	; (8004bcc <ADC2_DMA_sort_lhb+0x1bc>)
 8004b7c:	680c      	ldr	r4, [r1, #0]
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f7fc f839 	bl	8000bf8 <__aeabi_d2uiz>
 8004b86:	4602      	mov	r2, r0
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004b8e:	330c      	adds	r3, #12
 8004b90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004ba0:	d9dc      	bls.n	8004b5c <ADC2_DMA_sort_lhb+0x14c>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d9a0      	bls.n	8004af4 <ADC2_DMA_sort_lhb+0xe4>
  	ADC2_Current_buffer = 1;
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <ADC2_DMA_sort_lhb+0x1b8>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
};
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd90      	pop	{r4, r7, pc}
 8004bc0:	66666666 	.word	0x66666666
 8004bc4:	3f4a6666 	.word	0x3f4a6666
 8004bc8:	20007869 	.word	0x20007869
 8004bcc:	2000be5c 	.word	0x2000be5c

08004bd0 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
  if(ADC3_Current_buffer == 1)
 8004bd6:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <ADC3_DMA_sort_uhb+0x1a0>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d15f      	bne.n	8004c9e <ADC3_DMA_sort_uhb+0xce>
  {
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e057      	b.n	8004c94 <ADC3_DMA_sort_uhb+0xc4>
	{
		if(m==0 || (m%2==0))
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <ADC3_DMA_sort_uhb+0x24>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d126      	bne.n	8004c42 <ADC3_DMA_sort_uhb+0x72>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	e01e      	b.n	8004c38 <ADC3_DMA_sort_uhb+0x68>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004bfa:	4b5e      	ldr	r3, [pc, #376]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fca5 	bl	8000554 <__aeabi_ui2d>
 8004c0a:	a357      	add	r3, pc, #348	; (adr r3, 8004d68 <ADC3_DMA_sort_uhb+0x198>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fd1a 	bl	8000648 <__aeabi_dmul>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4956      	ldr	r1, [pc, #344]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004c1a:	680c      	ldr	r4, [r1, #0]
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f7fb ffea 	bl	8000bf8 <__aeabi_d2uiz>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4423      	add	r3, r4
 8004c30:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3301      	adds	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004c3e:	d3dc      	bcc.n	8004bfa <ADC3_DMA_sort_uhb+0x2a>
 8004c40:	e025      	b.n	8004c8e <ADC3_DMA_sort_uhb+0xbe>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e01e      	b.n	8004c86 <ADC3_DMA_sort_uhb+0xb6>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004c48:	4b4a      	ldr	r3, [pc, #296]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fb fc7e 	bl	8000554 <__aeabi_ui2d>
 8004c58:	a343      	add	r3, pc, #268	; (adr r3, 8004d68 <ADC3_DMA_sort_uhb+0x198>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fcf3 	bl	8000648 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4943      	ldr	r1, [pc, #268]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004c68:	680c      	ldr	r4, [r1, #0]
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f7fb ffc3 	bl	8000bf8 <__aeabi_d2uiz>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004c7a:	330a      	adds	r3, #10
 8004c7c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004c8c:	d3dc      	bcc.n	8004c48 <ADC3_DMA_sort_uhb+0x78>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	3301      	adds	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004c9a:	d9a3      	bls.n	8004be4 <ADC3_DMA_sort_uhb+0x14>
  			}
  		}
     }
   }

};
 8004c9c:	e05e      	b.n	8004d5c <ADC3_DMA_sort_uhb+0x18c>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	e057      	b.n	8004d54 <ADC3_DMA_sort_uhb+0x184>
  		if(m==0 || (m%2==0))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <ADC3_DMA_sort_uhb+0xe4>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d126      	bne.n	8004d02 <ADC3_DMA_sort_uhb+0x132>
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	e01e      	b.n	8004cf8 <ADC3_DMA_sort_uhb+0x128>
  				ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fb fc45 	bl	8000554 <__aeabi_ui2d>
 8004cca:	a327      	add	r3, pc, #156	; (adr r3, 8004d68 <ADC3_DMA_sort_uhb+0x198>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fcba 	bl	8000648 <__aeabi_dmul>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4926      	ldr	r1, [pc, #152]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004cda:	680c      	ldr	r4, [r1, #0]
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7fb ff8a 	bl	8000bf8 <__aeabi_d2uiz>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4423      	add	r3, r4
 8004cf0:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004cfe:	d3dc      	bcc.n	8004cba <ADC3_DMA_sort_uhb+0xea>
 8004d00:	e025      	b.n	8004d4e <ADC3_DMA_sort_uhb+0x17e>
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004d02:	2300      	movs	r3, #0
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	e01e      	b.n	8004d46 <ADC3_DMA_sort_uhb+0x176>
  				ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fc1e 	bl	8000554 <__aeabi_ui2d>
 8004d18:	a313      	add	r3, pc, #76	; (adr r3, 8004d68 <ADC3_DMA_sort_uhb+0x198>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f7fb fc93 	bl	8000648 <__aeabi_dmul>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4913      	ldr	r1, [pc, #76]	; (8004d74 <ADC3_DMA_sort_uhb+0x1a4>)
 8004d28:	680c      	ldr	r4, [r1, #0]
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f7fb ff63 	bl	8000bf8 <__aeabi_d2uiz>
 8004d32:	4602      	mov	r2, r0
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004d4c:	d3dc      	bcc.n	8004d08 <ADC3_DMA_sort_uhb+0x138>
  	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004d5a:	d9a3      	bls.n	8004ca4 <ADC3_DMA_sort_uhb+0xd4>
};
 8004d5c:	bf00      	nop
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	f3af 8000 	nop.w
 8004d68:	66666666 	.word	0x66666666
 8004d6c:	3f4a6666 	.word	0x3f4a6666
 8004d70:	2000786a 	.word	0x2000786a
 8004d74:	2000be60 	.word	0x2000be60

08004d78 <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
  if(ADC3_Current_buffer == 1)
 8004d7e:	4b6c      	ldr	r3, [pc, #432]	; (8004f30 <ADC3_DMA_sort_lhb+0x1b8>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d166      	bne.n	8004e54 <ADC3_DMA_sort_lhb+0xdc>
  {
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004d86:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e059      	b.n	8004e42 <ADC3_DMA_sort_lhb+0xca>
	{
		if(m==0||(m%2==0))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <ADC3_DMA_sort_lhb+0x26>
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d127      	bne.n	8004dee <ADC3_DMA_sort_lhb+0x76>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004d9e:	f240 2371 	movw	r3, #625	; 0x271
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	e01e      	b.n	8004de4 <ADC3_DMA_sort_lhb+0x6c>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004da6:	4b63      	ldr	r3, [pc, #396]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fbcf 	bl	8000554 <__aeabi_ui2d>
 8004db6:	a35c      	add	r3, pc, #368	; (adr r3, 8004f28 <ADC3_DMA_sort_lhb+0x1b0>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f7fb fc44 	bl	8000648 <__aeabi_dmul>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	495b      	ldr	r1, [pc, #364]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004dc6:	680c      	ldr	r4, [r1, #0]
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f7fb ff14 	bl	8000bf8 <__aeabi_d2uiz>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4423      	add	r3, r4
 8004ddc:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	3301      	adds	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004dea:	d9dc      	bls.n	8004da6 <ADC3_DMA_sort_lhb+0x2e>
 8004dec:	e026      	b.n	8004e3c <ADC3_DMA_sort_lhb+0xc4>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004dee:	f240 2371 	movw	r3, #625	; 0x271
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e01e      	b.n	8004e34 <ADC3_DMA_sort_lhb+0xbc>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004df6:	4b4f      	ldr	r3, [pc, #316]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb fba7 	bl	8000554 <__aeabi_ui2d>
 8004e06:	a348      	add	r3, pc, #288	; (adr r3, 8004f28 <ADC3_DMA_sort_lhb+0x1b0>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f7fb fc1c 	bl	8000648 <__aeabi_dmul>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4947      	ldr	r1, [pc, #284]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004e16:	680c      	ldr	r4, [r1, #0]
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f7fb feec 	bl	8000bf8 <__aeabi_d2uiz>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004e28:	330a      	adds	r3, #10
 8004e2a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004e3a:	d9dc      	bls.n	8004df6 <ADC3_DMA_sort_lhb+0x7e>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d9a0      	bls.n	8004d8e <ADC3_DMA_sort_lhb+0x16>
			}
		}
     }

	ADC3_Current_buffer = 2;
 8004e4c:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <ADC3_DMA_sort_lhb+0x1b8>)
 8004e4e:	2202      	movs	r2, #2
 8004e50:	701a      	strb	r2, [r3, #0]

  	ADC3_Current_buffer = 1;
  }


};
 8004e52:	e065      	b.n	8004f20 <ADC3_DMA_sort_lhb+0x1a8>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004e54:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	e059      	b.n	8004f10 <ADC3_DMA_sort_lhb+0x198>
  		if(m==0||(m%2==0))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <ADC3_DMA_sort_lhb+0xf4>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d127      	bne.n	8004ebc <ADC3_DMA_sort_lhb+0x144>
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004e6c:	f240 2371 	movw	r3, #625	; 0x271
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	e01e      	b.n	8004eb2 <ADC3_DMA_sort_lhb+0x13a>
  				ADC3_DMA_sort_ptr->ADC3_IN1_bfr_alt[n] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004e74:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb fb68 	bl	8000554 <__aeabi_ui2d>
 8004e84:	a328      	add	r3, pc, #160	; (adr r3, 8004f28 <ADC3_DMA_sort_lhb+0x1b0>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb fbdd 	bl	8000648 <__aeabi_dmul>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4928      	ldr	r1, [pc, #160]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004e94:	680c      	ldr	r4, [r1, #0]
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f7fb fead 	bl	8000bf8 <__aeabi_d2uiz>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f603 63a6 	addw	r3, r3, #3750	; 0xea6
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4423      	add	r3, r4
 8004eaa:	605a      	str	r2, [r3, #4]
  			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004eb8:	d9dc      	bls.n	8004e74 <ADC3_DMA_sort_lhb+0xfc>
 8004eba:	e026      	b.n	8004f0a <ADC3_DMA_sort_lhb+0x192>
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004ebc:	f240 2371 	movw	r3, #625	; 0x271
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	e01e      	b.n	8004f02 <ADC3_DMA_sort_lhb+0x18a>
  				ADC3_DMA_sort_ptr->ADC3_IN2_bfr_alt[p] = ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m] * LEVEL_VALUE_SCALAR;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fb fb40 	bl	8000554 <__aeabi_ui2d>
 8004ed4:	a314      	add	r3, pc, #80	; (adr r3, 8004f28 <ADC3_DMA_sort_lhb+0x1b0>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb fbb5 	bl	8000648 <__aeabi_dmul>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4914      	ldr	r1, [pc, #80]	; (8004f34 <ADC3_DMA_sort_lhb+0x1bc>)
 8004ee4:	680c      	ldr	r4, [r1, #0]
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f7fb fe85 	bl	8000bf8 <__aeabi_d2uiz>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
  			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004f08:	d9dc      	bls.n	8004ec4 <ADC3_DMA_sort_lhb+0x14c>
  	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d9a0      	bls.n	8004e5c <ADC3_DMA_sort_lhb+0xe4>
  	ADC3_Current_buffer = 1;
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <ADC3_DMA_sort_lhb+0x1b8>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
};
 8004f20:	bf00      	nop
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}
 8004f28:	66666666 	.word	0x66666666
 8004f2c:	3f4a6666 	.word	0x3f4a6666
 8004f30:	2000786a 	.word	0x2000786a
 8004f34:	2000be60 	.word	0x2000be60

08004f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f3e:	f002 fb56 	bl	80075ee <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8004f42:	f7fd f9c3 	bl	80022cc <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 8004f46:	f7fd f9e1 	bl	800230c <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 8004f4a:	48b2      	ldr	r0, [pc, #712]	; (8005214 <main+0x2dc>)
 8004f4c:	f7fc fde6 	bl	8001b1c <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8004f50:	f7fd fa06 	bl	8002360 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8004f54:	f7fd fa24 	bl	80023a0 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 8004f58:	48af      	ldr	r0, [pc, #700]	; (8005218 <main+0x2e0>)
 8004f5a:	f7fc fe83 	bl	8001c64 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 8004f5e:	f7fd fa49 	bl	80023f4 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8004f62:	f7fd fa67 	bl	8002434 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 8004f66:	48ad      	ldr	r0, [pc, #692]	; (800521c <main+0x2e4>)
 8004f68:	f7fc ff20 	bl	8001dac <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 8004f6c:	f7fd fa8c 	bl	8002488 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8004f70:	f7fd faaa 	bl	80024c8 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8004f74:	48aa      	ldr	r0, [pc, #680]	; (8005220 <main+0x2e8>)
 8004f76:	f7fc ffbd 	bl	8001ef4 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 8004f7a:	f7fd facf 	bl	800251c <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8004f7e:	f7fd faed 	bl	800255c <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8004f82:	48a8      	ldr	r0, [pc, #672]	; (8005224 <main+0x2ec>)
 8004f84:	f7fd f85a 	bl	800203c <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 8004f88:	f7fd fb12 	bl	80025b0 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 8004f8c:	f7fd fb30 	bl	80025f0 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8004f90:	48a5      	ldr	r0, [pc, #660]	; (8005228 <main+0x2f0>)
 8004f92:	f7fd f8f7 	bl	8002184 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f96:	f000 facf 	bl	8005538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f9a:	f000 ffd5 	bl	8005f48 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f9e:	f000 ff4d 	bl	8005e3c <MX_DMA_Init>
  MX_ADC1_Init();
 8004fa2:	f000 fb13 	bl	80055cc <MX_ADC1_Init>
  MX_ADC2_Init();
 8004fa6:	f000 fb9b 	bl	80056e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004faa:	f000 fc11 	bl	80057d0 <MX_ADC3_Init>
  MX_FMAC_Init();
 8004fae:	f000 fccd 	bl	800594c <MX_FMAC_Init>
  MX_TIM6_Init();
 8004fb2:	f000 fd9f 	bl	8005af4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8004fb6:	f000 fdd3 	bl	8005b60 <MX_TIM7_Init>
  MX_TIM20_Init();
 8004fba:	f000 fe07 	bl	8005bcc <MX_TIM20_Init>
  MX_DAC1_Init();
 8004fbe:	f000 fc7f 	bl	80058c0 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8004fc2:	f000 fe57 	bl	8005c74 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8004fc6:	f000 feed 	bl	8005da4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8004fca:	f000 fe9f 	bl	8005d0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004fce:	f000 fcd1 	bl	8005974 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004fd2:	f000 fd0f 	bl	80059f4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8004fd6:	f000 fd4d 	bl	8005a74 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  // Enable the EXTI line 2 interrupt
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);  // Set priority
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2102      	movs	r1, #2
 8004fde:	2008      	movs	r0, #8
 8004fe0:	f003 ff77 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn); // Enable the interrupt in NVIC (Interrupt is triggered by pressing the push button)
 8004fe4:	2008      	movs	r0, #8
 8004fe6:	f003 ff8e 	bl	8008f06 <HAL_NVIC_EnableIRQ>

  EXT12_IRQHandler(); // When the push button is pressed - starts all ADCs with DMA, starts the sorting algorithm for each ADC, calculates the offset from the baseline and the standard deviation from the baseline data (for all channels). Finally, it toggles the status LED to indicate that acquisition has started
 8004fea:	f001 f829 	bl	8006040 <EXT12_IRQHandler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (Buffer_ADC1_Ready == 1) // Checks if the flag for the channel buffer fills is set for ADC1
 8004fee:	4b8f      	ldr	r3, [pc, #572]	; (800522c <main+0x2f4>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	f040 80aa 	bne.w	800514e <main+0x216>
	{
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8004ffa:	f7fd f999 	bl	8002330 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 8004ffe:	4885      	ldr	r0, [pc, #532]	; (8005214 <main+0x2dc>)
 8005000:	f7fc fdbe 	bl	8001b80 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e017      	b.n	800503a <main+0x102>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtracts the stored offset
 800500a:	4a82      	ldr	r2, [pc, #520]	; (8005214 <main+0x2dc>)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3308      	adds	r3, #8
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	ed93 7a00 	vldr	s14, [r3]
 800501a:	4b85      	ldr	r3, [pc, #532]	; (8005230 <main+0x2f8>)
 800501c:	edd3 7a00 	vldr	s15, [r3]
 8005020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005024:	4a7b      	ldr	r2, [pc, #492]	; (8005214 <main+0x2dc>)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	3308      	adds	r3, #8
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3301      	adds	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2ba4      	cmp	r3, #164	; 0xa4
 800503e:	d9e4      	bls.n	800500a <main+0xd2>
      #ifdef MONITOR_CHANNEL_1_LEFT
	  ADC1_IN1_DAC_Update(&DAC1_ADC1_IN1); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8005040:	4b7c      	ldr	r3, [pc, #496]	; (8005234 <main+0x2fc>)
 8005042:	edd3 7a00 	vldr	s15, [r3]
 8005046:	eeb0 0a67 	vmov.f32	s0, s15
 800504a:	487b      	ldr	r0, [pc, #492]	; (8005238 <main+0x300>)
 800504c:	f7fe fdc0 	bl	8003bd0 <ADC1_IN1_TKEO>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	4b79      	ldr	r3, [pc, #484]	; (800523c <main+0x304>)
 8005056:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 8005058:	4b78      	ldr	r3, [pc, #480]	; (800523c <main+0x304>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d11e      	bne.n	800509e <main+0x166>
      {
      /* Slope sign change */
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 8005060:	4b73      	ldr	r3, [pc, #460]	; (8005230 <main+0x2f8>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800506a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800506e:	eeb0 0a67 	vmov.f32	s0, s15
 8005072:	4873      	ldr	r0, [pc, #460]	; (8005240 <main+0x308>)
 8005074:	f7fd fdce 	bl	8002c14 <ADC1_IN1_SSC>
 8005078:	eef0 7a40 	vmov.f32	s15, s0
 800507c:	4b71      	ldr	r3, [pc, #452]	; (8005244 <main+0x30c>)
 800507e:	edc3 7a00 	vstr	s15, [r3]
      /*Computes the autocorrelation values and the autoregression coefficients and returns the latter*/
      ADC1_IN1_autocorr_calc();
 8005082:	f7fb ffa7 	bl	8000fd4 <ADC1_IN1_autocorr_calc>
      AR_1 = ADC1_IN1_autoreg_coeffs();
 8005086:	f7fb ffdb 	bl	8001040 <ADC1_IN1_autoreg_coeffs>
 800508a:	4603      	mov	r3, r0
 800508c:	4a6e      	ldr	r2, [pc, #440]	; (8005248 <main+0x310>)
 800508e:	6013      	str	r3, [r2, #0]
      /* Computes the Short Time Fourier Transform from the moving average buffer */
      STFT_1 = ADC1_IN1_STFT_Update(&STFT_par_ADC1_IN1, &STFT_ADC1_IN1);
 8005090:	496e      	ldr	r1, [pc, #440]	; (800524c <main+0x314>)
 8005092:	486f      	ldr	r0, [pc, #444]	; (8005250 <main+0x318>)
 8005094:	f7fe f858 	bl	8003148 <ADC1_IN1_STFT_Update>
 8005098:	4603      	mov	r3, r0
 800509a:	4a6e      	ldr	r2, [pc, #440]	; (8005254 <main+0x31c>)
 800509c:	6013      	str	r3, [r2, #0]
      }


	  update_ADC1_IN2_FO_biquad_filter();
 800509e:	f7fd f991 	bl	80023c4 <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 80050a2:	485d      	ldr	r0, [pc, #372]	; (8005218 <main+0x2e0>)
 80050a4:	f7fc fe10 	bl	8001cc8 <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e017      	b.n	80050de <main+0x1a6>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 80050ae:	4a5a      	ldr	r2, [pc, #360]	; (8005218 <main+0x2e0>)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	3308      	adds	r3, #8
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	3304      	adds	r3, #4
 80050ba:	ed93 7a00 	vldr	s14, [r3]
 80050be:	4b66      	ldr	r3, [pc, #408]	; (8005258 <main+0x320>)
 80050c0:	edd3 7a00 	vldr	s15, [r3]
 80050c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c8:	4a53      	ldr	r2, [pc, #332]	; (8005218 <main+0x2e0>)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3308      	adds	r3, #8
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	3304      	adds	r3, #4
 80050d4:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3301      	adds	r3, #1
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2ba4      	cmp	r3, #164	; 0xa4
 80050e2:	d9e4      	bls.n	80050ae <main+0x176>
	  }
      #ifdef MONITOR_CHANNEL_4_RIGHT
	  ADC1_IN2_DAC_Update(&DAC1_ADC1_IN2);
 80050e4:	485d      	ldr	r0, [pc, #372]	; (800525c <main+0x324>)
 80050e6:	f7fc fccb 	bl	8001a80 <ADC1_IN2_DAC_Update>
      #endif


	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 80050ea:	4b5d      	ldr	r3, [pc, #372]	; (8005260 <main+0x328>)
 80050ec:	edd3 7a00 	vldr	s15, [r3]
 80050f0:	eeb0 0a67 	vmov.f32	s0, s15
 80050f4:	485b      	ldr	r0, [pc, #364]	; (8005264 <main+0x32c>)
 80050f6:	f7fe fe2f 	bl	8003d58 <ADC1_IN2_TKEO>
 80050fa:	4603      	mov	r3, r0
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b5a      	ldr	r3, [pc, #360]	; (8005268 <main+0x330>)
 8005100:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 8005102:	4b59      	ldr	r3, [pc, #356]	; (8005268 <main+0x330>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d11e      	bne.n	8005148 <main+0x210>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 800510a:	4b53      	ldr	r3, [pc, #332]	; (8005258 <main+0x320>)
 800510c:	edd3 7a00 	vldr	s15, [r3]
 8005110:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005118:	eeb0 0a67 	vmov.f32	s0, s15
 800511c:	4853      	ldr	r0, [pc, #332]	; (800526c <main+0x334>)
 800511e:	f7fd fde8 	bl	8002cf2 <ADC1_IN2_SSC>
 8005122:	eef0 7a40 	vmov.f32	s15, s0
 8005126:	4b52      	ldr	r3, [pc, #328]	; (8005270 <main+0x338>)
 8005128:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_IN2_autocorr_calc();
 800512c:	f7fc f828 	bl	8001180 <ADC1_IN2_autocorr_calc>
	  AR_2 = ADC1_IN2_autoreg_coeffs();
 8005130:	f7fc f85c 	bl	80011ec <ADC1_IN2_autoreg_coeffs>
 8005134:	4603      	mov	r3, r0
 8005136:	4a4f      	ldr	r2, [pc, #316]	; (8005274 <main+0x33c>)
 8005138:	6013      	str	r3, [r2, #0]
	  STFT_2 = ADC1_IN2_STFT_Update(&STFT_par_ADC1_IN2, &STFT_ADC1_IN2);
 800513a:	494f      	ldr	r1, [pc, #316]	; (8005278 <main+0x340>)
 800513c:	484f      	ldr	r0, [pc, #316]	; (800527c <main+0x344>)
 800513e:	f7fe f8e7 	bl	8003310 <ADC1_IN2_STFT_Update>
 8005142:	4603      	mov	r3, r0
 8005144:	4a4e      	ldr	r2, [pc, #312]	; (8005280 <main+0x348>)
 8005146:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC1_Ready = 0; // After processing is done the flag is cleared
 8005148:	4b38      	ldr	r3, [pc, #224]	; (800522c <main+0x2f4>)
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]

	}

	if (Buffer_ADC2_Ready == 1)
 800514e:	4b4d      	ldr	r3, [pc, #308]	; (8005284 <main+0x34c>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	f040 80fa 	bne.w	800534e <main+0x416>
	{
	  update_ADC2_IN3_FO_biquad_filter();
 800515a:	f7fd f97d 	bl	8002458 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 800515e:	482f      	ldr	r0, [pc, #188]	; (800521c <main+0x2e4>)
 8005160:	f7fc fe56 	bl	8001e10 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e017      	b.n	800519a <main+0x262>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 800516a:	4a2c      	ldr	r2, [pc, #176]	; (800521c <main+0x2e4>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3308      	adds	r3, #8
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	3304      	adds	r3, #4
 8005176:	ed93 7a00 	vldr	s14, [r3]
 800517a:	4b43      	ldr	r3, [pc, #268]	; (8005288 <main+0x350>)
 800517c:	edd3 7a00 	vldr	s15, [r3]
 8005180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005184:	4a25      	ldr	r2, [pc, #148]	; (800521c <main+0x2e4>)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3308      	adds	r3, #8
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	3304      	adds	r3, #4
 8005190:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2ba4      	cmp	r3, #164	; 0xa4
 800519e:	d9e4      	bls.n	800516a <main+0x232>
	  }

      #ifdef MONITOR_CHANNEL_2_LEFT
	  ADC2_IN3_DAC_Update(&DAC1_ADC2_IN3);
 80051a0:	483a      	ldr	r0, [pc, #232]	; (800528c <main+0x354>)
 80051a2:	f7fc fc1d 	bl	80019e0 <ADC2_IN3_DAC_Update>
      #endif

	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 80051a6:	4b3a      	ldr	r3, [pc, #232]	; (8005290 <main+0x358>)
 80051a8:	edd3 7a00 	vldr	s15, [r3]
 80051ac:	eeb0 0a67 	vmov.f32	s0, s15
 80051b0:	4838      	ldr	r0, [pc, #224]	; (8005294 <main+0x35c>)
 80051b2:	f7fe fe95 	bl	8003ee0 <ADC2_IN3_TKEO>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b37      	ldr	r3, [pc, #220]	; (8005298 <main+0x360>)
 80051bc:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 80051be:	4b36      	ldr	r3, [pc, #216]	; (8005298 <main+0x360>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d11e      	bne.n	8005204 <main+0x2cc>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 80051c6:	4b30      	ldr	r3, [pc, #192]	; (8005288 <main+0x350>)
 80051c8:	edd3 7a00 	vldr	s15, [r3]
 80051cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d4:	eeb0 0a67 	vmov.f32	s0, s15
 80051d8:	4830      	ldr	r0, [pc, #192]	; (800529c <main+0x364>)
 80051da:	f7fd fdf9 	bl	8002dd0 <ADC2_IN3_SSC>
 80051de:	eef0 7a40 	vmov.f32	s15, s0
 80051e2:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <main+0x368>)
 80051e4:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN3_autocorr_calc();
 80051e8:	f7fc f8a0 	bl	800132c <ADC2_IN3_autocorr_calc>
	  AR_3 = ADC2_IN3_autoreg_coeffs();
 80051ec:	f7fc f8d4 	bl	8001398 <ADC2_IN3_autoreg_coeffs>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <main+0x36c>)
 80051f4:	6013      	str	r3, [r2, #0]
	  STFT_3 = ADC2_IN3_STFT_Update(&STFT_par_ADC2_IN3, &STFT_ADC2_IN3);
 80051f6:	492c      	ldr	r1, [pc, #176]	; (80052a8 <main+0x370>)
 80051f8:	482c      	ldr	r0, [pc, #176]	; (80052ac <main+0x374>)
 80051fa:	f7fe f969 	bl	80034d0 <ADC2_IN3_STFT_Update>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <main+0x378>)
 8005202:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 8005204:	f7fd f972 	bl	80024ec <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8005208:	4805      	ldr	r0, [pc, #20]	; (8005220 <main+0x2e8>)
 800520a:	f7fc fea5 	bl	8001f58 <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	e067      	b.n	80052e4 <main+0x3ac>
 8005214:	2000be64 	.word	0x2000be64
 8005218:	2000c3b0 	.word	0x2000c3b0
 800521c:	2000c8fc 	.word	0x2000c8fc
 8005220:	2000ce48 	.word	0x2000ce48
 8005224:	2000d394 	.word	0x2000d394
 8005228:	2000d8e0 	.word	0x2000d8e0
 800522c:	2001b6d0 	.word	0x2001b6d0
 8005230:	2001b648 	.word	0x2001b648
 8005234:	2001b668 	.word	0x2001b668
 8005238:	20011dbc 	.word	0x20011dbc
 800523c:	2001b680 	.word	0x2001b680
 8005240:	20013d84 	.word	0x20013d84
 8005244:	2001b688 	.word	0x2001b688
 8005248:	2001b6a0 	.word	0x2001b6a0
 800524c:	20015d4c 	.word	0x20015d4c
 8005250:	200187ac 	.word	0x200187ac
 8005254:	2001b6b8 	.word	0x2001b6b8
 8005258:	2001b64c 	.word	0x2001b64c
 800525c:	20017d14 	.word	0x20017d14
 8005260:	2001b66c 	.word	0x2001b66c
 8005264:	20012308 	.word	0x20012308
 8005268:	2001b681 	.word	0x2001b681
 800526c:	200142d0 	.word	0x200142d0
 8005270:	2001b68c 	.word	0x2001b68c
 8005274:	2001b6a4 	.word	0x2001b6a4
 8005278:	20016298 	.word	0x20016298
 800527c:	20018f70 	.word	0x20018f70
 8005280:	2001b6bc 	.word	0x2001b6bc
 8005284:	2001b6d1 	.word	0x2001b6d1
 8005288:	2001b650 	.word	0x2001b650
 800528c:	20018260 	.word	0x20018260
 8005290:	2001b670 	.word	0x2001b670
 8005294:	20012854 	.word	0x20012854
 8005298:	2001b682 	.word	0x2001b682
 800529c:	2001481c 	.word	0x2001481c
 80052a0:	2001b690 	.word	0x2001b690
 80052a4:	2001b6a8 	.word	0x2001b6a8
 80052a8:	200167e4 	.word	0x200167e4
 80052ac:	20019734 	.word	0x20019734
 80052b0:	2001b6c0 	.word	0x2001b6c0
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 80052b4:	4a7d      	ldr	r2, [pc, #500]	; (80054ac <main+0x574>)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	3308      	adds	r3, #8
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	3304      	adds	r3, #4
 80052c0:	ed93 7a00 	vldr	s14, [r3]
 80052c4:	4b7a      	ldr	r3, [pc, #488]	; (80054b0 <main+0x578>)
 80052c6:	edd3 7a00 	vldr	s15, [r3]
 80052ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ce:	4a77      	ldr	r2, [pc, #476]	; (80054ac <main+0x574>)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	3308      	adds	r3, #8
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	3304      	adds	r3, #4
 80052da:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2ba4      	cmp	r3, #164	; 0xa4
 80052e8:	d9e4      	bls.n	80052b4 <main+0x37c>

      #ifdef MONITOR_CHANNEL_5_RIGHT
	  ADC2_IN4_DAC_Update(&DAC1_ADC2_IN4);
      #endif

	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 80052ea:	4b72      	ldr	r3, [pc, #456]	; (80054b4 <main+0x57c>)
 80052ec:	edd3 7a00 	vldr	s15, [r3]
 80052f0:	eeb0 0a67 	vmov.f32	s0, s15
 80052f4:	4870      	ldr	r0, [pc, #448]	; (80054b8 <main+0x580>)
 80052f6:	f7fe feb7 	bl	8004068 <ADC2_IN4_TKEO>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <main+0x584>)
 8005300:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 8005302:	4b6e      	ldr	r3, [pc, #440]	; (80054bc <main+0x584>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d11e      	bne.n	8005348 <main+0x410>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 800530a:	4b69      	ldr	r3, [pc, #420]	; (80054b0 <main+0x578>)
 800530c:	edd3 7a00 	vldr	s15, [r3]
 8005310:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005318:	eeb0 0a67 	vmov.f32	s0, s15
 800531c:	4868      	ldr	r0, [pc, #416]	; (80054c0 <main+0x588>)
 800531e:	f7fd fdc6 	bl	8002eae <ADC2_IN4_SSC>
 8005322:	eef0 7a40 	vmov.f32	s15, s0
 8005326:	4b67      	ldr	r3, [pc, #412]	; (80054c4 <main+0x58c>)
 8005328:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN4_autocorr_calc();
 800532c:	f7fc f8d4 	bl	80014d8 <ADC2_IN4_autocorr_calc>
	  AR_4 = ADC2_IN4_autoreg_coeffs();
 8005330:	f7fc f908 	bl	8001544 <ADC2_IN4_autoreg_coeffs>
 8005334:	4603      	mov	r3, r0
 8005336:	4a64      	ldr	r2, [pc, #400]	; (80054c8 <main+0x590>)
 8005338:	6013      	str	r3, [r2, #0]
	  STFT_4 = ADC2_IN4_STFT_Update(&STFT_par_ADC2_IN4, &STFT_ADC2_IN4);
 800533a:	4964      	ldr	r1, [pc, #400]	; (80054cc <main+0x594>)
 800533c:	4864      	ldr	r0, [pc, #400]	; (80054d0 <main+0x598>)
 800533e:	f7fe f9a7 	bl	8003690 <ADC2_IN4_STFT_Update>
 8005342:	4603      	mov	r3, r0
 8005344:	4a63      	ldr	r2, [pc, #396]	; (80054d4 <main+0x59c>)
 8005346:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC2_Ready = 0;
 8005348:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <main+0x5a0>)
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
	}

	if (Buffer_ADC3_Ready == 1)
 800534e:	4b63      	ldr	r3, [pc, #396]	; (80054dc <main+0x5a4>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	f47f ae4a 	bne.w	8004fee <main+0xb6>
	{
	  update_ADC3_IN1_FO_biquad_filter();
 800535a:	f7fd f911 	bl	8002580 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 800535e:	4860      	ldr	r0, [pc, #384]	; (80054e0 <main+0x5a8>)
 8005360:	f7fc fe9e 	bl	80020a0 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8005364:	2300      	movs	r3, #0
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	e017      	b.n	800539a <main+0x462>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 800536a:	4a5d      	ldr	r2, [pc, #372]	; (80054e0 <main+0x5a8>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3308      	adds	r3, #8
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	3304      	adds	r3, #4
 8005376:	ed93 7a00 	vldr	s14, [r3]
 800537a:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <main+0x5ac>)
 800537c:	edd3 7a00 	vldr	s15, [r3]
 8005380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005384:	4a56      	ldr	r2, [pc, #344]	; (80054e0 <main+0x5a8>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3308      	adds	r3, #8
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	3304      	adds	r3, #4
 8005390:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3301      	adds	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2ba4      	cmp	r3, #164	; 0xa4
 800539e:	d9e4      	bls.n	800536a <main+0x432>
      #ifdef MONITOR_CHANNEL_3_LEFT
	  ADC3_IN1_DAC_Update(&DAC1_ADC3_IN1);
      #endif


	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 80053a0:	4b51      	ldr	r3, [pc, #324]	; (80054e8 <main+0x5b0>)
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	eeb0 0a67 	vmov.f32	s0, s15
 80053aa:	4850      	ldr	r0, [pc, #320]	; (80054ec <main+0x5b4>)
 80053ac:	f7fe ff20 	bl	80041f0 <ADC3_IN1_TKEO>
 80053b0:	4603      	mov	r3, r0
 80053b2:	461a      	mov	r2, r3
 80053b4:	4b4e      	ldr	r3, [pc, #312]	; (80054f0 <main+0x5b8>)
 80053b6:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 80053b8:	4b4d      	ldr	r3, [pc, #308]	; (80054f0 <main+0x5b8>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d11e      	bne.n	80053fe <main+0x4c6>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 80053c0:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <main+0x5ac>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ce:	eeb0 0a67 	vmov.f32	s0, s15
 80053d2:	4848      	ldr	r0, [pc, #288]	; (80054f4 <main+0x5bc>)
 80053d4:	f7fd fdda 	bl	8002f8c <ADC3_IN1_SSC>
 80053d8:	eef0 7a40 	vmov.f32	s15, s0
 80053dc:	4b46      	ldr	r3, [pc, #280]	; (80054f8 <main+0x5c0>)
 80053de:	edc3 7a00 	vstr	s15, [r3]
	  ADC3_IN1_autocorr_calc();
 80053e2:	f7fc f94f 	bl	8001684 <ADC3_IN1_autocorr_calc>
	  AR_5 = ADC3_IN1_autoreg_coeffs();
 80053e6:	f7fc f983 	bl	80016f0 <ADC3_IN1_autoreg_coeffs>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a43      	ldr	r2, [pc, #268]	; (80054fc <main+0x5c4>)
 80053ee:	6013      	str	r3, [r2, #0]
	  STFT_5 = ADC3_IN1_STFT_Update(&STFT_par_ADC3_IN1, &STFT_ADC3_IN1);
 80053f0:	4943      	ldr	r1, [pc, #268]	; (8005500 <main+0x5c8>)
 80053f2:	4844      	ldr	r0, [pc, #272]	; (8005504 <main+0x5cc>)
 80053f4:	f7fe fa2c 	bl	8003850 <ADC3_IN1_STFT_Update>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4a43      	ldr	r2, [pc, #268]	; (8005508 <main+0x5d0>)
 80053fc:	6013      	str	r3, [r2, #0]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 80053fe:	f7fd f909 	bl	8002614 <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 8005402:	4842      	ldr	r0, [pc, #264]	; (800550c <main+0x5d4>)
 8005404:	f7fc fef0 	bl	80021e8 <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8005408:	2300      	movs	r3, #0
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	e017      	b.n	800543e <main+0x506>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtracts the stored offset
 800540e:	4a3f      	ldr	r2, [pc, #252]	; (800550c <main+0x5d4>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	ed93 7a00 	vldr	s14, [r3]
 800541e:	4b3c      	ldr	r3, [pc, #240]	; (8005510 <main+0x5d8>)
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005428:	4a38      	ldr	r2, [pc, #224]	; (800550c <main+0x5d4>)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	3308      	adds	r3, #8
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	3304      	adds	r3, #4
 8005434:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2ba4      	cmp	r3, #164	; 0xa4
 8005442:	d9e4      	bls.n	800540e <main+0x4d6>
      #ifdef MONITOR_CHANNEL_6_RIGHT
	  ADC3_IN2_DAC_Update(&DAC1_ADC3_IN2); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8005444:	4b33      	ldr	r3, [pc, #204]	; (8005514 <main+0x5dc>)
 8005446:	edd3 7a00 	vldr	s15, [r3]
 800544a:	eeb0 0a67 	vmov.f32	s0, s15
 800544e:	4832      	ldr	r0, [pc, #200]	; (8005518 <main+0x5e0>)
 8005450:	f7fe ff92 	bl	8004378 <ADC3_IN2_TKEO>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	4b30      	ldr	r3, [pc, #192]	; (800551c <main+0x5e4>)
 800545a:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 800545c:	4b2f      	ldr	r3, [pc, #188]	; (800551c <main+0x5e4>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d11e      	bne.n	80054a2 <main+0x56a>
	  {
	  /* Slope sign change */
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 8005464:	4b2a      	ldr	r3, [pc, #168]	; (8005510 <main+0x5d8>)
 8005466:	edd3 7a00 	vldr	s15, [r3]
 800546a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800546e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005472:	eeb0 0a67 	vmov.f32	s0, s15
 8005476:	482a      	ldr	r0, [pc, #168]	; (8005520 <main+0x5e8>)
 8005478:	f7fd fdf7 	bl	800306a <ADC3_IN2_SSC>
 800547c:	eef0 7a40 	vmov.f32	s15, s0
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <main+0x5ec>)
 8005482:	edc3 7a00 	vstr	s15, [r3]
	  /* Computes the autocorrelation values and the autoregression coefficients and returns the latter */
	  ADC3_IN2_autocorr_calc();
 8005486:	f7fc f9d5 	bl	8001834 <ADC3_IN2_autocorr_calc>
	  AR_6 = ADC3_IN2_autoreg_coeffs();
 800548a:	f7fc fa09 	bl	80018a0 <ADC3_IN2_autoreg_coeffs>
 800548e:	4603      	mov	r3, r0
 8005490:	4a25      	ldr	r2, [pc, #148]	; (8005528 <main+0x5f0>)
 8005492:	6013      	str	r3, [r2, #0]
	  /* Computes the Short Time Fourier Transform from the moving average buffer */
	  STFT_6 = ADC3_IN2_STFT_Update(&STFT_par_ADC3_IN2, &STFT_ADC3_IN2);
 8005494:	4925      	ldr	r1, [pc, #148]	; (800552c <main+0x5f4>)
 8005496:	4826      	ldr	r0, [pc, #152]	; (8005530 <main+0x5f8>)
 8005498:	f7fe faba 	bl	8003a10 <ADC3_IN2_STFT_Update>
 800549c:	4603      	mov	r3, r0
 800549e:	4a25      	ldr	r2, [pc, #148]	; (8005534 <main+0x5fc>)
 80054a0:	6013      	str	r3, [r2, #0]
	  }

	  Buffer_ADC3_Ready = 0;
 80054a2:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <main+0x5a4>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
	if (Buffer_ADC1_Ready == 1) // Checks if the flag for the channel buffer fills is set for ADC1
 80054a8:	e5a1      	b.n	8004fee <main+0xb6>
 80054aa:	bf00      	nop
 80054ac:	2000ce48 	.word	0x2000ce48
 80054b0:	2001b654 	.word	0x2001b654
 80054b4:	2001b674 	.word	0x2001b674
 80054b8:	20012da0 	.word	0x20012da0
 80054bc:	2001b683 	.word	0x2001b683
 80054c0:	20014d68 	.word	0x20014d68
 80054c4:	2001b694 	.word	0x2001b694
 80054c8:	2001b6ac 	.word	0x2001b6ac
 80054cc:	20016d30 	.word	0x20016d30
 80054d0:	20019ef8 	.word	0x20019ef8
 80054d4:	2001b6c4 	.word	0x2001b6c4
 80054d8:	2001b6d1 	.word	0x2001b6d1
 80054dc:	2001b6d2 	.word	0x2001b6d2
 80054e0:	2000d394 	.word	0x2000d394
 80054e4:	2001b658 	.word	0x2001b658
 80054e8:	2001b678 	.word	0x2001b678
 80054ec:	200132ec 	.word	0x200132ec
 80054f0:	2001b684 	.word	0x2001b684
 80054f4:	200152b4 	.word	0x200152b4
 80054f8:	2001b698 	.word	0x2001b698
 80054fc:	2001b6b0 	.word	0x2001b6b0
 8005500:	2001727c 	.word	0x2001727c
 8005504:	2001a6bc 	.word	0x2001a6bc
 8005508:	2001b6c8 	.word	0x2001b6c8
 800550c:	2000d8e0 	.word	0x2000d8e0
 8005510:	2001b65c 	.word	0x2001b65c
 8005514:	2001b67c 	.word	0x2001b67c
 8005518:	20013838 	.word	0x20013838
 800551c:	2001b685 	.word	0x2001b685
 8005520:	20015800 	.word	0x20015800
 8005524:	2001b69c 	.word	0x2001b69c
 8005528:	2001b6b4 	.word	0x2001b6b4
 800552c:	200177c8 	.word	0x200177c8
 8005530:	2001ae80 	.word	0x2001ae80
 8005534:	2001b6cc 	.word	0x2001b6cc

08005538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b094      	sub	sp, #80	; 0x50
 800553c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800553e:	f107 0318 	add.w	r3, r7, #24
 8005542:	2238      	movs	r2, #56	; 0x38
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f009 f977 	bl	800e83a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	60da      	str	r2, [r3, #12]
 8005558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800555a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800555e:	f004 fe45 	bl	800a1ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005562:	2301      	movs	r3, #1
 8005564:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800556a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800556c:	2302      	movs	r3, #2
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005570:	2303      	movs	r3, #3
 8005572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005574:	2301      	movs	r3, #1
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005578:	2308      	movs	r3, #8
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800557c:	2302      	movs	r3, #2
 800557e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005580:	2302      	movs	r3, #2
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005584:	2302      	movs	r3, #2
 8005586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005588:	f107 0318 	add.w	r3, r7, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f004 fee1 	bl	800a354 <HAL_RCC_OscConfig>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8005598:	f001 f8aa 	bl	80066f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800559c:	230f      	movs	r3, #15
 800559e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055a0:	2303      	movs	r3, #3
 80055a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	2102      	movs	r1, #2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f005 f9df 	bl	800a978 <HAL_RCC_ClockConfig>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80055c0:	f001 f896 	bl	80066f0 <Error_Handler>
  }
}
 80055c4:	bf00      	nop
 80055c6:	3750      	adds	r7, #80	; 0x50
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08c      	sub	sp, #48	; 0x30
 80055d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80055d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	2220      	movs	r2, #32
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f009 f928 	bl	800e83a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80055ea:	4b3a      	ldr	r3, [pc, #232]	; (80056d4 <MX_ADC1_Init+0x108>)
 80055ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80055f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80055f2:	4b38      	ldr	r3, [pc, #224]	; (80056d4 <MX_ADC1_Init+0x108>)
 80055f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80055fa:	4b36      	ldr	r3, [pc, #216]	; (80056d4 <MX_ADC1_Init+0x108>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005600:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005602:	2200      	movs	r2, #0
 8005604:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8005606:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800560c:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <MX_ADC1_Init+0x108>)
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005612:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005614:	2204      	movs	r2, #4
 8005616:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005618:	4b2e      	ldr	r3, [pc, #184]	; (80056d4 <MX_ADC1_Init+0x108>)
 800561a:	2200      	movs	r2, #0
 800561c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800561e:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005620:	2200      	movs	r2, #0
 8005622:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8005624:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005626:	2202      	movs	r2, #2
 8005628:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800562a:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <MX_ADC1_Init+0x108>)
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8005632:	4b28      	ldr	r3, [pc, #160]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005634:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8005638:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800563a:	4b26      	ldr	r3, [pc, #152]	; (80056d4 <MX_ADC1_Init+0x108>)
 800563c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800564a:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <MX_ADC1_Init+0x108>)
 800564c:	2200      	movs	r2, #0
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8005650:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005658:	481e      	ldr	r0, [pc, #120]	; (80056d4 <MX_ADC1_Init+0x108>)
 800565a:	f002 fa79 	bl	8007b50 <HAL_ADC_Init>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8005664:	f001 f844 	bl	80066f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800566c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005670:	4619      	mov	r1, r3
 8005672:	4818      	ldr	r0, [pc, #96]	; (80056d4 <MX_ADC1_Init+0x108>)
 8005674:	f003 fa6a 	bl	8008b4c <HAL_ADCEx_MultiModeConfigChannel>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800567e:	f001 f837 	bl	80066f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <MX_ADC1_Init+0x10c>)
 8005684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005686:	2306      	movs	r3, #6
 8005688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800568a:	2305      	movs	r3, #5
 800568c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800568e:	237f      	movs	r3, #127	; 0x7f
 8005690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005692:	2304      	movs	r3, #4
 8005694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800569a:	1d3b      	adds	r3, r7, #4
 800569c:	4619      	mov	r1, r3
 800569e:	480d      	ldr	r0, [pc, #52]	; (80056d4 <MX_ADC1_Init+0x108>)
 80056a0:	f002 fcd8 	bl	8008054 <HAL_ADC_ConfigChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80056aa:	f001 f821 	bl	80066f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <MX_ADC1_Init+0x110>)
 80056b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80056b2:	230c      	movs	r3, #12
 80056b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056b6:	1d3b      	adds	r3, r7, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4806      	ldr	r0, [pc, #24]	; (80056d4 <MX_ADC1_Init+0x108>)
 80056bc:	f002 fcca 	bl	8008054 <HAL_ADC_ConfigChannel>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80056c6:	f001 f813 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80056ca:	bf00      	nop
 80056cc:	3730      	adds	r7, #48	; 0x30
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000b50c 	.word	0x2000b50c
 80056d8:	04300002 	.word	0x04300002
 80056dc:	08600004 	.word	0x08600004

080056e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80056e6:	463b      	mov	r3, r7
 80056e8:	2220      	movs	r2, #32
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f009 f8a4 	bl	800e83a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80056f2:	4b33      	ldr	r3, [pc, #204]	; (80057c0 <MX_ADC2_Init+0xe0>)
 80056f4:	4a33      	ldr	r2, [pc, #204]	; (80057c4 <MX_ADC2_Init+0xe4>)
 80056f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80056f8:	4b31      	ldr	r3, [pc, #196]	; (80057c0 <MX_ADC2_Init+0xe0>)
 80056fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005700:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005702:	2200      	movs	r2, #0
 8005704:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005706:	4b2e      	ldr	r3, [pc, #184]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005708:	2200      	movs	r2, #0
 800570a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800570c:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <MX_ADC2_Init+0xe0>)
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005712:	4b2b      	ldr	r3, [pc, #172]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005714:	2201      	movs	r2, #1
 8005716:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005718:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <MX_ADC2_Init+0xe0>)
 800571a:	2204      	movs	r2, #4
 800571c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800571e:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005726:	2200      	movs	r2, #0
 8005728:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800572a:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <MX_ADC2_Init+0xe0>)
 800572c:	2202      	movs	r2, #2
 800572e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005730:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <MX_ADC2_Init+0xe0>)
 800573a:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005740:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <MX_ADC2_Init+0xe0>)
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005750:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005752:	2200      	movs	r2, #0
 8005754:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800575e:	4818      	ldr	r0, [pc, #96]	; (80057c0 <MX_ADC2_Init+0xe0>)
 8005760:	f002 f9f6 	bl	8007b50 <HAL_ADC_Init>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800576a:	f000 ffc1 	bl	80066f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800576e:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <MX_ADC2_Init+0xe8>)
 8005770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005772:	2306      	movs	r3, #6
 8005774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8005776:	2305      	movs	r3, #5
 8005778:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800577a:	237f      	movs	r3, #127	; 0x7f
 800577c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800577e:	2304      	movs	r3, #4
 8005780:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005786:	463b      	mov	r3, r7
 8005788:	4619      	mov	r1, r3
 800578a:	480d      	ldr	r0, [pc, #52]	; (80057c0 <MX_ADC2_Init+0xe0>)
 800578c:	f002 fc62 	bl	8008054 <HAL_ADC_ConfigChannel>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8005796:	f000 ffab 	bl	80066f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800579a:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <MX_ADC2_Init+0xec>)
 800579c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800579e:	230c      	movs	r3, #12
 80057a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80057a2:	463b      	mov	r3, r7
 80057a4:	4619      	mov	r1, r3
 80057a6:	4806      	ldr	r0, [pc, #24]	; (80057c0 <MX_ADC2_Init+0xe0>)
 80057a8:	f002 fc54 	bl	8008054 <HAL_ADC_ConfigChannel>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80057b2:	f000 ff9d 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80057b6:	bf00      	nop
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	2000b578 	.word	0x2000b578
 80057c4:	50000100 	.word	0x50000100
 80057c8:	0c900008 	.word	0x0c900008
 80057cc:	10c00010 	.word	0x10c00010

080057d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80057d6:	463b      	mov	r3, r7
 80057d8:	2220      	movs	r2, #32
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f009 f82c 	bl	800e83a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80057e2:	4b33      	ldr	r3, [pc, #204]	; (80058b0 <MX_ADC3_Init+0xe0>)
 80057e4:	4a33      	ldr	r2, [pc, #204]	; (80058b4 <MX_ADC3_Init+0xe4>)
 80057e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80057e8:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <MX_ADC3_Init+0xe0>)
 80057ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80057f0:	4b2f      	ldr	r3, [pc, #188]	; (80058b0 <MX_ADC3_Init+0xe0>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80057f6:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <MX_ADC3_Init+0xe0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80057fc:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <MX_ADC3_Init+0xe0>)
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005804:	2201      	movs	r2, #1
 8005806:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005808:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <MX_ADC3_Init+0xe0>)
 800580a:	2204      	movs	r2, #4
 800580c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800580e:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005814:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005816:	2200      	movs	r2, #0
 8005818:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 800581a:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <MX_ADC3_Init+0xe0>)
 800581c:	2202      	movs	r2, #2
 800581e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005820:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <MX_ADC3_Init+0xe0>)
 800582a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8005830:	4b1f      	ldr	r3, [pc, #124]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <MX_ADC3_Init+0xe0>)
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005840:	4b1b      	ldr	r3, [pc, #108]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005842:	2200      	movs	r2, #0
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800584e:	4818      	ldr	r0, [pc, #96]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005850:	f002 f97e 	bl	8007b50 <HAL_ADC_Init>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800585a:	f000 ff49 	bl	80066f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800585e:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <MX_ADC3_Init+0xe8>)
 8005860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005862:	2306      	movs	r3, #6
 8005864:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8005866:	2305      	movs	r3, #5
 8005868:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800586a:	237f      	movs	r3, #127	; 0x7f
 800586c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800586e:	2304      	movs	r3, #4
 8005870:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005876:	463b      	mov	r3, r7
 8005878:	4619      	mov	r1, r3
 800587a:	480d      	ldr	r0, [pc, #52]	; (80058b0 <MX_ADC3_Init+0xe0>)
 800587c:	f002 fbea 	bl	8008054 <HAL_ADC_ConfigChannel>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8005886:	f000 ff33 	bl	80066f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <MX_ADC3_Init+0xec>)
 800588c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800588e:	230c      	movs	r3, #12
 8005890:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005892:	463b      	mov	r3, r7
 8005894:	4619      	mov	r1, r3
 8005896:	4806      	ldr	r0, [pc, #24]	; (80058b0 <MX_ADC3_Init+0xe0>)
 8005898:	f002 fbdc 	bl	8008054 <HAL_ADC_ConfigChannel>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 80058a2:	f000 ff25 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80058a6:	bf00      	nop
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	2000b5e4 	.word	0x2000b5e4
 80058b4:	50000400 	.word	0x50000400
 80058b8:	04300002 	.word	0x04300002
 80058bc:	08600004 	.word	0x08600004

080058c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08c      	sub	sp, #48	; 0x30
 80058c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80058c6:	463b      	mov	r3, r7
 80058c8:	2230      	movs	r2, #48	; 0x30
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f008 ffb4 	bl	800e83a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <MX_DAC1_Init+0x84>)
 80058d4:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <MX_DAC1_Init+0x88>)
 80058d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80058d8:	481a      	ldr	r0, [pc, #104]	; (8005944 <MX_DAC1_Init+0x84>)
 80058da:	f003 fb2e 	bl	8008f3a <HAL_DAC_Init>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80058e4:	f000 ff04 	bl	80066f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80058e8:	2302      	movs	r3, #2
 80058ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80058f8:	231e      	movs	r3, #30
 80058fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8005904:	2301      	movs	r3, #1
 8005906:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800590c:	463b      	mov	r3, r7
 800590e:	2200      	movs	r2, #0
 8005910:	4619      	mov	r1, r3
 8005912:	480c      	ldr	r0, [pc, #48]	; (8005944 <MX_DAC1_Init+0x84>)
 8005914:	f003 fc26 	bl	8009164 <HAL_DAC_ConfigChannel>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800591e:	f000 fee7 	bl	80066f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8005922:	230a      	movs	r3, #10
 8005924:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005926:	463b      	mov	r3, r7
 8005928:	2210      	movs	r2, #16
 800592a:	4619      	mov	r1, r3
 800592c:	4805      	ldr	r0, [pc, #20]	; (8005944 <MX_DAC1_Init+0x84>)
 800592e:	f003 fc19 	bl	8009164 <HAL_DAC_ConfigChannel>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 8005938:	f000 feda 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800593c:	bf00      	nop
 800593e:	3730      	adds	r7, #48	; 0x30
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	2000b770 	.word	0x2000b770
 8005948:	50000800 	.word	0x50000800

0800594c <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <MX_FMAC_Init+0x20>)
 8005952:	4a07      	ldr	r2, [pc, #28]	; (8005970 <MX_FMAC_Init+0x24>)
 8005954:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8005956:	4805      	ldr	r0, [pc, #20]	; (800596c <MX_FMAC_Init+0x20>)
 8005958:	f004 f8b8 	bl	8009acc <HAL_FMAC_Init>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8005962:	f000 fec5 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	2000b844 	.word	0x2000b844
 8005970:	40021400 	.word	0x40021400

08005974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005978:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <MX_I2C1_Init+0x74>)
 800597a:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <MX_I2C1_Init+0x78>)
 800597c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <MX_I2C1_Init+0x74>)
 8005980:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <MX_I2C1_Init+0x7c>)
 8005982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005984:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <MX_I2C1_Init+0x74>)
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800598a:	4b17      	ldr	r3, [pc, #92]	; (80059e8 <MX_I2C1_Init+0x74>)
 800598c:	2201      	movs	r2, #1
 800598e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005990:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <MX_I2C1_Init+0x74>)
 8005992:	2200      	movs	r2, #0
 8005994:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <MX_I2C1_Init+0x74>)
 8005998:	2200      	movs	r2, #0
 800599a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800599c:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <MX_I2C1_Init+0x74>)
 800599e:	2200      	movs	r2, #0
 80059a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059a2:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <MX_I2C1_Init+0x74>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059a8:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <MX_I2C1_Init+0x74>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80059ae:	480e      	ldr	r0, [pc, #56]	; (80059e8 <MX_I2C1_Init+0x74>)
 80059b0:	f004 faea 	bl	8009f88 <HAL_I2C_Init>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80059ba:	f000 fe99 	bl	80066f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80059be:	2100      	movs	r1, #0
 80059c0:	4809      	ldr	r0, [pc, #36]	; (80059e8 <MX_I2C1_Init+0x74>)
 80059c2:	f004 fb7c 	bl	800a0be <HAL_I2CEx_ConfigAnalogFilter>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80059cc:	f000 fe90 	bl	80066f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80059d0:	2100      	movs	r1, #0
 80059d2:	4805      	ldr	r0, [pc, #20]	; (80059e8 <MX_I2C1_Init+0x74>)
 80059d4:	f004 fbbe 	bl	800a154 <HAL_I2CEx_ConfigDigitalFilter>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80059de:	f000 fe87 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80059e2:	bf00      	nop
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2000b87c 	.word	0x2000b87c
 80059ec:	40005400 	.word	0x40005400
 80059f0:	10707dbc 	.word	0x10707dbc

080059f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80059f8:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <MX_I2C2_Init+0x74>)
 80059fa:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <MX_I2C2_Init+0x78>)
 80059fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80059fe:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a00:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <MX_I2C2_Init+0x7c>)
 8005a02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a0a:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a10:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a22:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005a2e:	480e      	ldr	r0, [pc, #56]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a30:	f004 faaa 	bl	8009f88 <HAL_I2C_Init>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005a3a:	f000 fe59 	bl	80066f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a42:	f004 fb3c 	bl	800a0be <HAL_I2CEx_ConfigAnalogFilter>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005a4c:	f000 fe50 	bl	80066f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005a50:	2100      	movs	r1, #0
 8005a52:	4805      	ldr	r0, [pc, #20]	; (8005a68 <MX_I2C2_Init+0x74>)
 8005a54:	f004 fb7e 	bl	800a154 <HAL_I2CEx_ConfigDigitalFilter>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005a5e:	f000 fe47 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000b8d0 	.word	0x2000b8d0
 8005a6c:	40005800 	.word	0x40005800
 8005a70:	10707dbc 	.word	0x10707dbc

08005a74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <MX_I2C3_Init+0x78>)
 8005a7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <MX_I2C3_Init+0x7c>)
 8005a82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8005a84:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a8a:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a90:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005aa2:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005aae:	480e      	ldr	r0, [pc, #56]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005ab0:	f004 fa6a 	bl	8009f88 <HAL_I2C_Init>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8005aba:	f000 fe19 	bl	80066f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4809      	ldr	r0, [pc, #36]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005ac2:	f004 fafc 	bl	800a0be <HAL_I2CEx_ConfigAnalogFilter>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8005acc:	f000 fe10 	bl	80066f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4805      	ldr	r0, [pc, #20]	; (8005ae8 <MX_I2C3_Init+0x74>)
 8005ad4:	f004 fb3e 	bl	800a154 <HAL_I2CEx_ConfigDigitalFilter>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8005ade:	f000 fe07 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2000b924 	.word	0x2000b924
 8005aec:	40007800 	.word	0x40007800
 8005af0:	10707dbc 	.word	0x10707dbc

08005af4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <MX_TIM6_Init+0x64>)
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <MX_TIM6_Init+0x68>)
 8005b08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <MX_TIM6_Init+0x64>)
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <MX_TIM6_Init+0x64>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <MX_TIM6_Init+0x64>)
 8005b18:	2207      	movs	r2, #7
 8005b1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <MX_TIM6_Init+0x64>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005b22:	480d      	ldr	r0, [pc, #52]	; (8005b58 <MX_TIM6_Init+0x64>)
 8005b24:	f005 fb7c 	bl	800b220 <HAL_TIM_Base_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005b2e:	f000 fddf 	bl	80066f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005b32:	2320      	movs	r3, #32
 8005b34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005b3a:	1d3b      	adds	r3, r7, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4806      	ldr	r0, [pc, #24]	; (8005b58 <MX_TIM6_Init+0x64>)
 8005b40:	f005 fe00 	bl	800b744 <HAL_TIMEx_MasterConfigSynchronization>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005b4a:	f000 fdd1 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	2000ba98 	.word	0x2000ba98
 8005b5c:	40001000 	.word	0x40001000

08005b60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <MX_TIM7_Init+0x64>)
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <MX_TIM7_Init+0x68>)
 8005b74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <MX_TIM7_Init+0x64>)
 8005b78:	2207      	movs	r2, #7
 8005b7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <MX_TIM7_Init+0x64>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <MX_TIM7_Init+0x64>)
 8005b84:	2207      	movs	r2, #7
 8005b86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <MX_TIM7_Init+0x64>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b8e:	480d      	ldr	r0, [pc, #52]	; (8005bc4 <MX_TIM7_Init+0x64>)
 8005b90:	f005 fb46 	bl	800b220 <HAL_TIM_Base_Init>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005b9a:	f000 fda9 	bl	80066f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4806      	ldr	r0, [pc, #24]	; (8005bc4 <MX_TIM7_Init+0x64>)
 8005bac:	f005 fdca 	bl	800b744 <HAL_TIMEx_MasterConfigSynchronization>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005bb6:	f000 fd9b 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	2000bae4 	.word	0x2000bae4
 8005bc8:	40001400 	.word	0x40001400

08005bcc <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005bd2:	f107 030c 	add.w	r3, r7, #12
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005be2:	463b      	mov	r3, r7
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	605a      	str	r2, [r3, #4]
 8005bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005bec:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005bee:	4a20      	ldr	r2, [pc, #128]	; (8005c70 <MX_TIM20_Init+0xa4>)
 8005bf0:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c04:	4b19      	ldr	r3, [pc, #100]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005c0a:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c10:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005c16:	4815      	ldr	r0, [pc, #84]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005c18:	f005 fb02 	bl	800b220 <HAL_TIM_Base_Init>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8005c22:	f000 fd65 	bl	80066f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	4619      	mov	r1, r3
 8005c34:	480d      	ldr	r0, [pc, #52]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005c36:	f005 fb4a 	bl	800b2ce <HAL_TIM_SlaveConfigSynchro>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8005c40:	f000 fd56 	bl	80066f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005c44:	2320      	movs	r3, #32
 8005c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005c50:	463b      	mov	r3, r7
 8005c52:	4619      	mov	r1, r3
 8005c54:	4805      	ldr	r0, [pc, #20]	; (8005c6c <MX_TIM20_Init+0xa0>)
 8005c56:	f005 fd75 	bl	800b744 <HAL_TIMEx_MasterConfigSynchronization>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005c60:	f000 fd46 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8005c64:	bf00      	nop
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	2000bb30 	.word	0x2000bb30
 8005c70:	40015000 	.word	0x40015000

08005c74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c78:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005c7a:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <MX_USART1_UART_Init+0x94>)
 8005c7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c7e:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c86:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005c9a:	220c      	movs	r2, #12
 8005c9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c9e:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005cb0:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005cb6:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005cbc:	4811      	ldr	r0, [pc, #68]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005cbe:	f005 fdcf 	bl	800b860 <HAL_UART_Init>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005cc8:	f000 fd12 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ccc:	2100      	movs	r1, #0
 8005cce:	480d      	ldr	r0, [pc, #52]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005cd0:	f006 fb6a 	bl	800c3a8 <HAL_UARTEx_SetTxFifoThreshold>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005cda:	f000 fd09 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4808      	ldr	r0, [pc, #32]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005ce2:	f006 fb9f 	bl	800c424 <HAL_UARTEx_SetRxFifoThreshold>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005cec:	f000 fd00 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005cf0:	4804      	ldr	r0, [pc, #16]	; (8005d04 <MX_USART1_UART_Init+0x90>)
 8005cf2:	f006 fb20 	bl	800c336 <HAL_UARTEx_DisableFifoMode>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005cfc:	f000 fcf8 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005d00:	bf00      	nop
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	2000bb7c 	.word	0x2000bb7c
 8005d08:	40013800 	.word	0x40013800

08005d0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005d10:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d12:	4a23      	ldr	r2, [pc, #140]	; (8005da0 <MX_USART2_UART_Init+0x94>)
 8005d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d16:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d1e:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d24:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d30:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d32:	220c      	movs	r2, #12
 8005d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d36:	4b19      	ldr	r3, [pc, #100]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d3c:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d42:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d48:	4b14      	ldr	r3, [pc, #80]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d54:	4811      	ldr	r0, [pc, #68]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d56:	f005 fd83 	bl	800b860 <HAL_UART_Init>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005d60:	f000 fcc6 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d64:	2100      	movs	r1, #0
 8005d66:	480d      	ldr	r0, [pc, #52]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d68:	f006 fb1e 	bl	800c3a8 <HAL_UARTEx_SetTxFifoThreshold>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005d72:	f000 fcbd 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d76:	2100      	movs	r1, #0
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d7a:	f006 fb53 	bl	800c424 <HAL_UARTEx_SetRxFifoThreshold>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005d84:	f000 fcb4 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005d88:	4804      	ldr	r0, [pc, #16]	; (8005d9c <MX_USART2_UART_Init+0x90>)
 8005d8a:	f006 fad4 	bl	800c336 <HAL_UARTEx_DisableFifoMode>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005d94:	f000 fcac 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	2000bc10 	.word	0x2000bc10
 8005da0:	40004400 	.word	0x40004400

08005da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005da8:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005daa:	4a23      	ldr	r2, [pc, #140]	; (8005e38 <MX_USART3_UART_Init+0x94>)
 8005dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005dae:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005db6:	4b1f      	ldr	r3, [pc, #124]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005dc8:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005dca:	220c      	movs	r2, #12
 8005dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dce:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dd4:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dda:	4b16      	ldr	r3, [pc, #88]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005de0:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005de6:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005dec:	4811      	ldr	r0, [pc, #68]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005dee:	f005 fd37 	bl	800b860 <HAL_UART_Init>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005df8:	f000 fc7a 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	480d      	ldr	r0, [pc, #52]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005e00:	f006 fad2 	bl	800c3a8 <HAL_UARTEx_SetTxFifoThreshold>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005e0a:	f000 fc71 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4808      	ldr	r0, [pc, #32]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005e12:	f006 fb07 	bl	800c424 <HAL_UARTEx_SetRxFifoThreshold>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005e1c:	f000 fc68 	bl	80066f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005e20:	4804      	ldr	r0, [pc, #16]	; (8005e34 <MX_USART3_UART_Init+0x90>)
 8005e22:	f006 fa88 	bl	800c336 <HAL_UARTEx_DisableFifoMode>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005e2c:	f000 fc60 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005e30:	bf00      	nop
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	2000bca4 	.word	0x2000bca4
 8005e38:	40004800 	.word	0x40004800

08005e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005e42:	4b40      	ldr	r3, [pc, #256]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e46:	4a3f      	ldr	r2, [pc, #252]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	6493      	str	r3, [r2, #72]	; 0x48
 8005e4e:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e5a:	4b3a      	ldr	r3, [pc, #232]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	4a39      	ldr	r2, [pc, #228]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	6493      	str	r3, [r2, #72]	; 0x48
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e72:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e76:	4a33      	ldr	r2, [pc, #204]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e78:	f043 0302 	orr.w	r3, r3, #2
 8005e7c:	6493      	str	r3, [r2, #72]	; 0x48
 8005e7e:	4b31      	ldr	r3, [pc, #196]	; (8005f44 <MX_DMA_Init+0x108>)
 8005e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	200b      	movs	r0, #11
 8005e90:	f003 f81f 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005e94:	200b      	movs	r0, #11
 8005e96:	f003 f836 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	200c      	movs	r0, #12
 8005ea0:	f003 f817 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005ea4:	200c      	movs	r0, #12
 8005ea6:	f003 f82e 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2100      	movs	r1, #0
 8005eae:	200d      	movs	r0, #13
 8005eb0:	f003 f80f 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005eb4:	200d      	movs	r0, #13
 8005eb6:	f003 f826 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	200e      	movs	r0, #14
 8005ec0:	f003 f807 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005ec4:	200e      	movs	r0, #14
 8005ec6:	f003 f81e 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2100      	movs	r1, #0
 8005ece:	200f      	movs	r0, #15
 8005ed0:	f002 ffff 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005ed4:	200f      	movs	r0, #15
 8005ed6:	f003 f816 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005eda:	2200      	movs	r2, #0
 8005edc:	2100      	movs	r1, #0
 8005ede:	2010      	movs	r0, #16
 8005ee0:	f002 fff7 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005ee4:	2010      	movs	r0, #16
 8005ee6:	f003 f80e 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8005eea:	2200      	movs	r2, #0
 8005eec:	2100      	movs	r1, #0
 8005eee:	2038      	movs	r0, #56	; 0x38
 8005ef0:	f002 ffef 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005ef4:	2038      	movs	r0, #56	; 0x38
 8005ef6:	f003 f806 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8005efa:	2200      	movs	r2, #0
 8005efc:	2100      	movs	r1, #0
 8005efe:	203b      	movs	r0, #59	; 0x3b
 8005f00:	f002 ffe7 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8005f04:	203b      	movs	r0, #59	; 0x3b
 8005f06:	f002 fffe 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	203c      	movs	r0, #60	; 0x3c
 8005f10:	f002 ffdf 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8005f14:	203c      	movs	r0, #60	; 0x3c
 8005f16:	f002 fff6 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	2061      	movs	r0, #97	; 0x61
 8005f20:	f002 ffd7 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8005f24:	2061      	movs	r0, #97	; 0x61
 8005f26:	f002 ffee 	bl	8008f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	2062      	movs	r0, #98	; 0x62
 8005f30:	f002 ffcf 	bl	8008ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8005f34:	2062      	movs	r0, #98	; 0x62
 8005f36:	f002 ffe6 	bl	8008f06 <HAL_NVIC_EnableIRQ>

}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000

08005f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f4e:	f107 031c 	add.w	r3, r7, #28
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	605a      	str	r2, [r3, #4]
 8005f58:	609a      	str	r2, [r3, #8]
 8005f5a:	60da      	str	r2, [r3, #12]
 8005f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f62:	4a35      	ldr	r2, [pc, #212]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f64:	f043 0310 	orr.w	r3, r3, #16
 8005f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f6a:	4b33      	ldr	r3, [pc, #204]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f76:	4b30      	ldr	r3, [pc, #192]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	4a2f      	ldr	r2, [pc, #188]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f7c:	f043 0320 	orr.w	r3, r3, #32
 8005f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f82:	4b2d      	ldr	r3, [pc, #180]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f92:	4a29      	ldr	r2, [pc, #164]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f9a:	4b27      	ldr	r3, [pc, #156]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005faa:	4a23      	ldr	r2, [pc, #140]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fac:	f043 0304 	orr.w	r3, r3, #4
 8005fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fb2:	4b21      	ldr	r3, [pc, #132]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fbe:	4b1e      	ldr	r3, [pc, #120]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc2:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fc4:	f043 0302 	orr.w	r3, r3, #2
 8005fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fca:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	60bb      	str	r3, [r7, #8]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fd6:	4b18      	ldr	r3, [pc, #96]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fdc:	f043 0308 	orr.w	r3, r3, #8
 8005fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <MX_GPIO_Init+0xf0>)
 8005fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	607b      	str	r3, [r7, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	4812      	ldr	r0, [pc, #72]	; (800603c <MX_GPIO_Init+0xf4>)
 8005ff4:	f003 ff98 	bl	8009f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_bgn_aqstn_Pin */
  GPIO_InitStruct.Pin = GPIO_bgn_aqstn_Pin;
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ffc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006002:	2302      	movs	r3, #2
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIO_bgn_aqstn_GPIO_Port, &GPIO_InitStruct);
 8006006:	f107 031c 	add.w	r3, r7, #28
 800600a:	4619      	mov	r1, r3
 800600c:	480b      	ldr	r0, [pc, #44]	; (800603c <MX_GPIO_Init+0xf4>)
 800600e:	f003 fe09 	bl	8009c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006012:	2320      	movs	r3, #32
 8006014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006016:	2301      	movs	r3, #1
 8006018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601a:	2300      	movs	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800601e:	2300      	movs	r3, #0
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006022:	f107 031c 	add.w	r3, r7, #28
 8006026:	4619      	mov	r1, r3
 8006028:	4804      	ldr	r0, [pc, #16]	; (800603c <MX_GPIO_Init+0xf4>)
 800602a:	f003 fdfb 	bl	8009c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800602e:	bf00      	nop
 8006030:	3730      	adds	r7, #48	; 0x30
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000
 800603c:	48001000 	.word	0x48001000

08006040 <EXT12_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXT12_IRQHandler(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08c      	sub	sp, #48	; 0x30
 8006044:	af00      	add	r7, sp, #0

	  /* ADC1 is started using timer 6 triggered conversions */
	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
      ADC_status = HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8006046:	4bba      	ldr	r3, [pc, #744]	; (8006330 <EXT12_IRQHandler+0x2f0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800604e:	4619      	mov	r1, r3
 8006050:	48b8      	ldr	r0, [pc, #736]	; (8006334 <EXT12_IRQHandler+0x2f4>)
 8006052:	f001 ff2b 	bl	8007eac <HAL_ADC_Start_DMA>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	4bb7      	ldr	r3, [pc, #732]	; (8006338 <EXT12_IRQHandler+0x2f8>)
 800605c:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc1);
 800605e:	48b5      	ldr	r0, [pc, #724]	; (8006334 <EXT12_IRQHandler+0x2f4>)
 8006060:	f000 fa16 	bl	8006490 <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8006064:	48b3      	ldr	r0, [pc, #716]	; (8006334 <EXT12_IRQHandler+0x2f4>)
 8006066:	f000 faa1 	bl	80065ac <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
	  ADC_status = HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 800606a:	4bb4      	ldr	r3, [pc, #720]	; (800633c <EXT12_IRQHandler+0x2fc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006072:	4619      	mov	r1, r3
 8006074:	48b2      	ldr	r0, [pc, #712]	; (8006340 <EXT12_IRQHandler+0x300>)
 8006076:	f001 ff19 	bl	8007eac <HAL_ADC_Start_DMA>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	4bae      	ldr	r3, [pc, #696]	; (8006338 <EXT12_IRQHandler+0x2f8>)
 8006080:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc2);
 8006082:	48af      	ldr	r0, [pc, #700]	; (8006340 <EXT12_IRQHandler+0x300>)
 8006084:	f000 fa04 	bl	8006490 <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc2);
 8006088:	48ad      	ldr	r0, [pc, #692]	; (8006340 <EXT12_IRQHandler+0x300>)
 800608a:	f000 fa8f 	bl	80065ac <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
	  ADC_status = HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 800608e:	4bad      	ldr	r3, [pc, #692]	; (8006344 <EXT12_IRQHandler+0x304>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006096:	4619      	mov	r1, r3
 8006098:	48ab      	ldr	r0, [pc, #684]	; (8006348 <EXT12_IRQHandler+0x308>)
 800609a:	f001 ff07 	bl	8007eac <HAL_ADC_Start_DMA>
 800609e:	4603      	mov	r3, r0
 80060a0:	461a      	mov	r2, r3
 80060a2:	4ba5      	ldr	r3, [pc, #660]	; (8006338 <EXT12_IRQHandler+0x2f8>)
 80060a4:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc3);
 80060a6:	48a8      	ldr	r0, [pc, #672]	; (8006348 <EXT12_IRQHandler+0x308>)
 80060a8:	f000 f9f2 	bl	8006490 <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc3);
 80060ac:	48a6      	ldr	r0, [pc, #664]	; (8006348 <EXT12_IRQHandler+0x308>)
 80060ae:	f000 fa7d 	bl	80065ac <HAL_ADC_ConvCpltCallback>

	/* Calculating the offset value and standard deviation for the base line signal for all the channels */
	if(Offset_1_Calculated==0)
 80060b2:	4ba6      	ldr	r3, [pc, #664]	; (800634c <EXT12_IRQHandler+0x30c>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d13e      	bne.n	8006138 <EXT12_IRQHandler+0xf8>
	{
	  float32_t OffsetSum_1 = 0.0f;
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e01a      	b.n	80060fe <EXT12_IRQHandler+0xbe>
		{
			/* Collects samples to fill the buffer */
			update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80060c8:	f7fc f932 	bl	8002330 <update_ADC1_IN1_FO_biquad_filter>
			MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 80060cc:	48a0      	ldr	r0, [pc, #640]	; (8006350 <EXT12_IRQHandler+0x310>)
 80060ce:	f7fb fd57 	bl	8001b80 <MA_ADC1_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 80060d2:	48a0      	ldr	r0, [pc, #640]	; (8006354 <EXT12_IRQHandler+0x314>)
 80060d4:	f7fc fab6 	bl	8002644 <ADC1_IN1_OffsetCalc>
 80060d8:	eef0 7a40 	vmov.f32	s15, s0
 80060dc:	4b9e      	ldr	r3, [pc, #632]	; (8006358 <EXT12_IRQHandler+0x318>)
 80060de:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_1 += Offset_1;
 80060e2:	4b9d      	ldr	r3, [pc, #628]	; (8006358 <EXT12_IRQHandler+0x318>)
 80060e4:	edd3 7a00 	vldr	s15, [r3]
 80060e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80060ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80060f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060f8:	3301      	adds	r3, #1
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006102:	2b13      	cmp	r3, #19
 8006104:	d9e0      	bls.n	80060c8 <EXT12_IRQHandler+0x88>
		}

	  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 8006106:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800610a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800610e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006112:	4b91      	ldr	r3, [pc, #580]	; (8006358 <EXT12_IRQHandler+0x318>)
 8006114:	edc3 7a00 	vstr	s15, [r3]
	  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 8006118:	4b8c      	ldr	r3, [pc, #560]	; (800634c <EXT12_IRQHandler+0x30c>)
 800611a:	2201      	movs	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]

	  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 800611e:	4b8e      	ldr	r3, [pc, #568]	; (8006358 <EXT12_IRQHandler+0x318>)
 8006120:	edd3 7a00 	vldr	s15, [r3]
 8006124:	eeb0 0a67 	vmov.f32	s0, s15
 8006128:	488c      	ldr	r0, [pc, #560]	; (800635c <EXT12_IRQHandler+0x31c>)
 800612a:	f7fc fbab 	bl	8002884 <ADC1_IN1_SD_BL>
 800612e:	eef0 7a40 	vmov.f32	s15, s0
 8006132:	4b8b      	ldr	r3, [pc, #556]	; (8006360 <EXT12_IRQHandler+0x320>)
 8006134:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_2_Calculated==0)
 8006138:	4b8a      	ldr	r3, [pc, #552]	; (8006364 <EXT12_IRQHandler+0x324>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d13b      	bne.n	80061b8 <EXT12_IRQHandler+0x178>
	{
	  float32_t OffsetSum_2;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8006140:	2300      	movs	r3, #0
 8006142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006146:	e01a      	b.n	800617e <EXT12_IRQHandler+0x13e>
		{

			update_ADC1_IN2_FO_biquad_filter();
 8006148:	f7fc f93c 	bl	80023c4 <update_ADC1_IN2_FO_biquad_filter>
			MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 800614c:	4886      	ldr	r0, [pc, #536]	; (8006368 <EXT12_IRQHandler+0x328>)
 800614e:	f7fb fdbb 	bl	8001cc8 <MA_ADC1_IN2_Update>


			Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 8006152:	4886      	ldr	r0, [pc, #536]	; (800636c <EXT12_IRQHandler+0x32c>)
 8006154:	f7fc faa6 	bl	80026a4 <ADC1_IN2_OffsetCalc>
 8006158:	eef0 7a40 	vmov.f32	s15, s0
 800615c:	4b84      	ldr	r3, [pc, #528]	; (8006370 <EXT12_IRQHandler+0x330>)
 800615e:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_2 += Offset_2;
 8006162:	4b83      	ldr	r3, [pc, #524]	; (8006370 <EXT12_IRQHandler+0x330>)
 8006164:	edd3 7a00 	vldr	s15, [r3]
 8006168:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800616c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8006174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006178:	3301      	adds	r3, #1
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006182:	2b13      	cmp	r3, #19
 8006184:	d9e0      	bls.n	8006148 <EXT12_IRQHandler+0x108>
		}

	  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 8006186:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800618a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800618e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006192:	4b77      	ldr	r3, [pc, #476]	; (8006370 <EXT12_IRQHandler+0x330>)
 8006194:	edc3 7a00 	vstr	s15, [r3]
	  Offset_2_Calculated = 1;
 8006198:	4b72      	ldr	r3, [pc, #456]	; (8006364 <EXT12_IRQHandler+0x324>)
 800619a:	2201      	movs	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]

	  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 800619e:	4b74      	ldr	r3, [pc, #464]	; (8006370 <EXT12_IRQHandler+0x330>)
 80061a0:	edd3 7a00 	vldr	s15, [r3]
 80061a4:	eeb0 0a67 	vmov.f32	s0, s15
 80061a8:	4872      	ldr	r0, [pc, #456]	; (8006374 <EXT12_IRQHandler+0x334>)
 80061aa:	f7fc fbb7 	bl	800291c <ADC1_IN2_SD_BL>
 80061ae:	eef0 7a40 	vmov.f32	s15, s0
 80061b2:	4b71      	ldr	r3, [pc, #452]	; (8006378 <EXT12_IRQHandler+0x338>)
 80061b4:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_3_Calculated==0)
 80061b8:	4b70      	ldr	r3, [pc, #448]	; (800637c <EXT12_IRQHandler+0x33c>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d137      	bne.n	8006230 <EXT12_IRQHandler+0x1f0>
	{
	  float32_t OffsetSum_3;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80061c0:	2300      	movs	r3, #0
 80061c2:	76fb      	strb	r3, [r7, #27]
 80061c4:	e018      	b.n	80061f8 <EXT12_IRQHandler+0x1b8>
		{

			update_ADC2_IN3_FO_biquad_filter();
 80061c6:	f7fc f947 	bl	8002458 <update_ADC2_IN3_FO_biquad_filter>
			MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 80061ca:	486d      	ldr	r0, [pc, #436]	; (8006380 <EXT12_IRQHandler+0x340>)
 80061cc:	f7fb fe20 	bl	8001e10 <MA_ADC2_IN3_Update>


			Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 80061d0:	486c      	ldr	r0, [pc, #432]	; (8006384 <EXT12_IRQHandler+0x344>)
 80061d2:	f7fc fa97 	bl	8002704 <ADC2_IN3_OffsetCalc>
 80061d6:	eef0 7a40 	vmov.f32	s15, s0
 80061da:	4b6b      	ldr	r3, [pc, #428]	; (8006388 <EXT12_IRQHandler+0x348>)
 80061dc:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_3 += Offset_3;
 80061e0:	4b69      	ldr	r3, [pc, #420]	; (8006388 <EXT12_IRQHandler+0x348>)
 80061e2:	edd3 7a00 	vldr	s15, [r3]
 80061e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80061ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ee:	edc7 7a07 	vstr	s15, [r7, #28]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80061f2:	7efb      	ldrb	r3, [r7, #27]
 80061f4:	3301      	adds	r3, #1
 80061f6:	76fb      	strb	r3, [r7, #27]
 80061f8:	7efb      	ldrb	r3, [r7, #27]
 80061fa:	2b13      	cmp	r3, #19
 80061fc:	d9e3      	bls.n	80061c6 <EXT12_IRQHandler+0x186>
		}

	  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 80061fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8006202:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006206:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800620a:	4b5f      	ldr	r3, [pc, #380]	; (8006388 <EXT12_IRQHandler+0x348>)
 800620c:	edc3 7a00 	vstr	s15, [r3]
	  Offset_3_Calculated = 1;
 8006210:	4b5a      	ldr	r3, [pc, #360]	; (800637c <EXT12_IRQHandler+0x33c>)
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]

	  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 8006216:	4b5c      	ldr	r3, [pc, #368]	; (8006388 <EXT12_IRQHandler+0x348>)
 8006218:	edd3 7a00 	vldr	s15, [r3]
 800621c:	eeb0 0a67 	vmov.f32	s0, s15
 8006220:	485a      	ldr	r0, [pc, #360]	; (800638c <EXT12_IRQHandler+0x34c>)
 8006222:	f7fc fbc7 	bl	80029b4 <ADC2_IN3_SD_BL>
 8006226:	eef0 7a40 	vmov.f32	s15, s0
 800622a:	4b59      	ldr	r3, [pc, #356]	; (8006390 <EXT12_IRQHandler+0x350>)
 800622c:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_4_Calculated==0)
 8006230:	4b58      	ldr	r3, [pc, #352]	; (8006394 <EXT12_IRQHandler+0x354>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d137      	bne.n	80062a8 <EXT12_IRQHandler+0x268>
	{
	  float32_t OffsetSum_4;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8006238:	2300      	movs	r3, #0
 800623a:	74fb      	strb	r3, [r7, #19]
 800623c:	e018      	b.n	8006270 <EXT12_IRQHandler+0x230>
		{

			update_ADC2_IN4_FO_biquad_filter();
 800623e:	f7fc f955 	bl	80024ec <update_ADC2_IN4_FO_biquad_filter>
			MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8006242:	4855      	ldr	r0, [pc, #340]	; (8006398 <EXT12_IRQHandler+0x358>)
 8006244:	f7fb fe88 	bl	8001f58 <MA_ADC2_IN4_Update>


			Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 8006248:	4854      	ldr	r0, [pc, #336]	; (800639c <EXT12_IRQHandler+0x35c>)
 800624a:	f7fc fa8b 	bl	8002764 <ADC2_IN4_OffsetCalc>
 800624e:	eef0 7a40 	vmov.f32	s15, s0
 8006252:	4b53      	ldr	r3, [pc, #332]	; (80063a0 <EXT12_IRQHandler+0x360>)
 8006254:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_4 += Offset_4;
 8006258:	4b51      	ldr	r3, [pc, #324]	; (80063a0 <EXT12_IRQHandler+0x360>)
 800625a:	edd3 7a00 	vldr	s15, [r3]
 800625e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006266:	edc7 7a05 	vstr	s15, [r7, #20]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	3301      	adds	r3, #1
 800626e:	74fb      	strb	r3, [r7, #19]
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	2b13      	cmp	r3, #19
 8006274:	d9e3      	bls.n	800623e <EXT12_IRQHandler+0x1fe>
		}

	  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 8006276:	ed97 7a05 	vldr	s14, [r7, #20]
 800627a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800627e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006282:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <EXT12_IRQHandler+0x360>)
 8006284:	edc3 7a00 	vstr	s15, [r3]
	  Offset_4_Calculated = 1;
 8006288:	4b42      	ldr	r3, [pc, #264]	; (8006394 <EXT12_IRQHandler+0x354>)
 800628a:	2201      	movs	r2, #1
 800628c:	701a      	strb	r2, [r3, #0]

	  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 800628e:	4b44      	ldr	r3, [pc, #272]	; (80063a0 <EXT12_IRQHandler+0x360>)
 8006290:	edd3 7a00 	vldr	s15, [r3]
 8006294:	eeb0 0a67 	vmov.f32	s0, s15
 8006298:	4842      	ldr	r0, [pc, #264]	; (80063a4 <EXT12_IRQHandler+0x364>)
 800629a:	f7fc fbd7 	bl	8002a4c <ADC2_IN4_SD_BL>
 800629e:	eef0 7a40 	vmov.f32	s15, s0
 80062a2:	4b41      	ldr	r3, [pc, #260]	; (80063a8 <EXT12_IRQHandler+0x368>)
 80062a4:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_5_Calculated==0)
 80062a8:	4b40      	ldr	r3, [pc, #256]	; (80063ac <EXT12_IRQHandler+0x36c>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d137      	bne.n	8006320 <EXT12_IRQHandler+0x2e0>
	{
	  float32_t OffsetSum_5;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80062b0:	2300      	movs	r3, #0
 80062b2:	72fb      	strb	r3, [r7, #11]
 80062b4:	e018      	b.n	80062e8 <EXT12_IRQHandler+0x2a8>
		{
			/* Collects samples to fill the buffer */
			update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 80062b6:	f7fc f963 	bl	8002580 <update_ADC3_IN1_FO_biquad_filter>
			MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 80062ba:	483d      	ldr	r0, [pc, #244]	; (80063b0 <EXT12_IRQHandler+0x370>)
 80062bc:	f7fb fef0 	bl	80020a0 <MA_ADC3_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 80062c0:	483c      	ldr	r0, [pc, #240]	; (80063b4 <EXT12_IRQHandler+0x374>)
 80062c2:	f7fc fa7f 	bl	80027c4 <ADC3_IN1_OffsetCalc>
 80062c6:	eef0 7a40 	vmov.f32	s15, s0
 80062ca:	4b23      	ldr	r3, [pc, #140]	; (8006358 <EXT12_IRQHandler+0x318>)
 80062cc:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_5 += Offset_5;
 80062d0:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <EXT12_IRQHandler+0x378>)
 80062d2:	edd3 7a00 	vldr	s15, [r3]
 80062d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80062da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062de:	edc7 7a03 	vstr	s15, [r7, #12]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	3301      	adds	r3, #1
 80062e6:	72fb      	strb	r3, [r7, #11]
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	2b13      	cmp	r3, #19
 80062ec:	d9e3      	bls.n	80062b6 <EXT12_IRQHandler+0x276>
		}

	  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 80062ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80062f2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80062f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062fa:	4b2f      	ldr	r3, [pc, #188]	; (80063b8 <EXT12_IRQHandler+0x378>)
 80062fc:	edc3 7a00 	vstr	s15, [r3]
	  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 8006300:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <EXT12_IRQHandler+0x36c>)
 8006302:	2201      	movs	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]

	  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 8006306:	4b2c      	ldr	r3, [pc, #176]	; (80063b8 <EXT12_IRQHandler+0x378>)
 8006308:	edd3 7a00 	vldr	s15, [r3]
 800630c:	eeb0 0a67 	vmov.f32	s0, s15
 8006310:	482a      	ldr	r0, [pc, #168]	; (80063bc <EXT12_IRQHandler+0x37c>)
 8006312:	f7fc fbe7 	bl	8002ae4 <ADC3_IN1_SD_BL>
 8006316:	eef0 7a40 	vmov.f32	s15, s0
 800631a:	4b29      	ldr	r3, [pc, #164]	; (80063c0 <EXT12_IRQHandler+0x380>)
 800631c:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_6_Calculated==0)
 8006320:	4b28      	ldr	r3, [pc, #160]	; (80063c4 <EXT12_IRQHandler+0x384>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 8084 	bne.w	8006432 <EXT12_IRQHandler+0x3f2>
	{
	  float32_t OffsetSum_6;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800632a:	2300      	movs	r3, #0
 800632c:	70fb      	strb	r3, [r7, #3]
 800632e:	e064      	b.n	80063fa <EXT12_IRQHandler+0x3ba>
 8006330:	2000be58 	.word	0x2000be58
 8006334:	2000b50c 	.word	0x2000b50c
 8006338:	2001b644 	.word	0x2001b644
 800633c:	2000be5c 	.word	0x2000be5c
 8006340:	2000b578 	.word	0x2000b578
 8006344:	2000be60 	.word	0x2000be60
 8006348:	2000b5e4 	.word	0x2000b5e4
 800634c:	2001b660 	.word	0x2001b660
 8006350:	2000be64 	.word	0x2000be64
 8006354:	2000de2c 	.word	0x2000de2c
 8006358:	2001b648 	.word	0x2001b648
 800635c:	2000fdf4 	.word	0x2000fdf4
 8006360:	2001b668 	.word	0x2001b668
 8006364:	2001b661 	.word	0x2001b661
 8006368:	2000c3b0 	.word	0x2000c3b0
 800636c:	2000e378 	.word	0x2000e378
 8006370:	2001b64c 	.word	0x2001b64c
 8006374:	20010340 	.word	0x20010340
 8006378:	2001b66c 	.word	0x2001b66c
 800637c:	2001b662 	.word	0x2001b662
 8006380:	2000c8fc 	.word	0x2000c8fc
 8006384:	2000e8c4 	.word	0x2000e8c4
 8006388:	2001b650 	.word	0x2001b650
 800638c:	2001088c 	.word	0x2001088c
 8006390:	2001b670 	.word	0x2001b670
 8006394:	2001b663 	.word	0x2001b663
 8006398:	2000ce48 	.word	0x2000ce48
 800639c:	2000ee10 	.word	0x2000ee10
 80063a0:	2001b654 	.word	0x2001b654
 80063a4:	20010dd8 	.word	0x20010dd8
 80063a8:	2001b674 	.word	0x2001b674
 80063ac:	2001b664 	.word	0x2001b664
 80063b0:	2000d394 	.word	0x2000d394
 80063b4:	2000f35c 	.word	0x2000f35c
 80063b8:	2001b658 	.word	0x2001b658
 80063bc:	20011324 	.word	0x20011324
 80063c0:	2001b678 	.word	0x2001b678
 80063c4:	2001b665 	.word	0x2001b665
		{

			update_ADC3_IN2_FO_biquad_filter();
 80063c8:	f7fc f924 	bl	8002614 <update_ADC3_IN2_FO_biquad_filter>
			MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 80063cc:	481c      	ldr	r0, [pc, #112]	; (8006440 <EXT12_IRQHandler+0x400>)
 80063ce:	f7fb ff0b 	bl	80021e8 <MA_ADC3_IN2_Update>


			Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 80063d2:	481c      	ldr	r0, [pc, #112]	; (8006444 <EXT12_IRQHandler+0x404>)
 80063d4:	f7fc fa26 	bl	8002824 <ADC3_IN2_OffsetCalc>
 80063d8:	eef0 7a40 	vmov.f32	s15, s0
 80063dc:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <EXT12_IRQHandler+0x408>)
 80063de:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_6 += Offset_6;
 80063e2:	4b19      	ldr	r3, [pc, #100]	; (8006448 <EXT12_IRQHandler+0x408>)
 80063e4:	edd3 7a00 	vldr	s15, [r3]
 80063e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80063ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f0:	edc7 7a01 	vstr	s15, [r7, #4]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	3301      	adds	r3, #1
 80063f8:	70fb      	strb	r3, [r7, #3]
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	2b13      	cmp	r3, #19
 80063fe:	d9e3      	bls.n	80063c8 <EXT12_IRQHandler+0x388>
		}

	  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 8006400:	ed97 7a01 	vldr	s14, [r7, #4]
 8006404:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <EXT12_IRQHandler+0x408>)
 800640e:	edc3 7a00 	vstr	s15, [r3]
	  Offset_6_Calculated = 1;
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <EXT12_IRQHandler+0x40c>)
 8006414:	2201      	movs	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]

	  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <EXT12_IRQHandler+0x408>)
 800641a:	edd3 7a00 	vldr	s15, [r3]
 800641e:	eeb0 0a67 	vmov.f32	s0, s15
 8006422:	480b      	ldr	r0, [pc, #44]	; (8006450 <EXT12_IRQHandler+0x410>)
 8006424:	f7fc fbaa 	bl	8002b7c <ADC3_IN2_SD_BL>
 8006428:	eef0 7a40 	vmov.f32	s15, s0
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <EXT12_IRQHandler+0x414>)
 800642e:	edc3 7a00 	vstr	s15, [r3]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);  // Calls the HAL's callback function
 8006432:	2004      	movs	r0, #4
 8006434:	f003 fd90 	bl	8009f58 <HAL_GPIO_EXTI_IRQHandler>
}
 8006438:	bf00      	nop
 800643a:	3730      	adds	r7, #48	; 0x30
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	2000d8e0 	.word	0x2000d8e0
 8006444:	2000f8a8 	.word	0x2000f8a8
 8006448:	2001b65c 	.word	0x2001b65c
 800644c:	2001b665 	.word	0x2001b665
 8006450:	20011870 	.word	0x20011870
 8006454:	2001b67c 	.word	0x2001b67c

08006458 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Callback function (Called by HAL_GPIO_EXTI_IRQHandler (above))
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2)
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b04      	cmp	r3, #4
 8006466:	d10d      	bne.n	8006484 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		// Turn the LED connected to PE5 on
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8006468:	2201      	movs	r2, #1
 800646a:	2120      	movs	r1, #32
 800646c:	4807      	ldr	r0, [pc, #28]	; (800648c <HAL_GPIO_EXTI_Callback+0x34>)
 800646e:	f003 fd5b 	bl	8009f28 <HAL_GPIO_WritePin>

        // Delay for 2 seconds (2000 milliseconds)
        HAL_Delay(2000);
 8006472:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006476:	f001 f92b 	bl	80076d0 <HAL_Delay>

        // Turn the LED off
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800647a:	2200      	movs	r2, #0
 800647c:	2120      	movs	r1, #32
 800647e:	4803      	ldr	r0, [pc, #12]	; (800648c <HAL_GPIO_EXTI_Callback+0x34>)
 8006480:	f003 fd52 	bl	8009f28 <HAL_GPIO_WritePin>
	}
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	48001000 	.word	0x48001000

08006490 <HAL_ADC_ConvHalfCpltCallback>:

void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064a0:	d123      	bne.n	80064ea <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 80064a2:	f7fe f82d 	bl	8004500 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 80064a6:	4b3c      	ldr	r3, [pc, #240]	; (8006598 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3b      	ldr	r2, [pc, #236]	; (8006598 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 80064b2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80064b6:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 80064ba:	4b37      	ldr	r3, [pc, #220]	; (8006598 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a36      	ldr	r2, [pc, #216]	; (8006598 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064c6:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 80064ca:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80064ce:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 80064d2:	4b31      	ldr	r3, [pc, #196]	; (8006598 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a30      	ldr	r2, [pc, #192]	; (8006598 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80064de:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 80064e2:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 80064e6:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }


	 if (hadc->Instance == ADC2)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2b      	ldr	r2, [pc, #172]	; (800659c <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d123      	bne.n	800653c <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 80064f4:	f7fe f9b8 	bl	8004868 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 80064f8:	4b29      	ldr	r3, [pc, #164]	; (80065a0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8006504:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006508:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800650c:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a23      	ldr	r2, [pc, #140]	; (80065a0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006518:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 800651c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8006520:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8006530:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006534:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8006538:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }

	 if (hadc->Instance == ADC3)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d123      	bne.n	800658e <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 8006546:	f7fe fb43 	bl	8004bd0 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 800654a:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8006556:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800655a:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800656a:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 800656e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8006572:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a0b      	ldr	r2, [pc, #44]	; (80065a8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8006582:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006586:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800658a:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
	   }
};
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	2000be58 	.word	0x2000be58
 800659c:	50000100 	.word	0x50000100
 80065a0:	2000be5c 	.word	0x2000be5c
 80065a4:	50000400 	.word	0x50000400
 80065a8:	2000be60 	.word	0x2000be60

080065ac <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065bc:	d128      	bne.n	8006610 <HAL_ADC_ConvCpltCallback+0x64>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 80065be:	f7fe f873 	bl	80046a8 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 80065c2:	4b43      	ldr	r3, [pc, #268]	; (80066d0 <HAL_ADC_ConvCpltCallback+0x124>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a42      	ldr	r2, [pc, #264]	; (80066d0 <HAL_ADC_ConvCpltCallback+0x124>)
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ce:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80065d2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80065d6:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 80065da:	4b3d      	ldr	r3, [pc, #244]	; (80066d0 <HAL_ADC_ConvCpltCallback+0x124>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <HAL_ADC_ConvCpltCallback+0x124>)
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80065e6:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80065ea:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80065ee:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 80065f2:	4b37      	ldr	r3, [pc, #220]	; (80066d0 <HAL_ADC_ConvCpltCallback+0x124>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a36      	ldr	r2, [pc, #216]	; (80066d0 <HAL_ADC_ConvCpltCallback+0x124>)
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80065fe:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006602:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8006606:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			Buffer_ADC1_Ready = 1; // Sets a flag to zero after the channel specific buffers have been filled
 800660a:	4b32      	ldr	r3, [pc, #200]	; (80066d4 <HAL_ADC_ConvCpltCallback+0x128>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
		}


	  if (hadc->Instance == ADC2)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a30      	ldr	r2, [pc, #192]	; (80066d8 <HAL_ADC_ConvCpltCallback+0x12c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d128      	bne.n	800666c <HAL_ADC_ConvCpltCallback+0xc0>

		{
			 ADC2_DMA_sort_lhb();
 800661a:	f7fe f9f9 	bl	8004a10 <ADC2_DMA_sort_lhb>

			 ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 800661e:	4b2f      	ldr	r3, [pc, #188]	; (80066dc <HAL_ADC_ConvCpltCallback+0x130>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2e      	ldr	r2, [pc, #184]	; (80066dc <HAL_ADC_ConvCpltCallback+0x130>)
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800662e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006632:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8006636:	4b29      	ldr	r3, [pc, #164]	; (80066dc <HAL_ADC_ConvCpltCallback+0x130>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a28      	ldr	r2, [pc, #160]	; (80066dc <HAL_ADC_ConvCpltCallback+0x130>)
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006642:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8006646:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800664a:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800664e:	4b23      	ldr	r3, [pc, #140]	; (80066dc <HAL_ADC_ConvCpltCallback+0x130>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a22      	ldr	r2, [pc, #136]	; (80066dc <HAL_ADC_ConvCpltCallback+0x130>)
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800665a:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 800665e:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8006662:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			 Buffer_ADC2_Ready = 1;
 8006666:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <HAL_ADC_ConvCpltCallback+0x134>)
 8006668:	2201      	movs	r2, #1
 800666a:	701a      	strb	r2, [r3, #0]
		}

	   if (hadc->Instance == ADC3)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1c      	ldr	r2, [pc, #112]	; (80066e4 <HAL_ADC_ConvCpltCallback+0x138>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d128      	bne.n	80066c8 <HAL_ADC_ConvCpltCallback+0x11c>

		{
		     ADC3_DMA_sort_lhb();
 8006676:	f7fe fb7f 	bl	8004d78 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 800667a:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x13c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1a      	ldr	r2, [pc, #104]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006686:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800668a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800668e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a14      	ldr	r2, [pc, #80]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x13c>)
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800669e:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80066a2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80066a6:	f8c2 3e24 	str.w	r3, [r2, #3620]	; 0xe24
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x13c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <HAL_ADC_ConvCpltCallback+0x13c>)
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80066b6:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 80066ba:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 80066be:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538

			 Buffer_ADC3_Ready = 1;
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <HAL_ADC_ConvCpltCallback+0x140>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
		}

};
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	2000be58 	.word	0x2000be58
 80066d4:	2001b6d0 	.word	0x2001b6d0
 80066d8:	50000100 	.word	0x50000100
 80066dc:	2000be5c 	.word	0x2000be5c
 80066e0:	2001b6d1 	.word	0x2001b6d1
 80066e4:	50000400 	.word	0x50000400
 80066e8:	2000be60 	.word	0x2000be60
 80066ec:	2001b6d2 	.word	0x2001b6d2

080066f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066f4:	b672      	cpsid	i
}
 80066f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80066f8:	e7fe      	b.n	80066f8 <Error_Handler+0x8>
	...

080066fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <HAL_MspInit+0x44>)
 8006704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <HAL_MspInit+0x44>)
 8006708:	f043 0301 	orr.w	r3, r3, #1
 800670c:	6613      	str	r3, [r2, #96]	; 0x60
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <HAL_MspInit+0x44>)
 8006710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <HAL_MspInit+0x44>)
 800671c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671e:	4a08      	ldr	r2, [pc, #32]	; (8006740 <HAL_MspInit+0x44>)
 8006720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006724:	6593      	str	r3, [r2, #88]	; 0x58
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_MspInit+0x44>)
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8006732:	f003 fdff 	bl	800a334 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40021000 	.word	0x40021000

08006744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b0a2      	sub	sp, #136	; 0x88
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800674c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	609a      	str	r2, [r3, #8]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800675c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006760:	2250      	movs	r2, #80	; 0x50
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f008 f868 	bl	800e83a <memset>
  if(hadc->Instance==ADC1)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006772:	d169      	bne.n	8006848 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8006774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800677a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800677e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006784:	4618      	mov	r0, r3
 8006786:	f004 fb0f 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8006790:	f7ff ffae 	bl	80066f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006794:	4b64      	ldr	r3, [pc, #400]	; (8006928 <HAL_ADC_MspInit+0x1e4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a63      	ldr	r2, [pc, #396]	; (8006928 <HAL_ADC_MspInit+0x1e4>)
 800679c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800679e:	4b62      	ldr	r3, [pc, #392]	; (8006928 <HAL_ADC_MspInit+0x1e4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d10b      	bne.n	80067be <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80067a6:	4b61      	ldr	r3, [pc, #388]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	4a60      	ldr	r2, [pc, #384]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80067ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067b2:	4b5e      	ldr	r3, [pc, #376]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067ba:	623b      	str	r3, [r7, #32]
 80067bc:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067be:	4b5b      	ldr	r3, [pc, #364]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	4a5a      	ldr	r2, [pc, #360]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067ca:	4b58      	ldr	r3, [pc, #352]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80067cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80067d6:	2303      	movs	r3, #3
 80067d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067da:	2303      	movs	r3, #3
 80067dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80067e6:	4619      	mov	r1, r3
 80067e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067ec:	f003 fa1a 	bl	8009c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80067f0:	4b4f      	ldr	r3, [pc, #316]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 80067f2:	4a50      	ldr	r2, [pc, #320]	; (8006934 <HAL_ADC_MspInit+0x1f0>)
 80067f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80067f6:	4b4e      	ldr	r3, [pc, #312]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 80067f8:	2205      	movs	r2, #5
 80067fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067fc:	4b4c      	ldr	r3, [pc, #304]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006802:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 8006804:	2200      	movs	r2, #0
 8006806:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006808:	4b49      	ldr	r3, [pc, #292]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 800680a:	2280      	movs	r2, #128	; 0x80
 800680c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800680e:	4b48      	ldr	r3, [pc, #288]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 8006810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006814:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006816:	4b46      	ldr	r3, [pc, #280]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 8006818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800681c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800681e:	4b44      	ldr	r3, [pc, #272]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 8006820:	2220      	movs	r2, #32
 8006822:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006824:	4b42      	ldr	r3, [pc, #264]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 8006826:	2200      	movs	r2, #0
 8006828:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800682a:	4841      	ldr	r0, [pc, #260]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 800682c:	f002 fedc 	bl	80095e8 <HAL_DMA_Init>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8006836:	f7ff ff5b 	bl	80066f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a3c      	ldr	r2, [pc, #240]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
 8006840:	4a3b      	ldr	r2, [pc, #236]	; (8006930 <HAL_ADC_MspInit+0x1ec>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8006846:	e0fa      	b.n	8006a3e <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a3a      	ldr	r2, [pc, #232]	; (8006938 <HAL_ADC_MspInit+0x1f4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d178      	bne.n	8006944 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8006858:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800685c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800685e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006862:	4618      	mov	r0, r3
 8006864:	f004 faa0 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800686e:	f7ff ff3f 	bl	80066f0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006872:	4b2d      	ldr	r3, [pc, #180]	; (8006928 <HAL_ADC_MspInit+0x1e4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a2b      	ldr	r2, [pc, #172]	; (8006928 <HAL_ADC_MspInit+0x1e4>)
 800687a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800687c:	4b2a      	ldr	r3, [pc, #168]	; (8006928 <HAL_ADC_MspInit+0x1e4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d10b      	bne.n	800689c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006884:	4b29      	ldr	r3, [pc, #164]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 8006886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006888:	4a28      	ldr	r2, [pc, #160]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 800688a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800688e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006890:	4b26      	ldr	r3, [pc, #152]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 8006892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800689c:	4b23      	ldr	r3, [pc, #140]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 800689e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a0:	4a22      	ldr	r2, [pc, #136]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068a8:	4b20      	ldr	r3, [pc, #128]	; (800692c <HAL_ADC_MspInit+0x1e8>)
 80068aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068b4:	23c0      	movs	r3, #192	; 0xc0
 80068b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068b8:	2303      	movs	r3, #3
 80068ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80068c4:	4619      	mov	r1, r3
 80068c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068ca:	f003 f9ab 	bl	8009c24 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 80068ce:	4b1b      	ldr	r3, [pc, #108]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068d0:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <HAL_ADC_MspInit+0x1fc>)
 80068d2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80068d4:	4b19      	ldr	r3, [pc, #100]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068d6:	2224      	movs	r2, #36	; 0x24
 80068d8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068da:	4b18      	ldr	r3, [pc, #96]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068dc:	2200      	movs	r2, #0
 80068de:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80068e0:	4b16      	ldr	r3, [pc, #88]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80068e6:	4b15      	ldr	r3, [pc, #84]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068e8:	2280      	movs	r2, #128	; 0x80
 80068ea:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068f2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068f4:	4b11      	ldr	r3, [pc, #68]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068fa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80068fc:	4b0f      	ldr	r3, [pc, #60]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 80068fe:	2220      	movs	r2, #32
 8006900:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006902:	4b0e      	ldr	r3, [pc, #56]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 8006904:	2200      	movs	r2, #0
 8006906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006908:	480c      	ldr	r0, [pc, #48]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 800690a:	f002 fe6d 	bl	80095e8 <HAL_DMA_Init>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8006914:	f7ff feec 	bl	80066f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a08      	ldr	r2, [pc, #32]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
 800691e:	4a07      	ldr	r2, [pc, #28]	; (800693c <HAL_ADC_MspInit+0x1f8>)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006924:	e08b      	b.n	8006a3e <HAL_ADC_MspInit+0x2fa>
 8006926:	bf00      	nop
 8006928:	2001b6d4 	.word	0x2001b6d4
 800692c:	40021000 	.word	0x40021000
 8006930:	2000b650 	.word	0x2000b650
 8006934:	40020008 	.word	0x40020008
 8006938:	50000100 	.word	0x50000100
 800693c:	2000b6b0 	.word	0x2000b6b0
 8006940:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a3f      	ldr	r2, [pc, #252]	; (8006a48 <HAL_ADC_MspInit+0x304>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d177      	bne.n	8006a3e <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800694e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8006954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006958:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800695a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f004 fa22 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 800696a:	f7ff fec1 	bl	80066f0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800696e:	4b37      	ldr	r3, [pc, #220]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 8006970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006972:	4a36      	ldr	r2, [pc, #216]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 8006974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800697a:	4b34      	ldr	r3, [pc, #208]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 800697c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006986:	4b31      	ldr	r3, [pc, #196]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 8006988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698a:	4a30      	ldr	r2, [pc, #192]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006992:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 8006994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800699e:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 80069a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a2:	4a2a      	ldr	r2, [pc, #168]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 80069a4:	f043 0310 	orr.w	r3, r3, #16
 80069a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069aa:	4b28      	ldr	r3, [pc, #160]	; (8006a4c <HAL_ADC_MspInit+0x308>)
 80069ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80069b6:	2302      	movs	r3, #2
 80069b8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069ba:	2303      	movs	r3, #3
 80069bc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80069c6:	4619      	mov	r1, r3
 80069c8:	4821      	ldr	r0, [pc, #132]	; (8006a50 <HAL_ADC_MspInit+0x30c>)
 80069ca:	f003 f92b 	bl	8009c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069d4:	2303      	movs	r3, #3
 80069d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80069e0:	4619      	mov	r1, r3
 80069e2:	481c      	ldr	r0, [pc, #112]	; (8006a54 <HAL_ADC_MspInit+0x310>)
 80069e4:	f003 f91e 	bl	8009c24 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 80069e8:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 80069ea:	4a1c      	ldr	r2, [pc, #112]	; (8006a5c <HAL_ADC_MspInit+0x318>)
 80069ec:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80069ee:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 80069f0:	2225      	movs	r2, #37	; 0x25
 80069f2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069f4:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80069fa:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006a00:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a02:	2280      	movs	r2, #128	; 0x80
 8006a04:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a0c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a14:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a18:	2220      	movs	r2, #32
 8006a1a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8006a1c:	4b0e      	ldr	r3, [pc, #56]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8006a22:	480d      	ldr	r0, [pc, #52]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a24:	f002 fde0 	bl	80095e8 <HAL_DMA_Init>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8006a2e:	f7ff fe5f 	bl	80066f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
 8006a38:	4a07      	ldr	r2, [pc, #28]	; (8006a58 <HAL_ADC_MspInit+0x314>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006a3e:	bf00      	nop
 8006a40:	3788      	adds	r7, #136	; 0x88
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	50000400 	.word	0x50000400
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	48000400 	.word	0x48000400
 8006a54:	48001000 	.word	0x48001000
 8006a58:	2000b710 	.word	0x2000b710
 8006a5c:	40020408 	.word	0x40020408

08006a60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	605a      	str	r2, [r3, #4]
 8006a72:	609a      	str	r2, [r3, #8]
 8006a74:	60da      	str	r2, [r3, #12]
 8006a76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a40      	ldr	r2, [pc, #256]	; (8006b80 <HAL_DAC_MspInit+0x120>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d17a      	bne.n	8006b78 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006a82:	4b40      	ldr	r3, [pc, #256]	; (8006b84 <HAL_DAC_MspInit+0x124>)
 8006a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a86:	4a3f      	ldr	r2, [pc, #252]	; (8006b84 <HAL_DAC_MspInit+0x124>)
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a8e:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <HAL_DAC_MspInit+0x124>)
 8006a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a9a:	4b3a      	ldr	r3, [pc, #232]	; (8006b84 <HAL_DAC_MspInit+0x124>)
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9e:	4a39      	ldr	r2, [pc, #228]	; (8006b84 <HAL_DAC_MspInit+0x124>)
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aa6:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_DAC_MspInit+0x124>)
 8006aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006ab2:	2330      	movs	r3, #48	; 0x30
 8006ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ac8:	f003 f8ac 	bl	8009c24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8006acc:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006ace:	4a2f      	ldr	r2, [pc, #188]	; (8006b8c <HAL_DAC_MspInit+0x12c>)
 8006ad0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006ad2:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006ad4:	2206      	movs	r2, #6
 8006ad6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ad8:	4b2b      	ldr	r3, [pc, #172]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006ada:	2210      	movs	r2, #16
 8006adc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ade:	4b2a      	ldr	r3, [pc, #168]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006ae4:	4b28      	ldr	r3, [pc, #160]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006aea:	4b27      	ldr	r3, [pc, #156]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006af2:	4b25      	ldr	r3, [pc, #148]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006afa:	4b23      	ldr	r3, [pc, #140]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006afc:	2220      	movs	r2, #32
 8006afe:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006b00:	4b21      	ldr	r3, [pc, #132]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006b06:	4820      	ldr	r0, [pc, #128]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006b08:	f002 fd6e 	bl	80095e8 <HAL_DMA_Init>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006b12:	f7ff fded 	bl	80066f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a1b      	ldr	r2, [pc, #108]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006b1a:	609a      	str	r2, [r3, #8]
 8006b1c:	4a1a      	ldr	r2, [pc, #104]	; (8006b88 <HAL_DAC_MspInit+0x128>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA2_Channel6;
 8006b22:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b24:	4a1b      	ldr	r2, [pc, #108]	; (8006b94 <HAL_DAC_MspInit+0x134>)
 8006b26:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8006b28:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b2a:	2207      	movs	r2, #7
 8006b2c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b2e:	4b18      	ldr	r3, [pc, #96]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b30:	2210      	movs	r2, #16
 8006b32:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b34:	4b16      	ldr	r3, [pc, #88]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b3c:	2280      	movs	r2, #128	; 0x80
 8006b3e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b40:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b46:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b48:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8006b50:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b52:	2220      	movs	r2, #32
 8006b54:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006b56:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8006b5c:	480c      	ldr	r0, [pc, #48]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b5e:	f002 fd43 	bl	80095e8 <HAL_DMA_Init>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8006b68:	f7ff fdc2 	bl	80066f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a08      	ldr	r2, [pc, #32]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b70:	60da      	str	r2, [r3, #12]
 8006b72:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <HAL_DAC_MspInit+0x130>)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006b78:	bf00      	nop
 8006b7a:	3728      	adds	r7, #40	; 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	50000800 	.word	0x50000800
 8006b84:	40021000 	.word	0x40021000
 8006b88:	2000b784 	.word	0x2000b784
 8006b8c:	40020030 	.word	0x40020030
 8006b90:	2000b7e4 	.word	0x2000b7e4
 8006b94:	4002046c 	.word	0x4002046c

08006b98 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <HAL_FMAC_MspInit+0x38>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <HAL_FMAC_MspInit+0x3c>)
 8006bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bae:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <HAL_FMAC_MspInit+0x3c>)
 8006bb0:	f043 0310 	orr.w	r3, r3, #16
 8006bb4:	6493      	str	r3, [r2, #72]	; 0x48
 8006bb6:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <HAL_FMAC_MspInit+0x3c>)
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	f003 0310 	and.w	r3, r3, #16
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40021400 	.word	0x40021400
 8006bd4:	40021000 	.word	0x40021000

08006bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b0a2      	sub	sp, #136	; 0x88
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006be0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	605a      	str	r2, [r3, #4]
 8006bea:	609a      	str	r2, [r3, #8]
 8006bec:	60da      	str	r2, [r3, #12]
 8006bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bf4:	2250      	movs	r2, #80	; 0x50
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f007 fe1e 	bl	800e83a <memset>
  if(hi2c->Instance==I2C1)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4aa0      	ldr	r2, [pc, #640]	; (8006e84 <HAL_I2C_MspInit+0x2ac>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d164      	bne.n	8006cd2 <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f004 f8c7 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006c20:	f7ff fd66 	bl	80066f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c24:	4b98      	ldr	r3, [pc, #608]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	4a97      	ldr	r2, [pc, #604]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006c2a:	f043 0302 	orr.w	r3, r3, #2
 8006c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c30:	4b95      	ldr	r3, [pc, #596]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006c3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006c40:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c42:	2312      	movs	r3, #18
 8006c44:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c50:	2304      	movs	r3, #4
 8006c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	488b      	ldr	r0, [pc, #556]	; (8006e8c <HAL_I2C_MspInit+0x2b4>)
 8006c5e:	f002 ffe1 	bl	8009c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c62:	4b89      	ldr	r3, [pc, #548]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c66:	4a88      	ldr	r2, [pc, #544]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c6e:	4b86      	ldr	r3, [pc, #536]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8006c7a:	4b85      	ldr	r3, [pc, #532]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006c7c:	4a85      	ldr	r2, [pc, #532]	; (8006e94 <HAL_I2C_MspInit+0x2bc>)
 8006c7e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8006c80:	4b83      	ldr	r3, [pc, #524]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006c82:	2211      	movs	r2, #17
 8006c84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c86:	4b82      	ldr	r3, [pc, #520]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006c88:	2210      	movs	r2, #16
 8006c8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c8c:	4b80      	ldr	r3, [pc, #512]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c92:	4b7f      	ldr	r3, [pc, #508]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006c94:	2280      	movs	r2, #128	; 0x80
 8006c96:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006c98:	4b7d      	ldr	r3, [pc, #500]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ca0:	4b7b      	ldr	r3, [pc, #492]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ca6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8006ca8:	4b79      	ldr	r3, [pc, #484]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006caa:	2220      	movs	r2, #32
 8006cac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006cae:	4b78      	ldr	r3, [pc, #480]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006cb4:	4876      	ldr	r0, [pc, #472]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006cb6:	f002 fc97 	bl	80095e8 <HAL_DMA_Init>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_MspInit+0xec>
    {
      Error_Handler();
 8006cc0:	f7ff fd16 	bl	80066f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a72      	ldr	r2, [pc, #456]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8006cca:	4a71      	ldr	r2, [pc, #452]	; (8006e90 <HAL_I2C_MspInit+0x2b8>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006cd0:	e0d4      	b.n	8006e7c <HAL_I2C_MspInit+0x2a4>
  else if(hi2c->Instance==I2C2)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a70      	ldr	r2, [pc, #448]	; (8006e98 <HAL_I2C_MspInit+0x2c0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d165      	bne.n	8006da8 <HAL_I2C_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006cdc:	2380      	movs	r3, #128	; 0x80
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f004 f85d 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_I2C_MspInit+0x120>
      Error_Handler();
 8006cf4:	f7ff fcfc 	bl	80066f0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf8:	4b63      	ldr	r3, [pc, #396]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfc:	4a62      	ldr	r2, [pc, #392]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d04:	4b60      	ldr	r3, [pc, #384]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d14:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d16:	2312      	movs	r3, #18
 8006d18:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006d24:	2304      	movs	r3, #4
 8006d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d34:	f002 ff76 	bl	8009c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006d38:	4b53      	ldr	r3, [pc, #332]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3c:	4a52      	ldr	r2, [pc, #328]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006d3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d42:	6593      	str	r3, [r2, #88]	; 0x58
 8006d44:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	697b      	ldr	r3, [r7, #20]
    hdma_i2c2_tx.Instance = DMA2_Channel5;
 8006d50:	4b52      	ldr	r3, [pc, #328]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d52:	4a53      	ldr	r2, [pc, #332]	; (8006ea0 <HAL_I2C_MspInit+0x2c8>)
 8006d54:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8006d56:	4b51      	ldr	r3, [pc, #324]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d58:	2213      	movs	r2, #19
 8006d5a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d5c:	4b4f      	ldr	r3, [pc, #316]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d5e:	2210      	movs	r2, #16
 8006d60:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d62:	4b4e      	ldr	r3, [pc, #312]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d68:	4b4c      	ldr	r3, [pc, #304]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d6e:	4b4b      	ldr	r3, [pc, #300]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d74:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d76:	4b49      	ldr	r3, [pc, #292]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d7c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_CIRCULAR;
 8006d7e:	4b47      	ldr	r3, [pc, #284]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d80:	2220      	movs	r2, #32
 8006d82:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d84:	4b45      	ldr	r3, [pc, #276]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8006d8a:	4844      	ldr	r0, [pc, #272]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d8c:	f002 fc2c 	bl	80095e8 <HAL_DMA_Init>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_I2C_MspInit+0x1c2>
      Error_Handler();
 8006d96:	f7ff fcab 	bl	80066f0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a3f      	ldr	r2, [pc, #252]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8006da0:	4a3e      	ldr	r2, [pc, #248]	; (8006e9c <HAL_I2C_MspInit+0x2c4>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006da6:	e069      	b.n	8006e7c <HAL_I2C_MspInit+0x2a4>
  else if(hi2c->Instance==I2C3)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a3d      	ldr	r2, [pc, #244]	; (8006ea4 <HAL_I2C_MspInit+0x2cc>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d164      	bne.n	8006e7c <HAL_I2C_MspInit+0x2a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8006db8:	2300      	movs	r3, #0
 8006dba:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f003 fff1 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 8006dcc:	f7ff fc90 	bl	80066f0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dd0:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd4:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006dd6:	f043 0304 	orr.w	r3, r3, #4
 8006dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ddc:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006de8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006dec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dee:	2312      	movs	r3, #18
 8006df0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e06:	4619      	mov	r1, r3
 8006e08:	4827      	ldr	r0, [pc, #156]	; (8006ea8 <HAL_I2C_MspInit+0x2d0>)
 8006e0a:	f002 ff0b 	bl	8009c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006e0e:	4b1e      	ldr	r3, [pc, #120]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e12:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e18:	6593      	str	r3, [r2, #88]	; 0x58
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <HAL_I2C_MspInit+0x2b0>)
 8006e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c3_tx.Instance = DMA2_Channel7;
 8006e26:	4b21      	ldr	r3, [pc, #132]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e28:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <HAL_I2C_MspInit+0x2d8>)
 8006e2a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8006e2c:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e2e:	2215      	movs	r2, #21
 8006e30:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e32:	4b1e      	ldr	r3, [pc, #120]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e34:	2210      	movs	r2, #16
 8006e36:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e38:	4b1c      	ldr	r3, [pc, #112]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e3e:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e40:	2280      	movs	r2, #128	; 0x80
 8006e42:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e44:	4b19      	ldr	r3, [pc, #100]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e4c:	4b17      	ldr	r3, [pc, #92]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e52:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_CIRCULAR;
 8006e54:	4b15      	ldr	r3, [pc, #84]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e56:	2220      	movs	r2, #32
 8006e58:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e5a:	4b14      	ldr	r3, [pc, #80]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8006e60:	4812      	ldr	r0, [pc, #72]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e62:	f002 fbc1 	bl	80095e8 <HAL_DMA_Init>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <HAL_I2C_MspInit+0x298>
      Error_Handler();
 8006e6c:	f7ff fc40 	bl	80066f0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a0e      	ldr	r2, [pc, #56]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
 8006e76:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <HAL_I2C_MspInit+0x2d4>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006e7c:	bf00      	nop
 8006e7e:	3788      	adds	r7, #136	; 0x88
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40005400 	.word	0x40005400
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	48000400 	.word	0x48000400
 8006e90:	2000b978 	.word	0x2000b978
 8006e94:	40020044 	.word	0x40020044
 8006e98:	40005800 	.word	0x40005800
 8006e9c:	2000b9d8 	.word	0x2000b9d8
 8006ea0:	40020458 	.word	0x40020458
 8006ea4:	40007800 	.word	0x40007800
 8006ea8:	48000800 	.word	0x48000800
 8006eac:	2000ba38 	.word	0x2000ba38
 8006eb0:	40020480 	.word	0x40020480

08006eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <HAL_TIM_Base_MspInit+0x80>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d10c      	bne.n	8006ee0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006ec6:	4b1c      	ldr	r3, [pc, #112]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eca:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006ecc:	f043 0310 	orr.w	r3, r3, #16
 8006ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ed2:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8006ede:	e022      	b.n	8006f26 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a15      	ldr	r2, [pc, #84]	; (8006f3c <HAL_TIM_Base_MspInit+0x88>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d10c      	bne.n	8006f04 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eee:	4a12      	ldr	r2, [pc, #72]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006ef0:	f043 0320 	orr.w	r3, r3, #32
 8006ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	693b      	ldr	r3, [r7, #16]
}
 8006f02:	e010      	b.n	8006f26 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a0d      	ldr	r2, [pc, #52]	; (8006f40 <HAL_TIM_Base_MspInit+0x8c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d10b      	bne.n	8006f26 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f18:	6613      	str	r3, [r2, #96]	; 0x60
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <HAL_TIM_Base_MspInit+0x84>)
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40001000 	.word	0x40001000
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	40001400 	.word	0x40001400
 8006f40:	40015000 	.word	0x40015000

08006f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b0a4      	sub	sp, #144	; 0x90
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	605a      	str	r2, [r3, #4]
 8006f56:	609a      	str	r2, [r3, #8]
 8006f58:	60da      	str	r2, [r3, #12]
 8006f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f60:	2250      	movs	r2, #80	; 0x50
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f007 fc68 	bl	800e83a <memset>
  if(huart->Instance==USART1)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a7b      	ldr	r2, [pc, #492]	; (800715c <HAL_UART_MspInit+0x218>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d165      	bne.n	8007040 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006f74:	2301      	movs	r3, #1
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f80:	4618      	mov	r0, r3
 8006f82:	f003 ff11 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006f8c:	f7ff fbb0 	bl	80066f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f90:	4b73      	ldr	r3, [pc, #460]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8006f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f94:	4a72      	ldr	r2, [pc, #456]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8006f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8006f9c:	4b70      	ldr	r3, [pc, #448]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8006f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fa8:	4b6d      	ldr	r3, [pc, #436]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8006faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fac:	4a6c      	ldr	r2, [pc, #432]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8006fae:	f043 0304 	orr.w	r3, r3, #4
 8006fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fb4:	4b6a      	ldr	r3, [pc, #424]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8006fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fc0:	2330      	movs	r3, #48	; 0x30
 8006fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006fd6:	2307      	movs	r3, #7
 8006fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4860      	ldr	r0, [pc, #384]	; (8007164 <HAL_UART_MspInit+0x220>)
 8006fe4:	f002 fe1e 	bl	8009c24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8006fe8:	4b5f      	ldr	r3, [pc, #380]	; (8007168 <HAL_UART_MspInit+0x224>)
 8006fea:	4a60      	ldr	r2, [pc, #384]	; (800716c <HAL_UART_MspInit+0x228>)
 8006fec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006fee:	4b5e      	ldr	r3, [pc, #376]	; (8007168 <HAL_UART_MspInit+0x224>)
 8006ff0:	2219      	movs	r2, #25
 8006ff2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ff4:	4b5c      	ldr	r3, [pc, #368]	; (8007168 <HAL_UART_MspInit+0x224>)
 8006ff6:	2210      	movs	r2, #16
 8006ff8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ffa:	4b5b      	ldr	r3, [pc, #364]	; (8007168 <HAL_UART_MspInit+0x224>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007000:	4b59      	ldr	r3, [pc, #356]	; (8007168 <HAL_UART_MspInit+0x224>)
 8007002:	2280      	movs	r2, #128	; 0x80
 8007004:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007006:	4b58      	ldr	r3, [pc, #352]	; (8007168 <HAL_UART_MspInit+0x224>)
 8007008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800700e:	4b56      	ldr	r3, [pc, #344]	; (8007168 <HAL_UART_MspInit+0x224>)
 8007010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007014:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007016:	4b54      	ldr	r3, [pc, #336]	; (8007168 <HAL_UART_MspInit+0x224>)
 8007018:	2220      	movs	r2, #32
 800701a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800701c:	4b52      	ldr	r3, [pc, #328]	; (8007168 <HAL_UART_MspInit+0x224>)
 800701e:	2200      	movs	r2, #0
 8007020:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007022:	4851      	ldr	r0, [pc, #324]	; (8007168 <HAL_UART_MspInit+0x224>)
 8007024:	f002 fae0 	bl	80095e8 <HAL_DMA_Init>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800702e:	f7ff fb5f 	bl	80066f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a4c      	ldr	r2, [pc, #304]	; (8007168 <HAL_UART_MspInit+0x224>)
 8007036:	67da      	str	r2, [r3, #124]	; 0x7c
 8007038:	4a4b      	ldr	r2, [pc, #300]	; (8007168 <HAL_UART_MspInit+0x224>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800703e:	e12c      	b.n	800729a <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a4a      	ldr	r2, [pc, #296]	; (8007170 <HAL_UART_MspInit+0x22c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f040 809a 	bne.w	8007180 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800704c:	2302      	movs	r3, #2
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007050:	2300      	movs	r3, #0
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007058:	4618      	mov	r0, r3
 800705a:	f003 fea5 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8007064:	f7ff fb44 	bl	80066f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007068:	4b3d      	ldr	r3, [pc, #244]	; (8007160 <HAL_UART_MspInit+0x21c>)
 800706a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706c:	4a3c      	ldr	r2, [pc, #240]	; (8007160 <HAL_UART_MspInit+0x21c>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007072:	6593      	str	r3, [r2, #88]	; 0x58
 8007074:	4b3a      	ldr	r3, [pc, #232]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007080:	4b37      	ldr	r3, [pc, #220]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8007082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007084:	4a36      	ldr	r2, [pc, #216]	; (8007160 <HAL_UART_MspInit+0x21c>)
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800708c:	4b34      	ldr	r3, [pc, #208]	; (8007160 <HAL_UART_MspInit+0x21c>)
 800708e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007098:	4b31      	ldr	r3, [pc, #196]	; (8007160 <HAL_UART_MspInit+0x21c>)
 800709a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709c:	4a30      	ldr	r2, [pc, #192]	; (8007160 <HAL_UART_MspInit+0x21c>)
 800709e:	f043 0308 	orr.w	r3, r3, #8
 80070a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070a4:	4b2e      	ldr	r3, [pc, #184]	; (8007160 <HAL_UART_MspInit+0x21c>)
 80070a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80070b0:	2304      	movs	r3, #4
 80070b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b4:	2302      	movs	r3, #2
 80070b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070c0:	2300      	movs	r3, #0
 80070c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070c6:	2307      	movs	r3, #7
 80070c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80070d0:	4619      	mov	r1, r3
 80070d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070d6:	f002 fda5 	bl	8009c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070de:	2302      	movs	r3, #2
 80070e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070f0:	2307      	movs	r3, #7
 80070f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80070fa:	4619      	mov	r1, r3
 80070fc:	481d      	ldr	r0, [pc, #116]	; (8007174 <HAL_UART_MspInit+0x230>)
 80070fe:	f002 fd91 	bl	8009c24 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007104:	4a1d      	ldr	r2, [pc, #116]	; (800717c <HAL_UART_MspInit+0x238>)
 8007106:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007108:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <HAL_UART_MspInit+0x234>)
 800710a:	221b      	movs	r2, #27
 800710c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007110:	2210      	movs	r2, #16
 8007112:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007114:	4b18      	ldr	r3, [pc, #96]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007116:	2200      	movs	r2, #0
 8007118:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <HAL_UART_MspInit+0x234>)
 800711c:	2280      	movs	r2, #128	; 0x80
 800711e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007126:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007128:	4b13      	ldr	r3, [pc, #76]	; (8007178 <HAL_UART_MspInit+0x234>)
 800712a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800712e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8007130:	4b11      	ldr	r3, [pc, #68]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007132:	2220      	movs	r2, #32
 8007134:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007136:	4b10      	ldr	r3, [pc, #64]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007138:	2200      	movs	r2, #0
 800713a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800713c:	480e      	ldr	r0, [pc, #56]	; (8007178 <HAL_UART_MspInit+0x234>)
 800713e:	f002 fa53 	bl	80095e8 <HAL_DMA_Init>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8007148:	f7ff fad2 	bl	80066f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a0a      	ldr	r2, [pc, #40]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007150:	67da      	str	r2, [r3, #124]	; 0x7c
 8007152:	4a09      	ldr	r2, [pc, #36]	; (8007178 <HAL_UART_MspInit+0x234>)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007158:	e09f      	b.n	800729a <HAL_UART_MspInit+0x356>
 800715a:	bf00      	nop
 800715c:	40013800 	.word	0x40013800
 8007160:	40021000 	.word	0x40021000
 8007164:	48000800 	.word	0x48000800
 8007168:	2000bd38 	.word	0x2000bd38
 800716c:	4002001c 	.word	0x4002001c
 8007170:	40004400 	.word	0x40004400
 8007174:	48000c00 	.word	0x48000c00
 8007178:	2000bd98 	.word	0x2000bd98
 800717c:	40020058 	.word	0x40020058
  else if(huart->Instance==USART3)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a47      	ldr	r2, [pc, #284]	; (80072a4 <HAL_UART_MspInit+0x360>)
 8007186:	4293      	cmp	r3, r2
 8007188:	f040 8087 	bne.w	800729a <HAL_UART_MspInit+0x356>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800718c:	2304      	movs	r3, #4
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007190:	2300      	movs	r3, #0
 8007192:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007198:	4618      	mov	r0, r3
 800719a:	f003 fe05 	bl	800ada8 <HAL_RCCEx_PeriphCLKConfig>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <HAL_UART_MspInit+0x264>
      Error_Handler();
 80071a4:	f7ff faa4 	bl	80066f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80071a8:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ac:	4a3e      	ldr	r2, [pc, #248]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071b2:	6593      	str	r3, [r2, #88]	; 0x58
 80071b4:	4b3c      	ldr	r3, [pc, #240]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80071c0:	4b39      	ldr	r3, [pc, #228]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c4:	4a38      	ldr	r2, [pc, #224]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071c6:	f043 0310 	orr.w	r3, r3, #16
 80071ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071cc:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071d8:	4b33      	ldr	r3, [pc, #204]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071dc:	4a32      	ldr	r2, [pc, #200]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071de:	f043 0302 	orr.w	r3, r3, #2
 80071e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071e4:	4b30      	ldr	r3, [pc, #192]	; (80072a8 <HAL_UART_MspInit+0x364>)
 80071e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80071f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f6:	2302      	movs	r3, #2
 80071f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007202:	2300      	movs	r3, #0
 8007204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007208:	2307      	movs	r3, #7
 800720a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800720e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007212:	4619      	mov	r1, r3
 8007214:	4825      	ldr	r0, [pc, #148]	; (80072ac <HAL_UART_MspInit+0x368>)
 8007216:	f002 fd05 	bl	8009c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800721a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800721e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007220:	2302      	movs	r3, #2
 8007222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007226:	2300      	movs	r3, #0
 8007228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007232:	2307      	movs	r3, #7
 8007234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007238:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800723c:	4619      	mov	r1, r3
 800723e:	481c      	ldr	r0, [pc, #112]	; (80072b0 <HAL_UART_MspInit+0x36c>)
 8007240:	f002 fcf0 	bl	8009c24 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA2_Channel4;
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007246:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <HAL_UART_MspInit+0x374>)
 8007248:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800724a:	4b1a      	ldr	r3, [pc, #104]	; (80072b4 <HAL_UART_MspInit+0x370>)
 800724c:	221d      	movs	r2, #29
 800724e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007250:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007252:	2210      	movs	r2, #16
 8007254:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007256:	4b17      	ldr	r3, [pc, #92]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007258:	2200      	movs	r2, #0
 800725a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800725c:	4b15      	ldr	r3, [pc, #84]	; (80072b4 <HAL_UART_MspInit+0x370>)
 800725e:	2280      	movs	r2, #128	; 0x80
 8007260:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007268:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <HAL_UART_MspInit+0x370>)
 800726c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007270:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8007272:	4b10      	ldr	r3, [pc, #64]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007274:	2220      	movs	r2, #32
 8007276:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007278:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <HAL_UART_MspInit+0x370>)
 800727a:	2200      	movs	r2, #0
 800727c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800727e:	480d      	ldr	r0, [pc, #52]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007280:	f002 f9b2 	bl	80095e8 <HAL_DMA_Init>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <HAL_UART_MspInit+0x34a>
      Error_Handler();
 800728a:	f7ff fa31 	bl	80066f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007292:	67da      	str	r2, [r3, #124]	; 0x7c
 8007294:	4a07      	ldr	r2, [pc, #28]	; (80072b4 <HAL_UART_MspInit+0x370>)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6293      	str	r3, [r2, #40]	; 0x28
}
 800729a:	bf00      	nop
 800729c:	3790      	adds	r7, #144	; 0x90
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40004800 	.word	0x40004800
 80072a8:	40021000 	.word	0x40021000
 80072ac:	48001000 	.word	0x48001000
 80072b0:	48000400 	.word	0x48000400
 80072b4:	2000bdf8 	.word	0x2000bdf8
 80072b8:	40020444 	.word	0x40020444

080072bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80072c0:	e7fe      	b.n	80072c0 <NMI_Handler+0x4>

080072c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072c2:	b480      	push	{r7}
 80072c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072c6:	e7fe      	b.n	80072c6 <HardFault_Handler+0x4>

080072c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072cc:	e7fe      	b.n	80072cc <MemManage_Handler+0x4>

080072ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072ce:	b480      	push	{r7}
 80072d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072d2:	e7fe      	b.n	80072d2 <BusFault_Handler+0x4>

080072d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072d8:	e7fe      	b.n	80072d8 <UsageFault_Handler+0x4>

080072da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072da:	b480      	push	{r7}
 80072dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072de:	bf00      	nop
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072ec:	bf00      	nop
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072f6:	b480      	push	{r7}
 80072f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072fa:	bf00      	nop
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007308:	f000 f9c4 	bl	8007694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800730c:	bf00      	nop
 800730e:	bd80      	pop	{r7, pc}

08007310 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007314:	4802      	ldr	r0, [pc, #8]	; (8007320 <DMA1_Channel1_IRQHandler+0x10>)
 8007316:	f002 fa8a 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	2000b650 	.word	0x2000b650

08007324 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007328:	4802      	ldr	r0, [pc, #8]	; (8007334 <DMA1_Channel2_IRQHandler+0x10>)
 800732a:	f002 fa80 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	2000bd38 	.word	0x2000bd38

08007338 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800733c:	4802      	ldr	r0, [pc, #8]	; (8007348 <DMA1_Channel3_IRQHandler+0x10>)
 800733e:	f002 fa76 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007342:	bf00      	nop
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	2000b784 	.word	0x2000b784

0800734c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007350:	4802      	ldr	r0, [pc, #8]	; (800735c <DMA1_Channel4_IRQHandler+0x10>)
 8007352:	f002 fa6c 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007356:	bf00      	nop
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	2000b978 	.word	0x2000b978

08007360 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007364:	4802      	ldr	r0, [pc, #8]	; (8007370 <DMA1_Channel5_IRQHandler+0x10>)
 8007366:	f002 fa62 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	2000bd98 	.word	0x2000bd98

08007374 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007378:	4802      	ldr	r0, [pc, #8]	; (8007384 <DMA1_Channel6_IRQHandler+0x10>)
 800737a:	f002 fa58 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800737e:	bf00      	nop
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	2000b6b0 	.word	0x2000b6b0

08007388 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800738c:	4802      	ldr	r0, [pc, #8]	; (8007398 <DMA2_Channel1_IRQHandler+0x10>)
 800738e:	f002 fa4e 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8007392:	bf00      	nop
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	2000b710 	.word	0x2000b710

0800739c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80073a0:	4802      	ldr	r0, [pc, #8]	; (80073ac <DMA2_Channel4_IRQHandler+0x10>)
 80073a2:	f002 fa44 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	2000bdf8 	.word	0x2000bdf8

080073b0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80073b4:	4802      	ldr	r0, [pc, #8]	; (80073c0 <DMA2_Channel5_IRQHandler+0x10>)
 80073b6:	f002 fa3a 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	2000b9d8 	.word	0x2000b9d8

080073c4 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80073c8:	4802      	ldr	r0, [pc, #8]	; (80073d4 <DMA2_Channel6_IRQHandler+0x10>)
 80073ca:	f002 fa30 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	2000b7e4 	.word	0x2000b7e4

080073d8 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80073dc:	4802      	ldr	r0, [pc, #8]	; (80073e8 <DMA2_Channel7_IRQHandler+0x10>)
 80073de:	f002 fa26 	bl	800982e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80073e2:	bf00      	nop
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	2000ba38 	.word	0x2000ba38

080073ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  return 1;
 80073f0:	2301      	movs	r3, #1
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <_kill>:

int _kill(int pid, int sig)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007406:	f007 fa6b 	bl	800e8e0 <__errno>
 800740a:	4603      	mov	r3, r0
 800740c:	2216      	movs	r2, #22
 800740e:	601a      	str	r2, [r3, #0]
  return -1;
 8007410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <_exit>:

void _exit (int status)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007424:	f04f 31ff 	mov.w	r1, #4294967295
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff ffe7 	bl	80073fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800742e:	e7fe      	b.n	800742e <_exit+0x12>

08007430 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e00a      	b.n	8007458 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007442:	f3af 8000 	nop.w
 8007446:	4601      	mov	r1, r0
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	60ba      	str	r2, [r7, #8]
 800744e:	b2ca      	uxtb	r2, r1
 8007450:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3301      	adds	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	dbf0      	blt.n	8007442 <_read+0x12>
  }

  return len;
 8007460:	687b      	ldr	r3, [r7, #4]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	e009      	b.n	8007490 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	60ba      	str	r2, [r7, #8]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	3301      	adds	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	dbf1      	blt.n	800747c <_write+0x12>
  }
  return len;
 8007498:	687b      	ldr	r3, [r7, #4]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_close>:

int _close(int file)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074ca:	605a      	str	r2, [r3, #4]
  return 0;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <_isatty>:

int _isatty(int file)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80074e2:	2301      	movs	r3, #1
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007514:	4a14      	ldr	r2, [pc, #80]	; (8007568 <_sbrk+0x5c>)
 8007516:	4b15      	ldr	r3, [pc, #84]	; (800756c <_sbrk+0x60>)
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007520:	4b13      	ldr	r3, [pc, #76]	; (8007570 <_sbrk+0x64>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007528:	4b11      	ldr	r3, [pc, #68]	; (8007570 <_sbrk+0x64>)
 800752a:	4a12      	ldr	r2, [pc, #72]	; (8007574 <_sbrk+0x68>)
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <_sbrk+0x64>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4413      	add	r3, r2
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	429a      	cmp	r2, r3
 800753a:	d207      	bcs.n	800754c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800753c:	f007 f9d0 	bl	800e8e0 <__errno>
 8007540:	4603      	mov	r3, r0
 8007542:	220c      	movs	r2, #12
 8007544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295
 800754a:	e009      	b.n	8007560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800754c:	4b08      	ldr	r3, [pc, #32]	; (8007570 <_sbrk+0x64>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007552:	4b07      	ldr	r3, [pc, #28]	; (8007570 <_sbrk+0x64>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	4a05      	ldr	r2, [pc, #20]	; (8007570 <_sbrk+0x64>)
 800755c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800755e:	68fb      	ldr	r3, [r7, #12]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	2001c000 	.word	0x2001c000
 800756c:	00000400 	.word	0x00000400
 8007570:	2001b6d8 	.word	0x2001b6d8
 8007574:	2001b830 	.word	0x2001b830

08007578 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <SystemInit+0x20>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007582:	4a05      	ldr	r2, [pc, #20]	; (8007598 <SystemInit+0x20>)
 8007584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	e000ed00 	.word	0xe000ed00

0800759c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800759c:	480d      	ldr	r0, [pc, #52]	; (80075d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800759e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80075a0:	f7ff ffea 	bl	8007578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075a4:	480c      	ldr	r0, [pc, #48]	; (80075d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80075a6:	490d      	ldr	r1, [pc, #52]	; (80075dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80075a8:	4a0d      	ldr	r2, [pc, #52]	; (80075e0 <LoopForever+0xe>)
  movs r3, #0
 80075aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80075ac:	e002      	b.n	80075b4 <LoopCopyDataInit>

080075ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075b2:	3304      	adds	r3, #4

080075b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075b8:	d3f9      	bcc.n	80075ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80075bc:	4c0a      	ldr	r4, [pc, #40]	; (80075e8 <LoopForever+0x16>)
  movs r3, #0
 80075be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075c0:	e001      	b.n	80075c6 <LoopFillZerobss>

080075c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075c4:	3204      	adds	r2, #4

080075c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075c8:	d3fb      	bcc.n	80075c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80075ca:	f007 f98f 	bl	800e8ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80075ce:	f7fd fcb3 	bl	8004f38 <main>

080075d2 <LoopForever>:

LoopForever:
    b LoopForever
 80075d2:	e7fe      	b.n	80075d2 <LoopForever>
  ldr   r0, =_estack
 80075d4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80075d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075dc:	20007a50 	.word	0x20007a50
  ldr r2, =_sidata
 80075e0:	08024db0 	.word	0x08024db0
  ldr r2, =_sbss
 80075e4:	20007a50 	.word	0x20007a50
  ldr r4, =_ebss
 80075e8:	2001b82c 	.word	0x2001b82c

080075ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80075ec:	e7fe      	b.n	80075ec <ADC1_2_IRQHandler>

080075ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075f8:	2003      	movs	r0, #3
 80075fa:	f001 fc5f 	bl	8008ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80075fe:	200f      	movs	r0, #15
 8007600:	f000 f80e 	bl	8007620 <HAL_InitTick>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	71fb      	strb	r3, [r7, #7]
 800760e:	e001      	b.n	8007614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007610:	f7ff f874 	bl	80066fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007614:	79fb      	ldrb	r3, [r7, #7]

}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800762c:	4b16      	ldr	r3, [pc, #88]	; (8007688 <HAL_InitTick+0x68>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d022      	beq.n	800767a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007634:	4b15      	ldr	r3, [pc, #84]	; (800768c <HAL_InitTick+0x6c>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	4b13      	ldr	r3, [pc, #76]	; (8007688 <HAL_InitTick+0x68>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007640:	fbb1 f3f3 	udiv	r3, r1, r3
 8007644:	fbb2 f3f3 	udiv	r3, r2, r3
 8007648:	4618      	mov	r0, r3
 800764a:	f001 fc6a 	bl	8008f22 <HAL_SYSTICK_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10f      	bne.n	8007674 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d809      	bhi.n	800766e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800765a:	2200      	movs	r2, #0
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	f04f 30ff 	mov.w	r0, #4294967295
 8007662:	f001 fc36 	bl	8008ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007666:	4a0a      	ldr	r2, [pc, #40]	; (8007690 <HAL_InitTick+0x70>)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	e007      	b.n	800767e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
 8007672:	e004      	b.n	800767e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
 8007678:	e001      	b.n	800767e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20007874 	.word	0x20007874
 800768c:	2000786c 	.word	0x2000786c
 8007690:	20007870 	.word	0x20007870

08007694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <HAL_IncTick+0x1c>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <HAL_IncTick+0x20>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4413      	add	r3, r2
 80076a2:	4a03      	ldr	r2, [pc, #12]	; (80076b0 <HAL_IncTick+0x1c>)
 80076a4:	6013      	str	r3, [r2, #0]
}
 80076a6:	bf00      	nop
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	2001b6dc 	.word	0x2001b6dc
 80076b4:	20007874 	.word	0x20007874

080076b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  return uwTick;
 80076bc:	4b03      	ldr	r3, [pc, #12]	; (80076cc <HAL_GetTick+0x14>)
 80076be:	681b      	ldr	r3, [r3, #0]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	2001b6dc 	.word	0x2001b6dc

080076d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076d8:	f7ff ffee 	bl	80076b8 <HAL_GetTick>
 80076dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d004      	beq.n	80076f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <HAL_Delay+0x40>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076f4:	bf00      	nop
 80076f6:	f7ff ffdf 	bl	80076b8 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	429a      	cmp	r2, r3
 8007704:	d8f7      	bhi.n	80076f6 <HAL_Delay+0x26>
  {
  }
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20007874 	.word	0x20007874

08007714 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	609a      	str	r2, [r3, #8]
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	609a      	str	r2, [r3, #8]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3360      	adds	r3, #96	; 0x60
 800778e:	461a      	mov	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <LL_ADC_SetOffset+0x44>)
 800779e:	4013      	ands	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	4313      	orrs	r3, r2
 80077ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80077b4:	bf00      	nop
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	03fff000 	.word	0x03fff000

080077c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3360      	adds	r3, #96	; 0x60
 80077d2:	461a      	mov	r2, r3
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3360      	adds	r3, #96	; 0x60
 8007800:	461a      	mov	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	431a      	orrs	r2, r3
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800781a:	bf00      	nop
 800781c:	371c      	adds	r7, #28
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007826:	b480      	push	{r7}
 8007828:	b087      	sub	sp, #28
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3360      	adds	r3, #96	; 0x60
 8007836:	461a      	mov	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	431a      	orrs	r2, r3
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007850:	bf00      	nop
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3360      	adds	r3, #96	; 0x60
 800786c:	461a      	mov	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	431a      	orrs	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	615a      	str	r2, [r3, #20]
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80078de:	b480      	push	{r7}
 80078e0:	b087      	sub	sp, #28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3330      	adds	r3, #48	; 0x30
 80078ee:	461a      	mov	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	0a1b      	lsrs	r3, r3, #8
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	f003 030c 	and.w	r3, r3, #12
 80078fa:	4413      	add	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	211f      	movs	r1, #31
 800790a:	fa01 f303 	lsl.w	r3, r1, r3
 800790e:	43db      	mvns	r3, r3
 8007910:	401a      	ands	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0e9b      	lsrs	r3, r3, #26
 8007916:	f003 011f 	and.w	r1, r3, #31
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	fa01 f303 	lsl.w	r3, r1, r3
 8007924:	431a      	orrs	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007936:	b480      	push	{r7}
 8007938:	b087      	sub	sp, #28
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3314      	adds	r3, #20
 8007946:	461a      	mov	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	0e5b      	lsrs	r3, r3, #25
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	4413      	add	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	0d1b      	lsrs	r3, r3, #20
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	2107      	movs	r1, #7
 8007964:	fa01 f303 	lsl.w	r3, r1, r3
 8007968:	43db      	mvns	r3, r3
 800796a:	401a      	ands	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	0d1b      	lsrs	r3, r3, #20
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	fa01 f303 	lsl.w	r3, r1, r3
 800797a:	431a      	orrs	r2, r3
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007980:	bf00      	nop
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079a4:	43db      	mvns	r3, r3
 80079a6:	401a      	ands	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f003 0318 	and.w	r3, r3, #24
 80079ae:	4908      	ldr	r1, [pc, #32]	; (80079d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80079b0:	40d9      	lsrs	r1, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	400b      	ands	r3, r1
 80079b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ba:	431a      	orrs	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	0007ffff 	.word	0x0007ffff

080079d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 031f 	and.w	r3, r3, #31
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6093      	str	r3, [r2, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a28:	d101      	bne.n	8007a2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a78:	d101      	bne.n	8007a7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007aa0:	f043 0201 	orr.w	r2, r3, #1
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <LL_ADC_IsEnabled+0x18>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e000      	b.n	8007ace <LL_ADC_IsEnabled+0x1a>
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007aee:	f043 0204 	orr.w	r2, r3, #4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d101      	bne.n	8007b1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d101      	bne.n	8007b40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007b50:	b590      	push	{r4, r7, lr}
 8007b52:	b089      	sub	sp, #36	; 0x24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e19b      	b.n	8007ea2 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fe fde3 	bl	8006744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff ff3f 	bl	8007a14 <LL_ADC_IsDeepPowerDownEnabled>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff ff25 	bl	80079f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff ff5a 	bl	8007a64 <LL_ADC_IsInternalRegulatorEnabled>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d115      	bne.n	8007be2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff ff3e 	bl	8007a3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007bc0:	4b97      	ldr	r3, [pc, #604]	; (8007e20 <HAL_ADC_Init+0x2d0>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	099b      	lsrs	r3, r3, #6
 8007bc6:	4a97      	ldr	r2, [pc, #604]	; (8007e24 <HAL_ADC_Init+0x2d4>)
 8007bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bcc:	099b      	lsrs	r3, r3, #6
 8007bce:	3301      	adds	r3, #1
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007bd4:	e002      	b.n	8007bdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f9      	bne.n	8007bd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff ff3c 	bl	8007a64 <LL_ADC_IsInternalRegulatorEnabled>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10d      	bne.n	8007c0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf6:	f043 0210 	orr.w	r2, r3, #16
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c02:	f043 0201 	orr.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff ff75 	bl	8007b02 <LL_ADC_REG_IsConversionOngoing>
 8007c18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 8134 	bne.w	8007e90 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f040 8130 	bne.w	8007e90 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007c38:	f043 0202 	orr.w	r2, r3, #2
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff ff35 	bl	8007ab4 <LL_ADC_IsEnabled>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d137      	bne.n	8007cc0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c58:	d004      	beq.n	8007c64 <HAL_ADC_Init+0x114>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a72      	ldr	r2, [pc, #456]	; (8007e28 <HAL_ADC_Init+0x2d8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d10f      	bne.n	8007c84 <HAL_ADC_Init+0x134>
 8007c64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007c68:	f7ff ff24 	bl	8007ab4 <LL_ADC_IsEnabled>
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	486e      	ldr	r0, [pc, #440]	; (8007e28 <HAL_ADC_Init+0x2d8>)
 8007c70:	f7ff ff20 	bl	8007ab4 <LL_ADC_IsEnabled>
 8007c74:	4603      	mov	r3, r0
 8007c76:	4323      	orrs	r3, r4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e008      	b.n	8007c96 <HAL_ADC_Init+0x146>
 8007c84:	4869      	ldr	r0, [pc, #420]	; (8007e2c <HAL_ADC_Init+0x2dc>)
 8007c86:	f7ff ff15 	bl	8007ab4 <LL_ADC_IsEnabled>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d012      	beq.n	8007cc0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ca2:	d004      	beq.n	8007cae <HAL_ADC_Init+0x15e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a5f      	ldr	r2, [pc, #380]	; (8007e28 <HAL_ADC_Init+0x2d8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d101      	bne.n	8007cb2 <HAL_ADC_Init+0x162>
 8007cae:	4a60      	ldr	r2, [pc, #384]	; (8007e30 <HAL_ADC_Init+0x2e0>)
 8007cb0:	e000      	b.n	8007cb4 <HAL_ADC_Init+0x164>
 8007cb2:	4a60      	ldr	r2, [pc, #384]	; (8007e34 <HAL_ADC_Init+0x2e4>)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7ff fd2a 	bl	8007714 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	7f5b      	ldrb	r3, [r3, #29]
 8007cc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007cca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007cd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007cd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d106      	bne.n	8007cfc <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	045b      	lsls	r3, r3, #17
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	4b46      	ldr	r3, [pc, #280]	; (8007e38 <HAL_ADC_Init+0x2e8>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6812      	ldr	r2, [r2, #0]
 8007d26:	69b9      	ldr	r1, [r7, #24]
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff feee 	bl	8007b28 <LL_ADC_INJ_IsConversionOngoing>
 8007d4c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d17b      	bne.n	8007e4c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d178      	bne.n	8007e4c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007d5e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d66:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d76:	f023 0302 	bic.w	r3, r3, #2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6812      	ldr	r2, [r2, #0]
 8007d7e:	69b9      	ldr	r1, [r7, #24]
 8007d80:	430b      	orrs	r3, r1
 8007d82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d017      	beq.n	8007dbc <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691a      	ldr	r2, [r3, #16]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007da4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6911      	ldr	r1, [r2, #16]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	430b      	orrs	r3, r1
 8007db6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007dba:	e013      	b.n	8007de4 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007de0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d126      	bne.n	8007e3c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007df8:	f023 0304 	bic.w	r3, r3, #4
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e04:	4311      	orrs	r1, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007e0a:	4311      	orrs	r1, r2
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e10:	430a      	orrs	r2, r1
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0201 	orr.w	r2, r2, #1
 8007e1c:	611a      	str	r2, [r3, #16]
 8007e1e:	e015      	b.n	8007e4c <HAL_ADC_Init+0x2fc>
 8007e20:	2000786c 	.word	0x2000786c
 8007e24:	053e2d63 	.word	0x053e2d63
 8007e28:	50000100 	.word	0x50000100
 8007e2c:	50000400 	.word	0x50000400
 8007e30:	50000300 	.word	0x50000300
 8007e34:	50000700 	.word	0x50000700
 8007e38:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691a      	ldr	r2, [r3, #16]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0201 	bic.w	r2, r2, #1
 8007e4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d10c      	bne.n	8007e6e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	f023 010f 	bic.w	r1, r3, #15
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8007e6c:	e007      	b.n	8007e7e <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 020f 	bic.w	r2, r2, #15
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	f043 0201 	orr.w	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e8e:	e007      	b.n	8007ea0 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e94:	f043 0210 	orr.w	r2, r3, #16
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3724      	adds	r7, #36	; 0x24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd90      	pop	{r4, r7, pc}
 8007eaa:	bf00      	nop

08007eac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec0:	d004      	beq.n	8007ecc <HAL_ADC_Start_DMA+0x20>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a57      	ldr	r2, [pc, #348]	; (8008024 <HAL_ADC_Start_DMA+0x178>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d101      	bne.n	8007ed0 <HAL_ADC_Start_DMA+0x24>
 8007ecc:	4b56      	ldr	r3, [pc, #344]	; (8008028 <HAL_ADC_Start_DMA+0x17c>)
 8007ece:	e000      	b.n	8007ed2 <HAL_ADC_Start_DMA+0x26>
 8007ed0:	4b56      	ldr	r3, [pc, #344]	; (800802c <HAL_ADC_Start_DMA+0x180>)
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fd7e 	bl	80079d4 <LL_ADC_GetMultimode>
 8007ed8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fe0f 	bl	8007b02 <LL_ADC_REG_IsConversionOngoing>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f040 8094 	bne.w	8008014 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d101      	bne.n	8007efa <HAL_ADC_Start_DMA+0x4e>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	e08f      	b.n	800801a <HAL_ADC_Start_DMA+0x16e>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a4a      	ldr	r2, [pc, #296]	; (8008030 <HAL_ADC_Start_DMA+0x184>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d008      	beq.n	8007f1e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b05      	cmp	r3, #5
 8007f16:	d002      	beq.n	8007f1e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	d173      	bne.n	8008006 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 fcc4 	bl	80088ac <ADC_Enable>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d166      	bne.n	8007ffc <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f36:	f023 0301 	bic.w	r3, r3, #1
 8007f3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a37      	ldr	r2, [pc, #220]	; (8008024 <HAL_ADC_Start_DMA+0x178>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d002      	beq.n	8007f52 <HAL_ADC_Start_DMA+0xa6>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	e001      	b.n	8007f56 <HAL_ADC_Start_DMA+0xaa>
 8007f52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d002      	beq.n	8007f64 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d006      	beq.n	8007f8a <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f80:	f023 0206 	bic.w	r2, r3, #6
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	661a      	str	r2, [r3, #96]	; 0x60
 8007f88:	e002      	b.n	8007f90 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f94:	4a27      	ldr	r2, [pc, #156]	; (8008034 <HAL_ADC_Start_DMA+0x188>)
 8007f96:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9c:	4a26      	ldr	r2, [pc, #152]	; (8008038 <HAL_ADC_Start_DMA+0x18c>)
 8007f9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa4:	4a25      	ldr	r2, [pc, #148]	; (800803c <HAL_ADC_Start_DMA+0x190>)
 8007fa6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	221c      	movs	r2, #28
 8007fae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0210 	orr.w	r2, r2, #16
 8007fc6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0201 	orr.w	r2, r2, #1
 8007fd6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3340      	adds	r3, #64	; 0x40
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f001 fba6 	bl	8009738 <HAL_DMA_Start_IT>
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff fd70 	bl	8007ada <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007ffa:	e00d      	b.n	8008018 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8008004:	e008      	b.n	8008018 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8008012:	e001      	b.n	8008018 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008014:	2302      	movs	r3, #2
 8008016:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	50000100 	.word	0x50000100
 8008028:	50000300 	.word	0x50000300
 800802c:	50000700 	.word	0x50000700
 8008030:	50000400 	.word	0x50000400
 8008034:	080089d9 	.word	0x080089d9
 8008038:	08008ab1 	.word	0x08008ab1
 800803c:	08008acd 	.word	0x08008acd

08008040 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b0b6      	sub	sp, #216	; 0xd8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800806e:	2b01      	cmp	r3, #1
 8008070:	d102      	bne.n	8008078 <HAL_ADC_ConfigChannel+0x24>
 8008072:	2302      	movs	r3, #2
 8008074:	f000 bc04 	b.w	8008880 <HAL_ADC_ConfigChannel+0x82c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff fd3c 	bl	8007b02 <LL_ADC_REG_IsConversionOngoing>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 83e8 	bne.w	8008862 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7ff fc1d 	bl	80078de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fd2a 	bl	8007b02 <LL_ADC_REG_IsConversionOngoing>
 80080ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fd36 	bl	8007b28 <LL_ADC_INJ_IsConversionOngoing>
 80080bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80080c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 81d9 	bne.w	800847c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80080ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f040 81d4 	bne.w	800847c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080dc:	d10f      	bne.n	80080fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	4619      	mov	r1, r3
 80080ea:	f7ff fc24 	bl	8007936 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fbcb 	bl	8007892 <LL_ADC_SetSamplingTimeCommonConfig>
 80080fc:	e00e      	b.n	800811c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	6819      	ldr	r1, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	461a      	mov	r2, r3
 800810c:	f7ff fc13 	bl	8007936 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fbbb 	bl	8007892 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	695a      	ldr	r2, [r3, #20]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	08db      	lsrs	r3, r3, #3
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b04      	cmp	r3, #4
 800813c:	d022      	beq.n	8008184 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6818      	ldr	r0, [r3, #0]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6919      	ldr	r1, [r3, #16]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800814e:	f7ff fb15 	bl	800777c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6919      	ldr	r1, [r3, #16]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	461a      	mov	r2, r3
 8008160:	f7ff fb61 	bl	8007826 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008170:	2b01      	cmp	r3, #1
 8008172:	d102      	bne.n	800817a <HAL_ADC_ConfigChannel+0x126>
 8008174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008178:	e000      	b.n	800817c <HAL_ADC_ConfigChannel+0x128>
 800817a:	2300      	movs	r3, #0
 800817c:	461a      	mov	r2, r3
 800817e:	f7ff fb6d 	bl	800785c <LL_ADC_SetOffsetSaturation>
 8008182:	e17b      	b.n	800847c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fb1a 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 8008190:	4603      	mov	r3, r0
 8008192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <HAL_ADC_ConfigChannel+0x15c>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fb0f 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 80081a6:	4603      	mov	r3, r0
 80081a8:	0e9b      	lsrs	r3, r3, #26
 80081aa:	f003 021f 	and.w	r2, r3, #31
 80081ae:	e01e      	b.n	80081ee <HAL_ADC_ConfigChannel+0x19a>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fb04 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 80081bc:	4603      	mov	r3, r0
 80081be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081c6:	fa93 f3a3 	rbit	r3, r3
 80081ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80081ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80081d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80081de:	2320      	movs	r3, #32
 80081e0:	e004      	b.n	80081ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80081e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081e6:	fab3 f383 	clz	r3, r3
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <HAL_ADC_ConfigChannel+0x1b2>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	0e9b      	lsrs	r3, r3, #26
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	e018      	b.n	8008238 <HAL_ADC_ConfigChannel+0x1e4>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800820e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008212:	fa93 f3a3 	rbit	r3, r3
 8008216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800821a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800821e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800822a:	2320      	movs	r3, #32
 800822c:	e004      	b.n	8008238 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800822e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008232:	fab3 f383 	clz	r3, r3
 8008236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008238:	429a      	cmp	r2, r3
 800823a:	d106      	bne.n	800824a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff fad3 	bl	80077f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2101      	movs	r1, #1
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fab7 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 8008256:	4603      	mov	r3, r0
 8008258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <HAL_ADC_ConfigChannel+0x222>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff faac 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 800826c:	4603      	mov	r3, r0
 800826e:	0e9b      	lsrs	r3, r3, #26
 8008270:	f003 021f 	and.w	r2, r3, #31
 8008274:	e01e      	b.n	80082b4 <HAL_ADC_ConfigChannel+0x260>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2101      	movs	r1, #1
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff faa1 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 8008282:	4603      	mov	r3, r0
 8008284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800828c:	fa93 f3a3 	rbit	r3, r3
 8008290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800829c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80082a4:	2320      	movs	r3, #32
 80082a6:	e004      	b.n	80082b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80082a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082ac:	fab3 f383 	clz	r3, r3
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d105      	bne.n	80082cc <HAL_ADC_ConfigChannel+0x278>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	0e9b      	lsrs	r3, r3, #26
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	e018      	b.n	80082fe <HAL_ADC_ConfigChannel+0x2aa>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082d8:	fa93 f3a3 	rbit	r3, r3
 80082dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80082e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80082e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80082f0:	2320      	movs	r3, #32
 80082f2:	e004      	b.n	80082fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80082f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f8:	fab3 f383 	clz	r3, r3
 80082fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80082fe:	429a      	cmp	r2, r3
 8008300:	d106      	bne.n	8008310 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2200      	movs	r2, #0
 8008308:	2101      	movs	r1, #1
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fa70 	bl	80077f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2102      	movs	r1, #2
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fa54 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 800831c:	4603      	mov	r3, r0
 800831e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10a      	bne.n	800833c <HAL_ADC_ConfigChannel+0x2e8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2102      	movs	r1, #2
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fa49 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 8008332:	4603      	mov	r3, r0
 8008334:	0e9b      	lsrs	r3, r3, #26
 8008336:	f003 021f 	and.w	r2, r3, #31
 800833a:	e01e      	b.n	800837a <HAL_ADC_ConfigChannel+0x326>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2102      	movs	r1, #2
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff fa3e 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 8008348:	4603      	mov	r3, r0
 800834a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800834e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008352:	fa93 f3a3 	rbit	r3, r3
 8008356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800835a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800835e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800836a:	2320      	movs	r3, #32
 800836c:	e004      	b.n	8008378 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800836e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008372:	fab3 f383 	clz	r3, r3
 8008376:	b2db      	uxtb	r3, r3
 8008378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <HAL_ADC_ConfigChannel+0x33e>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	0e9b      	lsrs	r3, r3, #26
 800838c:	f003 031f 	and.w	r3, r3, #31
 8008390:	e016      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x36c>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800839e:	fa93 f3a3 	rbit	r3, r3
 80083a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80083a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80083aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80083b2:	2320      	movs	r3, #32
 80083b4:	e004      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80083b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083ba:	fab3 f383 	clz	r3, r3
 80083be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d106      	bne.n	80083d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2200      	movs	r2, #0
 80083ca:	2102      	movs	r1, #2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff fa0f 	bl	80077f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2103      	movs	r1, #3
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff f9f3 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 80083de:	4603      	mov	r3, r0
 80083e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <HAL_ADC_ConfigChannel+0x3aa>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2103      	movs	r1, #3
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff f9e8 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 80083f4:	4603      	mov	r3, r0
 80083f6:	0e9b      	lsrs	r3, r3, #26
 80083f8:	f003 021f 	and.w	r2, r3, #31
 80083fc:	e017      	b.n	800842e <HAL_ADC_ConfigChannel+0x3da>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2103      	movs	r1, #3
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff f9dd 	bl	80077c4 <LL_ADC_GetOffsetChannel>
 800840a:	4603      	mov	r3, r0
 800840c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008410:	fa93 f3a3 	rbit	r3, r3
 8008414:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008418:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800841a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008420:	2320      	movs	r3, #32
 8008422:	e003      	b.n	800842c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008426:	fab3 f383 	clz	r3, r3
 800842a:	b2db      	uxtb	r3, r3
 800842c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <HAL_ADC_ConfigChannel+0x3f2>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	0e9b      	lsrs	r3, r3, #26
 8008440:	f003 031f 	and.w	r3, r3, #31
 8008444:	e011      	b.n	800846a <HAL_ADC_ConfigChannel+0x416>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800844e:	fa93 f3a3 	rbit	r3, r3
 8008452:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008456:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800845e:	2320      	movs	r3, #32
 8008460:	e003      	b.n	800846a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008464:	fab3 f383 	clz	r3, r3
 8008468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800846a:	429a      	cmp	r2, r3
 800846c:	d106      	bne.n	800847c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2200      	movs	r2, #0
 8008474:	2103      	movs	r1, #3
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff f9ba 	bl	80077f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff fb17 	bl	8007ab4 <LL_ADC_IsEnabled>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f040 813d 	bne.w	8008708 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	6819      	ldr	r1, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	461a      	mov	r2, r3
 800849c:	f7ff fa76 	bl	800798c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	4aa2      	ldr	r2, [pc, #648]	; (8008730 <HAL_ADC_ConfigChannel+0x6dc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	f040 812e 	bne.w	8008708 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <HAL_ADC_ConfigChannel+0x480>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	0e9b      	lsrs	r3, r3, #26
 80084c2:	3301      	adds	r3, #1
 80084c4:	f003 031f 	and.w	r3, r3, #31
 80084c8:	2b09      	cmp	r3, #9
 80084ca:	bf94      	ite	ls
 80084cc:	2301      	movls	r3, #1
 80084ce:	2300      	movhi	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	e019      	b.n	8008508 <HAL_ADC_ConfigChannel+0x4b4>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084dc:	fa93 f3a3 	rbit	r3, r3
 80084e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80084e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80084e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80084ec:	2320      	movs	r3, #32
 80084ee:	e003      	b.n	80084f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80084f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f2:	fab3 f383 	clz	r3, r3
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	3301      	adds	r3, #1
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	2b09      	cmp	r3, #9
 8008500:	bf94      	ite	ls
 8008502:	2301      	movls	r3, #1
 8008504:	2300      	movhi	r3, #0
 8008506:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008508:	2b00      	cmp	r3, #0
 800850a:	d079      	beq.n	8008600 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008514:	2b00      	cmp	r3, #0
 8008516:	d107      	bne.n	8008528 <HAL_ADC_ConfigChannel+0x4d4>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	0e9b      	lsrs	r3, r3, #26
 800851e:	3301      	adds	r3, #1
 8008520:	069b      	lsls	r3, r3, #26
 8008522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008526:	e015      	b.n	8008554 <HAL_ADC_ConfigChannel+0x500>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008530:	fa93 f3a3 	rbit	r3, r3
 8008534:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008538:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800853a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008540:	2320      	movs	r3, #32
 8008542:	e003      	b.n	800854c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008546:	fab3 f383 	clz	r3, r3
 800854a:	b2db      	uxtb	r3, r3
 800854c:	3301      	adds	r3, #1
 800854e:	069b      	lsls	r3, r3, #26
 8008550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800855c:	2b00      	cmp	r3, #0
 800855e:	d109      	bne.n	8008574 <HAL_ADC_ConfigChannel+0x520>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	0e9b      	lsrs	r3, r3, #26
 8008566:	3301      	adds	r3, #1
 8008568:	f003 031f 	and.w	r3, r3, #31
 800856c:	2101      	movs	r1, #1
 800856e:	fa01 f303 	lsl.w	r3, r1, r3
 8008572:	e017      	b.n	80085a4 <HAL_ADC_ConfigChannel+0x550>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800857a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857c:	fa93 f3a3 	rbit	r3, r3
 8008580:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008584:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800858c:	2320      	movs	r3, #32
 800858e:	e003      	b.n	8008598 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008592:	fab3 f383 	clz	r3, r3
 8008596:	b2db      	uxtb	r3, r3
 8008598:	3301      	adds	r3, #1
 800859a:	f003 031f 	and.w	r3, r3, #31
 800859e:	2101      	movs	r1, #1
 80085a0:	fa01 f303 	lsl.w	r3, r1, r3
 80085a4:	ea42 0103 	orr.w	r1, r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <HAL_ADC_ConfigChannel+0x576>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	0e9b      	lsrs	r3, r3, #26
 80085ba:	3301      	adds	r3, #1
 80085bc:	f003 021f 	and.w	r2, r3, #31
 80085c0:	4613      	mov	r3, r2
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	4413      	add	r3, r2
 80085c6:	051b      	lsls	r3, r3, #20
 80085c8:	e018      	b.n	80085fc <HAL_ADC_ConfigChannel+0x5a8>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	fa93 f3a3 	rbit	r3, r3
 80085d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80085e2:	2320      	movs	r3, #32
 80085e4:	e003      	b.n	80085ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80085e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e8:	fab3 f383 	clz	r3, r3
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	3301      	adds	r3, #1
 80085f0:	f003 021f 	and.w	r2, r3, #31
 80085f4:	4613      	mov	r3, r2
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	4413      	add	r3, r2
 80085fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085fc:	430b      	orrs	r3, r1
 80085fe:	e07e      	b.n	80086fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008608:	2b00      	cmp	r3, #0
 800860a:	d107      	bne.n	800861c <HAL_ADC_ConfigChannel+0x5c8>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	0e9b      	lsrs	r3, r3, #26
 8008612:	3301      	adds	r3, #1
 8008614:	069b      	lsls	r3, r3, #26
 8008616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800861a:	e015      	b.n	8008648 <HAL_ADC_ConfigChannel+0x5f4>
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	fa93 f3a3 	rbit	r3, r3
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008634:	2320      	movs	r3, #32
 8008636:	e003      	b.n	8008640 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	fab3 f383 	clz	r3, r3
 800863e:	b2db      	uxtb	r3, r3
 8008640:	3301      	adds	r3, #1
 8008642:	069b      	lsls	r3, r3, #26
 8008644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008650:	2b00      	cmp	r3, #0
 8008652:	d109      	bne.n	8008668 <HAL_ADC_ConfigChannel+0x614>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	0e9b      	lsrs	r3, r3, #26
 800865a:	3301      	adds	r3, #1
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	2101      	movs	r1, #1
 8008662:	fa01 f303 	lsl.w	r3, r1, r3
 8008666:	e017      	b.n	8008698 <HAL_ADC_ConfigChannel+0x644>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	fa93 f3a3 	rbit	r3, r3
 8008674:	61fb      	str	r3, [r7, #28]
  return result;
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008680:	2320      	movs	r3, #32
 8008682:	e003      	b.n	800868c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	fab3 f383 	clz	r3, r3
 800868a:	b2db      	uxtb	r3, r3
 800868c:	3301      	adds	r3, #1
 800868e:	f003 031f 	and.w	r3, r3, #31
 8008692:	2101      	movs	r1, #1
 8008694:	fa01 f303 	lsl.w	r3, r1, r3
 8008698:	ea42 0103 	orr.w	r1, r2, r3
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10d      	bne.n	80086c4 <HAL_ADC_ConfigChannel+0x670>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	0e9b      	lsrs	r3, r3, #26
 80086ae:	3301      	adds	r3, #1
 80086b0:	f003 021f 	and.w	r2, r3, #31
 80086b4:	4613      	mov	r3, r2
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	4413      	add	r3, r2
 80086ba:	3b1e      	subs	r3, #30
 80086bc:	051b      	lsls	r3, r3, #20
 80086be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80086c2:	e01b      	b.n	80086fc <HAL_ADC_ConfigChannel+0x6a8>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	fa93 f3a3 	rbit	r3, r3
 80086d0:	613b      	str	r3, [r7, #16]
  return result;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80086dc:	2320      	movs	r3, #32
 80086de:	e003      	b.n	80086e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	fab3 f383 	clz	r3, r3
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	3301      	adds	r3, #1
 80086ea:	f003 021f 	and.w	r2, r3, #31
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	3b1e      	subs	r3, #30
 80086f6:	051b      	lsls	r3, r3, #20
 80086f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80086fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008702:	4619      	mov	r1, r3
 8008704:	f7ff f917 	bl	8007936 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	4b09      	ldr	r3, [pc, #36]	; (8008734 <HAL_ADC_ConfigChannel+0x6e0>)
 800870e:	4013      	ands	r3, r2
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80af 	beq.w	8008874 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800871e:	d004      	beq.n	800872a <HAL_ADC_ConfigChannel+0x6d6>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a04      	ldr	r2, [pc, #16]	; (8008738 <HAL_ADC_ConfigChannel+0x6e4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d10a      	bne.n	8008740 <HAL_ADC_ConfigChannel+0x6ec>
 800872a:	4b04      	ldr	r3, [pc, #16]	; (800873c <HAL_ADC_ConfigChannel+0x6e8>)
 800872c:	e009      	b.n	8008742 <HAL_ADC_ConfigChannel+0x6ee>
 800872e:	bf00      	nop
 8008730:	407f0000 	.word	0x407f0000
 8008734:	80080000 	.word	0x80080000
 8008738:	50000100 	.word	0x50000100
 800873c:	50000300 	.word	0x50000300
 8008740:	4b51      	ldr	r3, [pc, #324]	; (8008888 <HAL_ADC_ConfigChannel+0x834>)
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff f80c 	bl	8007760 <LL_ADC_GetCommonPathInternalCh>
 8008748:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a4e      	ldr	r2, [pc, #312]	; (800888c <HAL_ADC_ConfigChannel+0x838>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_ADC_ConfigChannel+0x70c>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a4d      	ldr	r2, [pc, #308]	; (8008890 <HAL_ADC_ConfigChannel+0x83c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d134      	bne.n	80087ca <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d12e      	bne.n	80087ca <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008774:	d17e      	bne.n	8008874 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800877e:	d004      	beq.n	800878a <HAL_ADC_ConfigChannel+0x736>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a43      	ldr	r2, [pc, #268]	; (8008894 <HAL_ADC_ConfigChannel+0x840>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d101      	bne.n	800878e <HAL_ADC_ConfigChannel+0x73a>
 800878a:	4a43      	ldr	r2, [pc, #268]	; (8008898 <HAL_ADC_ConfigChannel+0x844>)
 800878c:	e000      	b.n	8008790 <HAL_ADC_ConfigChannel+0x73c>
 800878e:	4a3e      	ldr	r2, [pc, #248]	; (8008888 <HAL_ADC_ConfigChannel+0x834>)
 8008790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fe ffcd 	bl	800773a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80087a0:	4b3e      	ldr	r3, [pc, #248]	; (800889c <HAL_ADC_ConfigChannel+0x848>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	099b      	lsrs	r3, r3, #6
 80087a6:	4a3e      	ldr	r2, [pc, #248]	; (80088a0 <HAL_ADC_ConfigChannel+0x84c>)
 80087a8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ac:	099b      	lsrs	r3, r3, #6
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	4613      	mov	r3, r2
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087ba:	e002      	b.n	80087c2 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3b01      	subs	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f9      	bne.n	80087bc <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80087c8:	e054      	b.n	8008874 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a35      	ldr	r2, [pc, #212]	; (80088a4 <HAL_ADC_ConfigChannel+0x850>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d120      	bne.n	8008816 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80087d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d11a      	bne.n	8008816 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087e8:	d144      	bne.n	8008874 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087f2:	d004      	beq.n	80087fe <HAL_ADC_ConfigChannel+0x7aa>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a26      	ldr	r2, [pc, #152]	; (8008894 <HAL_ADC_ConfigChannel+0x840>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d101      	bne.n	8008802 <HAL_ADC_ConfigChannel+0x7ae>
 80087fe:	4a26      	ldr	r2, [pc, #152]	; (8008898 <HAL_ADC_ConfigChannel+0x844>)
 8008800:	e000      	b.n	8008804 <HAL_ADC_ConfigChannel+0x7b0>
 8008802:	4a21      	ldr	r2, [pc, #132]	; (8008888 <HAL_ADC_ConfigChannel+0x834>)
 8008804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f7fe ff93 	bl	800773a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008814:	e02e      	b.n	8008874 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a23      	ldr	r2, [pc, #140]	; (80088a8 <HAL_ADC_ConfigChannel+0x854>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d129      	bne.n	8008874 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d123      	bne.n	8008874 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a18      	ldr	r2, [pc, #96]	; (8008894 <HAL_ADC_ConfigChannel+0x840>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01e      	beq.n	8008874 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800883e:	d004      	beq.n	800884a <HAL_ADC_ConfigChannel+0x7f6>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a13      	ldr	r2, [pc, #76]	; (8008894 <HAL_ADC_ConfigChannel+0x840>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d101      	bne.n	800884e <HAL_ADC_ConfigChannel+0x7fa>
 800884a:	4a13      	ldr	r2, [pc, #76]	; (8008898 <HAL_ADC_ConfigChannel+0x844>)
 800884c:	e000      	b.n	8008850 <HAL_ADC_ConfigChannel+0x7fc>
 800884e:	4a0e      	ldr	r2, [pc, #56]	; (8008888 <HAL_ADC_ConfigChannel+0x834>)
 8008850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7fe ff6d 	bl	800773a <LL_ADC_SetCommonPathInternalCh>
 8008860:	e008      	b.n	8008874 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008866:	f043 0220 	orr.w	r2, r3, #32
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800887c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008880:	4618      	mov	r0, r3
 8008882:	37d8      	adds	r7, #216	; 0xd8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	50000700 	.word	0x50000700
 800888c:	c3210000 	.word	0xc3210000
 8008890:	90c00010 	.word	0x90c00010
 8008894:	50000100 	.word	0x50000100
 8008898:	50000300 	.word	0x50000300
 800889c:	2000786c 	.word	0x2000786c
 80088a0:	053e2d63 	.word	0x053e2d63
 80088a4:	c7520000 	.word	0xc7520000
 80088a8:	cb840000 	.word	0xcb840000

080088ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff f8f9 	bl	8007ab4 <LL_ADC_IsEnabled>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d176      	bne.n	80089b6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	4b3c      	ldr	r3, [pc, #240]	; (80089c0 <ADC_Enable+0x114>)
 80088d0:	4013      	ands	r3, r2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088da:	f043 0210 	orr.w	r2, r3, #16
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e6:	f043 0201 	orr.w	r2, r3, #1
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e062      	b.n	80089b8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff f8c8 	bl	8007a8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008904:	d004      	beq.n	8008910 <ADC_Enable+0x64>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a2e      	ldr	r2, [pc, #184]	; (80089c4 <ADC_Enable+0x118>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d101      	bne.n	8008914 <ADC_Enable+0x68>
 8008910:	4b2d      	ldr	r3, [pc, #180]	; (80089c8 <ADC_Enable+0x11c>)
 8008912:	e000      	b.n	8008916 <ADC_Enable+0x6a>
 8008914:	4b2d      	ldr	r3, [pc, #180]	; (80089cc <ADC_Enable+0x120>)
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe ff22 	bl	8007760 <LL_ADC_GetCommonPathInternalCh>
 800891c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800891e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008922:	2b00      	cmp	r3, #0
 8008924:	d013      	beq.n	800894e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008926:	4b2a      	ldr	r3, [pc, #168]	; (80089d0 <ADC_Enable+0x124>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	099b      	lsrs	r3, r3, #6
 800892c:	4a29      	ldr	r2, [pc, #164]	; (80089d4 <ADC_Enable+0x128>)
 800892e:	fba2 2303 	umull	r2, r3, r2, r3
 8008932:	099b      	lsrs	r3, r3, #6
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	4613      	mov	r3, r2
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008940:	e002      	b.n	8008948 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	3b01      	subs	r3, #1
 8008946:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f9      	bne.n	8008942 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800894e:	f7fe feb3 	bl	80076b8 <HAL_GetTick>
 8008952:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008954:	e028      	b.n	80089a8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff f8aa 	bl	8007ab4 <LL_ADC_IsEnabled>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff f88e 	bl	8007a8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008970:	f7fe fea2 	bl	80076b8 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d914      	bls.n	80089a8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b01      	cmp	r3, #1
 800898a:	d00d      	beq.n	80089a8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008990:	f043 0210 	orr.w	r2, r3, #16
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800899c:	f043 0201 	orr.w	r2, r3, #1
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e007      	b.n	80089b8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d1cf      	bne.n	8008956 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	8000003f 	.word	0x8000003f
 80089c4:	50000100 	.word	0x50000100
 80089c8:	50000300 	.word	0x50000300
 80089cc:	50000700 	.word	0x50000700
 80089d0:	2000786c 	.word	0x2000786c
 80089d4:	053e2d63 	.word	0x053e2d63

080089d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d14b      	bne.n	8008a8a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d021      	beq.n	8008a50 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe ff51 	bl	80078b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d032      	beq.n	8008a82 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d12b      	bne.n	8008a82 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d11f      	bne.n	8008a82 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a46:	f043 0201 	orr.w	r2, r3, #1
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a4e:	e018      	b.n	8008a82 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d111      	bne.n	8008a82 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d105      	bne.n	8008a82 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7a:	f043 0201 	orr.w	r2, r3, #1
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7fd fd92 	bl	80065ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008a88:	e00e      	b.n	8008aa8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8e:	f003 0310 	and.w	r3, r3, #16
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7ff fad2 	bl	8008040 <HAL_ADC_ErrorCallback>
}
 8008a9c:	e004      	b.n	8008aa8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7fd fce6 	bl	8006490 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aea:	f043 0204 	orr.w	r2, r3, #4
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f7ff faa4 	bl	8008040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008af8:	bf00      	nop
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <LL_ADC_IsEnabled>:
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <LL_ADC_IsEnabled+0x18>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <LL_ADC_IsEnabled+0x1a>
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <LL_ADC_REG_IsConversionOngoing>:
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d101      	bne.n	8008b3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e000      	b.n	8008b40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b0a1      	sub	sp, #132	; 0x84
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e0cb      	b.n	8008d02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008b72:	2300      	movs	r3, #0
 8008b74:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008b76:	2300      	movs	r3, #0
 8008b78:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b82:	d102      	bne.n	8008b8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008b84:	4b61      	ldr	r3, [pc, #388]	; (8008d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b86:	60bb      	str	r3, [r7, #8]
 8008b88:	e001      	b.n	8008b8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10b      	bne.n	8008bac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b98:	f043 0220 	orr.w	r2, r3, #32
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0aa      	b.n	8008d02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff ffb9 	bl	8008b26 <LL_ADC_REG_IsConversionOngoing>
 8008bb4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff ffb3 	bl	8008b26 <LL_ADC_REG_IsConversionOngoing>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f040 808c 	bne.w	8008ce0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f040 8088 	bne.w	8008ce0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd8:	d004      	beq.n	8008be4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a4b      	ldr	r2, [pc, #300]	; (8008d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d101      	bne.n	8008be8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8008be4:	4b4a      	ldr	r3, [pc, #296]	; (8008d10 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8008be6:	e000      	b.n	8008bea <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008be8:	4b4a      	ldr	r3, [pc, #296]	; (8008d14 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8008bea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d041      	beq.n	8008c78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	6859      	ldr	r1, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c06:	035b      	lsls	r3, r3, #13
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c18:	d004      	beq.n	8008c24 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a3b      	ldr	r2, [pc, #236]	; (8008d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d10f      	bne.n	8008c44 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8008c24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008c28:	f7ff ff6a 	bl	8008b00 <LL_ADC_IsEnabled>
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	4837      	ldr	r0, [pc, #220]	; (8008d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008c30:	f7ff ff66 	bl	8008b00 <LL_ADC_IsEnabled>
 8008c34:	4603      	mov	r3, r0
 8008c36:	4323      	orrs	r3, r4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e008      	b.n	8008c56 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8008c44:	4834      	ldr	r0, [pc, #208]	; (8008d18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8008c46:	f7ff ff5b 	bl	8008b00 <LL_ADC_IsEnabled>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bf0c      	ite	eq
 8008c50:	2301      	moveq	r3, #1
 8008c52:	2300      	movne	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d04c      	beq.n	8008cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008c62:	f023 030f 	bic.w	r3, r3, #15
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	6811      	ldr	r1, [r2, #0]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	6892      	ldr	r2, [r2, #8]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	431a      	orrs	r2, r3
 8008c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c74:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008c76:	e03d      	b.n	8008cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c8c:	d004      	beq.n	8008c98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1e      	ldr	r2, [pc, #120]	; (8008d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d10f      	bne.n	8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8008c98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008c9c:	f7ff ff30 	bl	8008b00 <LL_ADC_IsEnabled>
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	481a      	ldr	r0, [pc, #104]	; (8008d0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008ca4:	f7ff ff2c 	bl	8008b00 <LL_ADC_IsEnabled>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	4323      	orrs	r3, r4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	e008      	b.n	8008cca <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8008cb8:	4817      	ldr	r0, [pc, #92]	; (8008d18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8008cba:	f7ff ff21 	bl	8008b00 <LL_ADC_IsEnabled>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	bf0c      	ite	eq
 8008cc4:	2301      	moveq	r3, #1
 8008cc6:	2300      	movne	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d012      	beq.n	8008cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008cd6:	f023 030f 	bic.w	r3, r3, #15
 8008cda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008cdc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008cde:	e009      	b.n	8008cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce4:	f043 0220 	orr.w	r2, r3, #32
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008cf2:	e000      	b.n	8008cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008cf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3784      	adds	r7, #132	; 0x84
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd90      	pop	{r4, r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	50000100 	.word	0x50000100
 8008d10:	50000300 	.word	0x50000300
 8008d14:	50000700 	.word	0x50000700
 8008d18:	50000400 	.word	0x50000400

08008d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <__NVIC_SetPriorityGrouping+0x44>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008d38:	4013      	ands	r3, r2
 8008d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d4e:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <__NVIC_SetPriorityGrouping+0x44>)
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	60d3      	str	r3, [r2, #12]
}
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	e000ed00 	.word	0xe000ed00

08008d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <__NVIC_GetPriorityGrouping+0x18>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	0a1b      	lsrs	r3, r3, #8
 8008d6e:	f003 0307 	and.w	r3, r3, #7
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	e000ed00 	.word	0xe000ed00

08008d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	db0b      	blt.n	8008daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	f003 021f 	and.w	r2, r3, #31
 8008d98:	4907      	ldr	r1, [pc, #28]	; (8008db8 <__NVIC_EnableIRQ+0x38>)
 8008d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d9e:	095b      	lsrs	r3, r3, #5
 8008da0:	2001      	movs	r0, #1
 8008da2:	fa00 f202 	lsl.w	r2, r0, r2
 8008da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	e000e100 	.word	0xe000e100

08008dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6039      	str	r1, [r7, #0]
 8008dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	db0a      	blt.n	8008de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	490c      	ldr	r1, [pc, #48]	; (8008e08 <__NVIC_SetPriority+0x4c>)
 8008dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dda:	0112      	lsls	r2, r2, #4
 8008ddc:	b2d2      	uxtb	r2, r2
 8008dde:	440b      	add	r3, r1
 8008de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008de4:	e00a      	b.n	8008dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	4908      	ldr	r1, [pc, #32]	; (8008e0c <__NVIC_SetPriority+0x50>)
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	f003 030f 	and.w	r3, r3, #15
 8008df2:	3b04      	subs	r3, #4
 8008df4:	0112      	lsls	r2, r2, #4
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	440b      	add	r3, r1
 8008dfa:	761a      	strb	r2, [r3, #24]
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	e000e100 	.word	0xe000e100
 8008e0c:	e000ed00 	.word	0xe000ed00

08008e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b089      	sub	sp, #36	; 0x24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f1c3 0307 	rsb	r3, r3, #7
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	bf28      	it	cs
 8008e2e:	2304      	movcs	r3, #4
 8008e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	3304      	adds	r3, #4
 8008e36:	2b06      	cmp	r3, #6
 8008e38:	d902      	bls.n	8008e40 <NVIC_EncodePriority+0x30>
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	3b03      	subs	r3, #3
 8008e3e:	e000      	b.n	8008e42 <NVIC_EncodePriority+0x32>
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e44:	f04f 32ff 	mov.w	r2, #4294967295
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43da      	mvns	r2, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	401a      	ands	r2, r3
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e58:	f04f 31ff 	mov.w	r1, #4294967295
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e62:	43d9      	mvns	r1, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e68:	4313      	orrs	r3, r2
         );
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3724      	adds	r7, #36	; 0x24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e88:	d301      	bcc.n	8008e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e00f      	b.n	8008eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <SysTick_Config+0x40>)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e96:	210f      	movs	r1, #15
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	f7ff ff8e 	bl	8008dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <SysTick_Config+0x40>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ea6:	4b04      	ldr	r3, [pc, #16]	; (8008eb8 <SysTick_Config+0x40>)
 8008ea8:	2207      	movs	r2, #7
 8008eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	e000e010 	.word	0xe000e010

08008ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff ff29 	bl	8008d1c <__NVIC_SetPriorityGrouping>
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	4603      	mov	r3, r0
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008ee0:	f7ff ff40 	bl	8008d64 <__NVIC_GetPriorityGrouping>
 8008ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f7ff ff90 	bl	8008e10 <NVIC_EncodePriority>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ff5f 	bl	8008dbc <__NVIC_SetPriority>
}
 8008efe:	bf00      	nop
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff ff33 	bl	8008d80 <__NVIC_EnableIRQ>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff ffa4 	bl	8008e78 <SysTick_Config>
 8008f30:	4603      	mov	r3, r0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e014      	b.n	8008f76 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	791b      	ldrb	r3, [r3, #4]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fd fd7f 	bl	8006a60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2202      	movs	r2, #2
 8008f66:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e0b2      	b.n	80090fe <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	795b      	ldrb	r3, [r3, #5]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_DAC_Start_DMA+0x24>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e0ac      	b.n	80090fe <HAL_DAC_Start_DMA+0x17e>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2202      	movs	r2, #2
 8008fae:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d129      	bne.n	800900a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	4a53      	ldr	r2, [pc, #332]	; (8009108 <HAL_DAC_Start_DMA+0x188>)
 8008fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	4a52      	ldr	r2, [pc, #328]	; (800910c <HAL_DAC_Start_DMA+0x18c>)
 8008fc4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	4a51      	ldr	r2, [pc, #324]	; (8009110 <HAL_DAC_Start_DMA+0x190>)
 8008fcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fdc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <HAL_DAC_Start_DMA+0x6c>
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d005      	beq.n	8008ff6 <HAL_DAC_Start_DMA+0x76>
 8008fea:	e009      	b.n	8009000 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	61bb      	str	r3, [r7, #24]
        break;
 8008ff4:	e033      	b.n	800905e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	61bb      	str	r3, [r7, #24]
        break;
 8008ffe:	e02e      	b.n	800905e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3310      	adds	r3, #16
 8009006:	61bb      	str	r3, [r7, #24]
        break;
 8009008:	e029      	b.n	800905e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	4a41      	ldr	r2, [pc, #260]	; (8009114 <HAL_DAC_Start_DMA+0x194>)
 8009010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	4a40      	ldr	r2, [pc, #256]	; (8009118 <HAL_DAC_Start_DMA+0x198>)
 8009018:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	4a3f      	ldr	r2, [pc, #252]	; (800911c <HAL_DAC_Start_DMA+0x19c>)
 8009020:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009030:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <HAL_DAC_Start_DMA+0xc0>
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	2b04      	cmp	r3, #4
 800903c:	d005      	beq.n	800904a <HAL_DAC_Start_DMA+0xca>
 800903e:	e009      	b.n	8009054 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3314      	adds	r3, #20
 8009046:	61bb      	str	r3, [r7, #24]
        break;
 8009048:	e009      	b.n	800905e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3318      	adds	r3, #24
 8009050:	61bb      	str	r3, [r7, #24]
        break;
 8009052:	e004      	b.n	800905e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	331c      	adds	r3, #28
 800905a:	61bb      	str	r3, [r7, #24]
        break;
 800905c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d111      	bne.n	8009088 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009072:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6898      	ldr	r0, [r3, #8]
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	f000 fb5b 	bl	8009738 <HAL_DMA_Start_IT>
 8009082:	4603      	mov	r3, r0
 8009084:	77fb      	strb	r3, [r7, #31]
 8009086:	e010      	b.n	80090aa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009096:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68d8      	ldr	r0, [r3, #12]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	f000 fb49 	bl	8009738 <HAL_DMA_Start_IT>
 80090a6:	4603      	mov	r3, r0
 80090a8:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80090b0:	7ffb      	ldrb	r3, [r7, #31]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d11c      	bne.n	80090f0 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6819      	ldr	r1, [r3, #0]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2201      	movs	r2, #1
 80090c4:	409a      	lsls	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80090ce:	4b14      	ldr	r3, [pc, #80]	; (8009120 <HAL_DAC_Start_DMA+0x1a0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	099b      	lsrs	r3, r3, #6
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <HAL_DAC_Start_DMA+0x1a4>)
 80090d6:	fba2 2303 	umull	r2, r3, r2, r3
 80090da:	099b      	lsrs	r3, r3, #6
 80090dc:	3301      	adds	r3, #1
 80090de:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80090e0:	e002      	b.n	80090e8 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f9      	bne.n	80090e2 <HAL_DAC_Start_DMA+0x162>
 80090ee:	e005      	b.n	80090fc <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	f043 0204 	orr.w	r2, r3, #4
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80090fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3720      	adds	r7, #32
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	080094d5 	.word	0x080094d5
 800910c:	080094f7 	.word	0x080094f7
 8009110:	08009513 	.word	0x08009513
 8009114:	0800957d 	.word	0x0800957d
 8009118:	0800959f 	.word	0x0800959f
 800911c:	080095bb 	.word	0x080095bb
 8009120:	2000786c 	.word	0x2000786c
 8009124:	053e2d63 	.word	0x053e2d63

08009128 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	; 0x28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_DAC_ConfigChannel+0x1c>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e19e      	b.n	80094c2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	795b      	ldrb	r3, [r3, #5]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_DAC_ConfigChannel+0x2c>
 800918c:	2302      	movs	r3, #2
 800918e:	e198      	b.n	80094c2 <HAL_DAC_ConfigChannel+0x35e>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2202      	movs	r2, #2
 800919a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d17a      	bne.n	800929a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80091a4:	f7fe fa88 	bl	80076b8 <HAL_GetTick>
 80091a8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d13d      	bne.n	800922c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80091b0:	e018      	b.n	80091e4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80091b2:	f7fe fa81 	bl	80076b8 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d911      	bls.n	80091e4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f043 0208 	orr.w	r2, r3, #8
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2203      	movs	r2, #3
 80091de:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e16e      	b.n	80094c2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1df      	bne.n	80091b2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091fa:	641a      	str	r2, [r3, #64]	; 0x40
 80091fc:	e020      	b.n	8009240 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80091fe:	f7fe fa5b 	bl	80076b8 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	2b01      	cmp	r3, #1
 800920a:	d90f      	bls.n	800922c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009212:	2b00      	cmp	r3, #0
 8009214:	da0a      	bge.n	800922c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f043 0208 	orr.w	r2, r3, #8
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2203      	movs	r2, #3
 8009226:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e14a      	b.n	80094c2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	2b00      	cmp	r3, #0
 8009234:	dbe3      	blt.n	80091fe <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800923e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f003 0310 	and.w	r3, r3, #16
 800924c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009250:	fa01 f303 	lsl.w	r3, r1, r3
 8009254:	43db      	mvns	r3, r3
 8009256:	ea02 0103 	and.w	r1, r2, r3
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f003 0310 	and.w	r3, r3, #16
 8009264:	409a      	lsls	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f003 0310 	and.w	r3, r3, #16
 800927a:	21ff      	movs	r1, #255	; 0xff
 800927c:	fa01 f303 	lsl.w	r3, r1, r3
 8009280:	43db      	mvns	r3, r3
 8009282:	ea02 0103 	and.w	r1, r2, r3
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f003 0310 	and.w	r3, r3, #16
 8009290:	409a      	lsls	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d11d      	bne.n	80092de <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	221f      	movs	r2, #31
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	43db      	mvns	r3, r3
 80092b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ba:	4013      	ands	r3, r2
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f003 0310 	and.w	r3, r3, #16
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	fa02 f303 	lsl.w	r3, r2, r3
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	4313      	orrs	r3, r2
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	2207      	movs	r2, #7
 80092ee:	fa02 f303 	lsl.w	r3, r2, r3
 80092f2:	43db      	mvns	r3, r3
 80092f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f6:	4013      	ands	r3, r2
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d102      	bne.n	8009308 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8009302:	2300      	movs	r3, #0
 8009304:	623b      	str	r3, [r7, #32]
 8009306:	e00f      	b.n	8009328 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d102      	bne.n	8009316 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009310:	2301      	movs	r3, #1
 8009312:	623b      	str	r3, [r7, #32]
 8009314:	e008      	b.n	8009328 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d102      	bne.n	8009324 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800931e:	2301      	movs	r3, #1
 8009320:	623b      	str	r3, [r7, #32]
 8009322:	e001      	b.n	8009328 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009324:	2300      	movs	r3, #0
 8009326:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	4313      	orrs	r3, r2
 8009332:	6a3a      	ldr	r2, [r7, #32]
 8009334:	4313      	orrs	r3, r2
 8009336:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f003 0310 	and.w	r3, r3, #16
 800933e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	43db      	mvns	r3, r3
 8009348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934a:	4013      	ands	r3, r2
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	791b      	ldrb	r3, [r3, #4]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d102      	bne.n	800935c <HAL_DAC_ConfigChannel+0x1f8>
 8009356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800935a:	e000      	b.n	800935e <HAL_DAC_ConfigChannel+0x1fa>
 800935c:	2300      	movs	r3, #0
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4313      	orrs	r3, r2
 8009362:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	43db      	mvns	r3, r3
 8009374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009376:	4013      	ands	r3, r2
 8009378:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	795b      	ldrb	r3, [r3, #5]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d102      	bne.n	8009388 <HAL_DAC_ConfigChannel+0x224>
 8009382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009386:	e000      	b.n	800938a <HAL_DAC_ConfigChannel+0x226>
 8009388:	2300      	movs	r3, #0
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	4313      	orrs	r3, r2
 800938e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d114      	bne.n	80093ca <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80093a0:	f001 fc86 	bl	800acb0 <HAL_RCC_GetHCLKFreq>
 80093a4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	4a48      	ldr	r2, [pc, #288]	; (80094cc <HAL_DAC_ConfigChannel+0x368>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d904      	bls.n	80093b8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
 80093b6:	e00f      	b.n	80093d8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	4a45      	ldr	r2, [pc, #276]	; (80094d0 <HAL_DAC_ConfigChannel+0x36c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d90a      	bls.n	80093d6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	e006      	b.n	80093d8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d0:	4313      	orrs	r3, r2
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
 80093d4:	e000      	b.n	80093d8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80093d6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f003 0310 	and.w	r3, r3, #16
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	fa02 f303 	lsl.w	r3, r2, r3
 80093e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e6:	4313      	orrs	r3, r2
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6819      	ldr	r1, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f003 0310 	and.w	r3, r3, #16
 80093fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009402:	fa02 f303 	lsl.w	r3, r2, r3
 8009406:	43da      	mvns	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	400a      	ands	r2, r1
 800940e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009422:	fa02 f303 	lsl.w	r3, r2, r3
 8009426:	43db      	mvns	r3, r3
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	4013      	ands	r3, r2
 800942c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f003 0310 	and.w	r3, r3, #16
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	fa02 f303 	lsl.w	r3, r2, r3
 8009440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009442:	4313      	orrs	r3, r2
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6819      	ldr	r1, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	22c0      	movs	r2, #192	; 0xc0
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	43da      	mvns	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	400a      	ands	r2, r1
 8009468:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	089b      	lsrs	r3, r3, #2
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	089b      	lsrs	r3, r3, #2
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4313      	orrs	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f003 0310 	and.w	r3, r3, #16
 8009494:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009498:	fa01 f303 	lsl.w	r3, r1, r3
 800949c:	43db      	mvns	r3, r3
 800949e:	ea02 0103 	and.w	r1, r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f003 0310 	and.w	r3, r3, #16
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	409a      	lsls	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80094c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3728      	adds	r7, #40	; 0x28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	09896800 	.word	0x09896800
 80094d0:	04c4b400 	.word	0x04c4b400

080094d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff fe20 	bl	8009128 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	711a      	strb	r2, [r3, #4]
}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff fe19 	bl	800913c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f043 0204 	orr.w	r2, r3, #4
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7ff fe0f 	bl	8009150 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	711a      	strb	r2, [r3, #4]
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7ff ffd8 	bl	8009540 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	711a      	strb	r2, [r3, #4]
}
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7ff ffd1 	bl	8009554 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80095b2:	bf00      	nop
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	f043 0204 	orr.w	r2, r3, #4
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff ffc7 	bl	8009568 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2201      	movs	r2, #1
 80095de:	711a      	strb	r2, [r3, #4]
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e08d      	b.n	8009716 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	4b47      	ldr	r3, [pc, #284]	; (8009720 <HAL_DMA_Init+0x138>)
 8009602:	429a      	cmp	r2, r3
 8009604:	d80f      	bhi.n	8009626 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	4b45      	ldr	r3, [pc, #276]	; (8009724 <HAL_DMA_Init+0x13c>)
 800960e:	4413      	add	r3, r2
 8009610:	4a45      	ldr	r2, [pc, #276]	; (8009728 <HAL_DMA_Init+0x140>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	009a      	lsls	r2, r3, #2
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a42      	ldr	r2, [pc, #264]	; (800972c <HAL_DMA_Init+0x144>)
 8009622:	641a      	str	r2, [r3, #64]	; 0x40
 8009624:	e00e      	b.n	8009644 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	4b40      	ldr	r3, [pc, #256]	; (8009730 <HAL_DMA_Init+0x148>)
 800962e:	4413      	add	r3, r2
 8009630:	4a3d      	ldr	r2, [pc, #244]	; (8009728 <HAL_DMA_Init+0x140>)
 8009632:	fba2 2303 	umull	r2, r3, r2, r3
 8009636:	091b      	lsrs	r3, r3, #4
 8009638:	009a      	lsls	r2, r3, #2
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a3c      	ldr	r2, [pc, #240]	; (8009734 <HAL_DMA_Init+0x14c>)
 8009642:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800965a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f9b6 	bl	8009a08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096a4:	d102      	bne.n	80096ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80096c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d010      	beq.n	80096ec <HAL_DMA_Init+0x104>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d80c      	bhi.n	80096ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f9d6 	bl	8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80096e8:	605a      	str	r2, [r3, #4]
 80096ea:	e008      	b.n	80096fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	40020407 	.word	0x40020407
 8009724:	bffdfff8 	.word	0xbffdfff8
 8009728:	cccccccd 	.word	0xcccccccd
 800972c:	40020000 	.word	0x40020000
 8009730:	bffdfbf8 	.word	0xbffdfbf8
 8009734:	40020400 	.word	0x40020400

08009738 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_DMA_Start_IT+0x20>
 8009754:	2302      	movs	r3, #2
 8009756:	e066      	b.n	8009826 <HAL_DMA_Start_IT+0xee>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b01      	cmp	r3, #1
 800976a:	d155      	bne.n	8009818 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0201 	bic.w	r2, r2, #1
 8009788:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	68b9      	ldr	r1, [r7, #8]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 f8fb 	bl	800998c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	2b00      	cmp	r3, #0
 800979c:	d008      	beq.n	80097b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 020e 	orr.w	r2, r2, #14
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	e00f      	b.n	80097d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0204 	bic.w	r2, r2, #4
 80097be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f042 020a 	orr.w	r2, r2, #10
 80097ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d007      	beq.n	80097ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009804:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0201 	orr.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e005      	b.n	8009824 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009820:	2302      	movs	r3, #2
 8009822:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	f003 031f 	and.w	r3, r3, #31
 800984e:	2204      	movs	r2, #4
 8009850:	409a      	lsls	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4013      	ands	r3, r2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d026      	beq.n	80098a8 <HAL_DMA_IRQHandler+0x7a>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	d021      	beq.n	80098a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d107      	bne.n	8009882 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0204 	bic.w	r2, r2, #4
 8009880:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009886:	f003 021f 	and.w	r2, r3, #31
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	2104      	movs	r1, #4
 8009890:	fa01 f202 	lsl.w	r2, r1, r2
 8009894:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	2b00      	cmp	r3, #0
 800989c:	d071      	beq.n	8009982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80098a6:	e06c      	b.n	8009982 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ac:	f003 031f 	and.w	r3, r3, #31
 80098b0:	2202      	movs	r2, #2
 80098b2:	409a      	lsls	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4013      	ands	r3, r2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d02e      	beq.n	800991a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d029      	beq.n	800991a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 020a 	bic.w	r2, r2, #10
 80098e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f0:	f003 021f 	and.w	r2, r3, #31
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	2102      	movs	r1, #2
 80098fa:	fa01 f202 	lsl.w	r2, r1, r2
 80098fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d038      	beq.n	8009982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009918:	e033      	b.n	8009982 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991e:	f003 031f 	and.w	r3, r3, #31
 8009922:	2208      	movs	r2, #8
 8009924:	409a      	lsls	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	4013      	ands	r3, r2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d02a      	beq.n	8009984 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	f003 0308 	and.w	r3, r3, #8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d025      	beq.n	8009984 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 020e 	bic.w	r2, r2, #14
 8009946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994c:	f003 021f 	and.w	r2, r3, #31
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	2101      	movs	r1, #1
 8009956:	fa01 f202 	lsl.w	r2, r1, r2
 800995a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009976:	2b00      	cmp	r3, #0
 8009978:	d004      	beq.n	8009984 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009982:	bf00      	nop
 8009984:	bf00      	nop
}
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80099a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80099b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ba:	f003 021f 	and.w	r2, r3, #31
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	2101      	movs	r1, #1
 80099c4:	fa01 f202 	lsl.w	r2, r1, r2
 80099c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	2b10      	cmp	r3, #16
 80099d8:	d108      	bne.n	80099ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80099ea:	e007      	b.n	80099fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	60da      	str	r2, [r3, #12]
}
 80099fc:	bf00      	nop
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	461a      	mov	r2, r3
 8009a16:	4b16      	ldr	r3, [pc, #88]	; (8009a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d802      	bhi.n	8009a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009a1c:	4b15      	ldr	r3, [pc, #84]	; (8009a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	e001      	b.n	8009a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009a22:	4b15      	ldr	r3, [pc, #84]	; (8009a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009a24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	3b08      	subs	r3, #8
 8009a32:	4a12      	ldr	r2, [pc, #72]	; (8009a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009a34:	fba2 2303 	umull	r2, r3, r2, r3
 8009a38:	091b      	lsrs	r3, r3, #4
 8009a3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a40:	089b      	lsrs	r3, r3, #2
 8009a42:	009a      	lsls	r2, r3, #2
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a0b      	ldr	r2, [pc, #44]	; (8009a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009a52:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f003 031f 	and.w	r3, r3, #31
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	409a      	lsls	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009a62:	bf00      	nop
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	40020407 	.word	0x40020407
 8009a74:	40020800 	.word	0x40020800
 8009a78:	40020820 	.word	0x40020820
 8009a7c:	cccccccd 	.word	0xcccccccd
 8009a80:	40020880 	.word	0x40020880

08009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a08      	ldr	r2, [pc, #32]	; (8009ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009aa6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	409a      	lsls	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009ab8:	bf00      	nop
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	1000823f 	.word	0x1000823f
 8009ac8:	40020940 	.word	0x40020940

08009acc <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e033      	b.n	8009b46 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7fd f850 	bl	8006b98 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f854 	bl	8009bac <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f822 	bl	8009b4e <FMAC_Reset>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d10c      	bne.n	8009b2a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b14:	f043 0210 	orr.w	r2, r3, #16
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	22a0      	movs	r2, #160	; 0xa0
 8009b20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	73fb      	strb	r3, [r7, #15]
 8009b28:	e008      	b.n	8009b3c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2220      	movs	r2, #32
 8009b34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b56:	f7fd fdaf 	bl	80076b8 <HAL_GetTick>
 8009b5a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691a      	ldr	r2, [r3, #16]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009b6a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8009b6c:	e00f      	b.n	8009b8e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8009b6e:	f7fd fda3 	bl	80076b8 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b7c:	d907      	bls.n	8009b8e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e00a      	b.n	8009ba4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e8      	bne.n	8009b6e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f807 	bl	8009bc8 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f81b 	bl	8009bf6 <FMAC_ResetOutputStateAndDataPointers>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8009bea:	bf00      	nop
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2220      	movs	r2, #32
 8009c14:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009c32:	e15a      	b.n	8009eea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	2101      	movs	r1, #1
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c40:	4013      	ands	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 814c 	beq.w	8009ee4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d005      	beq.n	8009c64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d130      	bne.n	8009cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	2203      	movs	r2, #3
 8009c70:	fa02 f303 	lsl.w	r3, r2, r3
 8009c74:	43db      	mvns	r3, r3
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4013      	ands	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	fa02 f303 	lsl.w	r3, r2, r3
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca2:	43db      	mvns	r3, r3
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	091b      	lsrs	r3, r3, #4
 8009cb0:	f003 0201 	and.w	r2, r3, #1
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d017      	beq.n	8009d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	2203      	movs	r2, #3
 8009cde:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce2:	43db      	mvns	r3, r3
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	689a      	ldr	r2, [r3, #8]
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	005b      	lsls	r3, r3, #1
 8009cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f003 0303 	and.w	r3, r3, #3
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d123      	bne.n	8009d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	08da      	lsrs	r2, r3, #3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3208      	adds	r2, #8
 8009d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f003 0307 	and.w	r3, r3, #7
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	220f      	movs	r2, #15
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	43db      	mvns	r3, r3
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	4013      	ands	r3, r2
 8009d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	691a      	ldr	r2, [r3, #16]
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	08da      	lsrs	r2, r3, #3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3208      	adds	r2, #8
 8009d50:	6939      	ldr	r1, [r7, #16]
 8009d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	2203      	movs	r2, #3
 8009d62:	fa02 f303 	lsl.w	r3, r2, r3
 8009d66:	43db      	mvns	r3, r3
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f003 0203 	and.w	r2, r3, #3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 80a6 	beq.w	8009ee4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d98:	4b5b      	ldr	r3, [pc, #364]	; (8009f08 <HAL_GPIO_Init+0x2e4>)
 8009d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d9c:	4a5a      	ldr	r2, [pc, #360]	; (8009f08 <HAL_GPIO_Init+0x2e4>)
 8009d9e:	f043 0301 	orr.w	r3, r3, #1
 8009da2:	6613      	str	r3, [r2, #96]	; 0x60
 8009da4:	4b58      	ldr	r3, [pc, #352]	; (8009f08 <HAL_GPIO_Init+0x2e4>)
 8009da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	60bb      	str	r3, [r7, #8]
 8009dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009db0:	4a56      	ldr	r2, [pc, #344]	; (8009f0c <HAL_GPIO_Init+0x2e8>)
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	089b      	lsrs	r3, r3, #2
 8009db6:	3302      	adds	r3, #2
 8009db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f003 0303 	and.w	r3, r3, #3
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	220f      	movs	r2, #15
 8009dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009dda:	d01f      	beq.n	8009e1c <HAL_GPIO_Init+0x1f8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a4c      	ldr	r2, [pc, #304]	; (8009f10 <HAL_GPIO_Init+0x2ec>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d019      	beq.n	8009e18 <HAL_GPIO_Init+0x1f4>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a4b      	ldr	r2, [pc, #300]	; (8009f14 <HAL_GPIO_Init+0x2f0>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d013      	beq.n	8009e14 <HAL_GPIO_Init+0x1f0>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a4a      	ldr	r2, [pc, #296]	; (8009f18 <HAL_GPIO_Init+0x2f4>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00d      	beq.n	8009e10 <HAL_GPIO_Init+0x1ec>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a49      	ldr	r2, [pc, #292]	; (8009f1c <HAL_GPIO_Init+0x2f8>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d007      	beq.n	8009e0c <HAL_GPIO_Init+0x1e8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a48      	ldr	r2, [pc, #288]	; (8009f20 <HAL_GPIO_Init+0x2fc>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d101      	bne.n	8009e08 <HAL_GPIO_Init+0x1e4>
 8009e04:	2305      	movs	r3, #5
 8009e06:	e00a      	b.n	8009e1e <HAL_GPIO_Init+0x1fa>
 8009e08:	2306      	movs	r3, #6
 8009e0a:	e008      	b.n	8009e1e <HAL_GPIO_Init+0x1fa>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	e006      	b.n	8009e1e <HAL_GPIO_Init+0x1fa>
 8009e10:	2303      	movs	r3, #3
 8009e12:	e004      	b.n	8009e1e <HAL_GPIO_Init+0x1fa>
 8009e14:	2302      	movs	r3, #2
 8009e16:	e002      	b.n	8009e1e <HAL_GPIO_Init+0x1fa>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e000      	b.n	8009e1e <HAL_GPIO_Init+0x1fa>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	f002 0203 	and.w	r2, r2, #3
 8009e24:	0092      	lsls	r2, r2, #2
 8009e26:	4093      	lsls	r3, r2
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e2e:	4937      	ldr	r1, [pc, #220]	; (8009f0c <HAL_GPIO_Init+0x2e8>)
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	089b      	lsrs	r3, r3, #2
 8009e34:	3302      	adds	r3, #2
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009e3c:	4b39      	ldr	r3, [pc, #228]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	43db      	mvns	r3, r3
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	4013      	ands	r3, r2
 8009e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009e60:	4a30      	ldr	r2, [pc, #192]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009e66:	4b2f      	ldr	r3, [pc, #188]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	43db      	mvns	r3, r3
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4013      	ands	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009e8a:	4a26      	ldr	r2, [pc, #152]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009e90:	4b24      	ldr	r3, [pc, #144]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	43db      	mvns	r3, r3
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009eb4:	4a1b      	ldr	r2, [pc, #108]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009eba:	4b1a      	ldr	r3, [pc, #104]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	43db      	mvns	r3, r3
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009ede:	4a11      	ldr	r2, [pc, #68]	; (8009f24 <HAL_GPIO_Init+0x300>)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f47f ae9d 	bne.w	8009c34 <HAL_GPIO_Init+0x10>
  }
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	371c      	adds	r7, #28
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	40021000 	.word	0x40021000
 8009f0c:	40010000 	.word	0x40010000
 8009f10:	48000400 	.word	0x48000400
 8009f14:	48000800 	.word	0x48000800
 8009f18:	48000c00 	.word	0x48000c00
 8009f1c:	48001000 	.word	0x48001000
 8009f20:	48001400 	.word	0x48001400
 8009f24:	40010400 	.word	0x40010400

08009f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	807b      	strh	r3, [r7, #2]
 8009f34:	4613      	mov	r3, r2
 8009f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009f38:	787b      	ldrb	r3, [r7, #1]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009f3e:	887a      	ldrh	r2, [r7, #2]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009f44:	e002      	b.n	8009f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009f46:	887a      	ldrh	r2, [r7, #2]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009f64:	695a      	ldr	r2, [r3, #20]
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d006      	beq.n	8009f7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009f6e:	4a05      	ldr	r2, [pc, #20]	; (8009f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009f74:	88fb      	ldrh	r3, [r7, #6]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fc fa6e 	bl	8006458 <HAL_GPIO_EXTI_Callback>
  }
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	40010400 	.word	0x40010400

08009f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e08d      	b.n	800a0b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d106      	bne.n	8009fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7fc fe12 	bl	8006bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2224      	movs	r2, #36	; 0x24
 8009fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 0201 	bic.w	r2, r2, #1
 8009fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d107      	bne.n	800a002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ffe:	609a      	str	r2, [r3, #8]
 800a000:	e006      	b.n	800a010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a00e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d108      	bne.n	800a02a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a026:	605a      	str	r2, [r3, #4]
 800a028:	e007      	b.n	800a03a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a04c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a05c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691a      	ldr	r2, [r3, #16]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	69d9      	ldr	r1, [r3, #28]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1a      	ldr	r2, [r3, #32]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 0201 	orr.w	r2, r2, #1
 800a096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b083      	sub	sp, #12
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b20      	cmp	r3, #32
 800a0d2:	d138      	bne.n	800a146 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a0de:	2302      	movs	r3, #2
 800a0e0:	e032      	b.n	800a148 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2224      	movs	r2, #36	; 0x24
 800a0ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a110:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6819      	ldr	r1, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f042 0201 	orr.w	r2, r2, #1
 800a130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	e000      	b.n	800a148 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a146:	2302      	movs	r3, #2
  }
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b20      	cmp	r3, #32
 800a168:	d139      	bne.n	800a1de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a174:	2302      	movs	r3, #2
 800a176:	e033      	b.n	800a1e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2224      	movs	r2, #36	; 0x24
 800a184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 0201 	bic.w	r2, r2, #1
 800a196:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a1a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f042 0201 	orr.w	r2, r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e000      	b.n	800a1e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a1de:	2302      	movs	r3, #2
  }
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d141      	bne.n	800a27e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a1fa:	4b4b      	ldr	r3, [pc, #300]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a206:	d131      	bne.n	800a26c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a208:	4b47      	ldr	r3, [pc, #284]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a20e:	4a46      	ldr	r2, [pc, #280]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a218:	4b43      	ldr	r3, [pc, #268]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a220:	4a41      	ldr	r2, [pc, #260]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a226:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a228:	4b40      	ldr	r3, [pc, #256]	; (800a32c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2232      	movs	r2, #50	; 0x32
 800a22e:	fb02 f303 	mul.w	r3, r2, r3
 800a232:	4a3f      	ldr	r2, [pc, #252]	; (800a330 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a234:	fba2 2303 	umull	r2, r3, r2, r3
 800a238:	0c9b      	lsrs	r3, r3, #18
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a23e:	e002      	b.n	800a246 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3b01      	subs	r3, #1
 800a244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a246:	4b38      	ldr	r3, [pc, #224]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a24e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a252:	d102      	bne.n	800a25a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1f2      	bne.n	800a240 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a25a:	4b33      	ldr	r3, [pc, #204]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a266:	d158      	bne.n	800a31a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e057      	b.n	800a31c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a26c:	4b2e      	ldr	r3, [pc, #184]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a272:	4a2d      	ldr	r2, [pc, #180]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a27c:	e04d      	b.n	800a31a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a284:	d141      	bne.n	800a30a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a286:	4b28      	ldr	r3, [pc, #160]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a292:	d131      	bne.n	800a2f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a294:	4b24      	ldr	r3, [pc, #144]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a29a:	4a23      	ldr	r2, [pc, #140]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a29c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2a4:	4b20      	ldr	r3, [pc, #128]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a2ac:	4a1e      	ldr	r2, [pc, #120]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a2b4:	4b1d      	ldr	r3, [pc, #116]	; (800a32c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2232      	movs	r2, #50	; 0x32
 800a2ba:	fb02 f303 	mul.w	r3, r2, r3
 800a2be:	4a1c      	ldr	r2, [pc, #112]	; (800a330 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c4:	0c9b      	lsrs	r3, r3, #18
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2ca:	e002      	b.n	800a2d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2de:	d102      	bne.n	800a2e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1f2      	bne.n	800a2cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a2e6:	4b10      	ldr	r3, [pc, #64]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f2:	d112      	bne.n	800a31a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e011      	b.n	800a31c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2fe:	4a0a      	ldr	r2, [pc, #40]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a308:	e007      	b.n	800a31a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a30a:	4b07      	ldr	r3, [pc, #28]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a312:	4a05      	ldr	r2, [pc, #20]	; (800a328 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a318:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	40007000 	.word	0x40007000
 800a32c:	2000786c 	.word	0x2000786c
 800a330:	431bde83 	.word	0x431bde83

0800a334 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a334:	b480      	push	{r7}
 800a336:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	4a04      	ldr	r2, [pc, #16]	; (800a350 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a33e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a342:	6093      	str	r3, [r2, #8]
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	40007000 	.word	0x40007000

0800a354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e2fe      	b.n	800a964 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d075      	beq.n	800a45e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a372:	4b97      	ldr	r3, [pc, #604]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f003 030c 	and.w	r3, r3, #12
 800a37a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a37c:	4b94      	ldr	r3, [pc, #592]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f003 0303 	and.w	r3, r3, #3
 800a384:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	2b0c      	cmp	r3, #12
 800a38a:	d102      	bne.n	800a392 <HAL_RCC_OscConfig+0x3e>
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d002      	beq.n	800a398 <HAL_RCC_OscConfig+0x44>
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b08      	cmp	r3, #8
 800a396:	d10b      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a398:	4b8d      	ldr	r3, [pc, #564]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d05b      	beq.n	800a45c <HAL_RCC_OscConfig+0x108>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d157      	bne.n	800a45c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e2d9      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b8:	d106      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x74>
 800a3ba:	4b85      	ldr	r3, [pc, #532]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a84      	ldr	r2, [pc, #528]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	e01d      	b.n	800a404 <HAL_RCC_OscConfig+0xb0>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3d0:	d10c      	bne.n	800a3ec <HAL_RCC_OscConfig+0x98>
 800a3d2:	4b7f      	ldr	r3, [pc, #508]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a7e      	ldr	r2, [pc, #504]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3dc:	6013      	str	r3, [r2, #0]
 800a3de:	4b7c      	ldr	r3, [pc, #496]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a7b      	ldr	r2, [pc, #492]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	e00b      	b.n	800a404 <HAL_RCC_OscConfig+0xb0>
 800a3ec:	4b78      	ldr	r3, [pc, #480]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a77      	ldr	r2, [pc, #476]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	4b75      	ldr	r3, [pc, #468]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a74      	ldr	r2, [pc, #464]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a3fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d013      	beq.n	800a434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a40c:	f7fd f954 	bl	80076b8 <HAL_GetTick>
 800a410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a412:	e008      	b.n	800a426 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a414:	f7fd f950 	bl	80076b8 <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	2b64      	cmp	r3, #100	; 0x64
 800a420:	d901      	bls.n	800a426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e29e      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a426:	4b6a      	ldr	r3, [pc, #424]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0f0      	beq.n	800a414 <HAL_RCC_OscConfig+0xc0>
 800a432:	e014      	b.n	800a45e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a434:	f7fd f940 	bl	80076b8 <HAL_GetTick>
 800a438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a43a:	e008      	b.n	800a44e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a43c:	f7fd f93c 	bl	80076b8 <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	2b64      	cmp	r3, #100	; 0x64
 800a448:	d901      	bls.n	800a44e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e28a      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a44e:	4b60      	ldr	r3, [pc, #384]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f0      	bne.n	800a43c <HAL_RCC_OscConfig+0xe8>
 800a45a:	e000      	b.n	800a45e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a45c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d075      	beq.n	800a556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a46a:	4b59      	ldr	r3, [pc, #356]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f003 030c 	and.w	r3, r3, #12
 800a472:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a474:	4b56      	ldr	r3, [pc, #344]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	2b0c      	cmp	r3, #12
 800a482:	d102      	bne.n	800a48a <HAL_RCC_OscConfig+0x136>
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2b02      	cmp	r3, #2
 800a488:	d002      	beq.n	800a490 <HAL_RCC_OscConfig+0x13c>
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	d11f      	bne.n	800a4d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a490:	4b4f      	ldr	r3, [pc, #316]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x154>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e25d      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4a8:	4b49      	ldr	r3, [pc, #292]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	061b      	lsls	r3, r3, #24
 800a4b6:	4946      	ldr	r1, [pc, #280]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a4bc:	4b45      	ldr	r3, [pc, #276]	; (800a5d4 <HAL_RCC_OscConfig+0x280>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fd f8ad 	bl	8007620 <HAL_InitTick>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d043      	beq.n	800a554 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e249      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d023      	beq.n	800a520 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4d8:	4b3d      	ldr	r3, [pc, #244]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a3c      	ldr	r2, [pc, #240]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a4de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4e4:	f7fd f8e8 	bl	80076b8 <HAL_GetTick>
 800a4e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4ea:	e008      	b.n	800a4fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4ec:	f7fd f8e4 	bl	80076b8 <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d901      	bls.n	800a4fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e232      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4fe:	4b34      	ldr	r3, [pc, #208]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a506:	2b00      	cmp	r3, #0
 800a508:	d0f0      	beq.n	800a4ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a50a:	4b31      	ldr	r3, [pc, #196]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	061b      	lsls	r3, r3, #24
 800a518:	492d      	ldr	r1, [pc, #180]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	604b      	str	r3, [r1, #4]
 800a51e:	e01a      	b.n	800a556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a520:	4b2b      	ldr	r3, [pc, #172]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a2a      	ldr	r2, [pc, #168]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a52a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52c:	f7fd f8c4 	bl	80076b8 <HAL_GetTick>
 800a530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a532:	e008      	b.n	800a546 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a534:	f7fd f8c0 	bl	80076b8 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d901      	bls.n	800a546 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e20e      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a546:	4b22      	ldr	r3, [pc, #136]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1f0      	bne.n	800a534 <HAL_RCC_OscConfig+0x1e0>
 800a552:	e000      	b.n	800a556 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a554:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0308 	and.w	r3, r3, #8
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d041      	beq.n	800a5e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d01c      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a56a:	4b19      	ldr	r3, [pc, #100]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a570:	4a17      	ldr	r2, [pc, #92]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a572:	f043 0301 	orr.w	r3, r3, #1
 800a576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a57a:	f7fd f89d 	bl	80076b8 <HAL_GetTick>
 800a57e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a580:	e008      	b.n	800a594 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a582:	f7fd f899 	bl	80076b8 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d901      	bls.n	800a594 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e1e7      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a594:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a59a:	f003 0302 	and.w	r3, r3, #2
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0ef      	beq.n	800a582 <HAL_RCC_OscConfig+0x22e>
 800a5a2:	e020      	b.n	800a5e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a5a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5aa:	4a09      	ldr	r2, [pc, #36]	; (800a5d0 <HAL_RCC_OscConfig+0x27c>)
 800a5ac:	f023 0301 	bic.w	r3, r3, #1
 800a5b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5b4:	f7fd f880 	bl	80076b8 <HAL_GetTick>
 800a5b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a5ba:	e00d      	b.n	800a5d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5bc:	f7fd f87c 	bl	80076b8 <HAL_GetTick>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d906      	bls.n	800a5d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e1ca      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
 800a5ce:	bf00      	nop
 800a5d0:	40021000 	.word	0x40021000
 800a5d4:	20007870 	.word	0x20007870
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a5d8:	4b8c      	ldr	r3, [pc, #560]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a5da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1ea      	bne.n	800a5bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 80a6 	beq.w	800a740 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a5f8:	4b84      	ldr	r3, [pc, #528]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <HAL_RCC_OscConfig+0x2b4>
 800a604:	2301      	movs	r3, #1
 800a606:	e000      	b.n	800a60a <HAL_RCC_OscConfig+0x2b6>
 800a608:	2300      	movs	r3, #0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00d      	beq.n	800a62a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a60e:	4b7f      	ldr	r3, [pc, #508]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a612:	4a7e      	ldr	r2, [pc, #504]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a618:	6593      	str	r3, [r2, #88]	; 0x58
 800a61a:	4b7c      	ldr	r3, [pc, #496]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a626:	2301      	movs	r3, #1
 800a628:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a62a:	4b79      	ldr	r3, [pc, #484]	; (800a810 <HAL_RCC_OscConfig+0x4bc>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a632:	2b00      	cmp	r3, #0
 800a634:	d118      	bne.n	800a668 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a636:	4b76      	ldr	r3, [pc, #472]	; (800a810 <HAL_RCC_OscConfig+0x4bc>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a75      	ldr	r2, [pc, #468]	; (800a810 <HAL_RCC_OscConfig+0x4bc>)
 800a63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a642:	f7fd f839 	bl	80076b8 <HAL_GetTick>
 800a646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a648:	e008      	b.n	800a65c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a64a:	f7fd f835 	bl	80076b8 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e183      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a65c:	4b6c      	ldr	r3, [pc, #432]	; (800a810 <HAL_RCC_OscConfig+0x4bc>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0f0      	beq.n	800a64a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d108      	bne.n	800a682 <HAL_RCC_OscConfig+0x32e>
 800a670:	4b66      	ldr	r3, [pc, #408]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a676:	4a65      	ldr	r2, [pc, #404]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a680:	e024      	b.n	800a6cc <HAL_RCC_OscConfig+0x378>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	2b05      	cmp	r3, #5
 800a688:	d110      	bne.n	800a6ac <HAL_RCC_OscConfig+0x358>
 800a68a:	4b60      	ldr	r3, [pc, #384]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a690:	4a5e      	ldr	r2, [pc, #376]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a692:	f043 0304 	orr.w	r3, r3, #4
 800a696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a69a:	4b5c      	ldr	r3, [pc, #368]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a0:	4a5a      	ldr	r2, [pc, #360]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a6a2:	f043 0301 	orr.w	r3, r3, #1
 800a6a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a6aa:	e00f      	b.n	800a6cc <HAL_RCC_OscConfig+0x378>
 800a6ac:	4b57      	ldr	r3, [pc, #348]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b2:	4a56      	ldr	r2, [pc, #344]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a6bc:	4b53      	ldr	r3, [pc, #332]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c2:	4a52      	ldr	r2, [pc, #328]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a6c4:	f023 0304 	bic.w	r3, r3, #4
 800a6c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d016      	beq.n	800a702 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6d4:	f7fc fff0 	bl	80076b8 <HAL_GetTick>
 800a6d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6da:	e00a      	b.n	800a6f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6dc:	f7fc ffec 	bl	80076b8 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e138      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6f2:	4b46      	ldr	r3, [pc, #280]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6f8:	f003 0302 	and.w	r3, r3, #2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0ed      	beq.n	800a6dc <HAL_RCC_OscConfig+0x388>
 800a700:	e015      	b.n	800a72e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a702:	f7fc ffd9 	bl	80076b8 <HAL_GetTick>
 800a706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a708:	e00a      	b.n	800a720 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a70a:	f7fc ffd5 	bl	80076b8 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	f241 3288 	movw	r2, #5000	; 0x1388
 800a718:	4293      	cmp	r3, r2
 800a71a:	d901      	bls.n	800a720 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e121      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a720:	4b3a      	ldr	r3, [pc, #232]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1ed      	bne.n	800a70a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a72e:	7ffb      	ldrb	r3, [r7, #31]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d105      	bne.n	800a740 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a734:	4b35      	ldr	r3, [pc, #212]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a738:	4a34      	ldr	r2, [pc, #208]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a73a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a73e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d03c      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d01c      	beq.n	800a78e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a754:	4b2d      	ldr	r3, [pc, #180]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a75a:	4a2c      	ldr	r2, [pc, #176]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a75c:	f043 0301 	orr.w	r3, r3, #1
 800a760:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a764:	f7fc ffa8 	bl	80076b8 <HAL_GetTick>
 800a768:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a76a:	e008      	b.n	800a77e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a76c:	f7fc ffa4 	bl	80076b8 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b02      	cmp	r3, #2
 800a778:	d901      	bls.n	800a77e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e0f2      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a77e:	4b23      	ldr	r3, [pc, #140]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a784:	f003 0302 	and.w	r3, r3, #2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0ef      	beq.n	800a76c <HAL_RCC_OscConfig+0x418>
 800a78c:	e01b      	b.n	800a7c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a78e:	4b1f      	ldr	r3, [pc, #124]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a794:	4a1d      	ldr	r2, [pc, #116]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a796:	f023 0301 	bic.w	r3, r3, #1
 800a79a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a79e:	f7fc ff8b 	bl	80076b8 <HAL_GetTick>
 800a7a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a7a4:	e008      	b.n	800a7b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7a6:	f7fc ff87 	bl	80076b8 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d901      	bls.n	800a7b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e0d5      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a7b8:	4b14      	ldr	r3, [pc, #80]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a7ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1ef      	bne.n	800a7a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 80c9 	beq.w	800a962 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a7d0:	4b0e      	ldr	r3, [pc, #56]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f003 030c 	and.w	r3, r3, #12
 800a7d8:	2b0c      	cmp	r3, #12
 800a7da:	f000 8083 	beq.w	800a8e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d15e      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a08      	ldr	r2, [pc, #32]	; (800a80c <HAL_RCC_OscConfig+0x4b8>)
 800a7ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f2:	f7fc ff61 	bl	80076b8 <HAL_GetTick>
 800a7f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7f8:	e00c      	b.n	800a814 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7fa:	f7fc ff5d 	bl	80076b8 <HAL_GetTick>
 800a7fe:	4602      	mov	r2, r0
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b02      	cmp	r3, #2
 800a806:	d905      	bls.n	800a814 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e0ab      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
 800a80c:	40021000 	.word	0x40021000
 800a810:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a814:	4b55      	ldr	r3, [pc, #340]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1ec      	bne.n	800a7fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a820:	4b52      	ldr	r3, [pc, #328]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a822:	68da      	ldr	r2, [r3, #12]
 800a824:	4b52      	ldr	r3, [pc, #328]	; (800a970 <HAL_RCC_OscConfig+0x61c>)
 800a826:	4013      	ands	r3, r2
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6a11      	ldr	r1, [r2, #32]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a830:	3a01      	subs	r2, #1
 800a832:	0112      	lsls	r2, r2, #4
 800a834:	4311      	orrs	r1, r2
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a83a:	0212      	lsls	r2, r2, #8
 800a83c:	4311      	orrs	r1, r2
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a842:	0852      	lsrs	r2, r2, #1
 800a844:	3a01      	subs	r2, #1
 800a846:	0552      	lsls	r2, r2, #21
 800a848:	4311      	orrs	r1, r2
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a84e:	0852      	lsrs	r2, r2, #1
 800a850:	3a01      	subs	r2, #1
 800a852:	0652      	lsls	r2, r2, #25
 800a854:	4311      	orrs	r1, r2
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a85a:	06d2      	lsls	r2, r2, #27
 800a85c:	430a      	orrs	r2, r1
 800a85e:	4943      	ldr	r1, [pc, #268]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a860:	4313      	orrs	r3, r2
 800a862:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a864:	4b41      	ldr	r3, [pc, #260]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a40      	ldr	r2, [pc, #256]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a86a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a86e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a870:	4b3e      	ldr	r3, [pc, #248]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	4a3d      	ldr	r2, [pc, #244]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a87a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a87c:	f7fc ff1c 	bl	80076b8 <HAL_GetTick>
 800a880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a882:	e008      	b.n	800a896 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a884:	f7fc ff18 	bl	80076b8 <HAL_GetTick>
 800a888:	4602      	mov	r2, r0
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d901      	bls.n	800a896 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e066      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a896:	4b35      	ldr	r3, [pc, #212]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0f0      	beq.n	800a884 <HAL_RCC_OscConfig+0x530>
 800a8a2:	e05e      	b.n	800a962 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8a4:	4b31      	ldr	r3, [pc, #196]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a30      	ldr	r2, [pc, #192]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a8aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b0:	f7fc ff02 	bl	80076b8 <HAL_GetTick>
 800a8b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8b6:	e008      	b.n	800a8ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8b8:	f7fc fefe 	bl	80076b8 <HAL_GetTick>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d901      	bls.n	800a8ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e04c      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8ca:	4b28      	ldr	r3, [pc, #160]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1f0      	bne.n	800a8b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a8d6:	4b25      	ldr	r3, [pc, #148]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a8d8:	68da      	ldr	r2, [r3, #12]
 800a8da:	4924      	ldr	r1, [pc, #144]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a8dc:	4b25      	ldr	r3, [pc, #148]	; (800a974 <HAL_RCC_OscConfig+0x620>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	60cb      	str	r3, [r1, #12]
 800a8e2:	e03e      	b.n	800a962 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e039      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a8f0:	4b1e      	ldr	r3, [pc, #120]	; (800a96c <HAL_RCC_OscConfig+0x618>)
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f003 0203 	and.w	r2, r3, #3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	429a      	cmp	r2, r3
 800a902:	d12c      	bne.n	800a95e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	3b01      	subs	r3, #1
 800a910:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a912:	429a      	cmp	r2, r3
 800a914:	d123      	bne.n	800a95e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a920:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a922:	429a      	cmp	r2, r3
 800a924:	d11b      	bne.n	800a95e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a930:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a932:	429a      	cmp	r2, r3
 800a934:	d113      	bne.n	800a95e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a940:	085b      	lsrs	r3, r3, #1
 800a942:	3b01      	subs	r3, #1
 800a944:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a946:	429a      	cmp	r2, r3
 800a948:	d109      	bne.n	800a95e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a954:	085b      	lsrs	r3, r3, #1
 800a956:	3b01      	subs	r3, #1
 800a958:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d001      	beq.n	800a962 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e000      	b.n	800a964 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3720      	adds	r7, #32
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	40021000 	.word	0x40021000
 800a970:	019f800c 	.word	0x019f800c
 800a974:	feeefffc 	.word	0xfeeefffc

0800a978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a982:	2300      	movs	r3, #0
 800a984:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e11e      	b.n	800abce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a990:	4b91      	ldr	r3, [pc, #580]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 030f 	and.w	r3, r3, #15
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d910      	bls.n	800a9c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a99e:	4b8e      	ldr	r3, [pc, #568]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f023 020f 	bic.w	r2, r3, #15
 800a9a6:	498c      	ldr	r1, [pc, #560]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ae:	4b8a      	ldr	r3, [pc, #552]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 030f 	and.w	r3, r3, #15
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d001      	beq.n	800a9c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e106      	b.n	800abce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d073      	beq.n	800aab4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	2b03      	cmp	r3, #3
 800a9d2:	d129      	bne.n	800aa28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9d4:	4b81      	ldr	r3, [pc, #516]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e0f4      	b.n	800abce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a9e4:	f000 f99c 	bl	800ad20 <RCC_GetSysClockFreqFromPLLSource>
 800a9e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	4a7c      	ldr	r2, [pc, #496]	; (800abe0 <HAL_RCC_ClockConfig+0x268>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d93f      	bls.n	800aa72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a9f2:	4b7a      	ldr	r3, [pc, #488]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d009      	beq.n	800aa12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d033      	beq.n	800aa72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d12f      	bne.n	800aa72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aa12:	4b72      	ldr	r3, [pc, #456]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa1a:	4a70      	ldr	r2, [pc, #448]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aa22:	2380      	movs	r3, #128	; 0x80
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	e024      	b.n	800aa72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d107      	bne.n	800aa40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa30:	4b6a      	ldr	r3, [pc, #424]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d109      	bne.n	800aa50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e0c6      	b.n	800abce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa40:	4b66      	ldr	r3, [pc, #408]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e0be      	b.n	800abce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800aa50:	f000 f8ce 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800aa54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	4a61      	ldr	r2, [pc, #388]	; (800abe0 <HAL_RCC_ClockConfig+0x268>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d909      	bls.n	800aa72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aa5e:	4b5f      	ldr	r3, [pc, #380]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa66:	4a5d      	ldr	r2, [pc, #372]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800aa6e:	2380      	movs	r3, #128	; 0x80
 800aa70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa72:	4b5a      	ldr	r3, [pc, #360]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f023 0203 	bic.w	r2, r3, #3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	4957      	ldr	r1, [pc, #348]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa84:	f7fc fe18 	bl	80076b8 <HAL_GetTick>
 800aa88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa8a:	e00a      	b.n	800aaa2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa8c:	f7fc fe14 	bl	80076b8 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e095      	b.n	800abce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaa2:	4b4e      	ldr	r3, [pc, #312]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	f003 020c 	and.w	r2, r3, #12
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d1eb      	bne.n	800aa8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0302 	and.w	r3, r3, #2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d023      	beq.n	800ab08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d005      	beq.n	800aad8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aacc:	4b43      	ldr	r3, [pc, #268]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	4a42      	ldr	r2, [pc, #264]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aad2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aad6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0308 	and.w	r3, r3, #8
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800aae4:	4b3d      	ldr	r3, [pc, #244]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aaec:	4a3b      	ldr	r2, [pc, #236]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aaee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aaf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aaf4:	4b39      	ldr	r3, [pc, #228]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	4936      	ldr	r1, [pc, #216]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	608b      	str	r3, [r1, #8]
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b80      	cmp	r3, #128	; 0x80
 800ab0c:	d105      	bne.n	800ab1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ab0e:	4b33      	ldr	r3, [pc, #204]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	4a32      	ldr	r2, [pc, #200]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800ab14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab1a:	4b2f      	ldr	r3, [pc, #188]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 030f 	and.w	r3, r3, #15
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d21d      	bcs.n	800ab64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab28:	4b2b      	ldr	r3, [pc, #172]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f023 020f 	bic.w	r2, r3, #15
 800ab30:	4929      	ldr	r1, [pc, #164]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ab38:	f7fc fdbe 	bl	80076b8 <HAL_GetTick>
 800ab3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab3e:	e00a      	b.n	800ab56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab40:	f7fc fdba 	bl	80076b8 <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d901      	bls.n	800ab56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e03b      	b.n	800abce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab56:	4b20      	ldr	r3, [pc, #128]	; (800abd8 <HAL_RCC_ClockConfig+0x260>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 030f 	and.w	r3, r3, #15
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d1ed      	bne.n	800ab40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d008      	beq.n	800ab82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab70:	4b1a      	ldr	r3, [pc, #104]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	4917      	ldr	r1, [pc, #92]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0308 	and.w	r3, r3, #8
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d009      	beq.n	800aba2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab8e:	4b13      	ldr	r3, [pc, #76]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	490f      	ldr	r1, [pc, #60]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aba2:	f000 f825 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800aba6:	4602      	mov	r2, r0
 800aba8:	4b0c      	ldr	r3, [pc, #48]	; (800abdc <HAL_RCC_ClockConfig+0x264>)
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	091b      	lsrs	r3, r3, #4
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	490c      	ldr	r1, [pc, #48]	; (800abe4 <HAL_RCC_ClockConfig+0x26c>)
 800abb4:	5ccb      	ldrb	r3, [r1, r3]
 800abb6:	f003 031f 	and.w	r3, r3, #31
 800abba:	fa22 f303 	lsr.w	r3, r2, r3
 800abbe:	4a0a      	ldr	r2, [pc, #40]	; (800abe8 <HAL_RCC_ClockConfig+0x270>)
 800abc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800abc2:	4b0a      	ldr	r3, [pc, #40]	; (800abec <HAL_RCC_ClockConfig+0x274>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fc fd2a 	bl	8007620 <HAL_InitTick>
 800abcc:	4603      	mov	r3, r0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	40022000 	.word	0x40022000
 800abdc:	40021000 	.word	0x40021000
 800abe0:	04c4b400 	.word	0x04c4b400
 800abe4:	080119a0 	.word	0x080119a0
 800abe8:	2000786c 	.word	0x2000786c
 800abec:	20007870 	.word	0x20007870

0800abf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800abf6:	4b2c      	ldr	r3, [pc, #176]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f003 030c 	and.w	r3, r3, #12
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d102      	bne.n	800ac08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ac02:	4b2a      	ldr	r3, [pc, #168]	; (800acac <HAL_RCC_GetSysClockFreq+0xbc>)
 800ac04:	613b      	str	r3, [r7, #16]
 800ac06:	e047      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ac08:	4b27      	ldr	r3, [pc, #156]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f003 030c 	and.w	r3, r3, #12
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d102      	bne.n	800ac1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ac14:	4b25      	ldr	r3, [pc, #148]	; (800acac <HAL_RCC_GetSysClockFreq+0xbc>)
 800ac16:	613b      	str	r3, [r7, #16]
 800ac18:	e03e      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ac1a:	4b23      	ldr	r3, [pc, #140]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f003 030c 	and.w	r3, r3, #12
 800ac22:	2b0c      	cmp	r3, #12
 800ac24:	d136      	bne.n	800ac94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac26:	4b20      	ldr	r3, [pc, #128]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac30:	4b1d      	ldr	r3, [pc, #116]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	091b      	lsrs	r3, r3, #4
 800ac36:	f003 030f 	and.w	r3, r3, #15
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d10c      	bne.n	800ac5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ac44:	4a19      	ldr	r2, [pc, #100]	; (800acac <HAL_RCC_GetSysClockFreq+0xbc>)
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac4c:	4a16      	ldr	r2, [pc, #88]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ac4e:	68d2      	ldr	r2, [r2, #12]
 800ac50:	0a12      	lsrs	r2, r2, #8
 800ac52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ac56:	fb02 f303 	mul.w	r3, r2, r3
 800ac5a:	617b      	str	r3, [r7, #20]
      break;
 800ac5c:	e00c      	b.n	800ac78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ac5e:	4a13      	ldr	r2, [pc, #76]	; (800acac <HAL_RCC_GetSysClockFreq+0xbc>)
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac66:	4a10      	ldr	r2, [pc, #64]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ac68:	68d2      	ldr	r2, [r2, #12]
 800ac6a:	0a12      	lsrs	r2, r2, #8
 800ac6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ac70:	fb02 f303 	mul.w	r3, r2, r3
 800ac74:	617b      	str	r3, [r7, #20]
      break;
 800ac76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac78:	4b0b      	ldr	r3, [pc, #44]	; (800aca8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	0e5b      	lsrs	r3, r3, #25
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	3301      	adds	r3, #1
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac90:	613b      	str	r3, [r7, #16]
 800ac92:	e001      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ac98:	693b      	ldr	r3, [r7, #16]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	40021000 	.word	0x40021000
 800acac:	00f42400 	.word	0x00f42400

0800acb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800acb4:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800acb6:	681b      	ldr	r3, [r3, #0]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	2000786c 	.word	0x2000786c

0800acc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800accc:	f7ff fff0 	bl	800acb0 <HAL_RCC_GetHCLKFreq>
 800acd0:	4602      	mov	r2, r0
 800acd2:	4b06      	ldr	r3, [pc, #24]	; (800acec <HAL_RCC_GetPCLK1Freq+0x24>)
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	0a1b      	lsrs	r3, r3, #8
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	4904      	ldr	r1, [pc, #16]	; (800acf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800acde:	5ccb      	ldrb	r3, [r1, r3]
 800ace0:	f003 031f 	and.w	r3, r3, #31
 800ace4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ace8:	4618      	mov	r0, r3
 800acea:	bd80      	pop	{r7, pc}
 800acec:	40021000 	.word	0x40021000
 800acf0:	080119b0 	.word	0x080119b0

0800acf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800acf8:	f7ff ffda 	bl	800acb0 <HAL_RCC_GetHCLKFreq>
 800acfc:	4602      	mov	r2, r0
 800acfe:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	0adb      	lsrs	r3, r3, #11
 800ad04:	f003 0307 	and.w	r3, r3, #7
 800ad08:	4904      	ldr	r1, [pc, #16]	; (800ad1c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad0a:	5ccb      	ldrb	r3, [r1, r3]
 800ad0c:	f003 031f 	and.w	r3, r3, #31
 800ad10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	40021000 	.word	0x40021000
 800ad1c:	080119b0 	.word	0x080119b0

0800ad20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad26:	4b1e      	ldr	r3, [pc, #120]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad30:	4b1b      	ldr	r3, [pc, #108]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	091b      	lsrs	r3, r3, #4
 800ad36:	f003 030f 	and.w	r3, r3, #15
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d10c      	bne.n	800ad5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad44:	4a17      	ldr	r2, [pc, #92]	; (800ada4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4c:	4a14      	ldr	r2, [pc, #80]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad4e:	68d2      	ldr	r2, [r2, #12]
 800ad50:	0a12      	lsrs	r2, r2, #8
 800ad52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ad56:	fb02 f303 	mul.w	r3, r2, r3
 800ad5a:	617b      	str	r3, [r7, #20]
    break;
 800ad5c:	e00c      	b.n	800ad78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad5e:	4a11      	ldr	r2, [pc, #68]	; (800ada4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad66:	4a0e      	ldr	r2, [pc, #56]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad68:	68d2      	ldr	r2, [r2, #12]
 800ad6a:	0a12      	lsrs	r2, r2, #8
 800ad6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ad70:	fb02 f303 	mul.w	r3, r2, r3
 800ad74:	617b      	str	r3, [r7, #20]
    break;
 800ad76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad78:	4b09      	ldr	r3, [pc, #36]	; (800ada0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	0e5b      	lsrs	r3, r3, #25
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	3301      	adds	r3, #1
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ad92:	687b      	ldr	r3, [r7, #4]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	371c      	adds	r7, #28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	40021000 	.word	0x40021000
 800ada4:	00f42400 	.word	0x00f42400

0800ada8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800adb0:	2300      	movs	r3, #0
 800adb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800adb4:	2300      	movs	r3, #0
 800adb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 8098 	beq.w	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800adc6:	2300      	movs	r3, #0
 800adc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adca:	4b43      	ldr	r3, [pc, #268]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800adcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10d      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800add6:	4b40      	ldr	r3, [pc, #256]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800add8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adda:	4a3f      	ldr	r2, [pc, #252]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800addc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ade0:	6593      	str	r3, [r2, #88]	; 0x58
 800ade2:	4b3d      	ldr	r3, [pc, #244]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ade4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adea:	60bb      	str	r3, [r7, #8]
 800adec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800adee:	2301      	movs	r3, #1
 800adf0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800adf2:	4b3a      	ldr	r3, [pc, #232]	; (800aedc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a39      	ldr	r2, [pc, #228]	; (800aedc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800adf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800adfe:	f7fc fc5b 	bl	80076b8 <HAL_GetTick>
 800ae02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae04:	e009      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae06:	f7fc fc57 	bl	80076b8 <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d902      	bls.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ae14:	2303      	movs	r3, #3
 800ae16:	74fb      	strb	r3, [r7, #19]
        break;
 800ae18:	e005      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae1a:	4b30      	ldr	r3, [pc, #192]	; (800aedc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0ef      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ae26:	7cfb      	ldrb	r3, [r7, #19]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d159      	bne.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ae2c:	4b2a      	ldr	r3, [pc, #168]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d01e      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d019      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ae48:	4b23      	ldr	r3, [pc, #140]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae54:	4b20      	ldr	r3, [pc, #128]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae5a:	4a1f      	ldr	r2, [pc, #124]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae64:	4b1c      	ldr	r3, [pc, #112]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae6a:	4a1b      	ldr	r2, [pc, #108]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ae74:	4a18      	ldr	r2, [pc, #96]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d016      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae86:	f7fc fc17 	bl	80076b8 <HAL_GetTick>
 800ae8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae8c:	e00b      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae8e:	f7fc fc13 	bl	80076b8 <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d902      	bls.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	74fb      	strb	r3, [r7, #19]
            break;
 800aea4:	e006      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aea6:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0ec      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800aeb4:	7cfb      	ldrb	r3, [r7, #19]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10b      	bne.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec8:	4903      	ldr	r1, [pc, #12]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aed0:	e008      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aed2:	7cfb      	ldrb	r3, [r7, #19]
 800aed4:	74bb      	strb	r3, [r7, #18]
 800aed6:	e005      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800aed8:	40021000 	.word	0x40021000
 800aedc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee0:	7cfb      	ldrb	r3, [r7, #19]
 800aee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aee4:	7c7b      	ldrb	r3, [r7, #17]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d105      	bne.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aeea:	4ba7      	ldr	r3, [pc, #668]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aeec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeee:	4aa6      	ldr	r2, [pc, #664]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aef4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00a      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af02:	4ba1      	ldr	r3, [pc, #644]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af08:	f023 0203 	bic.w	r2, r3, #3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	499d      	ldr	r1, [pc, #628]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af12:	4313      	orrs	r3, r2
 800af14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0302 	and.w	r3, r3, #2
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00a      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af24:	4b98      	ldr	r3, [pc, #608]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2a:	f023 020c 	bic.w	r2, r3, #12
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	4995      	ldr	r1, [pc, #596]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af34:	4313      	orrs	r3, r2
 800af36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00a      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af46:	4b90      	ldr	r3, [pc, #576]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	498c      	ldr	r1, [pc, #560]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af56:	4313      	orrs	r3, r2
 800af58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0308 	and.w	r3, r3, #8
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00a      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800af68:	4b87      	ldr	r3, [pc, #540]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	4984      	ldr	r1, [pc, #528]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af78:	4313      	orrs	r3, r2
 800af7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0310 	and.w	r3, r3, #16
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800af8a:	4b7f      	ldr	r3, [pc, #508]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	497b      	ldr	r1, [pc, #492]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800af9a:	4313      	orrs	r3, r2
 800af9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0320 	and.w	r3, r3, #32
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00a      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afac:	4b76      	ldr	r3, [pc, #472]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	4973      	ldr	r1, [pc, #460]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afbc:	4313      	orrs	r3, r2
 800afbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00a      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800afce:	4b6e      	ldr	r3, [pc, #440]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	496a      	ldr	r1, [pc, #424]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00a      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aff0:	4b65      	ldr	r3, [pc, #404]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	4962      	ldr	r1, [pc, #392]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b000:	4313      	orrs	r3, r2
 800b002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b012:	4b5d      	ldr	r3, [pc, #372]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	4959      	ldr	r1, [pc, #356]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b022:	4313      	orrs	r3, r2
 800b024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00a      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b034:	4b54      	ldr	r3, [pc, #336]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b03a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b042:	4951      	ldr	r1, [pc, #324]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b044:	4313      	orrs	r3, r2
 800b046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b052:	2b00      	cmp	r3, #0
 800b054:	d015      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b056:	4b4c      	ldr	r3, [pc, #304]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	4948      	ldr	r1, [pc, #288]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b066:	4313      	orrs	r3, r2
 800b068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b074:	d105      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b076:	4b44      	ldr	r3, [pc, #272]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	4a43      	ldr	r2, [pc, #268]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b07c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b080:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d015      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b08e:	4b3e      	ldr	r3, [pc, #248]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	493a      	ldr	r1, [pc, #232]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0ac:	d105      	bne.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0ae:	4b36      	ldr	r3, [pc, #216]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	4a35      	ldr	r2, [pc, #212]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0b8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d015      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0c6:	4b30      	ldr	r3, [pc, #192]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d4:	492c      	ldr	r1, [pc, #176]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b0e4:	d105      	bne.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0e6:	4b28      	ldr	r3, [pc, #160]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	4a27      	ldr	r2, [pc, #156]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b0ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d015      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b0fe:	4b22      	ldr	r3, [pc, #136]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10c:	491e      	ldr	r1, [pc, #120]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b11c:	d105      	bne.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b11e:	4b1a      	ldr	r3, [pc, #104]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	4a19      	ldr	r2, [pc, #100]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b128:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d015      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b136:	4b14      	ldr	r3, [pc, #80]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b144:	4910      	ldr	r1, [pc, #64]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b146:	4313      	orrs	r3, r2
 800b148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b154:	d105      	bne.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b156:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	4a0b      	ldr	r2, [pc, #44]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b15c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b160:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d018      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b16e:	4b06      	ldr	r3, [pc, #24]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b174:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17c:	4902      	ldr	r1, [pc, #8]	; (800b188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b17e:	4313      	orrs	r3, r2
 800b180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	e001      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b188:	40021000 	.word	0x40021000
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b192:	d105      	bne.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b194:	4b21      	ldr	r3, [pc, #132]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	4a20      	ldr	r2, [pc, #128]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b19a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b19e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d015      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b1ac:	4b1b      	ldr	r3, [pc, #108]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ba:	4918      	ldr	r1, [pc, #96]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ca:	d105      	bne.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b1cc:	4b13      	ldr	r3, [pc, #76]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	4a12      	ldr	r2, [pc, #72]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b1d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d015      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b1e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1f2:	490a      	ldr	r1, [pc, #40]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b202:	d105      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b204:	4b05      	ldr	r3, [pc, #20]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	4a04      	ldr	r2, [pc, #16]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b20a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b20e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b210:	7cbb      	ldrb	r3, [r7, #18]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	40021000 	.word	0x40021000

0800b220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e049      	b.n	800b2c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7fb fe34 	bl	8006eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2202      	movs	r2, #2
 800b250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	f000 f878 	bl	800b354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d101      	bne.n	800b2e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e031      	b.n	800b34a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f8d5 	bl	800b4a8 <TIM_SlaveTimer_SetConfig>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d009      	beq.n	800b318 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e018      	b.n	800b34a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b326:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b336:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a48      	ldr	r2, [pc, #288]	; (800b488 <TIM_Base_SetConfig+0x134>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d013      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b372:	d00f      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a45      	ldr	r2, [pc, #276]	; (800b48c <TIM_Base_SetConfig+0x138>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00b      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a44      	ldr	r2, [pc, #272]	; (800b490 <TIM_Base_SetConfig+0x13c>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d007      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a43      	ldr	r2, [pc, #268]	; (800b494 <TIM_Base_SetConfig+0x140>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d003      	beq.n	800b394 <TIM_Base_SetConfig+0x40>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a42      	ldr	r2, [pc, #264]	; (800b498 <TIM_Base_SetConfig+0x144>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d108      	bne.n	800b3a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a37      	ldr	r2, [pc, #220]	; (800b488 <TIM_Base_SetConfig+0x134>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d01f      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b4:	d01b      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a34      	ldr	r2, [pc, #208]	; (800b48c <TIM_Base_SetConfig+0x138>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d017      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a33      	ldr	r2, [pc, #204]	; (800b490 <TIM_Base_SetConfig+0x13c>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d013      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a32      	ldr	r2, [pc, #200]	; (800b494 <TIM_Base_SetConfig+0x140>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d00f      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a32      	ldr	r2, [pc, #200]	; (800b49c <TIM_Base_SetConfig+0x148>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d00b      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a31      	ldr	r2, [pc, #196]	; (800b4a0 <TIM_Base_SetConfig+0x14c>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d007      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a30      	ldr	r2, [pc, #192]	; (800b4a4 <TIM_Base_SetConfig+0x150>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d003      	beq.n	800b3ee <TIM_Base_SetConfig+0x9a>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a2b      	ldr	r2, [pc, #172]	; (800b498 <TIM_Base_SetConfig+0x144>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d108      	bne.n	800b400 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a18      	ldr	r2, [pc, #96]	; (800b488 <TIM_Base_SetConfig+0x134>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d013      	beq.n	800b454 <TIM_Base_SetConfig+0x100>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a19      	ldr	r2, [pc, #100]	; (800b494 <TIM_Base_SetConfig+0x140>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00f      	beq.n	800b454 <TIM_Base_SetConfig+0x100>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a19      	ldr	r2, [pc, #100]	; (800b49c <TIM_Base_SetConfig+0x148>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00b      	beq.n	800b454 <TIM_Base_SetConfig+0x100>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a18      	ldr	r2, [pc, #96]	; (800b4a0 <TIM_Base_SetConfig+0x14c>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d007      	beq.n	800b454 <TIM_Base_SetConfig+0x100>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a17      	ldr	r2, [pc, #92]	; (800b4a4 <TIM_Base_SetConfig+0x150>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_Base_SetConfig+0x100>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a12      	ldr	r2, [pc, #72]	; (800b498 <TIM_Base_SetConfig+0x144>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d103      	bne.n	800b45c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	691a      	ldr	r2, [r3, #16]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d105      	bne.n	800b47a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	f023 0201 	bic.w	r2, r3, #1
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	611a      	str	r2, [r3, #16]
  }
}
 800b47a:	bf00      	nop
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	40012c00 	.word	0x40012c00
 800b48c:	40000400 	.word	0x40000400
 800b490:	40000800 	.word	0x40000800
 800b494:	40013400 	.word	0x40013400
 800b498:	40015000 	.word	0x40015000
 800b49c:	40014000 	.word	0x40014000
 800b4a0:	40014400 	.word	0x40014400
 800b4a4:	40014800 	.word	0x40014800

0800b4a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	693a      	ldr	r2, [r7, #16]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	4a4e      	ldr	r2, [pc, #312]	; (800b630 <TIM_SlaveTimer_SetConfig+0x188>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	f000 8092 	beq.w	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b4fe:	4a4c      	ldr	r2, [pc, #304]	; (800b630 <TIM_SlaveTimer_SetConfig+0x188>)
 800b500:	4293      	cmp	r3, r2
 800b502:	f200 808b 	bhi.w	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b506:	4a4b      	ldr	r2, [pc, #300]	; (800b634 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	f000 808a 	beq.w	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b50e:	4a49      	ldr	r2, [pc, #292]	; (800b634 <TIM_SlaveTimer_SetConfig+0x18c>)
 800b510:	4293      	cmp	r3, r2
 800b512:	f200 8083 	bhi.w	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b516:	4a48      	ldr	r2, [pc, #288]	; (800b638 <TIM_SlaveTimer_SetConfig+0x190>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	f000 8082 	beq.w	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b51e:	4a46      	ldr	r2, [pc, #280]	; (800b638 <TIM_SlaveTimer_SetConfig+0x190>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d87b      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b524:	4a45      	ldr	r2, [pc, #276]	; (800b63c <TIM_SlaveTimer_SetConfig+0x194>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d07b      	beq.n	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b52a:	4a44      	ldr	r2, [pc, #272]	; (800b63c <TIM_SlaveTimer_SetConfig+0x194>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d875      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b530:	4a43      	ldr	r2, [pc, #268]	; (800b640 <TIM_SlaveTimer_SetConfig+0x198>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d075      	beq.n	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b536:	4a42      	ldr	r2, [pc, #264]	; (800b640 <TIM_SlaveTimer_SetConfig+0x198>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d86f      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b53c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b540:	d06f      	beq.n	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b542:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b546:	d869      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b548:	2b70      	cmp	r3, #112	; 0x70
 800b54a:	d01a      	beq.n	800b582 <TIM_SlaveTimer_SetConfig+0xda>
 800b54c:	2b70      	cmp	r3, #112	; 0x70
 800b54e:	d865      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b550:	2b60      	cmp	r3, #96	; 0x60
 800b552:	d059      	beq.n	800b608 <TIM_SlaveTimer_SetConfig+0x160>
 800b554:	2b60      	cmp	r3, #96	; 0x60
 800b556:	d861      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b558:	2b50      	cmp	r3, #80	; 0x50
 800b55a:	d04b      	beq.n	800b5f4 <TIM_SlaveTimer_SetConfig+0x14c>
 800b55c:	2b50      	cmp	r3, #80	; 0x50
 800b55e:	d85d      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b560:	2b40      	cmp	r3, #64	; 0x40
 800b562:	d019      	beq.n	800b598 <TIM_SlaveTimer_SetConfig+0xf0>
 800b564:	2b40      	cmp	r3, #64	; 0x40
 800b566:	d859      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b568:	2b30      	cmp	r3, #48	; 0x30
 800b56a:	d05a      	beq.n	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b56c:	2b30      	cmp	r3, #48	; 0x30
 800b56e:	d855      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b570:	2b20      	cmp	r3, #32
 800b572:	d056      	beq.n	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b574:	2b20      	cmp	r3, #32
 800b576:	d851      	bhi.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d052      	beq.n	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b57c:	2b10      	cmp	r3, #16
 800b57e:	d050      	beq.n	800b622 <TIM_SlaveTimer_SetConfig+0x17a>
 800b580:	e04c      	b.n	800b61c <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b592:	f000 f8b6 	bl	800b702 <TIM_ETR_SetConfig>
      break;
 800b596:	e045      	b.n	800b624 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b05      	cmp	r3, #5
 800b59e:	d004      	beq.n	800b5aa <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800b5a4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800b5a8:	d101      	bne.n	800b5ae <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e03b      	b.n	800b626 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	6a1a      	ldr	r2, [r3, #32]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f022 0201 	bic.w	r2, r2, #1
 800b5c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5d4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	011b      	lsls	r3, r3, #4
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	621a      	str	r2, [r3, #32]
      break;
 800b5f2:	e017      	b.n	800b624 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b600:	461a      	mov	r2, r3
 800b602:	f000 f81f 	bl	800b644 <TIM_TI1_ConfigInputStage>
      break;
 800b606:	e00d      	b.n	800b624 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b614:	461a      	mov	r2, r3
 800b616:	f000 f844 	bl	800b6a2 <TIM_TI2_ConfigInputStage>
      break;
 800b61a:	e003      	b.n	800b624 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	75fb      	strb	r3, [r7, #23]
      break;
 800b620:	e000      	b.n	800b624 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800b622:	bf00      	nop
  }

  return status;
 800b624:	7dfb      	ldrb	r3, [r7, #23]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	00100070 	.word	0x00100070
 800b634:	00100050 	.word	0x00100050
 800b638:	00100040 	.word	0x00100040
 800b63c:	00100030 	.word	0x00100030
 800b640:	00100020 	.word	0x00100020

0800b644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	f023 0201 	bic.w	r2, r3, #1
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b66e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	4313      	orrs	r3, r2
 800b678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f023 030a 	bic.w	r3, r3, #10
 800b680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	4313      	orrs	r3, r2
 800b688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	621a      	str	r2, [r3, #32]
}
 800b696:	bf00      	nop
 800b698:	371c      	adds	r7, #28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b087      	sub	sp, #28
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	f023 0210 	bic.w	r2, r3, #16
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	031b      	lsls	r3, r3, #12
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	011b      	lsls	r3, r3, #4
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	621a      	str	r2, [r3, #32]
}
 800b6f6:	bf00      	nop
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b702:	b480      	push	{r7}
 800b704:	b087      	sub	sp, #28
 800b706:	af00      	add	r7, sp, #0
 800b708:	60f8      	str	r0, [r7, #12]
 800b70a:	60b9      	str	r1, [r7, #8]
 800b70c:	607a      	str	r2, [r7, #4]
 800b70e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b71c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	021a      	lsls	r2, r3, #8
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	431a      	orrs	r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4313      	orrs	r3, r2
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	609a      	str	r2, [r3, #8]
}
 800b736:	bf00      	nop
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
	...

0800b744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b754:	2b01      	cmp	r3, #1
 800b756:	d101      	bne.n	800b75c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b758:	2302      	movs	r3, #2
 800b75a:	e06f      	b.n	800b83c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2202      	movs	r2, #2
 800b768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a31      	ldr	r2, [pc, #196]	; (800b848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d009      	beq.n	800b79a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a30      	ldr	r2, [pc, #192]	; (800b84c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d004      	beq.n	800b79a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a2e      	ldr	r2, [pc, #184]	; (800b850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d108      	bne.n	800b7ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b7b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a1e      	ldr	r2, [pc, #120]	; (800b848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d01d      	beq.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7dc:	d018      	beq.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a1c      	ldr	r2, [pc, #112]	; (800b854 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d013      	beq.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a1a      	ldr	r2, [pc, #104]	; (800b858 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d00e      	beq.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a15      	ldr	r2, [pc, #84]	; (800b84c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d009      	beq.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a16      	ldr	r2, [pc, #88]	; (800b85c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d004      	beq.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a11      	ldr	r2, [pc, #68]	; (800b850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d10c      	bne.n	800b82a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	40012c00 	.word	0x40012c00
 800b84c:	40013400 	.word	0x40013400
 800b850:	40015000 	.word	0x40015000
 800b854:	40000400 	.word	0x40000400
 800b858:	40000800 	.word	0x40000800
 800b85c:	40014000 	.word	0x40014000

0800b860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e042      	b.n	800b8f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d106      	bne.n	800b88a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7fb fb5d 	bl	8006f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2224      	movs	r2, #36	; 0x24
 800b88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 0201 	bic.w	r2, r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fb24 	bl	800bef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f825 	bl	800b900 <UART_SetConfig>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d101      	bne.n	800b8c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e01b      	b.n	800b8f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0201 	orr.w	r2, r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fba3 	bl	800c03c <UART_CheckIdleState>
 800b8f6:	4603      	mov	r3, r0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b904:	b08c      	sub	sp, #48	; 0x30
 800b906:	af00      	add	r7, sp, #0
 800b908:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	431a      	orrs	r2, r3
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	431a      	orrs	r2, r3
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	69db      	ldr	r3, [r3, #28]
 800b924:	4313      	orrs	r3, r2
 800b926:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	4baa      	ldr	r3, [pc, #680]	; (800bbd8 <UART_SetConfig+0x2d8>)
 800b930:	4013      	ands	r3, r2
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	6812      	ldr	r2, [r2, #0]
 800b936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b938:	430b      	orrs	r3, r1
 800b93a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	68da      	ldr	r2, [r3, #12]
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a9f      	ldr	r2, [pc, #636]	; (800bbdc <UART_SetConfig+0x2dc>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d004      	beq.n	800b96c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b968:	4313      	orrs	r3, r2
 800b96a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b976:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	6812      	ldr	r2, [r2, #0]
 800b97e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b980:	430b      	orrs	r3, r1
 800b982:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98a:	f023 010f 	bic.w	r1, r3, #15
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a90      	ldr	r2, [pc, #576]	; (800bbe0 <UART_SetConfig+0x2e0>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d125      	bne.n	800b9f0 <UART_SetConfig+0xf0>
 800b9a4:	4b8f      	ldr	r3, [pc, #572]	; (800bbe4 <UART_SetConfig+0x2e4>)
 800b9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d81a      	bhi.n	800b9e8 <UART_SetConfig+0xe8>
 800b9b2:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <UART_SetConfig+0xb8>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9c9 	.word	0x0800b9c9
 800b9bc:	0800b9d9 	.word	0x0800b9d9
 800b9c0:	0800b9d1 	.word	0x0800b9d1
 800b9c4:	0800b9e1 	.word	0x0800b9e1
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ce:	e116      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9d6:	e112      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800b9d8:	2304      	movs	r3, #4
 800b9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9de:	e10e      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9e6:	e10a      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ee:	e106      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a7c      	ldr	r2, [pc, #496]	; (800bbe8 <UART_SetConfig+0x2e8>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d138      	bne.n	800ba6c <UART_SetConfig+0x16c>
 800b9fa:	4b7a      	ldr	r3, [pc, #488]	; (800bbe4 <UART_SetConfig+0x2e4>)
 800b9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba00:	f003 030c 	and.w	r3, r3, #12
 800ba04:	2b0c      	cmp	r3, #12
 800ba06:	d82d      	bhi.n	800ba64 <UART_SetConfig+0x164>
 800ba08:	a201      	add	r2, pc, #4	; (adr r2, 800ba10 <UART_SetConfig+0x110>)
 800ba0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0e:	bf00      	nop
 800ba10:	0800ba45 	.word	0x0800ba45
 800ba14:	0800ba65 	.word	0x0800ba65
 800ba18:	0800ba65 	.word	0x0800ba65
 800ba1c:	0800ba65 	.word	0x0800ba65
 800ba20:	0800ba55 	.word	0x0800ba55
 800ba24:	0800ba65 	.word	0x0800ba65
 800ba28:	0800ba65 	.word	0x0800ba65
 800ba2c:	0800ba65 	.word	0x0800ba65
 800ba30:	0800ba4d 	.word	0x0800ba4d
 800ba34:	0800ba65 	.word	0x0800ba65
 800ba38:	0800ba65 	.word	0x0800ba65
 800ba3c:	0800ba65 	.word	0x0800ba65
 800ba40:	0800ba5d 	.word	0x0800ba5d
 800ba44:	2300      	movs	r3, #0
 800ba46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba4a:	e0d8      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba52:	e0d4      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800ba54:	2304      	movs	r3, #4
 800ba56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba5a:	e0d0      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800ba5c:	2308      	movs	r3, #8
 800ba5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba62:	e0cc      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800ba64:	2310      	movs	r3, #16
 800ba66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba6a:	e0c8      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a5e      	ldr	r2, [pc, #376]	; (800bbec <UART_SetConfig+0x2ec>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d125      	bne.n	800bac2 <UART_SetConfig+0x1c2>
 800ba76:	4b5b      	ldr	r3, [pc, #364]	; (800bbe4 <UART_SetConfig+0x2e4>)
 800ba78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ba80:	2b30      	cmp	r3, #48	; 0x30
 800ba82:	d016      	beq.n	800bab2 <UART_SetConfig+0x1b2>
 800ba84:	2b30      	cmp	r3, #48	; 0x30
 800ba86:	d818      	bhi.n	800baba <UART_SetConfig+0x1ba>
 800ba88:	2b20      	cmp	r3, #32
 800ba8a:	d00a      	beq.n	800baa2 <UART_SetConfig+0x1a2>
 800ba8c:	2b20      	cmp	r3, #32
 800ba8e:	d814      	bhi.n	800baba <UART_SetConfig+0x1ba>
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <UART_SetConfig+0x19a>
 800ba94:	2b10      	cmp	r3, #16
 800ba96:	d008      	beq.n	800baaa <UART_SetConfig+0x1aa>
 800ba98:	e00f      	b.n	800baba <UART_SetConfig+0x1ba>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa0:	e0ad      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800baa2:	2302      	movs	r3, #2
 800baa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa8:	e0a9      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800baaa:	2304      	movs	r3, #4
 800baac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bab0:	e0a5      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bab2:	2308      	movs	r3, #8
 800bab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bab8:	e0a1      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800baba:	2310      	movs	r3, #16
 800babc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bac0:	e09d      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a4a      	ldr	r2, [pc, #296]	; (800bbf0 <UART_SetConfig+0x2f0>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d125      	bne.n	800bb18 <UART_SetConfig+0x218>
 800bacc:	4b45      	ldr	r3, [pc, #276]	; (800bbe4 <UART_SetConfig+0x2e4>)
 800bace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bad6:	2bc0      	cmp	r3, #192	; 0xc0
 800bad8:	d016      	beq.n	800bb08 <UART_SetConfig+0x208>
 800bada:	2bc0      	cmp	r3, #192	; 0xc0
 800badc:	d818      	bhi.n	800bb10 <UART_SetConfig+0x210>
 800bade:	2b80      	cmp	r3, #128	; 0x80
 800bae0:	d00a      	beq.n	800baf8 <UART_SetConfig+0x1f8>
 800bae2:	2b80      	cmp	r3, #128	; 0x80
 800bae4:	d814      	bhi.n	800bb10 <UART_SetConfig+0x210>
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d002      	beq.n	800baf0 <UART_SetConfig+0x1f0>
 800baea:	2b40      	cmp	r3, #64	; 0x40
 800baec:	d008      	beq.n	800bb00 <UART_SetConfig+0x200>
 800baee:	e00f      	b.n	800bb10 <UART_SetConfig+0x210>
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf6:	e082      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800baf8:	2302      	movs	r3, #2
 800bafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bafe:	e07e      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb00:	2304      	movs	r3, #4
 800bb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb06:	e07a      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb08:	2308      	movs	r3, #8
 800bb0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb0e:	e076      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb10:	2310      	movs	r3, #16
 800bb12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb16:	e072      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a35      	ldr	r2, [pc, #212]	; (800bbf4 <UART_SetConfig+0x2f4>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d12a      	bne.n	800bb78 <UART_SetConfig+0x278>
 800bb22:	4b30      	ldr	r3, [pc, #192]	; (800bbe4 <UART_SetConfig+0x2e4>)
 800bb24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb30:	d01a      	beq.n	800bb68 <UART_SetConfig+0x268>
 800bb32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb36:	d81b      	bhi.n	800bb70 <UART_SetConfig+0x270>
 800bb38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb3c:	d00c      	beq.n	800bb58 <UART_SetConfig+0x258>
 800bb3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb42:	d815      	bhi.n	800bb70 <UART_SetConfig+0x270>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <UART_SetConfig+0x250>
 800bb48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb4c:	d008      	beq.n	800bb60 <UART_SetConfig+0x260>
 800bb4e:	e00f      	b.n	800bb70 <UART_SetConfig+0x270>
 800bb50:	2300      	movs	r3, #0
 800bb52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb56:	e052      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb58:	2302      	movs	r3, #2
 800bb5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb5e:	e04e      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb60:	2304      	movs	r3, #4
 800bb62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb66:	e04a      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb68:	2308      	movs	r3, #8
 800bb6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb6e:	e046      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb70:	2310      	movs	r3, #16
 800bb72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb76:	e042      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a17      	ldr	r2, [pc, #92]	; (800bbdc <UART_SetConfig+0x2dc>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d13a      	bne.n	800bbf8 <UART_SetConfig+0x2f8>
 800bb82:	4b18      	ldr	r3, [pc, #96]	; (800bbe4 <UART_SetConfig+0x2e4>)
 800bb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb90:	d01a      	beq.n	800bbc8 <UART_SetConfig+0x2c8>
 800bb92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb96:	d81b      	bhi.n	800bbd0 <UART_SetConfig+0x2d0>
 800bb98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb9c:	d00c      	beq.n	800bbb8 <UART_SetConfig+0x2b8>
 800bb9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bba2:	d815      	bhi.n	800bbd0 <UART_SetConfig+0x2d0>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d003      	beq.n	800bbb0 <UART_SetConfig+0x2b0>
 800bba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbac:	d008      	beq.n	800bbc0 <UART_SetConfig+0x2c0>
 800bbae:	e00f      	b.n	800bbd0 <UART_SetConfig+0x2d0>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbb6:	e022      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bbb8:	2302      	movs	r3, #2
 800bbba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbbe:	e01e      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbc6:	e01a      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bbc8:	2308      	movs	r3, #8
 800bbca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbce:	e016      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bbd0:	2310      	movs	r3, #16
 800bbd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbd6:	e012      	b.n	800bbfe <UART_SetConfig+0x2fe>
 800bbd8:	cfff69f3 	.word	0xcfff69f3
 800bbdc:	40008000 	.word	0x40008000
 800bbe0:	40013800 	.word	0x40013800
 800bbe4:	40021000 	.word	0x40021000
 800bbe8:	40004400 	.word	0x40004400
 800bbec:	40004800 	.word	0x40004800
 800bbf0:	40004c00 	.word	0x40004c00
 800bbf4:	40005000 	.word	0x40005000
 800bbf8:	2310      	movs	r3, #16
 800bbfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4aae      	ldr	r2, [pc, #696]	; (800bebc <UART_SetConfig+0x5bc>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	f040 8097 	bne.w	800bd38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc0e:	2b08      	cmp	r3, #8
 800bc10:	d823      	bhi.n	800bc5a <UART_SetConfig+0x35a>
 800bc12:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <UART_SetConfig+0x318>)
 800bc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc18:	0800bc3d 	.word	0x0800bc3d
 800bc1c:	0800bc5b 	.word	0x0800bc5b
 800bc20:	0800bc45 	.word	0x0800bc45
 800bc24:	0800bc5b 	.word	0x0800bc5b
 800bc28:	0800bc4b 	.word	0x0800bc4b
 800bc2c:	0800bc5b 	.word	0x0800bc5b
 800bc30:	0800bc5b 	.word	0x0800bc5b
 800bc34:	0800bc5b 	.word	0x0800bc5b
 800bc38:	0800bc53 	.word	0x0800bc53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc3c:	f7ff f844 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800bc40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc42:	e010      	b.n	800bc66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc44:	4b9e      	ldr	r3, [pc, #632]	; (800bec0 <UART_SetConfig+0x5c0>)
 800bc46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc48:	e00d      	b.n	800bc66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc4a:	f7fe ffd1 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800bc4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc50:	e009      	b.n	800bc66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc58:	e005      	b.n	800bc66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 8130 	beq.w	800bece <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	4a94      	ldr	r2, [pc, #592]	; (800bec4 <UART_SetConfig+0x5c4>)
 800bc74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4413      	add	r3, r2
 800bc8c:	69ba      	ldr	r2, [r7, #24]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d305      	bcc.n	800bc9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d903      	bls.n	800bca6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bca4:	e113      	b.n	800bece <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	2200      	movs	r2, #0
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	60fa      	str	r2, [r7, #12]
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb2:	4a84      	ldr	r2, [pc, #528]	; (800bec4 <UART_SetConfig+0x5c4>)
 800bcb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	2200      	movs	r2, #0
 800bcbc:	603b      	str	r3, [r7, #0]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bcc8:	f7f5 f806 	bl	8000cd8 <__aeabi_uldivmod>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f04f 0200 	mov.w	r2, #0
 800bcd8:	f04f 0300 	mov.w	r3, #0
 800bcdc:	020b      	lsls	r3, r1, #8
 800bcde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bce2:	0202      	lsls	r2, r0, #8
 800bce4:	6979      	ldr	r1, [r7, #20]
 800bce6:	6849      	ldr	r1, [r1, #4]
 800bce8:	0849      	lsrs	r1, r1, #1
 800bcea:	2000      	movs	r0, #0
 800bcec:	460c      	mov	r4, r1
 800bcee:	4605      	mov	r5, r0
 800bcf0:	eb12 0804 	adds.w	r8, r2, r4
 800bcf4:	eb43 0905 	adc.w	r9, r3, r5
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	469a      	mov	sl, r3
 800bd00:	4693      	mov	fp, r2
 800bd02:	4652      	mov	r2, sl
 800bd04:	465b      	mov	r3, fp
 800bd06:	4640      	mov	r0, r8
 800bd08:	4649      	mov	r1, r9
 800bd0a:	f7f4 ffe5 	bl	8000cd8 <__aeabi_uldivmod>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4613      	mov	r3, r2
 800bd14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd1c:	d308      	bcc.n	800bd30 <UART_SetConfig+0x430>
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd24:	d204      	bcs.n	800bd30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	6a3a      	ldr	r2, [r7, #32]
 800bd2c:	60da      	str	r2, [r3, #12]
 800bd2e:	e0ce      	b.n	800bece <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd36:	e0ca      	b.n	800bece <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	69db      	ldr	r3, [r3, #28]
 800bd3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd40:	d166      	bne.n	800be10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bd42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd46:	2b08      	cmp	r3, #8
 800bd48:	d827      	bhi.n	800bd9a <UART_SetConfig+0x49a>
 800bd4a:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <UART_SetConfig+0x450>)
 800bd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd50:	0800bd75 	.word	0x0800bd75
 800bd54:	0800bd7d 	.word	0x0800bd7d
 800bd58:	0800bd85 	.word	0x0800bd85
 800bd5c:	0800bd9b 	.word	0x0800bd9b
 800bd60:	0800bd8b 	.word	0x0800bd8b
 800bd64:	0800bd9b 	.word	0x0800bd9b
 800bd68:	0800bd9b 	.word	0x0800bd9b
 800bd6c:	0800bd9b 	.word	0x0800bd9b
 800bd70:	0800bd93 	.word	0x0800bd93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd74:	f7fe ffa8 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800bd78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd7a:	e014      	b.n	800bda6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd7c:	f7fe ffba 	bl	800acf4 <HAL_RCC_GetPCLK2Freq>
 800bd80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd82:	e010      	b.n	800bda6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd84:	4b4e      	ldr	r3, [pc, #312]	; (800bec0 <UART_SetConfig+0x5c0>)
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd88:	e00d      	b.n	800bda6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd8a:	f7fe ff31 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800bd8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd90:	e009      	b.n	800bda6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd98:	e005      	b.n	800bda6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bda4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 8090 	beq.w	800bece <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	4a44      	ldr	r2, [pc, #272]	; (800bec4 <UART_SetConfig+0x5c4>)
 800bdb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdc0:	005a      	lsls	r2, r3, #1
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	085b      	lsrs	r3, r3, #1
 800bdc8:	441a      	add	r2, r3
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	2b0f      	cmp	r3, #15
 800bdd8:	d916      	bls.n	800be08 <UART_SetConfig+0x508>
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde0:	d212      	bcs.n	800be08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	f023 030f 	bic.w	r3, r3, #15
 800bdea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	085b      	lsrs	r3, r3, #1
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	f003 0307 	and.w	r3, r3, #7
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	8bfb      	ldrh	r3, [r7, #30]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	8bfa      	ldrh	r2, [r7, #30]
 800be04:	60da      	str	r2, [r3, #12]
 800be06:	e062      	b.n	800bece <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be0e:	e05e      	b.n	800bece <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be14:	2b08      	cmp	r3, #8
 800be16:	d828      	bhi.n	800be6a <UART_SetConfig+0x56a>
 800be18:	a201      	add	r2, pc, #4	; (adr r2, 800be20 <UART_SetConfig+0x520>)
 800be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1e:	bf00      	nop
 800be20:	0800be45 	.word	0x0800be45
 800be24:	0800be4d 	.word	0x0800be4d
 800be28:	0800be55 	.word	0x0800be55
 800be2c:	0800be6b 	.word	0x0800be6b
 800be30:	0800be5b 	.word	0x0800be5b
 800be34:	0800be6b 	.word	0x0800be6b
 800be38:	0800be6b 	.word	0x0800be6b
 800be3c:	0800be6b 	.word	0x0800be6b
 800be40:	0800be63 	.word	0x0800be63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be44:	f7fe ff40 	bl	800acc8 <HAL_RCC_GetPCLK1Freq>
 800be48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be4a:	e014      	b.n	800be76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be4c:	f7fe ff52 	bl	800acf4 <HAL_RCC_GetPCLK2Freq>
 800be50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be52:	e010      	b.n	800be76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be54:	4b1a      	ldr	r3, [pc, #104]	; (800bec0 <UART_SetConfig+0x5c0>)
 800be56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be58:	e00d      	b.n	800be76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be5a:	f7fe fec9 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800be5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be60:	e009      	b.n	800be76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be68:	e005      	b.n	800be76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800be74:	bf00      	nop
    }

    if (pclk != 0U)
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d028      	beq.n	800bece <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	4a10      	ldr	r2, [pc, #64]	; (800bec4 <UART_SetConfig+0x5c4>)
 800be82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be86:	461a      	mov	r2, r3
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	fbb3 f2f2 	udiv	r2, r3, r2
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	441a      	add	r2, r3
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bea0:	6a3b      	ldr	r3, [r7, #32]
 800bea2:	2b0f      	cmp	r3, #15
 800bea4:	d910      	bls.n	800bec8 <UART_SetConfig+0x5c8>
 800bea6:	6a3b      	ldr	r3, [r7, #32]
 800bea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beac:	d20c      	bcs.n	800bec8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	60da      	str	r2, [r3, #12]
 800beb8:	e009      	b.n	800bece <UART_SetConfig+0x5ce>
 800beba:	bf00      	nop
 800bebc:	40008000 	.word	0x40008000
 800bec0:	00f42400 	.word	0x00f42400
 800bec4:	080119b8 	.word	0x080119b8
      }
      else
      {
        ret = HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2201      	movs	r2, #1
 800beda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2200      	movs	r2, #0
 800bee2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2200      	movs	r2, #0
 800bee8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800beea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3730      	adds	r7, #48	; 0x30
 800bef2:	46bd      	mov	sp, r7
 800bef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf04:	f003 0308 	and.w	r3, r3, #8
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00a      	beq.n	800bf44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	430a      	orrs	r2, r1
 800bf42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00a      	beq.n	800bf66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	f003 0304 	and.w	r3, r3, #4
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00a      	beq.n	800bf88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	430a      	orrs	r2, r1
 800bf86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8c:	f003 0310 	and.w	r3, r3, #16
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00a      	beq.n	800bfaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00a      	beq.n	800bfcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	430a      	orrs	r2, r1
 800bfca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01a      	beq.n	800c00e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bff6:	d10a      	bne.n	800c00e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00a      	beq.n	800c030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	430a      	orrs	r2, r1
 800c02e:	605a      	str	r2, [r3, #4]
  }
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b098      	sub	sp, #96	; 0x60
 800c040:	af02      	add	r7, sp, #8
 800c042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c04c:	f7fb fb34 	bl	80076b8 <HAL_GetTick>
 800c050:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0308 	and.w	r3, r3, #8
 800c05c:	2b08      	cmp	r3, #8
 800c05e:	d12f      	bne.n	800c0c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c068:	2200      	movs	r2, #0
 800c06a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f88e 	bl	800c190 <UART_WaitOnFlagUntilTimeout>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d022      	beq.n	800c0c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	e853 3f00 	ldrex	r3, [r3]
 800c086:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c08e:	653b      	str	r3, [r7, #80]	; 0x50
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	461a      	mov	r2, r3
 800c096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c098:	647b      	str	r3, [r7, #68]	; 0x44
 800c09a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c09e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0a0:	e841 2300 	strex	r3, r2, [r1]
 800c0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e6      	bne.n	800c07a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2220      	movs	r2, #32
 800c0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e063      	b.n	800c188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0304 	and.w	r3, r3, #4
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d149      	bne.n	800c162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f857 	bl	800c190 <UART_WaitOnFlagUntilTimeout>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d03c      	beq.n	800c162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c106:	633b      	str	r3, [r7, #48]	; 0x30
 800c108:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c10c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c10e:	e841 2300 	strex	r3, r2, [r1]
 800c112:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1e6      	bne.n	800c0e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3308      	adds	r3, #8
 800c120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	60fb      	str	r3, [r7, #12]
   return(result);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f023 0301 	bic.w	r3, r3, #1
 800c130:	64bb      	str	r3, [r7, #72]	; 0x48
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3308      	adds	r3, #8
 800c138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c13a:	61fa      	str	r2, [r7, #28]
 800c13c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	69b9      	ldr	r1, [r7, #24]
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	617b      	str	r3, [r7, #20]
   return(result);
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e5      	bne.n	800c11a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2220      	movs	r2, #32
 800c152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e012      	b.n	800c188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3758      	adds	r7, #88	; 0x58
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	4613      	mov	r3, r2
 800c19e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1a0:	e04f      	b.n	800c242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a8:	d04b      	beq.n	800c242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1aa:	f7fb fa85 	bl	80076b8 <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d302      	bcc.n	800c1c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e04e      	b.n	800c262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 0304 	and.w	r3, r3, #4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d037      	beq.n	800c242 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b80      	cmp	r3, #128	; 0x80
 800c1d6:	d034      	beq.n	800c242 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b40      	cmp	r3, #64	; 0x40
 800c1dc:	d031      	beq.n	800c242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	69db      	ldr	r3, [r3, #28]
 800c1e4:	f003 0308 	and.w	r3, r3, #8
 800c1e8:	2b08      	cmp	r3, #8
 800c1ea:	d110      	bne.n	800c20e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f838 	bl	800c26a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e029      	b.n	800c262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	69db      	ldr	r3, [r3, #28]
 800c214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c21c:	d111      	bne.n	800c242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 f81e 	bl	800c26a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2220      	movs	r2, #32
 800c232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e00f      	b.n	800c262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	69da      	ldr	r2, [r3, #28]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	4013      	ands	r3, r2
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	429a      	cmp	r2, r3
 800c250:	bf0c      	ite	eq
 800c252:	2301      	moveq	r3, #1
 800c254:	2300      	movne	r3, #0
 800c256:	b2db      	uxtb	r3, r3
 800c258:	461a      	mov	r2, r3
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d0a0      	beq.n	800c1a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b095      	sub	sp, #84	; 0x54
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c286:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	461a      	mov	r2, r3
 800c28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c290:	643b      	str	r3, [r7, #64]	; 0x40
 800c292:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c298:	e841 2300 	strex	r3, r2, [r1]
 800c29c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e6      	bne.n	800c272 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	e853 3f00 	ldrex	r3, [r3]
 800c2b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2ba:	f023 0301 	bic.w	r3, r3, #1
 800c2be:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e3      	bne.n	800c2a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d118      	bne.n	800c316 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	f023 0310 	bic.w	r3, r3, #16
 800c2f8:	647b      	str	r3, [r7, #68]	; 0x44
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c302:	61bb      	str	r3, [r7, #24]
 800c304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c306:	6979      	ldr	r1, [r7, #20]
 800c308:	69ba      	ldr	r2, [r7, #24]
 800c30a:	e841 2300 	strex	r3, r2, [r1]
 800c30e:	613b      	str	r3, [r7, #16]
   return(result);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1e6      	bne.n	800c2e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2220      	movs	r2, #32
 800c31a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c32a:	bf00      	nop
 800c32c:	3754      	adds	r7, #84	; 0x54
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c336:	b480      	push	{r7}
 800c338:	b085      	sub	sp, #20
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c344:	2b01      	cmp	r3, #1
 800c346:	d101      	bne.n	800c34c <HAL_UARTEx_DisableFifoMode+0x16>
 800c348:	2302      	movs	r3, #2
 800c34a:	e027      	b.n	800c39c <HAL_UARTEx_DisableFifoMode+0x66>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2224      	movs	r2, #36	; 0x24
 800c358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f022 0201 	bic.w	r2, r2, #1
 800c372:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c37a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2200      	movs	r2, #0
 800c380:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2220      	movs	r2, #32
 800c38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d101      	bne.n	800c3c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3bc:	2302      	movs	r3, #2
 800c3be:	e02d      	b.n	800c41c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2224      	movs	r2, #36	; 0x24
 800c3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f022 0201 	bic.w	r2, r2, #1
 800c3e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f84f 	bl	800c4a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c434:	2b01      	cmp	r3, #1
 800c436:	d101      	bne.n	800c43c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c438:	2302      	movs	r3, #2
 800c43a:	e02d      	b.n	800c498 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2224      	movs	r2, #36	; 0x24
 800c448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f022 0201 	bic.w	r2, r2, #1
 800c462:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	430a      	orrs	r2, r1
 800c476:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f811 	bl	800c4a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2220      	movs	r2, #32
 800c48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d108      	bne.n	800c4c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4c0:	e031      	b.n	800c526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4c2:	2308      	movs	r3, #8
 800c4c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c4c6:	2308      	movs	r3, #8
 800c4c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	0e5b      	lsrs	r3, r3, #25
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f003 0307 	and.w	r3, r3, #7
 800c4d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	0f5b      	lsrs	r3, r3, #29
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	f003 0307 	and.w	r3, r3, #7
 800c4e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4ea:	7bbb      	ldrb	r3, [r7, #14]
 800c4ec:	7b3a      	ldrb	r2, [r7, #12]
 800c4ee:	4911      	ldr	r1, [pc, #68]	; (800c534 <UARTEx_SetNbDataToProcess+0x94>)
 800c4f0:	5c8a      	ldrb	r2, [r1, r2]
 800c4f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4f6:	7b3a      	ldrb	r2, [r7, #12]
 800c4f8:	490f      	ldr	r1, [pc, #60]	; (800c538 <UARTEx_SetNbDataToProcess+0x98>)
 800c4fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c500:	b29a      	uxth	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c508:	7bfb      	ldrb	r3, [r7, #15]
 800c50a:	7b7a      	ldrb	r2, [r7, #13]
 800c50c:	4909      	ldr	r1, [pc, #36]	; (800c534 <UARTEx_SetNbDataToProcess+0x94>)
 800c50e:	5c8a      	ldrb	r2, [r1, r2]
 800c510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c514:	7b7a      	ldrb	r2, [r7, #13]
 800c516:	4908      	ldr	r1, [pc, #32]	; (800c538 <UARTEx_SetNbDataToProcess+0x98>)
 800c518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c51a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c526:	bf00      	nop
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	080119d0 	.word	0x080119d0
 800c538:	080119d8 	.word	0x080119d8

0800c53c <arm_rfft_32_fast_init_f32>:
 800c53c:	b178      	cbz	r0, 800c55e <arm_rfft_32_fast_init_f32+0x22>
 800c53e:	b430      	push	{r4, r5}
 800c540:	4908      	ldr	r1, [pc, #32]	; (800c564 <arm_rfft_32_fast_init_f32+0x28>)
 800c542:	4a09      	ldr	r2, [pc, #36]	; (800c568 <arm_rfft_32_fast_init_f32+0x2c>)
 800c544:	2310      	movs	r3, #16
 800c546:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c54a:	8003      	strh	r3, [r0, #0]
 800c54c:	2520      	movs	r5, #32
 800c54e:	2414      	movs	r4, #20
 800c550:	4b06      	ldr	r3, [pc, #24]	; (800c56c <arm_rfft_32_fast_init_f32+0x30>)
 800c552:	8205      	strh	r5, [r0, #16]
 800c554:	8184      	strh	r4, [r0, #12]
 800c556:	6143      	str	r3, [r0, #20]
 800c558:	bc30      	pop	{r4, r5}
 800c55a:	2000      	movs	r0, #0
 800c55c:	4770      	bx	lr
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	4770      	bx	lr
 800c564:	08012990 	.word	0x08012990
 800c568:	080172c8 	.word	0x080172c8
 800c56c:	08020048 	.word	0x08020048

0800c570 <arm_rfft_64_fast_init_f32>:
 800c570:	b178      	cbz	r0, 800c592 <arm_rfft_64_fast_init_f32+0x22>
 800c572:	b430      	push	{r4, r5}
 800c574:	4908      	ldr	r1, [pc, #32]	; (800c598 <arm_rfft_64_fast_init_f32+0x28>)
 800c576:	4a09      	ldr	r2, [pc, #36]	; (800c59c <arm_rfft_64_fast_init_f32+0x2c>)
 800c578:	2320      	movs	r3, #32
 800c57a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c57e:	8003      	strh	r3, [r0, #0]
 800c580:	2540      	movs	r5, #64	; 0x40
 800c582:	2430      	movs	r4, #48	; 0x30
 800c584:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <arm_rfft_64_fast_init_f32+0x30>)
 800c586:	8205      	strh	r5, [r0, #16]
 800c588:	8184      	strh	r4, [r0, #12]
 800c58a:	6143      	str	r3, [r0, #20]
 800c58c:	bc30      	pop	{r4, r5}
 800c58e:	2000      	movs	r0, #0
 800c590:	4770      	bx	lr
 800c592:	f04f 30ff 	mov.w	r0, #4294967295
 800c596:	4770      	bx	lr
 800c598:	08014ae8 	.word	0x08014ae8
 800c59c:	0801bb48 	.word	0x0801bb48
 800c5a0:	080248c8 	.word	0x080248c8

0800c5a4 <arm_rfft_256_fast_init_f32>:
 800c5a4:	b180      	cbz	r0, 800c5c8 <arm_rfft_256_fast_init_f32+0x24>
 800c5a6:	b430      	push	{r4, r5}
 800c5a8:	4909      	ldr	r1, [pc, #36]	; (800c5d0 <arm_rfft_256_fast_init_f32+0x2c>)
 800c5aa:	4a0a      	ldr	r2, [pc, #40]	; (800c5d4 <arm_rfft_256_fast_init_f32+0x30>)
 800c5ac:	2380      	movs	r3, #128	; 0x80
 800c5ae:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c5b2:	8003      	strh	r3, [r0, #0]
 800c5b4:	f44f 7580 	mov.w	r5, #256	; 0x100
 800c5b8:	24d0      	movs	r4, #208	; 0xd0
 800c5ba:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <arm_rfft_256_fast_init_f32+0x34>)
 800c5bc:	8205      	strh	r5, [r0, #16]
 800c5be:	8184      	strh	r4, [r0, #12]
 800c5c0:	6143      	str	r3, [r0, #20]
 800c5c2:	bc30      	pop	{r4, r5}
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	4770      	bx	lr
 800c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	080127f0 	.word	0x080127f0
 800c5d4:	08016ec8 	.word	0x08016ec8
 800c5d8:	0801fc48 	.word	0x0801fc48

0800c5dc <arm_rfft_512_fast_init_f32>:
 800c5dc:	b190      	cbz	r0, 800c604 <arm_rfft_512_fast_init_f32+0x28>
 800c5de:	b430      	push	{r4, r5}
 800c5e0:	490a      	ldr	r1, [pc, #40]	; (800c60c <arm_rfft_512_fast_init_f32+0x30>)
 800c5e2:	4a0b      	ldr	r2, [pc, #44]	; (800c610 <arm_rfft_512_fast_init_f32+0x34>)
 800c5e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5e8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c5ec:	8003      	strh	r3, [r0, #0]
 800c5ee:	f44f 7500 	mov.w	r5, #512	; 0x200
 800c5f2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800c5f6:	4b07      	ldr	r3, [pc, #28]	; (800c614 <arm_rfft_512_fast_init_f32+0x38>)
 800c5f8:	8205      	strh	r5, [r0, #16]
 800c5fa:	8184      	strh	r4, [r0, #12]
 800c5fc:	6143      	str	r3, [r0, #20]
 800c5fe:	bc30      	pop	{r4, r5}
 800c600:	2000      	movs	r0, #0
 800c602:	4770      	bx	lr
 800c604:	f04f 30ff 	mov.w	r0, #4294967295
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	08014778 	.word	0x08014778
 800c610:	0801b348 	.word	0x0801b348
 800c614:	080240c8 	.word	0x080240c8

0800c618 <arm_rfft_1024_fast_init_f32>:
 800c618:	b190      	cbz	r0, 800c640 <arm_rfft_1024_fast_init_f32+0x28>
 800c61a:	b430      	push	{r4, r5}
 800c61c:	490a      	ldr	r1, [pc, #40]	; (800c648 <arm_rfft_1024_fast_init_f32+0x30>)
 800c61e:	4a0b      	ldr	r2, [pc, #44]	; (800c64c <arm_rfft_1024_fast_init_f32+0x34>)
 800c620:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c624:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c628:	8003      	strh	r3, [r0, #0]
 800c62a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800c62e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800c632:	4b07      	ldr	r3, [pc, #28]	; (800c650 <arm_rfft_1024_fast_init_f32+0x38>)
 800c634:	8205      	strh	r5, [r0, #16]
 800c636:	8184      	strh	r4, [r0, #12]
 800c638:	6143      	str	r3, [r0, #20]
 800c63a:	bc30      	pop	{r4, r5}
 800c63c:	2000      	movs	r0, #0
 800c63e:	4770      	bx	lr
 800c640:	f04f 30ff 	mov.w	r0, #4294967295
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	08014b48 	.word	0x08014b48
 800c64c:	0801bc48 	.word	0x0801bc48
 800c650:	0801cc48 	.word	0x0801cc48

0800c654 <arm_rfft_2048_fast_init_f32>:
 800c654:	b190      	cbz	r0, 800c67c <arm_rfft_2048_fast_init_f32+0x28>
 800c656:	b430      	push	{r4, r5}
 800c658:	490a      	ldr	r1, [pc, #40]	; (800c684 <arm_rfft_2048_fast_init_f32+0x30>)
 800c65a:	4a0b      	ldr	r2, [pc, #44]	; (800c688 <arm_rfft_2048_fast_init_f32+0x34>)
 800c65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c660:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c664:	8003      	strh	r3, [r0, #0]
 800c666:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800c66a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800c66e:	4b07      	ldr	r3, [pc, #28]	; (800c68c <arm_rfft_2048_fast_init_f32+0x38>)
 800c670:	8205      	strh	r5, [r0, #16]
 800c672:	8184      	strh	r4, [r0, #12]
 800c674:	6143      	str	r3, [r0, #20]
 800c676:	bc30      	pop	{r4, r5}
 800c678:	2000      	movs	r0, #0
 800c67a:	4770      	bx	lr
 800c67c:	f04f 30ff 	mov.w	r0, #4294967295
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	080119e0 	.word	0x080119e0
 800c688:	08014ec8 	.word	0x08014ec8
 800c68c:	0801dc48 	.word	0x0801dc48

0800c690 <arm_rfft_4096_fast_init_f32>:
 800c690:	b190      	cbz	r0, 800c6b8 <arm_rfft_4096_fast_init_f32+0x28>
 800c692:	b430      	push	{r4, r5}
 800c694:	490a      	ldr	r1, [pc, #40]	; (800c6c0 <arm_rfft_4096_fast_init_f32+0x30>)
 800c696:	4a0b      	ldr	r2, [pc, #44]	; (800c6c4 <arm_rfft_4096_fast_init_f32+0x34>)
 800c698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c69c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c6a0:	8003      	strh	r3, [r0, #0]
 800c6a2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800c6a6:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800c6aa:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <arm_rfft_4096_fast_init_f32+0x38>)
 800c6ac:	8205      	strh	r5, [r0, #16]
 800c6ae:	8184      	strh	r4, [r0, #12]
 800c6b0:	6143      	str	r3, [r0, #20]
 800c6b2:	bc30      	pop	{r4, r5}
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	4770      	bx	lr
 800c6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	080129b8 	.word	0x080129b8
 800c6c4:	08017348 	.word	0x08017348
 800c6c8:	080200c8 	.word	0x080200c8

0800c6cc <arm_rfft_fast_init_f32>:
 800c6cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c6d0:	d01f      	beq.n	800c712 <arm_rfft_fast_init_f32+0x46>
 800c6d2:	d90b      	bls.n	800c6ec <arm_rfft_fast_init_f32+0x20>
 800c6d4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c6d8:	d019      	beq.n	800c70e <arm_rfft_fast_init_f32+0x42>
 800c6da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c6de:	d012      	beq.n	800c706 <arm_rfft_fast_init_f32+0x3a>
 800c6e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c6e4:	d00d      	beq.n	800c702 <arm_rfft_fast_init_f32+0x36>
 800c6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ea:	4770      	bx	lr
 800c6ec:	2940      	cmp	r1, #64	; 0x40
 800c6ee:	d00c      	beq.n	800c70a <arm_rfft_fast_init_f32+0x3e>
 800c6f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c6f4:	d003      	beq.n	800c6fe <arm_rfft_fast_init_f32+0x32>
 800c6f6:	2920      	cmp	r1, #32
 800c6f8:	d1f5      	bne.n	800c6e6 <arm_rfft_fast_init_f32+0x1a>
 800c6fa:	4b07      	ldr	r3, [pc, #28]	; (800c718 <arm_rfft_fast_init_f32+0x4c>)
 800c6fc:	4718      	bx	r3
 800c6fe:	4b07      	ldr	r3, [pc, #28]	; (800c71c <arm_rfft_fast_init_f32+0x50>)
 800c700:	4718      	bx	r3
 800c702:	4b07      	ldr	r3, [pc, #28]	; (800c720 <arm_rfft_fast_init_f32+0x54>)
 800c704:	4718      	bx	r3
 800c706:	4b07      	ldr	r3, [pc, #28]	; (800c724 <arm_rfft_fast_init_f32+0x58>)
 800c708:	4718      	bx	r3
 800c70a:	4b07      	ldr	r3, [pc, #28]	; (800c728 <arm_rfft_fast_init_f32+0x5c>)
 800c70c:	e7f6      	b.n	800c6fc <arm_rfft_fast_init_f32+0x30>
 800c70e:	4b07      	ldr	r3, [pc, #28]	; (800c72c <arm_rfft_fast_init_f32+0x60>)
 800c710:	e7f4      	b.n	800c6fc <arm_rfft_fast_init_f32+0x30>
 800c712:	4b07      	ldr	r3, [pc, #28]	; (800c730 <arm_rfft_fast_init_f32+0x64>)
 800c714:	e7f2      	b.n	800c6fc <arm_rfft_fast_init_f32+0x30>
 800c716:	bf00      	nop
 800c718:	0800c53d 	.word	0x0800c53d
 800c71c:	0800c5a5 	.word	0x0800c5a5
 800c720:	0800c619 	.word	0x0800c619
 800c724:	0800c691 	.word	0x0800c691
 800c728:	0800c571 	.word	0x0800c571
 800c72c:	0800c655 	.word	0x0800c655
 800c730:	0800c5dd 	.word	0x0800c5dd

0800c734 <stage_rfft_f32>:
 800c734:	b410      	push	{r4}
 800c736:	edd1 7a00 	vldr	s15, [r1]
 800c73a:	ed91 7a01 	vldr	s14, [r1, #4]
 800c73e:	8804      	ldrh	r4, [r0, #0]
 800c740:	6940      	ldr	r0, [r0, #20]
 800c742:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c74a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c74e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c752:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c756:	3c01      	subs	r4, #1
 800c758:	ee26 7a84 	vmul.f32	s14, s13, s8
 800c75c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c760:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800c764:	ed82 7a00 	vstr	s14, [r2]
 800c768:	edc2 7a01 	vstr	s15, [r2, #4]
 800c76c:	3010      	adds	r0, #16
 800c76e:	3210      	adds	r2, #16
 800c770:	3b08      	subs	r3, #8
 800c772:	3110      	adds	r1, #16
 800c774:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c778:	ed93 7a02 	vldr	s14, [r3, #8]
 800c77c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c780:	edd3 4a03 	vldr	s9, [r3, #12]
 800c784:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c788:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c78c:	ee77 5a45 	vsub.f32	s11, s14, s10
 800c790:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c794:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c798:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c79c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c7a0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c7a4:	ee37 7a23 	vadd.f32	s14, s14, s7
 800c7a8:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c7ac:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c7b0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c7b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c7b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c7c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c7c4:	3c01      	subs	r4, #1
 800c7c6:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c7ca:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c7ce:	f1a3 0308 	sub.w	r3, r3, #8
 800c7d2:	f101 0108 	add.w	r1, r1, #8
 800c7d6:	f100 0008 	add.w	r0, r0, #8
 800c7da:	f102 0208 	add.w	r2, r2, #8
 800c7de:	d1c9      	bne.n	800c774 <stage_rfft_f32+0x40>
 800c7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop

0800c7e8 <merge_rfft_f32>:
 800c7e8:	b410      	push	{r4}
 800c7ea:	edd1 7a00 	vldr	s15, [r1]
 800c7ee:	edd1 6a01 	vldr	s13, [r1, #4]
 800c7f2:	8804      	ldrh	r4, [r0, #0]
 800c7f4:	6940      	ldr	r0, [r0, #20]
 800c7f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c7fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7fe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c802:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c806:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c80a:	3c01      	subs	r4, #1
 800c80c:	ed82 7a00 	vstr	s14, [r2]
 800c810:	edc2 7a01 	vstr	s15, [r2, #4]
 800c814:	b3dc      	cbz	r4, 800c88e <merge_rfft_f32+0xa6>
 800c816:	00e3      	lsls	r3, r4, #3
 800c818:	3b08      	subs	r3, #8
 800c81a:	440b      	add	r3, r1
 800c81c:	3010      	adds	r0, #16
 800c81e:	3210      	adds	r2, #16
 800c820:	3110      	adds	r1, #16
 800c822:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c826:	ed93 7a02 	vldr	s14, [r3, #8]
 800c82a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c82e:	edd3 4a03 	vldr	s9, [r3, #12]
 800c832:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c836:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c83a:	ee75 5a47 	vsub.f32	s11, s10, s14
 800c83e:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c842:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c846:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c84a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c84e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c852:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c856:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c85a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c85e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c862:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c866:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c86a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c86e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c872:	3c01      	subs	r4, #1
 800c874:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c878:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c87c:	f1a3 0308 	sub.w	r3, r3, #8
 800c880:	f101 0108 	add.w	r1, r1, #8
 800c884:	f100 0008 	add.w	r0, r0, #8
 800c888:	f102 0208 	add.w	r2, r2, #8
 800c88c:	d1c9      	bne.n	800c822 <merge_rfft_f32+0x3a>
 800c88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <arm_rfft_fast_f32>:
 800c894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c898:	8a05      	ldrh	r5, [r0, #16]
 800c89a:	086d      	lsrs	r5, r5, #1
 800c89c:	8005      	strh	r5, [r0, #0]
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4616      	mov	r6, r2
 800c8a2:	461d      	mov	r5, r3
 800c8a4:	b14b      	cbz	r3, 800c8ba <arm_rfft_fast_f32+0x26>
 800c8a6:	f7ff ff9f 	bl	800c7e8 <merge_rfft_f32>
 800c8aa:	462a      	mov	r2, r5
 800c8ac:	4631      	mov	r1, r6
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b6:	f000 bb33 	b.w	800cf20 <arm_cfft_f32>
 800c8ba:	460f      	mov	r7, r1
 800c8bc:	461a      	mov	r2, r3
 800c8be:	2301      	movs	r3, #1
 800c8c0:	f000 fb2e 	bl	800cf20 <arm_cfft_f32>
 800c8c4:	4632      	mov	r2, r6
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ce:	f7ff bf31 	b.w	800c734 <stage_rfft_f32>
 800c8d2:	bf00      	nop

0800c8d4 <arm_cfft_radix8by2_f32>:
 800c8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d8:	ed2d 8b08 	vpush	{d8-d11}
 800c8dc:	4607      	mov	r7, r0
 800c8de:	4608      	mov	r0, r1
 800c8e0:	f8b7 c000 	ldrh.w	ip, [r7]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c8ea:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c8ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c8f2:	f000 80b0 	beq.w	800ca56 <arm_cfft_radix8by2_f32+0x182>
 800c8f6:	008c      	lsls	r4, r1, #2
 800c8f8:	3410      	adds	r4, #16
 800c8fa:	f100 0310 	add.w	r3, r0, #16
 800c8fe:	1906      	adds	r6, r0, r4
 800c900:	3210      	adds	r2, #16
 800c902:	4444      	add	r4, r8
 800c904:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c908:	f108 0510 	add.w	r5, r8, #16
 800c90c:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c910:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c914:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c918:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c91c:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c920:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c924:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c928:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c92c:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c930:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c934:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c938:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c93c:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c940:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c944:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c948:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c94c:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c950:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c954:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c958:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c95c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c960:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c964:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c968:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c96c:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c970:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c974:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c978:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c97c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c980:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c984:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c988:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c98c:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c990:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c994:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c998:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c99c:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c9a0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c9a4:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c9a8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c9ac:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c9b0:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c9b4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c9b8:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c9bc:	ee64 6a26 	vmul.f32	s13, s8, s13
 800c9c0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800c9c4:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c9c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c9cc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c9d0:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c9d4:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c9d8:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c9dc:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c9e0:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c9e4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c9e8:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c9ec:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c9f0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c9f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c9f8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c9fc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ca00:	ee66 4a87 	vmul.f32	s9, s13, s14
 800ca04:	ee25 4a25 	vmul.f32	s8, s10, s11
 800ca08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ca0c:	ee25 5a07 	vmul.f32	s10, s10, s14
 800ca10:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ca14:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ca18:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ca1c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ca20:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ca24:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800ca28:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ca2c:	3310      	adds	r3, #16
 800ca2e:	4563      	cmp	r3, ip
 800ca30:	ed45 5a02 	vstr	s11, [r5, #-8]
 800ca34:	f106 0610 	add.w	r6, r6, #16
 800ca38:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ca3c:	f102 0210 	add.w	r2, r2, #16
 800ca40:	ed04 6a02 	vstr	s12, [r4, #-8]
 800ca44:	ed04 7a01 	vstr	s14, [r4, #-4]
 800ca48:	f105 0510 	add.w	r5, r5, #16
 800ca4c:	f104 0410 	add.w	r4, r4, #16
 800ca50:	f47f af5c 	bne.w	800c90c <arm_cfft_radix8by2_f32+0x38>
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	b28c      	uxth	r4, r1
 800ca58:	4621      	mov	r1, r4
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	f000 fec2 	bl	800d7e4 <arm_radix8_butterfly_f32>
 800ca60:	ecbd 8b08 	vpop	{d8-d11}
 800ca64:	4621      	mov	r1, r4
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	4640      	mov	r0, r8
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	f000 beb8 	b.w	800d7e4 <arm_radix8_butterfly_f32>

0800ca74 <arm_cfft_radix8by4_f32>:
 800ca74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	ed2d 8b0a 	vpush	{d8-d12}
 800ca7c:	b08d      	sub	sp, #52	; 0x34
 800ca7e:	460d      	mov	r5, r1
 800ca80:	910b      	str	r1, [sp, #44]	; 0x2c
 800ca82:	8801      	ldrh	r1, [r0, #0]
 800ca84:	6842      	ldr	r2, [r0, #4]
 800ca86:	900a      	str	r0, [sp, #40]	; 0x28
 800ca88:	0849      	lsrs	r1, r1, #1
 800ca8a:	008b      	lsls	r3, r1, #2
 800ca8c:	18ee      	adds	r6, r5, r3
 800ca8e:	18f0      	adds	r0, r6, r3
 800ca90:	edd0 5a00 	vldr	s11, [r0]
 800ca94:	edd5 7a00 	vldr	s15, [r5]
 800ca98:	ed96 7a00 	vldr	s14, [r6]
 800ca9c:	edd0 3a01 	vldr	s7, [r0, #4]
 800caa0:	ed96 4a01 	vldr	s8, [r6, #4]
 800caa4:	ed95 5a01 	vldr	s10, [r5, #4]
 800caa8:	9008      	str	r0, [sp, #32]
 800caaa:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800caae:	18c7      	adds	r7, r0, r3
 800cab0:	edd7 4a00 	vldr	s9, [r7]
 800cab4:	ed97 3a01 	vldr	s6, [r7, #4]
 800cab8:	9701      	str	r7, [sp, #4]
 800caba:	ee77 6a06 	vadd.f32	s13, s14, s12
 800cabe:	462c      	mov	r4, r5
 800cac0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cac4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cac8:	ee16 ca90 	vmov	ip, s13
 800cacc:	f844 cb08 	str.w	ip, [r4], #8
 800cad0:	ee75 6a23 	vadd.f32	s13, s10, s7
 800cad4:	edd6 5a01 	vldr	s11, [r6, #4]
 800cad8:	edd7 2a01 	vldr	s5, [r7, #4]
 800cadc:	9404      	str	r4, [sp, #16]
 800cade:	ee35 5a63 	vsub.f32	s10, s10, s7
 800cae2:	ee74 3a27 	vadd.f32	s7, s8, s15
 800cae6:	ee36 6a47 	vsub.f32	s12, s12, s14
 800caea:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800caee:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800caf2:	0849      	lsrs	r1, r1, #1
 800caf4:	f102 0e08 	add.w	lr, r2, #8
 800caf8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800cafc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800cb00:	9109      	str	r1, [sp, #36]	; 0x24
 800cb02:	ee35 4a47 	vsub.f32	s8, s10, s14
 800cb06:	f1a1 0902 	sub.w	r9, r1, #2
 800cb0a:	f8cd e00c 	str.w	lr, [sp, #12]
 800cb0e:	4631      	mov	r1, r6
 800cb10:	ee13 ea90 	vmov	lr, s7
 800cb14:	ee36 6a64 	vsub.f32	s12, s12, s9
 800cb18:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	edc5 5a01 	vstr	s11, [r5, #4]
 800cb22:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cb26:	f841 eb08 	str.w	lr, [r1], #8
 800cb2a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800cb2e:	ee16 ea10 	vmov	lr, s12
 800cb32:	ed86 5a01 	vstr	s10, [r6, #4]
 800cb36:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800cb3a:	f844 eb08 	str.w	lr, [r4], #8
 800cb3e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800cb42:	edc0 6a01 	vstr	s13, [r0, #4]
 800cb46:	9405      	str	r4, [sp, #20]
 800cb48:	4604      	mov	r4, r0
 800cb4a:	ee17 0a90 	vmov	r0, s15
 800cb4e:	9106      	str	r1, [sp, #24]
 800cb50:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cb54:	f102 0110 	add.w	r1, r2, #16
 800cb58:	46bc      	mov	ip, r7
 800cb5a:	9100      	str	r1, [sp, #0]
 800cb5c:	f847 0b08 	str.w	r0, [r7], #8
 800cb60:	f102 0118 	add.w	r1, r2, #24
 800cb64:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800cb68:	9102      	str	r1, [sp, #8]
 800cb6a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800cb6e:	9007      	str	r0, [sp, #28]
 800cb70:	f000 8134 	beq.w	800cddc <arm_cfft_radix8by4_f32+0x368>
 800cb74:	f102 0920 	add.w	r9, r2, #32
 800cb78:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800cb7c:	9a01      	ldr	r2, [sp, #4]
 800cb7e:	f8dd a000 	ldr.w	sl, [sp]
 800cb82:	3b0c      	subs	r3, #12
 800cb84:	4683      	mov	fp, r0
 800cb86:	4463      	add	r3, ip
 800cb88:	f105 0e10 	add.w	lr, r5, #16
 800cb8c:	f1a4 010c 	sub.w	r1, r4, #12
 800cb90:	f104 0510 	add.w	r5, r4, #16
 800cb94:	f1a6 0c0c 	sub.w	ip, r6, #12
 800cb98:	f1a2 040c 	sub.w	r4, r2, #12
 800cb9c:	f106 0010 	add.w	r0, r6, #16
 800cba0:	3210      	adds	r2, #16
 800cba2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800cba6:	ed55 5a02 	vldr	s11, [r5, #-8]
 800cbaa:	ed50 7a02 	vldr	s15, [r0, #-8]
 800cbae:	ed52 1a02 	vldr	s3, [r2, #-8]
 800cbb2:	ed55 6a01 	vldr	s13, [r5, #-4]
 800cbb6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800cbba:	ed12 1a01 	vldr	s2, [r2, #-4]
 800cbbe:	ed10 8a01 	vldr	s16, [r0, #-4]
 800cbc2:	ee35 4a25 	vadd.f32	s8, s10, s11
 800cbc6:	ee30 6a26 	vadd.f32	s12, s0, s13
 800cbca:	ee37 7a84 	vadd.f32	s14, s15, s8
 800cbce:	ee30 0a66 	vsub.f32	s0, s0, s13
 800cbd2:	ee37 7a21 	vadd.f32	s14, s14, s3
 800cbd6:	ee75 5a65 	vsub.f32	s11, s10, s11
 800cbda:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800cbde:	ed10 7a01 	vldr	s14, [r0, #-4]
 800cbe2:	ed52 6a01 	vldr	s13, [r2, #-4]
 800cbe6:	ee36 7a07 	vadd.f32	s14, s12, s14
 800cbea:	ee78 aa25 	vadd.f32	s21, s16, s11
 800cbee:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cbf2:	ee70 3a67 	vsub.f32	s7, s0, s15
 800cbf6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800cbfa:	ed94 7a02 	vldr	s14, [r4, #8]
 800cbfe:	ed9c 2a02 	vldr	s4, [ip, #8]
 800cc02:	ed91 ba02 	vldr	s22, [r1, #8]
 800cc06:	edd3 9a02 	vldr	s19, [r3, #8]
 800cc0a:	edd4 2a01 	vldr	s5, [r4, #4]
 800cc0e:	ed9c 9a01 	vldr	s18, [ip, #4]
 800cc12:	ed93 5a01 	vldr	s10, [r3, #4]
 800cc16:	edd1 0a01 	vldr	s1, [r1, #4]
 800cc1a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800cc1e:	ee32 2a47 	vsub.f32	s4, s4, s14
 800cc22:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800cc26:	ee79 4a22 	vadd.f32	s9, s18, s5
 800cc2a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800cc2e:	ee79 2a62 	vsub.f32	s5, s18, s5
 800cc32:	ed8c 7a02 	vstr	s14, [ip, #8]
 800cc36:	ed91 7a01 	vldr	s14, [r1, #4]
 800cc3a:	edd3 8a01 	vldr	s17, [r3, #4]
 800cc3e:	ee34 7a87 	vadd.f32	s14, s9, s14
 800cc42:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800cc46:	ee37 7a28 	vadd.f32	s14, s14, s17
 800cc4a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800cc4e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800cc52:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800cc56:	ed1a aa02 	vldr	s20, [sl, #-8]
 800cc5a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800cc5e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800cc62:	ee7a aac1 	vsub.f32	s21, s21, s2
 800cc66:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800cc6a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800cc6e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800cc72:	ee6a aa87 	vmul.f32	s21, s21, s14
 800cc76:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800cc7a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800cc7e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800cc82:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800cc86:	ee68 8a87 	vmul.f32	s17, s17, s14
 800cc8a:	ee73 3aea 	vsub.f32	s7, s7, s21
 800cc8e:	ee78 8a89 	vadd.f32	s17, s17, s18
 800cc92:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800cc96:	ee3b aaca 	vsub.f32	s20, s23, s20
 800cc9a:	ee34 4a67 	vsub.f32	s8, s8, s15
 800cc9e:	ee76 6acb 	vsub.f32	s13, s13, s22
 800cca2:	ee36 6a48 	vsub.f32	s12, s12, s16
 800cca6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ccaa:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ccae:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ccb2:	edc1 8a01 	vstr	s17, [r1, #4]
 800ccb6:	ed81 aa02 	vstr	s20, [r1, #8]
 800ccba:	ed59 3a04 	vldr	s7, [r9, #-16]
 800ccbe:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800ccc2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800ccc6:	ed59 6a03 	vldr	s13, [r9, #-12]
 800ccca:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ccce:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ccd2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ccd6:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ccda:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ccde:	ee26 6a23 	vmul.f32	s12, s12, s7
 800cce2:	ee24 4a26 	vmul.f32	s8, s8, s13
 800cce6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccea:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ccee:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800ccf2:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ccf6:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ccfa:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800ccfe:	ee79 3a29 	vadd.f32	s7, s18, s19
 800cd02:	ee75 6a60 	vsub.f32	s13, s10, s1
 800cd06:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800cd0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cd0e:	ed45 3a02 	vstr	s7, [r5, #-8]
 800cd12:	ed05 6a01 	vstr	s12, [r5, #-4]
 800cd16:	ed84 7a01 	vstr	s14, [r4, #4]
 800cd1a:	ed84 4a02 	vstr	s8, [r4, #8]
 800cd1e:	ee35 6a81 	vadd.f32	s12, s11, s2
 800cd22:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800cd26:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800cd2a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800cd2e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800cd32:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800cd36:	ee67 2a26 	vmul.f32	s5, s14, s13
 800cd3a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800cd3e:	ee26 5a25 	vmul.f32	s10, s12, s11
 800cd42:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cd46:	ee26 6a26 	vmul.f32	s12, s12, s13
 800cd4a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cd4e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800cd52:	ee23 3a25 	vmul.f32	s6, s6, s11
 800cd56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cd5a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800cd5e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800cd62:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cd66:	f1bb 0b01 	subs.w	fp, fp, #1
 800cd6a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800cd6e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800cd72:	f10e 0e08 	add.w	lr, lr, #8
 800cd76:	ed83 3a02 	vstr	s6, [r3, #8]
 800cd7a:	ed83 7a01 	vstr	s14, [r3, #4]
 800cd7e:	f1ac 0c08 	sub.w	ip, ip, #8
 800cd82:	f10a 0a08 	add.w	sl, sl, #8
 800cd86:	f100 0008 	add.w	r0, r0, #8
 800cd8a:	f1a1 0108 	sub.w	r1, r1, #8
 800cd8e:	f109 0910 	add.w	r9, r9, #16
 800cd92:	f105 0508 	add.w	r5, r5, #8
 800cd96:	f1a4 0408 	sub.w	r4, r4, #8
 800cd9a:	f108 0818 	add.w	r8, r8, #24
 800cd9e:	f102 0208 	add.w	r2, r2, #8
 800cda2:	f1a3 0308 	sub.w	r3, r3, #8
 800cda6:	f47f aefc 	bne.w	800cba2 <arm_cfft_radix8by4_f32+0x12e>
 800cdaa:	9907      	ldr	r1, [sp, #28]
 800cdac:	9800      	ldr	r0, [sp, #0]
 800cdae:	00cb      	lsls	r3, r1, #3
 800cdb0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800cdb4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800cdb8:	9100      	str	r1, [sp, #0]
 800cdba:	9904      	ldr	r1, [sp, #16]
 800cdbc:	4419      	add	r1, r3
 800cdbe:	9104      	str	r1, [sp, #16]
 800cdc0:	9903      	ldr	r1, [sp, #12]
 800cdc2:	4419      	add	r1, r3
 800cdc4:	9103      	str	r1, [sp, #12]
 800cdc6:	9906      	ldr	r1, [sp, #24]
 800cdc8:	4419      	add	r1, r3
 800cdca:	9106      	str	r1, [sp, #24]
 800cdcc:	9905      	ldr	r1, [sp, #20]
 800cdce:	441f      	add	r7, r3
 800cdd0:	4419      	add	r1, r3
 800cdd2:	9b02      	ldr	r3, [sp, #8]
 800cdd4:	9105      	str	r1, [sp, #20]
 800cdd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdda:	9302      	str	r3, [sp, #8]
 800cddc:	9904      	ldr	r1, [sp, #16]
 800cdde:	9805      	ldr	r0, [sp, #20]
 800cde0:	ed91 4a00 	vldr	s8, [r1]
 800cde4:	edd0 6a00 	vldr	s13, [r0]
 800cde8:	9b06      	ldr	r3, [sp, #24]
 800cdea:	ed97 3a00 	vldr	s6, [r7]
 800cdee:	edd3 7a00 	vldr	s15, [r3]
 800cdf2:	edd0 4a01 	vldr	s9, [r0, #4]
 800cdf6:	edd1 3a01 	vldr	s7, [r1, #4]
 800cdfa:	ed97 2a01 	vldr	s4, [r7, #4]
 800cdfe:	ed93 7a01 	vldr	s14, [r3, #4]
 800ce02:	9a03      	ldr	r2, [sp, #12]
 800ce04:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800ce08:	ee34 6a26 	vadd.f32	s12, s8, s13
 800ce0c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800ce10:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ce14:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ce18:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ce1c:	ee74 6a66 	vsub.f32	s13, s8, s13
 800ce20:	ed81 5a00 	vstr	s10, [r1]
 800ce24:	ed93 5a01 	vldr	s10, [r3, #4]
 800ce28:	edd7 4a01 	vldr	s9, [r7, #4]
 800ce2c:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ce30:	ee37 4a26 	vadd.f32	s8, s14, s13
 800ce34:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ce38:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800ce3c:	ed81 5a01 	vstr	s10, [r1, #4]
 800ce40:	edd2 1a00 	vldr	s3, [r2]
 800ce44:	edd2 2a01 	vldr	s5, [r2, #4]
 800ce48:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ce4c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ce50:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ce54:	ee64 4a21 	vmul.f32	s9, s8, s3
 800ce58:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ce5c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800ce60:	ee25 5a21 	vmul.f32	s10, s10, s3
 800ce64:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ce68:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ce6c:	edc3 2a00 	vstr	s5, [r3]
 800ce70:	ed83 5a01 	vstr	s10, [r3, #4]
 800ce74:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800ce78:	9b00      	ldr	r3, [sp, #0]
 800ce7a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ce7e:	ed93 4a01 	vldr	s8, [r3, #4]
 800ce82:	ed93 5a00 	vldr	s10, [r3]
 800ce86:	9b02      	ldr	r3, [sp, #8]
 800ce88:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ce8c:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ce90:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ce94:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ce98:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ce9c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800cea0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800cea4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cea8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ceac:	ed80 6a01 	vstr	s12, [r0, #4]
 800ceb0:	edc0 5a00 	vstr	s11, [r0]
 800ceb4:	edd3 5a01 	vldr	s11, [r3, #4]
 800ceb8:	edd3 6a00 	vldr	s13, [r3]
 800cebc:	ee37 7a02 	vadd.f32	s14, s14, s4
 800cec0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800cec4:	ee27 6a26 	vmul.f32	s12, s14, s13
 800cec8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800cecc:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ced0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ced4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ced8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cedc:	ed87 7a01 	vstr	s14, [r7, #4]
 800cee0:	edc7 7a00 	vstr	s15, [r7]
 800cee4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800cee8:	4621      	mov	r1, r4
 800ceea:	686a      	ldr	r2, [r5, #4]
 800ceec:	2304      	movs	r3, #4
 800ceee:	f000 fc79 	bl	800d7e4 <arm_radix8_butterfly_f32>
 800cef2:	4630      	mov	r0, r6
 800cef4:	4621      	mov	r1, r4
 800cef6:	686a      	ldr	r2, [r5, #4]
 800cef8:	2304      	movs	r3, #4
 800cefa:	f000 fc73 	bl	800d7e4 <arm_radix8_butterfly_f32>
 800cefe:	9808      	ldr	r0, [sp, #32]
 800cf00:	686a      	ldr	r2, [r5, #4]
 800cf02:	4621      	mov	r1, r4
 800cf04:	2304      	movs	r3, #4
 800cf06:	f000 fc6d 	bl	800d7e4 <arm_radix8_butterfly_f32>
 800cf0a:	686a      	ldr	r2, [r5, #4]
 800cf0c:	9801      	ldr	r0, [sp, #4]
 800cf0e:	4621      	mov	r1, r4
 800cf10:	2304      	movs	r3, #4
 800cf12:	b00d      	add	sp, #52	; 0x34
 800cf14:	ecbd 8b0a 	vpop	{d8-d12}
 800cf18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1c:	f000 bc62 	b.w	800d7e4 <arm_radix8_butterfly_f32>

0800cf20 <arm_cfft_f32>:
 800cf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf24:	2a01      	cmp	r2, #1
 800cf26:	4606      	mov	r6, r0
 800cf28:	4617      	mov	r7, r2
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	4698      	mov	r8, r3
 800cf2e:	8805      	ldrh	r5, [r0, #0]
 800cf30:	d056      	beq.n	800cfe0 <arm_cfft_f32+0xc0>
 800cf32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800cf36:	d063      	beq.n	800d000 <arm_cfft_f32+0xe0>
 800cf38:	d916      	bls.n	800cf68 <arm_cfft_f32+0x48>
 800cf3a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800cf3e:	d01a      	beq.n	800cf76 <arm_cfft_f32+0x56>
 800cf40:	d947      	bls.n	800cfd2 <arm_cfft_f32+0xb2>
 800cf42:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cf46:	d05b      	beq.n	800d000 <arm_cfft_f32+0xe0>
 800cf48:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800cf4c:	d105      	bne.n	800cf5a <arm_cfft_f32+0x3a>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	6872      	ldr	r2, [r6, #4]
 800cf52:	4629      	mov	r1, r5
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fc45 	bl	800d7e4 <arm_radix8_butterfly_f32>
 800cf5a:	f1b8 0f00 	cmp.w	r8, #0
 800cf5e:	d111      	bne.n	800cf84 <arm_cfft_f32+0x64>
 800cf60:	2f01      	cmp	r7, #1
 800cf62:	d016      	beq.n	800cf92 <arm_cfft_f32+0x72>
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	2d20      	cmp	r5, #32
 800cf6a:	d049      	beq.n	800d000 <arm_cfft_f32+0xe0>
 800cf6c:	d935      	bls.n	800cfda <arm_cfft_f32+0xba>
 800cf6e:	2d40      	cmp	r5, #64	; 0x40
 800cf70:	d0ed      	beq.n	800cf4e <arm_cfft_f32+0x2e>
 800cf72:	2d80      	cmp	r5, #128	; 0x80
 800cf74:	d1f1      	bne.n	800cf5a <arm_cfft_f32+0x3a>
 800cf76:	4621      	mov	r1, r4
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff fcab 	bl	800c8d4 <arm_cfft_radix8by2_f32>
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	d0ed      	beq.n	800cf60 <arm_cfft_f32+0x40>
 800cf84:	68b2      	ldr	r2, [r6, #8]
 800cf86:	89b1      	ldrh	r1, [r6, #12]
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 f841 	bl	800d010 <arm_bitreversal_32>
 800cf8e:	2f01      	cmp	r7, #1
 800cf90:	d1e8      	bne.n	800cf64 <arm_cfft_f32+0x44>
 800cf92:	ee07 5a90 	vmov	s15, r5
 800cf96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cfa2:	2d00      	cmp	r5, #0
 800cfa4:	d0de      	beq.n	800cf64 <arm_cfft_f32+0x44>
 800cfa6:	f104 0108 	add.w	r1, r4, #8
 800cfaa:	2300      	movs	r3, #0
 800cfac:	3301      	adds	r3, #1
 800cfae:	429d      	cmp	r5, r3
 800cfb0:	f101 0108 	add.w	r1, r1, #8
 800cfb4:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cfb8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800cfbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cfc4:	ed01 7a04 	vstr	s14, [r1, #-16]
 800cfc8:	ed41 7a03 	vstr	s15, [r1, #-12]
 800cfcc:	d1ee      	bne.n	800cfac <arm_cfft_f32+0x8c>
 800cfce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800cfd6:	d0ba      	beq.n	800cf4e <arm_cfft_f32+0x2e>
 800cfd8:	e7bf      	b.n	800cf5a <arm_cfft_f32+0x3a>
 800cfda:	2d10      	cmp	r5, #16
 800cfdc:	d0cb      	beq.n	800cf76 <arm_cfft_f32+0x56>
 800cfde:	e7bc      	b.n	800cf5a <arm_cfft_f32+0x3a>
 800cfe0:	b19d      	cbz	r5, 800d00a <arm_cfft_f32+0xea>
 800cfe2:	f101 030c 	add.w	r3, r1, #12
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cfec:	3201      	adds	r2, #1
 800cfee:	eef1 7a67 	vneg.f32	s15, s15
 800cff2:	4295      	cmp	r5, r2
 800cff4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800cff8:	f103 0308 	add.w	r3, r3, #8
 800cffc:	d1f4      	bne.n	800cfe8 <arm_cfft_f32+0xc8>
 800cffe:	e798      	b.n	800cf32 <arm_cfft_f32+0x12>
 800d000:	4621      	mov	r1, r4
 800d002:	4630      	mov	r0, r6
 800d004:	f7ff fd36 	bl	800ca74 <arm_cfft_radix8by4_f32>
 800d008:	e7a7      	b.n	800cf5a <arm_cfft_f32+0x3a>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0aa      	beq.n	800cf64 <arm_cfft_f32+0x44>
 800d00e:	e7b9      	b.n	800cf84 <arm_cfft_f32+0x64>

0800d010 <arm_bitreversal_32>:
 800d010:	b1e9      	cbz	r1, 800d04e <arm_bitreversal_32+0x3e>
 800d012:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d014:	2500      	movs	r5, #0
 800d016:	f102 0e02 	add.w	lr, r2, #2
 800d01a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800d01e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800d022:	08a4      	lsrs	r4, r4, #2
 800d024:	089b      	lsrs	r3, r3, #2
 800d026:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800d02a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800d02e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800d032:	00a6      	lsls	r6, r4, #2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800d03a:	3304      	adds	r3, #4
 800d03c:	1d34      	adds	r4, r6, #4
 800d03e:	3502      	adds	r5, #2
 800d040:	58c6      	ldr	r6, [r0, r3]
 800d042:	5907      	ldr	r7, [r0, r4]
 800d044:	50c7      	str	r7, [r0, r3]
 800d046:	428d      	cmp	r5, r1
 800d048:	5106      	str	r6, [r0, r4]
 800d04a:	d3e6      	bcc.n	800d01a <arm_bitreversal_32+0xa>
 800d04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d04e:	4770      	bx	lr

0800d050 <arm_mat_mult_f32>:
 800d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	8845      	ldrh	r5, [r0, #2]
 800d056:	880b      	ldrh	r3, [r1, #0]
 800d058:	8806      	ldrh	r6, [r0, #0]
 800d05a:	6847      	ldr	r7, [r0, #4]
 800d05c:	6854      	ldr	r4, [r2, #4]
 800d05e:	6848      	ldr	r0, [r1, #4]
 800d060:	b08b      	sub	sp, #44	; 0x2c
 800d062:	42ab      	cmp	r3, r5
 800d064:	9109      	str	r1, [sp, #36]	; 0x24
 800d066:	9604      	str	r6, [sp, #16]
 800d068:	8849      	ldrh	r1, [r1, #2]
 800d06a:	f040 808a 	bne.w	800d182 <arm_mat_mult_f32+0x132>
 800d06e:	8815      	ldrh	r5, [r2, #0]
 800d070:	42b5      	cmp	r5, r6
 800d072:	f040 8086 	bne.w	800d182 <arm_mat_mult_f32+0x132>
 800d076:	8852      	ldrh	r2, [r2, #2]
 800d078:	428a      	cmp	r2, r1
 800d07a:	f040 8082 	bne.w	800d182 <arm_mat_mult_f32+0x132>
 800d07e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800d082:	1d01      	adds	r1, r0, #4
 800d084:	0116      	lsls	r6, r2, #4
 800d086:	9108      	str	r1, [sp, #32]
 800d088:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800d08c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800d090:	9101      	str	r1, [sp, #4]
 800d092:	fb06 f108 	mul.w	r1, r6, r8
 800d096:	0095      	lsls	r5, r2, #2
 800d098:	9103      	str	r1, [sp, #12]
 800d09a:	00d2      	lsls	r2, r2, #3
 800d09c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800d0a0:	f003 0903 	and.w	r9, r3, #3
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	f107 0b10 	add.w	fp, r7, #16
 800d0aa:	eb04 0a05 	add.w	sl, r4, r5
 800d0ae:	9107      	str	r1, [sp, #28]
 800d0b0:	9202      	str	r2, [sp, #8]
 800d0b2:	9306      	str	r3, [sp, #24]
 800d0b4:	f1ab 0310 	sub.w	r3, fp, #16
 800d0b8:	9305      	str	r3, [sp, #20]
 800d0ba:	9b07      	ldr	r3, [sp, #28]
 800d0bc:	f8dd e020 	ldr.w	lr, [sp, #32]
 800d0c0:	eb03 0c0a 	add.w	ip, r3, sl
 800d0c4:	eddf 7a31 	vldr	s15, [pc, #196]	; 800d18c <arm_mat_mult_f32+0x13c>
 800d0c8:	f1b8 0f00 	cmp.w	r8, #0
 800d0cc:	d053      	beq.n	800d176 <arm_mat_mult_f32+0x126>
 800d0ce:	9b02      	ldr	r3, [sp, #8]
 800d0d0:	4644      	mov	r4, r8
 800d0d2:	18c1      	adds	r1, r0, r3
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	465b      	mov	r3, fp
 800d0d8:	ed92 6a00 	vldr	s12, [r2]
 800d0dc:	ed13 7a04 	vldr	s14, [r3, #-16]
 800d0e0:	ed53 4a03 	vldr	s9, [r3, #-12]
 800d0e4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d0e8:	ed91 5a00 	vldr	s10, [r1]
 800d0ec:	ed53 5a01 	vldr	s11, [r3, #-4]
 800d0f0:	1957      	adds	r7, r2, r5
 800d0f2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d0f6:	ed97 6a00 	vldr	s12, [r7]
 800d0fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0fe:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d102:	194f      	adds	r7, r1, r5
 800d104:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d108:	ee26 7a85 	vmul.f32	s14, s13, s10
 800d10c:	edd7 7a00 	vldr	s15, [r7]
 800d110:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d114:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d118:	3c01      	subs	r4, #1
 800d11a:	4432      	add	r2, r6
 800d11c:	4431      	add	r1, r6
 800d11e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d122:	f103 0310 	add.w	r3, r3, #16
 800d126:	d1d7      	bne.n	800d0d8 <arm_mat_mult_f32+0x88>
 800d128:	9b03      	ldr	r3, [sp, #12]
 800d12a:	9a01      	ldr	r2, [sp, #4]
 800d12c:	4418      	add	r0, r3
 800d12e:	f1b9 0f00 	cmp.w	r9, #0
 800d132:	d00b      	beq.n	800d14c <arm_mat_mult_f32+0xfc>
 800d134:	464b      	mov	r3, r9
 800d136:	edd0 6a00 	vldr	s13, [r0]
 800d13a:	ecb2 7a01 	vldmia	r2!, {s14}
 800d13e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d142:	3b01      	subs	r3, #1
 800d144:	4428      	add	r0, r5
 800d146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d14a:	d1f4      	bne.n	800d136 <arm_mat_mult_f32+0xe6>
 800d14c:	ecec 7a01 	vstmia	ip!, {s15}
 800d150:	45d4      	cmp	ip, sl
 800d152:	4670      	mov	r0, lr
 800d154:	f10e 0e04 	add.w	lr, lr, #4
 800d158:	d1b4      	bne.n	800d0c4 <arm_mat_mult_f32+0x74>
 800d15a:	9a01      	ldr	r2, [sp, #4]
 800d15c:	9b06      	ldr	r3, [sp, #24]
 800d15e:	4611      	mov	r1, r2
 800d160:	4419      	add	r1, r3
 800d162:	449b      	add	fp, r3
 800d164:	9b04      	ldr	r3, [sp, #16]
 800d166:	9101      	str	r1, [sp, #4]
 800d168:	3b01      	subs	r3, #1
 800d16a:	44aa      	add	sl, r5
 800d16c:	9304      	str	r3, [sp, #16]
 800d16e:	d004      	beq.n	800d17a <arm_mat_mult_f32+0x12a>
 800d170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d172:	6858      	ldr	r0, [r3, #4]
 800d174:	e79e      	b.n	800d0b4 <arm_mat_mult_f32+0x64>
 800d176:	9a05      	ldr	r2, [sp, #20]
 800d178:	e7d9      	b.n	800d12e <arm_mat_mult_f32+0xde>
 800d17a:	4618      	mov	r0, r3
 800d17c:	b00b      	add	sp, #44	; 0x2c
 800d17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d182:	f06f 0002 	mvn.w	r0, #2
 800d186:	b00b      	add	sp, #44	; 0x2c
 800d188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18c:	00000000 	.word	0x00000000

0800d190 <arm_mat_inverse_f32>:
 800d190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d194:	8843      	ldrh	r3, [r0, #2]
 800d196:	8804      	ldrh	r4, [r0, #0]
 800d198:	684e      	ldr	r6, [r1, #4]
 800d19a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800d19e:	b087      	sub	sp, #28
 800d1a0:	429c      	cmp	r4, r3
 800d1a2:	9301      	str	r3, [sp, #4]
 800d1a4:	9603      	str	r6, [sp, #12]
 800d1a6:	f040 80ea 	bne.w	800d37e <arm_mat_inverse_f32+0x1ee>
 800d1aa:	880a      	ldrh	r2, [r1, #0]
 800d1ac:	884b      	ldrh	r3, [r1, #2]
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	f040 80e5 	bne.w	800d37e <arm_mat_inverse_f32+0x1ee>
 800d1b4:	429c      	cmp	r4, r3
 800d1b6:	f040 80e2 	bne.w	800d37e <arm_mat_inverse_f32+0x1ee>
 800d1ba:	9005      	str	r0, [sp, #20]
 800d1bc:	b30c      	cbz	r4, 800d202 <arm_mat_inverse_f32+0x72>
 800d1be:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800d1c2:	1e67      	subs	r7, r4, #1
 800d1c4:	f846 bb04 	str.w	fp, [r6], #4
 800d1c8:	d01b      	beq.n	800d202 <arm_mat_inverse_f32+0x72>
 800d1ca:	f04f 0801 	mov.w	r8, #1
 800d1ce:	00ba      	lsls	r2, r7, #2
 800d1d0:	eb06 0a02 	add.w	sl, r6, r2
 800d1d4:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800d1d8:	4630      	mov	r0, r6
 800d1da:	2100      	movs	r1, #0
 800d1dc:	f001 fb2d 	bl	800e83a <memset>
 800d1e0:	eb0a 0605 	add.w	r6, sl, r5
 800d1e4:	462a      	mov	r2, r5
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	f1b8 0f00 	cmp.w	r8, #0
 800d1ee:	f000 80cb 	beq.w	800d388 <arm_mat_inverse_f32+0x1f8>
 800d1f2:	f001 fb22 	bl	800e83a <memset>
 800d1f6:	3f01      	subs	r7, #1
 800d1f8:	f108 0801 	add.w	r8, r8, #1
 800d1fc:	f846 bb04 	str.w	fp, [r6], #4
 800d200:	d1e5      	bne.n	800d1ce <arm_mat_inverse_f32+0x3e>
 800d202:	9b01      	ldr	r3, [sp, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 80b5 	beq.w	800d374 <arm_mat_inverse_f32+0x1e4>
 800d20a:	009d      	lsls	r5, r3, #2
 800d20c:	eb09 0205 	add.w	r2, r9, r5
 800d210:	46cc      	mov	ip, r9
 800d212:	9202      	str	r2, [sp, #8]
 800d214:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d218:	1d2a      	adds	r2, r5, #4
 800d21a:	9204      	str	r2, [sp, #16]
 800d21c:	462f      	mov	r7, r5
 800d21e:	469e      	mov	lr, r3
 800d220:	2600      	movs	r6, #0
 800d222:	9b02      	ldr	r3, [sp, #8]
 800d224:	eddc 6a00 	vldr	s13, [ip]
 800d228:	42b4      	cmp	r4, r6
 800d22a:	eba3 0b07 	sub.w	fp, r3, r7
 800d22e:	f000 80a1 	beq.w	800d374 <arm_mat_inverse_f32+0x1e4>
 800d232:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800d398 <arm_mat_inverse_f32+0x208>
 800d236:	4632      	mov	r2, r6
 800d238:	4663      	mov	r3, ip
 800d23a:	e00b      	b.n	800d254 <arm_mat_inverse_f32+0xc4>
 800d23c:	eef4 7a47 	vcmp.f32	s15, s14
 800d240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d244:	f102 0201 	add.w	r2, r2, #1
 800d248:	bfc8      	it	gt
 800d24a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800d24e:	42a2      	cmp	r2, r4
 800d250:	442b      	add	r3, r5
 800d252:	d014      	beq.n	800d27e <arm_mat_inverse_f32+0xee>
 800d254:	edd3 7a00 	vldr	s15, [r3]
 800d258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d260:	eeb1 6a67 	vneg.f32	s12, s15
 800d264:	dcea      	bgt.n	800d23c <arm_mat_inverse_f32+0xac>
 800d266:	eeb4 6a47 	vcmp.f32	s12, s14
 800d26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d26e:	f102 0201 	add.w	r2, r2, #1
 800d272:	bfc8      	it	gt
 800d274:	eeb0 7a46 	vmovgt.f32	s14, s12
 800d278:	42a2      	cmp	r2, r4
 800d27a:	442b      	add	r3, r5
 800d27c:	d1ea      	bne.n	800d254 <arm_mat_inverse_f32+0xc4>
 800d27e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d286:	d075      	beq.n	800d374 <arm_mat_inverse_f32+0x1e4>
 800d288:	eef5 6a40 	vcmp.f32	s13, #0.0
 800d28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d290:	d070      	beq.n	800d374 <arm_mat_inverse_f32+0x1e4>
 800d292:	4672      	mov	r2, lr
 800d294:	4663      	mov	r3, ip
 800d296:	ed93 7a00 	vldr	s14, [r3]
 800d29a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d29e:	3a01      	subs	r2, #1
 800d2a0:	ece3 7a01 	vstmia	r3!, {s15}
 800d2a4:	d1f7      	bne.n	800d296 <arm_mat_inverse_f32+0x106>
 800d2a6:	9901      	ldr	r1, [sp, #4]
 800d2a8:	464b      	mov	r3, r9
 800d2aa:	ed93 7a00 	vldr	s14, [r3]
 800d2ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2b2:	3901      	subs	r1, #1
 800d2b4:	ece3 7a01 	vstmia	r3!, {s15}
 800d2b8:	d1f7      	bne.n	800d2aa <arm_mat_inverse_f32+0x11a>
 800d2ba:	9803      	ldr	r0, [sp, #12]
 800d2bc:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800d2c0:	42b1      	cmp	r1, r6
 800d2c2:	d039      	beq.n	800d338 <arm_mat_inverse_f32+0x1a8>
 800d2c4:	eddb 6a00 	vldr	s13, [fp]
 800d2c8:	465a      	mov	r2, fp
 800d2ca:	4673      	mov	r3, lr
 800d2cc:	46e2      	mov	sl, ip
 800d2ce:	ecba 7a01 	vldmia	sl!, {s14}
 800d2d2:	edd2 7a00 	vldr	s15, [r2]
 800d2d6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2e0:	ece2 7a01 	vstmia	r2!, {s15}
 800d2e4:	d1f3      	bne.n	800d2ce <arm_mat_inverse_f32+0x13e>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	44bb      	add	fp, r7
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	46ca      	mov	sl, r9
 800d2ee:	ecba 7a01 	vldmia	sl!, {s14}
 800d2f2:	edd2 7a00 	vldr	s15, [r2]
 800d2f6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d300:	ece2 7a01 	vstmia	r2!, {s15}
 800d304:	d1f3      	bne.n	800d2ee <arm_mat_inverse_f32+0x15e>
 800d306:	4428      	add	r0, r5
 800d308:	3101      	adds	r1, #1
 800d30a:	428c      	cmp	r4, r1
 800d30c:	44c3      	add	fp, r8
 800d30e:	d1d7      	bne.n	800d2c0 <arm_mat_inverse_f32+0x130>
 800d310:	9b04      	ldr	r3, [sp, #16]
 800d312:	f1be 0e01 	subs.w	lr, lr, #1
 800d316:	f106 0601 	add.w	r6, r6, #1
 800d31a:	449c      	add	ip, r3
 800d31c:	f1a7 0704 	sub.w	r7, r7, #4
 800d320:	44a9      	add	r9, r5
 800d322:	f47f af7e 	bne.w	800d222 <arm_mat_inverse_f32+0x92>
 800d326:	eef5 6a40 	vcmp.f32	s13, #0.0
 800d32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32e:	d006      	beq.n	800d33e <arm_mat_inverse_f32+0x1ae>
 800d330:	2000      	movs	r0, #0
 800d332:	b007      	add	sp, #28
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d338:	44bb      	add	fp, r7
 800d33a:	4428      	add	r0, r5
 800d33c:	e7e4      	b.n	800d308 <arm_mat_inverse_f32+0x178>
 800d33e:	9b05      	ldr	r3, [sp, #20]
 800d340:	9a01      	ldr	r2, [sp, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	edd3 7a00 	vldr	s15, [r3]
 800d348:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d34c:	fb02 f204 	mul.w	r2, r2, r4
 800d350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d354:	4614      	mov	r4, r2
 800d356:	bf08      	it	eq
 800d358:	3304      	addeq	r3, #4
 800d35a:	d007      	beq.n	800d36c <arm_mat_inverse_f32+0x1dc>
 800d35c:	e7e8      	b.n	800d330 <arm_mat_inverse_f32+0x1a0>
 800d35e:	ecf3 7a01 	vldmia	r3!, {s15}
 800d362:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36a:	d1e1      	bne.n	800d330 <arm_mat_inverse_f32+0x1a0>
 800d36c:	f10e 0e01 	add.w	lr, lr, #1
 800d370:	4574      	cmp	r4, lr
 800d372:	d1f4      	bne.n	800d35e <arm_mat_inverse_f32+0x1ce>
 800d374:	f06f 0004 	mvn.w	r0, #4
 800d378:	b007      	add	sp, #28
 800d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37e:	f06f 0002 	mvn.w	r0, #2
 800d382:	b007      	add	sp, #28
 800d384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d388:	4656      	mov	r6, sl
 800d38a:	3f01      	subs	r7, #1
 800d38c:	f846 bb04 	str.w	fp, [r6], #4
 800d390:	f47f af1b 	bne.w	800d1ca <arm_mat_inverse_f32+0x3a>
 800d394:	e735      	b.n	800d202 <arm_mat_inverse_f32+0x72>
 800d396:	bf00      	nop
 800d398:	00000000 	.word	0x00000000

0800d39c <arm_mat_init_f32>:
 800d39c:	8001      	strh	r1, [r0, #0]
 800d39e:	8042      	strh	r2, [r0, #2]
 800d3a0:	6043      	str	r3, [r0, #4]
 800d3a2:	4770      	bx	lr

0800d3a4 <arm_biquad_cascade_df2T_f32>:
 800d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	7807      	ldrb	r7, [r0, #0]
 800d3aa:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800d3ae:	6885      	ldr	r5, [r0, #8]
 800d3b0:	3514      	adds	r5, #20
 800d3b2:	6846      	ldr	r6, [r0, #4]
 800d3b4:	3608      	adds	r6, #8
 800d3b6:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800d3ba:	eb02 0b09 	add.w	fp, r2, r9
 800d3be:	f003 080f 	and.w	r8, r3, #15
 800d3c2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800d3c6:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800d3ca:	ed15 7a04 	vldr	s14, [r5, #-16]
 800d3ce:	ed55 6a03 	vldr	s13, [r5, #-12]
 800d3d2:	ed15 6a02 	vldr	s12, [r5, #-8]
 800d3d6:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d3da:	46b4      	mov	ip, r6
 800d3dc:	ed56 3a02 	vldr	s7, [r6, #-8]
 800d3e0:	ed16 4a01 	vldr	s8, [r6, #-4]
 800d3e4:	f1be 0f00 	cmp.w	lr, #0
 800d3e8:	f000 8195 	beq.w	800d716 <arm_biquad_cascade_df2T_f32+0x372>
 800d3ec:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800d3f0:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800d3f4:	4674      	mov	r4, lr
 800d3f6:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800d3fa:	ee27 5a83 	vmul.f32	s10, s15, s6
 800d3fe:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d402:	ee67 4a03 	vmul.f32	s9, s14, s6
 800d406:	ee34 4a84 	vadd.f32	s8, s9, s8
 800d40a:	ee66 4a05 	vmul.f32	s9, s12, s10
 800d40e:	ee34 4a84 	vadd.f32	s8, s9, s8
 800d412:	ee26 3a83 	vmul.f32	s6, s13, s6
 800d416:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800d41a:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 800d41e:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800d422:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d426:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d42a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d42e:	ee27 4a23 	vmul.f32	s8, s14, s7
 800d432:	ee35 5a04 	vadd.f32	s10, s10, s8
 800d436:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d43a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d43e:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800d442:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800d446:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800d44a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d44e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d452:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d456:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d45a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d45e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d462:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d466:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d46a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d46e:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800d472:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800d476:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d47a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d47e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d482:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d486:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d48a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d48e:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d492:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d496:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d49a:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800d49e:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 800d4a2:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d4a6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d4aa:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d4ae:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d4b2:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d4b6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d4ba:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d4be:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d4c2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d4c6:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800d4ca:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800d4ce:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d4d2:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d4d6:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d4da:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d4de:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d4e2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d4e6:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d4ea:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d4ee:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d4f2:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800d4f6:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800d4fa:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d4fe:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d502:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d506:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d50a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d50e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d512:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d516:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d51a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d51e:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800d522:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800d526:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d52a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d52e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d532:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d536:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d53a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d53e:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d542:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d546:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d54a:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800d54e:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800d552:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d556:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d55a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d55e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d562:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d566:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d56a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d56e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d572:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d576:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800d57a:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800d57e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d582:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d586:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d58a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d58e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d592:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d596:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d59a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d59e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d5a2:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800d5a6:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800d5aa:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d5ae:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d5b2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d5b6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d5ba:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d5be:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d5c2:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d5c6:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d5ca:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d5ce:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 800d5d2:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800d5d6:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d5da:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d5de:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d5e2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d5e6:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d5ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d5ee:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d5f2:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d5f6:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d5fa:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800d5fe:	ed10 4a04 	vldr	s8, [r0, #-16]
 800d602:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d606:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d60a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d60e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d612:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d616:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d61a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d61e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d622:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d626:	ed03 5a04 	vstr	s10, [r3, #-16]
 800d62a:	ed10 4a03 	vldr	s8, [r0, #-12]
 800d62e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d632:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d636:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d63a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d63e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d642:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d646:	ee26 3a24 	vmul.f32	s6, s12, s9
 800d64a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800d64e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d652:	ed43 4a03 	vstr	s9, [r3, #-12]
 800d656:	ed10 4a02 	vldr	s8, [r0, #-8]
 800d65a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800d65e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d662:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800d666:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d66a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d66e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d672:	ee26 3a05 	vmul.f32	s6, s12, s10
 800d676:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d67a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800d67e:	ed03 5a02 	vstr	s10, [r3, #-8]
 800d682:	ed10 4a01 	vldr	s8, [r0, #-4]
 800d686:	ee67 4a84 	vmul.f32	s9, s15, s8
 800d68a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d68e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d692:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d696:	ee67 3a04 	vmul.f32	s7, s14, s8
 800d69a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d69e:	ee66 3a24 	vmul.f32	s7, s12, s9
 800d6a2:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d6a6:	ee26 5a84 	vmul.f32	s10, s13, s8
 800d6aa:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800d6ae:	ee34 4a05 	vadd.f32	s8, s8, s10
 800d6b2:	ed43 4a01 	vstr	s9, [r3, #-4]
 800d6b6:	3040      	adds	r0, #64	; 0x40
 800d6b8:	3340      	adds	r3, #64	; 0x40
 800d6ba:	3c01      	subs	r4, #1
 800d6bc:	f47f ae9b 	bne.w	800d3f6 <arm_biquad_cascade_df2T_f32+0x52>
 800d6c0:	4449      	add	r1, r9
 800d6c2:	465b      	mov	r3, fp
 800d6c4:	f1b8 0f00 	cmp.w	r8, #0
 800d6c8:	d019      	beq.n	800d6fe <arm_biquad_cascade_df2T_f32+0x35a>
 800d6ca:	eb01 000a 	add.w	r0, r1, sl
 800d6ce:	ecf1 2a01 	vldmia	r1!, {s5}
 800d6d2:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800d6d6:	ee33 3a23 	vadd.f32	s6, s6, s7
 800d6da:	ee67 3a22 	vmul.f32	s7, s14, s5
 800d6de:	ee33 4a84 	vadd.f32	s8, s7, s8
 800d6e2:	ee26 5a03 	vmul.f32	s10, s12, s6
 800d6e6:	ee75 3a04 	vadd.f32	s7, s10, s8
 800d6ea:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800d6ee:	ee25 4a83 	vmul.f32	s8, s11, s6
 800d6f2:	ee34 4a22 	vadd.f32	s8, s8, s5
 800d6f6:	eca3 3a01 	vstmia	r3!, {s6}
 800d6fa:	4281      	cmp	r1, r0
 800d6fc:	d1e7      	bne.n	800d6ce <arm_biquad_cascade_df2T_f32+0x32a>
 800d6fe:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800d702:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800d706:	3514      	adds	r5, #20
 800d708:	3608      	adds	r6, #8
 800d70a:	4611      	mov	r1, r2
 800d70c:	3f01      	subs	r7, #1
 800d70e:	f47f ae5a 	bne.w	800d3c6 <arm_biquad_cascade_df2T_f32+0x22>
 800d712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d716:	4613      	mov	r3, r2
 800d718:	e7d4      	b.n	800d6c4 <arm_biquad_cascade_df2T_f32+0x320>
	...

0800d71c <arm_biquad_cascade_df2T_init_f32>:
 800d71c:	b510      	push	{r4, lr}
 800d71e:	6082      	str	r2, [r0, #8]
 800d720:	7001      	strb	r1, [r0, #0]
 800d722:	4604      	mov	r4, r0
 800d724:	00ca      	lsls	r2, r1, #3
 800d726:	4618      	mov	r0, r3
 800d728:	2100      	movs	r1, #0
 800d72a:	f001 f886 	bl	800e83a <memset>
 800d72e:	6060      	str	r0, [r4, #4]
 800d730:	bd10      	pop	{r4, pc}
 800d732:	bf00      	nop

0800d734 <arm_dot_prod_f32>:
 800d734:	b4f0      	push	{r4, r5, r6, r7}
 800d736:	0897      	lsrs	r7, r2, #2
 800d738:	eddf 5a29 	vldr	s11, [pc, #164]	; 800d7e0 <arm_dot_prod_f32+0xac>
 800d73c:	d02d      	beq.n	800d79a <arm_dot_prod_f32+0x66>
 800d73e:	f100 0510 	add.w	r5, r0, #16
 800d742:	f101 0410 	add.w	r4, r1, #16
 800d746:	463e      	mov	r6, r7
 800d748:	ed55 6a04 	vldr	s13, [r5, #-16]
 800d74c:	ed54 3a04 	vldr	s7, [r4, #-16]
 800d750:	ed15 7a03 	vldr	s14, [r5, #-12]
 800d754:	ed14 4a03 	vldr	s8, [r4, #-12]
 800d758:	ed55 7a02 	vldr	s15, [r5, #-8]
 800d75c:	ed54 4a02 	vldr	s9, [r4, #-8]
 800d760:	ed15 6a01 	vldr	s12, [r5, #-4]
 800d764:	ed14 5a01 	vldr	s10, [r4, #-4]
 800d768:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d76c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d770:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d774:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d778:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d77c:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d780:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d784:	3e01      	subs	r6, #1
 800d786:	f105 0510 	add.w	r5, r5, #16
 800d78a:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d78e:	f104 0410 	add.w	r4, r4, #16
 800d792:	d1d9      	bne.n	800d748 <arm_dot_prod_f32+0x14>
 800d794:	013f      	lsls	r7, r7, #4
 800d796:	4438      	add	r0, r7
 800d798:	4439      	add	r1, r7
 800d79a:	f012 0203 	ands.w	r2, r2, #3
 800d79e:	d01b      	beq.n	800d7d8 <arm_dot_prod_f32+0xa4>
 800d7a0:	edd1 7a00 	vldr	s15, [r1]
 800d7a4:	ed90 7a00 	vldr	s14, [r0]
 800d7a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7ac:	3a01      	subs	r2, #1
 800d7ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d7b2:	d011      	beq.n	800d7d8 <arm_dot_prod_f32+0xa4>
 800d7b4:	edd1 7a01 	vldr	s15, [r1, #4]
 800d7b8:	ed90 7a01 	vldr	s14, [r0, #4]
 800d7bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7c0:	2a01      	cmp	r2, #1
 800d7c2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d7c6:	d007      	beq.n	800d7d8 <arm_dot_prod_f32+0xa4>
 800d7c8:	edd0 7a02 	vldr	s15, [r0, #8]
 800d7cc:	ed91 7a02 	vldr	s14, [r1, #8]
 800d7d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7d4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d7d8:	edc3 5a00 	vstr	s11, [r3]
 800d7dc:	bcf0      	pop	{r4, r5, r6, r7}
 800d7de:	4770      	bx	lr
 800d7e0:	00000000 	.word	0x00000000

0800d7e4 <arm_radix8_butterfly_f32>:
 800d7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e8:	ed2d 8b10 	vpush	{d8-d15}
 800d7ec:	b095      	sub	sp, #84	; 0x54
 800d7ee:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	ed9f bab9 	vldr	s22, [pc, #740]	; 800dadc <arm_radix8_butterfly_f32+0x2f8>
 800d7fa:	9012      	str	r0, [sp, #72]	; 0x48
 800d7fc:	468b      	mov	fp, r1
 800d7fe:	9313      	str	r3, [sp, #76]	; 0x4c
 800d800:	4689      	mov	r9, r1
 800d802:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800d806:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d808:	960f      	str	r6, [sp, #60]	; 0x3c
 800d80a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800d80e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800d812:	eb03 0508 	add.w	r5, r3, r8
 800d816:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d81a:	eb05 040e 	add.w	r4, r5, lr
 800d81e:	0137      	lsls	r7, r6, #4
 800d820:	eba6 030a 	sub.w	r3, r6, sl
 800d824:	eb04 000e 	add.w	r0, r4, lr
 800d828:	44b2      	add	sl, r6
 800d82a:	1d3a      	adds	r2, r7, #4
 800d82c:	9702      	str	r7, [sp, #8]
 800d82e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d832:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800d836:	ebae 0c06 	sub.w	ip, lr, r6
 800d83a:	9703      	str	r7, [sp, #12]
 800d83c:	eb03 0708 	add.w	r7, r3, r8
 800d840:	9701      	str	r7, [sp, #4]
 800d842:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800d846:	9706      	str	r7, [sp, #24]
 800d848:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d84a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800d84e:	f10e 0104 	add.w	r1, lr, #4
 800d852:	4439      	add	r1, r7
 800d854:	443a      	add	r2, r7
 800d856:	0137      	lsls	r7, r6, #4
 800d858:	00f6      	lsls	r6, r6, #3
 800d85a:	9704      	str	r7, [sp, #16]
 800d85c:	9605      	str	r6, [sp, #20]
 800d85e:	9f01      	ldr	r7, [sp, #4]
 800d860:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d862:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800d866:	f04f 0c00 	mov.w	ip, #0
 800d86a:	edd4 6a00 	vldr	s13, [r4]
 800d86e:	edd7 1a00 	vldr	s3, [r7]
 800d872:	ed16 aa01 	vldr	s20, [r6, #-4]
 800d876:	edd5 5a00 	vldr	s11, [r5]
 800d87a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800d87e:	ed90 6a00 	vldr	s12, [r0]
 800d882:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d886:	ed93 3a00 	vldr	s6, [r3]
 800d88a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800d88e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800d892:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800d896:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800d89a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800d89e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800d8a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d8a6:	ee74 6a07 	vadd.f32	s13, s8, s14
 800d8aa:	ee34 4a47 	vsub.f32	s8, s8, s14
 800d8ae:	ed46 6a01 	vstr	s13, [r6, #-4]
 800d8b2:	ed85 4a00 	vstr	s8, [r5]
 800d8b6:	edd1 6a00 	vldr	s13, [r1]
 800d8ba:	ed94 9a01 	vldr	s18, [r4, #4]
 800d8be:	edd3 2a01 	vldr	s5, [r3, #4]
 800d8c2:	edd7 8a01 	vldr	s17, [r7, #4]
 800d8c6:	edd6 0a00 	vldr	s1, [r6]
 800d8ca:	edd5 3a01 	vldr	s7, [r5, #4]
 800d8ce:	ed90 8a01 	vldr	s16, [r0, #4]
 800d8d2:	ed92 7a00 	vldr	s14, [r2]
 800d8d6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d8da:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800d8de:	ee72 aae8 	vsub.f32	s21, s5, s17
 800d8e2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800d8e6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800d8ea:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d8ee:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800d8f2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800d8f6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800d8fa:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800d8fe:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800d902:	ee77 0a08 	vadd.f32	s1, s14, s16
 800d906:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800d90a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d90e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800d912:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800d916:	ee76 6a89 	vadd.f32	s13, s13, s18
 800d91a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800d91e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d922:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d926:	ee35 5a42 	vsub.f32	s10, s10, s4
 800d92a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800d92e:	ee33 2a20 	vadd.f32	s4, s6, s1
 800d932:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800d936:	ee33 3a60 	vsub.f32	s6, s6, s1
 800d93a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800d93e:	ee77 0a01 	vadd.f32	s1, s14, s2
 800d942:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d946:	ee37 7a41 	vsub.f32	s14, s14, s2
 800d94a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800d94e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d952:	ee76 3a27 	vadd.f32	s7, s12, s15
 800d956:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d95a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800d95e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800d962:	ee32 2a40 	vsub.f32	s4, s4, s0
 800d966:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d96a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800d96e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800d972:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d976:	ee34 6a67 	vsub.f32	s12, s8, s15
 800d97a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800d97e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800d982:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800d986:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d98a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800d98e:	44dc      	add	ip, fp
 800d990:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d994:	45e1      	cmp	r9, ip
 800d996:	ed86 8a00 	vstr	s16, [r6]
 800d99a:	ed85 2a01 	vstr	s4, [r5, #4]
 800d99e:	4456      	add	r6, sl
 800d9a0:	ed02 0a01 	vstr	s0, [r2, #-4]
 800d9a4:	4455      	add	r5, sl
 800d9a6:	edc0 6a00 	vstr	s13, [r0]
 800d9aa:	ed82 1a00 	vstr	s2, [r2]
 800d9ae:	ed80 5a01 	vstr	s10, [r0, #4]
 800d9b2:	4452      	add	r2, sl
 800d9b4:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d9b8:	4450      	add	r0, sl
 800d9ba:	edc7 2a00 	vstr	s5, [r7]
 800d9be:	edc4 4a00 	vstr	s9, [r4]
 800d9c2:	ed83 7a00 	vstr	s14, [r3]
 800d9c6:	edc1 5a00 	vstr	s11, [r1]
 800d9ca:	edc7 3a01 	vstr	s7, [r7, #4]
 800d9ce:	4451      	add	r1, sl
 800d9d0:	ed84 6a01 	vstr	s12, [r4, #4]
 800d9d4:	4457      	add	r7, sl
 800d9d6:	edc3 7a01 	vstr	s15, [r3, #4]
 800d9da:	4454      	add	r4, sl
 800d9dc:	4453      	add	r3, sl
 800d9de:	f63f af44 	bhi.w	800d86a <arm_radix8_butterfly_f32+0x86>
 800d9e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9e4:	2b07      	cmp	r3, #7
 800d9e6:	f240 81b7 	bls.w	800dd58 <arm_radix8_butterfly_f32+0x574>
 800d9ea:	9b06      	ldr	r3, [sp, #24]
 800d9ec:	9903      	ldr	r1, [sp, #12]
 800d9ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d9f0:	9e05      	ldr	r6, [sp, #20]
 800d9f2:	9a04      	ldr	r2, [sp, #16]
 800d9f4:	f103 0c08 	add.w	ip, r3, #8
 800d9f8:	9b02      	ldr	r3, [sp, #8]
 800d9fa:	3108      	adds	r1, #8
 800d9fc:	f108 0808 	add.w	r8, r8, #8
 800da00:	1841      	adds	r1, r0, r1
 800da02:	3608      	adds	r6, #8
 800da04:	330c      	adds	r3, #12
 800da06:	4604      	mov	r4, r0
 800da08:	4444      	add	r4, r8
 800da0a:	18c3      	adds	r3, r0, r3
 800da0c:	9109      	str	r1, [sp, #36]	; 0x24
 800da0e:	1981      	adds	r1, r0, r6
 800da10:	f10e 0e08 	add.w	lr, lr, #8
 800da14:	3208      	adds	r2, #8
 800da16:	940b      	str	r4, [sp, #44]	; 0x2c
 800da18:	9107      	str	r1, [sp, #28]
 800da1a:	4604      	mov	r4, r0
 800da1c:	4601      	mov	r1, r0
 800da1e:	9304      	str	r3, [sp, #16]
 800da20:	f100 030c 	add.w	r3, r0, #12
 800da24:	4474      	add	r4, lr
 800da26:	f04f 0801 	mov.w	r8, #1
 800da2a:	1882      	adds	r2, r0, r2
 800da2c:	4461      	add	r1, ip
 800da2e:	9305      	str	r3, [sp, #20]
 800da30:	464b      	mov	r3, r9
 800da32:	940a      	str	r4, [sp, #40]	; 0x28
 800da34:	46c1      	mov	r9, r8
 800da36:	9208      	str	r2, [sp, #32]
 800da38:	46d8      	mov	r8, fp
 800da3a:	9106      	str	r1, [sp, #24]
 800da3c:	f04f 0e00 	mov.w	lr, #0
 800da40:	469b      	mov	fp, r3
 800da42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da46:	449e      	add	lr, r3
 800da48:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800da4c:	441a      	add	r2, r3
 800da4e:	920e      	str	r2, [sp, #56]	; 0x38
 800da50:	441a      	add	r2, r3
 800da52:	18d4      	adds	r4, r2, r3
 800da54:	18e5      	adds	r5, r4, r3
 800da56:	18ee      	adds	r6, r5, r3
 800da58:	18f7      	adds	r7, r6, r3
 800da5a:	eb07 0c03 	add.w	ip, r7, r3
 800da5e:	920d      	str	r2, [sp, #52]	; 0x34
 800da60:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800da64:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800da68:	910c      	str	r1, [sp, #48]	; 0x30
 800da6a:	4419      	add	r1, r3
 800da6c:	9103      	str	r1, [sp, #12]
 800da6e:	4419      	add	r1, r3
 800da70:	18ca      	adds	r2, r1, r3
 800da72:	9202      	str	r2, [sp, #8]
 800da74:	441a      	add	r2, r3
 800da76:	18d0      	adds	r0, r2, r3
 800da78:	ed92 ea01 	vldr	s28, [r2, #4]
 800da7c:	9a02      	ldr	r2, [sp, #8]
 800da7e:	edd4 7a00 	vldr	s15, [r4]
 800da82:	edd2 da01 	vldr	s27, [r2, #4]
 800da86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da88:	ed91 da01 	vldr	s26, [r1, #4]
 800da8c:	ed92 ca01 	vldr	s24, [r2, #4]
 800da90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da92:	9903      	ldr	r1, [sp, #12]
 800da94:	edcd 7a03 	vstr	s15, [sp, #12]
 800da98:	edd2 7a00 	vldr	s15, [r2]
 800da9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da9e:	edcd 7a02 	vstr	s15, [sp, #8]
 800daa2:	edd2 7a00 	vldr	s15, [r2]
 800daa6:	edd0 ea01 	vldr	s29, [r0, #4]
 800daaa:	edd1 ca01 	vldr	s25, [r1, #4]
 800daae:	eddc ba00 	vldr	s23, [ip]
 800dab2:	edd7 aa00 	vldr	s21, [r7]
 800dab6:	ed96 aa00 	vldr	s20, [r6]
 800daba:	edd5 9a00 	vldr	s19, [r5]
 800dabe:	edcd 7a01 	vstr	s15, [sp, #4]
 800dac2:	4403      	add	r3, r0
 800dac4:	ed93 fa01 	vldr	s30, [r3, #4]
 800dac8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800dacc:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800dad0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dad8:	46cc      	mov	ip, r9
 800dada:	e001      	b.n	800dae0 <arm_radix8_butterfly_f32+0x2fc>
 800dadc:	3f3504f3 	.word	0x3f3504f3
 800dae0:	ed91 6a00 	vldr	s12, [r1]
 800dae4:	ed93 5a00 	vldr	s10, [r3]
 800dae8:	edd0 fa00 	vldr	s31, [r0]
 800daec:	edd4 7a00 	vldr	s15, [r4]
 800daf0:	ed95 7a00 	vldr	s14, [r5]
 800daf4:	ed56 3a01 	vldr	s7, [r6, #-4]
 800daf8:	ed17 3a01 	vldr	s6, [r7, #-4]
 800dafc:	ed92 2a00 	vldr	s4, [r2]
 800db00:	ed96 0a00 	vldr	s0, [r6]
 800db04:	ee33 8a85 	vadd.f32	s16, s7, s10
 800db08:	ee32 1a06 	vadd.f32	s2, s4, s12
 800db0c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800db10:	ee77 4a87 	vadd.f32	s9, s15, s14
 800db14:	ee78 1a04 	vadd.f32	s3, s16, s8
 800db18:	ee71 6a24 	vadd.f32	s13, s2, s9
 800db1c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800db20:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800db24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db28:	ed06 6a01 	vstr	s12, [r6, #-4]
 800db2c:	edd4 8a01 	vldr	s17, [r4, #4]
 800db30:	ed92 9a01 	vldr	s18, [r2, #4]
 800db34:	edd7 0a00 	vldr	s1, [r7]
 800db38:	edd1 2a01 	vldr	s5, [r1, #4]
 800db3c:	ed95 7a01 	vldr	s14, [r5, #4]
 800db40:	ed93 6a01 	vldr	s12, [r3, #4]
 800db44:	edd0 5a01 	vldr	s11, [r0, #4]
 800db48:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800db4c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800db50:	ee39 5a62 	vsub.f32	s10, s18, s5
 800db54:	ee78 fac7 	vsub.f32	s31, s17, s14
 800db58:	ee38 4a44 	vsub.f32	s8, s16, s8
 800db5c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800db60:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800db64:	ee79 2a22 	vadd.f32	s5, s18, s5
 800db68:	ee32 9a27 	vadd.f32	s18, s4, s15
 800db6c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800db70:	ee30 2a06 	vadd.f32	s4, s0, s12
 800db74:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800db78:	ee71 4a64 	vsub.f32	s9, s2, s9
 800db7c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800db80:	ee32 1a08 	vadd.f32	s2, s4, s16
 800db84:	ee72 fa87 	vadd.f32	s31, s5, s14
 800db88:	ee32 2a48 	vsub.f32	s4, s4, s16
 800db8c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800db90:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800db94:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800db98:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800db9c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800dba0:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800dba4:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800dba8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800dbac:	ee30 6a46 	vsub.f32	s12, s0, s12
 800dbb0:	ee74 0a22 	vadd.f32	s1, s8, s5
 800dbb4:	ee36 0a28 	vadd.f32	s0, s12, s17
 800dbb8:	ee74 2a62 	vsub.f32	s5, s8, s5
 800dbbc:	ee36 6a68 	vsub.f32	s12, s12, s17
 800dbc0:	ee32 4a64 	vsub.f32	s8, s4, s9
 800dbc4:	ee73 8a09 	vadd.f32	s17, s6, s18
 800dbc8:	ee74 4a82 	vadd.f32	s9, s9, s4
 800dbcc:	ee33 9a49 	vsub.f32	s18, s6, s18
 800dbd0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800dbd4:	ee35 3a85 	vadd.f32	s6, s11, s10
 800dbd8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800dbdc:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800dbe0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800dbe4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800dbe8:	ee30 7a68 	vsub.f32	s14, s0, s17
 800dbec:	ee35 8a03 	vadd.f32	s16, s10, s6
 800dbf0:	ee38 0a80 	vadd.f32	s0, s17, s0
 800dbf4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800dbf8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800dbfc:	ed9d 2a01 	vldr	s4, [sp, #4]
 800dc00:	eddd 1a02 	vldr	s3, [sp, #8]
 800dc04:	ee35 5a43 	vsub.f32	s10, s10, s6
 800dc08:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800dc0c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800dc10:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800dc14:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800dc18:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800dc1c:	ee76 5a49 	vsub.f32	s11, s12, s18
 800dc20:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800dc24:	ee39 6a06 	vadd.f32	s12, s18, s12
 800dc28:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800dc2c:	ee21 4a84 	vmul.f32	s8, s3, s8
 800dc30:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800dc34:	ee22 7a07 	vmul.f32	s14, s4, s14
 800dc38:	ee22 2a08 	vmul.f32	s4, s4, s16
 800dc3c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800dc40:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800dc44:	ee31 1a09 	vadd.f32	s2, s2, s18
 800dc48:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800dc4c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800dc50:	ee74 0a60 	vsub.f32	s1, s8, s1
 800dc54:	ee37 7a48 	vsub.f32	s14, s14, s16
 800dc58:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800dc5c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800dc60:	ee72 1a21 	vadd.f32	s3, s4, s3
 800dc64:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800dc68:	ee38 2a89 	vadd.f32	s4, s17, s18
 800dc6c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800dc70:	ee38 8a04 	vadd.f32	s16, s16, s8
 800dc74:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800dc78:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800dc7c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800dc80:	eddd 5a03 	vldr	s11, [sp, #12]
 800dc84:	edc6 fa00 	vstr	s31, [r6]
 800dc88:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800dc8c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800dc90:	ee30 0a45 	vsub.f32	s0, s0, s10
 800dc94:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800dc98:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800dc9c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800dca0:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800dca4:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800dca8:	ee25 6a86 	vmul.f32	s12, s11, s12
 800dcac:	ee74 4a89 	vadd.f32	s9, s9, s18
 800dcb0:	ee34 3a43 	vsub.f32	s6, s8, s6
 800dcb4:	ee78 8a85 	vadd.f32	s17, s17, s10
 800dcb8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800dcbc:	44c4      	add	ip, r8
 800dcbe:	45e3      	cmp	fp, ip
 800dcc0:	edc3 3a00 	vstr	s7, [r3]
 800dcc4:	edc3 6a01 	vstr	s13, [r3, #4]
 800dcc8:	4456      	add	r6, sl
 800dcca:	ed07 1a01 	vstr	s2, [r7, #-4]
 800dcce:	edc7 0a00 	vstr	s1, [r7]
 800dcd2:	4453      	add	r3, sl
 800dcd4:	ed80 2a00 	vstr	s4, [r0]
 800dcd8:	edc0 2a01 	vstr	s5, [r0, #4]
 800dcdc:	4457      	add	r7, sl
 800dcde:	edc2 1a00 	vstr	s3, [r2]
 800dce2:	ed82 7a01 	vstr	s14, [r2, #4]
 800dce6:	4450      	add	r0, sl
 800dce8:	ed85 8a00 	vstr	s16, [r5]
 800dcec:	ed85 0a01 	vstr	s0, [r5, #4]
 800dcf0:	4452      	add	r2, sl
 800dcf2:	edc1 4a00 	vstr	s9, [r1]
 800dcf6:	4455      	add	r5, sl
 800dcf8:	ed81 3a01 	vstr	s6, [r1, #4]
 800dcfc:	edc4 8a00 	vstr	s17, [r4]
 800dd00:	ed84 6a01 	vstr	s12, [r4, #4]
 800dd04:	4451      	add	r1, sl
 800dd06:	4454      	add	r4, sl
 800dd08:	f63f aeea 	bhi.w	800dae0 <arm_radix8_butterfly_f32+0x2fc>
 800dd0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd0e:	3308      	adds	r3, #8
 800dd10:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd14:	3308      	adds	r3, #8
 800dd16:	930a      	str	r3, [sp, #40]	; 0x28
 800dd18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1a:	3308      	adds	r3, #8
 800dd1c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd1e:	9b08      	ldr	r3, [sp, #32]
 800dd20:	3308      	adds	r3, #8
 800dd22:	9308      	str	r3, [sp, #32]
 800dd24:	9b07      	ldr	r3, [sp, #28]
 800dd26:	3308      	adds	r3, #8
 800dd28:	9307      	str	r3, [sp, #28]
 800dd2a:	9b06      	ldr	r3, [sp, #24]
 800dd2c:	3308      	adds	r3, #8
 800dd2e:	9306      	str	r3, [sp, #24]
 800dd30:	9b05      	ldr	r3, [sp, #20]
 800dd32:	3308      	adds	r3, #8
 800dd34:	9305      	str	r3, [sp, #20]
 800dd36:	9b04      	ldr	r3, [sp, #16]
 800dd38:	3308      	adds	r3, #8
 800dd3a:	9304      	str	r3, [sp, #16]
 800dd3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd3e:	f109 0901 	add.w	r9, r9, #1
 800dd42:	454b      	cmp	r3, r9
 800dd44:	f47f ae7d 	bne.w	800da42 <arm_radix8_butterfly_f32+0x25e>
 800dd48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd4a:	00db      	lsls	r3, r3, #3
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	46d9      	mov	r9, fp
 800dd50:	9310      	str	r3, [sp, #64]	; 0x40
 800dd52:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800dd56:	e554      	b.n	800d802 <arm_radix8_butterfly_f32+0x1e>
 800dd58:	b015      	add	sp, #84	; 0x54
 800dd5a:	ecbd 8b10 	vpop	{d8-d15}
 800dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd62:	bf00      	nop

0800dd64 <__cvt>:
 800dd64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd68:	ec55 4b10 	vmov	r4, r5, d0
 800dd6c:	2d00      	cmp	r5, #0
 800dd6e:	460e      	mov	r6, r1
 800dd70:	4619      	mov	r1, r3
 800dd72:	462b      	mov	r3, r5
 800dd74:	bfbb      	ittet	lt
 800dd76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd7a:	461d      	movlt	r5, r3
 800dd7c:	2300      	movge	r3, #0
 800dd7e:	232d      	movlt	r3, #45	; 0x2d
 800dd80:	700b      	strb	r3, [r1, #0]
 800dd82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd88:	4691      	mov	r9, r2
 800dd8a:	f023 0820 	bic.w	r8, r3, #32
 800dd8e:	bfbc      	itt	lt
 800dd90:	4622      	movlt	r2, r4
 800dd92:	4614      	movlt	r4, r2
 800dd94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd98:	d005      	beq.n	800dda6 <__cvt+0x42>
 800dd9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd9e:	d100      	bne.n	800dda2 <__cvt+0x3e>
 800dda0:	3601      	adds	r6, #1
 800dda2:	2102      	movs	r1, #2
 800dda4:	e000      	b.n	800dda8 <__cvt+0x44>
 800dda6:	2103      	movs	r1, #3
 800dda8:	ab03      	add	r3, sp, #12
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	ab02      	add	r3, sp, #8
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	ec45 4b10 	vmov	d0, r4, r5
 800ddb4:	4653      	mov	r3, sl
 800ddb6:	4632      	mov	r2, r6
 800ddb8:	f000 fe4a 	bl	800ea50 <_dtoa_r>
 800ddbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ddc0:	4607      	mov	r7, r0
 800ddc2:	d102      	bne.n	800ddca <__cvt+0x66>
 800ddc4:	f019 0f01 	tst.w	r9, #1
 800ddc8:	d022      	beq.n	800de10 <__cvt+0xac>
 800ddca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ddce:	eb07 0906 	add.w	r9, r7, r6
 800ddd2:	d110      	bne.n	800ddf6 <__cvt+0x92>
 800ddd4:	783b      	ldrb	r3, [r7, #0]
 800ddd6:	2b30      	cmp	r3, #48	; 0x30
 800ddd8:	d10a      	bne.n	800ddf0 <__cvt+0x8c>
 800ddda:	2200      	movs	r2, #0
 800dddc:	2300      	movs	r3, #0
 800ddde:	4620      	mov	r0, r4
 800dde0:	4629      	mov	r1, r5
 800dde2:	f7f2 fe99 	bl	8000b18 <__aeabi_dcmpeq>
 800dde6:	b918      	cbnz	r0, 800ddf0 <__cvt+0x8c>
 800dde8:	f1c6 0601 	rsb	r6, r6, #1
 800ddec:	f8ca 6000 	str.w	r6, [sl]
 800ddf0:	f8da 3000 	ldr.w	r3, [sl]
 800ddf4:	4499      	add	r9, r3
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	f7f2 fe8b 	bl	8000b18 <__aeabi_dcmpeq>
 800de02:	b108      	cbz	r0, 800de08 <__cvt+0xa4>
 800de04:	f8cd 900c 	str.w	r9, [sp, #12]
 800de08:	2230      	movs	r2, #48	; 0x30
 800de0a:	9b03      	ldr	r3, [sp, #12]
 800de0c:	454b      	cmp	r3, r9
 800de0e:	d307      	bcc.n	800de20 <__cvt+0xbc>
 800de10:	9b03      	ldr	r3, [sp, #12]
 800de12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de14:	1bdb      	subs	r3, r3, r7
 800de16:	4638      	mov	r0, r7
 800de18:	6013      	str	r3, [r2, #0]
 800de1a:	b004      	add	sp, #16
 800de1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de20:	1c59      	adds	r1, r3, #1
 800de22:	9103      	str	r1, [sp, #12]
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	e7f0      	b.n	800de0a <__cvt+0xa6>

0800de28 <__exponent>:
 800de28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de2a:	4603      	mov	r3, r0
 800de2c:	2900      	cmp	r1, #0
 800de2e:	bfb8      	it	lt
 800de30:	4249      	neglt	r1, r1
 800de32:	f803 2b02 	strb.w	r2, [r3], #2
 800de36:	bfb4      	ite	lt
 800de38:	222d      	movlt	r2, #45	; 0x2d
 800de3a:	222b      	movge	r2, #43	; 0x2b
 800de3c:	2909      	cmp	r1, #9
 800de3e:	7042      	strb	r2, [r0, #1]
 800de40:	dd2a      	ble.n	800de98 <__exponent+0x70>
 800de42:	f10d 0207 	add.w	r2, sp, #7
 800de46:	4617      	mov	r7, r2
 800de48:	260a      	movs	r6, #10
 800de4a:	4694      	mov	ip, r2
 800de4c:	fb91 f5f6 	sdiv	r5, r1, r6
 800de50:	fb06 1415 	mls	r4, r6, r5, r1
 800de54:	3430      	adds	r4, #48	; 0x30
 800de56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800de5a:	460c      	mov	r4, r1
 800de5c:	2c63      	cmp	r4, #99	; 0x63
 800de5e:	f102 32ff 	add.w	r2, r2, #4294967295
 800de62:	4629      	mov	r1, r5
 800de64:	dcf1      	bgt.n	800de4a <__exponent+0x22>
 800de66:	3130      	adds	r1, #48	; 0x30
 800de68:	f1ac 0402 	sub.w	r4, ip, #2
 800de6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800de70:	1c41      	adds	r1, r0, #1
 800de72:	4622      	mov	r2, r4
 800de74:	42ba      	cmp	r2, r7
 800de76:	d30a      	bcc.n	800de8e <__exponent+0x66>
 800de78:	f10d 0209 	add.w	r2, sp, #9
 800de7c:	eba2 020c 	sub.w	r2, r2, ip
 800de80:	42bc      	cmp	r4, r7
 800de82:	bf88      	it	hi
 800de84:	2200      	movhi	r2, #0
 800de86:	4413      	add	r3, r2
 800de88:	1a18      	subs	r0, r3, r0
 800de8a:	b003      	add	sp, #12
 800de8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800de92:	f801 5f01 	strb.w	r5, [r1, #1]!
 800de96:	e7ed      	b.n	800de74 <__exponent+0x4c>
 800de98:	2330      	movs	r3, #48	; 0x30
 800de9a:	3130      	adds	r1, #48	; 0x30
 800de9c:	7083      	strb	r3, [r0, #2]
 800de9e:	70c1      	strb	r1, [r0, #3]
 800dea0:	1d03      	adds	r3, r0, #4
 800dea2:	e7f1      	b.n	800de88 <__exponent+0x60>

0800dea4 <_printf_float>:
 800dea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea8:	ed2d 8b02 	vpush	{d8}
 800deac:	b08d      	sub	sp, #52	; 0x34
 800deae:	460c      	mov	r4, r1
 800deb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800deb4:	4616      	mov	r6, r2
 800deb6:	461f      	mov	r7, r3
 800deb8:	4605      	mov	r5, r0
 800deba:	f000 fcc7 	bl	800e84c <_localeconv_r>
 800debe:	f8d0 a000 	ldr.w	sl, [r0]
 800dec2:	4650      	mov	r0, sl
 800dec4:	f7f2 f9fc 	bl	80002c0 <strlen>
 800dec8:	2300      	movs	r3, #0
 800deca:	930a      	str	r3, [sp, #40]	; 0x28
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	9305      	str	r3, [sp, #20]
 800ded0:	f8d8 3000 	ldr.w	r3, [r8]
 800ded4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ded8:	3307      	adds	r3, #7
 800deda:	f023 0307 	bic.w	r3, r3, #7
 800dede:	f103 0208 	add.w	r2, r3, #8
 800dee2:	f8c8 2000 	str.w	r2, [r8]
 800dee6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800deea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800deee:	9307      	str	r3, [sp, #28]
 800def0:	f8cd 8018 	str.w	r8, [sp, #24]
 800def4:	ee08 0a10 	vmov	s16, r0
 800def8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800defc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df00:	4b9e      	ldr	r3, [pc, #632]	; (800e17c <_printf_float+0x2d8>)
 800df02:	f04f 32ff 	mov.w	r2, #4294967295
 800df06:	f7f2 fe39 	bl	8000b7c <__aeabi_dcmpun>
 800df0a:	bb88      	cbnz	r0, 800df70 <_printf_float+0xcc>
 800df0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df10:	4b9a      	ldr	r3, [pc, #616]	; (800e17c <_printf_float+0x2d8>)
 800df12:	f04f 32ff 	mov.w	r2, #4294967295
 800df16:	f7f2 fe13 	bl	8000b40 <__aeabi_dcmple>
 800df1a:	bb48      	cbnz	r0, 800df70 <_printf_float+0xcc>
 800df1c:	2200      	movs	r2, #0
 800df1e:	2300      	movs	r3, #0
 800df20:	4640      	mov	r0, r8
 800df22:	4649      	mov	r1, r9
 800df24:	f7f2 fe02 	bl	8000b2c <__aeabi_dcmplt>
 800df28:	b110      	cbz	r0, 800df30 <_printf_float+0x8c>
 800df2a:	232d      	movs	r3, #45	; 0x2d
 800df2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df30:	4a93      	ldr	r2, [pc, #588]	; (800e180 <_printf_float+0x2dc>)
 800df32:	4b94      	ldr	r3, [pc, #592]	; (800e184 <_printf_float+0x2e0>)
 800df34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800df38:	bf94      	ite	ls
 800df3a:	4690      	movls	r8, r2
 800df3c:	4698      	movhi	r8, r3
 800df3e:	2303      	movs	r3, #3
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	9b05      	ldr	r3, [sp, #20]
 800df44:	f023 0304 	bic.w	r3, r3, #4
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	f04f 0900 	mov.w	r9, #0
 800df4e:	9700      	str	r7, [sp, #0]
 800df50:	4633      	mov	r3, r6
 800df52:	aa0b      	add	r2, sp, #44	; 0x2c
 800df54:	4621      	mov	r1, r4
 800df56:	4628      	mov	r0, r5
 800df58:	f000 f9da 	bl	800e310 <_printf_common>
 800df5c:	3001      	adds	r0, #1
 800df5e:	f040 8090 	bne.w	800e082 <_printf_float+0x1de>
 800df62:	f04f 30ff 	mov.w	r0, #4294967295
 800df66:	b00d      	add	sp, #52	; 0x34
 800df68:	ecbd 8b02 	vpop	{d8}
 800df6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df70:	4642      	mov	r2, r8
 800df72:	464b      	mov	r3, r9
 800df74:	4640      	mov	r0, r8
 800df76:	4649      	mov	r1, r9
 800df78:	f7f2 fe00 	bl	8000b7c <__aeabi_dcmpun>
 800df7c:	b140      	cbz	r0, 800df90 <_printf_float+0xec>
 800df7e:	464b      	mov	r3, r9
 800df80:	2b00      	cmp	r3, #0
 800df82:	bfbc      	itt	lt
 800df84:	232d      	movlt	r3, #45	; 0x2d
 800df86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df8a:	4a7f      	ldr	r2, [pc, #508]	; (800e188 <_printf_float+0x2e4>)
 800df8c:	4b7f      	ldr	r3, [pc, #508]	; (800e18c <_printf_float+0x2e8>)
 800df8e:	e7d1      	b.n	800df34 <_printf_float+0x90>
 800df90:	6863      	ldr	r3, [r4, #4]
 800df92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df96:	9206      	str	r2, [sp, #24]
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	d13f      	bne.n	800e01c <_printf_float+0x178>
 800df9c:	2306      	movs	r3, #6
 800df9e:	6063      	str	r3, [r4, #4]
 800dfa0:	9b05      	ldr	r3, [sp, #20]
 800dfa2:	6861      	ldr	r1, [r4, #4]
 800dfa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	9303      	str	r3, [sp, #12]
 800dfac:	ab0a      	add	r3, sp, #40	; 0x28
 800dfae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dfb2:	ab09      	add	r3, sp, #36	; 0x24
 800dfb4:	ec49 8b10 	vmov	d0, r8, r9
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	6022      	str	r2, [r4, #0]
 800dfbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f7ff fecf 	bl	800dd64 <__cvt>
 800dfc6:	9b06      	ldr	r3, [sp, #24]
 800dfc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfca:	2b47      	cmp	r3, #71	; 0x47
 800dfcc:	4680      	mov	r8, r0
 800dfce:	d108      	bne.n	800dfe2 <_printf_float+0x13e>
 800dfd0:	1cc8      	adds	r0, r1, #3
 800dfd2:	db02      	blt.n	800dfda <_printf_float+0x136>
 800dfd4:	6863      	ldr	r3, [r4, #4]
 800dfd6:	4299      	cmp	r1, r3
 800dfd8:	dd41      	ble.n	800e05e <_printf_float+0x1ba>
 800dfda:	f1ab 0302 	sub.w	r3, fp, #2
 800dfde:	fa5f fb83 	uxtb.w	fp, r3
 800dfe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dfe6:	d820      	bhi.n	800e02a <_printf_float+0x186>
 800dfe8:	3901      	subs	r1, #1
 800dfea:	465a      	mov	r2, fp
 800dfec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dff0:	9109      	str	r1, [sp, #36]	; 0x24
 800dff2:	f7ff ff19 	bl	800de28 <__exponent>
 800dff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dff8:	1813      	adds	r3, r2, r0
 800dffa:	2a01      	cmp	r2, #1
 800dffc:	4681      	mov	r9, r0
 800dffe:	6123      	str	r3, [r4, #16]
 800e000:	dc02      	bgt.n	800e008 <_printf_float+0x164>
 800e002:	6822      	ldr	r2, [r4, #0]
 800e004:	07d2      	lsls	r2, r2, #31
 800e006:	d501      	bpl.n	800e00c <_printf_float+0x168>
 800e008:	3301      	adds	r3, #1
 800e00a:	6123      	str	r3, [r4, #16]
 800e00c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e010:	2b00      	cmp	r3, #0
 800e012:	d09c      	beq.n	800df4e <_printf_float+0xaa>
 800e014:	232d      	movs	r3, #45	; 0x2d
 800e016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e01a:	e798      	b.n	800df4e <_printf_float+0xaa>
 800e01c:	9a06      	ldr	r2, [sp, #24]
 800e01e:	2a47      	cmp	r2, #71	; 0x47
 800e020:	d1be      	bne.n	800dfa0 <_printf_float+0xfc>
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1bc      	bne.n	800dfa0 <_printf_float+0xfc>
 800e026:	2301      	movs	r3, #1
 800e028:	e7b9      	b.n	800df9e <_printf_float+0xfa>
 800e02a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e02e:	d118      	bne.n	800e062 <_printf_float+0x1be>
 800e030:	2900      	cmp	r1, #0
 800e032:	6863      	ldr	r3, [r4, #4]
 800e034:	dd0b      	ble.n	800e04e <_printf_float+0x1aa>
 800e036:	6121      	str	r1, [r4, #16]
 800e038:	b913      	cbnz	r3, 800e040 <_printf_float+0x19c>
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	07d0      	lsls	r0, r2, #31
 800e03e:	d502      	bpl.n	800e046 <_printf_float+0x1a2>
 800e040:	3301      	adds	r3, #1
 800e042:	440b      	add	r3, r1
 800e044:	6123      	str	r3, [r4, #16]
 800e046:	65a1      	str	r1, [r4, #88]	; 0x58
 800e048:	f04f 0900 	mov.w	r9, #0
 800e04c:	e7de      	b.n	800e00c <_printf_float+0x168>
 800e04e:	b913      	cbnz	r3, 800e056 <_printf_float+0x1b2>
 800e050:	6822      	ldr	r2, [r4, #0]
 800e052:	07d2      	lsls	r2, r2, #31
 800e054:	d501      	bpl.n	800e05a <_printf_float+0x1b6>
 800e056:	3302      	adds	r3, #2
 800e058:	e7f4      	b.n	800e044 <_printf_float+0x1a0>
 800e05a:	2301      	movs	r3, #1
 800e05c:	e7f2      	b.n	800e044 <_printf_float+0x1a0>
 800e05e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e064:	4299      	cmp	r1, r3
 800e066:	db05      	blt.n	800e074 <_printf_float+0x1d0>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	6121      	str	r1, [r4, #16]
 800e06c:	07d8      	lsls	r0, r3, #31
 800e06e:	d5ea      	bpl.n	800e046 <_printf_float+0x1a2>
 800e070:	1c4b      	adds	r3, r1, #1
 800e072:	e7e7      	b.n	800e044 <_printf_float+0x1a0>
 800e074:	2900      	cmp	r1, #0
 800e076:	bfd4      	ite	le
 800e078:	f1c1 0202 	rsble	r2, r1, #2
 800e07c:	2201      	movgt	r2, #1
 800e07e:	4413      	add	r3, r2
 800e080:	e7e0      	b.n	800e044 <_printf_float+0x1a0>
 800e082:	6823      	ldr	r3, [r4, #0]
 800e084:	055a      	lsls	r2, r3, #21
 800e086:	d407      	bmi.n	800e098 <_printf_float+0x1f4>
 800e088:	6923      	ldr	r3, [r4, #16]
 800e08a:	4642      	mov	r2, r8
 800e08c:	4631      	mov	r1, r6
 800e08e:	4628      	mov	r0, r5
 800e090:	47b8      	blx	r7
 800e092:	3001      	adds	r0, #1
 800e094:	d12c      	bne.n	800e0f0 <_printf_float+0x24c>
 800e096:	e764      	b.n	800df62 <_printf_float+0xbe>
 800e098:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e09c:	f240 80e0 	bls.w	800e260 <_printf_float+0x3bc>
 800e0a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f7f2 fd36 	bl	8000b18 <__aeabi_dcmpeq>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d034      	beq.n	800e11a <_printf_float+0x276>
 800e0b0:	4a37      	ldr	r2, [pc, #220]	; (800e190 <_printf_float+0x2ec>)
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	4631      	mov	r1, r6
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	47b8      	blx	r7
 800e0ba:	3001      	adds	r0, #1
 800e0bc:	f43f af51 	beq.w	800df62 <_printf_float+0xbe>
 800e0c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	db02      	blt.n	800e0ce <_printf_float+0x22a>
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	07d8      	lsls	r0, r3, #31
 800e0cc:	d510      	bpl.n	800e0f0 <_printf_float+0x24c>
 800e0ce:	ee18 3a10 	vmov	r3, s16
 800e0d2:	4652      	mov	r2, sl
 800e0d4:	4631      	mov	r1, r6
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	47b8      	blx	r7
 800e0da:	3001      	adds	r0, #1
 800e0dc:	f43f af41 	beq.w	800df62 <_printf_float+0xbe>
 800e0e0:	f04f 0800 	mov.w	r8, #0
 800e0e4:	f104 091a 	add.w	r9, r4, #26
 800e0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	4543      	cmp	r3, r8
 800e0ee:	dc09      	bgt.n	800e104 <_printf_float+0x260>
 800e0f0:	6823      	ldr	r3, [r4, #0]
 800e0f2:	079b      	lsls	r3, r3, #30
 800e0f4:	f100 8107 	bmi.w	800e306 <_printf_float+0x462>
 800e0f8:	68e0      	ldr	r0, [r4, #12]
 800e0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0fc:	4298      	cmp	r0, r3
 800e0fe:	bfb8      	it	lt
 800e100:	4618      	movlt	r0, r3
 800e102:	e730      	b.n	800df66 <_printf_float+0xc2>
 800e104:	2301      	movs	r3, #1
 800e106:	464a      	mov	r2, r9
 800e108:	4631      	mov	r1, r6
 800e10a:	4628      	mov	r0, r5
 800e10c:	47b8      	blx	r7
 800e10e:	3001      	adds	r0, #1
 800e110:	f43f af27 	beq.w	800df62 <_printf_float+0xbe>
 800e114:	f108 0801 	add.w	r8, r8, #1
 800e118:	e7e6      	b.n	800e0e8 <_printf_float+0x244>
 800e11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	dc39      	bgt.n	800e194 <_printf_float+0x2f0>
 800e120:	4a1b      	ldr	r2, [pc, #108]	; (800e190 <_printf_float+0x2ec>)
 800e122:	2301      	movs	r3, #1
 800e124:	4631      	mov	r1, r6
 800e126:	4628      	mov	r0, r5
 800e128:	47b8      	blx	r7
 800e12a:	3001      	adds	r0, #1
 800e12c:	f43f af19 	beq.w	800df62 <_printf_float+0xbe>
 800e130:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e134:	4313      	orrs	r3, r2
 800e136:	d102      	bne.n	800e13e <_printf_float+0x29a>
 800e138:	6823      	ldr	r3, [r4, #0]
 800e13a:	07d9      	lsls	r1, r3, #31
 800e13c:	d5d8      	bpl.n	800e0f0 <_printf_float+0x24c>
 800e13e:	ee18 3a10 	vmov	r3, s16
 800e142:	4652      	mov	r2, sl
 800e144:	4631      	mov	r1, r6
 800e146:	4628      	mov	r0, r5
 800e148:	47b8      	blx	r7
 800e14a:	3001      	adds	r0, #1
 800e14c:	f43f af09 	beq.w	800df62 <_printf_float+0xbe>
 800e150:	f04f 0900 	mov.w	r9, #0
 800e154:	f104 0a1a 	add.w	sl, r4, #26
 800e158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e15a:	425b      	negs	r3, r3
 800e15c:	454b      	cmp	r3, r9
 800e15e:	dc01      	bgt.n	800e164 <_printf_float+0x2c0>
 800e160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e162:	e792      	b.n	800e08a <_printf_float+0x1e6>
 800e164:	2301      	movs	r3, #1
 800e166:	4652      	mov	r2, sl
 800e168:	4631      	mov	r1, r6
 800e16a:	4628      	mov	r0, r5
 800e16c:	47b8      	blx	r7
 800e16e:	3001      	adds	r0, #1
 800e170:	f43f aef7 	beq.w	800df62 <_printf_float+0xbe>
 800e174:	f109 0901 	add.w	r9, r9, #1
 800e178:	e7ee      	b.n	800e158 <_printf_float+0x2b4>
 800e17a:	bf00      	nop
 800e17c:	7fefffff 	.word	0x7fefffff
 800e180:	080249c8 	.word	0x080249c8
 800e184:	080249cc 	.word	0x080249cc
 800e188:	080249d0 	.word	0x080249d0
 800e18c:	080249d4 	.word	0x080249d4
 800e190:	080249d8 	.word	0x080249d8
 800e194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e198:	429a      	cmp	r2, r3
 800e19a:	bfa8      	it	ge
 800e19c:	461a      	movge	r2, r3
 800e19e:	2a00      	cmp	r2, #0
 800e1a0:	4691      	mov	r9, r2
 800e1a2:	dc37      	bgt.n	800e214 <_printf_float+0x370>
 800e1a4:	f04f 0b00 	mov.w	fp, #0
 800e1a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1ac:	f104 021a 	add.w	r2, r4, #26
 800e1b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e1b2:	9305      	str	r3, [sp, #20]
 800e1b4:	eba3 0309 	sub.w	r3, r3, r9
 800e1b8:	455b      	cmp	r3, fp
 800e1ba:	dc33      	bgt.n	800e224 <_printf_float+0x380>
 800e1bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	db3b      	blt.n	800e23c <_printf_float+0x398>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	07da      	lsls	r2, r3, #31
 800e1c8:	d438      	bmi.n	800e23c <_printf_float+0x398>
 800e1ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e1ce:	eba2 0903 	sub.w	r9, r2, r3
 800e1d2:	9b05      	ldr	r3, [sp, #20]
 800e1d4:	1ad2      	subs	r2, r2, r3
 800e1d6:	4591      	cmp	r9, r2
 800e1d8:	bfa8      	it	ge
 800e1da:	4691      	movge	r9, r2
 800e1dc:	f1b9 0f00 	cmp.w	r9, #0
 800e1e0:	dc35      	bgt.n	800e24e <_printf_float+0x3aa>
 800e1e2:	f04f 0800 	mov.w	r8, #0
 800e1e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1ea:	f104 0a1a 	add.w	sl, r4, #26
 800e1ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1f2:	1a9b      	subs	r3, r3, r2
 800e1f4:	eba3 0309 	sub.w	r3, r3, r9
 800e1f8:	4543      	cmp	r3, r8
 800e1fa:	f77f af79 	ble.w	800e0f0 <_printf_float+0x24c>
 800e1fe:	2301      	movs	r3, #1
 800e200:	4652      	mov	r2, sl
 800e202:	4631      	mov	r1, r6
 800e204:	4628      	mov	r0, r5
 800e206:	47b8      	blx	r7
 800e208:	3001      	adds	r0, #1
 800e20a:	f43f aeaa 	beq.w	800df62 <_printf_float+0xbe>
 800e20e:	f108 0801 	add.w	r8, r8, #1
 800e212:	e7ec      	b.n	800e1ee <_printf_float+0x34a>
 800e214:	4613      	mov	r3, r2
 800e216:	4631      	mov	r1, r6
 800e218:	4642      	mov	r2, r8
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b8      	blx	r7
 800e21e:	3001      	adds	r0, #1
 800e220:	d1c0      	bne.n	800e1a4 <_printf_float+0x300>
 800e222:	e69e      	b.n	800df62 <_printf_float+0xbe>
 800e224:	2301      	movs	r3, #1
 800e226:	4631      	mov	r1, r6
 800e228:	4628      	mov	r0, r5
 800e22a:	9205      	str	r2, [sp, #20]
 800e22c:	47b8      	blx	r7
 800e22e:	3001      	adds	r0, #1
 800e230:	f43f ae97 	beq.w	800df62 <_printf_float+0xbe>
 800e234:	9a05      	ldr	r2, [sp, #20]
 800e236:	f10b 0b01 	add.w	fp, fp, #1
 800e23a:	e7b9      	b.n	800e1b0 <_printf_float+0x30c>
 800e23c:	ee18 3a10 	vmov	r3, s16
 800e240:	4652      	mov	r2, sl
 800e242:	4631      	mov	r1, r6
 800e244:	4628      	mov	r0, r5
 800e246:	47b8      	blx	r7
 800e248:	3001      	adds	r0, #1
 800e24a:	d1be      	bne.n	800e1ca <_printf_float+0x326>
 800e24c:	e689      	b.n	800df62 <_printf_float+0xbe>
 800e24e:	9a05      	ldr	r2, [sp, #20]
 800e250:	464b      	mov	r3, r9
 800e252:	4442      	add	r2, r8
 800e254:	4631      	mov	r1, r6
 800e256:	4628      	mov	r0, r5
 800e258:	47b8      	blx	r7
 800e25a:	3001      	adds	r0, #1
 800e25c:	d1c1      	bne.n	800e1e2 <_printf_float+0x33e>
 800e25e:	e680      	b.n	800df62 <_printf_float+0xbe>
 800e260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e262:	2a01      	cmp	r2, #1
 800e264:	dc01      	bgt.n	800e26a <_printf_float+0x3c6>
 800e266:	07db      	lsls	r3, r3, #31
 800e268:	d53a      	bpl.n	800e2e0 <_printf_float+0x43c>
 800e26a:	2301      	movs	r3, #1
 800e26c:	4642      	mov	r2, r8
 800e26e:	4631      	mov	r1, r6
 800e270:	4628      	mov	r0, r5
 800e272:	47b8      	blx	r7
 800e274:	3001      	adds	r0, #1
 800e276:	f43f ae74 	beq.w	800df62 <_printf_float+0xbe>
 800e27a:	ee18 3a10 	vmov	r3, s16
 800e27e:	4652      	mov	r2, sl
 800e280:	4631      	mov	r1, r6
 800e282:	4628      	mov	r0, r5
 800e284:	47b8      	blx	r7
 800e286:	3001      	adds	r0, #1
 800e288:	f43f ae6b 	beq.w	800df62 <_printf_float+0xbe>
 800e28c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e290:	2200      	movs	r2, #0
 800e292:	2300      	movs	r3, #0
 800e294:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e298:	f7f2 fc3e 	bl	8000b18 <__aeabi_dcmpeq>
 800e29c:	b9d8      	cbnz	r0, 800e2d6 <_printf_float+0x432>
 800e29e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e2a2:	f108 0201 	add.w	r2, r8, #1
 800e2a6:	4631      	mov	r1, r6
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	47b8      	blx	r7
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	d10e      	bne.n	800e2ce <_printf_float+0x42a>
 800e2b0:	e657      	b.n	800df62 <_printf_float+0xbe>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	4652      	mov	r2, sl
 800e2b6:	4631      	mov	r1, r6
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	47b8      	blx	r7
 800e2bc:	3001      	adds	r0, #1
 800e2be:	f43f ae50 	beq.w	800df62 <_printf_float+0xbe>
 800e2c2:	f108 0801 	add.w	r8, r8, #1
 800e2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	4543      	cmp	r3, r8
 800e2cc:	dcf1      	bgt.n	800e2b2 <_printf_float+0x40e>
 800e2ce:	464b      	mov	r3, r9
 800e2d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e2d4:	e6da      	b.n	800e08c <_printf_float+0x1e8>
 800e2d6:	f04f 0800 	mov.w	r8, #0
 800e2da:	f104 0a1a 	add.w	sl, r4, #26
 800e2de:	e7f2      	b.n	800e2c6 <_printf_float+0x422>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	4642      	mov	r2, r8
 800e2e4:	e7df      	b.n	800e2a6 <_printf_float+0x402>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	464a      	mov	r2, r9
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	47b8      	blx	r7
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	f43f ae36 	beq.w	800df62 <_printf_float+0xbe>
 800e2f6:	f108 0801 	add.w	r8, r8, #1
 800e2fa:	68e3      	ldr	r3, [r4, #12]
 800e2fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2fe:	1a5b      	subs	r3, r3, r1
 800e300:	4543      	cmp	r3, r8
 800e302:	dcf0      	bgt.n	800e2e6 <_printf_float+0x442>
 800e304:	e6f8      	b.n	800e0f8 <_printf_float+0x254>
 800e306:	f04f 0800 	mov.w	r8, #0
 800e30a:	f104 0919 	add.w	r9, r4, #25
 800e30e:	e7f4      	b.n	800e2fa <_printf_float+0x456>

0800e310 <_printf_common>:
 800e310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e314:	4616      	mov	r6, r2
 800e316:	4699      	mov	r9, r3
 800e318:	688a      	ldr	r2, [r1, #8]
 800e31a:	690b      	ldr	r3, [r1, #16]
 800e31c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e320:	4293      	cmp	r3, r2
 800e322:	bfb8      	it	lt
 800e324:	4613      	movlt	r3, r2
 800e326:	6033      	str	r3, [r6, #0]
 800e328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e32c:	4607      	mov	r7, r0
 800e32e:	460c      	mov	r4, r1
 800e330:	b10a      	cbz	r2, 800e336 <_printf_common+0x26>
 800e332:	3301      	adds	r3, #1
 800e334:	6033      	str	r3, [r6, #0]
 800e336:	6823      	ldr	r3, [r4, #0]
 800e338:	0699      	lsls	r1, r3, #26
 800e33a:	bf42      	ittt	mi
 800e33c:	6833      	ldrmi	r3, [r6, #0]
 800e33e:	3302      	addmi	r3, #2
 800e340:	6033      	strmi	r3, [r6, #0]
 800e342:	6825      	ldr	r5, [r4, #0]
 800e344:	f015 0506 	ands.w	r5, r5, #6
 800e348:	d106      	bne.n	800e358 <_printf_common+0x48>
 800e34a:	f104 0a19 	add.w	sl, r4, #25
 800e34e:	68e3      	ldr	r3, [r4, #12]
 800e350:	6832      	ldr	r2, [r6, #0]
 800e352:	1a9b      	subs	r3, r3, r2
 800e354:	42ab      	cmp	r3, r5
 800e356:	dc26      	bgt.n	800e3a6 <_printf_common+0x96>
 800e358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e35c:	1e13      	subs	r3, r2, #0
 800e35e:	6822      	ldr	r2, [r4, #0]
 800e360:	bf18      	it	ne
 800e362:	2301      	movne	r3, #1
 800e364:	0692      	lsls	r2, r2, #26
 800e366:	d42b      	bmi.n	800e3c0 <_printf_common+0xb0>
 800e368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e36c:	4649      	mov	r1, r9
 800e36e:	4638      	mov	r0, r7
 800e370:	47c0      	blx	r8
 800e372:	3001      	adds	r0, #1
 800e374:	d01e      	beq.n	800e3b4 <_printf_common+0xa4>
 800e376:	6823      	ldr	r3, [r4, #0]
 800e378:	6922      	ldr	r2, [r4, #16]
 800e37a:	f003 0306 	and.w	r3, r3, #6
 800e37e:	2b04      	cmp	r3, #4
 800e380:	bf02      	ittt	eq
 800e382:	68e5      	ldreq	r5, [r4, #12]
 800e384:	6833      	ldreq	r3, [r6, #0]
 800e386:	1aed      	subeq	r5, r5, r3
 800e388:	68a3      	ldr	r3, [r4, #8]
 800e38a:	bf0c      	ite	eq
 800e38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e390:	2500      	movne	r5, #0
 800e392:	4293      	cmp	r3, r2
 800e394:	bfc4      	itt	gt
 800e396:	1a9b      	subgt	r3, r3, r2
 800e398:	18ed      	addgt	r5, r5, r3
 800e39a:	2600      	movs	r6, #0
 800e39c:	341a      	adds	r4, #26
 800e39e:	42b5      	cmp	r5, r6
 800e3a0:	d11a      	bne.n	800e3d8 <_printf_common+0xc8>
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e008      	b.n	800e3b8 <_printf_common+0xa8>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	4652      	mov	r2, sl
 800e3aa:	4649      	mov	r1, r9
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	47c0      	blx	r8
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	d103      	bne.n	800e3bc <_printf_common+0xac>
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3bc:	3501      	adds	r5, #1
 800e3be:	e7c6      	b.n	800e34e <_printf_common+0x3e>
 800e3c0:	18e1      	adds	r1, r4, r3
 800e3c2:	1c5a      	adds	r2, r3, #1
 800e3c4:	2030      	movs	r0, #48	; 0x30
 800e3c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e3ca:	4422      	add	r2, r4
 800e3cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3d4:	3302      	adds	r3, #2
 800e3d6:	e7c7      	b.n	800e368 <_printf_common+0x58>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	4622      	mov	r2, r4
 800e3dc:	4649      	mov	r1, r9
 800e3de:	4638      	mov	r0, r7
 800e3e0:	47c0      	blx	r8
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	d0e6      	beq.n	800e3b4 <_printf_common+0xa4>
 800e3e6:	3601      	adds	r6, #1
 800e3e8:	e7d9      	b.n	800e39e <_printf_common+0x8e>
	...

0800e3ec <_printf_i>:
 800e3ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f0:	7e0f      	ldrb	r7, [r1, #24]
 800e3f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3f4:	2f78      	cmp	r7, #120	; 0x78
 800e3f6:	4691      	mov	r9, r2
 800e3f8:	4680      	mov	r8, r0
 800e3fa:	460c      	mov	r4, r1
 800e3fc:	469a      	mov	sl, r3
 800e3fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e402:	d807      	bhi.n	800e414 <_printf_i+0x28>
 800e404:	2f62      	cmp	r7, #98	; 0x62
 800e406:	d80a      	bhi.n	800e41e <_printf_i+0x32>
 800e408:	2f00      	cmp	r7, #0
 800e40a:	f000 80d4 	beq.w	800e5b6 <_printf_i+0x1ca>
 800e40e:	2f58      	cmp	r7, #88	; 0x58
 800e410:	f000 80c0 	beq.w	800e594 <_printf_i+0x1a8>
 800e414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e41c:	e03a      	b.n	800e494 <_printf_i+0xa8>
 800e41e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e422:	2b15      	cmp	r3, #21
 800e424:	d8f6      	bhi.n	800e414 <_printf_i+0x28>
 800e426:	a101      	add	r1, pc, #4	; (adr r1, 800e42c <_printf_i+0x40>)
 800e428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e42c:	0800e485 	.word	0x0800e485
 800e430:	0800e499 	.word	0x0800e499
 800e434:	0800e415 	.word	0x0800e415
 800e438:	0800e415 	.word	0x0800e415
 800e43c:	0800e415 	.word	0x0800e415
 800e440:	0800e415 	.word	0x0800e415
 800e444:	0800e499 	.word	0x0800e499
 800e448:	0800e415 	.word	0x0800e415
 800e44c:	0800e415 	.word	0x0800e415
 800e450:	0800e415 	.word	0x0800e415
 800e454:	0800e415 	.word	0x0800e415
 800e458:	0800e59d 	.word	0x0800e59d
 800e45c:	0800e4c5 	.word	0x0800e4c5
 800e460:	0800e557 	.word	0x0800e557
 800e464:	0800e415 	.word	0x0800e415
 800e468:	0800e415 	.word	0x0800e415
 800e46c:	0800e5bf 	.word	0x0800e5bf
 800e470:	0800e415 	.word	0x0800e415
 800e474:	0800e4c5 	.word	0x0800e4c5
 800e478:	0800e415 	.word	0x0800e415
 800e47c:	0800e415 	.word	0x0800e415
 800e480:	0800e55f 	.word	0x0800e55f
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	1d1a      	adds	r2, r3, #4
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	602a      	str	r2, [r5, #0]
 800e48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e494:	2301      	movs	r3, #1
 800e496:	e09f      	b.n	800e5d8 <_printf_i+0x1ec>
 800e498:	6820      	ldr	r0, [r4, #0]
 800e49a:	682b      	ldr	r3, [r5, #0]
 800e49c:	0607      	lsls	r7, r0, #24
 800e49e:	f103 0104 	add.w	r1, r3, #4
 800e4a2:	6029      	str	r1, [r5, #0]
 800e4a4:	d501      	bpl.n	800e4aa <_printf_i+0xbe>
 800e4a6:	681e      	ldr	r6, [r3, #0]
 800e4a8:	e003      	b.n	800e4b2 <_printf_i+0xc6>
 800e4aa:	0646      	lsls	r6, r0, #25
 800e4ac:	d5fb      	bpl.n	800e4a6 <_printf_i+0xba>
 800e4ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e4b2:	2e00      	cmp	r6, #0
 800e4b4:	da03      	bge.n	800e4be <_printf_i+0xd2>
 800e4b6:	232d      	movs	r3, #45	; 0x2d
 800e4b8:	4276      	negs	r6, r6
 800e4ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4be:	485a      	ldr	r0, [pc, #360]	; (800e628 <_printf_i+0x23c>)
 800e4c0:	230a      	movs	r3, #10
 800e4c2:	e012      	b.n	800e4ea <_printf_i+0xfe>
 800e4c4:	682b      	ldr	r3, [r5, #0]
 800e4c6:	6820      	ldr	r0, [r4, #0]
 800e4c8:	1d19      	adds	r1, r3, #4
 800e4ca:	6029      	str	r1, [r5, #0]
 800e4cc:	0605      	lsls	r5, r0, #24
 800e4ce:	d501      	bpl.n	800e4d4 <_printf_i+0xe8>
 800e4d0:	681e      	ldr	r6, [r3, #0]
 800e4d2:	e002      	b.n	800e4da <_printf_i+0xee>
 800e4d4:	0641      	lsls	r1, r0, #25
 800e4d6:	d5fb      	bpl.n	800e4d0 <_printf_i+0xe4>
 800e4d8:	881e      	ldrh	r6, [r3, #0]
 800e4da:	4853      	ldr	r0, [pc, #332]	; (800e628 <_printf_i+0x23c>)
 800e4dc:	2f6f      	cmp	r7, #111	; 0x6f
 800e4de:	bf0c      	ite	eq
 800e4e0:	2308      	moveq	r3, #8
 800e4e2:	230a      	movne	r3, #10
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4ea:	6865      	ldr	r5, [r4, #4]
 800e4ec:	60a5      	str	r5, [r4, #8]
 800e4ee:	2d00      	cmp	r5, #0
 800e4f0:	bfa2      	ittt	ge
 800e4f2:	6821      	ldrge	r1, [r4, #0]
 800e4f4:	f021 0104 	bicge.w	r1, r1, #4
 800e4f8:	6021      	strge	r1, [r4, #0]
 800e4fa:	b90e      	cbnz	r6, 800e500 <_printf_i+0x114>
 800e4fc:	2d00      	cmp	r5, #0
 800e4fe:	d04b      	beq.n	800e598 <_printf_i+0x1ac>
 800e500:	4615      	mov	r5, r2
 800e502:	fbb6 f1f3 	udiv	r1, r6, r3
 800e506:	fb03 6711 	mls	r7, r3, r1, r6
 800e50a:	5dc7      	ldrb	r7, [r0, r7]
 800e50c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e510:	4637      	mov	r7, r6
 800e512:	42bb      	cmp	r3, r7
 800e514:	460e      	mov	r6, r1
 800e516:	d9f4      	bls.n	800e502 <_printf_i+0x116>
 800e518:	2b08      	cmp	r3, #8
 800e51a:	d10b      	bne.n	800e534 <_printf_i+0x148>
 800e51c:	6823      	ldr	r3, [r4, #0]
 800e51e:	07de      	lsls	r6, r3, #31
 800e520:	d508      	bpl.n	800e534 <_printf_i+0x148>
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	6861      	ldr	r1, [r4, #4]
 800e526:	4299      	cmp	r1, r3
 800e528:	bfde      	ittt	le
 800e52a:	2330      	movle	r3, #48	; 0x30
 800e52c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e530:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e534:	1b52      	subs	r2, r2, r5
 800e536:	6122      	str	r2, [r4, #16]
 800e538:	f8cd a000 	str.w	sl, [sp]
 800e53c:	464b      	mov	r3, r9
 800e53e:	aa03      	add	r2, sp, #12
 800e540:	4621      	mov	r1, r4
 800e542:	4640      	mov	r0, r8
 800e544:	f7ff fee4 	bl	800e310 <_printf_common>
 800e548:	3001      	adds	r0, #1
 800e54a:	d14a      	bne.n	800e5e2 <_printf_i+0x1f6>
 800e54c:	f04f 30ff 	mov.w	r0, #4294967295
 800e550:	b004      	add	sp, #16
 800e552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	f043 0320 	orr.w	r3, r3, #32
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	4833      	ldr	r0, [pc, #204]	; (800e62c <_printf_i+0x240>)
 800e560:	2778      	movs	r7, #120	; 0x78
 800e562:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e566:	6823      	ldr	r3, [r4, #0]
 800e568:	6829      	ldr	r1, [r5, #0]
 800e56a:	061f      	lsls	r7, r3, #24
 800e56c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e570:	d402      	bmi.n	800e578 <_printf_i+0x18c>
 800e572:	065f      	lsls	r7, r3, #25
 800e574:	bf48      	it	mi
 800e576:	b2b6      	uxthmi	r6, r6
 800e578:	07df      	lsls	r7, r3, #31
 800e57a:	bf48      	it	mi
 800e57c:	f043 0320 	orrmi.w	r3, r3, #32
 800e580:	6029      	str	r1, [r5, #0]
 800e582:	bf48      	it	mi
 800e584:	6023      	strmi	r3, [r4, #0]
 800e586:	b91e      	cbnz	r6, 800e590 <_printf_i+0x1a4>
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	f023 0320 	bic.w	r3, r3, #32
 800e58e:	6023      	str	r3, [r4, #0]
 800e590:	2310      	movs	r3, #16
 800e592:	e7a7      	b.n	800e4e4 <_printf_i+0xf8>
 800e594:	4824      	ldr	r0, [pc, #144]	; (800e628 <_printf_i+0x23c>)
 800e596:	e7e4      	b.n	800e562 <_printf_i+0x176>
 800e598:	4615      	mov	r5, r2
 800e59a:	e7bd      	b.n	800e518 <_printf_i+0x12c>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	6826      	ldr	r6, [r4, #0]
 800e5a0:	6961      	ldr	r1, [r4, #20]
 800e5a2:	1d18      	adds	r0, r3, #4
 800e5a4:	6028      	str	r0, [r5, #0]
 800e5a6:	0635      	lsls	r5, r6, #24
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	d501      	bpl.n	800e5b0 <_printf_i+0x1c4>
 800e5ac:	6019      	str	r1, [r3, #0]
 800e5ae:	e002      	b.n	800e5b6 <_printf_i+0x1ca>
 800e5b0:	0670      	lsls	r0, r6, #25
 800e5b2:	d5fb      	bpl.n	800e5ac <_printf_i+0x1c0>
 800e5b4:	8019      	strh	r1, [r3, #0]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	6123      	str	r3, [r4, #16]
 800e5ba:	4615      	mov	r5, r2
 800e5bc:	e7bc      	b.n	800e538 <_printf_i+0x14c>
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	1d1a      	adds	r2, r3, #4
 800e5c2:	602a      	str	r2, [r5, #0]
 800e5c4:	681d      	ldr	r5, [r3, #0]
 800e5c6:	6862      	ldr	r2, [r4, #4]
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f7f1 fe28 	bl	8000220 <memchr>
 800e5d0:	b108      	cbz	r0, 800e5d6 <_printf_i+0x1ea>
 800e5d2:	1b40      	subs	r0, r0, r5
 800e5d4:	6060      	str	r0, [r4, #4]
 800e5d6:	6863      	ldr	r3, [r4, #4]
 800e5d8:	6123      	str	r3, [r4, #16]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5e0:	e7aa      	b.n	800e538 <_printf_i+0x14c>
 800e5e2:	6923      	ldr	r3, [r4, #16]
 800e5e4:	462a      	mov	r2, r5
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	4640      	mov	r0, r8
 800e5ea:	47d0      	blx	sl
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d0ad      	beq.n	800e54c <_printf_i+0x160>
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	079b      	lsls	r3, r3, #30
 800e5f4:	d413      	bmi.n	800e61e <_printf_i+0x232>
 800e5f6:	68e0      	ldr	r0, [r4, #12]
 800e5f8:	9b03      	ldr	r3, [sp, #12]
 800e5fa:	4298      	cmp	r0, r3
 800e5fc:	bfb8      	it	lt
 800e5fe:	4618      	movlt	r0, r3
 800e600:	e7a6      	b.n	800e550 <_printf_i+0x164>
 800e602:	2301      	movs	r3, #1
 800e604:	4632      	mov	r2, r6
 800e606:	4649      	mov	r1, r9
 800e608:	4640      	mov	r0, r8
 800e60a:	47d0      	blx	sl
 800e60c:	3001      	adds	r0, #1
 800e60e:	d09d      	beq.n	800e54c <_printf_i+0x160>
 800e610:	3501      	adds	r5, #1
 800e612:	68e3      	ldr	r3, [r4, #12]
 800e614:	9903      	ldr	r1, [sp, #12]
 800e616:	1a5b      	subs	r3, r3, r1
 800e618:	42ab      	cmp	r3, r5
 800e61a:	dcf2      	bgt.n	800e602 <_printf_i+0x216>
 800e61c:	e7eb      	b.n	800e5f6 <_printf_i+0x20a>
 800e61e:	2500      	movs	r5, #0
 800e620:	f104 0619 	add.w	r6, r4, #25
 800e624:	e7f5      	b.n	800e612 <_printf_i+0x226>
 800e626:	bf00      	nop
 800e628:	080249da 	.word	0x080249da
 800e62c:	080249eb 	.word	0x080249eb

0800e630 <std>:
 800e630:	2300      	movs	r3, #0
 800e632:	b510      	push	{r4, lr}
 800e634:	4604      	mov	r4, r0
 800e636:	e9c0 3300 	strd	r3, r3, [r0]
 800e63a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e63e:	6083      	str	r3, [r0, #8]
 800e640:	8181      	strh	r1, [r0, #12]
 800e642:	6643      	str	r3, [r0, #100]	; 0x64
 800e644:	81c2      	strh	r2, [r0, #14]
 800e646:	6183      	str	r3, [r0, #24]
 800e648:	4619      	mov	r1, r3
 800e64a:	2208      	movs	r2, #8
 800e64c:	305c      	adds	r0, #92	; 0x5c
 800e64e:	f000 f8f4 	bl	800e83a <memset>
 800e652:	4b0d      	ldr	r3, [pc, #52]	; (800e688 <std+0x58>)
 800e654:	6263      	str	r3, [r4, #36]	; 0x24
 800e656:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <std+0x5c>)
 800e658:	62a3      	str	r3, [r4, #40]	; 0x28
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <std+0x60>)
 800e65c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e65e:	4b0d      	ldr	r3, [pc, #52]	; (800e694 <std+0x64>)
 800e660:	6323      	str	r3, [r4, #48]	; 0x30
 800e662:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <std+0x68>)
 800e664:	6224      	str	r4, [r4, #32]
 800e666:	429c      	cmp	r4, r3
 800e668:	d006      	beq.n	800e678 <std+0x48>
 800e66a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e66e:	4294      	cmp	r4, r2
 800e670:	d002      	beq.n	800e678 <std+0x48>
 800e672:	33d0      	adds	r3, #208	; 0xd0
 800e674:	429c      	cmp	r4, r3
 800e676:	d105      	bne.n	800e684 <std+0x54>
 800e678:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e680:	f000 b958 	b.w	800e934 <__retarget_lock_init_recursive>
 800e684:	bd10      	pop	{r4, pc}
 800e686:	bf00      	nop
 800e688:	0800e7b5 	.word	0x0800e7b5
 800e68c:	0800e7d7 	.word	0x0800e7d7
 800e690:	0800e80f 	.word	0x0800e80f
 800e694:	0800e833 	.word	0x0800e833
 800e698:	2001b6e0 	.word	0x2001b6e0

0800e69c <stdio_exit_handler>:
 800e69c:	4a02      	ldr	r2, [pc, #8]	; (800e6a8 <stdio_exit_handler+0xc>)
 800e69e:	4903      	ldr	r1, [pc, #12]	; (800e6ac <stdio_exit_handler+0x10>)
 800e6a0:	4803      	ldr	r0, [pc, #12]	; (800e6b0 <stdio_exit_handler+0x14>)
 800e6a2:	f000 b869 	b.w	800e778 <_fwalk_sglue>
 800e6a6:	bf00      	nop
 800e6a8:	20007878 	.word	0x20007878
 800e6ac:	08010039 	.word	0x08010039
 800e6b0:	20007884 	.word	0x20007884

0800e6b4 <cleanup_stdio>:
 800e6b4:	6841      	ldr	r1, [r0, #4]
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	; (800e6e8 <cleanup_stdio+0x34>)
 800e6b8:	4299      	cmp	r1, r3
 800e6ba:	b510      	push	{r4, lr}
 800e6bc:	4604      	mov	r4, r0
 800e6be:	d001      	beq.n	800e6c4 <cleanup_stdio+0x10>
 800e6c0:	f001 fcba 	bl	8010038 <_fflush_r>
 800e6c4:	68a1      	ldr	r1, [r4, #8]
 800e6c6:	4b09      	ldr	r3, [pc, #36]	; (800e6ec <cleanup_stdio+0x38>)
 800e6c8:	4299      	cmp	r1, r3
 800e6ca:	d002      	beq.n	800e6d2 <cleanup_stdio+0x1e>
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f001 fcb3 	bl	8010038 <_fflush_r>
 800e6d2:	68e1      	ldr	r1, [r4, #12]
 800e6d4:	4b06      	ldr	r3, [pc, #24]	; (800e6f0 <cleanup_stdio+0x3c>)
 800e6d6:	4299      	cmp	r1, r3
 800e6d8:	d004      	beq.n	800e6e4 <cleanup_stdio+0x30>
 800e6da:	4620      	mov	r0, r4
 800e6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6e0:	f001 bcaa 	b.w	8010038 <_fflush_r>
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	bf00      	nop
 800e6e8:	2001b6e0 	.word	0x2001b6e0
 800e6ec:	2001b748 	.word	0x2001b748
 800e6f0:	2001b7b0 	.word	0x2001b7b0

0800e6f4 <global_stdio_init.part.0>:
 800e6f4:	b510      	push	{r4, lr}
 800e6f6:	4b0b      	ldr	r3, [pc, #44]	; (800e724 <global_stdio_init.part.0+0x30>)
 800e6f8:	4c0b      	ldr	r4, [pc, #44]	; (800e728 <global_stdio_init.part.0+0x34>)
 800e6fa:	4a0c      	ldr	r2, [pc, #48]	; (800e72c <global_stdio_init.part.0+0x38>)
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	4620      	mov	r0, r4
 800e700:	2200      	movs	r2, #0
 800e702:	2104      	movs	r1, #4
 800e704:	f7ff ff94 	bl	800e630 <std>
 800e708:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e70c:	2201      	movs	r2, #1
 800e70e:	2109      	movs	r1, #9
 800e710:	f7ff ff8e 	bl	800e630 <std>
 800e714:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e718:	2202      	movs	r2, #2
 800e71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e71e:	2112      	movs	r1, #18
 800e720:	f7ff bf86 	b.w	800e630 <std>
 800e724:	2001b818 	.word	0x2001b818
 800e728:	2001b6e0 	.word	0x2001b6e0
 800e72c:	0800e69d 	.word	0x0800e69d

0800e730 <__sfp_lock_acquire>:
 800e730:	4801      	ldr	r0, [pc, #4]	; (800e738 <__sfp_lock_acquire+0x8>)
 800e732:	f000 b900 	b.w	800e936 <__retarget_lock_acquire_recursive>
 800e736:	bf00      	nop
 800e738:	2001b821 	.word	0x2001b821

0800e73c <__sfp_lock_release>:
 800e73c:	4801      	ldr	r0, [pc, #4]	; (800e744 <__sfp_lock_release+0x8>)
 800e73e:	f000 b8fb 	b.w	800e938 <__retarget_lock_release_recursive>
 800e742:	bf00      	nop
 800e744:	2001b821 	.word	0x2001b821

0800e748 <__sinit>:
 800e748:	b510      	push	{r4, lr}
 800e74a:	4604      	mov	r4, r0
 800e74c:	f7ff fff0 	bl	800e730 <__sfp_lock_acquire>
 800e750:	6a23      	ldr	r3, [r4, #32]
 800e752:	b11b      	cbz	r3, 800e75c <__sinit+0x14>
 800e754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e758:	f7ff bff0 	b.w	800e73c <__sfp_lock_release>
 800e75c:	4b04      	ldr	r3, [pc, #16]	; (800e770 <__sinit+0x28>)
 800e75e:	6223      	str	r3, [r4, #32]
 800e760:	4b04      	ldr	r3, [pc, #16]	; (800e774 <__sinit+0x2c>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1f5      	bne.n	800e754 <__sinit+0xc>
 800e768:	f7ff ffc4 	bl	800e6f4 <global_stdio_init.part.0>
 800e76c:	e7f2      	b.n	800e754 <__sinit+0xc>
 800e76e:	bf00      	nop
 800e770:	0800e6b5 	.word	0x0800e6b5
 800e774:	2001b818 	.word	0x2001b818

0800e778 <_fwalk_sglue>:
 800e778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e77c:	4607      	mov	r7, r0
 800e77e:	4688      	mov	r8, r1
 800e780:	4614      	mov	r4, r2
 800e782:	2600      	movs	r6, #0
 800e784:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e788:	f1b9 0901 	subs.w	r9, r9, #1
 800e78c:	d505      	bpl.n	800e79a <_fwalk_sglue+0x22>
 800e78e:	6824      	ldr	r4, [r4, #0]
 800e790:	2c00      	cmp	r4, #0
 800e792:	d1f7      	bne.n	800e784 <_fwalk_sglue+0xc>
 800e794:	4630      	mov	r0, r6
 800e796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d907      	bls.n	800e7b0 <_fwalk_sglue+0x38>
 800e7a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	d003      	beq.n	800e7b0 <_fwalk_sglue+0x38>
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	47c0      	blx	r8
 800e7ae:	4306      	orrs	r6, r0
 800e7b0:	3568      	adds	r5, #104	; 0x68
 800e7b2:	e7e9      	b.n	800e788 <_fwalk_sglue+0x10>

0800e7b4 <__sread>:
 800e7b4:	b510      	push	{r4, lr}
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7bc:	f000 f86c 	bl	800e898 <_read_r>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	bfab      	itete	ge
 800e7c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7c6:	89a3      	ldrhlt	r3, [r4, #12]
 800e7c8:	181b      	addge	r3, r3, r0
 800e7ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7ce:	bfac      	ite	ge
 800e7d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7d2:	81a3      	strhlt	r3, [r4, #12]
 800e7d4:	bd10      	pop	{r4, pc}

0800e7d6 <__swrite>:
 800e7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7da:	461f      	mov	r7, r3
 800e7dc:	898b      	ldrh	r3, [r1, #12]
 800e7de:	05db      	lsls	r3, r3, #23
 800e7e0:	4605      	mov	r5, r0
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	4616      	mov	r6, r2
 800e7e6:	d505      	bpl.n	800e7f4 <__swrite+0x1e>
 800e7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f000 f840 	bl	800e874 <_lseek_r>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7fe:	81a3      	strh	r3, [r4, #12]
 800e800:	4632      	mov	r2, r6
 800e802:	463b      	mov	r3, r7
 800e804:	4628      	mov	r0, r5
 800e806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e80a:	f000 b857 	b.w	800e8bc <_write_r>

0800e80e <__sseek>:
 800e80e:	b510      	push	{r4, lr}
 800e810:	460c      	mov	r4, r1
 800e812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e816:	f000 f82d 	bl	800e874 <_lseek_r>
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	bf15      	itete	ne
 800e820:	6560      	strne	r0, [r4, #84]	; 0x54
 800e822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e82a:	81a3      	strheq	r3, [r4, #12]
 800e82c:	bf18      	it	ne
 800e82e:	81a3      	strhne	r3, [r4, #12]
 800e830:	bd10      	pop	{r4, pc}

0800e832 <__sclose>:
 800e832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e836:	f000 b80d 	b.w	800e854 <_close_r>

0800e83a <memset>:
 800e83a:	4402      	add	r2, r0
 800e83c:	4603      	mov	r3, r0
 800e83e:	4293      	cmp	r3, r2
 800e840:	d100      	bne.n	800e844 <memset+0xa>
 800e842:	4770      	bx	lr
 800e844:	f803 1b01 	strb.w	r1, [r3], #1
 800e848:	e7f9      	b.n	800e83e <memset+0x4>
	...

0800e84c <_localeconv_r>:
 800e84c:	4800      	ldr	r0, [pc, #0]	; (800e850 <_localeconv_r+0x4>)
 800e84e:	4770      	bx	lr
 800e850:	200079c4 	.word	0x200079c4

0800e854 <_close_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	4d06      	ldr	r5, [pc, #24]	; (800e870 <_close_r+0x1c>)
 800e858:	2300      	movs	r3, #0
 800e85a:	4604      	mov	r4, r0
 800e85c:	4608      	mov	r0, r1
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	f7f8 fe1f 	bl	80074a2 <_close>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_close_r+0x1a>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_close_r+0x1a>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	2001b81c 	.word	0x2001b81c

0800e874 <_lseek_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4d07      	ldr	r5, [pc, #28]	; (800e894 <_lseek_r+0x20>)
 800e878:	4604      	mov	r4, r0
 800e87a:	4608      	mov	r0, r1
 800e87c:	4611      	mov	r1, r2
 800e87e:	2200      	movs	r2, #0
 800e880:	602a      	str	r2, [r5, #0]
 800e882:	461a      	mov	r2, r3
 800e884:	f7f8 fe34 	bl	80074f0 <_lseek>
 800e888:	1c43      	adds	r3, r0, #1
 800e88a:	d102      	bne.n	800e892 <_lseek_r+0x1e>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	b103      	cbz	r3, 800e892 <_lseek_r+0x1e>
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	bd38      	pop	{r3, r4, r5, pc}
 800e894:	2001b81c 	.word	0x2001b81c

0800e898 <_read_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4d07      	ldr	r5, [pc, #28]	; (800e8b8 <_read_r+0x20>)
 800e89c:	4604      	mov	r4, r0
 800e89e:	4608      	mov	r0, r1
 800e8a0:	4611      	mov	r1, r2
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	602a      	str	r2, [r5, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	f7f8 fdc2 	bl	8007430 <_read>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d102      	bne.n	800e8b6 <_read_r+0x1e>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	b103      	cbz	r3, 800e8b6 <_read_r+0x1e>
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	2001b81c 	.word	0x2001b81c

0800e8bc <_write_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d07      	ldr	r5, [pc, #28]	; (800e8dc <_write_r+0x20>)
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	4608      	mov	r0, r1
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	602a      	str	r2, [r5, #0]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f7f8 fdcd 	bl	800746a <_write>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	d102      	bne.n	800e8da <_write_r+0x1e>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	b103      	cbz	r3, 800e8da <_write_r+0x1e>
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	bd38      	pop	{r3, r4, r5, pc}
 800e8dc:	2001b81c 	.word	0x2001b81c

0800e8e0 <__errno>:
 800e8e0:	4b01      	ldr	r3, [pc, #4]	; (800e8e8 <__errno+0x8>)
 800e8e2:	6818      	ldr	r0, [r3, #0]
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	200078d0 	.word	0x200078d0

0800e8ec <__libc_init_array>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	4d0d      	ldr	r5, [pc, #52]	; (800e924 <__libc_init_array+0x38>)
 800e8f0:	4c0d      	ldr	r4, [pc, #52]	; (800e928 <__libc_init_array+0x3c>)
 800e8f2:	1b64      	subs	r4, r4, r5
 800e8f4:	10a4      	asrs	r4, r4, #2
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	42a6      	cmp	r6, r4
 800e8fa:	d109      	bne.n	800e910 <__libc_init_array+0x24>
 800e8fc:	4d0b      	ldr	r5, [pc, #44]	; (800e92c <__libc_init_array+0x40>)
 800e8fe:	4c0c      	ldr	r4, [pc, #48]	; (800e930 <__libc_init_array+0x44>)
 800e900:	f003 f840 	bl	8011984 <_init>
 800e904:	1b64      	subs	r4, r4, r5
 800e906:	10a4      	asrs	r4, r4, #2
 800e908:	2600      	movs	r6, #0
 800e90a:	42a6      	cmp	r6, r4
 800e90c:	d105      	bne.n	800e91a <__libc_init_array+0x2e>
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	f855 3b04 	ldr.w	r3, [r5], #4
 800e914:	4798      	blx	r3
 800e916:	3601      	adds	r6, #1
 800e918:	e7ee      	b.n	800e8f8 <__libc_init_array+0xc>
 800e91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e91e:	4798      	blx	r3
 800e920:	3601      	adds	r6, #1
 800e922:	e7f2      	b.n	800e90a <__libc_init_array+0x1e>
 800e924:	08024da8 	.word	0x08024da8
 800e928:	08024da8 	.word	0x08024da8
 800e92c:	08024da8 	.word	0x08024da8
 800e930:	08024dac 	.word	0x08024dac

0800e934 <__retarget_lock_init_recursive>:
 800e934:	4770      	bx	lr

0800e936 <__retarget_lock_acquire_recursive>:
 800e936:	4770      	bx	lr

0800e938 <__retarget_lock_release_recursive>:
 800e938:	4770      	bx	lr

0800e93a <quorem>:
 800e93a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e93e:	6903      	ldr	r3, [r0, #16]
 800e940:	690c      	ldr	r4, [r1, #16]
 800e942:	42a3      	cmp	r3, r4
 800e944:	4607      	mov	r7, r0
 800e946:	db7e      	blt.n	800ea46 <quorem+0x10c>
 800e948:	3c01      	subs	r4, #1
 800e94a:	f101 0814 	add.w	r8, r1, #20
 800e94e:	f100 0514 	add.w	r5, r0, #20
 800e952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e95c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e960:	3301      	adds	r3, #1
 800e962:	429a      	cmp	r2, r3
 800e964:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e96c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e970:	d331      	bcc.n	800e9d6 <quorem+0x9c>
 800e972:	f04f 0e00 	mov.w	lr, #0
 800e976:	4640      	mov	r0, r8
 800e978:	46ac      	mov	ip, r5
 800e97a:	46f2      	mov	sl, lr
 800e97c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e980:	b293      	uxth	r3, r2
 800e982:	fb06 e303 	mla	r3, r6, r3, lr
 800e986:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e98a:	0c1a      	lsrs	r2, r3, #16
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	ebaa 0303 	sub.w	r3, sl, r3
 800e992:	f8dc a000 	ldr.w	sl, [ip]
 800e996:	fa13 f38a 	uxtah	r3, r3, sl
 800e99a:	fb06 220e 	mla	r2, r6, lr, r2
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	9b00      	ldr	r3, [sp, #0]
 800e9a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e9a6:	b292      	uxth	r2, r2
 800e9a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e9ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e9b4:	4581      	cmp	r9, r0
 800e9b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9ba:	f84c 3b04 	str.w	r3, [ip], #4
 800e9be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e9c2:	d2db      	bcs.n	800e97c <quorem+0x42>
 800e9c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e9c8:	b92b      	cbnz	r3, 800e9d6 <quorem+0x9c>
 800e9ca:	9b01      	ldr	r3, [sp, #4]
 800e9cc:	3b04      	subs	r3, #4
 800e9ce:	429d      	cmp	r5, r3
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	d32c      	bcc.n	800ea2e <quorem+0xf4>
 800e9d4:	613c      	str	r4, [r7, #16]
 800e9d6:	4638      	mov	r0, r7
 800e9d8:	f001 f9a8 	bl	800fd2c <__mcmp>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	db22      	blt.n	800ea26 <quorem+0xec>
 800e9e0:	3601      	adds	r6, #1
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9ea:	f8d1 c000 	ldr.w	ip, [r1]
 800e9ee:	b293      	uxth	r3, r2
 800e9f0:	1ac3      	subs	r3, r0, r3
 800e9f2:	0c12      	lsrs	r2, r2, #16
 800e9f4:	fa13 f38c 	uxtah	r3, r3, ip
 800e9f8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e9fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea06:	45c1      	cmp	r9, r8
 800ea08:	f841 3b04 	str.w	r3, [r1], #4
 800ea0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ea10:	d2e9      	bcs.n	800e9e6 <quorem+0xac>
 800ea12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea1a:	b922      	cbnz	r2, 800ea26 <quorem+0xec>
 800ea1c:	3b04      	subs	r3, #4
 800ea1e:	429d      	cmp	r5, r3
 800ea20:	461a      	mov	r2, r3
 800ea22:	d30a      	bcc.n	800ea3a <quorem+0x100>
 800ea24:	613c      	str	r4, [r7, #16]
 800ea26:	4630      	mov	r0, r6
 800ea28:	b003      	add	sp, #12
 800ea2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2e:	6812      	ldr	r2, [r2, #0]
 800ea30:	3b04      	subs	r3, #4
 800ea32:	2a00      	cmp	r2, #0
 800ea34:	d1ce      	bne.n	800e9d4 <quorem+0x9a>
 800ea36:	3c01      	subs	r4, #1
 800ea38:	e7c9      	b.n	800e9ce <quorem+0x94>
 800ea3a:	6812      	ldr	r2, [r2, #0]
 800ea3c:	3b04      	subs	r3, #4
 800ea3e:	2a00      	cmp	r2, #0
 800ea40:	d1f0      	bne.n	800ea24 <quorem+0xea>
 800ea42:	3c01      	subs	r4, #1
 800ea44:	e7eb      	b.n	800ea1e <quorem+0xe4>
 800ea46:	2000      	movs	r0, #0
 800ea48:	e7ee      	b.n	800ea28 <quorem+0xee>
 800ea4a:	0000      	movs	r0, r0
 800ea4c:	0000      	movs	r0, r0
	...

0800ea50 <_dtoa_r>:
 800ea50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea54:	ed2d 8b04 	vpush	{d8-d9}
 800ea58:	69c5      	ldr	r5, [r0, #28]
 800ea5a:	b093      	sub	sp, #76	; 0x4c
 800ea5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ea60:	ec57 6b10 	vmov	r6, r7, d0
 800ea64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ea68:	9107      	str	r1, [sp, #28]
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	920a      	str	r2, [sp, #40]	; 0x28
 800ea6e:	930d      	str	r3, [sp, #52]	; 0x34
 800ea70:	b975      	cbnz	r5, 800ea90 <_dtoa_r+0x40>
 800ea72:	2010      	movs	r0, #16
 800ea74:	f000 fe2a 	bl	800f6cc <malloc>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	61e0      	str	r0, [r4, #28]
 800ea7c:	b920      	cbnz	r0, 800ea88 <_dtoa_r+0x38>
 800ea7e:	4bae      	ldr	r3, [pc, #696]	; (800ed38 <_dtoa_r+0x2e8>)
 800ea80:	21ef      	movs	r1, #239	; 0xef
 800ea82:	48ae      	ldr	r0, [pc, #696]	; (800ed3c <_dtoa_r+0x2ec>)
 800ea84:	f001 fb1e 	bl	80100c4 <__assert_func>
 800ea88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ea8c:	6005      	str	r5, [r0, #0]
 800ea8e:	60c5      	str	r5, [r0, #12]
 800ea90:	69e3      	ldr	r3, [r4, #28]
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	b151      	cbz	r1, 800eaac <_dtoa_r+0x5c>
 800ea96:	685a      	ldr	r2, [r3, #4]
 800ea98:	604a      	str	r2, [r1, #4]
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	4093      	lsls	r3, r2
 800ea9e:	608b      	str	r3, [r1, #8]
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	f000 ff07 	bl	800f8b4 <_Bfree>
 800eaa6:	69e3      	ldr	r3, [r4, #28]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	1e3b      	subs	r3, r7, #0
 800eaae:	bfbb      	ittet	lt
 800eab0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eab4:	9303      	strlt	r3, [sp, #12]
 800eab6:	2300      	movge	r3, #0
 800eab8:	2201      	movlt	r2, #1
 800eaba:	bfac      	ite	ge
 800eabc:	f8c8 3000 	strge.w	r3, [r8]
 800eac0:	f8c8 2000 	strlt.w	r2, [r8]
 800eac4:	4b9e      	ldr	r3, [pc, #632]	; (800ed40 <_dtoa_r+0x2f0>)
 800eac6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eaca:	ea33 0308 	bics.w	r3, r3, r8
 800eace:	d11b      	bne.n	800eb08 <_dtoa_r+0xb8>
 800ead0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ead2:	f242 730f 	movw	r3, #9999	; 0x270f
 800ead6:	6013      	str	r3, [r2, #0]
 800ead8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800eadc:	4333      	orrs	r3, r6
 800eade:	f000 8593 	beq.w	800f608 <_dtoa_r+0xbb8>
 800eae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eae4:	b963      	cbnz	r3, 800eb00 <_dtoa_r+0xb0>
 800eae6:	4b97      	ldr	r3, [pc, #604]	; (800ed44 <_dtoa_r+0x2f4>)
 800eae8:	e027      	b.n	800eb3a <_dtoa_r+0xea>
 800eaea:	4b97      	ldr	r3, [pc, #604]	; (800ed48 <_dtoa_r+0x2f8>)
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	3308      	adds	r3, #8
 800eaf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	9800      	ldr	r0, [sp, #0]
 800eaf6:	b013      	add	sp, #76	; 0x4c
 800eaf8:	ecbd 8b04 	vpop	{d8-d9}
 800eafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb00:	4b90      	ldr	r3, [pc, #576]	; (800ed44 <_dtoa_r+0x2f4>)
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	3303      	adds	r3, #3
 800eb06:	e7f3      	b.n	800eaf0 <_dtoa_r+0xa0>
 800eb08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	ec51 0b17 	vmov	r0, r1, d7
 800eb12:	eeb0 8a47 	vmov.f32	s16, s14
 800eb16:	eef0 8a67 	vmov.f32	s17, s15
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f7f1 fffc 	bl	8000b18 <__aeabi_dcmpeq>
 800eb20:	4681      	mov	r9, r0
 800eb22:	b160      	cbz	r0, 800eb3e <_dtoa_r+0xee>
 800eb24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb26:	2301      	movs	r3, #1
 800eb28:	6013      	str	r3, [r2, #0]
 800eb2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f000 8568 	beq.w	800f602 <_dtoa_r+0xbb2>
 800eb32:	4b86      	ldr	r3, [pc, #536]	; (800ed4c <_dtoa_r+0x2fc>)
 800eb34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	e7da      	b.n	800eaf4 <_dtoa_r+0xa4>
 800eb3e:	aa10      	add	r2, sp, #64	; 0x40
 800eb40:	a911      	add	r1, sp, #68	; 0x44
 800eb42:	4620      	mov	r0, r4
 800eb44:	eeb0 0a48 	vmov.f32	s0, s16
 800eb48:	eef0 0a68 	vmov.f32	s1, s17
 800eb4c:	f001 f994 	bl	800fe78 <__d2b>
 800eb50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800eb54:	4682      	mov	sl, r0
 800eb56:	2d00      	cmp	r5, #0
 800eb58:	d07f      	beq.n	800ec5a <_dtoa_r+0x20a>
 800eb5a:	ee18 3a90 	vmov	r3, s17
 800eb5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800eb66:	ec51 0b18 	vmov	r0, r1, d8
 800eb6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eb6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eb72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800eb76:	4619      	mov	r1, r3
 800eb78:	2200      	movs	r2, #0
 800eb7a:	4b75      	ldr	r3, [pc, #468]	; (800ed50 <_dtoa_r+0x300>)
 800eb7c:	f7f1 fbac 	bl	80002d8 <__aeabi_dsub>
 800eb80:	a367      	add	r3, pc, #412	; (adr r3, 800ed20 <_dtoa_r+0x2d0>)
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	f7f1 fd5f 	bl	8000648 <__aeabi_dmul>
 800eb8a:	a367      	add	r3, pc, #412	; (adr r3, 800ed28 <_dtoa_r+0x2d8>)
 800eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb90:	f7f1 fba4 	bl	80002dc <__adddf3>
 800eb94:	4606      	mov	r6, r0
 800eb96:	4628      	mov	r0, r5
 800eb98:	460f      	mov	r7, r1
 800eb9a:	f7f1 fceb 	bl	8000574 <__aeabi_i2d>
 800eb9e:	a364      	add	r3, pc, #400	; (adr r3, 800ed30 <_dtoa_r+0x2e0>)
 800eba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba4:	f7f1 fd50 	bl	8000648 <__aeabi_dmul>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	460b      	mov	r3, r1
 800ebac:	4630      	mov	r0, r6
 800ebae:	4639      	mov	r1, r7
 800ebb0:	f7f1 fb94 	bl	80002dc <__adddf3>
 800ebb4:	4606      	mov	r6, r0
 800ebb6:	460f      	mov	r7, r1
 800ebb8:	f7f1 fff6 	bl	8000ba8 <__aeabi_d2iz>
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	4683      	mov	fp, r0
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	f7f1 ffb1 	bl	8000b2c <__aeabi_dcmplt>
 800ebca:	b148      	cbz	r0, 800ebe0 <_dtoa_r+0x190>
 800ebcc:	4658      	mov	r0, fp
 800ebce:	f7f1 fcd1 	bl	8000574 <__aeabi_i2d>
 800ebd2:	4632      	mov	r2, r6
 800ebd4:	463b      	mov	r3, r7
 800ebd6:	f7f1 ff9f 	bl	8000b18 <__aeabi_dcmpeq>
 800ebda:	b908      	cbnz	r0, 800ebe0 <_dtoa_r+0x190>
 800ebdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebe0:	f1bb 0f16 	cmp.w	fp, #22
 800ebe4:	d857      	bhi.n	800ec96 <_dtoa_r+0x246>
 800ebe6:	4b5b      	ldr	r3, [pc, #364]	; (800ed54 <_dtoa_r+0x304>)
 800ebe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ebec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf0:	ec51 0b18 	vmov	r0, r1, d8
 800ebf4:	f7f1 ff9a 	bl	8000b2c <__aeabi_dcmplt>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d04e      	beq.n	800ec9a <_dtoa_r+0x24a>
 800ebfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec00:	2300      	movs	r3, #0
 800ec02:	930c      	str	r3, [sp, #48]	; 0x30
 800ec04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec06:	1b5b      	subs	r3, r3, r5
 800ec08:	1e5a      	subs	r2, r3, #1
 800ec0a:	bf45      	ittet	mi
 800ec0c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ec10:	9305      	strmi	r3, [sp, #20]
 800ec12:	2300      	movpl	r3, #0
 800ec14:	2300      	movmi	r3, #0
 800ec16:	9206      	str	r2, [sp, #24]
 800ec18:	bf54      	ite	pl
 800ec1a:	9305      	strpl	r3, [sp, #20]
 800ec1c:	9306      	strmi	r3, [sp, #24]
 800ec1e:	f1bb 0f00 	cmp.w	fp, #0
 800ec22:	db3c      	blt.n	800ec9e <_dtoa_r+0x24e>
 800ec24:	9b06      	ldr	r3, [sp, #24]
 800ec26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ec2a:	445b      	add	r3, fp
 800ec2c:	9306      	str	r3, [sp, #24]
 800ec2e:	2300      	movs	r3, #0
 800ec30:	9308      	str	r3, [sp, #32]
 800ec32:	9b07      	ldr	r3, [sp, #28]
 800ec34:	2b09      	cmp	r3, #9
 800ec36:	d868      	bhi.n	800ed0a <_dtoa_r+0x2ba>
 800ec38:	2b05      	cmp	r3, #5
 800ec3a:	bfc4      	itt	gt
 800ec3c:	3b04      	subgt	r3, #4
 800ec3e:	9307      	strgt	r3, [sp, #28]
 800ec40:	9b07      	ldr	r3, [sp, #28]
 800ec42:	f1a3 0302 	sub.w	r3, r3, #2
 800ec46:	bfcc      	ite	gt
 800ec48:	2500      	movgt	r5, #0
 800ec4a:	2501      	movle	r5, #1
 800ec4c:	2b03      	cmp	r3, #3
 800ec4e:	f200 8085 	bhi.w	800ed5c <_dtoa_r+0x30c>
 800ec52:	e8df f003 	tbb	[pc, r3]
 800ec56:	3b2e      	.short	0x3b2e
 800ec58:	5839      	.short	0x5839
 800ec5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ec5e:	441d      	add	r5, r3
 800ec60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	bfc1      	itttt	gt
 800ec68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ec70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ec74:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ec78:	bfd6      	itet	le
 800ec7a:	f1c3 0320 	rsble	r3, r3, #32
 800ec7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ec82:	fa06 f003 	lslle.w	r0, r6, r3
 800ec86:	f7f1 fc65 	bl	8000554 <__aeabi_ui2d>
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ec90:	3d01      	subs	r5, #1
 800ec92:	920e      	str	r2, [sp, #56]	; 0x38
 800ec94:	e76f      	b.n	800eb76 <_dtoa_r+0x126>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e7b3      	b.n	800ec02 <_dtoa_r+0x1b2>
 800ec9a:	900c      	str	r0, [sp, #48]	; 0x30
 800ec9c:	e7b2      	b.n	800ec04 <_dtoa_r+0x1b4>
 800ec9e:	9b05      	ldr	r3, [sp, #20]
 800eca0:	eba3 030b 	sub.w	r3, r3, fp
 800eca4:	9305      	str	r3, [sp, #20]
 800eca6:	f1cb 0300 	rsb	r3, fp, #0
 800ecaa:	9308      	str	r3, [sp, #32]
 800ecac:	2300      	movs	r3, #0
 800ecae:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecb0:	e7bf      	b.n	800ec32 <_dtoa_r+0x1e2>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	9309      	str	r3, [sp, #36]	; 0x24
 800ecb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	dc52      	bgt.n	800ed62 <_dtoa_r+0x312>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	9301      	str	r3, [sp, #4]
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	920a      	str	r2, [sp, #40]	; 0x28
 800ecc6:	e00b      	b.n	800ece0 <_dtoa_r+0x290>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e7f3      	b.n	800ecb4 <_dtoa_r+0x264>
 800eccc:	2300      	movs	r3, #0
 800ecce:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecd2:	445b      	add	r3, fp
 800ecd4:	9301      	str	r3, [sp, #4]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	9304      	str	r3, [sp, #16]
 800ecdc:	bfb8      	it	lt
 800ecde:	2301      	movlt	r3, #1
 800ece0:	69e0      	ldr	r0, [r4, #28]
 800ece2:	2100      	movs	r1, #0
 800ece4:	2204      	movs	r2, #4
 800ece6:	f102 0614 	add.w	r6, r2, #20
 800ecea:	429e      	cmp	r6, r3
 800ecec:	d93d      	bls.n	800ed6a <_dtoa_r+0x31a>
 800ecee:	6041      	str	r1, [r0, #4]
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f000 fd9f 	bl	800f834 <_Balloc>
 800ecf6:	9000      	str	r0, [sp, #0]
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	d139      	bne.n	800ed70 <_dtoa_r+0x320>
 800ecfc:	4b16      	ldr	r3, [pc, #88]	; (800ed58 <_dtoa_r+0x308>)
 800ecfe:	4602      	mov	r2, r0
 800ed00:	f240 11af 	movw	r1, #431	; 0x1af
 800ed04:	e6bd      	b.n	800ea82 <_dtoa_r+0x32>
 800ed06:	2301      	movs	r3, #1
 800ed08:	e7e1      	b.n	800ecce <_dtoa_r+0x27e>
 800ed0a:	2501      	movs	r5, #1
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	9307      	str	r3, [sp, #28]
 800ed10:	9509      	str	r5, [sp, #36]	; 0x24
 800ed12:	f04f 33ff 	mov.w	r3, #4294967295
 800ed16:	9301      	str	r3, [sp, #4]
 800ed18:	9304      	str	r3, [sp, #16]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	2312      	movs	r3, #18
 800ed1e:	e7d1      	b.n	800ecc4 <_dtoa_r+0x274>
 800ed20:	636f4361 	.word	0x636f4361
 800ed24:	3fd287a7 	.word	0x3fd287a7
 800ed28:	8b60c8b3 	.word	0x8b60c8b3
 800ed2c:	3fc68a28 	.word	0x3fc68a28
 800ed30:	509f79fb 	.word	0x509f79fb
 800ed34:	3fd34413 	.word	0x3fd34413
 800ed38:	08024a09 	.word	0x08024a09
 800ed3c:	08024a20 	.word	0x08024a20
 800ed40:	7ff00000 	.word	0x7ff00000
 800ed44:	08024a05 	.word	0x08024a05
 800ed48:	080249fc 	.word	0x080249fc
 800ed4c:	080249d9 	.word	0x080249d9
 800ed50:	3ff80000 	.word	0x3ff80000
 800ed54:	08024b10 	.word	0x08024b10
 800ed58:	08024a78 	.word	0x08024a78
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed60:	e7d7      	b.n	800ed12 <_dtoa_r+0x2c2>
 800ed62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed64:	9301      	str	r3, [sp, #4]
 800ed66:	9304      	str	r3, [sp, #16]
 800ed68:	e7ba      	b.n	800ece0 <_dtoa_r+0x290>
 800ed6a:	3101      	adds	r1, #1
 800ed6c:	0052      	lsls	r2, r2, #1
 800ed6e:	e7ba      	b.n	800ece6 <_dtoa_r+0x296>
 800ed70:	69e3      	ldr	r3, [r4, #28]
 800ed72:	9a00      	ldr	r2, [sp, #0]
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	9b04      	ldr	r3, [sp, #16]
 800ed78:	2b0e      	cmp	r3, #14
 800ed7a:	f200 80a8 	bhi.w	800eece <_dtoa_r+0x47e>
 800ed7e:	2d00      	cmp	r5, #0
 800ed80:	f000 80a5 	beq.w	800eece <_dtoa_r+0x47e>
 800ed84:	f1bb 0f00 	cmp.w	fp, #0
 800ed88:	dd38      	ble.n	800edfc <_dtoa_r+0x3ac>
 800ed8a:	4bc0      	ldr	r3, [pc, #768]	; (800f08c <_dtoa_r+0x63c>)
 800ed8c:	f00b 020f 	and.w	r2, fp, #15
 800ed90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ed98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ed9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800eda0:	d019      	beq.n	800edd6 <_dtoa_r+0x386>
 800eda2:	4bbb      	ldr	r3, [pc, #748]	; (800f090 <_dtoa_r+0x640>)
 800eda4:	ec51 0b18 	vmov	r0, r1, d8
 800eda8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800edac:	f7f1 fd76 	bl	800089c <__aeabi_ddiv>
 800edb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edb4:	f008 080f 	and.w	r8, r8, #15
 800edb8:	2503      	movs	r5, #3
 800edba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f090 <_dtoa_r+0x640>
 800edbe:	f1b8 0f00 	cmp.w	r8, #0
 800edc2:	d10a      	bne.n	800edda <_dtoa_r+0x38a>
 800edc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edc8:	4632      	mov	r2, r6
 800edca:	463b      	mov	r3, r7
 800edcc:	f7f1 fd66 	bl	800089c <__aeabi_ddiv>
 800edd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edd4:	e02b      	b.n	800ee2e <_dtoa_r+0x3de>
 800edd6:	2502      	movs	r5, #2
 800edd8:	e7ef      	b.n	800edba <_dtoa_r+0x36a>
 800edda:	f018 0f01 	tst.w	r8, #1
 800edde:	d008      	beq.n	800edf2 <_dtoa_r+0x3a2>
 800ede0:	4630      	mov	r0, r6
 800ede2:	4639      	mov	r1, r7
 800ede4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ede8:	f7f1 fc2e 	bl	8000648 <__aeabi_dmul>
 800edec:	3501      	adds	r5, #1
 800edee:	4606      	mov	r6, r0
 800edf0:	460f      	mov	r7, r1
 800edf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800edf6:	f109 0908 	add.w	r9, r9, #8
 800edfa:	e7e0      	b.n	800edbe <_dtoa_r+0x36e>
 800edfc:	f000 809f 	beq.w	800ef3e <_dtoa_r+0x4ee>
 800ee00:	f1cb 0600 	rsb	r6, fp, #0
 800ee04:	4ba1      	ldr	r3, [pc, #644]	; (800f08c <_dtoa_r+0x63c>)
 800ee06:	4fa2      	ldr	r7, [pc, #648]	; (800f090 <_dtoa_r+0x640>)
 800ee08:	f006 020f 	and.w	r2, r6, #15
 800ee0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee14:	ec51 0b18 	vmov	r0, r1, d8
 800ee18:	f7f1 fc16 	bl	8000648 <__aeabi_dmul>
 800ee1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee20:	1136      	asrs	r6, r6, #4
 800ee22:	2300      	movs	r3, #0
 800ee24:	2502      	movs	r5, #2
 800ee26:	2e00      	cmp	r6, #0
 800ee28:	d17e      	bne.n	800ef28 <_dtoa_r+0x4d8>
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d1d0      	bne.n	800edd0 <_dtoa_r+0x380>
 800ee2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	f000 8084 	beq.w	800ef42 <_dtoa_r+0x4f2>
 800ee3a:	4b96      	ldr	r3, [pc, #600]	; (800f094 <_dtoa_r+0x644>)
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	4640      	mov	r0, r8
 800ee40:	4649      	mov	r1, r9
 800ee42:	f7f1 fe73 	bl	8000b2c <__aeabi_dcmplt>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d07b      	beq.n	800ef42 <_dtoa_r+0x4f2>
 800ee4a:	9b04      	ldr	r3, [sp, #16]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d078      	beq.n	800ef42 <_dtoa_r+0x4f2>
 800ee50:	9b01      	ldr	r3, [sp, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	dd39      	ble.n	800eeca <_dtoa_r+0x47a>
 800ee56:	4b90      	ldr	r3, [pc, #576]	; (800f098 <_dtoa_r+0x648>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	4649      	mov	r1, r9
 800ee5e:	f7f1 fbf3 	bl	8000648 <__aeabi_dmul>
 800ee62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee66:	9e01      	ldr	r6, [sp, #4]
 800ee68:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ee6c:	3501      	adds	r5, #1
 800ee6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee72:	4628      	mov	r0, r5
 800ee74:	f7f1 fb7e 	bl	8000574 <__aeabi_i2d>
 800ee78:	4642      	mov	r2, r8
 800ee7a:	464b      	mov	r3, r9
 800ee7c:	f7f1 fbe4 	bl	8000648 <__aeabi_dmul>
 800ee80:	4b86      	ldr	r3, [pc, #536]	; (800f09c <_dtoa_r+0x64c>)
 800ee82:	2200      	movs	r2, #0
 800ee84:	f7f1 fa2a 	bl	80002dc <__adddf3>
 800ee88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ee8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee90:	9303      	str	r3, [sp, #12]
 800ee92:	2e00      	cmp	r6, #0
 800ee94:	d158      	bne.n	800ef48 <_dtoa_r+0x4f8>
 800ee96:	4b82      	ldr	r3, [pc, #520]	; (800f0a0 <_dtoa_r+0x650>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	4640      	mov	r0, r8
 800ee9c:	4649      	mov	r1, r9
 800ee9e:	f7f1 fa1b 	bl	80002d8 <__aeabi_dsub>
 800eea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eea6:	4680      	mov	r8, r0
 800eea8:	4689      	mov	r9, r1
 800eeaa:	f7f1 fe5d 	bl	8000b68 <__aeabi_dcmpgt>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	f040 8296 	bne.w	800f3e0 <_dtoa_r+0x990>
 800eeb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eeb8:	4640      	mov	r0, r8
 800eeba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eebe:	4649      	mov	r1, r9
 800eec0:	f7f1 fe34 	bl	8000b2c <__aeabi_dcmplt>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	f040 8289 	bne.w	800f3dc <_dtoa_r+0x98c>
 800eeca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800eece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f2c0 814e 	blt.w	800f172 <_dtoa_r+0x722>
 800eed6:	f1bb 0f0e 	cmp.w	fp, #14
 800eeda:	f300 814a 	bgt.w	800f172 <_dtoa_r+0x722>
 800eede:	4b6b      	ldr	r3, [pc, #428]	; (800f08c <_dtoa_r+0x63c>)
 800eee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f280 80dc 	bge.w	800f0a8 <_dtoa_r+0x658>
 800eef0:	9b04      	ldr	r3, [sp, #16]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f300 80d8 	bgt.w	800f0a8 <_dtoa_r+0x658>
 800eef8:	f040 826f 	bne.w	800f3da <_dtoa_r+0x98a>
 800eefc:	4b68      	ldr	r3, [pc, #416]	; (800f0a0 <_dtoa_r+0x650>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	4640      	mov	r0, r8
 800ef02:	4649      	mov	r1, r9
 800ef04:	f7f1 fba0 	bl	8000648 <__aeabi_dmul>
 800ef08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef0c:	f7f1 fe22 	bl	8000b54 <__aeabi_dcmpge>
 800ef10:	9e04      	ldr	r6, [sp, #16]
 800ef12:	4637      	mov	r7, r6
 800ef14:	2800      	cmp	r0, #0
 800ef16:	f040 8245 	bne.w	800f3a4 <_dtoa_r+0x954>
 800ef1a:	9d00      	ldr	r5, [sp, #0]
 800ef1c:	2331      	movs	r3, #49	; 0x31
 800ef1e:	f805 3b01 	strb.w	r3, [r5], #1
 800ef22:	f10b 0b01 	add.w	fp, fp, #1
 800ef26:	e241      	b.n	800f3ac <_dtoa_r+0x95c>
 800ef28:	07f2      	lsls	r2, r6, #31
 800ef2a:	d505      	bpl.n	800ef38 <_dtoa_r+0x4e8>
 800ef2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef30:	f7f1 fb8a 	bl	8000648 <__aeabi_dmul>
 800ef34:	3501      	adds	r5, #1
 800ef36:	2301      	movs	r3, #1
 800ef38:	1076      	asrs	r6, r6, #1
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	e773      	b.n	800ee26 <_dtoa_r+0x3d6>
 800ef3e:	2502      	movs	r5, #2
 800ef40:	e775      	b.n	800ee2e <_dtoa_r+0x3de>
 800ef42:	9e04      	ldr	r6, [sp, #16]
 800ef44:	465f      	mov	r7, fp
 800ef46:	e792      	b.n	800ee6e <_dtoa_r+0x41e>
 800ef48:	9900      	ldr	r1, [sp, #0]
 800ef4a:	4b50      	ldr	r3, [pc, #320]	; (800f08c <_dtoa_r+0x63c>)
 800ef4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef50:	4431      	add	r1, r6
 800ef52:	9102      	str	r1, [sp, #8]
 800ef54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef56:	eeb0 9a47 	vmov.f32	s18, s14
 800ef5a:	eef0 9a67 	vmov.f32	s19, s15
 800ef5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ef62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef66:	2900      	cmp	r1, #0
 800ef68:	d044      	beq.n	800eff4 <_dtoa_r+0x5a4>
 800ef6a:	494e      	ldr	r1, [pc, #312]	; (800f0a4 <_dtoa_r+0x654>)
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	f7f1 fc95 	bl	800089c <__aeabi_ddiv>
 800ef72:	ec53 2b19 	vmov	r2, r3, d9
 800ef76:	f7f1 f9af 	bl	80002d8 <__aeabi_dsub>
 800ef7a:	9d00      	ldr	r5, [sp, #0]
 800ef7c:	ec41 0b19 	vmov	d9, r0, r1
 800ef80:	4649      	mov	r1, r9
 800ef82:	4640      	mov	r0, r8
 800ef84:	f7f1 fe10 	bl	8000ba8 <__aeabi_d2iz>
 800ef88:	4606      	mov	r6, r0
 800ef8a:	f7f1 faf3 	bl	8000574 <__aeabi_i2d>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	460b      	mov	r3, r1
 800ef92:	4640      	mov	r0, r8
 800ef94:	4649      	mov	r1, r9
 800ef96:	f7f1 f99f 	bl	80002d8 <__aeabi_dsub>
 800ef9a:	3630      	adds	r6, #48	; 0x30
 800ef9c:	f805 6b01 	strb.w	r6, [r5], #1
 800efa0:	ec53 2b19 	vmov	r2, r3, d9
 800efa4:	4680      	mov	r8, r0
 800efa6:	4689      	mov	r9, r1
 800efa8:	f7f1 fdc0 	bl	8000b2c <__aeabi_dcmplt>
 800efac:	2800      	cmp	r0, #0
 800efae:	d164      	bne.n	800f07a <_dtoa_r+0x62a>
 800efb0:	4642      	mov	r2, r8
 800efb2:	464b      	mov	r3, r9
 800efb4:	4937      	ldr	r1, [pc, #220]	; (800f094 <_dtoa_r+0x644>)
 800efb6:	2000      	movs	r0, #0
 800efb8:	f7f1 f98e 	bl	80002d8 <__aeabi_dsub>
 800efbc:	ec53 2b19 	vmov	r2, r3, d9
 800efc0:	f7f1 fdb4 	bl	8000b2c <__aeabi_dcmplt>
 800efc4:	2800      	cmp	r0, #0
 800efc6:	f040 80b6 	bne.w	800f136 <_dtoa_r+0x6e6>
 800efca:	9b02      	ldr	r3, [sp, #8]
 800efcc:	429d      	cmp	r5, r3
 800efce:	f43f af7c 	beq.w	800eeca <_dtoa_r+0x47a>
 800efd2:	4b31      	ldr	r3, [pc, #196]	; (800f098 <_dtoa_r+0x648>)
 800efd4:	ec51 0b19 	vmov	r0, r1, d9
 800efd8:	2200      	movs	r2, #0
 800efda:	f7f1 fb35 	bl	8000648 <__aeabi_dmul>
 800efde:	4b2e      	ldr	r3, [pc, #184]	; (800f098 <_dtoa_r+0x648>)
 800efe0:	ec41 0b19 	vmov	d9, r0, r1
 800efe4:	2200      	movs	r2, #0
 800efe6:	4640      	mov	r0, r8
 800efe8:	4649      	mov	r1, r9
 800efea:	f7f1 fb2d 	bl	8000648 <__aeabi_dmul>
 800efee:	4680      	mov	r8, r0
 800eff0:	4689      	mov	r9, r1
 800eff2:	e7c5      	b.n	800ef80 <_dtoa_r+0x530>
 800eff4:	ec51 0b17 	vmov	r0, r1, d7
 800eff8:	f7f1 fb26 	bl	8000648 <__aeabi_dmul>
 800effc:	9b02      	ldr	r3, [sp, #8]
 800effe:	9d00      	ldr	r5, [sp, #0]
 800f000:	930f      	str	r3, [sp, #60]	; 0x3c
 800f002:	ec41 0b19 	vmov	d9, r0, r1
 800f006:	4649      	mov	r1, r9
 800f008:	4640      	mov	r0, r8
 800f00a:	f7f1 fdcd 	bl	8000ba8 <__aeabi_d2iz>
 800f00e:	4606      	mov	r6, r0
 800f010:	f7f1 fab0 	bl	8000574 <__aeabi_i2d>
 800f014:	3630      	adds	r6, #48	; 0x30
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	4640      	mov	r0, r8
 800f01c:	4649      	mov	r1, r9
 800f01e:	f7f1 f95b 	bl	80002d8 <__aeabi_dsub>
 800f022:	f805 6b01 	strb.w	r6, [r5], #1
 800f026:	9b02      	ldr	r3, [sp, #8]
 800f028:	429d      	cmp	r5, r3
 800f02a:	4680      	mov	r8, r0
 800f02c:	4689      	mov	r9, r1
 800f02e:	f04f 0200 	mov.w	r2, #0
 800f032:	d124      	bne.n	800f07e <_dtoa_r+0x62e>
 800f034:	4b1b      	ldr	r3, [pc, #108]	; (800f0a4 <_dtoa_r+0x654>)
 800f036:	ec51 0b19 	vmov	r0, r1, d9
 800f03a:	f7f1 f94f 	bl	80002dc <__adddf3>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	4640      	mov	r0, r8
 800f044:	4649      	mov	r1, r9
 800f046:	f7f1 fd8f 	bl	8000b68 <__aeabi_dcmpgt>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d173      	bne.n	800f136 <_dtoa_r+0x6e6>
 800f04e:	ec53 2b19 	vmov	r2, r3, d9
 800f052:	4914      	ldr	r1, [pc, #80]	; (800f0a4 <_dtoa_r+0x654>)
 800f054:	2000      	movs	r0, #0
 800f056:	f7f1 f93f 	bl	80002d8 <__aeabi_dsub>
 800f05a:	4602      	mov	r2, r0
 800f05c:	460b      	mov	r3, r1
 800f05e:	4640      	mov	r0, r8
 800f060:	4649      	mov	r1, r9
 800f062:	f7f1 fd63 	bl	8000b2c <__aeabi_dcmplt>
 800f066:	2800      	cmp	r0, #0
 800f068:	f43f af2f 	beq.w	800eeca <_dtoa_r+0x47a>
 800f06c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f06e:	1e6b      	subs	r3, r5, #1
 800f070:	930f      	str	r3, [sp, #60]	; 0x3c
 800f072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f076:	2b30      	cmp	r3, #48	; 0x30
 800f078:	d0f8      	beq.n	800f06c <_dtoa_r+0x61c>
 800f07a:	46bb      	mov	fp, r7
 800f07c:	e04a      	b.n	800f114 <_dtoa_r+0x6c4>
 800f07e:	4b06      	ldr	r3, [pc, #24]	; (800f098 <_dtoa_r+0x648>)
 800f080:	f7f1 fae2 	bl	8000648 <__aeabi_dmul>
 800f084:	4680      	mov	r8, r0
 800f086:	4689      	mov	r9, r1
 800f088:	e7bd      	b.n	800f006 <_dtoa_r+0x5b6>
 800f08a:	bf00      	nop
 800f08c:	08024b10 	.word	0x08024b10
 800f090:	08024ae8 	.word	0x08024ae8
 800f094:	3ff00000 	.word	0x3ff00000
 800f098:	40240000 	.word	0x40240000
 800f09c:	401c0000 	.word	0x401c0000
 800f0a0:	40140000 	.word	0x40140000
 800f0a4:	3fe00000 	.word	0x3fe00000
 800f0a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f0ac:	9d00      	ldr	r5, [sp, #0]
 800f0ae:	4642      	mov	r2, r8
 800f0b0:	464b      	mov	r3, r9
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	f7f1 fbf1 	bl	800089c <__aeabi_ddiv>
 800f0ba:	f7f1 fd75 	bl	8000ba8 <__aeabi_d2iz>
 800f0be:	9001      	str	r0, [sp, #4]
 800f0c0:	f7f1 fa58 	bl	8000574 <__aeabi_i2d>
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	464b      	mov	r3, r9
 800f0c8:	f7f1 fabe 	bl	8000648 <__aeabi_dmul>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	4639      	mov	r1, r7
 800f0d4:	f7f1 f900 	bl	80002d8 <__aeabi_dsub>
 800f0d8:	9e01      	ldr	r6, [sp, #4]
 800f0da:	9f04      	ldr	r7, [sp, #16]
 800f0dc:	3630      	adds	r6, #48	; 0x30
 800f0de:	f805 6b01 	strb.w	r6, [r5], #1
 800f0e2:	9e00      	ldr	r6, [sp, #0]
 800f0e4:	1bae      	subs	r6, r5, r6
 800f0e6:	42b7      	cmp	r7, r6
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	d134      	bne.n	800f158 <_dtoa_r+0x708>
 800f0ee:	f7f1 f8f5 	bl	80002dc <__adddf3>
 800f0f2:	4642      	mov	r2, r8
 800f0f4:	464b      	mov	r3, r9
 800f0f6:	4606      	mov	r6, r0
 800f0f8:	460f      	mov	r7, r1
 800f0fa:	f7f1 fd35 	bl	8000b68 <__aeabi_dcmpgt>
 800f0fe:	b9c8      	cbnz	r0, 800f134 <_dtoa_r+0x6e4>
 800f100:	4642      	mov	r2, r8
 800f102:	464b      	mov	r3, r9
 800f104:	4630      	mov	r0, r6
 800f106:	4639      	mov	r1, r7
 800f108:	f7f1 fd06 	bl	8000b18 <__aeabi_dcmpeq>
 800f10c:	b110      	cbz	r0, 800f114 <_dtoa_r+0x6c4>
 800f10e:	9b01      	ldr	r3, [sp, #4]
 800f110:	07db      	lsls	r3, r3, #31
 800f112:	d40f      	bmi.n	800f134 <_dtoa_r+0x6e4>
 800f114:	4651      	mov	r1, sl
 800f116:	4620      	mov	r0, r4
 800f118:	f000 fbcc 	bl	800f8b4 <_Bfree>
 800f11c:	2300      	movs	r3, #0
 800f11e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f120:	702b      	strb	r3, [r5, #0]
 800f122:	f10b 0301 	add.w	r3, fp, #1
 800f126:	6013      	str	r3, [r2, #0]
 800f128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f43f ace2 	beq.w	800eaf4 <_dtoa_r+0xa4>
 800f130:	601d      	str	r5, [r3, #0]
 800f132:	e4df      	b.n	800eaf4 <_dtoa_r+0xa4>
 800f134:	465f      	mov	r7, fp
 800f136:	462b      	mov	r3, r5
 800f138:	461d      	mov	r5, r3
 800f13a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f13e:	2a39      	cmp	r2, #57	; 0x39
 800f140:	d106      	bne.n	800f150 <_dtoa_r+0x700>
 800f142:	9a00      	ldr	r2, [sp, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	d1f7      	bne.n	800f138 <_dtoa_r+0x6e8>
 800f148:	9900      	ldr	r1, [sp, #0]
 800f14a:	2230      	movs	r2, #48	; 0x30
 800f14c:	3701      	adds	r7, #1
 800f14e:	700a      	strb	r2, [r1, #0]
 800f150:	781a      	ldrb	r2, [r3, #0]
 800f152:	3201      	adds	r2, #1
 800f154:	701a      	strb	r2, [r3, #0]
 800f156:	e790      	b.n	800f07a <_dtoa_r+0x62a>
 800f158:	4ba3      	ldr	r3, [pc, #652]	; (800f3e8 <_dtoa_r+0x998>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	f7f1 fa74 	bl	8000648 <__aeabi_dmul>
 800f160:	2200      	movs	r2, #0
 800f162:	2300      	movs	r3, #0
 800f164:	4606      	mov	r6, r0
 800f166:	460f      	mov	r7, r1
 800f168:	f7f1 fcd6 	bl	8000b18 <__aeabi_dcmpeq>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d09e      	beq.n	800f0ae <_dtoa_r+0x65e>
 800f170:	e7d0      	b.n	800f114 <_dtoa_r+0x6c4>
 800f172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f174:	2a00      	cmp	r2, #0
 800f176:	f000 80ca 	beq.w	800f30e <_dtoa_r+0x8be>
 800f17a:	9a07      	ldr	r2, [sp, #28]
 800f17c:	2a01      	cmp	r2, #1
 800f17e:	f300 80ad 	bgt.w	800f2dc <_dtoa_r+0x88c>
 800f182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f184:	2a00      	cmp	r2, #0
 800f186:	f000 80a5 	beq.w	800f2d4 <_dtoa_r+0x884>
 800f18a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f18e:	9e08      	ldr	r6, [sp, #32]
 800f190:	9d05      	ldr	r5, [sp, #20]
 800f192:	9a05      	ldr	r2, [sp, #20]
 800f194:	441a      	add	r2, r3
 800f196:	9205      	str	r2, [sp, #20]
 800f198:	9a06      	ldr	r2, [sp, #24]
 800f19a:	2101      	movs	r1, #1
 800f19c:	441a      	add	r2, r3
 800f19e:	4620      	mov	r0, r4
 800f1a0:	9206      	str	r2, [sp, #24]
 800f1a2:	f000 fc3d 	bl	800fa20 <__i2b>
 800f1a6:	4607      	mov	r7, r0
 800f1a8:	b165      	cbz	r5, 800f1c4 <_dtoa_r+0x774>
 800f1aa:	9b06      	ldr	r3, [sp, #24]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	dd09      	ble.n	800f1c4 <_dtoa_r+0x774>
 800f1b0:	42ab      	cmp	r3, r5
 800f1b2:	9a05      	ldr	r2, [sp, #20]
 800f1b4:	bfa8      	it	ge
 800f1b6:	462b      	movge	r3, r5
 800f1b8:	1ad2      	subs	r2, r2, r3
 800f1ba:	9205      	str	r2, [sp, #20]
 800f1bc:	9a06      	ldr	r2, [sp, #24]
 800f1be:	1aed      	subs	r5, r5, r3
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	9306      	str	r3, [sp, #24]
 800f1c4:	9b08      	ldr	r3, [sp, #32]
 800f1c6:	b1f3      	cbz	r3, 800f206 <_dtoa_r+0x7b6>
 800f1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f000 80a3 	beq.w	800f316 <_dtoa_r+0x8c6>
 800f1d0:	2e00      	cmp	r6, #0
 800f1d2:	dd10      	ble.n	800f1f6 <_dtoa_r+0x7a6>
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	4632      	mov	r2, r6
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f000 fce1 	bl	800fba0 <__pow5mult>
 800f1de:	4652      	mov	r2, sl
 800f1e0:	4601      	mov	r1, r0
 800f1e2:	4607      	mov	r7, r0
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 fc31 	bl	800fa4c <__multiply>
 800f1ea:	4651      	mov	r1, sl
 800f1ec:	4680      	mov	r8, r0
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 fb60 	bl	800f8b4 <_Bfree>
 800f1f4:	46c2      	mov	sl, r8
 800f1f6:	9b08      	ldr	r3, [sp, #32]
 800f1f8:	1b9a      	subs	r2, r3, r6
 800f1fa:	d004      	beq.n	800f206 <_dtoa_r+0x7b6>
 800f1fc:	4651      	mov	r1, sl
 800f1fe:	4620      	mov	r0, r4
 800f200:	f000 fcce 	bl	800fba0 <__pow5mult>
 800f204:	4682      	mov	sl, r0
 800f206:	2101      	movs	r1, #1
 800f208:	4620      	mov	r0, r4
 800f20a:	f000 fc09 	bl	800fa20 <__i2b>
 800f20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f210:	2b00      	cmp	r3, #0
 800f212:	4606      	mov	r6, r0
 800f214:	f340 8081 	ble.w	800f31a <_dtoa_r+0x8ca>
 800f218:	461a      	mov	r2, r3
 800f21a:	4601      	mov	r1, r0
 800f21c:	4620      	mov	r0, r4
 800f21e:	f000 fcbf 	bl	800fba0 <__pow5mult>
 800f222:	9b07      	ldr	r3, [sp, #28]
 800f224:	2b01      	cmp	r3, #1
 800f226:	4606      	mov	r6, r0
 800f228:	dd7a      	ble.n	800f320 <_dtoa_r+0x8d0>
 800f22a:	f04f 0800 	mov.w	r8, #0
 800f22e:	6933      	ldr	r3, [r6, #16]
 800f230:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f234:	6918      	ldr	r0, [r3, #16]
 800f236:	f000 fba5 	bl	800f984 <__hi0bits>
 800f23a:	f1c0 0020 	rsb	r0, r0, #32
 800f23e:	9b06      	ldr	r3, [sp, #24]
 800f240:	4418      	add	r0, r3
 800f242:	f010 001f 	ands.w	r0, r0, #31
 800f246:	f000 8094 	beq.w	800f372 <_dtoa_r+0x922>
 800f24a:	f1c0 0320 	rsb	r3, r0, #32
 800f24e:	2b04      	cmp	r3, #4
 800f250:	f340 8085 	ble.w	800f35e <_dtoa_r+0x90e>
 800f254:	9b05      	ldr	r3, [sp, #20]
 800f256:	f1c0 001c 	rsb	r0, r0, #28
 800f25a:	4403      	add	r3, r0
 800f25c:	9305      	str	r3, [sp, #20]
 800f25e:	9b06      	ldr	r3, [sp, #24]
 800f260:	4403      	add	r3, r0
 800f262:	4405      	add	r5, r0
 800f264:	9306      	str	r3, [sp, #24]
 800f266:	9b05      	ldr	r3, [sp, #20]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	dd05      	ble.n	800f278 <_dtoa_r+0x828>
 800f26c:	4651      	mov	r1, sl
 800f26e:	461a      	mov	r2, r3
 800f270:	4620      	mov	r0, r4
 800f272:	f000 fcef 	bl	800fc54 <__lshift>
 800f276:	4682      	mov	sl, r0
 800f278:	9b06      	ldr	r3, [sp, #24]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	dd05      	ble.n	800f28a <_dtoa_r+0x83a>
 800f27e:	4631      	mov	r1, r6
 800f280:	461a      	mov	r2, r3
 800f282:	4620      	mov	r0, r4
 800f284:	f000 fce6 	bl	800fc54 <__lshift>
 800f288:	4606      	mov	r6, r0
 800f28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d072      	beq.n	800f376 <_dtoa_r+0x926>
 800f290:	4631      	mov	r1, r6
 800f292:	4650      	mov	r0, sl
 800f294:	f000 fd4a 	bl	800fd2c <__mcmp>
 800f298:	2800      	cmp	r0, #0
 800f29a:	da6c      	bge.n	800f376 <_dtoa_r+0x926>
 800f29c:	2300      	movs	r3, #0
 800f29e:	4651      	mov	r1, sl
 800f2a0:	220a      	movs	r2, #10
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f000 fb28 	bl	800f8f8 <__multadd>
 800f2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2ae:	4682      	mov	sl, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f000 81b0 	beq.w	800f616 <_dtoa_r+0xbc6>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4639      	mov	r1, r7
 800f2ba:	220a      	movs	r2, #10
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f000 fb1b 	bl	800f8f8 <__multadd>
 800f2c2:	9b01      	ldr	r3, [sp, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	4607      	mov	r7, r0
 800f2c8:	f300 8096 	bgt.w	800f3f8 <_dtoa_r+0x9a8>
 800f2cc:	9b07      	ldr	r3, [sp, #28]
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	dc59      	bgt.n	800f386 <_dtoa_r+0x936>
 800f2d2:	e091      	b.n	800f3f8 <_dtoa_r+0x9a8>
 800f2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2da:	e758      	b.n	800f18e <_dtoa_r+0x73e>
 800f2dc:	9b04      	ldr	r3, [sp, #16]
 800f2de:	1e5e      	subs	r6, r3, #1
 800f2e0:	9b08      	ldr	r3, [sp, #32]
 800f2e2:	42b3      	cmp	r3, r6
 800f2e4:	bfbf      	itttt	lt
 800f2e6:	9b08      	ldrlt	r3, [sp, #32]
 800f2e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f2ea:	9608      	strlt	r6, [sp, #32]
 800f2ec:	1af3      	sublt	r3, r6, r3
 800f2ee:	bfb4      	ite	lt
 800f2f0:	18d2      	addlt	r2, r2, r3
 800f2f2:	1b9e      	subge	r6, r3, r6
 800f2f4:	9b04      	ldr	r3, [sp, #16]
 800f2f6:	bfbc      	itt	lt
 800f2f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f2fa:	2600      	movlt	r6, #0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	bfb7      	itett	lt
 800f300:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f304:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f308:	1a9d      	sublt	r5, r3, r2
 800f30a:	2300      	movlt	r3, #0
 800f30c:	e741      	b.n	800f192 <_dtoa_r+0x742>
 800f30e:	9e08      	ldr	r6, [sp, #32]
 800f310:	9d05      	ldr	r5, [sp, #20]
 800f312:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f314:	e748      	b.n	800f1a8 <_dtoa_r+0x758>
 800f316:	9a08      	ldr	r2, [sp, #32]
 800f318:	e770      	b.n	800f1fc <_dtoa_r+0x7ac>
 800f31a:	9b07      	ldr	r3, [sp, #28]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	dc19      	bgt.n	800f354 <_dtoa_r+0x904>
 800f320:	9b02      	ldr	r3, [sp, #8]
 800f322:	b9bb      	cbnz	r3, 800f354 <_dtoa_r+0x904>
 800f324:	9b03      	ldr	r3, [sp, #12]
 800f326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f32a:	b99b      	cbnz	r3, 800f354 <_dtoa_r+0x904>
 800f32c:	9b03      	ldr	r3, [sp, #12]
 800f32e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f332:	0d1b      	lsrs	r3, r3, #20
 800f334:	051b      	lsls	r3, r3, #20
 800f336:	b183      	cbz	r3, 800f35a <_dtoa_r+0x90a>
 800f338:	9b05      	ldr	r3, [sp, #20]
 800f33a:	3301      	adds	r3, #1
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	9b06      	ldr	r3, [sp, #24]
 800f340:	3301      	adds	r3, #1
 800f342:	9306      	str	r3, [sp, #24]
 800f344:	f04f 0801 	mov.w	r8, #1
 800f348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f47f af6f 	bne.w	800f22e <_dtoa_r+0x7de>
 800f350:	2001      	movs	r0, #1
 800f352:	e774      	b.n	800f23e <_dtoa_r+0x7ee>
 800f354:	f04f 0800 	mov.w	r8, #0
 800f358:	e7f6      	b.n	800f348 <_dtoa_r+0x8f8>
 800f35a:	4698      	mov	r8, r3
 800f35c:	e7f4      	b.n	800f348 <_dtoa_r+0x8f8>
 800f35e:	d082      	beq.n	800f266 <_dtoa_r+0x816>
 800f360:	9a05      	ldr	r2, [sp, #20]
 800f362:	331c      	adds	r3, #28
 800f364:	441a      	add	r2, r3
 800f366:	9205      	str	r2, [sp, #20]
 800f368:	9a06      	ldr	r2, [sp, #24]
 800f36a:	441a      	add	r2, r3
 800f36c:	441d      	add	r5, r3
 800f36e:	9206      	str	r2, [sp, #24]
 800f370:	e779      	b.n	800f266 <_dtoa_r+0x816>
 800f372:	4603      	mov	r3, r0
 800f374:	e7f4      	b.n	800f360 <_dtoa_r+0x910>
 800f376:	9b04      	ldr	r3, [sp, #16]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dc37      	bgt.n	800f3ec <_dtoa_r+0x99c>
 800f37c:	9b07      	ldr	r3, [sp, #28]
 800f37e:	2b02      	cmp	r3, #2
 800f380:	dd34      	ble.n	800f3ec <_dtoa_r+0x99c>
 800f382:	9b04      	ldr	r3, [sp, #16]
 800f384:	9301      	str	r3, [sp, #4]
 800f386:	9b01      	ldr	r3, [sp, #4]
 800f388:	b963      	cbnz	r3, 800f3a4 <_dtoa_r+0x954>
 800f38a:	4631      	mov	r1, r6
 800f38c:	2205      	movs	r2, #5
 800f38e:	4620      	mov	r0, r4
 800f390:	f000 fab2 	bl	800f8f8 <__multadd>
 800f394:	4601      	mov	r1, r0
 800f396:	4606      	mov	r6, r0
 800f398:	4650      	mov	r0, sl
 800f39a:	f000 fcc7 	bl	800fd2c <__mcmp>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	f73f adbb 	bgt.w	800ef1a <_dtoa_r+0x4ca>
 800f3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a6:	9d00      	ldr	r5, [sp, #0]
 800f3a8:	ea6f 0b03 	mvn.w	fp, r3
 800f3ac:	f04f 0800 	mov.w	r8, #0
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f000 fa7e 	bl	800f8b4 <_Bfree>
 800f3b8:	2f00      	cmp	r7, #0
 800f3ba:	f43f aeab 	beq.w	800f114 <_dtoa_r+0x6c4>
 800f3be:	f1b8 0f00 	cmp.w	r8, #0
 800f3c2:	d005      	beq.n	800f3d0 <_dtoa_r+0x980>
 800f3c4:	45b8      	cmp	r8, r7
 800f3c6:	d003      	beq.n	800f3d0 <_dtoa_r+0x980>
 800f3c8:	4641      	mov	r1, r8
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f000 fa72 	bl	800f8b4 <_Bfree>
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 fa6e 	bl	800f8b4 <_Bfree>
 800f3d8:	e69c      	b.n	800f114 <_dtoa_r+0x6c4>
 800f3da:	2600      	movs	r6, #0
 800f3dc:	4637      	mov	r7, r6
 800f3de:	e7e1      	b.n	800f3a4 <_dtoa_r+0x954>
 800f3e0:	46bb      	mov	fp, r7
 800f3e2:	4637      	mov	r7, r6
 800f3e4:	e599      	b.n	800ef1a <_dtoa_r+0x4ca>
 800f3e6:	bf00      	nop
 800f3e8:	40240000 	.word	0x40240000
 800f3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 80c8 	beq.w	800f584 <_dtoa_r+0xb34>
 800f3f4:	9b04      	ldr	r3, [sp, #16]
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	2d00      	cmp	r5, #0
 800f3fa:	dd05      	ble.n	800f408 <_dtoa_r+0x9b8>
 800f3fc:	4639      	mov	r1, r7
 800f3fe:	462a      	mov	r2, r5
 800f400:	4620      	mov	r0, r4
 800f402:	f000 fc27 	bl	800fc54 <__lshift>
 800f406:	4607      	mov	r7, r0
 800f408:	f1b8 0f00 	cmp.w	r8, #0
 800f40c:	d05b      	beq.n	800f4c6 <_dtoa_r+0xa76>
 800f40e:	6879      	ldr	r1, [r7, #4]
 800f410:	4620      	mov	r0, r4
 800f412:	f000 fa0f 	bl	800f834 <_Balloc>
 800f416:	4605      	mov	r5, r0
 800f418:	b928      	cbnz	r0, 800f426 <_dtoa_r+0x9d6>
 800f41a:	4b83      	ldr	r3, [pc, #524]	; (800f628 <_dtoa_r+0xbd8>)
 800f41c:	4602      	mov	r2, r0
 800f41e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f422:	f7ff bb2e 	b.w	800ea82 <_dtoa_r+0x32>
 800f426:	693a      	ldr	r2, [r7, #16]
 800f428:	3202      	adds	r2, #2
 800f42a:	0092      	lsls	r2, r2, #2
 800f42c:	f107 010c 	add.w	r1, r7, #12
 800f430:	300c      	adds	r0, #12
 800f432:	f000 fe39 	bl	80100a8 <memcpy>
 800f436:	2201      	movs	r2, #1
 800f438:	4629      	mov	r1, r5
 800f43a:	4620      	mov	r0, r4
 800f43c:	f000 fc0a 	bl	800fc54 <__lshift>
 800f440:	9b00      	ldr	r3, [sp, #0]
 800f442:	3301      	adds	r3, #1
 800f444:	9304      	str	r3, [sp, #16]
 800f446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f44a:	4413      	add	r3, r2
 800f44c:	9308      	str	r3, [sp, #32]
 800f44e:	9b02      	ldr	r3, [sp, #8]
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	46b8      	mov	r8, r7
 800f456:	9306      	str	r3, [sp, #24]
 800f458:	4607      	mov	r7, r0
 800f45a:	9b04      	ldr	r3, [sp, #16]
 800f45c:	4631      	mov	r1, r6
 800f45e:	3b01      	subs	r3, #1
 800f460:	4650      	mov	r0, sl
 800f462:	9301      	str	r3, [sp, #4]
 800f464:	f7ff fa69 	bl	800e93a <quorem>
 800f468:	4641      	mov	r1, r8
 800f46a:	9002      	str	r0, [sp, #8]
 800f46c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f470:	4650      	mov	r0, sl
 800f472:	f000 fc5b 	bl	800fd2c <__mcmp>
 800f476:	463a      	mov	r2, r7
 800f478:	9005      	str	r0, [sp, #20]
 800f47a:	4631      	mov	r1, r6
 800f47c:	4620      	mov	r0, r4
 800f47e:	f000 fc71 	bl	800fd64 <__mdiff>
 800f482:	68c2      	ldr	r2, [r0, #12]
 800f484:	4605      	mov	r5, r0
 800f486:	bb02      	cbnz	r2, 800f4ca <_dtoa_r+0xa7a>
 800f488:	4601      	mov	r1, r0
 800f48a:	4650      	mov	r0, sl
 800f48c:	f000 fc4e 	bl	800fd2c <__mcmp>
 800f490:	4602      	mov	r2, r0
 800f492:	4629      	mov	r1, r5
 800f494:	4620      	mov	r0, r4
 800f496:	9209      	str	r2, [sp, #36]	; 0x24
 800f498:	f000 fa0c 	bl	800f8b4 <_Bfree>
 800f49c:	9b07      	ldr	r3, [sp, #28]
 800f49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4a0:	9d04      	ldr	r5, [sp, #16]
 800f4a2:	ea43 0102 	orr.w	r1, r3, r2
 800f4a6:	9b06      	ldr	r3, [sp, #24]
 800f4a8:	4319      	orrs	r1, r3
 800f4aa:	d110      	bne.n	800f4ce <_dtoa_r+0xa7e>
 800f4ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f4b0:	d029      	beq.n	800f506 <_dtoa_r+0xab6>
 800f4b2:	9b05      	ldr	r3, [sp, #20]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dd02      	ble.n	800f4be <_dtoa_r+0xa6e>
 800f4b8:	9b02      	ldr	r3, [sp, #8]
 800f4ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f4be:	9b01      	ldr	r3, [sp, #4]
 800f4c0:	f883 9000 	strb.w	r9, [r3]
 800f4c4:	e774      	b.n	800f3b0 <_dtoa_r+0x960>
 800f4c6:	4638      	mov	r0, r7
 800f4c8:	e7ba      	b.n	800f440 <_dtoa_r+0x9f0>
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	e7e1      	b.n	800f492 <_dtoa_r+0xa42>
 800f4ce:	9b05      	ldr	r3, [sp, #20]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	db04      	blt.n	800f4de <_dtoa_r+0xa8e>
 800f4d4:	9907      	ldr	r1, [sp, #28]
 800f4d6:	430b      	orrs	r3, r1
 800f4d8:	9906      	ldr	r1, [sp, #24]
 800f4da:	430b      	orrs	r3, r1
 800f4dc:	d120      	bne.n	800f520 <_dtoa_r+0xad0>
 800f4de:	2a00      	cmp	r2, #0
 800f4e0:	dded      	ble.n	800f4be <_dtoa_r+0xa6e>
 800f4e2:	4651      	mov	r1, sl
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f000 fbb4 	bl	800fc54 <__lshift>
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	4682      	mov	sl, r0
 800f4f0:	f000 fc1c 	bl	800fd2c <__mcmp>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	dc03      	bgt.n	800f500 <_dtoa_r+0xab0>
 800f4f8:	d1e1      	bne.n	800f4be <_dtoa_r+0xa6e>
 800f4fa:	f019 0f01 	tst.w	r9, #1
 800f4fe:	d0de      	beq.n	800f4be <_dtoa_r+0xa6e>
 800f500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f504:	d1d8      	bne.n	800f4b8 <_dtoa_r+0xa68>
 800f506:	9a01      	ldr	r2, [sp, #4]
 800f508:	2339      	movs	r3, #57	; 0x39
 800f50a:	7013      	strb	r3, [r2, #0]
 800f50c:	462b      	mov	r3, r5
 800f50e:	461d      	mov	r5, r3
 800f510:	3b01      	subs	r3, #1
 800f512:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f516:	2a39      	cmp	r2, #57	; 0x39
 800f518:	d06c      	beq.n	800f5f4 <_dtoa_r+0xba4>
 800f51a:	3201      	adds	r2, #1
 800f51c:	701a      	strb	r2, [r3, #0]
 800f51e:	e747      	b.n	800f3b0 <_dtoa_r+0x960>
 800f520:	2a00      	cmp	r2, #0
 800f522:	dd07      	ble.n	800f534 <_dtoa_r+0xae4>
 800f524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f528:	d0ed      	beq.n	800f506 <_dtoa_r+0xab6>
 800f52a:	9a01      	ldr	r2, [sp, #4]
 800f52c:	f109 0301 	add.w	r3, r9, #1
 800f530:	7013      	strb	r3, [r2, #0]
 800f532:	e73d      	b.n	800f3b0 <_dtoa_r+0x960>
 800f534:	9b04      	ldr	r3, [sp, #16]
 800f536:	9a08      	ldr	r2, [sp, #32]
 800f538:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d043      	beq.n	800f5c8 <_dtoa_r+0xb78>
 800f540:	4651      	mov	r1, sl
 800f542:	2300      	movs	r3, #0
 800f544:	220a      	movs	r2, #10
 800f546:	4620      	mov	r0, r4
 800f548:	f000 f9d6 	bl	800f8f8 <__multadd>
 800f54c:	45b8      	cmp	r8, r7
 800f54e:	4682      	mov	sl, r0
 800f550:	f04f 0300 	mov.w	r3, #0
 800f554:	f04f 020a 	mov.w	r2, #10
 800f558:	4641      	mov	r1, r8
 800f55a:	4620      	mov	r0, r4
 800f55c:	d107      	bne.n	800f56e <_dtoa_r+0xb1e>
 800f55e:	f000 f9cb 	bl	800f8f8 <__multadd>
 800f562:	4680      	mov	r8, r0
 800f564:	4607      	mov	r7, r0
 800f566:	9b04      	ldr	r3, [sp, #16]
 800f568:	3301      	adds	r3, #1
 800f56a:	9304      	str	r3, [sp, #16]
 800f56c:	e775      	b.n	800f45a <_dtoa_r+0xa0a>
 800f56e:	f000 f9c3 	bl	800f8f8 <__multadd>
 800f572:	4639      	mov	r1, r7
 800f574:	4680      	mov	r8, r0
 800f576:	2300      	movs	r3, #0
 800f578:	220a      	movs	r2, #10
 800f57a:	4620      	mov	r0, r4
 800f57c:	f000 f9bc 	bl	800f8f8 <__multadd>
 800f580:	4607      	mov	r7, r0
 800f582:	e7f0      	b.n	800f566 <_dtoa_r+0xb16>
 800f584:	9b04      	ldr	r3, [sp, #16]
 800f586:	9301      	str	r3, [sp, #4]
 800f588:	9d00      	ldr	r5, [sp, #0]
 800f58a:	4631      	mov	r1, r6
 800f58c:	4650      	mov	r0, sl
 800f58e:	f7ff f9d4 	bl	800e93a <quorem>
 800f592:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f596:	9b00      	ldr	r3, [sp, #0]
 800f598:	f805 9b01 	strb.w	r9, [r5], #1
 800f59c:	1aea      	subs	r2, r5, r3
 800f59e:	9b01      	ldr	r3, [sp, #4]
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	dd07      	ble.n	800f5b4 <_dtoa_r+0xb64>
 800f5a4:	4651      	mov	r1, sl
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	220a      	movs	r2, #10
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f000 f9a4 	bl	800f8f8 <__multadd>
 800f5b0:	4682      	mov	sl, r0
 800f5b2:	e7ea      	b.n	800f58a <_dtoa_r+0xb3a>
 800f5b4:	9b01      	ldr	r3, [sp, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bfc8      	it	gt
 800f5ba:	461d      	movgt	r5, r3
 800f5bc:	9b00      	ldr	r3, [sp, #0]
 800f5be:	bfd8      	it	le
 800f5c0:	2501      	movle	r5, #1
 800f5c2:	441d      	add	r5, r3
 800f5c4:	f04f 0800 	mov.w	r8, #0
 800f5c8:	4651      	mov	r1, sl
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f000 fb41 	bl	800fc54 <__lshift>
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	4682      	mov	sl, r0
 800f5d6:	f000 fba9 	bl	800fd2c <__mcmp>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	dc96      	bgt.n	800f50c <_dtoa_r+0xabc>
 800f5de:	d102      	bne.n	800f5e6 <_dtoa_r+0xb96>
 800f5e0:	f019 0f01 	tst.w	r9, #1
 800f5e4:	d192      	bne.n	800f50c <_dtoa_r+0xabc>
 800f5e6:	462b      	mov	r3, r5
 800f5e8:	461d      	mov	r5, r3
 800f5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5ee:	2a30      	cmp	r2, #48	; 0x30
 800f5f0:	d0fa      	beq.n	800f5e8 <_dtoa_r+0xb98>
 800f5f2:	e6dd      	b.n	800f3b0 <_dtoa_r+0x960>
 800f5f4:	9a00      	ldr	r2, [sp, #0]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d189      	bne.n	800f50e <_dtoa_r+0xabe>
 800f5fa:	f10b 0b01 	add.w	fp, fp, #1
 800f5fe:	2331      	movs	r3, #49	; 0x31
 800f600:	e796      	b.n	800f530 <_dtoa_r+0xae0>
 800f602:	4b0a      	ldr	r3, [pc, #40]	; (800f62c <_dtoa_r+0xbdc>)
 800f604:	f7ff ba99 	b.w	800eb3a <_dtoa_r+0xea>
 800f608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f47f aa6d 	bne.w	800eaea <_dtoa_r+0x9a>
 800f610:	4b07      	ldr	r3, [pc, #28]	; (800f630 <_dtoa_r+0xbe0>)
 800f612:	f7ff ba92 	b.w	800eb3a <_dtoa_r+0xea>
 800f616:	9b01      	ldr	r3, [sp, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	dcb5      	bgt.n	800f588 <_dtoa_r+0xb38>
 800f61c:	9b07      	ldr	r3, [sp, #28]
 800f61e:	2b02      	cmp	r3, #2
 800f620:	f73f aeb1 	bgt.w	800f386 <_dtoa_r+0x936>
 800f624:	e7b0      	b.n	800f588 <_dtoa_r+0xb38>
 800f626:	bf00      	nop
 800f628:	08024a78 	.word	0x08024a78
 800f62c:	080249d8 	.word	0x080249d8
 800f630:	080249fc 	.word	0x080249fc

0800f634 <_free_r>:
 800f634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f636:	2900      	cmp	r1, #0
 800f638:	d044      	beq.n	800f6c4 <_free_r+0x90>
 800f63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f63e:	9001      	str	r0, [sp, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	f1a1 0404 	sub.w	r4, r1, #4
 800f646:	bfb8      	it	lt
 800f648:	18e4      	addlt	r4, r4, r3
 800f64a:	f000 f8e7 	bl	800f81c <__malloc_lock>
 800f64e:	4a1e      	ldr	r2, [pc, #120]	; (800f6c8 <_free_r+0x94>)
 800f650:	9801      	ldr	r0, [sp, #4]
 800f652:	6813      	ldr	r3, [r2, #0]
 800f654:	b933      	cbnz	r3, 800f664 <_free_r+0x30>
 800f656:	6063      	str	r3, [r4, #4]
 800f658:	6014      	str	r4, [r2, #0]
 800f65a:	b003      	add	sp, #12
 800f65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f660:	f000 b8e2 	b.w	800f828 <__malloc_unlock>
 800f664:	42a3      	cmp	r3, r4
 800f666:	d908      	bls.n	800f67a <_free_r+0x46>
 800f668:	6825      	ldr	r5, [r4, #0]
 800f66a:	1961      	adds	r1, r4, r5
 800f66c:	428b      	cmp	r3, r1
 800f66e:	bf01      	itttt	eq
 800f670:	6819      	ldreq	r1, [r3, #0]
 800f672:	685b      	ldreq	r3, [r3, #4]
 800f674:	1949      	addeq	r1, r1, r5
 800f676:	6021      	streq	r1, [r4, #0]
 800f678:	e7ed      	b.n	800f656 <_free_r+0x22>
 800f67a:	461a      	mov	r2, r3
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	b10b      	cbz	r3, 800f684 <_free_r+0x50>
 800f680:	42a3      	cmp	r3, r4
 800f682:	d9fa      	bls.n	800f67a <_free_r+0x46>
 800f684:	6811      	ldr	r1, [r2, #0]
 800f686:	1855      	adds	r5, r2, r1
 800f688:	42a5      	cmp	r5, r4
 800f68a:	d10b      	bne.n	800f6a4 <_free_r+0x70>
 800f68c:	6824      	ldr	r4, [r4, #0]
 800f68e:	4421      	add	r1, r4
 800f690:	1854      	adds	r4, r2, r1
 800f692:	42a3      	cmp	r3, r4
 800f694:	6011      	str	r1, [r2, #0]
 800f696:	d1e0      	bne.n	800f65a <_free_r+0x26>
 800f698:	681c      	ldr	r4, [r3, #0]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	6053      	str	r3, [r2, #4]
 800f69e:	440c      	add	r4, r1
 800f6a0:	6014      	str	r4, [r2, #0]
 800f6a2:	e7da      	b.n	800f65a <_free_r+0x26>
 800f6a4:	d902      	bls.n	800f6ac <_free_r+0x78>
 800f6a6:	230c      	movs	r3, #12
 800f6a8:	6003      	str	r3, [r0, #0]
 800f6aa:	e7d6      	b.n	800f65a <_free_r+0x26>
 800f6ac:	6825      	ldr	r5, [r4, #0]
 800f6ae:	1961      	adds	r1, r4, r5
 800f6b0:	428b      	cmp	r3, r1
 800f6b2:	bf04      	itt	eq
 800f6b4:	6819      	ldreq	r1, [r3, #0]
 800f6b6:	685b      	ldreq	r3, [r3, #4]
 800f6b8:	6063      	str	r3, [r4, #4]
 800f6ba:	bf04      	itt	eq
 800f6bc:	1949      	addeq	r1, r1, r5
 800f6be:	6021      	streq	r1, [r4, #0]
 800f6c0:	6054      	str	r4, [r2, #4]
 800f6c2:	e7ca      	b.n	800f65a <_free_r+0x26>
 800f6c4:	b003      	add	sp, #12
 800f6c6:	bd30      	pop	{r4, r5, pc}
 800f6c8:	2001b824 	.word	0x2001b824

0800f6cc <malloc>:
 800f6cc:	4b02      	ldr	r3, [pc, #8]	; (800f6d8 <malloc+0xc>)
 800f6ce:	4601      	mov	r1, r0
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	f000 b823 	b.w	800f71c <_malloc_r>
 800f6d6:	bf00      	nop
 800f6d8:	200078d0 	.word	0x200078d0

0800f6dc <sbrk_aligned>:
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	4e0e      	ldr	r6, [pc, #56]	; (800f718 <sbrk_aligned+0x3c>)
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	6831      	ldr	r1, [r6, #0]
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	b911      	cbnz	r1, 800f6ee <sbrk_aligned+0x12>
 800f6e8:	f000 fcce 	bl	8010088 <_sbrk_r>
 800f6ec:	6030      	str	r0, [r6, #0]
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	f000 fcc9 	bl	8010088 <_sbrk_r>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	d00a      	beq.n	800f710 <sbrk_aligned+0x34>
 800f6fa:	1cc4      	adds	r4, r0, #3
 800f6fc:	f024 0403 	bic.w	r4, r4, #3
 800f700:	42a0      	cmp	r0, r4
 800f702:	d007      	beq.n	800f714 <sbrk_aligned+0x38>
 800f704:	1a21      	subs	r1, r4, r0
 800f706:	4628      	mov	r0, r5
 800f708:	f000 fcbe 	bl	8010088 <_sbrk_r>
 800f70c:	3001      	adds	r0, #1
 800f70e:	d101      	bne.n	800f714 <sbrk_aligned+0x38>
 800f710:	f04f 34ff 	mov.w	r4, #4294967295
 800f714:	4620      	mov	r0, r4
 800f716:	bd70      	pop	{r4, r5, r6, pc}
 800f718:	2001b828 	.word	0x2001b828

0800f71c <_malloc_r>:
 800f71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f720:	1ccd      	adds	r5, r1, #3
 800f722:	f025 0503 	bic.w	r5, r5, #3
 800f726:	3508      	adds	r5, #8
 800f728:	2d0c      	cmp	r5, #12
 800f72a:	bf38      	it	cc
 800f72c:	250c      	movcc	r5, #12
 800f72e:	2d00      	cmp	r5, #0
 800f730:	4607      	mov	r7, r0
 800f732:	db01      	blt.n	800f738 <_malloc_r+0x1c>
 800f734:	42a9      	cmp	r1, r5
 800f736:	d905      	bls.n	800f744 <_malloc_r+0x28>
 800f738:	230c      	movs	r3, #12
 800f73a:	603b      	str	r3, [r7, #0]
 800f73c:	2600      	movs	r6, #0
 800f73e:	4630      	mov	r0, r6
 800f740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f818 <_malloc_r+0xfc>
 800f748:	f000 f868 	bl	800f81c <__malloc_lock>
 800f74c:	f8d8 3000 	ldr.w	r3, [r8]
 800f750:	461c      	mov	r4, r3
 800f752:	bb5c      	cbnz	r4, 800f7ac <_malloc_r+0x90>
 800f754:	4629      	mov	r1, r5
 800f756:	4638      	mov	r0, r7
 800f758:	f7ff ffc0 	bl	800f6dc <sbrk_aligned>
 800f75c:	1c43      	adds	r3, r0, #1
 800f75e:	4604      	mov	r4, r0
 800f760:	d155      	bne.n	800f80e <_malloc_r+0xf2>
 800f762:	f8d8 4000 	ldr.w	r4, [r8]
 800f766:	4626      	mov	r6, r4
 800f768:	2e00      	cmp	r6, #0
 800f76a:	d145      	bne.n	800f7f8 <_malloc_r+0xdc>
 800f76c:	2c00      	cmp	r4, #0
 800f76e:	d048      	beq.n	800f802 <_malloc_r+0xe6>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	4631      	mov	r1, r6
 800f774:	4638      	mov	r0, r7
 800f776:	eb04 0903 	add.w	r9, r4, r3
 800f77a:	f000 fc85 	bl	8010088 <_sbrk_r>
 800f77e:	4581      	cmp	r9, r0
 800f780:	d13f      	bne.n	800f802 <_malloc_r+0xe6>
 800f782:	6821      	ldr	r1, [r4, #0]
 800f784:	1a6d      	subs	r5, r5, r1
 800f786:	4629      	mov	r1, r5
 800f788:	4638      	mov	r0, r7
 800f78a:	f7ff ffa7 	bl	800f6dc <sbrk_aligned>
 800f78e:	3001      	adds	r0, #1
 800f790:	d037      	beq.n	800f802 <_malloc_r+0xe6>
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	442b      	add	r3, r5
 800f796:	6023      	str	r3, [r4, #0]
 800f798:	f8d8 3000 	ldr.w	r3, [r8]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d038      	beq.n	800f812 <_malloc_r+0xf6>
 800f7a0:	685a      	ldr	r2, [r3, #4]
 800f7a2:	42a2      	cmp	r2, r4
 800f7a4:	d12b      	bne.n	800f7fe <_malloc_r+0xe2>
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	605a      	str	r2, [r3, #4]
 800f7aa:	e00f      	b.n	800f7cc <_malloc_r+0xb0>
 800f7ac:	6822      	ldr	r2, [r4, #0]
 800f7ae:	1b52      	subs	r2, r2, r5
 800f7b0:	d41f      	bmi.n	800f7f2 <_malloc_r+0xd6>
 800f7b2:	2a0b      	cmp	r2, #11
 800f7b4:	d917      	bls.n	800f7e6 <_malloc_r+0xca>
 800f7b6:	1961      	adds	r1, r4, r5
 800f7b8:	42a3      	cmp	r3, r4
 800f7ba:	6025      	str	r5, [r4, #0]
 800f7bc:	bf18      	it	ne
 800f7be:	6059      	strne	r1, [r3, #4]
 800f7c0:	6863      	ldr	r3, [r4, #4]
 800f7c2:	bf08      	it	eq
 800f7c4:	f8c8 1000 	streq.w	r1, [r8]
 800f7c8:	5162      	str	r2, [r4, r5]
 800f7ca:	604b      	str	r3, [r1, #4]
 800f7cc:	4638      	mov	r0, r7
 800f7ce:	f104 060b 	add.w	r6, r4, #11
 800f7d2:	f000 f829 	bl	800f828 <__malloc_unlock>
 800f7d6:	f026 0607 	bic.w	r6, r6, #7
 800f7da:	1d23      	adds	r3, r4, #4
 800f7dc:	1af2      	subs	r2, r6, r3
 800f7de:	d0ae      	beq.n	800f73e <_malloc_r+0x22>
 800f7e0:	1b9b      	subs	r3, r3, r6
 800f7e2:	50a3      	str	r3, [r4, r2]
 800f7e4:	e7ab      	b.n	800f73e <_malloc_r+0x22>
 800f7e6:	42a3      	cmp	r3, r4
 800f7e8:	6862      	ldr	r2, [r4, #4]
 800f7ea:	d1dd      	bne.n	800f7a8 <_malloc_r+0x8c>
 800f7ec:	f8c8 2000 	str.w	r2, [r8]
 800f7f0:	e7ec      	b.n	800f7cc <_malloc_r+0xb0>
 800f7f2:	4623      	mov	r3, r4
 800f7f4:	6864      	ldr	r4, [r4, #4]
 800f7f6:	e7ac      	b.n	800f752 <_malloc_r+0x36>
 800f7f8:	4634      	mov	r4, r6
 800f7fa:	6876      	ldr	r6, [r6, #4]
 800f7fc:	e7b4      	b.n	800f768 <_malloc_r+0x4c>
 800f7fe:	4613      	mov	r3, r2
 800f800:	e7cc      	b.n	800f79c <_malloc_r+0x80>
 800f802:	230c      	movs	r3, #12
 800f804:	603b      	str	r3, [r7, #0]
 800f806:	4638      	mov	r0, r7
 800f808:	f000 f80e 	bl	800f828 <__malloc_unlock>
 800f80c:	e797      	b.n	800f73e <_malloc_r+0x22>
 800f80e:	6025      	str	r5, [r4, #0]
 800f810:	e7dc      	b.n	800f7cc <_malloc_r+0xb0>
 800f812:	605b      	str	r3, [r3, #4]
 800f814:	deff      	udf	#255	; 0xff
 800f816:	bf00      	nop
 800f818:	2001b824 	.word	0x2001b824

0800f81c <__malloc_lock>:
 800f81c:	4801      	ldr	r0, [pc, #4]	; (800f824 <__malloc_lock+0x8>)
 800f81e:	f7ff b88a 	b.w	800e936 <__retarget_lock_acquire_recursive>
 800f822:	bf00      	nop
 800f824:	2001b820 	.word	0x2001b820

0800f828 <__malloc_unlock>:
 800f828:	4801      	ldr	r0, [pc, #4]	; (800f830 <__malloc_unlock+0x8>)
 800f82a:	f7ff b885 	b.w	800e938 <__retarget_lock_release_recursive>
 800f82e:	bf00      	nop
 800f830:	2001b820 	.word	0x2001b820

0800f834 <_Balloc>:
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	69c6      	ldr	r6, [r0, #28]
 800f838:	4604      	mov	r4, r0
 800f83a:	460d      	mov	r5, r1
 800f83c:	b976      	cbnz	r6, 800f85c <_Balloc+0x28>
 800f83e:	2010      	movs	r0, #16
 800f840:	f7ff ff44 	bl	800f6cc <malloc>
 800f844:	4602      	mov	r2, r0
 800f846:	61e0      	str	r0, [r4, #28]
 800f848:	b920      	cbnz	r0, 800f854 <_Balloc+0x20>
 800f84a:	4b18      	ldr	r3, [pc, #96]	; (800f8ac <_Balloc+0x78>)
 800f84c:	4818      	ldr	r0, [pc, #96]	; (800f8b0 <_Balloc+0x7c>)
 800f84e:	216b      	movs	r1, #107	; 0x6b
 800f850:	f000 fc38 	bl	80100c4 <__assert_func>
 800f854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f858:	6006      	str	r6, [r0, #0]
 800f85a:	60c6      	str	r6, [r0, #12]
 800f85c:	69e6      	ldr	r6, [r4, #28]
 800f85e:	68f3      	ldr	r3, [r6, #12]
 800f860:	b183      	cbz	r3, 800f884 <_Balloc+0x50>
 800f862:	69e3      	ldr	r3, [r4, #28]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f86a:	b9b8      	cbnz	r0, 800f89c <_Balloc+0x68>
 800f86c:	2101      	movs	r1, #1
 800f86e:	fa01 f605 	lsl.w	r6, r1, r5
 800f872:	1d72      	adds	r2, r6, #5
 800f874:	0092      	lsls	r2, r2, #2
 800f876:	4620      	mov	r0, r4
 800f878:	f000 fc42 	bl	8010100 <_calloc_r>
 800f87c:	b160      	cbz	r0, 800f898 <_Balloc+0x64>
 800f87e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f882:	e00e      	b.n	800f8a2 <_Balloc+0x6e>
 800f884:	2221      	movs	r2, #33	; 0x21
 800f886:	2104      	movs	r1, #4
 800f888:	4620      	mov	r0, r4
 800f88a:	f000 fc39 	bl	8010100 <_calloc_r>
 800f88e:	69e3      	ldr	r3, [r4, #28]
 800f890:	60f0      	str	r0, [r6, #12]
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1e4      	bne.n	800f862 <_Balloc+0x2e>
 800f898:	2000      	movs	r0, #0
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	6802      	ldr	r2, [r0, #0]
 800f89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8a8:	e7f7      	b.n	800f89a <_Balloc+0x66>
 800f8aa:	bf00      	nop
 800f8ac:	08024a09 	.word	0x08024a09
 800f8b0:	08024a89 	.word	0x08024a89

0800f8b4 <_Bfree>:
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	69c6      	ldr	r6, [r0, #28]
 800f8b8:	4605      	mov	r5, r0
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	b976      	cbnz	r6, 800f8dc <_Bfree+0x28>
 800f8be:	2010      	movs	r0, #16
 800f8c0:	f7ff ff04 	bl	800f6cc <malloc>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	61e8      	str	r0, [r5, #28]
 800f8c8:	b920      	cbnz	r0, 800f8d4 <_Bfree+0x20>
 800f8ca:	4b09      	ldr	r3, [pc, #36]	; (800f8f0 <_Bfree+0x3c>)
 800f8cc:	4809      	ldr	r0, [pc, #36]	; (800f8f4 <_Bfree+0x40>)
 800f8ce:	218f      	movs	r1, #143	; 0x8f
 800f8d0:	f000 fbf8 	bl	80100c4 <__assert_func>
 800f8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8d8:	6006      	str	r6, [r0, #0]
 800f8da:	60c6      	str	r6, [r0, #12]
 800f8dc:	b13c      	cbz	r4, 800f8ee <_Bfree+0x3a>
 800f8de:	69eb      	ldr	r3, [r5, #28]
 800f8e0:	6862      	ldr	r2, [r4, #4]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8e8:	6021      	str	r1, [r4, #0]
 800f8ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8ee:	bd70      	pop	{r4, r5, r6, pc}
 800f8f0:	08024a09 	.word	0x08024a09
 800f8f4:	08024a89 	.word	0x08024a89

0800f8f8 <__multadd>:
 800f8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fc:	690d      	ldr	r5, [r1, #16]
 800f8fe:	4607      	mov	r7, r0
 800f900:	460c      	mov	r4, r1
 800f902:	461e      	mov	r6, r3
 800f904:	f101 0c14 	add.w	ip, r1, #20
 800f908:	2000      	movs	r0, #0
 800f90a:	f8dc 3000 	ldr.w	r3, [ip]
 800f90e:	b299      	uxth	r1, r3
 800f910:	fb02 6101 	mla	r1, r2, r1, r6
 800f914:	0c1e      	lsrs	r6, r3, #16
 800f916:	0c0b      	lsrs	r3, r1, #16
 800f918:	fb02 3306 	mla	r3, r2, r6, r3
 800f91c:	b289      	uxth	r1, r1
 800f91e:	3001      	adds	r0, #1
 800f920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f924:	4285      	cmp	r5, r0
 800f926:	f84c 1b04 	str.w	r1, [ip], #4
 800f92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f92e:	dcec      	bgt.n	800f90a <__multadd+0x12>
 800f930:	b30e      	cbz	r6, 800f976 <__multadd+0x7e>
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	42ab      	cmp	r3, r5
 800f936:	dc19      	bgt.n	800f96c <__multadd+0x74>
 800f938:	6861      	ldr	r1, [r4, #4]
 800f93a:	4638      	mov	r0, r7
 800f93c:	3101      	adds	r1, #1
 800f93e:	f7ff ff79 	bl	800f834 <_Balloc>
 800f942:	4680      	mov	r8, r0
 800f944:	b928      	cbnz	r0, 800f952 <__multadd+0x5a>
 800f946:	4602      	mov	r2, r0
 800f948:	4b0c      	ldr	r3, [pc, #48]	; (800f97c <__multadd+0x84>)
 800f94a:	480d      	ldr	r0, [pc, #52]	; (800f980 <__multadd+0x88>)
 800f94c:	21ba      	movs	r1, #186	; 0xba
 800f94e:	f000 fbb9 	bl	80100c4 <__assert_func>
 800f952:	6922      	ldr	r2, [r4, #16]
 800f954:	3202      	adds	r2, #2
 800f956:	f104 010c 	add.w	r1, r4, #12
 800f95a:	0092      	lsls	r2, r2, #2
 800f95c:	300c      	adds	r0, #12
 800f95e:	f000 fba3 	bl	80100a8 <memcpy>
 800f962:	4621      	mov	r1, r4
 800f964:	4638      	mov	r0, r7
 800f966:	f7ff ffa5 	bl	800f8b4 <_Bfree>
 800f96a:	4644      	mov	r4, r8
 800f96c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f970:	3501      	adds	r5, #1
 800f972:	615e      	str	r6, [r3, #20]
 800f974:	6125      	str	r5, [r4, #16]
 800f976:	4620      	mov	r0, r4
 800f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f97c:	08024a78 	.word	0x08024a78
 800f980:	08024a89 	.word	0x08024a89

0800f984 <__hi0bits>:
 800f984:	0c03      	lsrs	r3, r0, #16
 800f986:	041b      	lsls	r3, r3, #16
 800f988:	b9d3      	cbnz	r3, 800f9c0 <__hi0bits+0x3c>
 800f98a:	0400      	lsls	r0, r0, #16
 800f98c:	2310      	movs	r3, #16
 800f98e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f992:	bf04      	itt	eq
 800f994:	0200      	lsleq	r0, r0, #8
 800f996:	3308      	addeq	r3, #8
 800f998:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f99c:	bf04      	itt	eq
 800f99e:	0100      	lsleq	r0, r0, #4
 800f9a0:	3304      	addeq	r3, #4
 800f9a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f9a6:	bf04      	itt	eq
 800f9a8:	0080      	lsleq	r0, r0, #2
 800f9aa:	3302      	addeq	r3, #2
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	db05      	blt.n	800f9bc <__hi0bits+0x38>
 800f9b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f9b4:	f103 0301 	add.w	r3, r3, #1
 800f9b8:	bf08      	it	eq
 800f9ba:	2320      	moveq	r3, #32
 800f9bc:	4618      	mov	r0, r3
 800f9be:	4770      	bx	lr
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	e7e4      	b.n	800f98e <__hi0bits+0xa>

0800f9c4 <__lo0bits>:
 800f9c4:	6803      	ldr	r3, [r0, #0]
 800f9c6:	f013 0207 	ands.w	r2, r3, #7
 800f9ca:	d00c      	beq.n	800f9e6 <__lo0bits+0x22>
 800f9cc:	07d9      	lsls	r1, r3, #31
 800f9ce:	d422      	bmi.n	800fa16 <__lo0bits+0x52>
 800f9d0:	079a      	lsls	r2, r3, #30
 800f9d2:	bf49      	itett	mi
 800f9d4:	085b      	lsrmi	r3, r3, #1
 800f9d6:	089b      	lsrpl	r3, r3, #2
 800f9d8:	6003      	strmi	r3, [r0, #0]
 800f9da:	2201      	movmi	r2, #1
 800f9dc:	bf5c      	itt	pl
 800f9de:	6003      	strpl	r3, [r0, #0]
 800f9e0:	2202      	movpl	r2, #2
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	4770      	bx	lr
 800f9e6:	b299      	uxth	r1, r3
 800f9e8:	b909      	cbnz	r1, 800f9ee <__lo0bits+0x2a>
 800f9ea:	0c1b      	lsrs	r3, r3, #16
 800f9ec:	2210      	movs	r2, #16
 800f9ee:	b2d9      	uxtb	r1, r3
 800f9f0:	b909      	cbnz	r1, 800f9f6 <__lo0bits+0x32>
 800f9f2:	3208      	adds	r2, #8
 800f9f4:	0a1b      	lsrs	r3, r3, #8
 800f9f6:	0719      	lsls	r1, r3, #28
 800f9f8:	bf04      	itt	eq
 800f9fa:	091b      	lsreq	r3, r3, #4
 800f9fc:	3204      	addeq	r2, #4
 800f9fe:	0799      	lsls	r1, r3, #30
 800fa00:	bf04      	itt	eq
 800fa02:	089b      	lsreq	r3, r3, #2
 800fa04:	3202      	addeq	r2, #2
 800fa06:	07d9      	lsls	r1, r3, #31
 800fa08:	d403      	bmi.n	800fa12 <__lo0bits+0x4e>
 800fa0a:	085b      	lsrs	r3, r3, #1
 800fa0c:	f102 0201 	add.w	r2, r2, #1
 800fa10:	d003      	beq.n	800fa1a <__lo0bits+0x56>
 800fa12:	6003      	str	r3, [r0, #0]
 800fa14:	e7e5      	b.n	800f9e2 <__lo0bits+0x1e>
 800fa16:	2200      	movs	r2, #0
 800fa18:	e7e3      	b.n	800f9e2 <__lo0bits+0x1e>
 800fa1a:	2220      	movs	r2, #32
 800fa1c:	e7e1      	b.n	800f9e2 <__lo0bits+0x1e>
	...

0800fa20 <__i2b>:
 800fa20:	b510      	push	{r4, lr}
 800fa22:	460c      	mov	r4, r1
 800fa24:	2101      	movs	r1, #1
 800fa26:	f7ff ff05 	bl	800f834 <_Balloc>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	b928      	cbnz	r0, 800fa3a <__i2b+0x1a>
 800fa2e:	4b05      	ldr	r3, [pc, #20]	; (800fa44 <__i2b+0x24>)
 800fa30:	4805      	ldr	r0, [pc, #20]	; (800fa48 <__i2b+0x28>)
 800fa32:	f240 1145 	movw	r1, #325	; 0x145
 800fa36:	f000 fb45 	bl	80100c4 <__assert_func>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	6144      	str	r4, [r0, #20]
 800fa3e:	6103      	str	r3, [r0, #16]
 800fa40:	bd10      	pop	{r4, pc}
 800fa42:	bf00      	nop
 800fa44:	08024a78 	.word	0x08024a78
 800fa48:	08024a89 	.word	0x08024a89

0800fa4c <__multiply>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	4691      	mov	r9, r2
 800fa52:	690a      	ldr	r2, [r1, #16]
 800fa54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	bfb8      	it	lt
 800fa5c:	460b      	movlt	r3, r1
 800fa5e:	460c      	mov	r4, r1
 800fa60:	bfbc      	itt	lt
 800fa62:	464c      	movlt	r4, r9
 800fa64:	4699      	movlt	r9, r3
 800fa66:	6927      	ldr	r7, [r4, #16]
 800fa68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa6c:	68a3      	ldr	r3, [r4, #8]
 800fa6e:	6861      	ldr	r1, [r4, #4]
 800fa70:	eb07 060a 	add.w	r6, r7, sl
 800fa74:	42b3      	cmp	r3, r6
 800fa76:	b085      	sub	sp, #20
 800fa78:	bfb8      	it	lt
 800fa7a:	3101      	addlt	r1, #1
 800fa7c:	f7ff feda 	bl	800f834 <_Balloc>
 800fa80:	b930      	cbnz	r0, 800fa90 <__multiply+0x44>
 800fa82:	4602      	mov	r2, r0
 800fa84:	4b44      	ldr	r3, [pc, #272]	; (800fb98 <__multiply+0x14c>)
 800fa86:	4845      	ldr	r0, [pc, #276]	; (800fb9c <__multiply+0x150>)
 800fa88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fa8c:	f000 fb1a 	bl	80100c4 <__assert_func>
 800fa90:	f100 0514 	add.w	r5, r0, #20
 800fa94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa98:	462b      	mov	r3, r5
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	4543      	cmp	r3, r8
 800fa9e:	d321      	bcc.n	800fae4 <__multiply+0x98>
 800faa0:	f104 0314 	add.w	r3, r4, #20
 800faa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800faa8:	f109 0314 	add.w	r3, r9, #20
 800faac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fab0:	9202      	str	r2, [sp, #8]
 800fab2:	1b3a      	subs	r2, r7, r4
 800fab4:	3a15      	subs	r2, #21
 800fab6:	f022 0203 	bic.w	r2, r2, #3
 800faba:	3204      	adds	r2, #4
 800fabc:	f104 0115 	add.w	r1, r4, #21
 800fac0:	428f      	cmp	r7, r1
 800fac2:	bf38      	it	cc
 800fac4:	2204      	movcc	r2, #4
 800fac6:	9201      	str	r2, [sp, #4]
 800fac8:	9a02      	ldr	r2, [sp, #8]
 800faca:	9303      	str	r3, [sp, #12]
 800facc:	429a      	cmp	r2, r3
 800face:	d80c      	bhi.n	800faea <__multiply+0x9e>
 800fad0:	2e00      	cmp	r6, #0
 800fad2:	dd03      	ble.n	800fadc <__multiply+0x90>
 800fad4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d05b      	beq.n	800fb94 <__multiply+0x148>
 800fadc:	6106      	str	r6, [r0, #16]
 800fade:	b005      	add	sp, #20
 800fae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae4:	f843 2b04 	str.w	r2, [r3], #4
 800fae8:	e7d8      	b.n	800fa9c <__multiply+0x50>
 800faea:	f8b3 a000 	ldrh.w	sl, [r3]
 800faee:	f1ba 0f00 	cmp.w	sl, #0
 800faf2:	d024      	beq.n	800fb3e <__multiply+0xf2>
 800faf4:	f104 0e14 	add.w	lr, r4, #20
 800faf8:	46a9      	mov	r9, r5
 800fafa:	f04f 0c00 	mov.w	ip, #0
 800fafe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fb02:	f8d9 1000 	ldr.w	r1, [r9]
 800fb06:	fa1f fb82 	uxth.w	fp, r2
 800fb0a:	b289      	uxth	r1, r1
 800fb0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800fb10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fb14:	f8d9 2000 	ldr.w	r2, [r9]
 800fb18:	4461      	add	r1, ip
 800fb1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800fb22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb26:	b289      	uxth	r1, r1
 800fb28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb2c:	4577      	cmp	r7, lr
 800fb2e:	f849 1b04 	str.w	r1, [r9], #4
 800fb32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb36:	d8e2      	bhi.n	800fafe <__multiply+0xb2>
 800fb38:	9a01      	ldr	r2, [sp, #4]
 800fb3a:	f845 c002 	str.w	ip, [r5, r2]
 800fb3e:	9a03      	ldr	r2, [sp, #12]
 800fb40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb44:	3304      	adds	r3, #4
 800fb46:	f1b9 0f00 	cmp.w	r9, #0
 800fb4a:	d021      	beq.n	800fb90 <__multiply+0x144>
 800fb4c:	6829      	ldr	r1, [r5, #0]
 800fb4e:	f104 0c14 	add.w	ip, r4, #20
 800fb52:	46ae      	mov	lr, r5
 800fb54:	f04f 0a00 	mov.w	sl, #0
 800fb58:	f8bc b000 	ldrh.w	fp, [ip]
 800fb5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb60:	fb09 220b 	mla	r2, r9, fp, r2
 800fb64:	4452      	add	r2, sl
 800fb66:	b289      	uxth	r1, r1
 800fb68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb6c:	f84e 1b04 	str.w	r1, [lr], #4
 800fb70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb78:	f8be 1000 	ldrh.w	r1, [lr]
 800fb7c:	fb09 110a 	mla	r1, r9, sl, r1
 800fb80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fb84:	4567      	cmp	r7, ip
 800fb86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb8a:	d8e5      	bhi.n	800fb58 <__multiply+0x10c>
 800fb8c:	9a01      	ldr	r2, [sp, #4]
 800fb8e:	50a9      	str	r1, [r5, r2]
 800fb90:	3504      	adds	r5, #4
 800fb92:	e799      	b.n	800fac8 <__multiply+0x7c>
 800fb94:	3e01      	subs	r6, #1
 800fb96:	e79b      	b.n	800fad0 <__multiply+0x84>
 800fb98:	08024a78 	.word	0x08024a78
 800fb9c:	08024a89 	.word	0x08024a89

0800fba0 <__pow5mult>:
 800fba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fba4:	4615      	mov	r5, r2
 800fba6:	f012 0203 	ands.w	r2, r2, #3
 800fbaa:	4606      	mov	r6, r0
 800fbac:	460f      	mov	r7, r1
 800fbae:	d007      	beq.n	800fbc0 <__pow5mult+0x20>
 800fbb0:	4c25      	ldr	r4, [pc, #148]	; (800fc48 <__pow5mult+0xa8>)
 800fbb2:	3a01      	subs	r2, #1
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbba:	f7ff fe9d 	bl	800f8f8 <__multadd>
 800fbbe:	4607      	mov	r7, r0
 800fbc0:	10ad      	asrs	r5, r5, #2
 800fbc2:	d03d      	beq.n	800fc40 <__pow5mult+0xa0>
 800fbc4:	69f4      	ldr	r4, [r6, #28]
 800fbc6:	b97c      	cbnz	r4, 800fbe8 <__pow5mult+0x48>
 800fbc8:	2010      	movs	r0, #16
 800fbca:	f7ff fd7f 	bl	800f6cc <malloc>
 800fbce:	4602      	mov	r2, r0
 800fbd0:	61f0      	str	r0, [r6, #28]
 800fbd2:	b928      	cbnz	r0, 800fbe0 <__pow5mult+0x40>
 800fbd4:	4b1d      	ldr	r3, [pc, #116]	; (800fc4c <__pow5mult+0xac>)
 800fbd6:	481e      	ldr	r0, [pc, #120]	; (800fc50 <__pow5mult+0xb0>)
 800fbd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fbdc:	f000 fa72 	bl	80100c4 <__assert_func>
 800fbe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbe4:	6004      	str	r4, [r0, #0]
 800fbe6:	60c4      	str	r4, [r0, #12]
 800fbe8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fbec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbf0:	b94c      	cbnz	r4, 800fc06 <__pow5mult+0x66>
 800fbf2:	f240 2171 	movw	r1, #625	; 0x271
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	f7ff ff12 	bl	800fa20 <__i2b>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc02:	4604      	mov	r4, r0
 800fc04:	6003      	str	r3, [r0, #0]
 800fc06:	f04f 0900 	mov.w	r9, #0
 800fc0a:	07eb      	lsls	r3, r5, #31
 800fc0c:	d50a      	bpl.n	800fc24 <__pow5mult+0x84>
 800fc0e:	4639      	mov	r1, r7
 800fc10:	4622      	mov	r2, r4
 800fc12:	4630      	mov	r0, r6
 800fc14:	f7ff ff1a 	bl	800fa4c <__multiply>
 800fc18:	4639      	mov	r1, r7
 800fc1a:	4680      	mov	r8, r0
 800fc1c:	4630      	mov	r0, r6
 800fc1e:	f7ff fe49 	bl	800f8b4 <_Bfree>
 800fc22:	4647      	mov	r7, r8
 800fc24:	106d      	asrs	r5, r5, #1
 800fc26:	d00b      	beq.n	800fc40 <__pow5mult+0xa0>
 800fc28:	6820      	ldr	r0, [r4, #0]
 800fc2a:	b938      	cbnz	r0, 800fc3c <__pow5mult+0x9c>
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	4621      	mov	r1, r4
 800fc30:	4630      	mov	r0, r6
 800fc32:	f7ff ff0b 	bl	800fa4c <__multiply>
 800fc36:	6020      	str	r0, [r4, #0]
 800fc38:	f8c0 9000 	str.w	r9, [r0]
 800fc3c:	4604      	mov	r4, r0
 800fc3e:	e7e4      	b.n	800fc0a <__pow5mult+0x6a>
 800fc40:	4638      	mov	r0, r7
 800fc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc46:	bf00      	nop
 800fc48:	08024bd8 	.word	0x08024bd8
 800fc4c:	08024a09 	.word	0x08024a09
 800fc50:	08024a89 	.word	0x08024a89

0800fc54 <__lshift>:
 800fc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc58:	460c      	mov	r4, r1
 800fc5a:	6849      	ldr	r1, [r1, #4]
 800fc5c:	6923      	ldr	r3, [r4, #16]
 800fc5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc62:	68a3      	ldr	r3, [r4, #8]
 800fc64:	4607      	mov	r7, r0
 800fc66:	4691      	mov	r9, r2
 800fc68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc6c:	f108 0601 	add.w	r6, r8, #1
 800fc70:	42b3      	cmp	r3, r6
 800fc72:	db0b      	blt.n	800fc8c <__lshift+0x38>
 800fc74:	4638      	mov	r0, r7
 800fc76:	f7ff fddd 	bl	800f834 <_Balloc>
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	b948      	cbnz	r0, 800fc92 <__lshift+0x3e>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	4b28      	ldr	r3, [pc, #160]	; (800fd24 <__lshift+0xd0>)
 800fc82:	4829      	ldr	r0, [pc, #164]	; (800fd28 <__lshift+0xd4>)
 800fc84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fc88:	f000 fa1c 	bl	80100c4 <__assert_func>
 800fc8c:	3101      	adds	r1, #1
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	e7ee      	b.n	800fc70 <__lshift+0x1c>
 800fc92:	2300      	movs	r3, #0
 800fc94:	f100 0114 	add.w	r1, r0, #20
 800fc98:	f100 0210 	add.w	r2, r0, #16
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	4553      	cmp	r3, sl
 800fca0:	db33      	blt.n	800fd0a <__lshift+0xb6>
 800fca2:	6920      	ldr	r0, [r4, #16]
 800fca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fca8:	f104 0314 	add.w	r3, r4, #20
 800fcac:	f019 091f 	ands.w	r9, r9, #31
 800fcb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fcb8:	d02b      	beq.n	800fd12 <__lshift+0xbe>
 800fcba:	f1c9 0e20 	rsb	lr, r9, #32
 800fcbe:	468a      	mov	sl, r1
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	6818      	ldr	r0, [r3, #0]
 800fcc4:	fa00 f009 	lsl.w	r0, r0, r9
 800fcc8:	4310      	orrs	r0, r2
 800fcca:	f84a 0b04 	str.w	r0, [sl], #4
 800fcce:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcd2:	459c      	cmp	ip, r3
 800fcd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fcd8:	d8f3      	bhi.n	800fcc2 <__lshift+0x6e>
 800fcda:	ebac 0304 	sub.w	r3, ip, r4
 800fcde:	3b15      	subs	r3, #21
 800fce0:	f023 0303 	bic.w	r3, r3, #3
 800fce4:	3304      	adds	r3, #4
 800fce6:	f104 0015 	add.w	r0, r4, #21
 800fcea:	4584      	cmp	ip, r0
 800fcec:	bf38      	it	cc
 800fcee:	2304      	movcc	r3, #4
 800fcf0:	50ca      	str	r2, [r1, r3]
 800fcf2:	b10a      	cbz	r2, 800fcf8 <__lshift+0xa4>
 800fcf4:	f108 0602 	add.w	r6, r8, #2
 800fcf8:	3e01      	subs	r6, #1
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	612e      	str	r6, [r5, #16]
 800fcfe:	4621      	mov	r1, r4
 800fd00:	f7ff fdd8 	bl	800f8b4 <_Bfree>
 800fd04:	4628      	mov	r0, r5
 800fd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd0e:	3301      	adds	r3, #1
 800fd10:	e7c5      	b.n	800fc9e <__lshift+0x4a>
 800fd12:	3904      	subs	r1, #4
 800fd14:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd18:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd1c:	459c      	cmp	ip, r3
 800fd1e:	d8f9      	bhi.n	800fd14 <__lshift+0xc0>
 800fd20:	e7ea      	b.n	800fcf8 <__lshift+0xa4>
 800fd22:	bf00      	nop
 800fd24:	08024a78 	.word	0x08024a78
 800fd28:	08024a89 	.word	0x08024a89

0800fd2c <__mcmp>:
 800fd2c:	b530      	push	{r4, r5, lr}
 800fd2e:	6902      	ldr	r2, [r0, #16]
 800fd30:	690c      	ldr	r4, [r1, #16]
 800fd32:	1b12      	subs	r2, r2, r4
 800fd34:	d10e      	bne.n	800fd54 <__mcmp+0x28>
 800fd36:	f100 0314 	add.w	r3, r0, #20
 800fd3a:	3114      	adds	r1, #20
 800fd3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd4c:	42a5      	cmp	r5, r4
 800fd4e:	d003      	beq.n	800fd58 <__mcmp+0x2c>
 800fd50:	d305      	bcc.n	800fd5e <__mcmp+0x32>
 800fd52:	2201      	movs	r2, #1
 800fd54:	4610      	mov	r0, r2
 800fd56:	bd30      	pop	{r4, r5, pc}
 800fd58:	4283      	cmp	r3, r0
 800fd5a:	d3f3      	bcc.n	800fd44 <__mcmp+0x18>
 800fd5c:	e7fa      	b.n	800fd54 <__mcmp+0x28>
 800fd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd62:	e7f7      	b.n	800fd54 <__mcmp+0x28>

0800fd64 <__mdiff>:
 800fd64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd68:	460c      	mov	r4, r1
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4620      	mov	r0, r4
 800fd70:	4690      	mov	r8, r2
 800fd72:	f7ff ffdb 	bl	800fd2c <__mcmp>
 800fd76:	1e05      	subs	r5, r0, #0
 800fd78:	d110      	bne.n	800fd9c <__mdiff+0x38>
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7ff fd59 	bl	800f834 <_Balloc>
 800fd82:	b930      	cbnz	r0, 800fd92 <__mdiff+0x2e>
 800fd84:	4b3a      	ldr	r3, [pc, #232]	; (800fe70 <__mdiff+0x10c>)
 800fd86:	4602      	mov	r2, r0
 800fd88:	f240 2137 	movw	r1, #567	; 0x237
 800fd8c:	4839      	ldr	r0, [pc, #228]	; (800fe74 <__mdiff+0x110>)
 800fd8e:	f000 f999 	bl	80100c4 <__assert_func>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9c:	bfa4      	itt	ge
 800fd9e:	4643      	movge	r3, r8
 800fda0:	46a0      	movge	r8, r4
 800fda2:	4630      	mov	r0, r6
 800fda4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fda8:	bfa6      	itte	ge
 800fdaa:	461c      	movge	r4, r3
 800fdac:	2500      	movge	r5, #0
 800fdae:	2501      	movlt	r5, #1
 800fdb0:	f7ff fd40 	bl	800f834 <_Balloc>
 800fdb4:	b920      	cbnz	r0, 800fdc0 <__mdiff+0x5c>
 800fdb6:	4b2e      	ldr	r3, [pc, #184]	; (800fe70 <__mdiff+0x10c>)
 800fdb8:	4602      	mov	r2, r0
 800fdba:	f240 2145 	movw	r1, #581	; 0x245
 800fdbe:	e7e5      	b.n	800fd8c <__mdiff+0x28>
 800fdc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fdc4:	6926      	ldr	r6, [r4, #16]
 800fdc6:	60c5      	str	r5, [r0, #12]
 800fdc8:	f104 0914 	add.w	r9, r4, #20
 800fdcc:	f108 0514 	add.w	r5, r8, #20
 800fdd0:	f100 0e14 	add.w	lr, r0, #20
 800fdd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fdd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fddc:	f108 0210 	add.w	r2, r8, #16
 800fde0:	46f2      	mov	sl, lr
 800fde2:	2100      	movs	r1, #0
 800fde4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fde8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fdec:	fa11 f88b 	uxtah	r8, r1, fp
 800fdf0:	b299      	uxth	r1, r3
 800fdf2:	0c1b      	lsrs	r3, r3, #16
 800fdf4:	eba8 0801 	sub.w	r8, r8, r1
 800fdf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fe00:	fa1f f888 	uxth.w	r8, r8
 800fe04:	1419      	asrs	r1, r3, #16
 800fe06:	454e      	cmp	r6, r9
 800fe08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe0c:	f84a 3b04 	str.w	r3, [sl], #4
 800fe10:	d8e8      	bhi.n	800fde4 <__mdiff+0x80>
 800fe12:	1b33      	subs	r3, r6, r4
 800fe14:	3b15      	subs	r3, #21
 800fe16:	f023 0303 	bic.w	r3, r3, #3
 800fe1a:	3304      	adds	r3, #4
 800fe1c:	3415      	adds	r4, #21
 800fe1e:	42a6      	cmp	r6, r4
 800fe20:	bf38      	it	cc
 800fe22:	2304      	movcc	r3, #4
 800fe24:	441d      	add	r5, r3
 800fe26:	4473      	add	r3, lr
 800fe28:	469e      	mov	lr, r3
 800fe2a:	462e      	mov	r6, r5
 800fe2c:	4566      	cmp	r6, ip
 800fe2e:	d30e      	bcc.n	800fe4e <__mdiff+0xea>
 800fe30:	f10c 0203 	add.w	r2, ip, #3
 800fe34:	1b52      	subs	r2, r2, r5
 800fe36:	f022 0203 	bic.w	r2, r2, #3
 800fe3a:	3d03      	subs	r5, #3
 800fe3c:	45ac      	cmp	ip, r5
 800fe3e:	bf38      	it	cc
 800fe40:	2200      	movcc	r2, #0
 800fe42:	4413      	add	r3, r2
 800fe44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fe48:	b17a      	cbz	r2, 800fe6a <__mdiff+0x106>
 800fe4a:	6107      	str	r7, [r0, #16]
 800fe4c:	e7a4      	b.n	800fd98 <__mdiff+0x34>
 800fe4e:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe52:	fa11 f288 	uxtah	r2, r1, r8
 800fe56:	1414      	asrs	r4, r2, #16
 800fe58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe5c:	b292      	uxth	r2, r2
 800fe5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe62:	f84e 2b04 	str.w	r2, [lr], #4
 800fe66:	1421      	asrs	r1, r4, #16
 800fe68:	e7e0      	b.n	800fe2c <__mdiff+0xc8>
 800fe6a:	3f01      	subs	r7, #1
 800fe6c:	e7ea      	b.n	800fe44 <__mdiff+0xe0>
 800fe6e:	bf00      	nop
 800fe70:	08024a78 	.word	0x08024a78
 800fe74:	08024a89 	.word	0x08024a89

0800fe78 <__d2b>:
 800fe78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe7c:	460f      	mov	r7, r1
 800fe7e:	2101      	movs	r1, #1
 800fe80:	ec59 8b10 	vmov	r8, r9, d0
 800fe84:	4616      	mov	r6, r2
 800fe86:	f7ff fcd5 	bl	800f834 <_Balloc>
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	b930      	cbnz	r0, 800fe9c <__d2b+0x24>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	4b24      	ldr	r3, [pc, #144]	; (800ff24 <__d2b+0xac>)
 800fe92:	4825      	ldr	r0, [pc, #148]	; (800ff28 <__d2b+0xb0>)
 800fe94:	f240 310f 	movw	r1, #783	; 0x30f
 800fe98:	f000 f914 	bl	80100c4 <__assert_func>
 800fe9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fea4:	bb2d      	cbnz	r5, 800fef2 <__d2b+0x7a>
 800fea6:	9301      	str	r3, [sp, #4]
 800fea8:	f1b8 0300 	subs.w	r3, r8, #0
 800feac:	d026      	beq.n	800fefc <__d2b+0x84>
 800feae:	4668      	mov	r0, sp
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	f7ff fd87 	bl	800f9c4 <__lo0bits>
 800feb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800feba:	b1e8      	cbz	r0, 800fef8 <__d2b+0x80>
 800febc:	f1c0 0320 	rsb	r3, r0, #32
 800fec0:	fa02 f303 	lsl.w	r3, r2, r3
 800fec4:	430b      	orrs	r3, r1
 800fec6:	40c2      	lsrs	r2, r0
 800fec8:	6163      	str	r3, [r4, #20]
 800feca:	9201      	str	r2, [sp, #4]
 800fecc:	9b01      	ldr	r3, [sp, #4]
 800fece:	61a3      	str	r3, [r4, #24]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	bf14      	ite	ne
 800fed4:	2202      	movne	r2, #2
 800fed6:	2201      	moveq	r2, #1
 800fed8:	6122      	str	r2, [r4, #16]
 800feda:	b1bd      	cbz	r5, 800ff0c <__d2b+0x94>
 800fedc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fee0:	4405      	add	r5, r0
 800fee2:	603d      	str	r5, [r7, #0]
 800fee4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fee8:	6030      	str	r0, [r6, #0]
 800feea:	4620      	mov	r0, r4
 800feec:	b003      	add	sp, #12
 800feee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fef6:	e7d6      	b.n	800fea6 <__d2b+0x2e>
 800fef8:	6161      	str	r1, [r4, #20]
 800fefa:	e7e7      	b.n	800fecc <__d2b+0x54>
 800fefc:	a801      	add	r0, sp, #4
 800fefe:	f7ff fd61 	bl	800f9c4 <__lo0bits>
 800ff02:	9b01      	ldr	r3, [sp, #4]
 800ff04:	6163      	str	r3, [r4, #20]
 800ff06:	3020      	adds	r0, #32
 800ff08:	2201      	movs	r2, #1
 800ff0a:	e7e5      	b.n	800fed8 <__d2b+0x60>
 800ff0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff14:	6038      	str	r0, [r7, #0]
 800ff16:	6918      	ldr	r0, [r3, #16]
 800ff18:	f7ff fd34 	bl	800f984 <__hi0bits>
 800ff1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff20:	e7e2      	b.n	800fee8 <__d2b+0x70>
 800ff22:	bf00      	nop
 800ff24:	08024a78 	.word	0x08024a78
 800ff28:	08024a89 	.word	0x08024a89

0800ff2c <__sflush_r>:
 800ff2c:	898a      	ldrh	r2, [r1, #12]
 800ff2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff32:	4605      	mov	r5, r0
 800ff34:	0710      	lsls	r0, r2, #28
 800ff36:	460c      	mov	r4, r1
 800ff38:	d458      	bmi.n	800ffec <__sflush_r+0xc0>
 800ff3a:	684b      	ldr	r3, [r1, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	dc05      	bgt.n	800ff4c <__sflush_r+0x20>
 800ff40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	dc02      	bgt.n	800ff4c <__sflush_r+0x20>
 800ff46:	2000      	movs	r0, #0
 800ff48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff4e:	2e00      	cmp	r6, #0
 800ff50:	d0f9      	beq.n	800ff46 <__sflush_r+0x1a>
 800ff52:	2300      	movs	r3, #0
 800ff54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff58:	682f      	ldr	r7, [r5, #0]
 800ff5a:	6a21      	ldr	r1, [r4, #32]
 800ff5c:	602b      	str	r3, [r5, #0]
 800ff5e:	d032      	beq.n	800ffc6 <__sflush_r+0x9a>
 800ff60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	075a      	lsls	r2, r3, #29
 800ff66:	d505      	bpl.n	800ff74 <__sflush_r+0x48>
 800ff68:	6863      	ldr	r3, [r4, #4]
 800ff6a:	1ac0      	subs	r0, r0, r3
 800ff6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff6e:	b10b      	cbz	r3, 800ff74 <__sflush_r+0x48>
 800ff70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff72:	1ac0      	subs	r0, r0, r3
 800ff74:	2300      	movs	r3, #0
 800ff76:	4602      	mov	r2, r0
 800ff78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff7a:	6a21      	ldr	r1, [r4, #32]
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	47b0      	blx	r6
 800ff80:	1c43      	adds	r3, r0, #1
 800ff82:	89a3      	ldrh	r3, [r4, #12]
 800ff84:	d106      	bne.n	800ff94 <__sflush_r+0x68>
 800ff86:	6829      	ldr	r1, [r5, #0]
 800ff88:	291d      	cmp	r1, #29
 800ff8a:	d82b      	bhi.n	800ffe4 <__sflush_r+0xb8>
 800ff8c:	4a29      	ldr	r2, [pc, #164]	; (8010034 <__sflush_r+0x108>)
 800ff8e:	410a      	asrs	r2, r1
 800ff90:	07d6      	lsls	r6, r2, #31
 800ff92:	d427      	bmi.n	800ffe4 <__sflush_r+0xb8>
 800ff94:	2200      	movs	r2, #0
 800ff96:	6062      	str	r2, [r4, #4]
 800ff98:	04d9      	lsls	r1, r3, #19
 800ff9a:	6922      	ldr	r2, [r4, #16]
 800ff9c:	6022      	str	r2, [r4, #0]
 800ff9e:	d504      	bpl.n	800ffaa <__sflush_r+0x7e>
 800ffa0:	1c42      	adds	r2, r0, #1
 800ffa2:	d101      	bne.n	800ffa8 <__sflush_r+0x7c>
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b903      	cbnz	r3, 800ffaa <__sflush_r+0x7e>
 800ffa8:	6560      	str	r0, [r4, #84]	; 0x54
 800ffaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffac:	602f      	str	r7, [r5, #0]
 800ffae:	2900      	cmp	r1, #0
 800ffb0:	d0c9      	beq.n	800ff46 <__sflush_r+0x1a>
 800ffb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffb6:	4299      	cmp	r1, r3
 800ffb8:	d002      	beq.n	800ffc0 <__sflush_r+0x94>
 800ffba:	4628      	mov	r0, r5
 800ffbc:	f7ff fb3a 	bl	800f634 <_free_r>
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	6360      	str	r0, [r4, #52]	; 0x34
 800ffc4:	e7c0      	b.n	800ff48 <__sflush_r+0x1c>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	4628      	mov	r0, r5
 800ffca:	47b0      	blx	r6
 800ffcc:	1c41      	adds	r1, r0, #1
 800ffce:	d1c8      	bne.n	800ff62 <__sflush_r+0x36>
 800ffd0:	682b      	ldr	r3, [r5, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d0c5      	beq.n	800ff62 <__sflush_r+0x36>
 800ffd6:	2b1d      	cmp	r3, #29
 800ffd8:	d001      	beq.n	800ffde <__sflush_r+0xb2>
 800ffda:	2b16      	cmp	r3, #22
 800ffdc:	d101      	bne.n	800ffe2 <__sflush_r+0xb6>
 800ffde:	602f      	str	r7, [r5, #0]
 800ffe0:	e7b1      	b.n	800ff46 <__sflush_r+0x1a>
 800ffe2:	89a3      	ldrh	r3, [r4, #12]
 800ffe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffe8:	81a3      	strh	r3, [r4, #12]
 800ffea:	e7ad      	b.n	800ff48 <__sflush_r+0x1c>
 800ffec:	690f      	ldr	r7, [r1, #16]
 800ffee:	2f00      	cmp	r7, #0
 800fff0:	d0a9      	beq.n	800ff46 <__sflush_r+0x1a>
 800fff2:	0793      	lsls	r3, r2, #30
 800fff4:	680e      	ldr	r6, [r1, #0]
 800fff6:	bf08      	it	eq
 800fff8:	694b      	ldreq	r3, [r1, #20]
 800fffa:	600f      	str	r7, [r1, #0]
 800fffc:	bf18      	it	ne
 800fffe:	2300      	movne	r3, #0
 8010000:	eba6 0807 	sub.w	r8, r6, r7
 8010004:	608b      	str	r3, [r1, #8]
 8010006:	f1b8 0f00 	cmp.w	r8, #0
 801000a:	dd9c      	ble.n	800ff46 <__sflush_r+0x1a>
 801000c:	6a21      	ldr	r1, [r4, #32]
 801000e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010010:	4643      	mov	r3, r8
 8010012:	463a      	mov	r2, r7
 8010014:	4628      	mov	r0, r5
 8010016:	47b0      	blx	r6
 8010018:	2800      	cmp	r0, #0
 801001a:	dc06      	bgt.n	801002a <__sflush_r+0xfe>
 801001c:	89a3      	ldrh	r3, [r4, #12]
 801001e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010022:	81a3      	strh	r3, [r4, #12]
 8010024:	f04f 30ff 	mov.w	r0, #4294967295
 8010028:	e78e      	b.n	800ff48 <__sflush_r+0x1c>
 801002a:	4407      	add	r7, r0
 801002c:	eba8 0800 	sub.w	r8, r8, r0
 8010030:	e7e9      	b.n	8010006 <__sflush_r+0xda>
 8010032:	bf00      	nop
 8010034:	dfbffffe 	.word	0xdfbffffe

08010038 <_fflush_r>:
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	690b      	ldr	r3, [r1, #16]
 801003c:	4605      	mov	r5, r0
 801003e:	460c      	mov	r4, r1
 8010040:	b913      	cbnz	r3, 8010048 <_fflush_r+0x10>
 8010042:	2500      	movs	r5, #0
 8010044:	4628      	mov	r0, r5
 8010046:	bd38      	pop	{r3, r4, r5, pc}
 8010048:	b118      	cbz	r0, 8010052 <_fflush_r+0x1a>
 801004a:	6a03      	ldr	r3, [r0, #32]
 801004c:	b90b      	cbnz	r3, 8010052 <_fflush_r+0x1a>
 801004e:	f7fe fb7b 	bl	800e748 <__sinit>
 8010052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d0f3      	beq.n	8010042 <_fflush_r+0xa>
 801005a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801005c:	07d0      	lsls	r0, r2, #31
 801005e:	d404      	bmi.n	801006a <_fflush_r+0x32>
 8010060:	0599      	lsls	r1, r3, #22
 8010062:	d402      	bmi.n	801006a <_fflush_r+0x32>
 8010064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010066:	f7fe fc66 	bl	800e936 <__retarget_lock_acquire_recursive>
 801006a:	4628      	mov	r0, r5
 801006c:	4621      	mov	r1, r4
 801006e:	f7ff ff5d 	bl	800ff2c <__sflush_r>
 8010072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010074:	07da      	lsls	r2, r3, #31
 8010076:	4605      	mov	r5, r0
 8010078:	d4e4      	bmi.n	8010044 <_fflush_r+0xc>
 801007a:	89a3      	ldrh	r3, [r4, #12]
 801007c:	059b      	lsls	r3, r3, #22
 801007e:	d4e1      	bmi.n	8010044 <_fflush_r+0xc>
 8010080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010082:	f7fe fc59 	bl	800e938 <__retarget_lock_release_recursive>
 8010086:	e7dd      	b.n	8010044 <_fflush_r+0xc>

08010088 <_sbrk_r>:
 8010088:	b538      	push	{r3, r4, r5, lr}
 801008a:	4d06      	ldr	r5, [pc, #24]	; (80100a4 <_sbrk_r+0x1c>)
 801008c:	2300      	movs	r3, #0
 801008e:	4604      	mov	r4, r0
 8010090:	4608      	mov	r0, r1
 8010092:	602b      	str	r3, [r5, #0]
 8010094:	f7f7 fa3a 	bl	800750c <_sbrk>
 8010098:	1c43      	adds	r3, r0, #1
 801009a:	d102      	bne.n	80100a2 <_sbrk_r+0x1a>
 801009c:	682b      	ldr	r3, [r5, #0]
 801009e:	b103      	cbz	r3, 80100a2 <_sbrk_r+0x1a>
 80100a0:	6023      	str	r3, [r4, #0]
 80100a2:	bd38      	pop	{r3, r4, r5, pc}
 80100a4:	2001b81c 	.word	0x2001b81c

080100a8 <memcpy>:
 80100a8:	440a      	add	r2, r1
 80100aa:	4291      	cmp	r1, r2
 80100ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80100b0:	d100      	bne.n	80100b4 <memcpy+0xc>
 80100b2:	4770      	bx	lr
 80100b4:	b510      	push	{r4, lr}
 80100b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100be:	4291      	cmp	r1, r2
 80100c0:	d1f9      	bne.n	80100b6 <memcpy+0xe>
 80100c2:	bd10      	pop	{r4, pc}

080100c4 <__assert_func>:
 80100c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100c6:	4614      	mov	r4, r2
 80100c8:	461a      	mov	r2, r3
 80100ca:	4b09      	ldr	r3, [pc, #36]	; (80100f0 <__assert_func+0x2c>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4605      	mov	r5, r0
 80100d0:	68d8      	ldr	r0, [r3, #12]
 80100d2:	b14c      	cbz	r4, 80100e8 <__assert_func+0x24>
 80100d4:	4b07      	ldr	r3, [pc, #28]	; (80100f4 <__assert_func+0x30>)
 80100d6:	9100      	str	r1, [sp, #0]
 80100d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80100dc:	4906      	ldr	r1, [pc, #24]	; (80100f8 <__assert_func+0x34>)
 80100de:	462b      	mov	r3, r5
 80100e0:	f000 f844 	bl	801016c <fiprintf>
 80100e4:	f000 f854 	bl	8010190 <abort>
 80100e8:	4b04      	ldr	r3, [pc, #16]	; (80100fc <__assert_func+0x38>)
 80100ea:	461c      	mov	r4, r3
 80100ec:	e7f3      	b.n	80100d6 <__assert_func+0x12>
 80100ee:	bf00      	nop
 80100f0:	200078d0 	.word	0x200078d0
 80100f4:	08024bee 	.word	0x08024bee
 80100f8:	08024bfb 	.word	0x08024bfb
 80100fc:	08024c29 	.word	0x08024c29

08010100 <_calloc_r>:
 8010100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010102:	fba1 2402 	umull	r2, r4, r1, r2
 8010106:	b94c      	cbnz	r4, 801011c <_calloc_r+0x1c>
 8010108:	4611      	mov	r1, r2
 801010a:	9201      	str	r2, [sp, #4]
 801010c:	f7ff fb06 	bl	800f71c <_malloc_r>
 8010110:	9a01      	ldr	r2, [sp, #4]
 8010112:	4605      	mov	r5, r0
 8010114:	b930      	cbnz	r0, 8010124 <_calloc_r+0x24>
 8010116:	4628      	mov	r0, r5
 8010118:	b003      	add	sp, #12
 801011a:	bd30      	pop	{r4, r5, pc}
 801011c:	220c      	movs	r2, #12
 801011e:	6002      	str	r2, [r0, #0]
 8010120:	2500      	movs	r5, #0
 8010122:	e7f8      	b.n	8010116 <_calloc_r+0x16>
 8010124:	4621      	mov	r1, r4
 8010126:	f7fe fb88 	bl	800e83a <memset>
 801012a:	e7f4      	b.n	8010116 <_calloc_r+0x16>

0801012c <__ascii_mbtowc>:
 801012c:	b082      	sub	sp, #8
 801012e:	b901      	cbnz	r1, 8010132 <__ascii_mbtowc+0x6>
 8010130:	a901      	add	r1, sp, #4
 8010132:	b142      	cbz	r2, 8010146 <__ascii_mbtowc+0x1a>
 8010134:	b14b      	cbz	r3, 801014a <__ascii_mbtowc+0x1e>
 8010136:	7813      	ldrb	r3, [r2, #0]
 8010138:	600b      	str	r3, [r1, #0]
 801013a:	7812      	ldrb	r2, [r2, #0]
 801013c:	1e10      	subs	r0, r2, #0
 801013e:	bf18      	it	ne
 8010140:	2001      	movne	r0, #1
 8010142:	b002      	add	sp, #8
 8010144:	4770      	bx	lr
 8010146:	4610      	mov	r0, r2
 8010148:	e7fb      	b.n	8010142 <__ascii_mbtowc+0x16>
 801014a:	f06f 0001 	mvn.w	r0, #1
 801014e:	e7f8      	b.n	8010142 <__ascii_mbtowc+0x16>

08010150 <__ascii_wctomb>:
 8010150:	b149      	cbz	r1, 8010166 <__ascii_wctomb+0x16>
 8010152:	2aff      	cmp	r2, #255	; 0xff
 8010154:	bf85      	ittet	hi
 8010156:	238a      	movhi	r3, #138	; 0x8a
 8010158:	6003      	strhi	r3, [r0, #0]
 801015a:	700a      	strbls	r2, [r1, #0]
 801015c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010160:	bf98      	it	ls
 8010162:	2001      	movls	r0, #1
 8010164:	4770      	bx	lr
 8010166:	4608      	mov	r0, r1
 8010168:	4770      	bx	lr
	...

0801016c <fiprintf>:
 801016c:	b40e      	push	{r1, r2, r3}
 801016e:	b503      	push	{r0, r1, lr}
 8010170:	4601      	mov	r1, r0
 8010172:	ab03      	add	r3, sp, #12
 8010174:	4805      	ldr	r0, [pc, #20]	; (801018c <fiprintf+0x20>)
 8010176:	f853 2b04 	ldr.w	r2, [r3], #4
 801017a:	6800      	ldr	r0, [r0, #0]
 801017c:	9301      	str	r3, [sp, #4]
 801017e:	f000 f837 	bl	80101f0 <_vfiprintf_r>
 8010182:	b002      	add	sp, #8
 8010184:	f85d eb04 	ldr.w	lr, [sp], #4
 8010188:	b003      	add	sp, #12
 801018a:	4770      	bx	lr
 801018c:	200078d0 	.word	0x200078d0

08010190 <abort>:
 8010190:	b508      	push	{r3, lr}
 8010192:	2006      	movs	r0, #6
 8010194:	f000 fa04 	bl	80105a0 <raise>
 8010198:	2001      	movs	r0, #1
 801019a:	f7f7 f93f 	bl	800741c <_exit>

0801019e <__sfputc_r>:
 801019e:	6893      	ldr	r3, [r2, #8]
 80101a0:	3b01      	subs	r3, #1
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	b410      	push	{r4}
 80101a6:	6093      	str	r3, [r2, #8]
 80101a8:	da08      	bge.n	80101bc <__sfputc_r+0x1e>
 80101aa:	6994      	ldr	r4, [r2, #24]
 80101ac:	42a3      	cmp	r3, r4
 80101ae:	db01      	blt.n	80101b4 <__sfputc_r+0x16>
 80101b0:	290a      	cmp	r1, #10
 80101b2:	d103      	bne.n	80101bc <__sfputc_r+0x1e>
 80101b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101b8:	f000 b934 	b.w	8010424 <__swbuf_r>
 80101bc:	6813      	ldr	r3, [r2, #0]
 80101be:	1c58      	adds	r0, r3, #1
 80101c0:	6010      	str	r0, [r2, #0]
 80101c2:	7019      	strb	r1, [r3, #0]
 80101c4:	4608      	mov	r0, r1
 80101c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <__sfputs_r>:
 80101cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ce:	4606      	mov	r6, r0
 80101d0:	460f      	mov	r7, r1
 80101d2:	4614      	mov	r4, r2
 80101d4:	18d5      	adds	r5, r2, r3
 80101d6:	42ac      	cmp	r4, r5
 80101d8:	d101      	bne.n	80101de <__sfputs_r+0x12>
 80101da:	2000      	movs	r0, #0
 80101dc:	e007      	b.n	80101ee <__sfputs_r+0x22>
 80101de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101e2:	463a      	mov	r2, r7
 80101e4:	4630      	mov	r0, r6
 80101e6:	f7ff ffda 	bl	801019e <__sfputc_r>
 80101ea:	1c43      	adds	r3, r0, #1
 80101ec:	d1f3      	bne.n	80101d6 <__sfputs_r+0xa>
 80101ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101f0 <_vfiprintf_r>:
 80101f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f4:	460d      	mov	r5, r1
 80101f6:	b09d      	sub	sp, #116	; 0x74
 80101f8:	4614      	mov	r4, r2
 80101fa:	4698      	mov	r8, r3
 80101fc:	4606      	mov	r6, r0
 80101fe:	b118      	cbz	r0, 8010208 <_vfiprintf_r+0x18>
 8010200:	6a03      	ldr	r3, [r0, #32]
 8010202:	b90b      	cbnz	r3, 8010208 <_vfiprintf_r+0x18>
 8010204:	f7fe faa0 	bl	800e748 <__sinit>
 8010208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801020a:	07d9      	lsls	r1, r3, #31
 801020c:	d405      	bmi.n	801021a <_vfiprintf_r+0x2a>
 801020e:	89ab      	ldrh	r3, [r5, #12]
 8010210:	059a      	lsls	r2, r3, #22
 8010212:	d402      	bmi.n	801021a <_vfiprintf_r+0x2a>
 8010214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010216:	f7fe fb8e 	bl	800e936 <__retarget_lock_acquire_recursive>
 801021a:	89ab      	ldrh	r3, [r5, #12]
 801021c:	071b      	lsls	r3, r3, #28
 801021e:	d501      	bpl.n	8010224 <_vfiprintf_r+0x34>
 8010220:	692b      	ldr	r3, [r5, #16]
 8010222:	b99b      	cbnz	r3, 801024c <_vfiprintf_r+0x5c>
 8010224:	4629      	mov	r1, r5
 8010226:	4630      	mov	r0, r6
 8010228:	f000 f93a 	bl	80104a0 <__swsetup_r>
 801022c:	b170      	cbz	r0, 801024c <_vfiprintf_r+0x5c>
 801022e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010230:	07dc      	lsls	r4, r3, #31
 8010232:	d504      	bpl.n	801023e <_vfiprintf_r+0x4e>
 8010234:	f04f 30ff 	mov.w	r0, #4294967295
 8010238:	b01d      	add	sp, #116	; 0x74
 801023a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023e:	89ab      	ldrh	r3, [r5, #12]
 8010240:	0598      	lsls	r0, r3, #22
 8010242:	d4f7      	bmi.n	8010234 <_vfiprintf_r+0x44>
 8010244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010246:	f7fe fb77 	bl	800e938 <__retarget_lock_release_recursive>
 801024a:	e7f3      	b.n	8010234 <_vfiprintf_r+0x44>
 801024c:	2300      	movs	r3, #0
 801024e:	9309      	str	r3, [sp, #36]	; 0x24
 8010250:	2320      	movs	r3, #32
 8010252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010256:	f8cd 800c 	str.w	r8, [sp, #12]
 801025a:	2330      	movs	r3, #48	; 0x30
 801025c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010410 <_vfiprintf_r+0x220>
 8010260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010264:	f04f 0901 	mov.w	r9, #1
 8010268:	4623      	mov	r3, r4
 801026a:	469a      	mov	sl, r3
 801026c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010270:	b10a      	cbz	r2, 8010276 <_vfiprintf_r+0x86>
 8010272:	2a25      	cmp	r2, #37	; 0x25
 8010274:	d1f9      	bne.n	801026a <_vfiprintf_r+0x7a>
 8010276:	ebba 0b04 	subs.w	fp, sl, r4
 801027a:	d00b      	beq.n	8010294 <_vfiprintf_r+0xa4>
 801027c:	465b      	mov	r3, fp
 801027e:	4622      	mov	r2, r4
 8010280:	4629      	mov	r1, r5
 8010282:	4630      	mov	r0, r6
 8010284:	f7ff ffa2 	bl	80101cc <__sfputs_r>
 8010288:	3001      	adds	r0, #1
 801028a:	f000 80a9 	beq.w	80103e0 <_vfiprintf_r+0x1f0>
 801028e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010290:	445a      	add	r2, fp
 8010292:	9209      	str	r2, [sp, #36]	; 0x24
 8010294:	f89a 3000 	ldrb.w	r3, [sl]
 8010298:	2b00      	cmp	r3, #0
 801029a:	f000 80a1 	beq.w	80103e0 <_vfiprintf_r+0x1f0>
 801029e:	2300      	movs	r3, #0
 80102a0:	f04f 32ff 	mov.w	r2, #4294967295
 80102a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102a8:	f10a 0a01 	add.w	sl, sl, #1
 80102ac:	9304      	str	r3, [sp, #16]
 80102ae:	9307      	str	r3, [sp, #28]
 80102b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102b4:	931a      	str	r3, [sp, #104]	; 0x68
 80102b6:	4654      	mov	r4, sl
 80102b8:	2205      	movs	r2, #5
 80102ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102be:	4854      	ldr	r0, [pc, #336]	; (8010410 <_vfiprintf_r+0x220>)
 80102c0:	f7ef ffae 	bl	8000220 <memchr>
 80102c4:	9a04      	ldr	r2, [sp, #16]
 80102c6:	b9d8      	cbnz	r0, 8010300 <_vfiprintf_r+0x110>
 80102c8:	06d1      	lsls	r1, r2, #27
 80102ca:	bf44      	itt	mi
 80102cc:	2320      	movmi	r3, #32
 80102ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102d2:	0713      	lsls	r3, r2, #28
 80102d4:	bf44      	itt	mi
 80102d6:	232b      	movmi	r3, #43	; 0x2b
 80102d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102dc:	f89a 3000 	ldrb.w	r3, [sl]
 80102e0:	2b2a      	cmp	r3, #42	; 0x2a
 80102e2:	d015      	beq.n	8010310 <_vfiprintf_r+0x120>
 80102e4:	9a07      	ldr	r2, [sp, #28]
 80102e6:	4654      	mov	r4, sl
 80102e8:	2000      	movs	r0, #0
 80102ea:	f04f 0c0a 	mov.w	ip, #10
 80102ee:	4621      	mov	r1, r4
 80102f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102f4:	3b30      	subs	r3, #48	; 0x30
 80102f6:	2b09      	cmp	r3, #9
 80102f8:	d94d      	bls.n	8010396 <_vfiprintf_r+0x1a6>
 80102fa:	b1b0      	cbz	r0, 801032a <_vfiprintf_r+0x13a>
 80102fc:	9207      	str	r2, [sp, #28]
 80102fe:	e014      	b.n	801032a <_vfiprintf_r+0x13a>
 8010300:	eba0 0308 	sub.w	r3, r0, r8
 8010304:	fa09 f303 	lsl.w	r3, r9, r3
 8010308:	4313      	orrs	r3, r2
 801030a:	9304      	str	r3, [sp, #16]
 801030c:	46a2      	mov	sl, r4
 801030e:	e7d2      	b.n	80102b6 <_vfiprintf_r+0xc6>
 8010310:	9b03      	ldr	r3, [sp, #12]
 8010312:	1d19      	adds	r1, r3, #4
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	9103      	str	r1, [sp, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	bfbb      	ittet	lt
 801031c:	425b      	neglt	r3, r3
 801031e:	f042 0202 	orrlt.w	r2, r2, #2
 8010322:	9307      	strge	r3, [sp, #28]
 8010324:	9307      	strlt	r3, [sp, #28]
 8010326:	bfb8      	it	lt
 8010328:	9204      	strlt	r2, [sp, #16]
 801032a:	7823      	ldrb	r3, [r4, #0]
 801032c:	2b2e      	cmp	r3, #46	; 0x2e
 801032e:	d10c      	bne.n	801034a <_vfiprintf_r+0x15a>
 8010330:	7863      	ldrb	r3, [r4, #1]
 8010332:	2b2a      	cmp	r3, #42	; 0x2a
 8010334:	d134      	bne.n	80103a0 <_vfiprintf_r+0x1b0>
 8010336:	9b03      	ldr	r3, [sp, #12]
 8010338:	1d1a      	adds	r2, r3, #4
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	9203      	str	r2, [sp, #12]
 801033e:	2b00      	cmp	r3, #0
 8010340:	bfb8      	it	lt
 8010342:	f04f 33ff 	movlt.w	r3, #4294967295
 8010346:	3402      	adds	r4, #2
 8010348:	9305      	str	r3, [sp, #20]
 801034a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010420 <_vfiprintf_r+0x230>
 801034e:	7821      	ldrb	r1, [r4, #0]
 8010350:	2203      	movs	r2, #3
 8010352:	4650      	mov	r0, sl
 8010354:	f7ef ff64 	bl	8000220 <memchr>
 8010358:	b138      	cbz	r0, 801036a <_vfiprintf_r+0x17a>
 801035a:	9b04      	ldr	r3, [sp, #16]
 801035c:	eba0 000a 	sub.w	r0, r0, sl
 8010360:	2240      	movs	r2, #64	; 0x40
 8010362:	4082      	lsls	r2, r0
 8010364:	4313      	orrs	r3, r2
 8010366:	3401      	adds	r4, #1
 8010368:	9304      	str	r3, [sp, #16]
 801036a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801036e:	4829      	ldr	r0, [pc, #164]	; (8010414 <_vfiprintf_r+0x224>)
 8010370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010374:	2206      	movs	r2, #6
 8010376:	f7ef ff53 	bl	8000220 <memchr>
 801037a:	2800      	cmp	r0, #0
 801037c:	d03f      	beq.n	80103fe <_vfiprintf_r+0x20e>
 801037e:	4b26      	ldr	r3, [pc, #152]	; (8010418 <_vfiprintf_r+0x228>)
 8010380:	bb1b      	cbnz	r3, 80103ca <_vfiprintf_r+0x1da>
 8010382:	9b03      	ldr	r3, [sp, #12]
 8010384:	3307      	adds	r3, #7
 8010386:	f023 0307 	bic.w	r3, r3, #7
 801038a:	3308      	adds	r3, #8
 801038c:	9303      	str	r3, [sp, #12]
 801038e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010390:	443b      	add	r3, r7
 8010392:	9309      	str	r3, [sp, #36]	; 0x24
 8010394:	e768      	b.n	8010268 <_vfiprintf_r+0x78>
 8010396:	fb0c 3202 	mla	r2, ip, r2, r3
 801039a:	460c      	mov	r4, r1
 801039c:	2001      	movs	r0, #1
 801039e:	e7a6      	b.n	80102ee <_vfiprintf_r+0xfe>
 80103a0:	2300      	movs	r3, #0
 80103a2:	3401      	adds	r4, #1
 80103a4:	9305      	str	r3, [sp, #20]
 80103a6:	4619      	mov	r1, r3
 80103a8:	f04f 0c0a 	mov.w	ip, #10
 80103ac:	4620      	mov	r0, r4
 80103ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103b2:	3a30      	subs	r2, #48	; 0x30
 80103b4:	2a09      	cmp	r2, #9
 80103b6:	d903      	bls.n	80103c0 <_vfiprintf_r+0x1d0>
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d0c6      	beq.n	801034a <_vfiprintf_r+0x15a>
 80103bc:	9105      	str	r1, [sp, #20]
 80103be:	e7c4      	b.n	801034a <_vfiprintf_r+0x15a>
 80103c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80103c4:	4604      	mov	r4, r0
 80103c6:	2301      	movs	r3, #1
 80103c8:	e7f0      	b.n	80103ac <_vfiprintf_r+0x1bc>
 80103ca:	ab03      	add	r3, sp, #12
 80103cc:	9300      	str	r3, [sp, #0]
 80103ce:	462a      	mov	r2, r5
 80103d0:	4b12      	ldr	r3, [pc, #72]	; (801041c <_vfiprintf_r+0x22c>)
 80103d2:	a904      	add	r1, sp, #16
 80103d4:	4630      	mov	r0, r6
 80103d6:	f7fd fd65 	bl	800dea4 <_printf_float>
 80103da:	4607      	mov	r7, r0
 80103dc:	1c78      	adds	r0, r7, #1
 80103de:	d1d6      	bne.n	801038e <_vfiprintf_r+0x19e>
 80103e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103e2:	07d9      	lsls	r1, r3, #31
 80103e4:	d405      	bmi.n	80103f2 <_vfiprintf_r+0x202>
 80103e6:	89ab      	ldrh	r3, [r5, #12]
 80103e8:	059a      	lsls	r2, r3, #22
 80103ea:	d402      	bmi.n	80103f2 <_vfiprintf_r+0x202>
 80103ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ee:	f7fe faa3 	bl	800e938 <__retarget_lock_release_recursive>
 80103f2:	89ab      	ldrh	r3, [r5, #12]
 80103f4:	065b      	lsls	r3, r3, #25
 80103f6:	f53f af1d 	bmi.w	8010234 <_vfiprintf_r+0x44>
 80103fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103fc:	e71c      	b.n	8010238 <_vfiprintf_r+0x48>
 80103fe:	ab03      	add	r3, sp, #12
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	462a      	mov	r2, r5
 8010404:	4b05      	ldr	r3, [pc, #20]	; (801041c <_vfiprintf_r+0x22c>)
 8010406:	a904      	add	r1, sp, #16
 8010408:	4630      	mov	r0, r6
 801040a:	f7fd ffef 	bl	800e3ec <_printf_i>
 801040e:	e7e4      	b.n	80103da <_vfiprintf_r+0x1ea>
 8010410:	08024d2b 	.word	0x08024d2b
 8010414:	08024d35 	.word	0x08024d35
 8010418:	0800dea5 	.word	0x0800dea5
 801041c:	080101cd 	.word	0x080101cd
 8010420:	08024d31 	.word	0x08024d31

08010424 <__swbuf_r>:
 8010424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010426:	460e      	mov	r6, r1
 8010428:	4614      	mov	r4, r2
 801042a:	4605      	mov	r5, r0
 801042c:	b118      	cbz	r0, 8010436 <__swbuf_r+0x12>
 801042e:	6a03      	ldr	r3, [r0, #32]
 8010430:	b90b      	cbnz	r3, 8010436 <__swbuf_r+0x12>
 8010432:	f7fe f989 	bl	800e748 <__sinit>
 8010436:	69a3      	ldr	r3, [r4, #24]
 8010438:	60a3      	str	r3, [r4, #8]
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	071a      	lsls	r2, r3, #28
 801043e:	d525      	bpl.n	801048c <__swbuf_r+0x68>
 8010440:	6923      	ldr	r3, [r4, #16]
 8010442:	b31b      	cbz	r3, 801048c <__swbuf_r+0x68>
 8010444:	6823      	ldr	r3, [r4, #0]
 8010446:	6922      	ldr	r2, [r4, #16]
 8010448:	1a98      	subs	r0, r3, r2
 801044a:	6963      	ldr	r3, [r4, #20]
 801044c:	b2f6      	uxtb	r6, r6
 801044e:	4283      	cmp	r3, r0
 8010450:	4637      	mov	r7, r6
 8010452:	dc04      	bgt.n	801045e <__swbuf_r+0x3a>
 8010454:	4621      	mov	r1, r4
 8010456:	4628      	mov	r0, r5
 8010458:	f7ff fdee 	bl	8010038 <_fflush_r>
 801045c:	b9e0      	cbnz	r0, 8010498 <__swbuf_r+0x74>
 801045e:	68a3      	ldr	r3, [r4, #8]
 8010460:	3b01      	subs	r3, #1
 8010462:	60a3      	str	r3, [r4, #8]
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	6022      	str	r2, [r4, #0]
 801046a:	701e      	strb	r6, [r3, #0]
 801046c:	6962      	ldr	r2, [r4, #20]
 801046e:	1c43      	adds	r3, r0, #1
 8010470:	429a      	cmp	r2, r3
 8010472:	d004      	beq.n	801047e <__swbuf_r+0x5a>
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	07db      	lsls	r3, r3, #31
 8010478:	d506      	bpl.n	8010488 <__swbuf_r+0x64>
 801047a:	2e0a      	cmp	r6, #10
 801047c:	d104      	bne.n	8010488 <__swbuf_r+0x64>
 801047e:	4621      	mov	r1, r4
 8010480:	4628      	mov	r0, r5
 8010482:	f7ff fdd9 	bl	8010038 <_fflush_r>
 8010486:	b938      	cbnz	r0, 8010498 <__swbuf_r+0x74>
 8010488:	4638      	mov	r0, r7
 801048a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801048c:	4621      	mov	r1, r4
 801048e:	4628      	mov	r0, r5
 8010490:	f000 f806 	bl	80104a0 <__swsetup_r>
 8010494:	2800      	cmp	r0, #0
 8010496:	d0d5      	beq.n	8010444 <__swbuf_r+0x20>
 8010498:	f04f 37ff 	mov.w	r7, #4294967295
 801049c:	e7f4      	b.n	8010488 <__swbuf_r+0x64>
	...

080104a0 <__swsetup_r>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	4b2a      	ldr	r3, [pc, #168]	; (801054c <__swsetup_r+0xac>)
 80104a4:	4605      	mov	r5, r0
 80104a6:	6818      	ldr	r0, [r3, #0]
 80104a8:	460c      	mov	r4, r1
 80104aa:	b118      	cbz	r0, 80104b4 <__swsetup_r+0x14>
 80104ac:	6a03      	ldr	r3, [r0, #32]
 80104ae:	b90b      	cbnz	r3, 80104b4 <__swsetup_r+0x14>
 80104b0:	f7fe f94a 	bl	800e748 <__sinit>
 80104b4:	89a3      	ldrh	r3, [r4, #12]
 80104b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104ba:	0718      	lsls	r0, r3, #28
 80104bc:	d422      	bmi.n	8010504 <__swsetup_r+0x64>
 80104be:	06d9      	lsls	r1, r3, #27
 80104c0:	d407      	bmi.n	80104d2 <__swsetup_r+0x32>
 80104c2:	2309      	movs	r3, #9
 80104c4:	602b      	str	r3, [r5, #0]
 80104c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104ca:	81a3      	strh	r3, [r4, #12]
 80104cc:	f04f 30ff 	mov.w	r0, #4294967295
 80104d0:	e034      	b.n	801053c <__swsetup_r+0x9c>
 80104d2:	0758      	lsls	r0, r3, #29
 80104d4:	d512      	bpl.n	80104fc <__swsetup_r+0x5c>
 80104d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104d8:	b141      	cbz	r1, 80104ec <__swsetup_r+0x4c>
 80104da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104de:	4299      	cmp	r1, r3
 80104e0:	d002      	beq.n	80104e8 <__swsetup_r+0x48>
 80104e2:	4628      	mov	r0, r5
 80104e4:	f7ff f8a6 	bl	800f634 <_free_r>
 80104e8:	2300      	movs	r3, #0
 80104ea:	6363      	str	r3, [r4, #52]	; 0x34
 80104ec:	89a3      	ldrh	r3, [r4, #12]
 80104ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104f2:	81a3      	strh	r3, [r4, #12]
 80104f4:	2300      	movs	r3, #0
 80104f6:	6063      	str	r3, [r4, #4]
 80104f8:	6923      	ldr	r3, [r4, #16]
 80104fa:	6023      	str	r3, [r4, #0]
 80104fc:	89a3      	ldrh	r3, [r4, #12]
 80104fe:	f043 0308 	orr.w	r3, r3, #8
 8010502:	81a3      	strh	r3, [r4, #12]
 8010504:	6923      	ldr	r3, [r4, #16]
 8010506:	b94b      	cbnz	r3, 801051c <__swsetup_r+0x7c>
 8010508:	89a3      	ldrh	r3, [r4, #12]
 801050a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801050e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010512:	d003      	beq.n	801051c <__swsetup_r+0x7c>
 8010514:	4621      	mov	r1, r4
 8010516:	4628      	mov	r0, r5
 8010518:	f000 f884 	bl	8010624 <__smakebuf_r>
 801051c:	89a0      	ldrh	r0, [r4, #12]
 801051e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010522:	f010 0301 	ands.w	r3, r0, #1
 8010526:	d00a      	beq.n	801053e <__swsetup_r+0x9e>
 8010528:	2300      	movs	r3, #0
 801052a:	60a3      	str	r3, [r4, #8]
 801052c:	6963      	ldr	r3, [r4, #20]
 801052e:	425b      	negs	r3, r3
 8010530:	61a3      	str	r3, [r4, #24]
 8010532:	6923      	ldr	r3, [r4, #16]
 8010534:	b943      	cbnz	r3, 8010548 <__swsetup_r+0xa8>
 8010536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801053a:	d1c4      	bne.n	80104c6 <__swsetup_r+0x26>
 801053c:	bd38      	pop	{r3, r4, r5, pc}
 801053e:	0781      	lsls	r1, r0, #30
 8010540:	bf58      	it	pl
 8010542:	6963      	ldrpl	r3, [r4, #20]
 8010544:	60a3      	str	r3, [r4, #8]
 8010546:	e7f4      	b.n	8010532 <__swsetup_r+0x92>
 8010548:	2000      	movs	r0, #0
 801054a:	e7f7      	b.n	801053c <__swsetup_r+0x9c>
 801054c:	200078d0 	.word	0x200078d0

08010550 <_raise_r>:
 8010550:	291f      	cmp	r1, #31
 8010552:	b538      	push	{r3, r4, r5, lr}
 8010554:	4604      	mov	r4, r0
 8010556:	460d      	mov	r5, r1
 8010558:	d904      	bls.n	8010564 <_raise_r+0x14>
 801055a:	2316      	movs	r3, #22
 801055c:	6003      	str	r3, [r0, #0]
 801055e:	f04f 30ff 	mov.w	r0, #4294967295
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010566:	b112      	cbz	r2, 801056e <_raise_r+0x1e>
 8010568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801056c:	b94b      	cbnz	r3, 8010582 <_raise_r+0x32>
 801056e:	4620      	mov	r0, r4
 8010570:	f000 f830 	bl	80105d4 <_getpid_r>
 8010574:	462a      	mov	r2, r5
 8010576:	4601      	mov	r1, r0
 8010578:	4620      	mov	r0, r4
 801057a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801057e:	f000 b817 	b.w	80105b0 <_kill_r>
 8010582:	2b01      	cmp	r3, #1
 8010584:	d00a      	beq.n	801059c <_raise_r+0x4c>
 8010586:	1c59      	adds	r1, r3, #1
 8010588:	d103      	bne.n	8010592 <_raise_r+0x42>
 801058a:	2316      	movs	r3, #22
 801058c:	6003      	str	r3, [r0, #0]
 801058e:	2001      	movs	r0, #1
 8010590:	e7e7      	b.n	8010562 <_raise_r+0x12>
 8010592:	2400      	movs	r4, #0
 8010594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010598:	4628      	mov	r0, r5
 801059a:	4798      	blx	r3
 801059c:	2000      	movs	r0, #0
 801059e:	e7e0      	b.n	8010562 <_raise_r+0x12>

080105a0 <raise>:
 80105a0:	4b02      	ldr	r3, [pc, #8]	; (80105ac <raise+0xc>)
 80105a2:	4601      	mov	r1, r0
 80105a4:	6818      	ldr	r0, [r3, #0]
 80105a6:	f7ff bfd3 	b.w	8010550 <_raise_r>
 80105aa:	bf00      	nop
 80105ac:	200078d0 	.word	0x200078d0

080105b0 <_kill_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4d07      	ldr	r5, [pc, #28]	; (80105d0 <_kill_r+0x20>)
 80105b4:	2300      	movs	r3, #0
 80105b6:	4604      	mov	r4, r0
 80105b8:	4608      	mov	r0, r1
 80105ba:	4611      	mov	r1, r2
 80105bc:	602b      	str	r3, [r5, #0]
 80105be:	f7f6 ff1d 	bl	80073fc <_kill>
 80105c2:	1c43      	adds	r3, r0, #1
 80105c4:	d102      	bne.n	80105cc <_kill_r+0x1c>
 80105c6:	682b      	ldr	r3, [r5, #0]
 80105c8:	b103      	cbz	r3, 80105cc <_kill_r+0x1c>
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	bd38      	pop	{r3, r4, r5, pc}
 80105ce:	bf00      	nop
 80105d0:	2001b81c 	.word	0x2001b81c

080105d4 <_getpid_r>:
 80105d4:	f7f6 bf0a 	b.w	80073ec <_getpid>

080105d8 <__swhatbuf_r>:
 80105d8:	b570      	push	{r4, r5, r6, lr}
 80105da:	460c      	mov	r4, r1
 80105dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105e0:	2900      	cmp	r1, #0
 80105e2:	b096      	sub	sp, #88	; 0x58
 80105e4:	4615      	mov	r5, r2
 80105e6:	461e      	mov	r6, r3
 80105e8:	da0d      	bge.n	8010606 <__swhatbuf_r+0x2e>
 80105ea:	89a3      	ldrh	r3, [r4, #12]
 80105ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80105f0:	f04f 0100 	mov.w	r1, #0
 80105f4:	bf0c      	ite	eq
 80105f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80105fa:	2340      	movne	r3, #64	; 0x40
 80105fc:	2000      	movs	r0, #0
 80105fe:	6031      	str	r1, [r6, #0]
 8010600:	602b      	str	r3, [r5, #0]
 8010602:	b016      	add	sp, #88	; 0x58
 8010604:	bd70      	pop	{r4, r5, r6, pc}
 8010606:	466a      	mov	r2, sp
 8010608:	f000 f848 	bl	801069c <_fstat_r>
 801060c:	2800      	cmp	r0, #0
 801060e:	dbec      	blt.n	80105ea <__swhatbuf_r+0x12>
 8010610:	9901      	ldr	r1, [sp, #4]
 8010612:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010616:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801061a:	4259      	negs	r1, r3
 801061c:	4159      	adcs	r1, r3
 801061e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010622:	e7eb      	b.n	80105fc <__swhatbuf_r+0x24>

08010624 <__smakebuf_r>:
 8010624:	898b      	ldrh	r3, [r1, #12]
 8010626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010628:	079d      	lsls	r5, r3, #30
 801062a:	4606      	mov	r6, r0
 801062c:	460c      	mov	r4, r1
 801062e:	d507      	bpl.n	8010640 <__smakebuf_r+0x1c>
 8010630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010634:	6023      	str	r3, [r4, #0]
 8010636:	6123      	str	r3, [r4, #16]
 8010638:	2301      	movs	r3, #1
 801063a:	6163      	str	r3, [r4, #20]
 801063c:	b002      	add	sp, #8
 801063e:	bd70      	pop	{r4, r5, r6, pc}
 8010640:	ab01      	add	r3, sp, #4
 8010642:	466a      	mov	r2, sp
 8010644:	f7ff ffc8 	bl	80105d8 <__swhatbuf_r>
 8010648:	9900      	ldr	r1, [sp, #0]
 801064a:	4605      	mov	r5, r0
 801064c:	4630      	mov	r0, r6
 801064e:	f7ff f865 	bl	800f71c <_malloc_r>
 8010652:	b948      	cbnz	r0, 8010668 <__smakebuf_r+0x44>
 8010654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010658:	059a      	lsls	r2, r3, #22
 801065a:	d4ef      	bmi.n	801063c <__smakebuf_r+0x18>
 801065c:	f023 0303 	bic.w	r3, r3, #3
 8010660:	f043 0302 	orr.w	r3, r3, #2
 8010664:	81a3      	strh	r3, [r4, #12]
 8010666:	e7e3      	b.n	8010630 <__smakebuf_r+0xc>
 8010668:	89a3      	ldrh	r3, [r4, #12]
 801066a:	6020      	str	r0, [r4, #0]
 801066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010670:	81a3      	strh	r3, [r4, #12]
 8010672:	9b00      	ldr	r3, [sp, #0]
 8010674:	6163      	str	r3, [r4, #20]
 8010676:	9b01      	ldr	r3, [sp, #4]
 8010678:	6120      	str	r0, [r4, #16]
 801067a:	b15b      	cbz	r3, 8010694 <__smakebuf_r+0x70>
 801067c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010680:	4630      	mov	r0, r6
 8010682:	f000 f81d 	bl	80106c0 <_isatty_r>
 8010686:	b128      	cbz	r0, 8010694 <__smakebuf_r+0x70>
 8010688:	89a3      	ldrh	r3, [r4, #12]
 801068a:	f023 0303 	bic.w	r3, r3, #3
 801068e:	f043 0301 	orr.w	r3, r3, #1
 8010692:	81a3      	strh	r3, [r4, #12]
 8010694:	89a3      	ldrh	r3, [r4, #12]
 8010696:	431d      	orrs	r5, r3
 8010698:	81a5      	strh	r5, [r4, #12]
 801069a:	e7cf      	b.n	801063c <__smakebuf_r+0x18>

0801069c <_fstat_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4d07      	ldr	r5, [pc, #28]	; (80106bc <_fstat_r+0x20>)
 80106a0:	2300      	movs	r3, #0
 80106a2:	4604      	mov	r4, r0
 80106a4:	4608      	mov	r0, r1
 80106a6:	4611      	mov	r1, r2
 80106a8:	602b      	str	r3, [r5, #0]
 80106aa:	f7f6 ff06 	bl	80074ba <_fstat>
 80106ae:	1c43      	adds	r3, r0, #1
 80106b0:	d102      	bne.n	80106b8 <_fstat_r+0x1c>
 80106b2:	682b      	ldr	r3, [r5, #0]
 80106b4:	b103      	cbz	r3, 80106b8 <_fstat_r+0x1c>
 80106b6:	6023      	str	r3, [r4, #0]
 80106b8:	bd38      	pop	{r3, r4, r5, pc}
 80106ba:	bf00      	nop
 80106bc:	2001b81c 	.word	0x2001b81c

080106c0 <_isatty_r>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	4d06      	ldr	r5, [pc, #24]	; (80106dc <_isatty_r+0x1c>)
 80106c4:	2300      	movs	r3, #0
 80106c6:	4604      	mov	r4, r0
 80106c8:	4608      	mov	r0, r1
 80106ca:	602b      	str	r3, [r5, #0]
 80106cc:	f7f6 ff05 	bl	80074da <_isatty>
 80106d0:	1c43      	adds	r3, r0, #1
 80106d2:	d102      	bne.n	80106da <_isatty_r+0x1a>
 80106d4:	682b      	ldr	r3, [r5, #0]
 80106d6:	b103      	cbz	r3, 80106da <_isatty_r+0x1a>
 80106d8:	6023      	str	r3, [r4, #0]
 80106da:	bd38      	pop	{r3, r4, r5, pc}
 80106dc:	2001b81c 	.word	0x2001b81c

080106e0 <exp>:
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	ed2d 8b02 	vpush	{d8}
 80106e6:	ec55 4b10 	vmov	r4, r5, d0
 80106ea:	f000 f9e5 	bl	8010ab8 <__ieee754_exp>
 80106ee:	eeb0 8a40 	vmov.f32	s16, s0
 80106f2:	eef0 8a60 	vmov.f32	s17, s1
 80106f6:	ec45 4b10 	vmov	d0, r4, r5
 80106fa:	f000 f8f3 	bl	80108e4 <finite>
 80106fe:	b168      	cbz	r0, 801071c <exp+0x3c>
 8010700:	a317      	add	r3, pc, #92	; (adr r3, 8010760 <exp+0x80>)
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	4620      	mov	r0, r4
 8010708:	4629      	mov	r1, r5
 801070a:	f7f0 fa2d 	bl	8000b68 <__aeabi_dcmpgt>
 801070e:	b160      	cbz	r0, 801072a <exp+0x4a>
 8010710:	f7fe f8e6 	bl	800e8e0 <__errno>
 8010714:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010750 <exp+0x70>
 8010718:	2322      	movs	r3, #34	; 0x22
 801071a:	6003      	str	r3, [r0, #0]
 801071c:	eeb0 0a48 	vmov.f32	s0, s16
 8010720:	eef0 0a68 	vmov.f32	s1, s17
 8010724:	ecbd 8b02 	vpop	{d8}
 8010728:	bd38      	pop	{r3, r4, r5, pc}
 801072a:	a30f      	add	r3, pc, #60	; (adr r3, 8010768 <exp+0x88>)
 801072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010730:	4620      	mov	r0, r4
 8010732:	4629      	mov	r1, r5
 8010734:	f7f0 f9fa 	bl	8000b2c <__aeabi_dcmplt>
 8010738:	2800      	cmp	r0, #0
 801073a:	d0ef      	beq.n	801071c <exp+0x3c>
 801073c:	f7fe f8d0 	bl	800e8e0 <__errno>
 8010740:	2322      	movs	r3, #34	; 0x22
 8010742:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010758 <exp+0x78>
 8010746:	6003      	str	r3, [r0, #0]
 8010748:	e7e8      	b.n	801071c <exp+0x3c>
 801074a:	bf00      	nop
 801074c:	f3af 8000 	nop.w
 8010750:	00000000 	.word	0x00000000
 8010754:	7ff00000 	.word	0x7ff00000
	...
 8010760:	fefa39ef 	.word	0xfefa39ef
 8010764:	40862e42 	.word	0x40862e42
 8010768:	d52d3051 	.word	0xd52d3051
 801076c:	c0874910 	.word	0xc0874910

08010770 <pow>:
 8010770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010772:	ed2d 8b02 	vpush	{d8}
 8010776:	eeb0 8a40 	vmov.f32	s16, s0
 801077a:	eef0 8a60 	vmov.f32	s17, s1
 801077e:	ec55 4b11 	vmov	r4, r5, d1
 8010782:	f000 fb1d 	bl	8010dc0 <__ieee754_pow>
 8010786:	4622      	mov	r2, r4
 8010788:	462b      	mov	r3, r5
 801078a:	4620      	mov	r0, r4
 801078c:	4629      	mov	r1, r5
 801078e:	ec57 6b10 	vmov	r6, r7, d0
 8010792:	f7f0 f9f3 	bl	8000b7c <__aeabi_dcmpun>
 8010796:	2800      	cmp	r0, #0
 8010798:	d13b      	bne.n	8010812 <pow+0xa2>
 801079a:	ec51 0b18 	vmov	r0, r1, d8
 801079e:	2200      	movs	r2, #0
 80107a0:	2300      	movs	r3, #0
 80107a2:	f7f0 f9b9 	bl	8000b18 <__aeabi_dcmpeq>
 80107a6:	b1b8      	cbz	r0, 80107d8 <pow+0x68>
 80107a8:	2200      	movs	r2, #0
 80107aa:	2300      	movs	r3, #0
 80107ac:	4620      	mov	r0, r4
 80107ae:	4629      	mov	r1, r5
 80107b0:	f7f0 f9b2 	bl	8000b18 <__aeabi_dcmpeq>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d146      	bne.n	8010846 <pow+0xd6>
 80107b8:	ec45 4b10 	vmov	d0, r4, r5
 80107bc:	f000 f892 	bl	80108e4 <finite>
 80107c0:	b338      	cbz	r0, 8010812 <pow+0xa2>
 80107c2:	2200      	movs	r2, #0
 80107c4:	2300      	movs	r3, #0
 80107c6:	4620      	mov	r0, r4
 80107c8:	4629      	mov	r1, r5
 80107ca:	f7f0 f9af 	bl	8000b2c <__aeabi_dcmplt>
 80107ce:	b300      	cbz	r0, 8010812 <pow+0xa2>
 80107d0:	f7fe f886 	bl	800e8e0 <__errno>
 80107d4:	2322      	movs	r3, #34	; 0x22
 80107d6:	e01b      	b.n	8010810 <pow+0xa0>
 80107d8:	ec47 6b10 	vmov	d0, r6, r7
 80107dc:	f000 f882 	bl	80108e4 <finite>
 80107e0:	b9e0      	cbnz	r0, 801081c <pow+0xac>
 80107e2:	eeb0 0a48 	vmov.f32	s0, s16
 80107e6:	eef0 0a68 	vmov.f32	s1, s17
 80107ea:	f000 f87b 	bl	80108e4 <finite>
 80107ee:	b1a8      	cbz	r0, 801081c <pow+0xac>
 80107f0:	ec45 4b10 	vmov	d0, r4, r5
 80107f4:	f000 f876 	bl	80108e4 <finite>
 80107f8:	b180      	cbz	r0, 801081c <pow+0xac>
 80107fa:	4632      	mov	r2, r6
 80107fc:	463b      	mov	r3, r7
 80107fe:	4630      	mov	r0, r6
 8010800:	4639      	mov	r1, r7
 8010802:	f7f0 f9bb 	bl	8000b7c <__aeabi_dcmpun>
 8010806:	2800      	cmp	r0, #0
 8010808:	d0e2      	beq.n	80107d0 <pow+0x60>
 801080a:	f7fe f869 	bl	800e8e0 <__errno>
 801080e:	2321      	movs	r3, #33	; 0x21
 8010810:	6003      	str	r3, [r0, #0]
 8010812:	ecbd 8b02 	vpop	{d8}
 8010816:	ec47 6b10 	vmov	d0, r6, r7
 801081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801081c:	2200      	movs	r2, #0
 801081e:	2300      	movs	r3, #0
 8010820:	4630      	mov	r0, r6
 8010822:	4639      	mov	r1, r7
 8010824:	f7f0 f978 	bl	8000b18 <__aeabi_dcmpeq>
 8010828:	2800      	cmp	r0, #0
 801082a:	d0f2      	beq.n	8010812 <pow+0xa2>
 801082c:	eeb0 0a48 	vmov.f32	s0, s16
 8010830:	eef0 0a68 	vmov.f32	s1, s17
 8010834:	f000 f856 	bl	80108e4 <finite>
 8010838:	2800      	cmp	r0, #0
 801083a:	d0ea      	beq.n	8010812 <pow+0xa2>
 801083c:	ec45 4b10 	vmov	d0, r4, r5
 8010840:	f000 f850 	bl	80108e4 <finite>
 8010844:	e7c3      	b.n	80107ce <pow+0x5e>
 8010846:	4f01      	ldr	r7, [pc, #4]	; (801084c <pow+0xdc>)
 8010848:	2600      	movs	r6, #0
 801084a:	e7e2      	b.n	8010812 <pow+0xa2>
 801084c:	3ff00000 	.word	0x3ff00000

08010850 <sqrt>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	ed2d 8b02 	vpush	{d8}
 8010856:	ec55 4b10 	vmov	r4, r5, d0
 801085a:	f000 f84f 	bl	80108fc <__ieee754_sqrt>
 801085e:	4622      	mov	r2, r4
 8010860:	462b      	mov	r3, r5
 8010862:	4620      	mov	r0, r4
 8010864:	4629      	mov	r1, r5
 8010866:	eeb0 8a40 	vmov.f32	s16, s0
 801086a:	eef0 8a60 	vmov.f32	s17, s1
 801086e:	f7f0 f985 	bl	8000b7c <__aeabi_dcmpun>
 8010872:	b990      	cbnz	r0, 801089a <sqrt+0x4a>
 8010874:	2200      	movs	r2, #0
 8010876:	2300      	movs	r3, #0
 8010878:	4620      	mov	r0, r4
 801087a:	4629      	mov	r1, r5
 801087c:	f7f0 f956 	bl	8000b2c <__aeabi_dcmplt>
 8010880:	b158      	cbz	r0, 801089a <sqrt+0x4a>
 8010882:	f7fe f82d 	bl	800e8e0 <__errno>
 8010886:	2321      	movs	r3, #33	; 0x21
 8010888:	6003      	str	r3, [r0, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	2300      	movs	r3, #0
 801088e:	4610      	mov	r0, r2
 8010890:	4619      	mov	r1, r3
 8010892:	f7f0 f803 	bl	800089c <__aeabi_ddiv>
 8010896:	ec41 0b18 	vmov	d8, r0, r1
 801089a:	eeb0 0a48 	vmov.f32	s0, s16
 801089e:	eef0 0a68 	vmov.f32	s1, s17
 80108a2:	ecbd 8b02 	vpop	{d8}
 80108a6:	bd38      	pop	{r3, r4, r5, pc}

080108a8 <sqrtf>:
 80108a8:	b508      	push	{r3, lr}
 80108aa:	ed2d 8b02 	vpush	{d8}
 80108ae:	eeb0 8a40 	vmov.f32	s16, s0
 80108b2:	f000 f8fd 	bl	8010ab0 <__ieee754_sqrtf>
 80108b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80108ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108be:	d60c      	bvs.n	80108da <sqrtf+0x32>
 80108c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80108e0 <sqrtf+0x38>
 80108c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80108c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108cc:	d505      	bpl.n	80108da <sqrtf+0x32>
 80108ce:	f7fe f807 	bl	800e8e0 <__errno>
 80108d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80108d6:	2321      	movs	r3, #33	; 0x21
 80108d8:	6003      	str	r3, [r0, #0]
 80108da:	ecbd 8b02 	vpop	{d8}
 80108de:	bd08      	pop	{r3, pc}
 80108e0:	00000000 	.word	0x00000000

080108e4 <finite>:
 80108e4:	b082      	sub	sp, #8
 80108e6:	ed8d 0b00 	vstr	d0, [sp]
 80108ea:	9801      	ldr	r0, [sp, #4]
 80108ec:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80108f0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80108f4:	0fc0      	lsrs	r0, r0, #31
 80108f6:	b002      	add	sp, #8
 80108f8:	4770      	bx	lr
	...

080108fc <__ieee754_sqrt>:
 80108fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010900:	ec55 4b10 	vmov	r4, r5, d0
 8010904:	4e67      	ldr	r6, [pc, #412]	; (8010aa4 <__ieee754_sqrt+0x1a8>)
 8010906:	43ae      	bics	r6, r5
 8010908:	ee10 0a10 	vmov	r0, s0
 801090c:	ee10 2a10 	vmov	r2, s0
 8010910:	4629      	mov	r1, r5
 8010912:	462b      	mov	r3, r5
 8010914:	d10d      	bne.n	8010932 <__ieee754_sqrt+0x36>
 8010916:	f7ef fe97 	bl	8000648 <__aeabi_dmul>
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	4620      	mov	r0, r4
 8010920:	4629      	mov	r1, r5
 8010922:	f7ef fcdb 	bl	80002dc <__adddf3>
 8010926:	4604      	mov	r4, r0
 8010928:	460d      	mov	r5, r1
 801092a:	ec45 4b10 	vmov	d0, r4, r5
 801092e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010932:	2d00      	cmp	r5, #0
 8010934:	dc0b      	bgt.n	801094e <__ieee754_sqrt+0x52>
 8010936:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801093a:	4326      	orrs	r6, r4
 801093c:	d0f5      	beq.n	801092a <__ieee754_sqrt+0x2e>
 801093e:	b135      	cbz	r5, 801094e <__ieee754_sqrt+0x52>
 8010940:	f7ef fcca 	bl	80002d8 <__aeabi_dsub>
 8010944:	4602      	mov	r2, r0
 8010946:	460b      	mov	r3, r1
 8010948:	f7ef ffa8 	bl	800089c <__aeabi_ddiv>
 801094c:	e7eb      	b.n	8010926 <__ieee754_sqrt+0x2a>
 801094e:	1509      	asrs	r1, r1, #20
 8010950:	f000 808d 	beq.w	8010a6e <__ieee754_sqrt+0x172>
 8010954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010958:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801095c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010960:	07c9      	lsls	r1, r1, #31
 8010962:	bf5c      	itt	pl
 8010964:	005b      	lslpl	r3, r3, #1
 8010966:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801096a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801096e:	bf58      	it	pl
 8010970:	0052      	lslpl	r2, r2, #1
 8010972:	2500      	movs	r5, #0
 8010974:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010978:	1076      	asrs	r6, r6, #1
 801097a:	0052      	lsls	r2, r2, #1
 801097c:	f04f 0e16 	mov.w	lr, #22
 8010980:	46ac      	mov	ip, r5
 8010982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010986:	eb0c 0001 	add.w	r0, ip, r1
 801098a:	4298      	cmp	r0, r3
 801098c:	bfde      	ittt	le
 801098e:	1a1b      	suble	r3, r3, r0
 8010990:	eb00 0c01 	addle.w	ip, r0, r1
 8010994:	186d      	addle	r5, r5, r1
 8010996:	005b      	lsls	r3, r3, #1
 8010998:	f1be 0e01 	subs.w	lr, lr, #1
 801099c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80109a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80109a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80109a8:	d1ed      	bne.n	8010986 <__ieee754_sqrt+0x8a>
 80109aa:	4674      	mov	r4, lr
 80109ac:	2720      	movs	r7, #32
 80109ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80109b2:	4563      	cmp	r3, ip
 80109b4:	eb01 000e 	add.w	r0, r1, lr
 80109b8:	dc02      	bgt.n	80109c0 <__ieee754_sqrt+0xc4>
 80109ba:	d113      	bne.n	80109e4 <__ieee754_sqrt+0xe8>
 80109bc:	4290      	cmp	r0, r2
 80109be:	d811      	bhi.n	80109e4 <__ieee754_sqrt+0xe8>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	eb00 0e01 	add.w	lr, r0, r1
 80109c6:	da57      	bge.n	8010a78 <__ieee754_sqrt+0x17c>
 80109c8:	f1be 0f00 	cmp.w	lr, #0
 80109cc:	db54      	blt.n	8010a78 <__ieee754_sqrt+0x17c>
 80109ce:	f10c 0801 	add.w	r8, ip, #1
 80109d2:	eba3 030c 	sub.w	r3, r3, ip
 80109d6:	4290      	cmp	r0, r2
 80109d8:	bf88      	it	hi
 80109da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80109de:	1a12      	subs	r2, r2, r0
 80109e0:	440c      	add	r4, r1
 80109e2:	46c4      	mov	ip, r8
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	3f01      	subs	r7, #1
 80109e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80109ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80109f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80109f4:	d1dd      	bne.n	80109b2 <__ieee754_sqrt+0xb6>
 80109f6:	4313      	orrs	r3, r2
 80109f8:	d01b      	beq.n	8010a32 <__ieee754_sqrt+0x136>
 80109fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010aa8 <__ieee754_sqrt+0x1ac>
 80109fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010aac <__ieee754_sqrt+0x1b0>
 8010a02:	e9da 0100 	ldrd	r0, r1, [sl]
 8010a06:	e9db 2300 	ldrd	r2, r3, [fp]
 8010a0a:	f7ef fc65 	bl	80002d8 <__aeabi_dsub>
 8010a0e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a12:	4602      	mov	r2, r0
 8010a14:	460b      	mov	r3, r1
 8010a16:	4640      	mov	r0, r8
 8010a18:	4649      	mov	r1, r9
 8010a1a:	f7f0 f891 	bl	8000b40 <__aeabi_dcmple>
 8010a1e:	b140      	cbz	r0, 8010a32 <__ieee754_sqrt+0x136>
 8010a20:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010a24:	e9da 0100 	ldrd	r0, r1, [sl]
 8010a28:	e9db 2300 	ldrd	r2, r3, [fp]
 8010a2c:	d126      	bne.n	8010a7c <__ieee754_sqrt+0x180>
 8010a2e:	3501      	adds	r5, #1
 8010a30:	463c      	mov	r4, r7
 8010a32:	106a      	asrs	r2, r5, #1
 8010a34:	0863      	lsrs	r3, r4, #1
 8010a36:	07e9      	lsls	r1, r5, #31
 8010a38:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010a3c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010a40:	bf48      	it	mi
 8010a42:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010a46:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010a4a:	461c      	mov	r4, r3
 8010a4c:	e76d      	b.n	801092a <__ieee754_sqrt+0x2e>
 8010a4e:	0ad3      	lsrs	r3, r2, #11
 8010a50:	3815      	subs	r0, #21
 8010a52:	0552      	lsls	r2, r2, #21
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d0fa      	beq.n	8010a4e <__ieee754_sqrt+0x152>
 8010a58:	02dc      	lsls	r4, r3, #11
 8010a5a:	d50a      	bpl.n	8010a72 <__ieee754_sqrt+0x176>
 8010a5c:	f1c1 0420 	rsb	r4, r1, #32
 8010a60:	fa22 f404 	lsr.w	r4, r2, r4
 8010a64:	1e4d      	subs	r5, r1, #1
 8010a66:	408a      	lsls	r2, r1
 8010a68:	4323      	orrs	r3, r4
 8010a6a:	1b41      	subs	r1, r0, r5
 8010a6c:	e772      	b.n	8010954 <__ieee754_sqrt+0x58>
 8010a6e:	4608      	mov	r0, r1
 8010a70:	e7f0      	b.n	8010a54 <__ieee754_sqrt+0x158>
 8010a72:	005b      	lsls	r3, r3, #1
 8010a74:	3101      	adds	r1, #1
 8010a76:	e7ef      	b.n	8010a58 <__ieee754_sqrt+0x15c>
 8010a78:	46e0      	mov	r8, ip
 8010a7a:	e7aa      	b.n	80109d2 <__ieee754_sqrt+0xd6>
 8010a7c:	f7ef fc2e 	bl	80002dc <__adddf3>
 8010a80:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a84:	4602      	mov	r2, r0
 8010a86:	460b      	mov	r3, r1
 8010a88:	4640      	mov	r0, r8
 8010a8a:	4649      	mov	r1, r9
 8010a8c:	f7f0 f84e 	bl	8000b2c <__aeabi_dcmplt>
 8010a90:	b120      	cbz	r0, 8010a9c <__ieee754_sqrt+0x1a0>
 8010a92:	1ca0      	adds	r0, r4, #2
 8010a94:	bf08      	it	eq
 8010a96:	3501      	addeq	r5, #1
 8010a98:	3402      	adds	r4, #2
 8010a9a:	e7ca      	b.n	8010a32 <__ieee754_sqrt+0x136>
 8010a9c:	3401      	adds	r4, #1
 8010a9e:	f024 0401 	bic.w	r4, r4, #1
 8010aa2:	e7c6      	b.n	8010a32 <__ieee754_sqrt+0x136>
 8010aa4:	7ff00000 	.word	0x7ff00000
 8010aa8:	20007a40 	.word	0x20007a40
 8010aac:	20007a48 	.word	0x20007a48

08010ab0 <__ieee754_sqrtf>:
 8010ab0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ab4:	4770      	bx	lr
	...

08010ab8 <__ieee754_exp>:
 8010ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010abc:	ec55 4b10 	vmov	r4, r5, d0
 8010ac0:	49b5      	ldr	r1, [pc, #724]	; (8010d98 <__ieee754_exp+0x2e0>)
 8010ac2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010ac6:	428a      	cmp	r2, r1
 8010ac8:	ed2d 8b04 	vpush	{d8-d9}
 8010acc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010ad0:	d93b      	bls.n	8010b4a <__ieee754_exp+0x92>
 8010ad2:	49b2      	ldr	r1, [pc, #712]	; (8010d9c <__ieee754_exp+0x2e4>)
 8010ad4:	428a      	cmp	r2, r1
 8010ad6:	d916      	bls.n	8010b06 <__ieee754_exp+0x4e>
 8010ad8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010adc:	4323      	orrs	r3, r4
 8010ade:	ee10 2a10 	vmov	r2, s0
 8010ae2:	d007      	beq.n	8010af4 <__ieee754_exp+0x3c>
 8010ae4:	462b      	mov	r3, r5
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	4629      	mov	r1, r5
 8010aea:	f7ef fbf7 	bl	80002dc <__adddf3>
 8010aee:	4604      	mov	r4, r0
 8010af0:	460d      	mov	r5, r1
 8010af2:	e002      	b.n	8010afa <__ieee754_exp+0x42>
 8010af4:	b10e      	cbz	r6, 8010afa <__ieee754_exp+0x42>
 8010af6:	2400      	movs	r4, #0
 8010af8:	2500      	movs	r5, #0
 8010afa:	ecbd 8b04 	vpop	{d8-d9}
 8010afe:	ec45 4b10 	vmov	d0, r4, r5
 8010b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b06:	a38e      	add	r3, pc, #568	; (adr r3, 8010d40 <__ieee754_exp+0x288>)
 8010b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b0c:	ee10 0a10 	vmov	r0, s0
 8010b10:	4629      	mov	r1, r5
 8010b12:	f7f0 f829 	bl	8000b68 <__aeabi_dcmpgt>
 8010b16:	4607      	mov	r7, r0
 8010b18:	b130      	cbz	r0, 8010b28 <__ieee754_exp+0x70>
 8010b1a:	ecbd 8b04 	vpop	{d8-d9}
 8010b1e:	2000      	movs	r0, #0
 8010b20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b24:	f000 bf25 	b.w	8011972 <__math_oflow>
 8010b28:	a387      	add	r3, pc, #540	; (adr r3, 8010d48 <__ieee754_exp+0x290>)
 8010b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2e:	4620      	mov	r0, r4
 8010b30:	4629      	mov	r1, r5
 8010b32:	f7ef fffb 	bl	8000b2c <__aeabi_dcmplt>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	f000 808b 	beq.w	8010c52 <__ieee754_exp+0x19a>
 8010b3c:	ecbd 8b04 	vpop	{d8-d9}
 8010b40:	4638      	mov	r0, r7
 8010b42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b46:	f000 bf0b 	b.w	8011960 <__math_uflow>
 8010b4a:	4b95      	ldr	r3, [pc, #596]	; (8010da0 <__ieee754_exp+0x2e8>)
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	f240 80ac 	bls.w	8010caa <__ieee754_exp+0x1f2>
 8010b52:	4b94      	ldr	r3, [pc, #592]	; (8010da4 <__ieee754_exp+0x2ec>)
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d87c      	bhi.n	8010c52 <__ieee754_exp+0x19a>
 8010b58:	4b93      	ldr	r3, [pc, #588]	; (8010da8 <__ieee754_exp+0x2f0>)
 8010b5a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	ee10 0a10 	vmov	r0, s0
 8010b66:	4629      	mov	r1, r5
 8010b68:	f7ef fbb6 	bl	80002d8 <__aeabi_dsub>
 8010b6c:	4b8f      	ldr	r3, [pc, #572]	; (8010dac <__ieee754_exp+0x2f4>)
 8010b6e:	00f7      	lsls	r7, r6, #3
 8010b70:	443b      	add	r3, r7
 8010b72:	ed93 7b00 	vldr	d7, [r3]
 8010b76:	f1c6 0a01 	rsb	sl, r6, #1
 8010b7a:	4680      	mov	r8, r0
 8010b7c:	4689      	mov	r9, r1
 8010b7e:	ebaa 0a06 	sub.w	sl, sl, r6
 8010b82:	eeb0 8a47 	vmov.f32	s16, s14
 8010b86:	eef0 8a67 	vmov.f32	s17, s15
 8010b8a:	ec53 2b18 	vmov	r2, r3, d8
 8010b8e:	4640      	mov	r0, r8
 8010b90:	4649      	mov	r1, r9
 8010b92:	f7ef fba1 	bl	80002d8 <__aeabi_dsub>
 8010b96:	4604      	mov	r4, r0
 8010b98:	460d      	mov	r5, r1
 8010b9a:	4622      	mov	r2, r4
 8010b9c:	462b      	mov	r3, r5
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	f7ef fd51 	bl	8000648 <__aeabi_dmul>
 8010ba6:	a36a      	add	r3, pc, #424	; (adr r3, 8010d50 <__ieee754_exp+0x298>)
 8010ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bac:	4606      	mov	r6, r0
 8010bae:	460f      	mov	r7, r1
 8010bb0:	f7ef fd4a 	bl	8000648 <__aeabi_dmul>
 8010bb4:	a368      	add	r3, pc, #416	; (adr r3, 8010d58 <__ieee754_exp+0x2a0>)
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	f7ef fb8d 	bl	80002d8 <__aeabi_dsub>
 8010bbe:	4632      	mov	r2, r6
 8010bc0:	463b      	mov	r3, r7
 8010bc2:	f7ef fd41 	bl	8000648 <__aeabi_dmul>
 8010bc6:	a366      	add	r3, pc, #408	; (adr r3, 8010d60 <__ieee754_exp+0x2a8>)
 8010bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bcc:	f7ef fb86 	bl	80002dc <__adddf3>
 8010bd0:	4632      	mov	r2, r6
 8010bd2:	463b      	mov	r3, r7
 8010bd4:	f7ef fd38 	bl	8000648 <__aeabi_dmul>
 8010bd8:	a363      	add	r3, pc, #396	; (adr r3, 8010d68 <__ieee754_exp+0x2b0>)
 8010bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bde:	f7ef fb7b 	bl	80002d8 <__aeabi_dsub>
 8010be2:	4632      	mov	r2, r6
 8010be4:	463b      	mov	r3, r7
 8010be6:	f7ef fd2f 	bl	8000648 <__aeabi_dmul>
 8010bea:	a361      	add	r3, pc, #388	; (adr r3, 8010d70 <__ieee754_exp+0x2b8>)
 8010bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf0:	f7ef fb74 	bl	80002dc <__adddf3>
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	463b      	mov	r3, r7
 8010bf8:	f7ef fd26 	bl	8000648 <__aeabi_dmul>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4620      	mov	r0, r4
 8010c02:	4629      	mov	r1, r5
 8010c04:	f7ef fb68 	bl	80002d8 <__aeabi_dsub>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	4620      	mov	r0, r4
 8010c12:	4629      	mov	r1, r5
 8010c14:	f7ef fd18 	bl	8000648 <__aeabi_dmul>
 8010c18:	ec41 0b19 	vmov	d9, r0, r1
 8010c1c:	f1ba 0f00 	cmp.w	sl, #0
 8010c20:	d15d      	bne.n	8010cde <__ieee754_exp+0x226>
 8010c22:	2200      	movs	r2, #0
 8010c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c28:	4630      	mov	r0, r6
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	f7ef fb54 	bl	80002d8 <__aeabi_dsub>
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	ec51 0b19 	vmov	r0, r1, d9
 8010c38:	f7ef fe30 	bl	800089c <__aeabi_ddiv>
 8010c3c:	4622      	mov	r2, r4
 8010c3e:	462b      	mov	r3, r5
 8010c40:	f7ef fb4a 	bl	80002d8 <__aeabi_dsub>
 8010c44:	4602      	mov	r2, r0
 8010c46:	460b      	mov	r3, r1
 8010c48:	2000      	movs	r0, #0
 8010c4a:	4959      	ldr	r1, [pc, #356]	; (8010db0 <__ieee754_exp+0x2f8>)
 8010c4c:	f7ef fb44 	bl	80002d8 <__aeabi_dsub>
 8010c50:	e74d      	b.n	8010aee <__ieee754_exp+0x36>
 8010c52:	4b58      	ldr	r3, [pc, #352]	; (8010db4 <__ieee754_exp+0x2fc>)
 8010c54:	4620      	mov	r0, r4
 8010c56:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	a346      	add	r3, pc, #280	; (adr r3, 8010d78 <__ieee754_exp+0x2c0>)
 8010c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c62:	f7ef fcf1 	bl	8000648 <__aeabi_dmul>
 8010c66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c6a:	f7ef fb37 	bl	80002dc <__adddf3>
 8010c6e:	f7ef ff9b 	bl	8000ba8 <__aeabi_d2iz>
 8010c72:	4682      	mov	sl, r0
 8010c74:	f7ef fc7e 	bl	8000574 <__aeabi_i2d>
 8010c78:	a341      	add	r3, pc, #260	; (adr r3, 8010d80 <__ieee754_exp+0x2c8>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	4606      	mov	r6, r0
 8010c80:	460f      	mov	r7, r1
 8010c82:	f7ef fce1 	bl	8000648 <__aeabi_dmul>
 8010c86:	4602      	mov	r2, r0
 8010c88:	460b      	mov	r3, r1
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	f7ef fb23 	bl	80002d8 <__aeabi_dsub>
 8010c92:	a33d      	add	r3, pc, #244	; (adr r3, 8010d88 <__ieee754_exp+0x2d0>)
 8010c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c98:	4680      	mov	r8, r0
 8010c9a:	4689      	mov	r9, r1
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	4639      	mov	r1, r7
 8010ca0:	f7ef fcd2 	bl	8000648 <__aeabi_dmul>
 8010ca4:	ec41 0b18 	vmov	d8, r0, r1
 8010ca8:	e76f      	b.n	8010b8a <__ieee754_exp+0xd2>
 8010caa:	4b43      	ldr	r3, [pc, #268]	; (8010db8 <__ieee754_exp+0x300>)
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d811      	bhi.n	8010cd4 <__ieee754_exp+0x21c>
 8010cb0:	a337      	add	r3, pc, #220	; (adr r3, 8010d90 <__ieee754_exp+0x2d8>)
 8010cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb6:	ee10 0a10 	vmov	r0, s0
 8010cba:	4629      	mov	r1, r5
 8010cbc:	f7ef fb0e 	bl	80002dc <__adddf3>
 8010cc0:	4b3b      	ldr	r3, [pc, #236]	; (8010db0 <__ieee754_exp+0x2f8>)
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f7ef ff50 	bl	8000b68 <__aeabi_dcmpgt>
 8010cc8:	b138      	cbz	r0, 8010cda <__ieee754_exp+0x222>
 8010cca:	4b39      	ldr	r3, [pc, #228]	; (8010db0 <__ieee754_exp+0x2f8>)
 8010ccc:	2200      	movs	r2, #0
 8010cce:	4620      	mov	r0, r4
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	e70a      	b.n	8010aea <__ieee754_exp+0x32>
 8010cd4:	f04f 0a00 	mov.w	sl, #0
 8010cd8:	e75f      	b.n	8010b9a <__ieee754_exp+0xe2>
 8010cda:	4682      	mov	sl, r0
 8010cdc:	e75d      	b.n	8010b9a <__ieee754_exp+0xe2>
 8010cde:	4632      	mov	r2, r6
 8010ce0:	463b      	mov	r3, r7
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010ce8:	f7ef faf6 	bl	80002d8 <__aeabi_dsub>
 8010cec:	4602      	mov	r2, r0
 8010cee:	460b      	mov	r3, r1
 8010cf0:	ec51 0b19 	vmov	r0, r1, d9
 8010cf4:	f7ef fdd2 	bl	800089c <__aeabi_ddiv>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	ec51 0b18 	vmov	r0, r1, d8
 8010d00:	f7ef faea 	bl	80002d8 <__aeabi_dsub>
 8010d04:	4642      	mov	r2, r8
 8010d06:	464b      	mov	r3, r9
 8010d08:	f7ef fae6 	bl	80002d8 <__aeabi_dsub>
 8010d0c:	4602      	mov	r2, r0
 8010d0e:	460b      	mov	r3, r1
 8010d10:	2000      	movs	r0, #0
 8010d12:	4927      	ldr	r1, [pc, #156]	; (8010db0 <__ieee754_exp+0x2f8>)
 8010d14:	f7ef fae0 	bl	80002d8 <__aeabi_dsub>
 8010d18:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8010d1c:	4592      	cmp	sl, r2
 8010d1e:	db02      	blt.n	8010d26 <__ieee754_exp+0x26e>
 8010d20:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010d24:	e6e3      	b.n	8010aee <__ieee754_exp+0x36>
 8010d26:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8010d2a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010d34:	f7ef fc88 	bl	8000648 <__aeabi_dmul>
 8010d38:	e6d9      	b.n	8010aee <__ieee754_exp+0x36>
 8010d3a:	bf00      	nop
 8010d3c:	f3af 8000 	nop.w
 8010d40:	fefa39ef 	.word	0xfefa39ef
 8010d44:	40862e42 	.word	0x40862e42
 8010d48:	d52d3051 	.word	0xd52d3051
 8010d4c:	c0874910 	.word	0xc0874910
 8010d50:	72bea4d0 	.word	0x72bea4d0
 8010d54:	3e663769 	.word	0x3e663769
 8010d58:	c5d26bf1 	.word	0xc5d26bf1
 8010d5c:	3ebbbd41 	.word	0x3ebbbd41
 8010d60:	af25de2c 	.word	0xaf25de2c
 8010d64:	3f11566a 	.word	0x3f11566a
 8010d68:	16bebd93 	.word	0x16bebd93
 8010d6c:	3f66c16c 	.word	0x3f66c16c
 8010d70:	5555553e 	.word	0x5555553e
 8010d74:	3fc55555 	.word	0x3fc55555
 8010d78:	652b82fe 	.word	0x652b82fe
 8010d7c:	3ff71547 	.word	0x3ff71547
 8010d80:	fee00000 	.word	0xfee00000
 8010d84:	3fe62e42 	.word	0x3fe62e42
 8010d88:	35793c76 	.word	0x35793c76
 8010d8c:	3dea39ef 	.word	0x3dea39ef
 8010d90:	8800759c 	.word	0x8800759c
 8010d94:	7e37e43c 	.word	0x7e37e43c
 8010d98:	40862e41 	.word	0x40862e41
 8010d9c:	7fefffff 	.word	0x7fefffff
 8010da0:	3fd62e42 	.word	0x3fd62e42
 8010da4:	3ff0a2b1 	.word	0x3ff0a2b1
 8010da8:	08024d50 	.word	0x08024d50
 8010dac:	08024d60 	.word	0x08024d60
 8010db0:	3ff00000 	.word	0x3ff00000
 8010db4:	08024d40 	.word	0x08024d40
 8010db8:	3defffff 	.word	0x3defffff
 8010dbc:	00000000 	.word	0x00000000

08010dc0 <__ieee754_pow>:
 8010dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	ed2d 8b06 	vpush	{d8-d10}
 8010dc8:	b089      	sub	sp, #36	; 0x24
 8010dca:	ed8d 1b00 	vstr	d1, [sp]
 8010dce:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010dd2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010dd6:	ea58 0102 	orrs.w	r1, r8, r2
 8010dda:	ec57 6b10 	vmov	r6, r7, d0
 8010dde:	d115      	bne.n	8010e0c <__ieee754_pow+0x4c>
 8010de0:	19b3      	adds	r3, r6, r6
 8010de2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010de6:	4152      	adcs	r2, r2
 8010de8:	4299      	cmp	r1, r3
 8010dea:	4b89      	ldr	r3, [pc, #548]	; (8011010 <__ieee754_pow+0x250>)
 8010dec:	4193      	sbcs	r3, r2
 8010dee:	f080 84d1 	bcs.w	8011794 <__ieee754_pow+0x9d4>
 8010df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010df6:	4630      	mov	r0, r6
 8010df8:	4639      	mov	r1, r7
 8010dfa:	f7ef fa6f 	bl	80002dc <__adddf3>
 8010dfe:	ec41 0b10 	vmov	d0, r0, r1
 8010e02:	b009      	add	sp, #36	; 0x24
 8010e04:	ecbd 8b06 	vpop	{d8-d10}
 8010e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0c:	4b81      	ldr	r3, [pc, #516]	; (8011014 <__ieee754_pow+0x254>)
 8010e0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010e12:	429c      	cmp	r4, r3
 8010e14:	ee10 aa10 	vmov	sl, s0
 8010e18:	463d      	mov	r5, r7
 8010e1a:	dc06      	bgt.n	8010e2a <__ieee754_pow+0x6a>
 8010e1c:	d101      	bne.n	8010e22 <__ieee754_pow+0x62>
 8010e1e:	2e00      	cmp	r6, #0
 8010e20:	d1e7      	bne.n	8010df2 <__ieee754_pow+0x32>
 8010e22:	4598      	cmp	r8, r3
 8010e24:	dc01      	bgt.n	8010e2a <__ieee754_pow+0x6a>
 8010e26:	d10f      	bne.n	8010e48 <__ieee754_pow+0x88>
 8010e28:	b172      	cbz	r2, 8010e48 <__ieee754_pow+0x88>
 8010e2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010e2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010e32:	ea55 050a 	orrs.w	r5, r5, sl
 8010e36:	d1dc      	bne.n	8010df2 <__ieee754_pow+0x32>
 8010e38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010e3c:	18db      	adds	r3, r3, r3
 8010e3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010e42:	4152      	adcs	r2, r2
 8010e44:	429d      	cmp	r5, r3
 8010e46:	e7d0      	b.n	8010dea <__ieee754_pow+0x2a>
 8010e48:	2d00      	cmp	r5, #0
 8010e4a:	da3b      	bge.n	8010ec4 <__ieee754_pow+0x104>
 8010e4c:	4b72      	ldr	r3, [pc, #456]	; (8011018 <__ieee754_pow+0x258>)
 8010e4e:	4598      	cmp	r8, r3
 8010e50:	dc51      	bgt.n	8010ef6 <__ieee754_pow+0x136>
 8010e52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010e56:	4598      	cmp	r8, r3
 8010e58:	f340 84ab 	ble.w	80117b2 <__ieee754_pow+0x9f2>
 8010e5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010e60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e64:	2b14      	cmp	r3, #20
 8010e66:	dd0f      	ble.n	8010e88 <__ieee754_pow+0xc8>
 8010e68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010e6c:	fa22 f103 	lsr.w	r1, r2, r3
 8010e70:	fa01 f303 	lsl.w	r3, r1, r3
 8010e74:	4293      	cmp	r3, r2
 8010e76:	f040 849c 	bne.w	80117b2 <__ieee754_pow+0x9f2>
 8010e7a:	f001 0101 	and.w	r1, r1, #1
 8010e7e:	f1c1 0302 	rsb	r3, r1, #2
 8010e82:	9304      	str	r3, [sp, #16]
 8010e84:	b182      	cbz	r2, 8010ea8 <__ieee754_pow+0xe8>
 8010e86:	e05f      	b.n	8010f48 <__ieee754_pow+0x188>
 8010e88:	2a00      	cmp	r2, #0
 8010e8a:	d15b      	bne.n	8010f44 <__ieee754_pow+0x184>
 8010e8c:	f1c3 0314 	rsb	r3, r3, #20
 8010e90:	fa48 f103 	asr.w	r1, r8, r3
 8010e94:	fa01 f303 	lsl.w	r3, r1, r3
 8010e98:	4543      	cmp	r3, r8
 8010e9a:	f040 8487 	bne.w	80117ac <__ieee754_pow+0x9ec>
 8010e9e:	f001 0101 	and.w	r1, r1, #1
 8010ea2:	f1c1 0302 	rsb	r3, r1, #2
 8010ea6:	9304      	str	r3, [sp, #16]
 8010ea8:	4b5c      	ldr	r3, [pc, #368]	; (801101c <__ieee754_pow+0x25c>)
 8010eaa:	4598      	cmp	r8, r3
 8010eac:	d132      	bne.n	8010f14 <__ieee754_pow+0x154>
 8010eae:	f1b9 0f00 	cmp.w	r9, #0
 8010eb2:	f280 8477 	bge.w	80117a4 <__ieee754_pow+0x9e4>
 8010eb6:	4959      	ldr	r1, [pc, #356]	; (801101c <__ieee754_pow+0x25c>)
 8010eb8:	4632      	mov	r2, r6
 8010eba:	463b      	mov	r3, r7
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	f7ef fced 	bl	800089c <__aeabi_ddiv>
 8010ec2:	e79c      	b.n	8010dfe <__ieee754_pow+0x3e>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	9304      	str	r3, [sp, #16]
 8010ec8:	2a00      	cmp	r2, #0
 8010eca:	d13d      	bne.n	8010f48 <__ieee754_pow+0x188>
 8010ecc:	4b51      	ldr	r3, [pc, #324]	; (8011014 <__ieee754_pow+0x254>)
 8010ece:	4598      	cmp	r8, r3
 8010ed0:	d1ea      	bne.n	8010ea8 <__ieee754_pow+0xe8>
 8010ed2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010ed6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010eda:	ea53 030a 	orrs.w	r3, r3, sl
 8010ede:	f000 8459 	beq.w	8011794 <__ieee754_pow+0x9d4>
 8010ee2:	4b4f      	ldr	r3, [pc, #316]	; (8011020 <__ieee754_pow+0x260>)
 8010ee4:	429c      	cmp	r4, r3
 8010ee6:	dd08      	ble.n	8010efa <__ieee754_pow+0x13a>
 8010ee8:	f1b9 0f00 	cmp.w	r9, #0
 8010eec:	f2c0 8456 	blt.w	801179c <__ieee754_pow+0x9dc>
 8010ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ef4:	e783      	b.n	8010dfe <__ieee754_pow+0x3e>
 8010ef6:	2302      	movs	r3, #2
 8010ef8:	e7e5      	b.n	8010ec6 <__ieee754_pow+0x106>
 8010efa:	f1b9 0f00 	cmp.w	r9, #0
 8010efe:	f04f 0000 	mov.w	r0, #0
 8010f02:	f04f 0100 	mov.w	r1, #0
 8010f06:	f6bf af7a 	bge.w	8010dfe <__ieee754_pow+0x3e>
 8010f0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010f0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f12:	e774      	b.n	8010dfe <__ieee754_pow+0x3e>
 8010f14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010f18:	d106      	bne.n	8010f28 <__ieee754_pow+0x168>
 8010f1a:	4632      	mov	r2, r6
 8010f1c:	463b      	mov	r3, r7
 8010f1e:	4630      	mov	r0, r6
 8010f20:	4639      	mov	r1, r7
 8010f22:	f7ef fb91 	bl	8000648 <__aeabi_dmul>
 8010f26:	e76a      	b.n	8010dfe <__ieee754_pow+0x3e>
 8010f28:	4b3e      	ldr	r3, [pc, #248]	; (8011024 <__ieee754_pow+0x264>)
 8010f2a:	4599      	cmp	r9, r3
 8010f2c:	d10c      	bne.n	8010f48 <__ieee754_pow+0x188>
 8010f2e:	2d00      	cmp	r5, #0
 8010f30:	db0a      	blt.n	8010f48 <__ieee754_pow+0x188>
 8010f32:	ec47 6b10 	vmov	d0, r6, r7
 8010f36:	b009      	add	sp, #36	; 0x24
 8010f38:	ecbd 8b06 	vpop	{d8-d10}
 8010f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f40:	f7ff bcdc 	b.w	80108fc <__ieee754_sqrt>
 8010f44:	2300      	movs	r3, #0
 8010f46:	9304      	str	r3, [sp, #16]
 8010f48:	ec47 6b10 	vmov	d0, r6, r7
 8010f4c:	f000 fc62 	bl	8011814 <fabs>
 8010f50:	ec51 0b10 	vmov	r0, r1, d0
 8010f54:	f1ba 0f00 	cmp.w	sl, #0
 8010f58:	d129      	bne.n	8010fae <__ieee754_pow+0x1ee>
 8010f5a:	b124      	cbz	r4, 8010f66 <__ieee754_pow+0x1a6>
 8010f5c:	4b2f      	ldr	r3, [pc, #188]	; (801101c <__ieee754_pow+0x25c>)
 8010f5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d123      	bne.n	8010fae <__ieee754_pow+0x1ee>
 8010f66:	f1b9 0f00 	cmp.w	r9, #0
 8010f6a:	da05      	bge.n	8010f78 <__ieee754_pow+0x1b8>
 8010f6c:	4602      	mov	r2, r0
 8010f6e:	460b      	mov	r3, r1
 8010f70:	2000      	movs	r0, #0
 8010f72:	492a      	ldr	r1, [pc, #168]	; (801101c <__ieee754_pow+0x25c>)
 8010f74:	f7ef fc92 	bl	800089c <__aeabi_ddiv>
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	f6bf af40 	bge.w	8010dfe <__ieee754_pow+0x3e>
 8010f7e:	9b04      	ldr	r3, [sp, #16]
 8010f80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010f84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010f88:	431c      	orrs	r4, r3
 8010f8a:	d108      	bne.n	8010f9e <__ieee754_pow+0x1de>
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	460b      	mov	r3, r1
 8010f90:	4610      	mov	r0, r2
 8010f92:	4619      	mov	r1, r3
 8010f94:	f7ef f9a0 	bl	80002d8 <__aeabi_dsub>
 8010f98:	4602      	mov	r2, r0
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	e78f      	b.n	8010ebe <__ieee754_pow+0xfe>
 8010f9e:	9b04      	ldr	r3, [sp, #16]
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	f47f af2c 	bne.w	8010dfe <__ieee754_pow+0x3e>
 8010fa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010faa:	4619      	mov	r1, r3
 8010fac:	e727      	b.n	8010dfe <__ieee754_pow+0x3e>
 8010fae:	0feb      	lsrs	r3, r5, #31
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	9306      	str	r3, [sp, #24]
 8010fb4:	9a06      	ldr	r2, [sp, #24]
 8010fb6:	9b04      	ldr	r3, [sp, #16]
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	d102      	bne.n	8010fc2 <__ieee754_pow+0x202>
 8010fbc:	4632      	mov	r2, r6
 8010fbe:	463b      	mov	r3, r7
 8010fc0:	e7e6      	b.n	8010f90 <__ieee754_pow+0x1d0>
 8010fc2:	4b19      	ldr	r3, [pc, #100]	; (8011028 <__ieee754_pow+0x268>)
 8010fc4:	4598      	cmp	r8, r3
 8010fc6:	f340 80fb 	ble.w	80111c0 <__ieee754_pow+0x400>
 8010fca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010fce:	4598      	cmp	r8, r3
 8010fd0:	4b13      	ldr	r3, [pc, #76]	; (8011020 <__ieee754_pow+0x260>)
 8010fd2:	dd0c      	ble.n	8010fee <__ieee754_pow+0x22e>
 8010fd4:	429c      	cmp	r4, r3
 8010fd6:	dc0f      	bgt.n	8010ff8 <__ieee754_pow+0x238>
 8010fd8:	f1b9 0f00 	cmp.w	r9, #0
 8010fdc:	da0f      	bge.n	8010ffe <__ieee754_pow+0x23e>
 8010fde:	2000      	movs	r0, #0
 8010fe0:	b009      	add	sp, #36	; 0x24
 8010fe2:	ecbd 8b06 	vpop	{d8-d10}
 8010fe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fea:	f000 bcc2 	b.w	8011972 <__math_oflow>
 8010fee:	429c      	cmp	r4, r3
 8010ff0:	dbf2      	blt.n	8010fd8 <__ieee754_pow+0x218>
 8010ff2:	4b0a      	ldr	r3, [pc, #40]	; (801101c <__ieee754_pow+0x25c>)
 8010ff4:	429c      	cmp	r4, r3
 8010ff6:	dd19      	ble.n	801102c <__ieee754_pow+0x26c>
 8010ff8:	f1b9 0f00 	cmp.w	r9, #0
 8010ffc:	dcef      	bgt.n	8010fde <__ieee754_pow+0x21e>
 8010ffe:	2000      	movs	r0, #0
 8011000:	b009      	add	sp, #36	; 0x24
 8011002:	ecbd 8b06 	vpop	{d8-d10}
 8011006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100a:	f000 bca9 	b.w	8011960 <__math_uflow>
 801100e:	bf00      	nop
 8011010:	fff00000 	.word	0xfff00000
 8011014:	7ff00000 	.word	0x7ff00000
 8011018:	433fffff 	.word	0x433fffff
 801101c:	3ff00000 	.word	0x3ff00000
 8011020:	3fefffff 	.word	0x3fefffff
 8011024:	3fe00000 	.word	0x3fe00000
 8011028:	41e00000 	.word	0x41e00000
 801102c:	4b60      	ldr	r3, [pc, #384]	; (80111b0 <__ieee754_pow+0x3f0>)
 801102e:	2200      	movs	r2, #0
 8011030:	f7ef f952 	bl	80002d8 <__aeabi_dsub>
 8011034:	a354      	add	r3, pc, #336	; (adr r3, 8011188 <__ieee754_pow+0x3c8>)
 8011036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103a:	4604      	mov	r4, r0
 801103c:	460d      	mov	r5, r1
 801103e:	f7ef fb03 	bl	8000648 <__aeabi_dmul>
 8011042:	a353      	add	r3, pc, #332	; (adr r3, 8011190 <__ieee754_pow+0x3d0>)
 8011044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011048:	4606      	mov	r6, r0
 801104a:	460f      	mov	r7, r1
 801104c:	4620      	mov	r0, r4
 801104e:	4629      	mov	r1, r5
 8011050:	f7ef fafa 	bl	8000648 <__aeabi_dmul>
 8011054:	4b57      	ldr	r3, [pc, #348]	; (80111b4 <__ieee754_pow+0x3f4>)
 8011056:	4682      	mov	sl, r0
 8011058:	468b      	mov	fp, r1
 801105a:	2200      	movs	r2, #0
 801105c:	4620      	mov	r0, r4
 801105e:	4629      	mov	r1, r5
 8011060:	f7ef faf2 	bl	8000648 <__aeabi_dmul>
 8011064:	4602      	mov	r2, r0
 8011066:	460b      	mov	r3, r1
 8011068:	a14b      	add	r1, pc, #300	; (adr r1, 8011198 <__ieee754_pow+0x3d8>)
 801106a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801106e:	f7ef f933 	bl	80002d8 <__aeabi_dsub>
 8011072:	4622      	mov	r2, r4
 8011074:	462b      	mov	r3, r5
 8011076:	f7ef fae7 	bl	8000648 <__aeabi_dmul>
 801107a:	4602      	mov	r2, r0
 801107c:	460b      	mov	r3, r1
 801107e:	2000      	movs	r0, #0
 8011080:	494d      	ldr	r1, [pc, #308]	; (80111b8 <__ieee754_pow+0x3f8>)
 8011082:	f7ef f929 	bl	80002d8 <__aeabi_dsub>
 8011086:	4622      	mov	r2, r4
 8011088:	4680      	mov	r8, r0
 801108a:	4689      	mov	r9, r1
 801108c:	462b      	mov	r3, r5
 801108e:	4620      	mov	r0, r4
 8011090:	4629      	mov	r1, r5
 8011092:	f7ef fad9 	bl	8000648 <__aeabi_dmul>
 8011096:	4602      	mov	r2, r0
 8011098:	460b      	mov	r3, r1
 801109a:	4640      	mov	r0, r8
 801109c:	4649      	mov	r1, r9
 801109e:	f7ef fad3 	bl	8000648 <__aeabi_dmul>
 80110a2:	a33f      	add	r3, pc, #252	; (adr r3, 80111a0 <__ieee754_pow+0x3e0>)
 80110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a8:	f7ef face 	bl	8000648 <__aeabi_dmul>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4650      	mov	r0, sl
 80110b2:	4659      	mov	r1, fp
 80110b4:	f7ef f910 	bl	80002d8 <__aeabi_dsub>
 80110b8:	4602      	mov	r2, r0
 80110ba:	460b      	mov	r3, r1
 80110bc:	4680      	mov	r8, r0
 80110be:	4689      	mov	r9, r1
 80110c0:	4630      	mov	r0, r6
 80110c2:	4639      	mov	r1, r7
 80110c4:	f7ef f90a 	bl	80002dc <__adddf3>
 80110c8:	2000      	movs	r0, #0
 80110ca:	4632      	mov	r2, r6
 80110cc:	463b      	mov	r3, r7
 80110ce:	4604      	mov	r4, r0
 80110d0:	460d      	mov	r5, r1
 80110d2:	f7ef f901 	bl	80002d8 <__aeabi_dsub>
 80110d6:	4602      	mov	r2, r0
 80110d8:	460b      	mov	r3, r1
 80110da:	4640      	mov	r0, r8
 80110dc:	4649      	mov	r1, r9
 80110de:	f7ef f8fb 	bl	80002d8 <__aeabi_dsub>
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	9a06      	ldr	r2, [sp, #24]
 80110e6:	3b01      	subs	r3, #1
 80110e8:	4313      	orrs	r3, r2
 80110ea:	4682      	mov	sl, r0
 80110ec:	468b      	mov	fp, r1
 80110ee:	f040 81e7 	bne.w	80114c0 <__ieee754_pow+0x700>
 80110f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80111a8 <__ieee754_pow+0x3e8>
 80110f6:	eeb0 8a47 	vmov.f32	s16, s14
 80110fa:	eef0 8a67 	vmov.f32	s17, s15
 80110fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011102:	2600      	movs	r6, #0
 8011104:	4632      	mov	r2, r6
 8011106:	463b      	mov	r3, r7
 8011108:	e9dd 0100 	ldrd	r0, r1, [sp]
 801110c:	f7ef f8e4 	bl	80002d8 <__aeabi_dsub>
 8011110:	4622      	mov	r2, r4
 8011112:	462b      	mov	r3, r5
 8011114:	f7ef fa98 	bl	8000648 <__aeabi_dmul>
 8011118:	e9dd 2300 	ldrd	r2, r3, [sp]
 801111c:	4680      	mov	r8, r0
 801111e:	4689      	mov	r9, r1
 8011120:	4650      	mov	r0, sl
 8011122:	4659      	mov	r1, fp
 8011124:	f7ef fa90 	bl	8000648 <__aeabi_dmul>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4640      	mov	r0, r8
 801112e:	4649      	mov	r1, r9
 8011130:	f7ef f8d4 	bl	80002dc <__adddf3>
 8011134:	4632      	mov	r2, r6
 8011136:	463b      	mov	r3, r7
 8011138:	4680      	mov	r8, r0
 801113a:	4689      	mov	r9, r1
 801113c:	4620      	mov	r0, r4
 801113e:	4629      	mov	r1, r5
 8011140:	f7ef fa82 	bl	8000648 <__aeabi_dmul>
 8011144:	460b      	mov	r3, r1
 8011146:	4604      	mov	r4, r0
 8011148:	460d      	mov	r5, r1
 801114a:	4602      	mov	r2, r0
 801114c:	4649      	mov	r1, r9
 801114e:	4640      	mov	r0, r8
 8011150:	f7ef f8c4 	bl	80002dc <__adddf3>
 8011154:	4b19      	ldr	r3, [pc, #100]	; (80111bc <__ieee754_pow+0x3fc>)
 8011156:	4299      	cmp	r1, r3
 8011158:	ec45 4b19 	vmov	d9, r4, r5
 801115c:	4606      	mov	r6, r0
 801115e:	460f      	mov	r7, r1
 8011160:	468b      	mov	fp, r1
 8011162:	f340 82f0 	ble.w	8011746 <__ieee754_pow+0x986>
 8011166:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801116a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801116e:	4303      	orrs	r3, r0
 8011170:	f000 81e4 	beq.w	801153c <__ieee754_pow+0x77c>
 8011174:	ec51 0b18 	vmov	r0, r1, d8
 8011178:	2200      	movs	r2, #0
 801117a:	2300      	movs	r3, #0
 801117c:	f7ef fcd6 	bl	8000b2c <__aeabi_dcmplt>
 8011180:	3800      	subs	r0, #0
 8011182:	bf18      	it	ne
 8011184:	2001      	movne	r0, #1
 8011186:	e72b      	b.n	8010fe0 <__ieee754_pow+0x220>
 8011188:	60000000 	.word	0x60000000
 801118c:	3ff71547 	.word	0x3ff71547
 8011190:	f85ddf44 	.word	0xf85ddf44
 8011194:	3e54ae0b 	.word	0x3e54ae0b
 8011198:	55555555 	.word	0x55555555
 801119c:	3fd55555 	.word	0x3fd55555
 80111a0:	652b82fe 	.word	0x652b82fe
 80111a4:	3ff71547 	.word	0x3ff71547
 80111a8:	00000000 	.word	0x00000000
 80111ac:	bff00000 	.word	0xbff00000
 80111b0:	3ff00000 	.word	0x3ff00000
 80111b4:	3fd00000 	.word	0x3fd00000
 80111b8:	3fe00000 	.word	0x3fe00000
 80111bc:	408fffff 	.word	0x408fffff
 80111c0:	4bd5      	ldr	r3, [pc, #852]	; (8011518 <__ieee754_pow+0x758>)
 80111c2:	402b      	ands	r3, r5
 80111c4:	2200      	movs	r2, #0
 80111c6:	b92b      	cbnz	r3, 80111d4 <__ieee754_pow+0x414>
 80111c8:	4bd4      	ldr	r3, [pc, #848]	; (801151c <__ieee754_pow+0x75c>)
 80111ca:	f7ef fa3d 	bl	8000648 <__aeabi_dmul>
 80111ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80111d2:	460c      	mov	r4, r1
 80111d4:	1523      	asrs	r3, r4, #20
 80111d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80111da:	4413      	add	r3, r2
 80111dc:	9305      	str	r3, [sp, #20]
 80111de:	4bd0      	ldr	r3, [pc, #832]	; (8011520 <__ieee754_pow+0x760>)
 80111e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80111e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80111e8:	429c      	cmp	r4, r3
 80111ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80111ee:	dd08      	ble.n	8011202 <__ieee754_pow+0x442>
 80111f0:	4bcc      	ldr	r3, [pc, #816]	; (8011524 <__ieee754_pow+0x764>)
 80111f2:	429c      	cmp	r4, r3
 80111f4:	f340 8162 	ble.w	80114bc <__ieee754_pow+0x6fc>
 80111f8:	9b05      	ldr	r3, [sp, #20]
 80111fa:	3301      	adds	r3, #1
 80111fc:	9305      	str	r3, [sp, #20]
 80111fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011202:	2400      	movs	r4, #0
 8011204:	00e3      	lsls	r3, r4, #3
 8011206:	9307      	str	r3, [sp, #28]
 8011208:	4bc7      	ldr	r3, [pc, #796]	; (8011528 <__ieee754_pow+0x768>)
 801120a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801120e:	ed93 7b00 	vldr	d7, [r3]
 8011212:	4629      	mov	r1, r5
 8011214:	ec53 2b17 	vmov	r2, r3, d7
 8011218:	eeb0 9a47 	vmov.f32	s18, s14
 801121c:	eef0 9a67 	vmov.f32	s19, s15
 8011220:	4682      	mov	sl, r0
 8011222:	f7ef f859 	bl	80002d8 <__aeabi_dsub>
 8011226:	4652      	mov	r2, sl
 8011228:	4606      	mov	r6, r0
 801122a:	460f      	mov	r7, r1
 801122c:	462b      	mov	r3, r5
 801122e:	ec51 0b19 	vmov	r0, r1, d9
 8011232:	f7ef f853 	bl	80002dc <__adddf3>
 8011236:	4602      	mov	r2, r0
 8011238:	460b      	mov	r3, r1
 801123a:	2000      	movs	r0, #0
 801123c:	49bb      	ldr	r1, [pc, #748]	; (801152c <__ieee754_pow+0x76c>)
 801123e:	f7ef fb2d 	bl	800089c <__aeabi_ddiv>
 8011242:	ec41 0b1a 	vmov	d10, r0, r1
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	4630      	mov	r0, r6
 801124c:	4639      	mov	r1, r7
 801124e:	f7ef f9fb 	bl	8000648 <__aeabi_dmul>
 8011252:	2300      	movs	r3, #0
 8011254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011258:	9302      	str	r3, [sp, #8]
 801125a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801125e:	46ab      	mov	fp, r5
 8011260:	106d      	asrs	r5, r5, #1
 8011262:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011266:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801126a:	ec41 0b18 	vmov	d8, r0, r1
 801126e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011272:	2200      	movs	r2, #0
 8011274:	4640      	mov	r0, r8
 8011276:	4649      	mov	r1, r9
 8011278:	4614      	mov	r4, r2
 801127a:	461d      	mov	r5, r3
 801127c:	f7ef f9e4 	bl	8000648 <__aeabi_dmul>
 8011280:	4602      	mov	r2, r0
 8011282:	460b      	mov	r3, r1
 8011284:	4630      	mov	r0, r6
 8011286:	4639      	mov	r1, r7
 8011288:	f7ef f826 	bl	80002d8 <__aeabi_dsub>
 801128c:	ec53 2b19 	vmov	r2, r3, d9
 8011290:	4606      	mov	r6, r0
 8011292:	460f      	mov	r7, r1
 8011294:	4620      	mov	r0, r4
 8011296:	4629      	mov	r1, r5
 8011298:	f7ef f81e 	bl	80002d8 <__aeabi_dsub>
 801129c:	4602      	mov	r2, r0
 801129e:	460b      	mov	r3, r1
 80112a0:	4650      	mov	r0, sl
 80112a2:	4659      	mov	r1, fp
 80112a4:	f7ef f818 	bl	80002d8 <__aeabi_dsub>
 80112a8:	4642      	mov	r2, r8
 80112aa:	464b      	mov	r3, r9
 80112ac:	f7ef f9cc 	bl	8000648 <__aeabi_dmul>
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	4630      	mov	r0, r6
 80112b6:	4639      	mov	r1, r7
 80112b8:	f7ef f80e 	bl	80002d8 <__aeabi_dsub>
 80112bc:	ec53 2b1a 	vmov	r2, r3, d10
 80112c0:	f7ef f9c2 	bl	8000648 <__aeabi_dmul>
 80112c4:	ec53 2b18 	vmov	r2, r3, d8
 80112c8:	ec41 0b19 	vmov	d9, r0, r1
 80112cc:	ec51 0b18 	vmov	r0, r1, d8
 80112d0:	f7ef f9ba 	bl	8000648 <__aeabi_dmul>
 80112d4:	a37c      	add	r3, pc, #496	; (adr r3, 80114c8 <__ieee754_pow+0x708>)
 80112d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112da:	4604      	mov	r4, r0
 80112dc:	460d      	mov	r5, r1
 80112de:	f7ef f9b3 	bl	8000648 <__aeabi_dmul>
 80112e2:	a37b      	add	r3, pc, #492	; (adr r3, 80114d0 <__ieee754_pow+0x710>)
 80112e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e8:	f7ee fff8 	bl	80002dc <__adddf3>
 80112ec:	4622      	mov	r2, r4
 80112ee:	462b      	mov	r3, r5
 80112f0:	f7ef f9aa 	bl	8000648 <__aeabi_dmul>
 80112f4:	a378      	add	r3, pc, #480	; (adr r3, 80114d8 <__ieee754_pow+0x718>)
 80112f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fa:	f7ee ffef 	bl	80002dc <__adddf3>
 80112fe:	4622      	mov	r2, r4
 8011300:	462b      	mov	r3, r5
 8011302:	f7ef f9a1 	bl	8000648 <__aeabi_dmul>
 8011306:	a376      	add	r3, pc, #472	; (adr r3, 80114e0 <__ieee754_pow+0x720>)
 8011308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130c:	f7ee ffe6 	bl	80002dc <__adddf3>
 8011310:	4622      	mov	r2, r4
 8011312:	462b      	mov	r3, r5
 8011314:	f7ef f998 	bl	8000648 <__aeabi_dmul>
 8011318:	a373      	add	r3, pc, #460	; (adr r3, 80114e8 <__ieee754_pow+0x728>)
 801131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131e:	f7ee ffdd 	bl	80002dc <__adddf3>
 8011322:	4622      	mov	r2, r4
 8011324:	462b      	mov	r3, r5
 8011326:	f7ef f98f 	bl	8000648 <__aeabi_dmul>
 801132a:	a371      	add	r3, pc, #452	; (adr r3, 80114f0 <__ieee754_pow+0x730>)
 801132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011330:	f7ee ffd4 	bl	80002dc <__adddf3>
 8011334:	4622      	mov	r2, r4
 8011336:	4606      	mov	r6, r0
 8011338:	460f      	mov	r7, r1
 801133a:	462b      	mov	r3, r5
 801133c:	4620      	mov	r0, r4
 801133e:	4629      	mov	r1, r5
 8011340:	f7ef f982 	bl	8000648 <__aeabi_dmul>
 8011344:	4602      	mov	r2, r0
 8011346:	460b      	mov	r3, r1
 8011348:	4630      	mov	r0, r6
 801134a:	4639      	mov	r1, r7
 801134c:	f7ef f97c 	bl	8000648 <__aeabi_dmul>
 8011350:	4642      	mov	r2, r8
 8011352:	4604      	mov	r4, r0
 8011354:	460d      	mov	r5, r1
 8011356:	464b      	mov	r3, r9
 8011358:	ec51 0b18 	vmov	r0, r1, d8
 801135c:	f7ee ffbe 	bl	80002dc <__adddf3>
 8011360:	ec53 2b19 	vmov	r2, r3, d9
 8011364:	f7ef f970 	bl	8000648 <__aeabi_dmul>
 8011368:	4622      	mov	r2, r4
 801136a:	462b      	mov	r3, r5
 801136c:	f7ee ffb6 	bl	80002dc <__adddf3>
 8011370:	4642      	mov	r2, r8
 8011372:	4682      	mov	sl, r0
 8011374:	468b      	mov	fp, r1
 8011376:	464b      	mov	r3, r9
 8011378:	4640      	mov	r0, r8
 801137a:	4649      	mov	r1, r9
 801137c:	f7ef f964 	bl	8000648 <__aeabi_dmul>
 8011380:	4b6b      	ldr	r3, [pc, #428]	; (8011530 <__ieee754_pow+0x770>)
 8011382:	2200      	movs	r2, #0
 8011384:	4606      	mov	r6, r0
 8011386:	460f      	mov	r7, r1
 8011388:	f7ee ffa8 	bl	80002dc <__adddf3>
 801138c:	4652      	mov	r2, sl
 801138e:	465b      	mov	r3, fp
 8011390:	f7ee ffa4 	bl	80002dc <__adddf3>
 8011394:	2000      	movs	r0, #0
 8011396:	4604      	mov	r4, r0
 8011398:	460d      	mov	r5, r1
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	4640      	mov	r0, r8
 80113a0:	4649      	mov	r1, r9
 80113a2:	f7ef f951 	bl	8000648 <__aeabi_dmul>
 80113a6:	4b62      	ldr	r3, [pc, #392]	; (8011530 <__ieee754_pow+0x770>)
 80113a8:	4680      	mov	r8, r0
 80113aa:	4689      	mov	r9, r1
 80113ac:	2200      	movs	r2, #0
 80113ae:	4620      	mov	r0, r4
 80113b0:	4629      	mov	r1, r5
 80113b2:	f7ee ff91 	bl	80002d8 <__aeabi_dsub>
 80113b6:	4632      	mov	r2, r6
 80113b8:	463b      	mov	r3, r7
 80113ba:	f7ee ff8d 	bl	80002d8 <__aeabi_dsub>
 80113be:	4602      	mov	r2, r0
 80113c0:	460b      	mov	r3, r1
 80113c2:	4650      	mov	r0, sl
 80113c4:	4659      	mov	r1, fp
 80113c6:	f7ee ff87 	bl	80002d8 <__aeabi_dsub>
 80113ca:	ec53 2b18 	vmov	r2, r3, d8
 80113ce:	f7ef f93b 	bl	8000648 <__aeabi_dmul>
 80113d2:	4622      	mov	r2, r4
 80113d4:	4606      	mov	r6, r0
 80113d6:	460f      	mov	r7, r1
 80113d8:	462b      	mov	r3, r5
 80113da:	ec51 0b19 	vmov	r0, r1, d9
 80113de:	f7ef f933 	bl	8000648 <__aeabi_dmul>
 80113e2:	4602      	mov	r2, r0
 80113e4:	460b      	mov	r3, r1
 80113e6:	4630      	mov	r0, r6
 80113e8:	4639      	mov	r1, r7
 80113ea:	f7ee ff77 	bl	80002dc <__adddf3>
 80113ee:	4606      	mov	r6, r0
 80113f0:	460f      	mov	r7, r1
 80113f2:	4602      	mov	r2, r0
 80113f4:	460b      	mov	r3, r1
 80113f6:	4640      	mov	r0, r8
 80113f8:	4649      	mov	r1, r9
 80113fa:	f7ee ff6f 	bl	80002dc <__adddf3>
 80113fe:	a33e      	add	r3, pc, #248	; (adr r3, 80114f8 <__ieee754_pow+0x738>)
 8011400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011404:	2000      	movs	r0, #0
 8011406:	4604      	mov	r4, r0
 8011408:	460d      	mov	r5, r1
 801140a:	f7ef f91d 	bl	8000648 <__aeabi_dmul>
 801140e:	4642      	mov	r2, r8
 8011410:	ec41 0b18 	vmov	d8, r0, r1
 8011414:	464b      	mov	r3, r9
 8011416:	4620      	mov	r0, r4
 8011418:	4629      	mov	r1, r5
 801141a:	f7ee ff5d 	bl	80002d8 <__aeabi_dsub>
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	4630      	mov	r0, r6
 8011424:	4639      	mov	r1, r7
 8011426:	f7ee ff57 	bl	80002d8 <__aeabi_dsub>
 801142a:	a335      	add	r3, pc, #212	; (adr r3, 8011500 <__ieee754_pow+0x740>)
 801142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011430:	f7ef f90a 	bl	8000648 <__aeabi_dmul>
 8011434:	a334      	add	r3, pc, #208	; (adr r3, 8011508 <__ieee754_pow+0x748>)
 8011436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143a:	4606      	mov	r6, r0
 801143c:	460f      	mov	r7, r1
 801143e:	4620      	mov	r0, r4
 8011440:	4629      	mov	r1, r5
 8011442:	f7ef f901 	bl	8000648 <__aeabi_dmul>
 8011446:	4602      	mov	r2, r0
 8011448:	460b      	mov	r3, r1
 801144a:	4630      	mov	r0, r6
 801144c:	4639      	mov	r1, r7
 801144e:	f7ee ff45 	bl	80002dc <__adddf3>
 8011452:	9a07      	ldr	r2, [sp, #28]
 8011454:	4b37      	ldr	r3, [pc, #220]	; (8011534 <__ieee754_pow+0x774>)
 8011456:	4413      	add	r3, r2
 8011458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145c:	f7ee ff3e 	bl	80002dc <__adddf3>
 8011460:	4682      	mov	sl, r0
 8011462:	9805      	ldr	r0, [sp, #20]
 8011464:	468b      	mov	fp, r1
 8011466:	f7ef f885 	bl	8000574 <__aeabi_i2d>
 801146a:	9a07      	ldr	r2, [sp, #28]
 801146c:	4b32      	ldr	r3, [pc, #200]	; (8011538 <__ieee754_pow+0x778>)
 801146e:	4413      	add	r3, r2
 8011470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011474:	4606      	mov	r6, r0
 8011476:	460f      	mov	r7, r1
 8011478:	4652      	mov	r2, sl
 801147a:	465b      	mov	r3, fp
 801147c:	ec51 0b18 	vmov	r0, r1, d8
 8011480:	f7ee ff2c 	bl	80002dc <__adddf3>
 8011484:	4642      	mov	r2, r8
 8011486:	464b      	mov	r3, r9
 8011488:	f7ee ff28 	bl	80002dc <__adddf3>
 801148c:	4632      	mov	r2, r6
 801148e:	463b      	mov	r3, r7
 8011490:	f7ee ff24 	bl	80002dc <__adddf3>
 8011494:	2000      	movs	r0, #0
 8011496:	4632      	mov	r2, r6
 8011498:	463b      	mov	r3, r7
 801149a:	4604      	mov	r4, r0
 801149c:	460d      	mov	r5, r1
 801149e:	f7ee ff1b 	bl	80002d8 <__aeabi_dsub>
 80114a2:	4642      	mov	r2, r8
 80114a4:	464b      	mov	r3, r9
 80114a6:	f7ee ff17 	bl	80002d8 <__aeabi_dsub>
 80114aa:	ec53 2b18 	vmov	r2, r3, d8
 80114ae:	f7ee ff13 	bl	80002d8 <__aeabi_dsub>
 80114b2:	4602      	mov	r2, r0
 80114b4:	460b      	mov	r3, r1
 80114b6:	4650      	mov	r0, sl
 80114b8:	4659      	mov	r1, fp
 80114ba:	e610      	b.n	80110de <__ieee754_pow+0x31e>
 80114bc:	2401      	movs	r4, #1
 80114be:	e6a1      	b.n	8011204 <__ieee754_pow+0x444>
 80114c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011510 <__ieee754_pow+0x750>
 80114c4:	e617      	b.n	80110f6 <__ieee754_pow+0x336>
 80114c6:	bf00      	nop
 80114c8:	4a454eef 	.word	0x4a454eef
 80114cc:	3fca7e28 	.word	0x3fca7e28
 80114d0:	93c9db65 	.word	0x93c9db65
 80114d4:	3fcd864a 	.word	0x3fcd864a
 80114d8:	a91d4101 	.word	0xa91d4101
 80114dc:	3fd17460 	.word	0x3fd17460
 80114e0:	518f264d 	.word	0x518f264d
 80114e4:	3fd55555 	.word	0x3fd55555
 80114e8:	db6fabff 	.word	0xdb6fabff
 80114ec:	3fdb6db6 	.word	0x3fdb6db6
 80114f0:	33333303 	.word	0x33333303
 80114f4:	3fe33333 	.word	0x3fe33333
 80114f8:	e0000000 	.word	0xe0000000
 80114fc:	3feec709 	.word	0x3feec709
 8011500:	dc3a03fd 	.word	0xdc3a03fd
 8011504:	3feec709 	.word	0x3feec709
 8011508:	145b01f5 	.word	0x145b01f5
 801150c:	be3e2fe0 	.word	0xbe3e2fe0
 8011510:	00000000 	.word	0x00000000
 8011514:	3ff00000 	.word	0x3ff00000
 8011518:	7ff00000 	.word	0x7ff00000
 801151c:	43400000 	.word	0x43400000
 8011520:	0003988e 	.word	0x0003988e
 8011524:	000bb679 	.word	0x000bb679
 8011528:	08024d70 	.word	0x08024d70
 801152c:	3ff00000 	.word	0x3ff00000
 8011530:	40080000 	.word	0x40080000
 8011534:	08024d90 	.word	0x08024d90
 8011538:	08024d80 	.word	0x08024d80
 801153c:	a3b3      	add	r3, pc, #716	; (adr r3, 801180c <__ieee754_pow+0xa4c>)
 801153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011542:	4640      	mov	r0, r8
 8011544:	4649      	mov	r1, r9
 8011546:	f7ee fec9 	bl	80002dc <__adddf3>
 801154a:	4622      	mov	r2, r4
 801154c:	ec41 0b1a 	vmov	d10, r0, r1
 8011550:	462b      	mov	r3, r5
 8011552:	4630      	mov	r0, r6
 8011554:	4639      	mov	r1, r7
 8011556:	f7ee febf 	bl	80002d8 <__aeabi_dsub>
 801155a:	4602      	mov	r2, r0
 801155c:	460b      	mov	r3, r1
 801155e:	ec51 0b1a 	vmov	r0, r1, d10
 8011562:	f7ef fb01 	bl	8000b68 <__aeabi_dcmpgt>
 8011566:	2800      	cmp	r0, #0
 8011568:	f47f ae04 	bne.w	8011174 <__ieee754_pow+0x3b4>
 801156c:	4aa2      	ldr	r2, [pc, #648]	; (80117f8 <__ieee754_pow+0xa38>)
 801156e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011572:	4293      	cmp	r3, r2
 8011574:	f340 8107 	ble.w	8011786 <__ieee754_pow+0x9c6>
 8011578:	151b      	asrs	r3, r3, #20
 801157a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801157e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011582:	fa4a fa03 	asr.w	sl, sl, r3
 8011586:	44da      	add	sl, fp
 8011588:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801158c:	489b      	ldr	r0, [pc, #620]	; (80117fc <__ieee754_pow+0xa3c>)
 801158e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011592:	4108      	asrs	r0, r1
 8011594:	ea00 030a 	and.w	r3, r0, sl
 8011598:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801159c:	f1c1 0114 	rsb	r1, r1, #20
 80115a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80115a4:	fa4a fa01 	asr.w	sl, sl, r1
 80115a8:	f1bb 0f00 	cmp.w	fp, #0
 80115ac:	f04f 0200 	mov.w	r2, #0
 80115b0:	4620      	mov	r0, r4
 80115b2:	4629      	mov	r1, r5
 80115b4:	bfb8      	it	lt
 80115b6:	f1ca 0a00 	rsblt	sl, sl, #0
 80115ba:	f7ee fe8d 	bl	80002d8 <__aeabi_dsub>
 80115be:	ec41 0b19 	vmov	d9, r0, r1
 80115c2:	4642      	mov	r2, r8
 80115c4:	464b      	mov	r3, r9
 80115c6:	ec51 0b19 	vmov	r0, r1, d9
 80115ca:	f7ee fe87 	bl	80002dc <__adddf3>
 80115ce:	a37a      	add	r3, pc, #488	; (adr r3, 80117b8 <__ieee754_pow+0x9f8>)
 80115d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d4:	2000      	movs	r0, #0
 80115d6:	4604      	mov	r4, r0
 80115d8:	460d      	mov	r5, r1
 80115da:	f7ef f835 	bl	8000648 <__aeabi_dmul>
 80115de:	ec53 2b19 	vmov	r2, r3, d9
 80115e2:	4606      	mov	r6, r0
 80115e4:	460f      	mov	r7, r1
 80115e6:	4620      	mov	r0, r4
 80115e8:	4629      	mov	r1, r5
 80115ea:	f7ee fe75 	bl	80002d8 <__aeabi_dsub>
 80115ee:	4602      	mov	r2, r0
 80115f0:	460b      	mov	r3, r1
 80115f2:	4640      	mov	r0, r8
 80115f4:	4649      	mov	r1, r9
 80115f6:	f7ee fe6f 	bl	80002d8 <__aeabi_dsub>
 80115fa:	a371      	add	r3, pc, #452	; (adr r3, 80117c0 <__ieee754_pow+0xa00>)
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	f7ef f822 	bl	8000648 <__aeabi_dmul>
 8011604:	a370      	add	r3, pc, #448	; (adr r3, 80117c8 <__ieee754_pow+0xa08>)
 8011606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160a:	4680      	mov	r8, r0
 801160c:	4689      	mov	r9, r1
 801160e:	4620      	mov	r0, r4
 8011610:	4629      	mov	r1, r5
 8011612:	f7ef f819 	bl	8000648 <__aeabi_dmul>
 8011616:	4602      	mov	r2, r0
 8011618:	460b      	mov	r3, r1
 801161a:	4640      	mov	r0, r8
 801161c:	4649      	mov	r1, r9
 801161e:	f7ee fe5d 	bl	80002dc <__adddf3>
 8011622:	4604      	mov	r4, r0
 8011624:	460d      	mov	r5, r1
 8011626:	4602      	mov	r2, r0
 8011628:	460b      	mov	r3, r1
 801162a:	4630      	mov	r0, r6
 801162c:	4639      	mov	r1, r7
 801162e:	f7ee fe55 	bl	80002dc <__adddf3>
 8011632:	4632      	mov	r2, r6
 8011634:	463b      	mov	r3, r7
 8011636:	4680      	mov	r8, r0
 8011638:	4689      	mov	r9, r1
 801163a:	f7ee fe4d 	bl	80002d8 <__aeabi_dsub>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	4620      	mov	r0, r4
 8011644:	4629      	mov	r1, r5
 8011646:	f7ee fe47 	bl	80002d8 <__aeabi_dsub>
 801164a:	4642      	mov	r2, r8
 801164c:	4606      	mov	r6, r0
 801164e:	460f      	mov	r7, r1
 8011650:	464b      	mov	r3, r9
 8011652:	4640      	mov	r0, r8
 8011654:	4649      	mov	r1, r9
 8011656:	f7ee fff7 	bl	8000648 <__aeabi_dmul>
 801165a:	a35d      	add	r3, pc, #372	; (adr r3, 80117d0 <__ieee754_pow+0xa10>)
 801165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011660:	4604      	mov	r4, r0
 8011662:	460d      	mov	r5, r1
 8011664:	f7ee fff0 	bl	8000648 <__aeabi_dmul>
 8011668:	a35b      	add	r3, pc, #364	; (adr r3, 80117d8 <__ieee754_pow+0xa18>)
 801166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166e:	f7ee fe33 	bl	80002d8 <__aeabi_dsub>
 8011672:	4622      	mov	r2, r4
 8011674:	462b      	mov	r3, r5
 8011676:	f7ee ffe7 	bl	8000648 <__aeabi_dmul>
 801167a:	a359      	add	r3, pc, #356	; (adr r3, 80117e0 <__ieee754_pow+0xa20>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7ee fe2c 	bl	80002dc <__adddf3>
 8011684:	4622      	mov	r2, r4
 8011686:	462b      	mov	r3, r5
 8011688:	f7ee ffde 	bl	8000648 <__aeabi_dmul>
 801168c:	a356      	add	r3, pc, #344	; (adr r3, 80117e8 <__ieee754_pow+0xa28>)
 801168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011692:	f7ee fe21 	bl	80002d8 <__aeabi_dsub>
 8011696:	4622      	mov	r2, r4
 8011698:	462b      	mov	r3, r5
 801169a:	f7ee ffd5 	bl	8000648 <__aeabi_dmul>
 801169e:	a354      	add	r3, pc, #336	; (adr r3, 80117f0 <__ieee754_pow+0xa30>)
 80116a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a4:	f7ee fe1a 	bl	80002dc <__adddf3>
 80116a8:	4622      	mov	r2, r4
 80116aa:	462b      	mov	r3, r5
 80116ac:	f7ee ffcc 	bl	8000648 <__aeabi_dmul>
 80116b0:	4602      	mov	r2, r0
 80116b2:	460b      	mov	r3, r1
 80116b4:	4640      	mov	r0, r8
 80116b6:	4649      	mov	r1, r9
 80116b8:	f7ee fe0e 	bl	80002d8 <__aeabi_dsub>
 80116bc:	4604      	mov	r4, r0
 80116be:	460d      	mov	r5, r1
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4640      	mov	r0, r8
 80116c6:	4649      	mov	r1, r9
 80116c8:	f7ee ffbe 	bl	8000648 <__aeabi_dmul>
 80116cc:	2200      	movs	r2, #0
 80116ce:	ec41 0b19 	vmov	d9, r0, r1
 80116d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80116d6:	4620      	mov	r0, r4
 80116d8:	4629      	mov	r1, r5
 80116da:	f7ee fdfd 	bl	80002d8 <__aeabi_dsub>
 80116de:	4602      	mov	r2, r0
 80116e0:	460b      	mov	r3, r1
 80116e2:	ec51 0b19 	vmov	r0, r1, d9
 80116e6:	f7ef f8d9 	bl	800089c <__aeabi_ddiv>
 80116ea:	4632      	mov	r2, r6
 80116ec:	4604      	mov	r4, r0
 80116ee:	460d      	mov	r5, r1
 80116f0:	463b      	mov	r3, r7
 80116f2:	4640      	mov	r0, r8
 80116f4:	4649      	mov	r1, r9
 80116f6:	f7ee ffa7 	bl	8000648 <__aeabi_dmul>
 80116fa:	4632      	mov	r2, r6
 80116fc:	463b      	mov	r3, r7
 80116fe:	f7ee fded 	bl	80002dc <__adddf3>
 8011702:	4602      	mov	r2, r0
 8011704:	460b      	mov	r3, r1
 8011706:	4620      	mov	r0, r4
 8011708:	4629      	mov	r1, r5
 801170a:	f7ee fde5 	bl	80002d8 <__aeabi_dsub>
 801170e:	4642      	mov	r2, r8
 8011710:	464b      	mov	r3, r9
 8011712:	f7ee fde1 	bl	80002d8 <__aeabi_dsub>
 8011716:	460b      	mov	r3, r1
 8011718:	4602      	mov	r2, r0
 801171a:	4939      	ldr	r1, [pc, #228]	; (8011800 <__ieee754_pow+0xa40>)
 801171c:	2000      	movs	r0, #0
 801171e:	f7ee fddb 	bl	80002d8 <__aeabi_dsub>
 8011722:	ec41 0b10 	vmov	d0, r0, r1
 8011726:	ee10 3a90 	vmov	r3, s1
 801172a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801172e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011732:	da2b      	bge.n	801178c <__ieee754_pow+0x9cc>
 8011734:	4650      	mov	r0, sl
 8011736:	f000 f877 	bl	8011828 <scalbn>
 801173a:	ec51 0b10 	vmov	r0, r1, d0
 801173e:	ec53 2b18 	vmov	r2, r3, d8
 8011742:	f7ff bbee 	b.w	8010f22 <__ieee754_pow+0x162>
 8011746:	4b2f      	ldr	r3, [pc, #188]	; (8011804 <__ieee754_pow+0xa44>)
 8011748:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801174c:	429e      	cmp	r6, r3
 801174e:	f77f af0d 	ble.w	801156c <__ieee754_pow+0x7ac>
 8011752:	4b2d      	ldr	r3, [pc, #180]	; (8011808 <__ieee754_pow+0xa48>)
 8011754:	440b      	add	r3, r1
 8011756:	4303      	orrs	r3, r0
 8011758:	d009      	beq.n	801176e <__ieee754_pow+0x9ae>
 801175a:	ec51 0b18 	vmov	r0, r1, d8
 801175e:	2200      	movs	r2, #0
 8011760:	2300      	movs	r3, #0
 8011762:	f7ef f9e3 	bl	8000b2c <__aeabi_dcmplt>
 8011766:	3800      	subs	r0, #0
 8011768:	bf18      	it	ne
 801176a:	2001      	movne	r0, #1
 801176c:	e448      	b.n	8011000 <__ieee754_pow+0x240>
 801176e:	4622      	mov	r2, r4
 8011770:	462b      	mov	r3, r5
 8011772:	f7ee fdb1 	bl	80002d8 <__aeabi_dsub>
 8011776:	4642      	mov	r2, r8
 8011778:	464b      	mov	r3, r9
 801177a:	f7ef f9eb 	bl	8000b54 <__aeabi_dcmpge>
 801177e:	2800      	cmp	r0, #0
 8011780:	f43f aef4 	beq.w	801156c <__ieee754_pow+0x7ac>
 8011784:	e7e9      	b.n	801175a <__ieee754_pow+0x99a>
 8011786:	f04f 0a00 	mov.w	sl, #0
 801178a:	e71a      	b.n	80115c2 <__ieee754_pow+0x802>
 801178c:	ec51 0b10 	vmov	r0, r1, d0
 8011790:	4619      	mov	r1, r3
 8011792:	e7d4      	b.n	801173e <__ieee754_pow+0x97e>
 8011794:	491a      	ldr	r1, [pc, #104]	; (8011800 <__ieee754_pow+0xa40>)
 8011796:	2000      	movs	r0, #0
 8011798:	f7ff bb31 	b.w	8010dfe <__ieee754_pow+0x3e>
 801179c:	2000      	movs	r0, #0
 801179e:	2100      	movs	r1, #0
 80117a0:	f7ff bb2d 	b.w	8010dfe <__ieee754_pow+0x3e>
 80117a4:	4630      	mov	r0, r6
 80117a6:	4639      	mov	r1, r7
 80117a8:	f7ff bb29 	b.w	8010dfe <__ieee754_pow+0x3e>
 80117ac:	9204      	str	r2, [sp, #16]
 80117ae:	f7ff bb7b 	b.w	8010ea8 <__ieee754_pow+0xe8>
 80117b2:	2300      	movs	r3, #0
 80117b4:	f7ff bb65 	b.w	8010e82 <__ieee754_pow+0xc2>
 80117b8:	00000000 	.word	0x00000000
 80117bc:	3fe62e43 	.word	0x3fe62e43
 80117c0:	fefa39ef 	.word	0xfefa39ef
 80117c4:	3fe62e42 	.word	0x3fe62e42
 80117c8:	0ca86c39 	.word	0x0ca86c39
 80117cc:	be205c61 	.word	0xbe205c61
 80117d0:	72bea4d0 	.word	0x72bea4d0
 80117d4:	3e663769 	.word	0x3e663769
 80117d8:	c5d26bf1 	.word	0xc5d26bf1
 80117dc:	3ebbbd41 	.word	0x3ebbbd41
 80117e0:	af25de2c 	.word	0xaf25de2c
 80117e4:	3f11566a 	.word	0x3f11566a
 80117e8:	16bebd93 	.word	0x16bebd93
 80117ec:	3f66c16c 	.word	0x3f66c16c
 80117f0:	5555553e 	.word	0x5555553e
 80117f4:	3fc55555 	.word	0x3fc55555
 80117f8:	3fe00000 	.word	0x3fe00000
 80117fc:	fff00000 	.word	0xfff00000
 8011800:	3ff00000 	.word	0x3ff00000
 8011804:	4090cbff 	.word	0x4090cbff
 8011808:	3f6f3400 	.word	0x3f6f3400
 801180c:	652b82fe 	.word	0x652b82fe
 8011810:	3c971547 	.word	0x3c971547

08011814 <fabs>:
 8011814:	ec51 0b10 	vmov	r0, r1, d0
 8011818:	ee10 2a10 	vmov	r2, s0
 801181c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011820:	ec43 2b10 	vmov	d0, r2, r3
 8011824:	4770      	bx	lr
	...

08011828 <scalbn>:
 8011828:	b570      	push	{r4, r5, r6, lr}
 801182a:	ec55 4b10 	vmov	r4, r5, d0
 801182e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011832:	4606      	mov	r6, r0
 8011834:	462b      	mov	r3, r5
 8011836:	b999      	cbnz	r1, 8011860 <scalbn+0x38>
 8011838:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801183c:	4323      	orrs	r3, r4
 801183e:	d03f      	beq.n	80118c0 <scalbn+0x98>
 8011840:	4b35      	ldr	r3, [pc, #212]	; (8011918 <scalbn+0xf0>)
 8011842:	4629      	mov	r1, r5
 8011844:	ee10 0a10 	vmov	r0, s0
 8011848:	2200      	movs	r2, #0
 801184a:	f7ee fefd 	bl	8000648 <__aeabi_dmul>
 801184e:	4b33      	ldr	r3, [pc, #204]	; (801191c <scalbn+0xf4>)
 8011850:	429e      	cmp	r6, r3
 8011852:	4604      	mov	r4, r0
 8011854:	460d      	mov	r5, r1
 8011856:	da10      	bge.n	801187a <scalbn+0x52>
 8011858:	a327      	add	r3, pc, #156	; (adr r3, 80118f8 <scalbn+0xd0>)
 801185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185e:	e01f      	b.n	80118a0 <scalbn+0x78>
 8011860:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011864:	4291      	cmp	r1, r2
 8011866:	d10c      	bne.n	8011882 <scalbn+0x5a>
 8011868:	ee10 2a10 	vmov	r2, s0
 801186c:	4620      	mov	r0, r4
 801186e:	4629      	mov	r1, r5
 8011870:	f7ee fd34 	bl	80002dc <__adddf3>
 8011874:	4604      	mov	r4, r0
 8011876:	460d      	mov	r5, r1
 8011878:	e022      	b.n	80118c0 <scalbn+0x98>
 801187a:	460b      	mov	r3, r1
 801187c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011880:	3936      	subs	r1, #54	; 0x36
 8011882:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011886:	4296      	cmp	r6, r2
 8011888:	dd0d      	ble.n	80118a6 <scalbn+0x7e>
 801188a:	2d00      	cmp	r5, #0
 801188c:	a11c      	add	r1, pc, #112	; (adr r1, 8011900 <scalbn+0xd8>)
 801188e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011892:	da02      	bge.n	801189a <scalbn+0x72>
 8011894:	a11c      	add	r1, pc, #112	; (adr r1, 8011908 <scalbn+0xe0>)
 8011896:	e9d1 0100 	ldrd	r0, r1, [r1]
 801189a:	a319      	add	r3, pc, #100	; (adr r3, 8011900 <scalbn+0xd8>)
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	f7ee fed2 	bl	8000648 <__aeabi_dmul>
 80118a4:	e7e6      	b.n	8011874 <scalbn+0x4c>
 80118a6:	1872      	adds	r2, r6, r1
 80118a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80118ac:	428a      	cmp	r2, r1
 80118ae:	dcec      	bgt.n	801188a <scalbn+0x62>
 80118b0:	2a00      	cmp	r2, #0
 80118b2:	dd08      	ble.n	80118c6 <scalbn+0x9e>
 80118b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80118b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80118bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80118c0:	ec45 4b10 	vmov	d0, r4, r5
 80118c4:	bd70      	pop	{r4, r5, r6, pc}
 80118c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80118ca:	da08      	bge.n	80118de <scalbn+0xb6>
 80118cc:	2d00      	cmp	r5, #0
 80118ce:	a10a      	add	r1, pc, #40	; (adr r1, 80118f8 <scalbn+0xd0>)
 80118d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118d4:	dac0      	bge.n	8011858 <scalbn+0x30>
 80118d6:	a10e      	add	r1, pc, #56	; (adr r1, 8011910 <scalbn+0xe8>)
 80118d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118dc:	e7bc      	b.n	8011858 <scalbn+0x30>
 80118de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80118e2:	3236      	adds	r2, #54	; 0x36
 80118e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80118e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80118ec:	4620      	mov	r0, r4
 80118ee:	4b0c      	ldr	r3, [pc, #48]	; (8011920 <scalbn+0xf8>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	e7d5      	b.n	80118a0 <scalbn+0x78>
 80118f4:	f3af 8000 	nop.w
 80118f8:	c2f8f359 	.word	0xc2f8f359
 80118fc:	01a56e1f 	.word	0x01a56e1f
 8011900:	8800759c 	.word	0x8800759c
 8011904:	7e37e43c 	.word	0x7e37e43c
 8011908:	8800759c 	.word	0x8800759c
 801190c:	fe37e43c 	.word	0xfe37e43c
 8011910:	c2f8f359 	.word	0xc2f8f359
 8011914:	81a56e1f 	.word	0x81a56e1f
 8011918:	43500000 	.word	0x43500000
 801191c:	ffff3cb0 	.word	0xffff3cb0
 8011920:	3c900000 	.word	0x3c900000

08011924 <with_errno>:
 8011924:	b570      	push	{r4, r5, r6, lr}
 8011926:	4604      	mov	r4, r0
 8011928:	460d      	mov	r5, r1
 801192a:	4616      	mov	r6, r2
 801192c:	f7fc ffd8 	bl	800e8e0 <__errno>
 8011930:	4629      	mov	r1, r5
 8011932:	6006      	str	r6, [r0, #0]
 8011934:	4620      	mov	r0, r4
 8011936:	bd70      	pop	{r4, r5, r6, pc}

08011938 <xflow>:
 8011938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801193a:	4614      	mov	r4, r2
 801193c:	461d      	mov	r5, r3
 801193e:	b108      	cbz	r0, 8011944 <xflow+0xc>
 8011940:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011944:	e9cd 2300 	strd	r2, r3, [sp]
 8011948:	e9dd 2300 	ldrd	r2, r3, [sp]
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7ee fe7a 	bl	8000648 <__aeabi_dmul>
 8011954:	2222      	movs	r2, #34	; 0x22
 8011956:	b003      	add	sp, #12
 8011958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801195c:	f7ff bfe2 	b.w	8011924 <with_errno>

08011960 <__math_uflow>:
 8011960:	b508      	push	{r3, lr}
 8011962:	2200      	movs	r2, #0
 8011964:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011968:	f7ff ffe6 	bl	8011938 <xflow>
 801196c:	ec41 0b10 	vmov	d0, r0, r1
 8011970:	bd08      	pop	{r3, pc}

08011972 <__math_oflow>:
 8011972:	b508      	push	{r3, lr}
 8011974:	2200      	movs	r2, #0
 8011976:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801197a:	f7ff ffdd 	bl	8011938 <xflow>
 801197e:	ec41 0b10 	vmov	d0, r0, r1
 8011982:	bd08      	pop	{r3, pc}

08011984 <_init>:
 8011984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011986:	bf00      	nop
 8011988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801198a:	bc08      	pop	{r3}
 801198c:	469e      	mov	lr, r3
 801198e:	4770      	bx	lr

08011990 <_fini>:
 8011990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011992:	bf00      	nop
 8011994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011996:	bc08      	pop	{r3}
 8011998:	469e      	mov	lr, r3
 801199a:	4770      	bx	lr
