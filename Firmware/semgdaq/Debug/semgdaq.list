
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a8  080060a8  00027874  2**0
                  CONTENTS
  4 .ARM          00000000  080060a8  080060a8  00027874  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060a8  080060a8  00027874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007874  20000000  080060b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002354  20007874  0800d924  00027874  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009bc8  0800d924  00029bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027874  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000278a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a5e  00000000  00000000  0002795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a8  00000000  00000000  0003d3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe9  00000000  00000000  00041958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bd1  00000000  00000000  00042941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c30  00000000  00000000  00064512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ed8  00000000  00000000  0007c142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005840  00000000  00000000  0015e01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0016385c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d34  00000000  00000000  001638e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0016461b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20007874 	.word	0x20007874
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006080 	.word	0x08006080

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20007878 	.word	0x20007878
 8000214:	08006080 	.word	0x08006080

08000218 <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH]={0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f};

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
 8000224:	e00a      	b.n	800023c <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	4413      	add	r3, r2
 800022e:	3304      	adds	r3, #4
 8000230:	f04f 0200 	mov.w	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	3301      	adds	r3, #1
 800023a:	73fb      	strb	r3, [r7, #15]
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	2b07      	cmp	r3, #7
 8000240:	d9f1      	bls.n	8000226 <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000248:	2300      	movs	r3, #0
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	e00b      	b.n	8000266 <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	3308      	adds	r3, #8
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	4413      	add	r3, r2
 8000258:	3304      	adds	r3, #4
 800025a:	f04f 0200 	mov.w	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	3301      	adds	r3, #1
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	2b9c      	cmp	r3, #156	; 0x9c
 800026a:	d9f0      	bls.n	800024e <MA_ADC1_IN1_Init+0x36>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
	...

0800027c <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 800027c:	b480      	push	{r7}
 800027e:	b087      	sub	sp, #28
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	e05a      	b.n	8000340 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4932      	ldr	r1, [pc, #200]	; (8000358 <MA_ADC1_IN1_Update+0xdc>)
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	3212      	adds	r2, #18
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	440a      	add	r2, r1
 8000298:	6812      	ldr	r2, [r2, #0]
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	440b      	add	r3, r1
 80002a0:	3304      	adds	r3, #4
 80002a2:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1c5a      	adds	r2, r3, #1
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b08      	cmp	r3, #8
 80002b4:	d102      	bne.n	80002bc <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	3308      	adds	r3, #8
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	3304      	adds	r3, #4
 80002c8:	f04f 0200 	mov.w	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e02c      	b.n	8000334 <MA_ADC1_IN1_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_1 > 0)
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d003      	beq.n	80002e8 <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	e001      	b.n	80002ec <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 80002e8:	2307      	movs	r3, #7
 80002ea:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	3308      	adds	r3, #8
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	4413      	add	r3, r2
 80002f6:	3304      	adds	r3, #4
 80002f8:	ed93 7a00 	vldr	s14, [r3]
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <MA_ADC1_IN1_Update+0xe0>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	4413      	add	r3, r2
 8000304:	edd3 6a00 	vldr	s13, [r3]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	3304      	adds	r3, #4
 8000312:	edd3 7a00 	vldr	s15, [r3]
 8000316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800031a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	3308      	adds	r3, #8
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	3304      	adds	r3, #4
 800032a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	2b07      	cmp	r3, #7
 8000338:	d9cf      	bls.n	80002da <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000346:	4293      	cmp	r3, r2
 8000348:	d99f      	bls.n	800028a <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	20000048 	.word	0x20000048
 800035c:	20000000 	.word	0x20000000

08000360 <MA_ADC1_IN2_Init>:




void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
 800036c:	e00a      	b.n	8000384 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f; // Clear the moving average buffer
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4413      	add	r3, r2
 8000376:	3304      	adds	r3, #4
 8000378:	f04f 0200 	mov.w	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3301      	adds	r3, #1
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	2b07      	cmp	r3, #7
 8000388:	d9f1      	bls.n	800036e <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0; // Initialize the buffer index
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	e00b      	b.n	80003ae <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f; // Clear the output buffer
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	3308      	adds	r3, #8
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4413      	add	r3, r2
 80003a0:	3304      	adds	r3, #4
 80003a2:	f04f 0200 	mov.w	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	2b9c      	cmp	r3, #156	; 0x9c
 80003b2:	d9f0      	bls.n	8000396 <MA_ADC1_IN2_Init+0x36>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e05a      	b.n	8000488 <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u]; // Store the current input sample in the circular buffer
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4932      	ldr	r1, [pc, #200]	; (80004a0 <MA_ADC1_IN2_Update+0xdc>)
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	3212      	adds	r2, #18
 80003dc:	0092      	lsls	r2, r2, #2
 80003de:	440a      	add	r2, r1
 80003e0:	6812      	ldr	r2, [r2, #0]
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	440b      	add	r3, r1
 80003e8:	3304      	adds	r3, #4
 80003ea:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b08      	cmp	r3, #8
 80003fc:	d102      	bne.n	8000404 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3308      	adds	r3, #8
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	4413      	add	r3, r2
 800040e:	3304      	adds	r3, #4
 8000410:	f04f 0200 	mov.w	r2, #0
 8000414:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx; // Set SumIndex_2 to the current buffer index
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	e02c      	b.n	800047c <MA_ADC1_IN2_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_2 > 0)
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d003      	beq.n	8000430 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3b01      	subs	r3, #1
 800042c:	613b      	str	r3, [r7, #16]
 800042e:	e001      	b.n	8000434 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8000430:	2307      	movs	r3, #7
 8000432:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3308      	adds	r3, #8
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4413      	add	r3, r2
 800043e:	3304      	adds	r3, #4
 8000440:	ed93 7a00 	vldr	s14, [r3]
 8000444:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <MA_ADC1_IN2_Update+0xe0>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4413      	add	r3, r2
 800044c:	edd3 6a00 	vldr	s13, [r3]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	3304      	adds	r3, #4
 800045a:	edd3 7a00 	vldr	s15, [r3]
 800045e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3308      	adds	r3, #8
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	3304      	adds	r3, #4
 8000472:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3301      	adds	r3, #1
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	2b07      	cmp	r3, #7
 8000480:	d9cf      	bls.n	8000422 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	3301      	adds	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800048e:	4293      	cmp	r3, r2
 8000490:	d99f      	bls.n	80003d2 <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	371c      	adds	r7, #28
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	20001454 	.word	0x20001454
 80004a4:	20000000 	.word	0x20000000

080004a8 <MA_ADC2_IN3_Init>:




void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e00a      	b.n	80004cc <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f; // Clear the moving average buffer
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	3304      	adds	r3, #4
 80004c0:	f04f 0200 	mov.w	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	3301      	adds	r3, #1
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d9f1      	bls.n	80004b6 <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0; // Initialize the buffer index
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	e00b      	b.n	80004f6 <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f; // Clear the output buffer
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3308      	adds	r3, #8
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	3304      	adds	r3, #4
 80004ea:	f04f 0200 	mov.w	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	2b9c      	cmp	r3, #156	; 0x9c
 80004fa:	d9f0      	bls.n	80004de <MA_ADC2_IN3_Init+0x36>
	}
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 800050c:	b480      	push	{r7}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e05a      	b.n	80005d0 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4932      	ldr	r1, [pc, #200]	; (80005e8 <MA_ADC2_IN3_Update+0xdc>)
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	3212      	adds	r2, #18
 8000524:	0092      	lsls	r2, r2, #2
 8000526:	440a      	add	r2, r1
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	440b      	add	r3, r1
 8000530:	3304      	adds	r3, #4
 8000532:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1c5a      	adds	r2, r3, #1
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b08      	cmp	r3, #8
 8000544:	d102      	bne.n	800054c <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3308      	adds	r3, #8
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	3304      	adds	r3, #4
 8000558:	f04f 0200 	mov.w	r2, #0
 800055c:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx; // Set SumIndex_3 to the current buffer index
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e02c      	b.n	80005c4 <MA_ADC2_IN3_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_3 > 0)
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d003      	beq.n	8000578 <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	3b01      	subs	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	e001      	b.n	800057c <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 8000578:	2307      	movs	r3, #7
 800057a:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3308      	adds	r3, #8
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	3304      	adds	r3, #4
 8000588:	ed93 7a00 	vldr	s14, [r3]
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <MA_ADC2_IN3_Update+0xe0>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	edd3 6a00 	vldr	s13, [r3]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	3304      	adds	r3, #4
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3308      	adds	r3, #8
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	3304      	adds	r3, #4
 80005ba:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d9cf      	bls.n	800056a <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d99f      	bls.n	800051a <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20002860 	.word	0x20002860
 80005ec:	20000000 	.word	0x20000000

080005f0 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e00a      	b.n	8000614 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	3304      	adds	r3, #4
 8000608:	f04f 0200 	mov.w	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	3301      	adds	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d9f1      	bls.n	80005fe <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	e00b      	b.n	800063e <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	3308      	adds	r3, #8
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	3304      	adds	r3, #4
 8000632:	f04f 0200 	mov.w	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3301      	adds	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b9c      	cmp	r3, #156	; 0x9c
 8000642:	d9f0      	bls.n	8000626 <MA_ADC2_IN4_Init+0x36>
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8000654:	b480      	push	{r7}
 8000656:	b087      	sub	sp, #28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e05a      	b.n	8000718 <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4932      	ldr	r1, [pc, #200]	; (8000730 <MA_ADC2_IN4_Update+0xdc>)
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	3212      	adds	r2, #18
 800066c:	0092      	lsls	r2, r2, #2
 800066e:	440a      	add	r2, r1
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	440b      	add	r3, r1
 8000678:	3304      	adds	r3, #4
 800067a:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b08      	cmp	r3, #8
 800068c:	d102      	bne.n	8000694 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3308      	adds	r3, #8
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	3304      	adds	r3, #4
 80006a0:	f04f 0200 	mov.w	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e02c      	b.n	800070c <MA_ADC2_IN4_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_4 > 0)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	e001      	b.n	80006c4 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 80006c0:	2307      	movs	r3, #7
 80006c2:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3308      	adds	r3, #8
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	3304      	adds	r3, #4
 80006d0:	ed93 7a00 	vldr	s14, [r3]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MA_ADC2_IN4_Update+0xe0>)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	edd3 6a00 	vldr	s13, [r3]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	3304      	adds	r3, #4
 80006ea:	edd3 7a00 	vldr	s15, [r3]
 80006ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3308      	adds	r3, #8
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	3304      	adds	r3, #4
 8000702:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3301      	adds	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b07      	cmp	r3, #7
 8000710:	d9cf      	bls.n	80006b2 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3301      	adds	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800071e:	4293      	cmp	r3, r2
 8000720:	d99f      	bls.n	8000662 <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	371c      	adds	r7, #28
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	20003c6c 	.word	0x20003c6c
 8000734:	20000000 	.word	0x20000000

08000738 <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000740:	2300      	movs	r3, #0
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	e00a      	b.n	800075c <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	3304      	adds	r3, #4
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	3301      	adds	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9f1      	bls.n	8000746 <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0; // Initialize the buffer index
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	e00b      	b.n	8000786 <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3308      	adds	r3, #8
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3304      	adds	r3, #4
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	3301      	adds	r3, #1
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	2b9c      	cmp	r3, #156	; 0x9c
 800078a:	d9f0      	bls.n	800076e <MA_ADC3_IN1_Init+0x36>
	}
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e05a      	b.n	8000860 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u]; // Store the current input sample in the circular buffer
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4932      	ldr	r1, [pc, #200]	; (8000878 <MA_ADC3_IN1_Update+0xdc>)
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	3212      	adds	r2, #18
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	440a      	add	r2, r1
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	3304      	adds	r3, #4
 80007c2:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b08      	cmp	r3, #8
 80007d4:	d102      	bne.n	80007dc <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3308      	adds	r3, #8
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	3304      	adds	r3, #4
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx; // Set SumIndex_5 to the current buffer index
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e02c      	b.n	8000854 <MA_ADC3_IN1_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_5 > 0)
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	3b01      	subs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	e001      	b.n	800080c <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8000808:	2307      	movs	r3, #7
 800080a:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3308      	adds	r3, #8
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	3304      	adds	r3, #4
 8000818:	ed93 7a00 	vldr	s14, [r3]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <MA_ADC3_IN1_Update+0xe0>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	edd3 6a00 	vldr	s13, [r3]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	3304      	adds	r3, #4
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800083a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	3308      	adds	r3, #8
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	3304      	adds	r3, #4
 800084a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b07      	cmp	r3, #7
 8000858:	d9cf      	bls.n	80007fa <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000866:	4293      	cmp	r3, r2
 8000868:	d99f      	bls.n	80007aa <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	20005078 	.word	0x20005078
 800087c:	20000000 	.word	0x20000000

08000880 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000888:	2300      	movs	r3, #0
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e00a      	b.n	80008a4 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f; // Clear the moving average buffer
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	3304      	adds	r3, #4
 8000898:	f04f 0200 	mov.w	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	2b07      	cmp	r3, #7
 80008a8:	d9f1      	bls.n	800088e <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0; // Initialize the buffer index
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	e00b      	b.n	80008ce <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f; // Clear the output buffer
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	3308      	adds	r3, #8
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	3304      	adds	r3, #4
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	2b9c      	cmp	r3, #156	; 0x9c
 80008d2:	d9f0      	bls.n	80008b6 <MA_ADC3_IN2_Init+0x36>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e05a      	b.n	80009a8 <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u]; // Store the current input sample in the circular buffer
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4932      	ldr	r1, [pc, #200]	; (80009c0 <MA_ADC3_IN2_Update+0xdc>)
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	3212      	adds	r2, #18
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	440a      	add	r2, r1
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	3304      	adds	r3, #4
 800090a:	601a      	str	r2, [r3, #0]


        // Increment the buffer index and wrap around if necessary
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b08      	cmp	r3, #8
 800091c:	d102      	bne.n	8000924 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3308      	adds	r3, #8
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	3304      	adds	r3, #4
 8000930:	f04f 0200 	mov.w	r2, #0
 8000934:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx; // Set SumIndex_6 to the current buffer index
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	613b      	str	r3, [r7, #16]

        // Perform convolution (dot product) with the impulse response
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e02c      	b.n	800099c <MA_ADC3_IN2_Update+0xb8>
        {
            // Decrement index and wrap if necessary (moving backwards in the circular buffer)
            if (SumIndex_6 > 0)
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3b01      	subs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	e001      	b.n	8000954 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8000950:	2307      	movs	r3, #7
 8000952:	613b      	str	r3, [r7, #16]
            }

            // Multiply impulse response with buffer sample and accumulate into output
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3308      	adds	r3, #8
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	3304      	adds	r3, #4
 8000960:	ed93 7a00 	vldr	s14, [r3]
 8000964:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <MA_ADC3_IN2_Update+0xe0>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	edd3 6a00 	vldr	s13, [r3]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	3304      	adds	r3, #4
 800097a:	edd3 7a00 	vldr	s15, [r3]
 800097e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	3308      	adds	r3, #8
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	3304      	adds	r3, #4
 8000992:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9cf      	bls.n	8000942 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d99f      	bls.n	80008f2 <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	371c      	adds	r7, #28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	20006484 	.word	0x20006484
 80009c4:	20000000 	.word	0x20000000

080009c8 <init_ADC1_IN1_struct>:
extern ADC3_DMA_sort*ADC3_DMA_sort_ptr;


// INITIALIZING THE STRUCT INSTANCE
void init_ADC1_IN1_struct(void)
  {
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <init_ADC1_IN1_struct+0x1c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80009d4:	3314      	adds	r3, #20
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <init_ADC1_IN1_struct+0x20>)
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20008c00 	.word	0x20008c00
 80009e8:	20000048 	.word	0x20000048

080009ec <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80009f2:	7819      	ldrb	r1, [r3, #0]
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80009f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <init_ADC1_IN1_FO_biquad_filter+0x20>)
 80009fe:	f005 fb07 	bl	8006010 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	20001420 	.word	0x20001420

08000a10 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000a16:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a1e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8000a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8000a2e:	f005 f933 	bl	8005c98 <arm_biquad_cascade_df2T_f32>
   }
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000048 	.word	0x20000048
 8000a3c:	20001420 	.word	0x20001420

08000a40 <init_ADC1_IN2_struct>:



void init_ADC1_IN2_struct(void)
  {
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);  // Typecasting. Assigned at runtime
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <init_ADC1_IN2_struct+0x1c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8000a4c:	3320      	adds	r3, #32
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <init_ADC1_IN2_struct+0x20>)
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	20008c00 	.word	0x20008c00
 8000a60:	20001454 	.word	0x20001454

08000a64 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8000a6a:	7819      	ldrb	r1, [r3, #0]
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8000a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8000a76:	f005 facb 	bl	8006010 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,  // Pointer to the instance
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC1_IN2_NF_arg.ADC1_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20001454 	.word	0x20001454
 8000a84:	2000282c 	.word	0x2000282c

08000a88 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8000a8e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8000a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a96:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8000a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 8000aa6:	f005 f8f7 	bl	8005c98 <arm_biquad_cascade_df2T_f32>
   }
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20001454 	.word	0x20001454
 8000ab4:	2000282c 	.word	0x2000282c

08000ab8 <init_ADC2_IN3_struct>:



void init_ADC2_IN3_struct(void)
  {
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);  // Typecasting. Assigned at runtime
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <init_ADC2_IN3_struct+0x1c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000ac4:	3314      	adds	r3, #20
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <init_ADC2_IN3_struct+0x20>)
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20008c04 	.word	0x20008c04
 8000ad8:	20002860 	.word	0x20002860

08000adc <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000ae2:	7819      	ldrb	r1, [r3, #0]
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8000aee:	f005 fa8f 	bl	8006010 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState                                         // Pointer to the state buffer
	 );
  }
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20002860 	.word	0x20002860
 8000afc:	20003c38 	.word	0x20003c38

08000b00 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000b06:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b0e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8000b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8000b1e:	f005 f8bb 	bl	8005c98 <arm_biquad_cascade_df2T_f32>
   }
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20002860 	.word	0x20002860
 8000b2c:	20003c38 	.word	0x20003c38

08000b30 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);  // Typecasting. Assigned at runtime
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <init_ADC2_IN4_struct+0x1c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8000b3c:	3320      	adds	r3, #32
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <init_ADC2_IN4_struct+0x20>)
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20008c04 	.word	0x20008c04
 8000b50:	20003c6c 	.word	0x20003c6c

08000b54 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8000b5a:	7819      	ldrb	r1, [r3, #0]
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 8000b66:	f005 fa53 	bl	8006010 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,  // Pointer to the instance
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,                                     // Number of stages (2 in this case)
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,                                       // Pointer to coefficients array
	        ADC2_IN4_NF_arg.ADC2_IN4_pState                                         // Pointer to the state buffer
	 );
  }
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20003c6c 	.word	0x20003c6c
 8000b74:	20005044 	.word	0x20005044

08000b78 <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8000b7e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8000b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b86:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8000b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 8000b96:	f005 f87f 	bl	8005c98 <arm_biquad_cascade_df2T_f32>
   }
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20003c6c 	.word	0x20003c6c
 8000ba4:	20005044 	.word	0x20005044

08000ba8 <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);  // Typecasting. Assigned at runtime
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <init_ADC3_IN1_struct+0x1c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000bb4:	3314      	adds	r3, #20
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <init_ADC3_IN1_struct+0x20>)
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20008c08 	.word	0x20008c08
 8000bc8:	20005078 	.word	0x20005078

08000bcc <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000bd2:	7819      	ldrb	r1, [r3, #0]
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8000bde:	f005 fa17 	bl	8006010 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,  // Pointer to the instance
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN1_NF_arg.ADC3_IN1_pState                                         // Pointer to the state buffer
	 );
  }
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20005078 	.word	0x20005078
 8000bec:	20006450 	.word	0x20006450

08000bf0 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000bf6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bfe:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8000c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8000c0e:	f005 f843 	bl	8005c98 <arm_biquad_cascade_df2T_f32>
   }
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20005078 	.word	0x20005078
 8000c1c:	20006450 	.word	0x20006450

08000c20 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <init_ADC3_IN2_struct+0x1c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8000c2c:	3320      	adds	r3, #32
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <init_ADC3_IN2_struct+0x20>)
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	20008c08 	.word	0x20008c08
 8000c40:	20006484 	.word	0x20006484

08000c44 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8000c4a:	7819      	ldrb	r1, [r3, #0]
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8000c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 8000c56:	f005 f9db 	bl	8006010 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20006484 	.word	0x20006484
 8000c64:	2000785c 	.word	0x2000785c

08000c68 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8000c6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8000c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c76:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8000c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 8000c86:	f005 f807 	bl	8005c98 <arm_biquad_cascade_df2T_f32>
   }
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20006484 	.word	0x20006484
 8000c94:	2000785c 	.word	0x2000785c

08000c98 <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e010      	b.n	8000cce <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	edd3 7a00 	vldr	s15, [r3]
 8000cbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b9c      	cmp	r3, #156	; 0x9c
 8000cd2:	d9eb      	bls.n	8000cac <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8000cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cd8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000cf4 <ADC1_IN1_OffsetCalc+0x5c>
 8000cdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ce0:	eef0 7a66 	vmov.f32	s15, s13
}
 8000ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	431d0000 	.word	0x431d0000

08000cf8 <ADC1_IN2_OffsetCalc>:


float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f; // Initialize the sum to zero
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	e010      	b.n	8000d2e <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3308      	adds	r3, #8
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	3304      	adds	r3, #4
 8000d18:	edd3 7a00 	vldr	s15, [r3]
 8000d1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d24:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2b9c      	cmp	r3, #156	; 0x9c
 8000d32:	d9eb      	bls.n	8000d0c <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8000d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d38:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d54 <ADC1_IN2_OffsetCalc+0x5c>
 8000d3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d40:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d44:	eeb0 0a67 	vmov.f32	s0, s15
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	431d0000 	.word	0x431d0000

08000d58 <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f; // Initialize the sum to zero
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	e010      	b.n	8000d8e <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3308      	adds	r3, #8
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	3304      	adds	r3, #4
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d84:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	2b9c      	cmp	r3, #156	; 0x9c
 8000d92:	d9eb      	bls.n	8000d6c <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8000d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d98:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000db4 <ADC2_IN3_OffsetCalc+0x5c>
 8000d9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000da0:	eef0 7a66 	vmov.f32	s15, s13
}
 8000da4:	eeb0 0a67 	vmov.f32	s0, s15
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	431d0000 	.word	0x431d0000

08000db8 <ADC2_IN4_OffsetCalc>:


float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f; // Initialize the sum to zero
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	e010      	b.n	8000dee <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b9c      	cmp	r3, #156	; 0x9c
 8000df2:	d9eb      	bls.n	8000dcc <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8000df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000df8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e14 <ADC2_IN4_OffsetCalc+0x5c>
 8000dfc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e00:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e04:	eeb0 0a67 	vmov.f32	s0, s15
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	431d0000 	.word	0x431d0000

08000e18 <ADC3_IN1_OffsetCalc>:


float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	e010      	b.n	8000e4e <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3308      	adds	r3, #8
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	3304      	adds	r3, #4
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e44:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2b9c      	cmp	r3, #156	; 0x9c
 8000e52:	d9eb      	bls.n	8000e2c <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8000e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e58:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e74 <ADC3_IN1_OffsetCalc+0x5c>
 8000e5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e60:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e64:	eeb0 0a67 	vmov.f32	s0, s15
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	431d0000 	.word	0x431d0000

08000e78 <ADC3_IN2_OffsetCalc>:


float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f; // Initialize the sum to zero
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	e010      	b.n	8000eae <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3308      	adds	r3, #8
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	3304      	adds	r3, #4
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	2b9c      	cmp	r3, #156	; 0x9c
 8000eb2:	d9eb      	bls.n	8000e8c <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8000eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ed4 <ADC3_IN2_OffsetCalc+0x5c>
 8000ebc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ec0:	eef0 7a66 	vmov.f32	s15, s13
}
 8000ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	431d0000 	.word	0x431d0000

08000ed8 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	e038      	b.n	8000f56 <ADC1_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <ADC1_DMA_sort_uhb+0x1c>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d117      	bne.n	8000f24 <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	e00f      	b.n	8000f1a <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <ADC1_DMA_sort_uhb+0x94>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <ADC1_DMA_sort_uhb+0x94>)
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000f20:	d3eb      	bcc.n	8000efa <ADC1_DMA_sort_uhb+0x22>
 8000f22:	e015      	b.n	8000f50 <ADC1_DMA_sort_uhb+0x78>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	e00e      	b.n	8000f48 <ADC1_DMA_sort_uhb+0x70>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <ADC1_DMA_sort_uhb+0x94>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <ADC1_DMA_sort_uhb+0x94>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8000f4e:	d3ec      	bcc.n	8000f2a <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000f5c:	d9c2      	bls.n	8000ee4 <ADC1_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	20008c00 	.word	0x20008c00

08000f70 <ADC1_DMA_sort_lhb>:

void ADC1_DMA_sort_lhb (void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8000f76:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e03a      	b.n	8000ff4 <ADC1_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <ADC1_DMA_sort_lhb+0x1e>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <ADC1_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8000f8e:	f240 2371 	movw	r3, #625	; 0x271
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	e00f      	b.n	8000fb6 <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <ADC1_DMA_sort_lhb+0x9c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <ADC1_DMA_sort_lhb+0x9c>)
 8000f9c:	6811      	ldr	r1, [r2, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000fbc:	d9eb      	bls.n	8000f96 <ADC1_DMA_sort_lhb+0x26>
 8000fbe:	e016      	b.n	8000fee <ADC1_DMA_sort_lhb+0x7e>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8000fc0:	f240 2371 	movw	r3, #625	; 0x271
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	e00e      	b.n	8000fe6 <ADC1_DMA_sort_lhb+0x76>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <ADC1_DMA_sort_lhb+0x9c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <ADC1_DMA_sort_lhb+0x9c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68f9      	ldr	r1, [r7, #12]
 8000fd2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000fec:	d9ec      	bls.n	8000fc8 <ADC1_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d9bf      	bls.n	8000f7e <ADC1_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20008c00 	.word	0x20008c00

08001010 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e038      	b.n	800108e <ADC2_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <ADC2_DMA_sort_uhb+0x1c>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d117      	bne.n	800105c <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	e00f      	b.n	8001052 <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <ADC2_DMA_sort_uhb+0x94>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <ADC2_DMA_sort_uhb+0x94>)
 8001038:	6811      	ldr	r1, [r2, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3301      	adds	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001058:	d3eb      	bcc.n	8001032 <ADC2_DMA_sort_uhb+0x22>
 800105a:	e015      	b.n	8001088 <ADC2_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	e00e      	b.n	8001080 <ADC2_DMA_sort_uhb+0x70>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <ADC2_DMA_sort_uhb+0x94>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <ADC2_DMA_sort_uhb+0x94>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68f9      	ldr	r1, [r7, #12]
 800106c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001086:	d3ec      	bcc.n	8001062 <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001094:	d9c2      	bls.n	800101c <ADC2_DMA_sort_uhb+0xc>
			}
		}
    }

};
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20008c04 	.word	0x20008c04

080010a8 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80010ae:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e03a      	b.n	800112c <ADC2_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <ADC2_DMA_sort_lhb+0x1e>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d118      	bne.n	80010f8 <ADC2_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80010c6:	f240 2371 	movw	r3, #625	; 0x271
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	e00f      	b.n	80010ee <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <ADC2_DMA_sort_lhb+0x9c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <ADC2_DMA_sort_lhb+0x9c>)
 80010d4:	6811      	ldr	r1, [r2, #0]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80010f4:	d9eb      	bls.n	80010ce <ADC2_DMA_sort_lhb+0x26>
 80010f6:	e016      	b.n	8001126 <ADC2_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80010f8:	f240 2371 	movw	r3, #625	; 0x271
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	e00e      	b.n	800111e <ADC2_DMA_sort_lhb+0x76>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <ADC2_DMA_sort_lhb+0x9c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <ADC2_DMA_sort_lhb+0x9c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8001124:	d9ec      	bls.n	8001100 <ADC2_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8001132:	4293      	cmp	r3, r2
 8001134:	d9bf      	bls.n	80010b6 <ADC2_DMA_sort_lhb+0xe>
			}
		}
    }

};
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20008c04 	.word	0x20008c04

08001148 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e038      	b.n	80011c6 <ADC3_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <ADC3_DMA_sort_uhb+0x1c>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d117      	bne.n	8001194 <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	e00f      	b.n	800118a <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <ADC3_DMA_sort_uhb+0x94>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <ADC3_DMA_sort_uhb+0x94>)
 8001170:	6811      	ldr	r1, [r2, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001190:	d3eb      	bcc.n	800116a <ADC3_DMA_sort_uhb+0x22>
 8001192:	e015      	b.n	80011c0 <ADC3_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	e00e      	b.n	80011b8 <ADC3_DMA_sort_uhb+0x70>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <ADC3_DMA_sort_uhb+0x94>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <ADC3_DMA_sort_uhb+0x94>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80011ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3301      	adds	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80011be:	d3ec      	bcc.n	800119a <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80011cc:	d9c2      	bls.n	8001154 <ADC3_DMA_sort_uhb+0xc>
			}
		}
    }

};
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	20008c08 	.word	0x20008c08

080011e0 <ADC3_DMA_sort_lhb>:

void ADC3_DMA_sort_lhb (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80011e6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e03a      	b.n	8001264 <ADC3_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <ADC3_DMA_sort_lhb+0x1e>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <ADC3_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80011fe:	f240 2371 	movw	r3, #625	; 0x271
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	e00f      	b.n	8001226 <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <ADC3_DMA_sort_lhb+0x9c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <ADC3_DMA_sort_lhb+0x9c>)
 800120c:	6811      	ldr	r1, [r2, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3301      	adds	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800122c:	d9eb      	bls.n	8001206 <ADC3_DMA_sort_lhb+0x26>
 800122e:	e016      	b.n	800125e <ADC3_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001230:	f240 2371 	movw	r3, #625	; 0x271
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	e00e      	b.n	8001256 <ADC3_DMA_sort_lhb+0x76>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <ADC3_DMA_sort_lhb+0x9c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <ADC3_DMA_sort_lhb+0x9c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800125c:	d9ec      	bls.n	8001238 <ADC3_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f640 12c2 	movw	r2, #2498	; 0x9c2
 800126a:	4293      	cmp	r3, r2
 800126c:	d9bf      	bls.n	80011ee <ADC3_DMA_sort_lhb+0xe>
			}
		}
    }

};
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20008c08 	.word	0x20008c08

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f001 f8e0 	bl	800244a <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 800128a:	f7ff fb9d 	bl	80009c8 <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 800128e:	f7ff fbad 	bl	80009ec <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 8001292:	48b9      	ldr	r0, [pc, #740]	; (8001578 <main+0x2f8>)
 8001294:	f7fe ffc0 	bl	8000218 <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8001298:	f7ff fbd2 	bl	8000a40 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 800129c:	f7ff fbe2 	bl	8000a64 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 80012a0:	48b6      	ldr	r0, [pc, #728]	; (800157c <main+0x2fc>)
 80012a2:	f7ff f85d 	bl	8000360 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 80012a6:	f7ff fc07 	bl	8000ab8 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 80012aa:	f7ff fc17 	bl	8000adc <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 80012ae:	48b4      	ldr	r0, [pc, #720]	; (8001580 <main+0x300>)
 80012b0:	f7ff f8fa 	bl	80004a8 <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 80012b4:	f7ff fc3c 	bl	8000b30 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 80012b8:	f7ff fc4c 	bl	8000b54 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 80012bc:	48b1      	ldr	r0, [pc, #708]	; (8001584 <main+0x304>)
 80012be:	f7ff f997 	bl	80005f0 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 80012c2:	f7ff fc71 	bl	8000ba8 <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 80012c6:	f7ff fc81 	bl	8000bcc <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 80012ca:	48af      	ldr	r0, [pc, #700]	; (8001588 <main+0x308>)
 80012cc:	f7ff fa34 	bl	8000738 <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 80012d0:	f7ff fca6 	bl	8000c20 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 80012d4:	f7ff fcb6 	bl	8000c44 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 80012d8:	48ac      	ldr	r0, [pc, #688]	; (800158c <main+0x30c>)
 80012da:	f7ff fad1 	bl	8000880 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f9d5 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e2:	f000 fcb1 	bl	8001c48 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e6:	f000 fc69 	bl	8001bbc <MX_DMA_Init>
  MX_ADC1_Init();
 80012ea:	f000 fa19 	bl	8001720 <MX_ADC1_Init>
  MX_ADC2_Init();
 80012ee:	f000 faa1 	bl	8001834 <MX_ADC2_Init>
  MX_ADC3_Init();
 80012f2:	f000 fb17 	bl	8001924 <MX_ADC3_Init>
  MX_FMAC_Init();
 80012f6:	f000 fb8d 	bl	8001a14 <MX_FMAC_Init>
  MX_TIM6_Init();
 80012fa:	f000 fb9f 	bl	8001a3c <MX_TIM6_Init>
  MX_TIM7_Init();
 80012fe:	f000 fbd3 	bl	8001aa8 <MX_TIM7_Init>
  MX_TIM20_Init();
 8001302:	f000 fc07 	bl	8001b14 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	
  //ADC1 is started using timer 6 tiggered conversions
  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
    ADC_status=HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr,ADC_DMA_BUFFERSIZE);
 8001306:	4ba2      	ldr	r3, [pc, #648]	; (8001590 <main+0x310>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800130e:	4619      	mov	r1, r3
 8001310:	48a0      	ldr	r0, [pc, #640]	; (8001594 <main+0x314>)
 8001312:	f001 fcd7 	bl	8002cc4 <HAL_ADC_Start_DMA>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	4b9f      	ldr	r3, [pc, #636]	; (8001598 <main+0x318>)
 800131c:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
    ADC_status=HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr,ADC_DMA_BUFFERSIZE);
 800131e:	4b9f      	ldr	r3, [pc, #636]	; (800159c <main+0x31c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001326:	4619      	mov	r1, r3
 8001328:	489d      	ldr	r0, [pc, #628]	; (80015a0 <main+0x320>)
 800132a:	f001 fccb 	bl	8002cc4 <HAL_ADC_Start_DMA>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b99      	ldr	r3, [pc, #612]	; (8001598 <main+0x318>)
 8001334:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
    ADC_status=HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr,ADC_DMA_BUFFERSIZE);
 8001336:	4b9b      	ldr	r3, [pc, #620]	; (80015a4 <main+0x324>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800133e:	4619      	mov	r1, r3
 8001340:	4899      	ldr	r0, [pc, #612]	; (80015a8 <main+0x328>)
 8001342:	f001 fcbf 	bl	8002cc4 <HAL_ADC_Start_DMA>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b93      	ldr	r3, [pc, #588]	; (8001598 <main+0x318>)
 800134c:	701a      	strb	r2, [r3, #0]


  if (Offset_1_Calculated==0)
 800134e:	4b97      	ldr	r3, [pc, #604]	; (80015ac <main+0x32c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10f      	bne.n	8001376 <main+0xf6>
    {
		/* Collects samples to fill the buffer */
		update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8001356:	f7ff fb5b 	bl	8000a10 <update_ADC1_IN1_FO_biquad_filter>
		MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 800135a:	4887      	ldr	r0, [pc, #540]	; (8001578 <main+0x2f8>)
 800135c:	f7fe ff8e 	bl	800027c <MA_ADC1_IN1_Update>

		// Calculate the offset from the filled buffer
		Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 8001360:	4893      	ldr	r0, [pc, #588]	; (80015b0 <main+0x330>)
 8001362:	f7ff fc99 	bl	8000c98 <ADC1_IN1_OffsetCalc>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
 800136a:	4b92      	ldr	r3, [pc, #584]	; (80015b4 <main+0x334>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
		Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 8001370:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <main+0x32c>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
    }


  if (Offset_2_Calculated==0)
 8001376:	4b90      	ldr	r3, [pc, #576]	; (80015b8 <main+0x338>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10f      	bne.n	800139e <main+0x11e>
      {
  		/* Collects samples to fill the buffer */
  		update_ADC1_IN2_FO_biquad_filter();  // Filters channel 1 data
 800137e:	f7ff fb83 	bl	8000a88 <update_ADC1_IN2_FO_biquad_filter>
  		MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);  // Fill the buffer with ADC data
 8001382:	487e      	ldr	r0, [pc, #504]	; (800157c <main+0x2fc>)
 8001384:	f7ff f81e 	bl	80003c4 <MA_ADC1_IN2_Update>

  		// Calculate the offset from the filled buffer
  		Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 8001388:	488c      	ldr	r0, [pc, #560]	; (80015bc <main+0x33c>)
 800138a:	f7ff fcb5 	bl	8000cf8 <ADC1_IN2_OffsetCalc>
 800138e:	eef0 7a40 	vmov.f32	s15, s0
 8001392:	4b8b      	ldr	r3, [pc, #556]	; (80015c0 <main+0x340>)
 8001394:	edc3 7a00 	vstr	s15, [r3]
  		Offset_2_Calculated = 1; // Set the flag indicating offset has been calculated
 8001398:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <main+0x338>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
      }


  if (Offset_3_Calculated==0)
 800139e:	4b89      	ldr	r3, [pc, #548]	; (80015c4 <main+0x344>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10f      	bne.n	80013c6 <main+0x146>
      {
  		/* Collects samples to fill the buffer */
  		update_ADC2_IN3_FO_biquad_filter();  // Filters channel 1 data
 80013a6:	f7ff fbab 	bl	8000b00 <update_ADC2_IN3_FO_biquad_filter>
  		MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);  // Fill the buffer with ADC data
 80013aa:	4875      	ldr	r0, [pc, #468]	; (8001580 <main+0x300>)
 80013ac:	f7ff f8ae 	bl	800050c <MA_ADC2_IN3_Update>

  		// Calculate the offset from the filled buffer
  		Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 80013b0:	4885      	ldr	r0, [pc, #532]	; (80015c8 <main+0x348>)
 80013b2:	f7ff fcd1 	bl	8000d58 <ADC2_IN3_OffsetCalc>
 80013b6:	eef0 7a40 	vmov.f32	s15, s0
 80013ba:	4b84      	ldr	r3, [pc, #528]	; (80015cc <main+0x34c>)
 80013bc:	edc3 7a00 	vstr	s15, [r3]
  		Offset_3_Calculated = 1; // Set the flag indicating offset has been calculated
 80013c0:	4b80      	ldr	r3, [pc, #512]	; (80015c4 <main+0x344>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
      }


  if (Offset_4_Calculated==0)
 80013c6:	4b82      	ldr	r3, [pc, #520]	; (80015d0 <main+0x350>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <main+0x16e>
       {
   		/* Collects samples to fill the buffer */
   		update_ADC2_IN4_FO_biquad_filter();  // Filters channel 1 data
 80013ce:	f7ff fbd3 	bl	8000b78 <update_ADC2_IN4_FO_biquad_filter>
   		MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);  // Fill the buffer with ADC data
 80013d2:	486c      	ldr	r0, [pc, #432]	; (8001584 <main+0x304>)
 80013d4:	f7ff f93e 	bl	8000654 <MA_ADC2_IN4_Update>

   		// Calculate the offset from the filled buffer
   		Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 80013d8:	487e      	ldr	r0, [pc, #504]	; (80015d4 <main+0x354>)
 80013da:	f7ff fced 	bl	8000db8 <ADC2_IN4_OffsetCalc>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <main+0x358>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
   		Offset_4_Calculated = 1; // Set the flag indicating offset has been calculated
 80013e8:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <main+0x350>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
       }


  if (Offset_5_Calculated==0)
 80013ee:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <main+0x35c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <main+0x196>
     {
 		/* Collects samples to fill the buffer */
 		update_ADC3_IN1_FO_biquad_filter();  // Filters channel 1 data
 80013f6:	f7ff fbfb 	bl	8000bf0 <update_ADC3_IN1_FO_biquad_filter>
 		MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 80013fa:	4863      	ldr	r0, [pc, #396]	; (8001588 <main+0x308>)
 80013fc:	f7ff f9ce 	bl	800079c <MA_ADC3_IN1_Update>

 		// Calculate the offset from the filled buffer
 		Offset_5 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 8001400:	4877      	ldr	r0, [pc, #476]	; (80015e0 <main+0x360>)
 8001402:	f7ff fd09 	bl	8000e18 <ADC3_IN1_OffsetCalc>
 8001406:	eef0 7a40 	vmov.f32	s15, s0
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <main+0x364>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
 		Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 8001410:	4b72      	ldr	r3, [pc, #456]	; (80015dc <main+0x35c>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
     }


  if (Offset_6_Calculated==0)
 8001416:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <main+0x368>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <main+0x1be>
      {
  		/* Collects samples to fill the buffer */
  		update_ADC3_IN2_FO_biquad_filter();  // Filters channel 1 data
 800141e:	f7ff fc23 	bl	8000c68 <update_ADC3_IN2_FO_biquad_filter>
  		MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);  // Fill the buffer with ADC data
 8001422:	485a      	ldr	r0, [pc, #360]	; (800158c <main+0x30c>)
 8001424:	f7ff fa5e 	bl	80008e4 <MA_ADC3_IN2_Update>

  		// Calculate the offset from the filled buffer
  		Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 8001428:	4870      	ldr	r0, [pc, #448]	; (80015ec <main+0x36c>)
 800142a:	f7ff fd25 	bl	8000e78 <ADC3_IN2_OffsetCalc>
 800142e:	eef0 7a40 	vmov.f32	s15, s0
 8001432:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <main+0x370>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
  		Offset_6_Calculated = 1; // Set the flag indicating offset has been calculated
 8001438:	4b6b      	ldr	r3, [pc, #428]	; (80015e8 <main+0x368>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 800143e:	f7ff fae7 	bl	8000a10 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);
 8001442:	484d      	ldr	r0, [pc, #308]	; (8001578 <main+0x2f8>)
 8001444:	f7fe ff1a 	bl	800027c <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_HALFBUFFERSIZE; y++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e017      	b.n	800147e <main+0x1fe>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtract the stored offset
 800144e:	4a4a      	ldr	r2, [pc, #296]	; (8001578 <main+0x2f8>)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3308      	adds	r3, #8
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3304      	adds	r3, #4
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <main+0x334>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001468:	4a43      	ldr	r2, [pc, #268]	; (8001578 <main+0x2f8>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3308      	adds	r3, #8
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3304      	adds	r3, #4
 8001474:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_HALFBUFFERSIZE; y++)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001484:	4293      	cmp	r3, r2
 8001486:	d9e2      	bls.n	800144e <main+0x1ce>
	  }



	  update_ADC1_IN2_FO_biquad_filter();
 8001488:	f7ff fafe 	bl	8000a88 <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 800148c:	483b      	ldr	r0, [pc, #236]	; (800157c <main+0x2fc>)
 800148e:	f7fe ff99 	bl	80003c4 <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_HALFBUFFERSIZE; z++)
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e017      	b.n	80014c8 <main+0x248>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 8001498:	4a38      	ldr	r2, [pc, #224]	; (800157c <main+0x2fc>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	3308      	adds	r3, #8
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <main+0x340>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	4a32      	ldr	r2, [pc, #200]	; (800157c <main+0x2fc>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3308      	adds	r3, #8
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3304      	adds	r3, #4
 80014be:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_HALFBUFFERSIZE; z++)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	3301      	adds	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d9e2      	bls.n	8001498 <main+0x218>
	  }



	  update_ADC2_IN3_FO_biquad_filter();
 80014d2:	f7ff fb15 	bl	8000b00 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 80014d6:	482a      	ldr	r0, [pc, #168]	; (8001580 <main+0x300>)
 80014d8:	f7ff f818 	bl	800050c <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g < ADC_DMA_HALFBUFFERSIZE; g++)
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e017      	b.n	8001512 <main+0x292>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <main+0x300>)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3308      	adds	r3, #8
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3304      	adds	r3, #4
 80014ee:	ed93 7a00 	vldr	s14, [r3]
 80014f2:	4b36      	ldr	r3, [pc, #216]	; (80015cc <main+0x34c>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	4a20      	ldr	r2, [pc, #128]	; (8001580 <main+0x300>)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3308      	adds	r3, #8
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	3304      	adds	r3, #4
 8001508:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g < ADC_DMA_HALFBUFFERSIZE; g++)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001518:	4293      	cmp	r3, r2
 800151a:	d9e2      	bls.n	80014e2 <main+0x262>
	  }



	  update_ADC2_IN4_FO_biquad_filter();
 800151c:	f7ff fb2c 	bl	8000b78 <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8001520:	4818      	ldr	r0, [pc, #96]	; (8001584 <main+0x304>)
 8001522:	f7ff f897 	bl	8000654 <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_HALFBUFFERSIZE; e++)
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	e017      	b.n	800155c <main+0x2dc>
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 800152c:	4a15      	ldr	r2, [pc, #84]	; (8001584 <main+0x304>)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3308      	adds	r3, #8
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3304      	adds	r3, #4
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <main+0x358>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <main+0x304>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	3308      	adds	r3, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3304      	adds	r3, #4
 8001552:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_HALFBUFFERSIZE; e++)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3301      	adds	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001562:	4293      	cmp	r3, r2
 8001564:	d9e2      	bls.n	800152c <main+0x2ac>
	  }



	  update_ADC3_IN1_FO_biquad_filter();
 8001566:	f7ff fb43 	bl	8000bf0 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <main+0x308>)
 800156c:	f7ff f916 	bl	800079c <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_HALFBUFFERSIZE; b++)
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	e056      	b.n	8001624 <main+0x3a4>
 8001576:	bf00      	nop
 8001578:	20008c0c 	.word	0x20008c0c
 800157c:	20008ea4 	.word	0x20008ea4
 8001580:	2000913c 	.word	0x2000913c
 8001584:	200093d4 	.word	0x200093d4
 8001588:	2000966c 	.word	0x2000966c
 800158c:	20009904 	.word	0x20009904
 8001590:	20008c00 	.word	0x20008c00
 8001594:	20008880 	.word	0x20008880
 8001598:	20009b9c 	.word	0x20009b9c
 800159c:	20008c04 	.word	0x20008c04
 80015a0:	200088ec 	.word	0x200088ec
 80015a4:	20008c08 	.word	0x20008c08
 80015a8:	20008958 	.word	0x20008958
 80015ac:	20009bb8 	.word	0x20009bb8
 80015b0:	200078f0 	.word	0x200078f0
 80015b4:	20009ba0 	.word	0x20009ba0
 80015b8:	20009bb9 	.word	0x20009bb9
 80015bc:	20007b88 	.word	0x20007b88
 80015c0:	20009ba4 	.word	0x20009ba4
 80015c4:	20009bba 	.word	0x20009bba
 80015c8:	20007e20 	.word	0x20007e20
 80015cc:	20009ba8 	.word	0x20009ba8
 80015d0:	20009bbb 	.word	0x20009bbb
 80015d4:	200080b8 	.word	0x200080b8
 80015d8:	20009bac 	.word	0x20009bac
 80015dc:	20009bbc 	.word	0x20009bbc
 80015e0:	20008350 	.word	0x20008350
 80015e4:	20009bb0 	.word	0x20009bb0
 80015e8:	20009bbd 	.word	0x20009bbd
 80015ec:	200085e8 	.word	0x200085e8
 80015f0:	20009bb4 	.word	0x20009bb4
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <main+0x3fc>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3308      	adds	r3, #8
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3304      	adds	r3, #4
 8001600:	ed93 7a00 	vldr	s14, [r3]
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <main+0x400>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <main+0x3fc>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3308      	adds	r3, #8
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	3304      	adds	r3, #4
 800161a:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_HALFBUFFERSIZE; b++)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3301      	adds	r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800162a:	4293      	cmp	r3, r2
 800162c:	d9e2      	bls.n	80015f4 <main+0x374>
	  }



	  update_ADC3_IN2_FO_biquad_filter();
 800162e:	f7ff fb1b 	bl	8000c68 <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 8001632:	4814      	ldr	r0, [pc, #80]	; (8001684 <main+0x404>)
 8001634:	f7ff f956 	bl	80008e4 <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_HALFBUFFERSIZE; c++)
 8001638:	2300      	movs	r3, #0
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	e017      	b.n	800166e <main+0x3ee>
	  	  {
	  		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <main+0x404>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3308      	adds	r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <main+0x408>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <main+0x404>)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3308      	adds	r3, #8
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	3304      	adds	r3, #4
 8001664:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_HALFBUFFERSIZE; c++)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001674:	4293      	cmp	r3, r2
 8001676:	d9e2      	bls.n	800163e <main+0x3be>
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8001678:	e6e1      	b.n	800143e <main+0x1be>
 800167a:	bf00      	nop
 800167c:	2000966c 	.word	0x2000966c
 8001680:	20009bb0 	.word	0x20009bb0
 8001684:	20009904 	.word	0x20009904
 8001688:	20009bb4 	.word	0x20009bb4

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	2238      	movs	r2, #56	; 0x38
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f004 fcc4 	bl	8006028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016b2:	f002 ffef 	bl	8004694 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c4:	2303      	movs	r3, #3
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 f88b 	bl	80047fc <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80016ec:	f000 fc0a 	bl	8001f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2303      	movs	r3, #3
 80016f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2102      	movs	r1, #2
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fb89 	bl	8004e20 <HAL_RCC_ClockConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001714:	f000 fbf6 	bl	8001f04 <Error_Handler>
  }
}
 8001718:	bf00      	nop
 800171a:	3750      	adds	r7, #80	; 0x50
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2220      	movs	r2, #32
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fc75 	bl	8006028 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <MX_ADC1_Init+0x108>)
 8001740:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001744:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <MX_ADC1_Init+0x108>)
 8001748:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800174c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800174e:	4b36      	ldr	r3, [pc, #216]	; (8001828 <MX_ADC1_Init+0x108>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <MX_ADC1_Init+0x108>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <MX_ADC1_Init+0x108>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <MX_ADC1_Init+0x108>)
 8001762:	2201      	movs	r2, #1
 8001764:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <MX_ADC1_Init+0x108>)
 8001768:	2204      	movs	r2, #4
 800176a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <MX_ADC1_Init+0x108>)
 800176e:	2200      	movs	r2, #0
 8001770:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <MX_ADC1_Init+0x108>)
 8001774:	2200      	movs	r2, #0
 8001776:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <MX_ADC1_Init+0x108>)
 800177a:	2202      	movs	r2, #2
 800177c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <MX_ADC1_Init+0x108>)
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <MX_ADC1_Init+0x108>)
 8001788:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <MX_ADC1_Init+0x108>)
 8001790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <MX_ADC1_Init+0x108>)
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <MX_ADC1_Init+0x108>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <MX_ADC1_Init+0x108>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ac:	481e      	ldr	r0, [pc, #120]	; (8001828 <MX_ADC1_Init+0x108>)
 80017ae:	f001 f8db 	bl	8002968 <HAL_ADC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80017b8:	f000 fba4 	bl	8001f04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4818      	ldr	r0, [pc, #96]	; (8001828 <MX_ADC1_Init+0x108>)
 80017c8:	f002 f8cc 	bl	8003964 <HAL_ADCEx_MultiModeConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80017d2:	f000 fb97 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_ADC1_Init+0x10c>)
 80017d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017da:	2306      	movs	r3, #6
 80017dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80017de:	2305      	movs	r3, #5
 80017e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017e2:	237f      	movs	r3, #127	; 0x7f
 80017e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017e6:	2304      	movs	r3, #4
 80017e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_ADC1_Init+0x108>)
 80017f4:	f001 fb3a 	bl	8002e6c <HAL_ADC_ConfigChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80017fe:	f000 fb81 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_ADC1_Init+0x110>)
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001806:	230c      	movs	r3, #12
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_ADC1_Init+0x108>)
 8001810:	f001 fb2c 	bl	8002e6c <HAL_ADC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800181a:	f000 fb73 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20008880 	.word	0x20008880
 800182c:	04300002 	.word	0x04300002
 8001830:	08600004 	.word	0x08600004

08001834 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2220      	movs	r2, #32
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fbf1 	bl	8006028 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001848:	4a33      	ldr	r2, [pc, #204]	; (8001918 <MX_ADC2_Init+0xe4>)
 800184a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <MX_ADC2_Init+0xe0>)
 800184e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001852:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001854:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <MX_ADC2_Init+0xe0>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001868:	2201      	movs	r2, #1
 800186a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <MX_ADC2_Init+0xe0>)
 800186e:	2204      	movs	r2, #4
 8001870:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001872:	4b28      	ldr	r3, [pc, #160]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MX_ADC2_Init+0xe0>)
 800187a:	2200      	movs	r2, #0
 800187c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001880:	2202      	movs	r2, #2
 8001882:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <MX_ADC2_Init+0xe0>)
 800188e:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <MX_ADC2_Init+0xe0>)
 8001896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_ADC2_Init+0xe0>)
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_ADC2_Init+0xe0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_ADC2_Init+0xe0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018b2:	4818      	ldr	r0, [pc, #96]	; (8001914 <MX_ADC2_Init+0xe0>)
 80018b4:	f001 f858 	bl	8002968 <HAL_ADC_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80018be:	f000 fb21 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_ADC2_Init+0xe8>)
 80018c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c6:	2306      	movs	r3, #6
 80018c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80018ca:	2305      	movs	r3, #5
 80018cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018ce:	237f      	movs	r3, #127	; 0x7f
 80018d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018d2:	2304      	movs	r3, #4
 80018d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <MX_ADC2_Init+0xe0>)
 80018e0:	f001 fac4 	bl	8002e6c <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80018ea:	f000 fb0b 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_ADC2_Init+0xec>)
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018f2:	230c      	movs	r3, #12
 80018f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018f6:	463b      	mov	r3, r7
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <MX_ADC2_Init+0xe0>)
 80018fc:	f001 fab6 	bl	8002e6c <HAL_ADC_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8001906:	f000 fafd 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200088ec 	.word	0x200088ec
 8001918:	50000100 	.word	0x50000100
 800191c:	0c900008 	.word	0x0c900008
 8001920:	10c00010 	.word	0x10c00010

08001924 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192a:	463b      	mov	r3, r7
 800192c:	2220      	movs	r2, #32
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fb79 	bl	8006028 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001938:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <MX_ADC3_Init+0xe4>)
 800193a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800193c:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <MX_ADC3_Init+0xe0>)
 800193e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001942:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <MX_ADC3_Init+0xe0>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001950:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001958:	2201      	movs	r2, #1
 800195a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <MX_ADC3_Init+0xe0>)
 800195e:	2204      	movs	r2, #4
 8001960:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001968:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <MX_ADC3_Init+0xe0>)
 800196a:	2200      	movs	r2, #0
 800196c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001970:	2202      	movs	r2, #2
 8001972:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <MX_ADC3_Init+0xe0>)
 800197e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_ADC3_Init+0xe0>)
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_ADC3_Init+0xe0>)
 8001996:	2200      	movs	r2, #0
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800199a:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MX_ADC3_Init+0xe0>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019a2:	4818      	ldr	r0, [pc, #96]	; (8001a04 <MX_ADC3_Init+0xe0>)
 80019a4:	f000 ffe0 	bl	8002968 <HAL_ADC_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80019ae:	f000 faa9 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <MX_ADC3_Init+0xe8>)
 80019b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b6:	2306      	movs	r3, #6
 80019b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80019ba:	2305      	movs	r3, #5
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019be:	237f      	movs	r3, #127	; 0x7f
 80019c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c2:	2304      	movs	r3, #4
 80019c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_ADC3_Init+0xe0>)
 80019d0:	f001 fa4c 	bl	8002e6c <HAL_ADC_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 80019da:	f000 fa93 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_ADC3_Init+0xec>)
 80019e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019e2:	230c      	movs	r3, #12
 80019e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_ADC3_Init+0xe0>)
 80019ec:	f001 fa3e 	bl	8002e6c <HAL_ADC_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 80019f6:	f000 fa85 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20008958 	.word	0x20008958
 8001a08:	50000400 	.word	0x50000400
 8001a0c:	04300002 	.word	0x04300002
 8001a10:	08600004 	.word	0x08600004

08001a14 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_FMAC_Init+0x20>)
 8001a1a:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <MX_FMAC_Init+0x24>)
 8001a1c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_FMAC_Init+0x20>)
 8001a20:	f002 fc0a 	bl	8004238 <HAL_FMAC_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001a2a:	f000 fa6b 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20008ae4 	.word	0x20008ae4
 8001a38:	40021400 	.word	0x40021400

08001a3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_TIM6_Init+0x64>)
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <MX_TIM6_Init+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_TIM6_Init+0x64>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_TIM6_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_TIM6_Init+0x64>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_TIM6_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM6_Init+0x64>)
 8001a6c:	f003 fdf4 	bl	8005658 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a76:	f000 fa45 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM6_Init+0x64>)
 8001a88:	f004 f878 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a92:	f000 fa37 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20008b1c 	.word	0x20008b1c
 8001aa4:	40001000 	.word	0x40001000

08001aa8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_TIM7_Init+0x64>)
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <MX_TIM7_Init+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_TIM7_Init+0x64>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_TIM7_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_TIM7_Init+0x64>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_TIM7_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_TIM7_Init+0x64>)
 8001ad8:	f003 fdbe 	bl	8005658 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ae2:	f000 fa0f 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_TIM7_Init+0x64>)
 8001af4:	f004 f842 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001afe:	f000 fa01 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20008b68 	.word	0x20008b68
 8001b10:	40001400 	.word	0x40001400

08001b14 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b36:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <MX_TIM20_Init+0xa4>)
 8001b38:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001b5e:	4815      	ldr	r0, [pc, #84]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b60:	f003 fd7a 	bl	8005658 <HAL_TIM_Base_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8001b6a:	f000 f9cb 	bl	8001f04 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b7e:	f003 fdc2 	bl	8005706 <HAL_TIM_SlaveConfigSynchro>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8001b88:	f000 f9bc 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM20_Init+0xa0>)
 8001b9e:	f003 ffed 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001ba8:	f000 f9ac 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20008bb4 	.word	0x20008bb4
 8001bb8:	40015000 	.word	0x40015000

08001bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_DMA_Init+0x88>)
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <MX_DMA_Init+0x88>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6493      	str	r3, [r2, #72]	; 0x48
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_DMA_Init+0x88>)
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_DMA_Init+0x88>)
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <MX_DMA_Init+0x88>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6493      	str	r3, [r2, #72]	; 0x48
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_DMA_Init+0x88>)
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_DMA_Init+0x88>)
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <MX_DMA_Init+0x88>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6493      	str	r3, [r2, #72]	; 0x48
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_DMA_Init+0x88>)
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	200b      	movs	r0, #11
 8001c10:	f002 f86b 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c14:	200b      	movs	r0, #11
 8001c16:	f002 f882 	bl	8003d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2010      	movs	r0, #16
 8001c20:	f002 f863 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c24:	2010      	movs	r0, #16
 8001c26:	f002 f87a 	bl	8003d1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2038      	movs	r0, #56	; 0x38
 8001c30:	f002 f85b 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001c34:	2038      	movs	r0, #56	; 0x38
 8001c36:	f002 f872 	bl	8003d1e <HAL_NVIC_EnableIRQ>

}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_GPIO_Init+0x74>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd0:	d123      	bne.n	8001d1a <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8001cd2:	f7ff f901 	bl	8000ed8 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8001ce2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001ce6:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a36      	ldr	r2, [pc, #216]	; (8001dc8 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001cf6:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8001cfa:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001cfe:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001d0e:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8001d12:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001d16:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d123      	bne.n	8001d6c <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8001d24:	f7ff f974 	bl	8001010 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8001d34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001d38:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d48:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8001d4c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001d50:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001d60:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8001d64:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001d68:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d123      	bne.n	8001dbe <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 8001d76:	f7ff f9e7 	bl	8001148 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8001d86:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001d8a:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d9a:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8001d9e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001da2:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001db2:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8001db6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001dba:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20008c00 	.word	0x20008c00
 8001dcc:	50000100 	.word	0x50000100
 8001dd0:	20008c04 	.word	0x20008c04
 8001dd4:	50000400 	.word	0x50000400
 8001dd8:	20008c08 	.word	0x20008c08

08001ddc <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dec:	d125      	bne.n	8001e3a <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 8001dee:	f7ff f8bf 	bl	8000f70 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <HAL_ADC_ConvCpltCallback+0x114>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a3e      	ldr	r2, [pc, #248]	; (8001ef0 <HAL_ADC_ConvCpltCallback+0x114>)
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001e02:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001e06:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <HAL_ADC_ConvCpltCallback+0x114>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a38      	ldr	r2, [pc, #224]	; (8001ef0 <HAL_ADC_ConvCpltCallback+0x114>)
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e16:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8001e1a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001e1e:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_ADC_ConvCpltCallback+0x114>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <HAL_ADC_ConvCpltCallback+0x114>)
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e2e:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8001e32:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001e36:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <HAL_ADC_ConvCpltCallback+0x118>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d125      	bne.n	8001e90 <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb();
 8001e44:	f7ff f930 	bl	80010a8 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e54:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001e58:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001e5c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001e6c:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8001e70:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001e74:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001e84:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8001e88:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001e8c:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_ADC_ConvCpltCallback+0x120>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d125      	bne.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb();
 8001e9a:	f7ff f9a1 	bl	80011e0 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eaa:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001eae:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001eb2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_ADC_ConvCpltCallback+0x124>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001ec2:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8001ec6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001eca:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_ADC_ConvCpltCallback+0x124>)
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001eda:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8001ede:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001ee2:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20008c00 	.word	0x20008c00
 8001ef4:	50000100 	.word	0x50000100
 8001ef8:	20008c04 	.word	0x20008c04
 8001efc:	50000400 	.word	0x50000400
 8001f00:	20008c08 	.word	0x20008c08

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f08:	b672      	cpsid	i
}
 8001f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <Error_Handler+0x8>
	...

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_MspInit+0x44>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_MspInit+0x44>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6613      	str	r3, [r2, #96]	; 0x60
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_MspInit+0x44>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_MspInit+0x44>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_MspInit+0x44>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_MspInit+0x44>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f46:	f002 fc49 	bl	80047dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0a2      	sub	sp, #136	; 0x88
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	2250      	movs	r2, #80	; 0x50
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 f855 	bl	8006028 <memset>
  if(hadc->Instance==ADC1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f86:	d169      	bne.n	800205c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f8e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f92:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 f921 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001fa4:	f7ff ffae 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fa8:	4b64      	ldr	r3, [pc, #400]	; (800213c <HAL_ADC_MspInit+0x1e4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a63      	ldr	r2, [pc, #396]	; (800213c <HAL_ADC_MspInit+0x1e4>)
 8001fb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fb2:	4b62      	ldr	r3, [pc, #392]	; (800213c <HAL_ADC_MspInit+0x1e4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a60      	ldr	r2, [pc, #384]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 8001fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b58      	ldr	r3, [pc, #352]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fea:	2303      	movs	r3, #3
 8001fec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002000:	f002 f9c6 	bl	8004390 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002006:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_ADC_MspInit+0x1f0>)
 8002008:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 800200c:	2205      	movs	r2, #5
 800200e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002010:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002016:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800201c:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002028:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800202a:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 800202c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002030:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002032:	4b44      	ldr	r3, [pc, #272]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002034:	2220      	movs	r2, #32
 8002036:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800203e:	4841      	ldr	r0, [pc, #260]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002040:	f001 fe88 	bl	8003d54 <HAL_DMA_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800204a:	f7ff ff5b 	bl	8001f04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
 8002054:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_ADC_MspInit+0x1ec>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800205a:	e0fa      	b.n	8002252 <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3a      	ldr	r2, [pc, #232]	; (800214c <HAL_ADC_MspInit+0x1f4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d178      	bne.n	8002158 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800206c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002070:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	4618      	mov	r0, r3
 8002078:	f003 f8b2 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8002082:	f7ff ff3f 	bl	8001f04 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_ADC_MspInit+0x1e4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_ADC_MspInit+0x1e4>)
 800208e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_ADC_MspInit+0x1e4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 800209e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020bc:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_ADC_MspInit+0x1e8>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020cc:	2303      	movs	r3, #3
 80020ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f002 f957 	bl	8004390 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_ADC_MspInit+0x1fc>)
 80020e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 80020ea:	2224      	movs	r2, #36	; 0x24
 80020ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 800210a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 8002112:	2220      	movs	r2, #32
 8002114:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 800211e:	f001 fe19 	bl	8003d54 <HAL_DMA_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8002128:	f7ff feec 	bl	8001f04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_ADC_MspInit+0x1f8>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002138:	e08b      	b.n	8002252 <HAL_ADC_MspInit+0x2fa>
 800213a:	bf00      	nop
 800213c:	20009bc0 	.word	0x20009bc0
 8002140:	40021000 	.word	0x40021000
 8002144:	200089c4 	.word	0x200089c4
 8002148:	40020008 	.word	0x40020008
 800214c:	50000100 	.word	0x50000100
 8002150:	20008a24 	.word	0x20008a24
 8002154:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_ADC_MspInit+0x304>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d177      	bne.n	8002252 <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002168:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800216c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	f003 f834 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 800217e:	f7ff fec1 	bl	8001f04 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <HAL_ADC_MspInit+0x308>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a36      	ldr	r2, [pc, #216]	; (8002260 <HAL_ADC_MspInit+0x308>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_ADC_MspInit+0x308>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_ADC_MspInit+0x308>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a30      	ldr	r2, [pc, #192]	; (8002260 <HAL_ADC_MspInit+0x308>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_ADC_MspInit+0x308>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <HAL_ADC_MspInit+0x308>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <HAL_ADC_MspInit+0x308>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_ADC_MspInit+0x308>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021ca:	2302      	movs	r3, #2
 80021cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ce:	2303      	movs	r3, #3
 80021d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021da:	4619      	mov	r1, r3
 80021dc:	4821      	ldr	r0, [pc, #132]	; (8002264 <HAL_ADC_MspInit+0x30c>)
 80021de:	f002 f8d7 	bl	8004390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e8:	2303      	movs	r3, #3
 80021ea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021f4:	4619      	mov	r1, r3
 80021f6:	481c      	ldr	r0, [pc, #112]	; (8002268 <HAL_ADC_MspInit+0x310>)
 80021f8:	f002 f8ca 	bl	8004390 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_ADC_MspInit+0x314>)
 80021fe:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <HAL_ADC_MspInit+0x318>)
 8002200:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_ADC_MspInit+0x314>)
 8002204:	2225      	movs	r2, #37	; 0x25
 8002206:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_ADC_MspInit+0x314>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_ADC_MspInit+0x314>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_ADC_MspInit+0x314>)
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_ADC_MspInit+0x314>)
 800221c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002220:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_ADC_MspInit+0x314>)
 8002224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002228:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_ADC_MspInit+0x314>)
 800222c:	2220      	movs	r2, #32
 800222e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_ADC_MspInit+0x314>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002236:	480d      	ldr	r0, [pc, #52]	; (800226c <HAL_ADC_MspInit+0x314>)
 8002238:	f001 fd8c 	bl	8003d54 <HAL_DMA_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8002242:	f7ff fe5f 	bl	8001f04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_ADC_MspInit+0x314>)
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_ADC_MspInit+0x314>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002252:	bf00      	nop
 8002254:	3788      	adds	r7, #136	; 0x88
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	50000400 	.word	0x50000400
 8002260:	40021000 	.word	0x40021000
 8002264:	48000400 	.word	0x48000400
 8002268:	48001000 	.word	0x48001000
 800226c:	20008a84 	.word	0x20008a84
 8002270:	40020408 	.word	0x40020408

08002274 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_FMAC_MspInit+0x38>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10b      	bne.n	800229e <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_FMAC_MspInit+0x3c>)
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_FMAC_MspInit+0x3c>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6493      	str	r3, [r2, #72]	; 0x48
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <HAL_FMAC_MspInit+0x3c>)
 8002294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <HAL_TIM_Base_MspInit+0x80>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10c      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80022de:	e022      	b.n	8002326 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_TIM_Base_MspInit+0x88>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10c      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 80022f0:	f043 0320 	orr.w	r3, r3, #32
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
}
 8002302:	e010      	b.n	8002326 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_TIM_Base_MspInit+0x8c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10b      	bne.n	8002326 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 8002314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002318:	6613      	str	r3, [r2, #96]	; 0x60
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <HAL_TIM_Base_MspInit+0x84>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40001000 	.word	0x40001000
 8002338:	40021000 	.word	0x40021000
 800233c:	40001400 	.word	0x40001400
 8002340:	40015000 	.word	0x40015000

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002390:	f000 f8ae 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <DMA1_Channel1_IRQHandler+0x10>)
 800239e:	f001 fdfc 	bl	8003f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200089c4 	.word	0x200089c4

080023ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Channel6_IRQHandler+0x10>)
 80023b2:	f001 fdf2 	bl	8003f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20008a24 	.word	0x20008a24

080023c0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA2_Channel1_IRQHandler+0x10>)
 80023c6:	f001 fde8 	bl	8003f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20008a84 	.word	0x20008a84

080023d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023fc:	f7ff ffea 	bl	80023d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <LoopForever+0x6>)
  ldr r1, =_edata
 8002402:	490d      	ldr	r1, [pc, #52]	; (8002438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <LoopForever+0xe>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002418:	4c0a      	ldr	r4, [pc, #40]	; (8002444 <LoopForever+0x16>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002426:	f003 fe07 	bl	8006038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242a:	f7fe ff29 	bl	8001280 <main>

0800242e <LoopForever>:

LoopForever:
    b LoopForever
 800242e:	e7fe      	b.n	800242e <LoopForever>
  ldr   r0, =_estack
 8002430:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	20007874 	.word	0x20007874
  ldr r2, =_sidata
 800243c:	080060b0 	.word	0x080060b0
  ldr r2, =_sbss
 8002440:	20007874 	.word	0x20007874
  ldr r4, =_ebss
 8002444:	20009bc8 	.word	0x20009bc8

08002448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC1_2_IRQHandler>

0800244a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f001 fc3d 	bl	8003cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245a:	200f      	movs	r0, #15
 800245c:	f000 f80e 	bl	800247c <HAL_InitTick>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	e001      	b.n	8002470 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800246c:	f7ff fd50 	bl	8001f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002470:	79fb      	ldrb	r3, [r7, #7]

}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_InitTick+0x68>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d022      	beq.n	80024d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_InitTick+0x6c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <HAL_InitTick+0x68>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249c:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fc48 	bl	8003d3a <HAL_SYSTICK_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10f      	bne.n	80024d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	d809      	bhi.n	80024ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b6:	2200      	movs	r2, #0
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	f04f 30ff 	mov.w	r0, #4294967295
 80024be:	f001 fc14 	bl	8003cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_InitTick+0x70>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e007      	b.n	80024da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e004      	b.n	80024da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e001      	b.n	80024da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20007870 	.word	0x20007870
 80024e8:	20007868 	.word	0x20007868
 80024ec:	2000786c 	.word	0x2000786c

080024f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_IncTick+0x1c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_IncTick+0x20>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a03      	ldr	r2, [pc, #12]	; (800250c <HAL_IncTick+0x1c>)
 8002500:	6013      	str	r3, [r2, #0]
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	20009bc4 	.word	0x20009bc4
 8002510:	20007870 	.word	0x20007870

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20009bc4 	.word	0x20009bc4

0800252c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3360      	adds	r3, #96	; 0x60
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <LL_ADC_SetOffset+0x44>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025cc:	bf00      	nop
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	03fff000 	.word	0x03fff000

080025dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3360      	adds	r3, #96	; 0x60
 80025ea:	461a      	mov	r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3360      	adds	r3, #96	; 0x60
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	431a      	orrs	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800263e:	b480      	push	{r7}
 8002640:	b087      	sub	sp, #28
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	431a      	orrs	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	615a      	str	r2, [r3, #20]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b087      	sub	sp, #28
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3330      	adds	r3, #48	; 0x30
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	4413      	add	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	211f      	movs	r1, #31
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	f003 011f 	and.w	r1, r3, #31
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3314      	adds	r3, #20
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	0e5b      	lsrs	r3, r3, #25
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	0d1b      	lsrs	r3, r3, #20
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2107      	movs	r1, #7
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	0d1b      	lsrs	r3, r3, #20
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	431a      	orrs	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002798:	bf00      	nop
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0318 	and.w	r3, r3, #24
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027c8:	40d9      	lsrs	r1, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	400b      	ands	r3, r1
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	0007ffff 	.word	0x0007ffff

080027ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 031f 	and.w	r3, r3, #31
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002818:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6093      	str	r3, [r2, #8]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800283c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002840:	d101      	bne.n	8002846 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002868:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002890:	d101      	bne.n	8002896 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <LL_ADC_IsEnabled+0x18>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <LL_ADC_IsEnabled+0x1a>
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002902:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b04      	cmp	r3, #4
 800292c:	d101      	bne.n	8002932 <LL_ADC_REG_IsConversionOngoing+0x18>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b08      	cmp	r3, #8
 8002952:	d101      	bne.n	8002958 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e19b      	b.n	8002cba <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff fae1 	bl	8001f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff3f 	bl	800282c <LL_ADC_IsDeepPowerDownEnabled>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff25 	bl	8002808 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff5a 	bl	800287c <LL_ADC_IsInternalRegulatorEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff3e 	bl	8002854 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d8:	4b97      	ldr	r3, [pc, #604]	; (8002c38 <HAL_ADC_Init+0x2d0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	4a97      	ldr	r2, [pc, #604]	; (8002c3c <HAL_ADC_Init+0x2d4>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029ec:	e002      	b.n	80029f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f9      	bne.n	80029ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff3c 	bl	800287c <LL_ADC_IsInternalRegulatorEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff75 	bl	800291a <LL_ADC_REG_IsConversionOngoing>
 8002a30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 8134 	bne.w	8002ca8 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 8130 	bne.w	8002ca8 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a50:	f043 0202 	orr.w	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff35 	bl	80028cc <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d137      	bne.n	8002ad8 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a70:	d004      	beq.n	8002a7c <HAL_ADC_Init+0x114>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a72      	ldr	r2, [pc, #456]	; (8002c40 <HAL_ADC_Init+0x2d8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10f      	bne.n	8002a9c <HAL_ADC_Init+0x134>
 8002a7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a80:	f7ff ff24 	bl	80028cc <LL_ADC_IsEnabled>
 8002a84:	4604      	mov	r4, r0
 8002a86:	486e      	ldr	r0, [pc, #440]	; (8002c40 <HAL_ADC_Init+0x2d8>)
 8002a88:	f7ff ff20 	bl	80028cc <LL_ADC_IsEnabled>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4323      	orrs	r3, r4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e008      	b.n	8002aae <HAL_ADC_Init+0x146>
 8002a9c:	4869      	ldr	r0, [pc, #420]	; (8002c44 <HAL_ADC_Init+0x2dc>)
 8002a9e:	f7ff ff15 	bl	80028cc <LL_ADC_IsEnabled>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aba:	d004      	beq.n	8002ac6 <HAL_ADC_Init+0x15e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a5f      	ldr	r2, [pc, #380]	; (8002c40 <HAL_ADC_Init+0x2d8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_Init+0x162>
 8002ac6:	4a60      	ldr	r2, [pc, #384]	; (8002c48 <HAL_ADC_Init+0x2e0>)
 8002ac8:	e000      	b.n	8002acc <HAL_ADC_Init+0x164>
 8002aca:	4a60      	ldr	r2, [pc, #384]	; (8002c4c <HAL_ADC_Init+0x2e4>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f7ff fd2a 	bl	800252c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7f5b      	ldrb	r3, [r3, #29]
 8002adc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ae8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002aee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d106      	bne.n	8002b14 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	045b      	lsls	r3, r3, #17
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_ADC_Init+0x2e8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff feee 	bl	8002940 <LL_ADC_INJ_IsConversionOngoing>
 8002b64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d17b      	bne.n	8002c64 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d178      	bne.n	8002c64 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b76:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b8e:	f023 0302 	bic.w	r3, r3, #2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d017      	beq.n	8002bd4 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6911      	ldr	r1, [r2, #16]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002bd2:	e013      	b.n	8002bfc <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002be2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d126      	bne.n	8002c54 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c1c:	4311      	orrs	r1, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e015      	b.n	8002c64 <HAL_ADC_Init+0x2fc>
 8002c38:	20007868 	.word	0x20007868
 8002c3c:	053e2d63 	.word	0x053e2d63
 8002c40:	50000100 	.word	0x50000100
 8002c44:	50000400 	.word	0x50000400
 8002c48:	50000300 	.word	0x50000300
 8002c4c:	50000700 	.word	0x50000700
 8002c50:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10c      	bne.n	8002c86 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f023 010f 	bic.w	r1, r3, #15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
 8002c84:	e007      	b.n	8002c96 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 020f 	bic.w	r2, r2, #15
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca6:	e007      	b.n	8002cb8 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	bf00      	nop

08002cc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADC_Start_DMA+0x20>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a57      	ldr	r2, [pc, #348]	; (8002e3c <HAL_ADC_Start_DMA+0x178>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_Start_DMA+0x24>
 8002ce4:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <HAL_ADC_Start_DMA+0x17c>)
 8002ce6:	e000      	b.n	8002cea <HAL_ADC_Start_DMA+0x26>
 8002ce8:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_ADC_Start_DMA+0x180>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fd7e 	bl	80027ec <LL_ADC_GetMultimode>
 8002cf0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fe0f 	bl	800291a <LL_ADC_REG_IsConversionOngoing>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8094 	bne.w	8002e2c <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_Start_DMA+0x4e>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e08f      	b.n	8002e32 <HAL_ADC_Start_DMA+0x16e>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a4a      	ldr	r2, [pc, #296]	; (8002e48 <HAL_ADC_Start_DMA+0x184>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d008      	beq.n	8002d36 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d002      	beq.n	8002d36 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d173      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fcc4 	bl	80036c4 <ADC_Enable>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d166      	bne.n	8002e14 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_ADC_Start_DMA+0x178>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d002      	beq.n	8002d6a <HAL_ADC_Start_DMA+0xa6>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	e001      	b.n	8002d6e <HAL_ADC_Start_DMA+0xaa>
 8002d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d002      	beq.n	8002d7c <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d98:	f023 0206 	bic.w	r2, r3, #6
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60
 8002da0:	e002      	b.n	8002da8 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <HAL_ADC_Start_DMA+0x188>)
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_ADC_Start_DMA+0x18c>)
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <HAL_ADC_Start_DMA+0x190>)
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	221c      	movs	r2, #28
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0210 	orr.w	r2, r2, #16
 8002dde:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3340      	adds	r3, #64	; 0x40
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f001 f850 	bl	8003ea4 <HAL_DMA_Start_IT>
 8002e04:	4603      	mov	r3, r0
 8002e06:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fd70 	bl	80028f2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002e12:	e00d      	b.n	8002e30 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002e1c:	e008      	b.n	8002e30 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e2a:	e001      	b.n	8002e30 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	50000100 	.word	0x50000100
 8002e40:	50000300 	.word	0x50000300
 8002e44:	50000700 	.word	0x50000700
 8002e48:	50000400 	.word	0x50000400
 8002e4c:	080037f1 	.word	0x080037f1
 8002e50:	080038c9 	.word	0x080038c9
 8002e54:	080038e5 	.word	0x080038e5

08002e58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0b6      	sub	sp, #216	; 0xd8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d102      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x24>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f000 bc04 	b.w	8003698 <HAL_ADC_ConfigChannel+0x82c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fd3c 	bl	800291a <LL_ADC_REG_IsConversionOngoing>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 83e8 	bne.w	800367a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f7ff fc1d 	bl	80026f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fd2a 	bl	800291a <LL_ADC_REG_IsConversionOngoing>
 8002ec6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fd36 	bl	8002940 <LL_ADC_INJ_IsConversionOngoing>
 8002ed4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 81d9 	bne.w	8003294 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 81d4 	bne.w	8003294 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ef4:	d10f      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7ff fc24 	bl	800274e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fbcb 	bl	80026aa <LL_ADC_SetSamplingTimeCommonConfig>
 8002f14:	e00e      	b.n	8002f34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f7ff fc13 	bl	800274e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fbbb 	bl	80026aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	08db      	lsrs	r3, r3, #3
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d022      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f66:	f7ff fb15 	bl	8002594 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f7ff fb61 	bl	800263e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x126>
 8002f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x128>
 8002f92:	2300      	movs	r3, #0
 8002f94:	461a      	mov	r2, r3
 8002f96:	f7ff fb6d 	bl	8002674 <LL_ADC_SetOffsetSaturation>
 8002f9a:	e17b      	b.n	8003294 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fb1a 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x15c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fb0f 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	f003 021f 	and.w	r2, r3, #31
 8002fc6:	e01e      	b.n	8003006 <HAL_ADC_ConfigChannel+0x19a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fb04 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e004      	b.n	8003004 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_ADC_ConfigChannel+0x1b2>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	e018      	b.n	8003050 <HAL_ADC_ConfigChannel+0x1e4>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800303a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e004      	b.n	8003050 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003050:	429a      	cmp	r2, r3
 8003052:	d106      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fad3 	bl	8002608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fab7 	bl	80025dc <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <HAL_ADC_ConfigChannel+0x222>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff faac 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	e01e      	b.n	80030cc <HAL_ADC_ConfigChannel+0x260>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff faa1 	bl	80025dc <LL_ADC_GetOffsetChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80030bc:	2320      	movs	r3, #32
 80030be:	e004      	b.n	80030ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80030c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x278>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	e018      	b.n	8003116 <HAL_ADC_ConfigChannel+0x2aa>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e004      	b.n	8003116 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800310c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003116:	429a      	cmp	r2, r3
 8003118:	d106      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2200      	movs	r2, #0
 8003120:	2101      	movs	r1, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fa70 	bl	8002608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fa54 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x2e8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2102      	movs	r1, #2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fa49 	bl	80025dc <LL_ADC_GetOffsetChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	f003 021f 	and.w	r2, r3, #31
 8003152:	e01e      	b.n	8003192 <HAL_ADC_ConfigChannel+0x326>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2102      	movs	r1, #2
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fa3e 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003160:	4603      	mov	r3, r0
 8003162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800317a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e004      	b.n	8003190 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x33e>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0e9b      	lsrs	r3, r3, #26
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	e016      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x36c>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80031ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031d8:	429a      	cmp	r2, r3
 80031da:	d106      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2102      	movs	r1, #2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fa0f 	bl	8002608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2103      	movs	r1, #3
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f9f3 	bl	80025dc <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x3aa>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2103      	movs	r1, #3
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f9e8 	bl	80025dc <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	e017      	b.n	8003246 <HAL_ADC_ConfigChannel+0x3da>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2103      	movs	r1, #3
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f9dd 	bl	80025dc <LL_ADC_GetOffsetChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800322e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003230:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e003      	b.n	8003244 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_ADC_ConfigChannel+0x3f2>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	e011      	b.n	8003282 <HAL_ADC_ConfigChannel+0x416>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800326c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800326e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003276:	2320      	movs	r3, #32
 8003278:	e003      	b.n	8003282 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003282:	429a      	cmp	r2, r3
 8003284:	d106      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2200      	movs	r2, #0
 800328c:	2103      	movs	r1, #3
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f9ba 	bl	8002608 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fb17 	bl	80028cc <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f040 813d 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f7ff fa76 	bl	80027a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4aa2      	ldr	r2, [pc, #648]	; (8003548 <HAL_ADC_ConfigChannel+0x6dc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f040 812e 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x480>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	0e9b      	lsrs	r3, r3, #26
 80032da:	3301      	adds	r3, #1
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e019      	b.n	8003320 <HAL_ADC_ConfigChannel+0x4b4>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e003      	b.n	8003310 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3301      	adds	r3, #1
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2b09      	cmp	r3, #9
 8003318:	bf94      	ite	ls
 800331a:	2301      	movls	r3, #1
 800331c:	2300      	movhi	r3, #0
 800331e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003320:	2b00      	cmp	r3, #0
 8003322:	d079      	beq.n	8003418 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x4d4>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	3301      	adds	r3, #1
 8003338:	069b      	lsls	r3, r3, #26
 800333a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800333e:	e015      	b.n	800336c <HAL_ADC_ConfigChannel+0x500>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800334e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003350:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800335c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	069b      	lsls	r3, r3, #26
 8003368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_ADC_ConfigChannel+0x520>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	e017      	b.n	80033bc <HAL_ADC_ConfigChannel+0x550>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800339a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800339e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e003      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	ea42 0103 	orr.w	r1, r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x576>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	3301      	adds	r3, #1
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	051b      	lsls	r3, r3, #20
 80033e0:	e018      	b.n	8003414 <HAL_ADC_ConfigChannel+0x5a8>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80033fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f003 021f 	and.w	r2, r3, #31
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003414:	430b      	orrs	r3, r1
 8003416:	e07e      	b.n	8003516 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x5c8>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	069b      	lsls	r3, r3, #26
 800342e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003432:	e015      	b.n	8003460 <HAL_ADC_ConfigChannel+0x5f4>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e003      	b.n	8003458 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3301      	adds	r3, #1
 800345a:	069b      	lsls	r3, r3, #26
 800345c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x614>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	e017      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x644>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	61fb      	str	r3, [r7, #28]
  return result;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	ea42 0103 	orr.w	r1, r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x670>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	3301      	adds	r3, #1
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	3b1e      	subs	r3, #30
 80034d4:	051b      	lsls	r3, r3, #20
 80034d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034da:	e01b      	b.n	8003514 <HAL_ADC_ConfigChannel+0x6a8>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	613b      	str	r3, [r7, #16]
  return result;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80034f4:	2320      	movs	r3, #32
 80034f6:	e003      	b.n	8003500 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	f003 021f 	and.w	r2, r3, #31
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	3b1e      	subs	r3, #30
 800350e:	051b      	lsls	r3, r3, #20
 8003510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003514:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351a:	4619      	mov	r1, r3
 800351c:	f7ff f917 	bl	800274e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_ADC_ConfigChannel+0x6e0>)
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80af 	beq.w	800368c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003536:	d004      	beq.n	8003542 <HAL_ADC_ConfigChannel+0x6d6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_ADC_ConfigChannel+0x6e4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10a      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x6ec>
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_ADC_ConfigChannel+0x6e8>)
 8003544:	e009      	b.n	800355a <HAL_ADC_ConfigChannel+0x6ee>
 8003546:	bf00      	nop
 8003548:	407f0000 	.word	0x407f0000
 800354c:	80080000 	.word	0x80080000
 8003550:	50000100 	.word	0x50000100
 8003554:	50000300 	.word	0x50000300
 8003558:	4b51      	ldr	r3, [pc, #324]	; (80036a0 <HAL_ADC_ConfigChannel+0x834>)
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f80c 	bl	8002578 <LL_ADC_GetCommonPathInternalCh>
 8003560:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4e      	ldr	r2, [pc, #312]	; (80036a4 <HAL_ADC_ConfigChannel+0x838>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x70c>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4d      	ldr	r2, [pc, #308]	; (80036a8 <HAL_ADC_ConfigChannel+0x83c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d134      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d12e      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800358c:	d17e      	bne.n	800368c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x736>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a43      	ldr	r2, [pc, #268]	; (80036ac <HAL_ADC_ConfigChannel+0x840>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x73a>
 80035a2:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <HAL_ADC_ConfigChannel+0x844>)
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x73c>
 80035a6:	4a3e      	ldr	r2, [pc, #248]	; (80036a0 <HAL_ADC_ConfigChannel+0x834>)
 80035a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f7fe ffcd 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b8:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_ADC_ConfigChannel+0x848>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	4a3e      	ldr	r2, [pc, #248]	; (80036b8 <HAL_ADC_ConfigChannel+0x84c>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035d2:	e002      	b.n	80035da <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f9      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035e0:	e054      	b.n	800368c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a35      	ldr	r2, [pc, #212]	; (80036bc <HAL_ADC_ConfigChannel+0x850>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d120      	bne.n	800362e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11a      	bne.n	800362e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003600:	d144      	bne.n	800368c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800360a:	d004      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x7aa>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <HAL_ADC_ConfigChannel+0x840>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x7ae>
 8003616:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_ADC_ConfigChannel+0x844>)
 8003618:	e000      	b.n	800361c <HAL_ADC_ConfigChannel+0x7b0>
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_ADC_ConfigChannel+0x834>)
 800361c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f7fe ff93 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800362c:	e02e      	b.n	800368c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <HAL_ADC_ConfigChannel+0x854>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d129      	bne.n	800368c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800363c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d123      	bne.n	800368c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_ADC_ConfigChannel+0x840>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01e      	beq.n	800368c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003656:	d004      	beq.n	8003662 <HAL_ADC_ConfigChannel+0x7f6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <HAL_ADC_ConfigChannel+0x840>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x7fa>
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_ADC_ConfigChannel+0x844>)
 8003664:	e000      	b.n	8003668 <HAL_ADC_ConfigChannel+0x7fc>
 8003666:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_ADC_ConfigChannel+0x834>)
 8003668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800366c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7fe ff6d 	bl	8002552 <LL_ADC_SetCommonPathInternalCh>
 8003678:	e008      	b.n	800368c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003694:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003698:	4618      	mov	r0, r3
 800369a:	37d8      	adds	r7, #216	; 0xd8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	50000700 	.word	0x50000700
 80036a4:	c3210000 	.word	0xc3210000
 80036a8:	90c00010 	.word	0x90c00010
 80036ac:	50000100 	.word	0x50000100
 80036b0:	50000300 	.word	0x50000300
 80036b4:	20007868 	.word	0x20007868
 80036b8:	053e2d63 	.word	0x053e2d63
 80036bc:	c7520000 	.word	0xc7520000
 80036c0:	cb840000 	.word	0xcb840000

080036c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff f8f9 	bl	80028cc <LL_ADC_IsEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d176      	bne.n	80037ce <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <ADC_Enable+0x114>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e062      	b.n	80037d0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f8c8 	bl	80028a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371c:	d004      	beq.n	8003728 <ADC_Enable+0x64>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <ADC_Enable+0x118>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <ADC_Enable+0x68>
 8003728:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <ADC_Enable+0x11c>)
 800372a:	e000      	b.n	800372e <ADC_Enable+0x6a>
 800372c:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <ADC_Enable+0x120>)
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe ff22 	bl	8002578 <LL_ADC_GetCommonPathInternalCh>
 8003734:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800373a:	2b00      	cmp	r3, #0
 800373c:	d013      	beq.n	8003766 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <ADC_Enable+0x124>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	099b      	lsrs	r3, r3, #6
 8003744:	4a29      	ldr	r2, [pc, #164]	; (80037ec <ADC_Enable+0x128>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003758:	e002      	b.n	8003760 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3b01      	subs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003766:	f7fe fed5 	bl	8002514 <HAL_GetTick>
 800376a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376c:	e028      	b.n	80037c0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff f8aa 	bl	80028cc <LL_ADC_IsEnabled>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f88e 	bl	80028a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003788:	f7fe fec4 	bl	8002514 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d914      	bls.n	80037c0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d00d      	beq.n	80037c0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	f043 0210 	orr.w	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d1cf      	bne.n	800376e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	8000003f 	.word	0x8000003f
 80037dc:	50000100 	.word	0x50000100
 80037e0:	50000300 	.word	0x50000300
 80037e4:	50000700 	.word	0x50000700
 80037e8:	20007868 	.word	0x20007868
 80037ec:	053e2d63 	.word	0x053e2d63

080037f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d14b      	bne.n	80038a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d021      	beq.n	8003868 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe ff51 	bl	80026d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d032      	beq.n	800389a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d12b      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11f      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	65da      	str	r2, [r3, #92]	; 0x5c
 8003866:	e018      	b.n	800389a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d111      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7fe fa9e 	bl	8001ddc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038a0:	e00e      	b.n	80038c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fad2 	bl	8002e58 <HAL_ADC_ErrorCallback>
}
 80038b4:	e004      	b.n	80038c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7fe f9f2 	bl	8001cc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff faa4 	bl	8002e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <LL_ADC_IsEnabled>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <LL_ADC_IsEnabled+0x18>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <LL_ADC_IsEnabled+0x1a>
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_ADC_REG_IsConversionOngoing>:
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b04      	cmp	r3, #4
 8003950:	d101      	bne.n	8003956 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b0a1      	sub	sp, #132	; 0x84
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800397e:	2302      	movs	r3, #2
 8003980:	e0cb      	b.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800398a:	2300      	movs	r3, #0
 800398c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800398e:	2300      	movs	r3, #0
 8003990:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399a:	d102      	bne.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800399c:	4b61      	ldr	r3, [pc, #388]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	e001      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0aa      	b.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ffb9 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 80039cc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff ffb3 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 808c 	bne.w	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80039e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 8088 	bne.w	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f0:	d004      	beq.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4b      	ldr	r2, [pc, #300]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80039fc:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80039fe:	e000      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003a00:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003a02:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d041      	beq.n	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a1e:	035b      	lsls	r3, r3, #13
 8003a20:	430b      	orrs	r3, r1
 8003a22:	431a      	orrs	r2, r3
 8003a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a30:	d004      	beq.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10f      	bne.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003a3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a40:	f7ff ff6a 	bl	8003918 <LL_ADC_IsEnabled>
 8003a44:	4604      	mov	r4, r0
 8003a46:	4837      	ldr	r0, [pc, #220]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003a48:	f7ff ff66 	bl	8003918 <LL_ADC_IsEnabled>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4323      	orrs	r3, r4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e008      	b.n	8003a6e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003a5c:	4834      	ldr	r0, [pc, #208]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003a5e:	f7ff ff5b 	bl	8003918 <LL_ADC_IsEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d04c      	beq.n	8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a7a:	f023 030f 	bic.w	r3, r3, #15
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	6811      	ldr	r1, [r2, #0]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	6892      	ldr	r2, [r2, #8]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a8e:	e03d      	b.n	8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa4:	d004      	beq.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10f      	bne.n	8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003ab0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ab4:	f7ff ff30 	bl	8003918 <LL_ADC_IsEnabled>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	481a      	ldr	r0, [pc, #104]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003abc:	f7ff ff2c 	bl	8003918 <LL_ADC_IsEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4323      	orrs	r3, r4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e008      	b.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003ad0:	4817      	ldr	r0, [pc, #92]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003ad2:	f7ff ff21 	bl	8003918 <LL_ADC_IsEnabled>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003af4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003af6:	e009      	b.n	8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b0a:	e000      	b.n	8003b0e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3784      	adds	r7, #132	; 0x84
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	bf00      	nop
 8003b24:	50000100 	.word	0x50000100
 8003b28:	50000300 	.word	0x50000300
 8003b2c:	50000700 	.word	0x50000700
 8003b30:	50000400 	.word	0x50000400

08003b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	60d3      	str	r3, [r2, #12]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <__NVIC_GetPriorityGrouping+0x18>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0307 	and.w	r3, r3, #7
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	db0b      	blt.n	8003bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <__NVIC_EnableIRQ+0x38>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2001      	movs	r0, #1
 8003bba:	fa00 f202 	lsl.w	r2, r0, r2
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100

08003bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db0a      	blt.n	8003bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	490c      	ldr	r1, [pc, #48]	; (8003c20 <__NVIC_SetPriority+0x4c>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bfc:	e00a      	b.n	8003c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4908      	ldr	r1, [pc, #32]	; (8003c24 <__NVIC_SetPriority+0x50>)
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	0112      	lsls	r2, r2, #4
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	440b      	add	r3, r1
 8003c12:	761a      	strb	r2, [r3, #24]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000e100 	.word	0xe000e100
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f1c3 0307 	rsb	r3, r3, #7
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	bf28      	it	cs
 8003c46:	2304      	movcs	r3, #4
 8003c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d902      	bls.n	8003c58 <NVIC_EncodePriority+0x30>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3b03      	subs	r3, #3
 8003c56:	e000      	b.n	8003c5a <NVIC_EncodePriority+0x32>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c70:	f04f 31ff 	mov.w	r1, #4294967295
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	43d9      	mvns	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	4313      	orrs	r3, r2
         );
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca0:	d301      	bcc.n	8003ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00f      	b.n	8003cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <SysTick_Config+0x40>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cae:	210f      	movs	r1, #15
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	f7ff ff8e 	bl	8003bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <SysTick_Config+0x40>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <SysTick_Config+0x40>)
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000e010 	.word	0xe000e010

08003cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff29 	bl	8003b34 <__NVIC_SetPriorityGrouping>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf8:	f7ff ff40 	bl	8003b7c <__NVIC_GetPriorityGrouping>
 8003cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f7ff ff90 	bl	8003c28 <NVIC_EncodePriority>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff ff5f 	bl	8003bd4 <__NVIC_SetPriority>
}
 8003d16:	bf00      	nop
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	4603      	mov	r3, r0
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff33 	bl	8003b98 <__NVIC_EnableIRQ>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ffa4 	bl	8003c90 <SysTick_Config>
 8003d48:	4603      	mov	r3, r0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08d      	b.n	8003e82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_DMA_Init+0x138>)
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d80f      	bhi.n	8003d92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <HAL_DMA_Init+0x13c>)
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4a45      	ldr	r2, [pc, #276]	; (8003e94 <HAL_DMA_Init+0x140>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	009a      	lsls	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a42      	ldr	r2, [pc, #264]	; (8003e98 <HAL_DMA_Init+0x144>)
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d90:	e00e      	b.n	8003db0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_DMA_Init+0x148>)
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4a3d      	ldr	r2, [pc, #244]	; (8003e94 <HAL_DMA_Init+0x140>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	009a      	lsls	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <HAL_DMA_Init+0x14c>)
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9b6 	bl	8004174 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e10:	d102      	bne.n	8003e18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e2c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <HAL_DMA_Init+0x104>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d80c      	bhi.n	8003e58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9d6 	bl	80041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	e008      	b.n	8003e6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40020407 	.word	0x40020407
 8003e90:	bffdfff8 	.word	0xbffdfff8
 8003e94:	cccccccd 	.word	0xcccccccd
 8003e98:	40020000 	.word	0x40020000
 8003e9c:	bffdfbf8 	.word	0xbffdfbf8
 8003ea0:	40020400 	.word	0x40020400

08003ea4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_DMA_Start_IT+0x20>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e066      	b.n	8003f92 <HAL_DMA_Start_IT+0xee>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d155      	bne.n	8003f84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f8fb 	bl	80040f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 020e 	orr.w	r2, r2, #14
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e00f      	b.n	8003f3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 020a 	orr.w	r2, r2, #10
 8003f3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e005      	b.n	8003f90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	2204      	movs	r2, #4
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d026      	beq.n	8004014 <HAL_DMA_IRQHandler+0x7a>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d021      	beq.n	8004014 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0204 	bic.w	r2, r2, #4
 8003fec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f003 021f 	and.w	r2, r3, #31
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2104      	movs	r1, #4
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	2b00      	cmp	r3, #0
 8004008:	d071      	beq.n	80040ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004012:	e06c      	b.n	80040ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	2202      	movs	r2, #2
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d02e      	beq.n	8004086 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d029      	beq.n	8004086 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 020a 	bic.w	r2, r2, #10
 800404e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2102      	movs	r1, #2
 8004066:	fa01 f202 	lsl.w	r2, r1, r2
 800406a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d038      	beq.n	80040ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004084:	e033      	b.n	80040ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2208      	movs	r2, #8
 8004090:	409a      	lsls	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02a      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d025      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 020e 	bic.w	r2, r2, #14
 80040b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2101      	movs	r1, #1
 80040c2:	fa01 f202 	lsl.w	r2, r1, r2
 80040c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
}
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800410e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f003 021f 	and.w	r2, r3, #31
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f202 	lsl.w	r2, r1, r2
 8004134:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b10      	cmp	r3, #16
 8004144:	d108      	bne.n	8004158 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004156:	e007      	b.n	8004168 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b16      	ldr	r3, [pc, #88]	; (80041dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004184:	429a      	cmp	r2, r3
 8004186:	d802      	bhi.n	800418e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e001      	b.n	8004192 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004190:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3b08      	subs	r3, #8
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	089b      	lsrs	r3, r3, #2
 80041ae:	009a      	lsls	r2, r3, #2
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80041be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2201      	movs	r2, #1
 80041c8:	409a      	lsls	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40020407 	.word	0x40020407
 80041e0:	40020800 	.word	0x40020800
 80041e4:	40020820 	.word	0x40020820
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	40020880 	.word	0x40020880

080041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a08      	ldr	r2, [pc, #32]	; (8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004212:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2201      	movs	r2, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	1000823f 	.word	0x1000823f
 8004234:	40020940 	.word	0x40020940

08004238 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e033      	b.n	80042b2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fe f808 	bl	8002274 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f854 	bl	8004318 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f822 	bl	80042ba <FMAC_Reset>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10c      	bne.n	8004296 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	f043 0210 	orr.w	r2, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	22a0      	movs	r2, #160	; 0xa0
 800428c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e008      	b.n	80042a8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c2:	f7fe f927 	bl	8002514 <HAL_GetTick>
 80042c6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042d6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80042d8:	e00f      	b.n	80042fa <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80042da:	f7fe f91b 	bl	8002514 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042e8:	d907      	bls.n	80042fa <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e00a      	b.n	8004310 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e8      	bne.n	80042da <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f807 	bl	8004334 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f81b 	bl	8004362 <FMAC_ResetOutputStateAndDataPointers>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800439e:	e15a      	b.n	8004656 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 814c 	beq.w	8004650 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d005      	beq.n	80043d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d130      	bne.n	8004432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004406:	2201      	movs	r2, #1
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0201 	and.w	r2, r3, #1
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b03      	cmp	r3, #3
 800443c:	d017      	beq.n	800446e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d123      	bne.n	80044c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	08da      	lsrs	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3208      	adds	r2, #8
 8004482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	220f      	movs	r2, #15
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	08da      	lsrs	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3208      	adds	r2, #8
 80044bc:	6939      	ldr	r1, [r7, #16]
 80044be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2203      	movs	r2, #3
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0203 	and.w	r2, r3, #3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a6 	beq.w	8004650 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004504:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <HAL_GPIO_Init+0x2e4>)
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	4a5a      	ldr	r2, [pc, #360]	; (8004674 <HAL_GPIO_Init+0x2e4>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6613      	str	r3, [r2, #96]	; 0x60
 8004510:	4b58      	ldr	r3, [pc, #352]	; (8004674 <HAL_GPIO_Init+0x2e4>)
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800451c:	4a56      	ldr	r2, [pc, #344]	; (8004678 <HAL_GPIO_Init+0x2e8>)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	3302      	adds	r3, #2
 8004524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	220f      	movs	r2, #15
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004546:	d01f      	beq.n	8004588 <HAL_GPIO_Init+0x1f8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a4c      	ldr	r2, [pc, #304]	; (800467c <HAL_GPIO_Init+0x2ec>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d019      	beq.n	8004584 <HAL_GPIO_Init+0x1f4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a4b      	ldr	r2, [pc, #300]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <HAL_GPIO_Init+0x1f0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a4a      	ldr	r2, [pc, #296]	; (8004684 <HAL_GPIO_Init+0x2f4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00d      	beq.n	800457c <HAL_GPIO_Init+0x1ec>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a49      	ldr	r2, [pc, #292]	; (8004688 <HAL_GPIO_Init+0x2f8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <HAL_GPIO_Init+0x1e8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a48      	ldr	r2, [pc, #288]	; (800468c <HAL_GPIO_Init+0x2fc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_GPIO_Init+0x1e4>
 8004570:	2305      	movs	r3, #5
 8004572:	e00a      	b.n	800458a <HAL_GPIO_Init+0x1fa>
 8004574:	2306      	movs	r3, #6
 8004576:	e008      	b.n	800458a <HAL_GPIO_Init+0x1fa>
 8004578:	2304      	movs	r3, #4
 800457a:	e006      	b.n	800458a <HAL_GPIO_Init+0x1fa>
 800457c:	2303      	movs	r3, #3
 800457e:	e004      	b.n	800458a <HAL_GPIO_Init+0x1fa>
 8004580:	2302      	movs	r3, #2
 8004582:	e002      	b.n	800458a <HAL_GPIO_Init+0x1fa>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_GPIO_Init+0x1fa>
 8004588:	2300      	movs	r3, #0
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	f002 0203 	and.w	r2, r2, #3
 8004590:	0092      	lsls	r2, r2, #2
 8004592:	4093      	lsls	r3, r2
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800459a:	4937      	ldr	r1, [pc, #220]	; (8004678 <HAL_GPIO_Init+0x2e8>)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	3302      	adds	r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_GPIO_Init+0x300>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045cc:	4a30      	ldr	r2, [pc, #192]	; (8004690 <HAL_GPIO_Init+0x300>)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_GPIO_Init+0x300>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045f6:	4a26      	ldr	r2, [pc, #152]	; (8004690 <HAL_GPIO_Init+0x300>)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <HAL_GPIO_Init+0x300>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	43db      	mvns	r3, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_GPIO_Init+0x300>)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004626:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <HAL_GPIO_Init+0x300>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <HAL_GPIO_Init+0x300>)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	3301      	adds	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f ae9d 	bne.w	80043a0 <HAL_GPIO_Init+0x10>
  }
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40021000 	.word	0x40021000
 8004678:	40010000 	.word	0x40010000
 800467c:	48000400 	.word	0x48000400
 8004680:	48000800 	.word	0x48000800
 8004684:	48000c00 	.word	0x48000c00
 8004688:	48001000 	.word	0x48001000
 800468c:	48001400 	.word	0x48001400
 8004690:	40010400 	.word	0x40010400

08004694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d141      	bne.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046a2:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d131      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b0:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	4a46      	ldr	r2, [pc, #280]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046c8:	4a41      	ldr	r2, [pc, #260]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046d0:	4b40      	ldr	r3, [pc, #256]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2232      	movs	r2, #50	; 0x32
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	4a3f      	ldr	r2, [pc, #252]	; (80047d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	0c9b      	lsrs	r3, r3, #18
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e6:	e002      	b.n	80046ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ee:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d102      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004702:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d158      	bne.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e057      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004714:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471a:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004724:	e04d      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472c:	d141      	bne.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d131      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800473c:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004742:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800475a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800475c:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2232      	movs	r2, #50	; 0x32
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	0c9b      	lsrs	r3, r3, #18
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004772:	e002      	b.n	800477a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3b01      	subs	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004786:	d102      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f2      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479a:	d112      	bne.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e011      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047b0:	e007      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ba:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40007000 	.word	0x40007000
 80047d4:	20007868 	.word	0x20007868
 80047d8:	431bde83 	.word	0x431bde83

080047dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ea:	6093      	str	r3, [r2, #8]
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40007000 	.word	0x40007000

080047fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e2fe      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d075      	beq.n	8004906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481a:	4b97      	ldr	r3, [pc, #604]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004824:	4b94      	ldr	r3, [pc, #592]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d102      	bne.n	800483a <HAL_RCC_OscConfig+0x3e>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d002      	beq.n	8004840 <HAL_RCC_OscConfig+0x44>
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	4b8d      	ldr	r3, [pc, #564]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d05b      	beq.n	8004904 <HAL_RCC_OscConfig+0x108>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d157      	bne.n	8004904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e2d9      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d106      	bne.n	8004870 <HAL_RCC_OscConfig+0x74>
 8004862:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a84      	ldr	r2, [pc, #528]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e01d      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x98>
 800487a:	4b7f      	ldr	r3, [pc, #508]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7e      	ldr	r2, [pc, #504]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b7c      	ldr	r3, [pc, #496]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7b      	ldr	r2, [pc, #492]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004894:	4b78      	ldr	r3, [pc, #480]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a77      	ldr	r2, [pc, #476]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800489a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b75      	ldr	r3, [pc, #468]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a74      	ldr	r2, [pc, #464]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd fe2e 	bl	8002514 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd fe2a 	bl	8002514 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e29e      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ce:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0xc0>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd fe1a 	bl	8002514 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fd fe16 	bl	8002514 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e28a      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048f6:	4b60      	ldr	r3, [pc, #384]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0xe8>
 8004902:	e000      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d075      	beq.n	80049fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004912:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491c:	4b56      	ldr	r3, [pc, #344]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d102      	bne.n	8004932 <HAL_RCC_OscConfig+0x136>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d002      	beq.n	8004938 <HAL_RCC_OscConfig+0x13c>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11f      	bne.n	8004978 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	4b4f      	ldr	r3, [pc, #316]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_OscConfig+0x154>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e25d      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b49      	ldr	r3, [pc, #292]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	4946      	ldr	r1, [pc, #280]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004964:	4b45      	ldr	r3, [pc, #276]	; (8004a7c <HAL_RCC_OscConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fd fd87 	bl	800247c <HAL_InitTick>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d043      	beq.n	80049fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e249      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d023      	beq.n	80049c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004980:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd fdc2 	bl	8002514 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fd fdbe 	bl	8002514 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e232      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a6:	4b34      	ldr	r3, [pc, #208]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b2:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	492d      	ldr	r1, [pc, #180]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
 80049c6:	e01a      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c8:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd fd9e 	bl	8002514 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fd fd9a 	bl	8002514 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e20e      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ee:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1e0>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d041      	beq.n	8004a8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a12:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a18:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fd fd77 	bl	8002514 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fd73 	bl	8002514 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1e7      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ef      	beq.n	8004a2a <HAL_RCC_OscConfig+0x22e>
 8004a4a:	e020      	b.n	8004a8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd fd5a 	bl	8002514 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a62:	e00d      	b.n	8004a80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fd fd56 	bl	8002514 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d906      	bls.n	8004a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e1ca      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	2000786c 	.word	0x2000786c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a80:	4b8c      	ldr	r3, [pc, #560]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ea      	bne.n	8004a64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a6 	beq.w	8004be8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aa0:	4b84      	ldr	r3, [pc, #528]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2b4>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2b6>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b7f      	ldr	r3, [pc, #508]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	4a7e      	ldr	r2, [pc, #504]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac2:	4b7c      	ldr	r3, [pc, #496]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad2:	4b79      	ldr	r3, [pc, #484]	; (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ade:	4b76      	ldr	r3, [pc, #472]	; (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a75      	ldr	r2, [pc, #468]	; (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fd fd13 	bl	8002514 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fd fd0f 	bl	8002514 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e183      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b04:	4b6c      	ldr	r3, [pc, #432]	; (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d108      	bne.n	8004b2a <HAL_RCC_OscConfig+0x32e>
 8004b18:	4b66      	ldr	r3, [pc, #408]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	4a65      	ldr	r2, [pc, #404]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b28:	e024      	b.n	8004b74 <HAL_RCC_OscConfig+0x378>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d110      	bne.n	8004b54 <HAL_RCC_OscConfig+0x358>
 8004b32:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	4a5e      	ldr	r2, [pc, #376]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b42:	4b5c      	ldr	r3, [pc, #368]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	4a5a      	ldr	r2, [pc, #360]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b52:	e00f      	b.n	8004b74 <HAL_RCC_OscConfig+0x378>
 8004b54:	4b57      	ldr	r3, [pc, #348]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	4a56      	ldr	r2, [pc, #344]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	4a52      	ldr	r2, [pc, #328]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d016      	beq.n	8004baa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fd fcca 	bl	8002514 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fd fcc6 	bl	8002514 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e138      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ed      	beq.n	8004b84 <HAL_RCC_OscConfig+0x388>
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fd fcb3 	bl	8002514 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fd fcaf 	bl	8002514 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e121      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bc8:	4b3a      	ldr	r3, [pc, #232]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ed      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	4a34      	ldr	r2, [pc, #208]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03c      	beq.n	8004c6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c02:	4a2c      	ldr	r2, [pc, #176]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fc82 	bl	8002514 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c14:	f7fd fc7e 	bl	8002514 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0f2      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c26:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ef      	beq.n	8004c14 <HAL_RCC_OscConfig+0x418>
 8004c34:	e01b      	b.n	8004c6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c36:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7fd fc65 	bl	8002514 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4e:	f7fd fc61 	bl	8002514 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0d5      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c60:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ef      	bne.n	8004c4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80c9 	beq.w	8004e0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	f000 8083 	beq.w	8004d8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d15e      	bne.n	8004d4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fd fc3b 	bl	8002514 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca0:	e00c      	b.n	8004cbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fd fc37 	bl	8002514 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d905      	bls.n	8004cbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0ab      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ec      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc8:	4b52      	ldr	r3, [pc, #328]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b52      	ldr	r3, [pc, #328]	; (8004e18 <HAL_RCC_OscConfig+0x61c>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6a11      	ldr	r1, [r2, #32]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0112      	lsls	r2, r2, #4
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ce2:	0212      	lsls	r2, r2, #8
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0552      	lsls	r2, r2, #21
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cf6:	0852      	lsrs	r2, r2, #1
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0652      	lsls	r2, r2, #25
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d02:	06d2      	lsls	r2, r2, #27
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4943      	ldr	r1, [pc, #268]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a40      	ldr	r2, [pc, #256]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b3e      	ldr	r3, [pc, #248]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a3d      	ldr	r2, [pc, #244]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd fbf6 	bl	8002514 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd fbf2 	bl	8002514 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e066      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x530>
 8004d4a:	e05e      	b.n	8004e0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fbdc 	bl	8002514 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fbd8 	bl	8002514 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e04c      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d7e:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	4924      	ldr	r1, [pc, #144]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d84:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <HAL_RCC_OscConfig+0x620>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	60cb      	str	r3, [r1, #12]
 8004d8a:	e03e      	b.n	8004e0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e039      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0203 	and.w	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d12c      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	3b01      	subs	r3, #1
 8004db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d123      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d11b      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d113      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	3b01      	subs	r3, #1
 8004dec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d109      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d001      	beq.n	8004e0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	019f800c 	.word	0x019f800c
 8004e1c:	feeefffc 	.word	0xfeeefffc

08004e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e11e      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d910      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b8e      	ldr	r3, [pc, #568]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 020f 	bic.w	r2, r3, #15
 8004e4e:	498c      	ldr	r1, [pc, #560]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b8a      	ldr	r3, [pc, #552]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e106      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d073      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d129      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7c:	4b81      	ldr	r3, [pc, #516]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0f4      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e8c:	f000 f964 	bl	8005158 <RCC_GetSysClockFreqFromPLLSource>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4a7c      	ldr	r2, [pc, #496]	; (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d93f      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e9a:	4b7a      	ldr	r3, [pc, #488]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d033      	beq.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12f      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eba:	4b72      	ldr	r3, [pc, #456]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec2:	4a70      	ldr	r2, [pc, #448]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e024      	b.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0c6      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee8:	4b66      	ldr	r3, [pc, #408]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0be      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ef8:	f000 f8ce 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4a61      	ldr	r2, [pc, #388]	; (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d909      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f06:	4b5f      	ldr	r3, [pc, #380]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0e:	4a5d      	ldr	r2, [pc, #372]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f16:	2380      	movs	r3, #128	; 0x80
 8004f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b5a      	ldr	r3, [pc, #360]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4957      	ldr	r1, [pc, #348]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fd faf2 	bl	8002514 <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7fd faee 	bl	8002514 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e095      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a42      	ldr	r2, [pc, #264]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f8c:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f94:	4a3b      	ldr	r2, [pc, #236]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4936      	ldr	r1, [pc, #216]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fb6:	4b33      	ldr	r3, [pc, #204]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4a32      	ldr	r2, [pc, #200]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d21d      	bcs.n	800500c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 020f 	bic.w	r2, r3, #15
 8004fd8:	4929      	ldr	r1, [pc, #164]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fe0:	f7fd fa98 	bl	8002514 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fd fa94 	bl	8002514 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e03b      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b20      	ldr	r3, [pc, #128]	; (8005080 <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d1ed      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4917      	ldr	r1, [pc, #92]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	490f      	ldr	r1, [pc, #60]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800504a:	f000 f825 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800504e:	4602      	mov	r2, r0
 8005050:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	490c      	ldr	r1, [pc, #48]	; (800508c <HAL_RCC_ClockConfig+0x26c>)
 800505c:	5ccb      	ldrb	r3, [r1, r3]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x270>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_RCC_ClockConfig+0x274>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fd fa04 	bl	800247c <HAL_InitTick>
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	04c4b400 	.word	0x04c4b400
 800508c:	08006098 	.word	0x08006098
 8005090:	20007868 	.word	0x20007868
 8005094:	2000786c 	.word	0x2000786c

08005098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800509e:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d102      	bne.n	80050b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050aa:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e047      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d102      	bne.n	80050c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050bc:	4b25      	ldr	r3, [pc, #148]	; (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e03e      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050c2:	4b23      	ldr	r3, [pc, #140]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b0c      	cmp	r3, #12
 80050cc:	d136      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ce:	4b20      	ldr	r3, [pc, #128]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3301      	adds	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ec:	4a19      	ldr	r2, [pc, #100]	; (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a16      	ldr	r2, [pc, #88]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f6:	68d2      	ldr	r2, [r2, #12]
 80050f8:	0a12      	lsrs	r2, r2, #8
 80050fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	617b      	str	r3, [r7, #20]
      break;
 8005104:	e00c      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005106:	4a13      	ldr	r2, [pc, #76]	; (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	4a10      	ldr	r2, [pc, #64]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	0a12      	lsrs	r2, r2, #8
 8005114:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
      break;
 800511e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	0e5b      	lsrs	r3, r3, #25
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e001      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005140:	693b      	ldr	r3, [r7, #16]
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	00f42400 	.word	0x00f42400

08005158 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	3301      	adds	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d10c      	bne.n	8005196 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005186:	68d2      	ldr	r2, [r2, #12]
 8005188:	0a12      	lsrs	r2, r2, #8
 800518a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	617b      	str	r3, [r7, #20]
    break;
 8005194:	e00c      	b.n	80051b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005196:	4a11      	ldr	r2, [pc, #68]	; (80051dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	4a0e      	ldr	r2, [pc, #56]	; (80051d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051a0:	68d2      	ldr	r2, [r2, #12]
 80051a2:	0a12      	lsrs	r2, r2, #8
 80051a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
    break;
 80051ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051b0:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	0e5b      	lsrs	r3, r3, #25
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	3301      	adds	r3, #1
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051ca:	687b      	ldr	r3, [r7, #4]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40021000 	.word	0x40021000
 80051dc:	00f42400 	.word	0x00f42400

080051e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051e8:	2300      	movs	r3, #0
 80051ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051ec:	2300      	movs	r3, #0
 80051ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8098 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fe:	2300      	movs	r3, #0
 8005200:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005202:	4b43      	ldr	r3, [pc, #268]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b40      	ldr	r3, [pc, #256]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	4a3f      	ldr	r2, [pc, #252]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6593      	str	r3, [r2, #88]	; 0x58
 800521a:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522a:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a39      	ldr	r2, [pc, #228]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005236:	f7fd f96d 	bl	8002514 <HAL_GetTick>
 800523a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800523c:	e009      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fd f969 	bl	8002514 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d902      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	74fb      	strb	r3, [r7, #19]
        break;
 8005250:	e005      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005252:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0ef      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d159      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005264:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01e      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	d019      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005280:	4b23      	ldr	r3, [pc, #140]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fd f929 	bl	8002514 <HAL_GetTick>
 80052c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c4:	e00b      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fd f925 	bl	8002514 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d902      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	74fb      	strb	r3, [r7, #19]
            break;
 80052dc:	e006      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ec      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005300:	4903      	ldr	r1, [pc, #12]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005308:	e008      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	74bb      	strb	r3, [r7, #18]
 800530e:	e005      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531c:	7c7b      	ldrb	r3, [r7, #17]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005322:	4ba7      	ldr	r3, [pc, #668]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	4aa6      	ldr	r2, [pc, #664]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800533a:	4ba1      	ldr	r3, [pc, #644]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	499d      	ldr	r1, [pc, #628]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535c:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 020c 	bic.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4995      	ldr	r1, [pc, #596]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800537e:	4b90      	ldr	r3, [pc, #576]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	498c      	ldr	r1, [pc, #560]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053a0:	4b87      	ldr	r3, [pc, #540]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	4984      	ldr	r1, [pc, #528]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053c2:	4b7f      	ldr	r3, [pc, #508]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	497b      	ldr	r1, [pc, #492]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053e4:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	4973      	ldr	r1, [pc, #460]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005406:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	496a      	ldr	r1, [pc, #424]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005428:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4962      	ldr	r1, [pc, #392]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800544a:	4b5d      	ldr	r3, [pc, #372]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	4959      	ldr	r1, [pc, #356]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546c:	4b54      	ldr	r3, [pc, #336]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	4951      	ldr	r1, [pc, #324]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548a:	2b00      	cmp	r3, #0
 800548c:	d015      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800548e:	4b4c      	ldr	r3, [pc, #304]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4948      	ldr	r1, [pc, #288]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	d105      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ae:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	4a43      	ldr	r2, [pc, #268]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d015      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	493a      	ldr	r1, [pc, #232]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e4:	d105      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e6:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d015      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054fe:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005504:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	492c      	ldr	r1, [pc, #176]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551c:	d105      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551e:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005528:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d015      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005536:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	491e      	ldr	r1, [pc, #120]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005554:	d105      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005560:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d015      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	4910      	ldr	r1, [pc, #64]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558c:	d105      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005598:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	4902      	ldr	r1, [pc, #8]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	e001      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055c0:	40021000 	.word	0x40021000
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ca:	d105      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a20      	ldr	r2, [pc, #128]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	4918      	ldr	r1, [pc, #96]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d105      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a12      	ldr	r2, [pc, #72]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800560a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800561c:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800561e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562a:	490a      	ldr	r1, [pc, #40]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563a:	d105      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a04      	ldr	r2, [pc, #16]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005646:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005648:	7cbb      	ldrb	r3, [r7, #18]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000

08005658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e049      	b.n	80056fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc fe18 	bl	80022b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f000 f878 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_TIM_SlaveConfigSynchro+0x18>
 800571a:	2302      	movs	r3, #2
 800571c:	e031      	b.n	8005782 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8d5 	bl	80058e0 <TIM_SlaveTimer_SetConfig>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e018      	b.n	8005782 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800576e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a48      	ldr	r2, [pc, #288]	; (80058c0 <TIM_Base_SetConfig+0x134>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d013      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d00f      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a45      	ldr	r2, [pc, #276]	; (80058c4 <TIM_Base_SetConfig+0x138>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00b      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a44      	ldr	r2, [pc, #272]	; (80058c8 <TIM_Base_SetConfig+0x13c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d007      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a43      	ldr	r2, [pc, #268]	; (80058cc <TIM_Base_SetConfig+0x140>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a42      	ldr	r2, [pc, #264]	; (80058d0 <TIM_Base_SetConfig+0x144>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d108      	bne.n	80057de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a37      	ldr	r2, [pc, #220]	; (80058c0 <TIM_Base_SetConfig+0x134>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01f      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ec:	d01b      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a34      	ldr	r2, [pc, #208]	; (80058c4 <TIM_Base_SetConfig+0x138>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d017      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a33      	ldr	r2, [pc, #204]	; (80058c8 <TIM_Base_SetConfig+0x13c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a32      	ldr	r2, [pc, #200]	; (80058cc <TIM_Base_SetConfig+0x140>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00f      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a32      	ldr	r2, [pc, #200]	; (80058d4 <TIM_Base_SetConfig+0x148>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00b      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a31      	ldr	r2, [pc, #196]	; (80058d8 <TIM_Base_SetConfig+0x14c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a30      	ldr	r2, [pc, #192]	; (80058dc <TIM_Base_SetConfig+0x150>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_Base_SetConfig+0x9a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a2b      	ldr	r2, [pc, #172]	; (80058d0 <TIM_Base_SetConfig+0x144>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d108      	bne.n	8005838 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <TIM_Base_SetConfig+0x134>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <TIM_Base_SetConfig+0x100>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a19      	ldr	r2, [pc, #100]	; (80058cc <TIM_Base_SetConfig+0x140>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00f      	beq.n	800588c <TIM_Base_SetConfig+0x100>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <TIM_Base_SetConfig+0x148>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00b      	beq.n	800588c <TIM_Base_SetConfig+0x100>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <TIM_Base_SetConfig+0x14c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <TIM_Base_SetConfig+0x100>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a17      	ldr	r2, [pc, #92]	; (80058dc <TIM_Base_SetConfig+0x150>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_Base_SetConfig+0x100>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <TIM_Base_SetConfig+0x144>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d103      	bne.n	8005894 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d105      	bne.n	80058b2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	611a      	str	r2, [r3, #16]
  }
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40000800 	.word	0x40000800
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40015000 	.word	0x40015000
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	f023 0307 	bic.w	r3, r3, #7
 8005916:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4a4e      	ldr	r2, [pc, #312]	; (8005a68 <TIM_SlaveTimer_SetConfig+0x188>)
 8005930:	4293      	cmp	r3, r2
 8005932:	f000 8092 	beq.w	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 8005936:	4a4c      	ldr	r2, [pc, #304]	; (8005a68 <TIM_SlaveTimer_SetConfig+0x188>)
 8005938:	4293      	cmp	r3, r2
 800593a:	f200 808b 	bhi.w	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 800593e:	4a4b      	ldr	r2, [pc, #300]	; (8005a6c <TIM_SlaveTimer_SetConfig+0x18c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	f000 808a 	beq.w	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 8005946:	4a49      	ldr	r2, [pc, #292]	; (8005a6c <TIM_SlaveTimer_SetConfig+0x18c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	f200 8083 	bhi.w	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 800594e:	4a48      	ldr	r2, [pc, #288]	; (8005a70 <TIM_SlaveTimer_SetConfig+0x190>)
 8005950:	4293      	cmp	r3, r2
 8005952:	f000 8082 	beq.w	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 8005956:	4a46      	ldr	r2, [pc, #280]	; (8005a70 <TIM_SlaveTimer_SetConfig+0x190>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d87b      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 800595c:	4a45      	ldr	r2, [pc, #276]	; (8005a74 <TIM_SlaveTimer_SetConfig+0x194>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d07b      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 8005962:	4a44      	ldr	r2, [pc, #272]	; (8005a74 <TIM_SlaveTimer_SetConfig+0x194>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d875      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 8005968:	4a43      	ldr	r2, [pc, #268]	; (8005a78 <TIM_SlaveTimer_SetConfig+0x198>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d075      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 800596e:	4a42      	ldr	r2, [pc, #264]	; (8005a78 <TIM_SlaveTimer_SetConfig+0x198>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d86f      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 8005974:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005978:	d06f      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 800597a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800597e:	d869      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 8005980:	2b70      	cmp	r3, #112	; 0x70
 8005982:	d01a      	beq.n	80059ba <TIM_SlaveTimer_SetConfig+0xda>
 8005984:	2b70      	cmp	r3, #112	; 0x70
 8005986:	d865      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 8005988:	2b60      	cmp	r3, #96	; 0x60
 800598a:	d059      	beq.n	8005a40 <TIM_SlaveTimer_SetConfig+0x160>
 800598c:	2b60      	cmp	r3, #96	; 0x60
 800598e:	d861      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 8005990:	2b50      	cmp	r3, #80	; 0x50
 8005992:	d04b      	beq.n	8005a2c <TIM_SlaveTimer_SetConfig+0x14c>
 8005994:	2b50      	cmp	r3, #80	; 0x50
 8005996:	d85d      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d019      	beq.n	80059d0 <TIM_SlaveTimer_SetConfig+0xf0>
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d859      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 80059a0:	2b30      	cmp	r3, #48	; 0x30
 80059a2:	d05a      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 80059a4:	2b30      	cmp	r3, #48	; 0x30
 80059a6:	d855      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d056      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d851      	bhi.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d052      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d050      	beq.n	8005a5a <TIM_SlaveTimer_SetConfig+0x17a>
 80059b8:	e04c      	b.n	8005a54 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80059ca:	f000 f8b6 	bl	8005b3a <TIM_ETR_SetConfig>
      break;
 80059ce:	e045      	b.n	8005a5c <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	d004      	beq.n	80059e2 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80059dc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80059e0:	d101      	bne.n	80059e6 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e03b      	b.n	8005a5e <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0201 	bic.w	r2, r2, #1
 80059fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	621a      	str	r2, [r3, #32]
      break;
 8005a2a:	e017      	b.n	8005a5c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f000 f81f 	bl	8005a7c <TIM_TI1_ConfigInputStage>
      break;
 8005a3e:	e00d      	b.n	8005a5c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f000 f844 	bl	8005ada <TIM_TI2_ConfigInputStage>
      break;
 8005a52:	e003      	b.n	8005a5c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
      break;
 8005a58:	e000      	b.n	8005a5c <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8005a5a:	bf00      	nop
  }

  return status;
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	00100070 	.word	0x00100070
 8005a6c:	00100050 	.word	0x00100050
 8005a70:	00100040 	.word	0x00100040
 8005a74:	00100030 	.word	0x00100030
 8005a78:	00100020 	.word	0x00100020

08005a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0201 	bic.w	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 030a 	bic.w	r3, r3, #10
 8005ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b087      	sub	sp, #28
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f023 0210 	bic.w	r2, r3, #16
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	031b      	lsls	r3, r3, #12
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	021a      	lsls	r2, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	609a      	str	r2, [r3, #8]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e06f      	b.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a31      	ldr	r2, [pc, #196]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a30      	ldr	r2, [pc, #192]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2e      	ldr	r2, [pc, #184]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d108      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d01d      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d018      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10c      	bne.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40015000 	.word	0x40015000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40014000 	.word	0x40014000

08005c98 <arm_biquad_cascade_df2T_f32>:
 8005c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	7807      	ldrb	r7, [r0, #0]
 8005c9e:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8005ca2:	6885      	ldr	r5, [r0, #8]
 8005ca4:	3514      	adds	r5, #20
 8005ca6:	6846      	ldr	r6, [r0, #4]
 8005ca8:	3608      	adds	r6, #8
 8005caa:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8005cae:	eb02 0b09 	add.w	fp, r2, r9
 8005cb2:	f003 080f 	and.w	r8, r3, #15
 8005cb6:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8005cba:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8005cbe:	ed15 7a04 	vldr	s14, [r5, #-16]
 8005cc2:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005cc6:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005cca:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005cce:	46b4      	mov	ip, r6
 8005cd0:	ed56 3a02 	vldr	s7, [r6, #-8]
 8005cd4:	ed16 4a01 	vldr	s8, [r6, #-4]
 8005cd8:	f1be 0f00 	cmp.w	lr, #0
 8005cdc:	f000 8195 	beq.w	800600a <arm_biquad_cascade_df2T_f32+0x372>
 8005ce0:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8005ce4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8005ce8:	4674      	mov	r4, lr
 8005cea:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8005cee:	ee27 5a83 	vmul.f32	s10, s15, s6
 8005cf2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005cf6:	ee67 4a03 	vmul.f32	s9, s14, s6
 8005cfa:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005cfe:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005d02:	ee34 4a84 	vadd.f32	s8, s9, s8
 8005d06:	ee26 3a83 	vmul.f32	s6, s13, s6
 8005d0a:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8005d0e:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8005d12:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8005d16:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005d1a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005d1e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005d22:	ee27 4a23 	vmul.f32	s8, s14, s7
 8005d26:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005d2a:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005d2e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005d32:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8005d36:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8005d3a:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8005d3e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005d42:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005d46:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005d4a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005d4e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005d52:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005d56:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005d5a:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005d5e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005d62:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8005d66:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8005d6a:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005d6e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005d72:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005d76:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005d7a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005d7e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005d82:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005d86:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005d8a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005d8e:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8005d92:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8005d96:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005d9a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005d9e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005da2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005da6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005daa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005dae:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005db2:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005db6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005dba:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8005dbe:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8005dc2:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005dc6:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005dca:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005dce:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005dd2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005dd6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005dda:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005dde:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005de2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005de6:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8005dea:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8005dee:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005df2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005df6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005dfa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005dfe:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005e02:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005e06:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005e0a:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005e0e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e12:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8005e16:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8005e1a:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005e1e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005e22:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005e26:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e2a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005e2e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e32:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005e36:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005e3a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e3e:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8005e42:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8005e46:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005e4a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005e4e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005e52:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005e56:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005e5a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005e5e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005e62:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005e66:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e6a:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8005e6e:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8005e72:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005e76:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005e7a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005e7e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e82:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005e86:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005e8a:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005e8e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005e92:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005e96:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8005e9a:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8005e9e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005ea2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005ea6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005eaa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005eae:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005eb2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005eb6:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005eba:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005ebe:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005ec2:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8005ec6:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8005eca:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005ece:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005ed2:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005ed6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005eda:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005ede:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005ee2:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005ee6:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005eea:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005eee:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8005ef2:	ed10 4a04 	vldr	s8, [r0, #-16]
 8005ef6:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005efa:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005efe:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f02:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f06:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f0a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f0e:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005f12:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005f16:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f1a:	ed03 5a04 	vstr	s10, [r3, #-16]
 8005f1e:	ed10 4a03 	vldr	s8, [r0, #-12]
 8005f22:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f26:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f2a:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f2e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f32:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f36:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f3a:	ee26 3a24 	vmul.f32	s6, s12, s9
 8005f3e:	ee33 3a05 	vadd.f32	s6, s6, s10
 8005f42:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f46:	ed43 4a03 	vstr	s9, [r3, #-12]
 8005f4a:	ed10 4a02 	vldr	s8, [r0, #-8]
 8005f4e:	ee27 5a84 	vmul.f32	s10, s15, s8
 8005f52:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005f56:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8005f5a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f5e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f62:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8005f66:	ee26 3a05 	vmul.f32	s6, s12, s10
 8005f6a:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005f6e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8005f72:	ed03 5a02 	vstr	s10, [r3, #-8]
 8005f76:	ed10 4a01 	vldr	s8, [r0, #-4]
 8005f7a:	ee67 4a84 	vmul.f32	s9, s15, s8
 8005f7e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f82:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005f86:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f8a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8005f8e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005f92:	ee66 3a24 	vmul.f32	s7, s12, s9
 8005f96:	ee73 3a85 	vadd.f32	s7, s7, s10
 8005f9a:	ee26 5a84 	vmul.f32	s10, s13, s8
 8005f9e:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8005fa2:	ee34 4a05 	vadd.f32	s8, s8, s10
 8005fa6:	ed43 4a01 	vstr	s9, [r3, #-4]
 8005faa:	3040      	adds	r0, #64	; 0x40
 8005fac:	3340      	adds	r3, #64	; 0x40
 8005fae:	3c01      	subs	r4, #1
 8005fb0:	f47f ae9b 	bne.w	8005cea <arm_biquad_cascade_df2T_f32+0x52>
 8005fb4:	4449      	add	r1, r9
 8005fb6:	465b      	mov	r3, fp
 8005fb8:	f1b8 0f00 	cmp.w	r8, #0
 8005fbc:	d019      	beq.n	8005ff2 <arm_biquad_cascade_df2T_f32+0x35a>
 8005fbe:	eb01 000a 	add.w	r0, r1, sl
 8005fc2:	ecf1 2a01 	vldmia	r1!, {s5}
 8005fc6:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8005fca:	ee33 3a23 	vadd.f32	s6, s6, s7
 8005fce:	ee67 3a22 	vmul.f32	s7, s14, s5
 8005fd2:	ee33 4a84 	vadd.f32	s8, s7, s8
 8005fd6:	ee26 5a03 	vmul.f32	s10, s12, s6
 8005fda:	ee75 3a04 	vadd.f32	s7, s10, s8
 8005fde:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8005fe2:	ee25 4a83 	vmul.f32	s8, s11, s6
 8005fe6:	ee34 4a22 	vadd.f32	s8, s8, s5
 8005fea:	eca3 3a01 	vstmia	r3!, {s6}
 8005fee:	4281      	cmp	r1, r0
 8005ff0:	d1e7      	bne.n	8005fc2 <arm_biquad_cascade_df2T_f32+0x32a>
 8005ff2:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8005ff6:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8005ffa:	3514      	adds	r5, #20
 8005ffc:	3608      	adds	r6, #8
 8005ffe:	4611      	mov	r1, r2
 8006000:	3f01      	subs	r7, #1
 8006002:	f47f ae5a 	bne.w	8005cba <arm_biquad_cascade_df2T_f32+0x22>
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	4613      	mov	r3, r2
 800600c:	e7d4      	b.n	8005fb8 <arm_biquad_cascade_df2T_f32+0x320>
	...

08006010 <arm_biquad_cascade_df2T_init_f32>:
 8006010:	b510      	push	{r4, lr}
 8006012:	6082      	str	r2, [r0, #8]
 8006014:	7001      	strb	r1, [r0, #0]
 8006016:	4604      	mov	r4, r0
 8006018:	00ca      	lsls	r2, r1, #3
 800601a:	4618      	mov	r0, r3
 800601c:	2100      	movs	r1, #0
 800601e:	f000 f803 	bl	8006028 <memset>
 8006022:	6060      	str	r0, [r4, #4]
 8006024:	bd10      	pop	{r4, pc}
 8006026:	bf00      	nop

08006028 <memset>:
 8006028:	4402      	add	r2, r0
 800602a:	4603      	mov	r3, r0
 800602c:	4293      	cmp	r3, r2
 800602e:	d100      	bne.n	8006032 <memset+0xa>
 8006030:	4770      	bx	lr
 8006032:	f803 1b01 	strb.w	r1, [r3], #1
 8006036:	e7f9      	b.n	800602c <memset+0x4>

08006038 <__libc_init_array>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4d0d      	ldr	r5, [pc, #52]	; (8006070 <__libc_init_array+0x38>)
 800603c:	4c0d      	ldr	r4, [pc, #52]	; (8006074 <__libc_init_array+0x3c>)
 800603e:	1b64      	subs	r4, r4, r5
 8006040:	10a4      	asrs	r4, r4, #2
 8006042:	2600      	movs	r6, #0
 8006044:	42a6      	cmp	r6, r4
 8006046:	d109      	bne.n	800605c <__libc_init_array+0x24>
 8006048:	4d0b      	ldr	r5, [pc, #44]	; (8006078 <__libc_init_array+0x40>)
 800604a:	4c0c      	ldr	r4, [pc, #48]	; (800607c <__libc_init_array+0x44>)
 800604c:	f000 f818 	bl	8006080 <_init>
 8006050:	1b64      	subs	r4, r4, r5
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	2600      	movs	r6, #0
 8006056:	42a6      	cmp	r6, r4
 8006058:	d105      	bne.n	8006066 <__libc_init_array+0x2e>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006060:	4798      	blx	r3
 8006062:	3601      	adds	r6, #1
 8006064:	e7ee      	b.n	8006044 <__libc_init_array+0xc>
 8006066:	f855 3b04 	ldr.w	r3, [r5], #4
 800606a:	4798      	blx	r3
 800606c:	3601      	adds	r6, #1
 800606e:	e7f2      	b.n	8006056 <__libc_init_array+0x1e>
 8006070:	080060a8 	.word	0x080060a8
 8006074:	080060a8 	.word	0x080060a8
 8006078:	080060a8 	.word	0x080060a8
 800607c:	080060ac 	.word	0x080060ac

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
