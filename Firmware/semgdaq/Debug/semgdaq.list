
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c354  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013058  0800c530  0800c530  0001c530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f588  0801f588  000378d8  2**0
                  CONTENTS
  4 .ARM          00000000  0801f588  0801f588  000378d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f588  0801f588  000378d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f588  0801f588  0002f588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f58c  0801f58c  0002f58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078d8  20000000  0801f590  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012410  200078d8  08026e68  000378d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019ce8  08026e68  00039ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000378d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00037908  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025ad6  00000000  00000000  000379c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000514c  00000000  00000000  0005d496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  000625e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011de  00000000  00000000  00063f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002344b  00000000  00000000  000650e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021614  00000000  00000000  00088531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6b2c  00000000  00000000  000a9b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dec  00000000  00000000  00190674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00197460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004cd8  00000000  00000000  001974eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000118  00000000  00000000  0019c1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200078d8 	.word	0x200078d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c514 	.word	0x0800c514

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200078dc 	.word	0x200078dc
 8000214:	0800c514 	.word	0x0800c514

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <ADC1_IN1_autocorr_calc>:
arm_status StatusCoeffs_5;
arm_status StatusCoeffs_6;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e01e      	b.n	8000c2a <ADC1_IN1_autocorr_calc+0x4a>
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag  for the data set*/
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000bf2:	23f6      	movs	r3, #246	; 0xf6
 8000bf4:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1); // A CMSIS DSP function for computing dot products
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <ADC1_IN1_autocorr_calc+0x5c>)
 8000bfe:	4413      	add	r3, r2
 8000c00:	1d18      	adds	r0, r3, #4
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <ADC1_IN1_autocorr_calc+0x60>)
 8000c08:	f009 ffe6 	bl	800abd8 <arm_dot_prod_f32>

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000c0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c10:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000c44 <ADC1_IN1_autocorr_calc+0x64>
 8000c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <ADC1_IN1_autocorr_calc+0x68>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b0a      	cmp	r3, #10
 8000c2e:	d9dd      	bls.n	8000bec <ADC1_IN1_autocorr_calc+0xc>
	}
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20007aec 	.word	0x20007aec
 8000c40:	20007b10 	.word	0x20007b10
 8000c44:	43800000 	.word	0x43800000
 8000c48:	200078f4 	.word	0x200078f4

08000c4c <ADC1_IN1_autoreg_coeffs>:

float32_t* ADC1_IN1_autoreg_coeffs(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000c52:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c5a:	e013      	b.n	8000c84 <ADC1_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000c5c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a43      	ldr	r2, [pc, #268]	; (8000d70 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000c74:	443b      	add	r3, r7
 8000c76:	3b38      	subs	r3, #56	; 0x38
 8000c78:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c7a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c7e:	3301      	adds	r3, #1
 8000c80:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c84:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	d9e7      	bls.n	8000c5c <ADC1_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1); // Initializes the autocorrelations matrix
 8000c8c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000c90:	2201      	movs	r2, #1
 8000c92:	210a      	movs	r1, #10
 8000c94:	4837      	ldr	r0, [pc, #220]	; (8000d74 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000c96:	f009 fdd3 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000ca0:	e02f      	b.n	8000d02 <ADC1_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000ca8:	e022      	b.n	8000cf0 <ADC1_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000caa:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000cae:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000cb8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000cbc:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cce:	4413      	add	r3, r2
 8000cd0:	4827      	ldr	r0, [pc, #156]	; (8000d70 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000cd2:	008a      	lsls	r2, r1, #2
 8000cd4:	4402      	add	r2, r0
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000cdc:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ce6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000cf0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cf4:	2b09      	cmp	r3, #9
 8000cf6:	ddd8      	ble.n	8000caa <ADC1_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000cf8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000d02:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000d06:	2b09      	cmp	r3, #9
 8000d08:	ddcb      	ble.n	8000ca2 <ADC1_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1); // Initializes the Yule-Walker matrix
 8000d0a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d0e:	220a      	movs	r2, #10
 8000d10:	210a      	movs	r1, #10
 8000d12:	4819      	ldr	r0, [pc, #100]	; (8000d78 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d14:	f009 fd94 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1); // Initializes the inverse Yule-Walker matrix
 8000d18:	463b      	mov	r3, r7
 8000d1a:	220a      	movs	r2, #10
 8000d1c:	210a      	movs	r1, #10
 8000d1e:	4817      	ldr	r0, [pc, #92]	; (8000d7c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d20:	f009 fd8e 	bl	800a840 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);
 8000d24:	4915      	ldr	r1, [pc, #84]	; (8000d7c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d28:	f009 fc84 	bl	800a634 <arm_mat_inverse_f32>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000d32:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d113      	bne.n	8000d62 <ADC1_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4810      	ldr	r0, [pc, #64]	; (8000d80 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d40:	f00a fa62 	bl	800b208 <memset>

		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1); //Initializes the coefficients Matrix
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	210a      	movs	r1, #10
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d4c:	f009 fd78 	bl	800a840 <arm_mat_init_f32>

        StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d56:	f009 fbcd 	bl	800a4f4 <arm_mat_mult_f32>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <ADC1_IN1_autoreg_coeffs+0x13c>)
 8000d60:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_1;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <ADC1_IN1_autoreg_coeffs+0x134>)
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200078f4 	.word	0x200078f4
 8000d74:	20009424 	.word	0x20009424
 8000d78:	200093c4 	.word	0x200093c4
 8000d7c:	200093f4 	.word	0x200093f4
 8000d80:	200079fc 	.word	0x200079fc
 8000d84:	20009454 	.word	0x20009454
 8000d88:	20009484 	.word	0x20009484

08000d8c <ADC1_IN2_autocorr_calc>:



void ADC1_IN2_autocorr_calc(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e01e      	b.n	8000dd6 <ADC1_IN2_autocorr_calc+0x4a>
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000d9e:	23f6      	movs	r3, #246	; 0xf6
 8000da0:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3308      	adds	r3, #8
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <ADC1_IN2_autocorr_calc+0x5c>)
 8000daa:	4413      	add	r3, r2
 8000dac:	1d18      	adds	r0, r3, #4
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <ADC1_IN2_autocorr_calc+0x60>)
 8000db4:	f009 ff10 	bl	800abd8 <arm_dot_prod_f32>

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000db8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dbc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000df0 <ADC1_IN2_autocorr_calc+0x64>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <ADC1_IN2_autocorr_calc+0x68>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b09      	cmp	r3, #9
 8000dda:	d9dd      	bls.n	8000d98 <ADC1_IN2_autocorr_calc+0xc>
	}
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20007f10 	.word	0x20007f10
 8000dec:	20007f34 	.word	0x20007f34
 8000df0:	43800000 	.word	0x43800000
 8000df4:	20007920 	.word	0x20007920

08000df8 <ADC1_IN2_autoreg_coeffs>:

float32_t* ADC1_IN2_autoreg_coeffs(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000dfe:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_2 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e06:	e013      	b.n	8000e30 <ADC1_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_2[n] = AutoCorr_2[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000e08:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a43      	ldr	r2, [pc, #268]	; (8000f1c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000e20:	443b      	add	r3, r7
 8000e22:	3b38      	subs	r3, #56	; 0x38
 8000e24:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e26:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e30:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d9e7      	bls.n	8000e08 <ADC1_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_2); //Initializes the autocorrelations matrix
 8000e38:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	210a      	movs	r1, #10
 8000e40:	4837      	ldr	r0, [pc, #220]	; (8000f20 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000e42:	f009 fcfd 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_2[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000e4c:	e02f      	b.n	8000eae <ADC1_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e54:	e022      	b.n	8000e9c <ADC1_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_2[r * 10 + c] = AutoCorr_2[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000e56:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e64:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e68:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	461a      	mov	r2, r3
 8000e76:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4827      	ldr	r0, [pc, #156]	; (8000f1c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000e7e:	008a      	lsls	r2, r1, #2
 8000e80:	4402      	add	r2, r0
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000e88:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000e92:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e96:	3301      	adds	r3, #1
 8000e98:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e9c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	ddd8      	ble.n	8000e56 <ADC1_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000ea4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000eae:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000eb2:	2b09      	cmp	r3, #9
 8000eb4:	ddcb      	ble.n	8000e4e <ADC1_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_2); // Initializes the Yule-Walker matrix
 8000eb6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000eba:	220a      	movs	r2, #10
 8000ebc:	210a      	movs	r1, #10
 8000ebe:	4819      	ldr	r0, [pc, #100]	; (8000f24 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000ec0:	f009 fcbe 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_2[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_2); // Initializes the inverse Yule-Walker matrix
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	220a      	movs	r2, #10
 8000ec8:	210a      	movs	r1, #10
 8000eca:	4817      	ldr	r0, [pc, #92]	; (8000f28 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000ecc:	f009 fcb8 	bl	800a840 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_2 = arm_mat_inverse_f32(&ADC1_IN2_YW_mtx, &ADC1_IN2_Inv_YW_mtx);
 8000ed0:	4915      	ldr	r1, [pc, #84]	; (8000f28 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000ed4:	f009 fbae 	bl	800a634 <arm_mat_inverse_f32>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_2 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000ede:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d113      	bne.n	8000f0e <ADC1_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_2, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4810      	ldr	r0, [pc, #64]	; (8000f2c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000eec:	f00a f98c 	bl	800b208 <memset>

		arm_mat_init_f32(&ADC1_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_2); //Initializes the coefficients Matrix
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	480e      	ldr	r0, [pc, #56]	; (8000f30 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000ef8:	f009 fca2 	bl	800a840 <arm_mat_init_f32>

        StatusCoeffs_2 = arm_mat_mult_f32( &ADC1_IN2_Inv_YW_mtx, &ADC1_IN2_AC_mtx, &ADC1_IN2_coeffs_mtx );
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f02:	f009 faf7 	bl	800a4f4 <arm_mat_mult_f32>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <ADC1_IN2_autoreg_coeffs+0x13c>)
 8000f0c:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_2;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <ADC1_IN2_autoreg_coeffs+0x134>)
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20007920 	.word	0x20007920
 8000f20:	2000942c 	.word	0x2000942c
 8000f24:	200093cc 	.word	0x200093cc
 8000f28:	200093fc 	.word	0x200093fc
 8000f2c:	20007a24 	.word	0x20007a24
 8000f30:	2000945c 	.word	0x2000945c
 8000f34:	20009485 	.word	0x20009485

08000f38 <ADC2_IN3_autocorr_calc>:



void ADC2_IN3_autocorr_calc(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e01e      	b.n	8000f82 <ADC2_IN3_autocorr_calc+0x4a>
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000f4a:	23f6      	movs	r3, #246	; 0xf6
 8000f4c:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3308      	adds	r3, #8
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <ADC2_IN3_autocorr_calc+0x5c>)
 8000f56:	4413      	add	r3, r2
 8000f58:	1d18      	adds	r0, r3, #4
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <ADC2_IN3_autocorr_calc+0x60>)
 8000f60:	f009 fe3a 	bl	800abd8 <arm_dot_prod_f32>

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f68:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000f9c <ADC2_IN3_autocorr_calc+0x64>
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <ADC2_IN3_autocorr_calc+0x68>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b09      	cmp	r3, #9
 8000f86:	d9dd      	bls.n	8000f44 <ADC2_IN3_autocorr_calc+0xc>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20008334 	.word	0x20008334
 8000f98:	20008358 	.word	0x20008358
 8000f9c:	43800000 	.word	0x43800000
 8000fa0:	2000794c 	.word	0x2000794c

08000fa4 <ADC2_IN3_autoreg_coeffs>:

float32_t* ADC2_IN3_autoreg_coeffs(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000faa:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_3 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000fb2:	e013      	b.n	8000fdc <ADC2_IN3_autoreg_coeffs+0x38>
	{
		AC_Matrix_3[n] = AutoCorr_3[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000fb4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a43      	ldr	r2, [pc, #268]	; (80010c8 <ADC2_IN3_autoreg_coeffs+0x124>)
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000fcc:	443b      	add	r3, r7
 8000fce:	3b38      	subs	r3, #56	; 0x38
 8000fd0:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000fd2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000fdc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	d9e7      	bls.n	8000fb4 <ADC2_IN3_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN3_AC_mtx, AR_ORDER, 1, AC_Matrix_3); //Initializes the autocorrelations matrix
 8000fe4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000fe8:	2201      	movs	r2, #1
 8000fea:	210a      	movs	r1, #10
 8000fec:	4837      	ldr	r0, [pc, #220]	; (80010cc <ADC2_IN3_autoreg_coeffs+0x128>)
 8000fee:	f009 fc27 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_3[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000ff8:	e02f      	b.n	800105a <ADC2_IN3_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001000:	e022      	b.n	8001048 <ADC2_IN3_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_3[r * 10 + c] = AutoCorr_3[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8001002:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001006:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001010:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001014:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	461a      	mov	r2, r3
 8001022:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001026:	4413      	add	r3, r2
 8001028:	4827      	ldr	r0, [pc, #156]	; (80010c8 <ADC2_IN3_autoreg_coeffs+0x124>)
 800102a:	008a      	lsls	r2, r1, #2
 800102c:	4402      	add	r2, r0
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001034:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800103e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001042:	3301      	adds	r3, #1
 8001044:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001048:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800104c:	2b09      	cmp	r3, #9
 800104e:	ddd8      	ble.n	8001002 <ADC2_IN3_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001050:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001054:	3301      	adds	r3, #1
 8001056:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800105a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800105e:	2b09      	cmp	r3, #9
 8001060:	ddcb      	ble.n	8000ffa <ADC2_IN3_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN3_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_3); // Initializes the Yule-Walker matrix
 8001062:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001066:	220a      	movs	r2, #10
 8001068:	210a      	movs	r1, #10
 800106a:	4819      	ldr	r0, [pc, #100]	; (80010d0 <ADC2_IN3_autoreg_coeffs+0x12c>)
 800106c:	f009 fbe8 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_3[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN3_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_3); // Initializes the inverse Yule-Walker matrix
 8001070:	463b      	mov	r3, r7
 8001072:	220a      	movs	r2, #10
 8001074:	210a      	movs	r1, #10
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <ADC2_IN3_autoreg_coeffs+0x130>)
 8001078:	f009 fbe2 	bl	800a840 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_3 = arm_mat_inverse_f32(&ADC2_IN3_YW_mtx, &ADC2_IN3_Inv_YW_mtx);
 800107c:	4915      	ldr	r1, [pc, #84]	; (80010d4 <ADC2_IN3_autoreg_coeffs+0x130>)
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <ADC2_IN3_autoreg_coeffs+0x12c>)
 8001080:	f009 fad8 	bl	800a634 <arm_mat_inverse_f32>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_3 == ARM_MATH_SUCCESS) // Check if operation was successful
 800108a:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800108e:	2b00      	cmp	r3, #0
 8001090:	d113      	bne.n	80010ba <ADC2_IN3_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_3, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8001092:	2228      	movs	r2, #40	; 0x28
 8001094:	2100      	movs	r1, #0
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <ADC2_IN3_autoreg_coeffs+0x134>)
 8001098:	f00a f8b6 	bl	800b208 <memset>

		arm_mat_init_f32(&ADC2_IN3_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_3); //Initializes the coefficients Matrix
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <ADC2_IN3_autoreg_coeffs+0x134>)
 800109e:	2201      	movs	r2, #1
 80010a0:	210a      	movs	r1, #10
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <ADC2_IN3_autoreg_coeffs+0x138>)
 80010a4:	f009 fbcc 	bl	800a840 <arm_mat_init_f32>

        StatusCoeffs_3 = arm_mat_mult_f32( &ADC2_IN3_Inv_YW_mtx, &ADC2_IN3_AC_mtx, &ADC2_IN3_coeffs_mtx );
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <ADC2_IN3_autoreg_coeffs+0x138>)
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <ADC2_IN3_autoreg_coeffs+0x128>)
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010ae:	f009 fa21 	bl	800a4f4 <arm_mat_mult_f32>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <ADC2_IN3_autoreg_coeffs+0x13c>)
 80010b8:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_3;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <ADC2_IN3_autoreg_coeffs+0x134>)
}
 80010bc:	4618      	mov	r0, r3
 80010be:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000794c 	.word	0x2000794c
 80010cc:	20009434 	.word	0x20009434
 80010d0:	200093d4 	.word	0x200093d4
 80010d4:	20009404 	.word	0x20009404
 80010d8:	20007a4c 	.word	0x20007a4c
 80010dc:	20009464 	.word	0x20009464
 80010e0:	20009486 	.word	0x20009486

080010e4 <ADC2_IN4_autocorr_calc>:



void ADC2_IN4_autocorr_calc(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e01e      	b.n	800112e <ADC2_IN4_autocorr_calc+0x4a>
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80010f6:	23f6      	movs	r3, #246	; 0xf6
 80010f8:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3308      	adds	r3, #8
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <ADC2_IN4_autocorr_calc+0x5c>)
 8001102:	4413      	add	r3, r2
 8001104:	1d18      	adds	r0, r3, #4
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <ADC2_IN4_autocorr_calc+0x60>)
 800110c:	f009 fd64 	bl	800abd8 <arm_dot_prod_f32>

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001110:	ed97 7a01 	vldr	s14, [r7, #4]
 8001114:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001148 <ADC2_IN4_autocorr_calc+0x64>
 8001118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <ADC2_IN4_autocorr_calc+0x68>)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b09      	cmp	r3, #9
 8001132:	d9dd      	bls.n	80010f0 <ADC2_IN4_autocorr_calc+0xc>
	}
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20008758 	.word	0x20008758
 8001144:	2000877c 	.word	0x2000877c
 8001148:	43800000 	.word	0x43800000
 800114c:	20007978 	.word	0x20007978

08001150 <ADC2_IN4_autoreg_coeffs>:

float32_t* ADC2_IN4_autoreg_coeffs(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001156:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_4 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800115e:	e013      	b.n	8001188 <ADC2_IN4_autoreg_coeffs+0x38>
	{
		AC_Matrix_4[n] = AutoCorr_4[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001160:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001164:	3301      	adds	r3, #1
 8001166:	4a43      	ldr	r2, [pc, #268]	; (8001274 <ADC2_IN4_autoreg_coeffs+0x124>)
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001178:	443b      	add	r3, r7
 800117a:	3b38      	subs	r3, #56	; 0x38
 800117c:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800117e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001182:	3301      	adds	r3, #1
 8001184:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001188:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800118c:	2b09      	cmp	r3, #9
 800118e:	d9e7      	bls.n	8001160 <ADC2_IN4_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN4_AC_mtx, AR_ORDER, 1, AC_Matrix_4); //Initializes the autocorrelations matrix
 8001190:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001194:	2201      	movs	r2, #1
 8001196:	210a      	movs	r1, #10
 8001198:	4837      	ldr	r0, [pc, #220]	; (8001278 <ADC2_IN4_autoreg_coeffs+0x128>)
 800119a:	f009 fb51 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_4[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80011a4:	e02f      	b.n	8001206 <ADC2_IN4_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80011ac:	e022      	b.n	80011f4 <ADC2_IN4_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_4[r * 10 + c] = AutoCorr_4[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80011ae:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80011b2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011bc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80011c0:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	461a      	mov	r2, r3
 80011ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011d2:	4413      	add	r3, r2
 80011d4:	4827      	ldr	r0, [pc, #156]	; (8001274 <ADC2_IN4_autoreg_coeffs+0x124>)
 80011d6:	008a      	lsls	r2, r1, #2
 80011d8:	4402      	add	r2, r0
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80011e0:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80011ea:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011ee:	3301      	adds	r3, #1
 80011f0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80011f4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	ddd8      	ble.n	80011ae <ADC2_IN4_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80011fc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001200:	3301      	adds	r3, #1
 8001202:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001206:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800120a:	2b09      	cmp	r3, #9
 800120c:	ddcb      	ble.n	80011a6 <ADC2_IN4_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN4_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_4); // Initializes the Yule-Walker matrix
 800120e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001212:	220a      	movs	r2, #10
 8001214:	210a      	movs	r1, #10
 8001216:	4819      	ldr	r0, [pc, #100]	; (800127c <ADC2_IN4_autoreg_coeffs+0x12c>)
 8001218:	f009 fb12 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_4[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN4_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_4); // Initializes the inverse Yule-Walker matrix
 800121c:	463b      	mov	r3, r7
 800121e:	220a      	movs	r2, #10
 8001220:	210a      	movs	r1, #10
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <ADC2_IN4_autoreg_coeffs+0x130>)
 8001224:	f009 fb0c 	bl	800a840 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_4 = arm_mat_inverse_f32(&ADC2_IN4_YW_mtx, &ADC2_IN4_Inv_YW_mtx);
 8001228:	4915      	ldr	r1, [pc, #84]	; (8001280 <ADC2_IN4_autoreg_coeffs+0x130>)
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <ADC2_IN4_autoreg_coeffs+0x12c>)
 800122c:	f009 fa02 	bl	800a634 <arm_mat_inverse_f32>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_4 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001236:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800123a:	2b00      	cmp	r3, #0
 800123c:	d113      	bne.n	8001266 <ADC2_IN4_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_4, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800123e:	2228      	movs	r2, #40	; 0x28
 8001240:	2100      	movs	r1, #0
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <ADC2_IN4_autoreg_coeffs+0x134>)
 8001244:	f009 ffe0 	bl	800b208 <memset>

		arm_mat_init_f32(&ADC2_IN4_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_4); //Initializes the coefficients Matrix
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <ADC2_IN4_autoreg_coeffs+0x134>)
 800124a:	2201      	movs	r2, #1
 800124c:	210a      	movs	r1, #10
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001250:	f009 faf6 	bl	800a840 <arm_mat_init_f32>

        StatusCoeffs_4 = arm_mat_mult_f32( &ADC2_IN4_Inv_YW_mtx, &ADC2_IN4_AC_mtx, &ADC2_IN4_coeffs_mtx );
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <ADC2_IN4_autoreg_coeffs+0x128>)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <ADC2_IN4_autoreg_coeffs+0x130>)
 800125a:	f009 f94b 	bl	800a4f4 <arm_mat_mult_f32>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <ADC2_IN4_autoreg_coeffs+0x13c>)
 8001264:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_4;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <ADC2_IN4_autoreg_coeffs+0x134>)
}
 8001268:	4618      	mov	r0, r3
 800126a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20007978 	.word	0x20007978
 8001278:	2000943c 	.word	0x2000943c
 800127c:	200093dc 	.word	0x200093dc
 8001280:	2000940c 	.word	0x2000940c
 8001284:	20007a74 	.word	0x20007a74
 8001288:	2000946c 	.word	0x2000946c
 800128c:	20009487 	.word	0x20009487

08001290 <ADC3_IN1_autocorr_calc>:



void ADC3_IN1_autocorr_calc(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e01e      	b.n	80012da <ADC3_IN1_autocorr_calc+0x4a>
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80012a2:	23f6      	movs	r3, #246	; 0xf6
 80012a4:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3308      	adds	r3, #8
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <ADC3_IN1_autocorr_calc+0x5c>)
 80012ae:	4413      	add	r3, r2
 80012b0:	1d18      	adds	r0, r3, #4
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <ADC3_IN1_autocorr_calc+0x60>)
 80012b8:	f009 fc8e 	bl	800abd8 <arm_dot_prod_f32>

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80012bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80012f4 <ADC3_IN1_autocorr_calc+0x64>
 80012c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <ADC3_IN1_autocorr_calc+0x68>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3301      	adds	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d9dd      	bls.n	800129c <ADC3_IN1_autocorr_calc+0xc>
	}
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20008b7c 	.word	0x20008b7c
 80012f0:	20008ba0 	.word	0x20008ba0
 80012f4:	43800000 	.word	0x43800000
 80012f8:	200079a4 	.word	0x200079a4

080012fc <ADC3_IN1_autoreg_coeffs>:

float32_t* ADC3_IN1_autoreg_coeffs(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001302:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_5 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800130a:	e013      	b.n	8001334 <ADC3_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_5[n] = AutoCorr_5[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 800130c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001310:	3301      	adds	r3, #1
 8001312:	4a43      	ldr	r2, [pc, #268]	; (8001420 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001324:	443b      	add	r3, r7
 8001326:	3b38      	subs	r3, #56	; 0x38
 8001328:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800132a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800132e:	3301      	adds	r3, #1
 8001330:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001334:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001338:	2b09      	cmp	r3, #9
 800133a:	d9e7      	bls.n	800130c <ADC3_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_5); //Initializes the autocorrelations matrix
 800133c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001340:	2201      	movs	r2, #1
 8001342:	210a      	movs	r1, #10
 8001344:	4837      	ldr	r0, [pc, #220]	; (8001424 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001346:	f009 fa7b 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_5[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001350:	e02f      	b.n	80013b2 <ADC3_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001358:	e022      	b.n	80013a0 <ADC3_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_5[r * 10 + c] = AutoCorr_5[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800135a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800135e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001368:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800136c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	461a      	mov	r2, r3
 800137a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800137e:	4413      	add	r3, r2
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001382:	008a      	lsls	r2, r1, #2
 8001384:	4402      	add	r2, r0
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800138c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001396:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800139a:	3301      	adds	r3, #1
 800139c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80013a0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	ddd8      	ble.n	800135a <ADC3_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80013a8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013ac:	3301      	adds	r3, #1
 80013ae:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80013b2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	ddcb      	ble.n	8001352 <ADC3_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_5); // Initializes the Yule-Walker matrix
 80013ba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013be:	220a      	movs	r2, #10
 80013c0:	210a      	movs	r1, #10
 80013c2:	4819      	ldr	r0, [pc, #100]	; (8001428 <ADC3_IN1_autoreg_coeffs+0x12c>)
 80013c4:	f009 fa3c 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_5[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_5); // Initializes the inverse Yule-Walker matrix
 80013c8:	463b      	mov	r3, r7
 80013ca:	220a      	movs	r2, #10
 80013cc:	210a      	movs	r1, #10
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <ADC3_IN1_autoreg_coeffs+0x130>)
 80013d0:	f009 fa36 	bl	800a840 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_5 = arm_mat_inverse_f32(&ADC3_IN1_YW_mtx, &ADC3_IN1_Inv_YW_mtx);
 80013d4:	4915      	ldr	r1, [pc, #84]	; (800142c <ADC3_IN1_autoreg_coeffs+0x130>)
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <ADC3_IN1_autoreg_coeffs+0x12c>)
 80013d8:	f009 f92c 	bl	800a634 <arm_mat_inverse_f32>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_5 == ARM_MATH_SUCCESS) // Check if operation was successful
 80013e2:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d113      	bne.n	8001412 <ADC3_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80013ea:	2228      	movs	r2, #40	; 0x28
 80013ec:	2100      	movs	r1, #0
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <ADC3_IN1_autoreg_coeffs+0x134>)
 80013f0:	f009 ff0a 	bl	800b208 <memset>

		arm_mat_init_f32(&ADC3_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_5); //Initializes the coefficients Matrix
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <ADC3_IN1_autoreg_coeffs+0x138>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	210a      	movs	r1, #10
 80013fa:	480f      	ldr	r0, [pc, #60]	; (8001438 <ADC3_IN1_autoreg_coeffs+0x13c>)
 80013fc:	f009 fa20 	bl	800a840 <arm_mat_init_f32>

        StatusCoeffs_5 = arm_mat_mult_f32( &ADC3_IN1_Inv_YW_mtx, &ADC3_IN1_AC_mtx, &ADC3_IN1_coeffs_mtx );
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <ADC3_IN1_autoreg_coeffs+0x13c>)
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001406:	f009 f875 	bl	800a4f4 <arm_mat_mult_f32>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <ADC3_IN1_autoreg_coeffs+0x140>)
 8001410:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_5;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <ADC3_IN1_autoreg_coeffs+0x138>)
}
 8001414:	4618      	mov	r0, r3
 8001416:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200079a4 	.word	0x200079a4
 8001424:	20009444 	.word	0x20009444
 8001428:	200093e4 	.word	0x200093e4
 800142c:	20009414 	.word	0x20009414
 8001430:	200079fc 	.word	0x200079fc
 8001434:	20007a9c 	.word	0x20007a9c
 8001438:	20009474 	.word	0x20009474
 800143c:	20009488 	.word	0x20009488

08001440 <ADC3_IN2_autocorr_calc>:



void ADC3_IN2_autocorr_calc(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e01e      	b.n	800148a <ADC3_IN2_autocorr_calc+0x4a>
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001452:	23f6      	movs	r3, #246	; 0xf6
 8001454:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3308      	adds	r3, #8
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <ADC3_IN2_autocorr_calc+0x5c>)
 800145e:	4413      	add	r3, r2
 8001460:	1d18      	adds	r0, r3, #4
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <ADC3_IN2_autocorr_calc+0x60>)
 8001468:	f009 fbb6 	bl	800abd8 <arm_dot_prod_f32>

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800146c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001470:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014a4 <ADC3_IN2_autocorr_calc+0x64>
 8001474:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <ADC3_IN2_autocorr_calc+0x68>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b09      	cmp	r3, #9
 800148e:	d9dd      	bls.n	800144c <ADC3_IN2_autocorr_calc+0xc>
	}
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20008fa0 	.word	0x20008fa0
 80014a0:	20008fc4 	.word	0x20008fc4
 80014a4:	43800000 	.word	0x43800000
 80014a8:	200079d0 	.word	0x200079d0

080014ac <ADC3_IN2_autoreg_coeffs>:

float32_t* ADC3_IN2_autoreg_coeffs(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80014b2:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_6 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80014ba:	e013      	b.n	80014e4 <ADC3_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_6[n] = AutoCorr_6[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80014bc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <ADC3_IN2_autoreg_coeffs+0x124>)
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80014d4:	443b      	add	r3, r7
 80014d6:	3b38      	subs	r3, #56	; 0x38
 80014d8:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80014da:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80014e4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d9e7      	bls.n	80014bc <ADC3_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_6); //Initializes the autocorrelations matrix
 80014ec:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80014f0:	2201      	movs	r2, #1
 80014f2:	210a      	movs	r1, #10
 80014f4:	4837      	ldr	r0, [pc, #220]	; (80015d4 <ADC3_IN2_autoreg_coeffs+0x128>)
 80014f6:	f009 f9a3 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_6[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001500:	e02f      	b.n	8001562 <ADC3_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001508:	e022      	b.n	8001550 <ADC3_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_6[r * 10 + c] = AutoCorr_6[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800150a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800150e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001518:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800151c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	461a      	mov	r2, r3
 800152a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800152e:	4413      	add	r3, r2
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001532:	008a      	lsls	r2, r1, #2
 8001534:	4402      	add	r2, r0
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800153c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001546:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800154a:	3301      	adds	r3, #1
 800154c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001550:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001554:	2b09      	cmp	r3, #9
 8001556:	ddd8      	ble.n	800150a <ADC3_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001558:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800155c:	3301      	adds	r3, #1
 800155e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001562:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001566:	2b09      	cmp	r3, #9
 8001568:	ddcb      	ble.n	8001502 <ADC3_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_6); // Initializes the Yule-Walker matrix
 800156a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800156e:	220a      	movs	r2, #10
 8001570:	210a      	movs	r1, #10
 8001572:	4819      	ldr	r0, [pc, #100]	; (80015d8 <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001574:	f009 f964 	bl	800a840 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_6[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_6); // Initializes the inverse Yule-Walker matrix
 8001578:	463b      	mov	r3, r7
 800157a:	220a      	movs	r2, #10
 800157c:	210a      	movs	r1, #10
 800157e:	4817      	ldr	r0, [pc, #92]	; (80015dc <ADC3_IN2_autoreg_coeffs+0x130>)
 8001580:	f009 f95e 	bl	800a840 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_6 = arm_mat_inverse_f32(&ADC3_IN2_YW_mtx, &ADC3_IN2_Inv_YW_mtx);
 8001584:	4915      	ldr	r1, [pc, #84]	; (80015dc <ADC3_IN2_autoreg_coeffs+0x130>)
 8001586:	4814      	ldr	r0, [pc, #80]	; (80015d8 <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001588:	f009 f854 	bl	800a634 <arm_mat_inverse_f32>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_6 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001592:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001596:	2b00      	cmp	r3, #0
 8001598:	d113      	bne.n	80015c2 <ADC3_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_6, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800159a:	2228      	movs	r2, #40	; 0x28
 800159c:	2100      	movs	r1, #0
 800159e:	4810      	ldr	r0, [pc, #64]	; (80015e0 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015a0:	f009 fe32 	bl	800b208 <memset>

		arm_mat_init_f32(&ADC3_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_6); //Initializes the coefficients Matrix
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	210a      	movs	r1, #10
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015ac:	f009 f948 	bl	800a840 <arm_mat_init_f32>

        StatusCoeffs_6 = arm_mat_mult_f32( &ADC3_IN2_Inv_YW_mtx, &ADC3_IN2_AC_mtx, &ADC3_IN2_coeffs_mtx );
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <ADC3_IN2_autoreg_coeffs+0x128>)
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <ADC3_IN2_autoreg_coeffs+0x130>)
 80015b6:	f008 ff9d 	bl	800a4f4 <arm_mat_mult_f32>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <ADC3_IN2_autoreg_coeffs+0x13c>)
 80015c0:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_6;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <ADC3_IN2_autoreg_coeffs+0x134>)
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200079d0 	.word	0x200079d0
 80015d4:	2000944c 	.word	0x2000944c
 80015d8:	200093ec 	.word	0x200093ec
 80015dc:	2000941c 	.word	0x2000941c
 80015e0:	20007ac4 	.word	0x20007ac4
 80015e4:	2000947c 	.word	0x2000947c
 80015e8:	20009489 	.word	0x20009489

080015ec <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e00a      	b.n	8001610 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3304      	adds	r3, #4
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	3301      	adds	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d9f1      	bls.n	80015fa <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	e00b      	b.n	800163a <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	3308      	adds	r3, #8
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3301      	adds	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2bff      	cmp	r3, #255	; 0xff
 800163e:	d9f0      	bls.n	8001622 <MA_ADC1_IN1_Init+0x36>
	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e05a      	b.n	8001714 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4932      	ldr	r1, [pc, #200]	; (800172c <MA_ADC1_IN1_Update+0xdc>)
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	3212      	adds	r2, #18
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	440a      	add	r2, r1
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3304      	adds	r3, #4
 8001676:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b08      	cmp	r3, #8
 8001688:	d102      	bne.n	8001690 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3308      	adds	r3, #8
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3304      	adds	r3, #4
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e02c      	b.n	8001708 <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e001      	b.n	80016c0 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 80016bc:	2307      	movs	r3, #7
 80016be:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3308      	adds	r3, #8
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <MA_ADC1_IN1_Update+0xe0>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	edd3 6a00 	vldr	s13, [r3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3308      	adds	r3, #8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	3304      	adds	r3, #4
 80016fe:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d9cf      	bls.n	80016ae <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800171a:	4293      	cmp	r3, r2
 800171c:	d99f      	bls.n	800165e <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	20000048 	.word	0x20000048
 8001730:	20000000 	.word	0x20000000

08001734 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00a      	b.n	8001758 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d9f1      	bls.n	8001742 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	e00b      	b.n	8001782 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3308      	adds	r3, #8
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3304      	adds	r3, #4
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d9f0      	bls.n	800176a <MA_ADC1_IN2_Init+0x36>
	}
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e05a      	b.n	800185c <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4932      	ldr	r1, [pc, #200]	; (8001874 <MA_ADC1_IN2_Update+0xdc>)
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	3212      	adds	r2, #18
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	440a      	add	r2, r1
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3304      	adds	r3, #4
 80017be:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d102      	bne.n	80017d8 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3308      	adds	r3, #8
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3304      	adds	r3, #4
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e02c      	b.n	8001850 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	3b01      	subs	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e001      	b.n	8001808 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8001804:	2307      	movs	r3, #7
 8001806:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3308      	adds	r3, #8
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	ed93 7a00 	vldr	s14, [r3]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <MA_ADC1_IN2_Update+0xe0>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	edd3 6a00 	vldr	s13, [r3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	3304      	adds	r3, #4
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3308      	adds	r3, #8
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3304      	adds	r3, #4
 8001846:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3301      	adds	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b07      	cmp	r3, #7
 8001854:	d9cf      	bls.n	80017f6 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001862:	4293      	cmp	r3, r2
 8001864:	d99f      	bls.n	80017a6 <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	20001454 	.word	0x20001454
 8001878:	20000000 	.word	0x20000000

0800187c <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e00a      	b.n	80018a0 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3304      	adds	r3, #4
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	3301      	adds	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b07      	cmp	r3, #7
 80018a4:	d9f1      	bls.n	800188a <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	e00b      	b.n	80018ca <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3308      	adds	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d9f0      	bls.n	80018b2 <MA_ADC2_IN3_Init+0x36>
	}
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e05a      	b.n	80019a4 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4932      	ldr	r1, [pc, #200]	; (80019bc <MA_ADC2_IN3_Update+0xdc>)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	3212      	adds	r2, #18
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	440a      	add	r2, r1
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3304      	adds	r3, #4
 8001906:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b08      	cmp	r3, #8
 8001918:	d102      	bne.n	8001920 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3308      	adds	r3, #8
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3304      	adds	r3, #4
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e02c      	b.n	8001998 <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	3b01      	subs	r3, #1
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e001      	b.n	8001950 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 800194c:	2307      	movs	r3, #7
 800194e:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3308      	adds	r3, #8
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	ed93 7a00 	vldr	s14, [r3]
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <MA_ADC2_IN3_Update+0xe0>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	edd3 6a00 	vldr	s13, [r3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3308      	adds	r3, #8
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b07      	cmp	r3, #7
 800199c:	d9cf      	bls.n	800193e <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d99f      	bls.n	80018ee <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	20002860 	.word	0x20002860
 80019c0:	20000000 	.word	0x20000000

080019c4 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e00a      	b.n	80019e8 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3304      	adds	r3, #4
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	3301      	adds	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	d9f1      	bls.n	80019d2 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	e00b      	b.n	8001a12 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3308      	adds	r3, #8
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	3304      	adds	r3, #4
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d9f0      	bls.n	80019fa <MA_ADC2_IN4_Init+0x36>
	}
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e05a      	b.n	8001aec <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4932      	ldr	r1, [pc, #200]	; (8001b04 <MA_ADC2_IN4_Update+0xdc>)
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	3212      	adds	r2, #18
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	440a      	add	r2, r1
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d102      	bne.n	8001a68 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e02c      	b.n	8001ae0 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e001      	b.n	8001a98 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001a94:	2307      	movs	r3, #7
 8001a96:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <MA_ADC2_IN4_Update+0xe0>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	edd3 6a00 	vldr	s13, [r3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3304      	adds	r3, #4
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	d9cf      	bls.n	8001a86 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d99f      	bls.n	8001a36 <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20003c6c 	.word	0x20003c6c
 8001b08:	20000000 	.word	0x20000000

08001b0c <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e00a      	b.n	8001b30 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d9f1      	bls.n	8001b1a <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	e00b      	b.n	8001b5a <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3308      	adds	r3, #8
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d9f0      	bls.n	8001b42 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e05a      	b.n	8001c34 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4932      	ldr	r1, [pc, #200]	; (8001c4c <MA_ADC3_IN1_Update+0xdc>)
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	3212      	adds	r2, #18
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	440a      	add	r2, r1
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3304      	adds	r3, #4
 8001b96:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d102      	bne.n	8001bb0 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3304      	adds	r3, #4
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e02c      	b.n	8001c28 <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e001      	b.n	8001be0 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3308      	adds	r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	ed93 7a00 	vldr	s14, [r3]
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <MA_ADC3_IN1_Update+0xe0>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd3 6a00 	vldr	s13, [r3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3308      	adds	r3, #8
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	d9cf      	bls.n	8001bce <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d99f      	bls.n	8001b7e <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20005078 	.word	0x20005078
 8001c50:	20000000 	.word	0x20000000

08001c54 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e00a      	b.n	8001c78 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	3301      	adds	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b07      	cmp	r3, #7
 8001c7c:	d9f1      	bls.n	8001c62 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	e00b      	b.n	8001ca2 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3308      	adds	r3, #8
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2bff      	cmp	r3, #255	; 0xff
 8001ca6:	d9f0      	bls.n	8001c8a <MA_ADC3_IN2_Init+0x36>
	}
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e05a      	b.n	8001d7c <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4932      	ldr	r1, [pc, #200]	; (8001d94 <MA_ADC3_IN2_Update+0xdc>)
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	3212      	adds	r2, #18
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	440a      	add	r2, r1
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3304      	adds	r3, #4
 8001cde:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d102      	bne.n	8001cf8 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3308      	adds	r3, #8
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e02c      	b.n	8001d70 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e001      	b.n	8001d28 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8001d24:	2307      	movs	r3, #7
 8001d26:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3304      	adds	r3, #4
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <MA_ADC3_IN2_Update+0xe0>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	edd3 6a00 	vldr	s13, [r3]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b07      	cmp	r3, #7
 8001d74:	d9cf      	bls.n	8001d16 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d99f      	bls.n	8001cc6 <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20006484 	.word	0x20006484
 8001d98:	20000000 	.word	0x20000000

08001d9c <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <init_ADC1_IN1_struct+0x1c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001da8:	3314      	adds	r3, #20
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <init_ADC1_IN1_struct+0x20>)
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	2000bdd0 	.word	0x2000bdd0
 8001dbc:	20000048 	.word	0x20000048

08001dc0 <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001dc6:	7819      	ldrb	r1, [r3, #0]
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <init_ADC1_IN1_FO_biquad_filter+0x20>)
 8001dd2:	f008 fef5 	bl	800abc0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000048 	.word	0x20000048
 8001de0:	20001420 	.word	0x20001420

08001de4 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001dea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8001e02:	f008 fd21 	bl	800a848 <arm_biquad_cascade_df2T_f32>
   }
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000048 	.word	0x20000048
 8001e10:	20001420 	.word	0x20001420

08001e14 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <init_ADC1_IN2_struct+0x1c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001e20:	3320      	adds	r3, #32
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <init_ADC1_IN2_struct+0x20>)
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	2000bdd0 	.word	0x2000bdd0
 8001e34:	20001454 	.word	0x20001454

08001e38 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e3e:	7819      	ldrb	r1, [r3, #0]
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8001e4a:	f008 feb9 	bl	800abc0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20001454 	.word	0x20001454
 8001e58:	2000282c 	.word	0x2000282c

08001e5c <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e62:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 8001e7a:	f008 fce5 	bl	800a848 <arm_biquad_cascade_df2T_f32>
   }
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20001454 	.word	0x20001454
 8001e88:	2000282c 	.word	0x2000282c

08001e8c <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <init_ADC2_IN3_struct+0x1c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e98:	3314      	adds	r3, #20
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <init_ADC2_IN3_struct+0x20>)
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	2000bdd4 	.word	0x2000bdd4
 8001eac:	20002860 	.word	0x20002860

08001eb0 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001eb6:	7819      	ldrb	r1, [r3, #0]
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8001ec2:	f008 fe7d 	bl	800abc0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20002860 	.word	0x20002860
 8001ed0:	20003c38 	.word	0x20003c38

08001ed4 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001eda:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8001ef2:	f008 fca9 	bl	800a848 <arm_biquad_cascade_df2T_f32>
   }
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20002860 	.word	0x20002860
 8001f00:	20003c38 	.word	0x20003c38

08001f04 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <init_ADC2_IN4_struct+0x1c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001f10:	3320      	adds	r3, #32
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <init_ADC2_IN4_struct+0x20>)
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	2000bdd4 	.word	0x2000bdd4
 8001f24:	20003c6c 	.word	0x20003c6c

08001f28 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f2e:	7819      	ldrb	r1, [r3, #0]
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 8001f3a:	f008 fe41 	bl	800abc0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20003c6c 	.word	0x20003c6c
 8001f48:	20005044 	.word	0x20005044

08001f4c <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f52:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 8001f6a:	f008 fc6d 	bl	800a848 <arm_biquad_cascade_df2T_f32>
   }
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20003c6c 	.word	0x20003c6c
 8001f78:	20005044 	.word	0x20005044

08001f7c <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <init_ADC3_IN1_struct+0x1c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f88:	3314      	adds	r3, #20
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <init_ADC3_IN1_struct+0x20>)
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	2000bdd8 	.word	0x2000bdd8
 8001f9c:	20005078 	.word	0x20005078

08001fa0 <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001fa6:	7819      	ldrb	r1, [r3, #0]
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8001fb2:	f008 fe05 	bl	800abc0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20005078 	.word	0x20005078
 8001fc0:	20006450 	.word	0x20006450

08001fc4 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001fca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8001fe2:	f008 fc31 	bl	800a848 <arm_biquad_cascade_df2T_f32>
   }
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20005078 	.word	0x20005078
 8001ff0:	20006450 	.word	0x20006450

08001ff4 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <init_ADC3_IN2_struct+0x1c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8002000:	3320      	adds	r3, #32
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <init_ADC3_IN2_struct+0x20>)
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	2000bdd8 	.word	0x2000bdd8
 8002014:	20006484 	.word	0x20006484

08002018 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 800201e:	7819      	ldrb	r1, [r3, #0]
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 800202a:	f008 fdc9 	bl	800abc0 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20006484 	.word	0x20006484
 8002038:	2000785c 	.word	0x2000785c

0800203c <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002042:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 800205a:	f008 fbf5 	bl	800a848 <arm_biquad_cascade_df2T_f32>
   }
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20006484 	.word	0x20006484
 8002068:	2000785c 	.word	0x2000785c

0800206c <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	e010      	b.n	80020a2 <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3308      	adds	r3, #8
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	3304      	adds	r3, #4
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ed97 7a03 	vldr	s14, [r7, #12]
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	3301      	adds	r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2bff      	cmp	r3, #255	; 0xff
 80020a6:	d9eb      	bls.n	8002080 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80020a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ac:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020c8 <ADC1_IN1_OffsetCalc+0x5c>
 80020b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020b4:	eef0 7a66 	vmov.f32	s15, s13
}
 80020b8:	eeb0 0a67 	vmov.f32	s0, s15
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	43800000 	.word	0x43800000

080020cc <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	e010      	b.n	8002102 <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3308      	adds	r3, #8
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3301      	adds	r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2bff      	cmp	r3, #255	; 0xff
 8002106:	d9eb      	bls.n	80020e0 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002108:	edd7 7a03 	vldr	s15, [r7, #12]
 800210c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002128 <ADC1_IN2_OffsetCalc+0x5c>
 8002110:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002114:	eef0 7a66 	vmov.f32	s15, s13
}
 8002118:	eeb0 0a67 	vmov.f32	s0, s15
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	43800000 	.word	0x43800000

0800212c <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	e010      	b.n	8002162 <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3308      	adds	r3, #8
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ed97 7a03 	vldr	s14, [r7, #12]
 8002154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002158:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2bff      	cmp	r3, #255	; 0xff
 8002166:	d9eb      	bls.n	8002140 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002168:	edd7 7a03 	vldr	s15, [r7, #12]
 800216c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002188 <ADC2_IN3_OffsetCalc+0x5c>
 8002170:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002174:	eef0 7a66 	vmov.f32	s15, s13
}
 8002178:	eeb0 0a67 	vmov.f32	s0, s15
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	43800000 	.word	0x43800000

0800218c <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	e010      	b.n	80021c2 <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3308      	adds	r3, #8
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2bff      	cmp	r3, #255	; 0xff
 80021c6:	d9eb      	bls.n	80021a0 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80021c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021e8 <ADC2_IN4_OffsetCalc+0x5c>
 80021d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	43800000 	.word	0x43800000

080021ec <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	e010      	b.n	8002222 <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3308      	adds	r3, #8
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ed97 7a03 	vldr	s14, [r7, #12]
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3301      	adds	r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2bff      	cmp	r3, #255	; 0xff
 8002226:	d9eb      	bls.n	8002200 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002228:	edd7 7a03 	vldr	s15, [r7, #12]
 800222c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002248 <ADC3_IN1_OffsetCalc+0x5c>
 8002230:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002234:	eef0 7a66 	vmov.f32	s15, s13
}
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	43800000 	.word	0x43800000

0800224c <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	e010      	b.n	8002282 <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3308      	adds	r3, #8
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ed97 7a03 	vldr	s14, [r7, #12]
 8002274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002278:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2bff      	cmp	r3, #255	; 0xff
 8002286:	d9eb      	bls.n	8002260 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002288:	edd7 7a03 	vldr	s15, [r7, #12]
 800228c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022a8 <ADC3_IN2_OffsetCalc+0x5c>
 8002290:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002294:	eef0 7a66 	vmov.f32	s15, s13
}
 8002298:	eeb0 0a67 	vmov.f32	s0, s15
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	43800000 	.word	0x43800000

080022ac <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	e01a      	b.n	80022fa <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3308      	adds	r3, #8
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	edd7 7a00 	vldr	s15, [r7]
 80022d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022dc:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 80022e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3301      	adds	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2bff      	cmp	r3, #255	; 0xff
 80022fe:	d9e1      	bls.n	80022c4 <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002300:	ed97 7a05 	vldr	s14, [r7, #20]
 8002304:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002340 <ADC1_IN1_SD_BL+0x94>
 8002308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230c:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 8002310:	6978      	ldr	r0, [r7, #20]
 8002312:	f7fe f8e5 	bl	80004e0 <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	ec43 2b10 	vmov	d0, r2, r3
 800231e:	f009 f85f 	bl	800b3e0 <sqrt>
 8002322:	ec53 2b10 	vmov	r2, r3, d0
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fc09 	bl	8000b40 <__aeabi_d2f>
 800232e:	4603      	mov	r3, r0
 8002330:	ee07 3a90 	vmov	s15, r3
}
 8002334:	eeb0 0a67 	vmov.f32	s0, s15
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	43800000 	.word	0x43800000

08002344 <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e01a      	b.n	8002392 <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3308      	adds	r3, #8
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3304      	adds	r3, #4
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	edd7 7a00 	vldr	s15, [r7]
 8002370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002374:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 8002378:	edd7 7a03 	vldr	s15, [r7, #12]
 800237c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002380:	ed97 7a05 	vldr	s14, [r7, #20]
 8002384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002388:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3301      	adds	r3, #1
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2bff      	cmp	r3, #255	; 0xff
 8002396:	d9e1      	bls.n	800235c <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002398:	ed97 7a05 	vldr	s14, [r7, #20]
 800239c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80023d8 <ADC1_IN2_SD_BL+0x94>
 80023a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a4:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 80023a8:	6978      	ldr	r0, [r7, #20]
 80023aa:	f7fe f899 	bl	80004e0 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	ec43 2b10 	vmov	d0, r2, r3
 80023b6:	f009 f813 	bl	800b3e0 <sqrt>
 80023ba:	ec53 2b10 	vmov	r2, r3, d0
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fbbd 	bl	8000b40 <__aeabi_d2f>
 80023c6:	4603      	mov	r3, r0
 80023c8:	ee07 3a90 	vmov	s15, r3

}
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	43800000 	.word	0x43800000

080023dc <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e01a      	b.n	800242a <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3308      	adds	r3, #8
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3304      	adds	r3, #4
 8002400:	ed93 7a00 	vldr	s14, [r3]
 8002404:	edd7 7a00 	vldr	s15, [r7]
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 8002410:	edd7 7a03 	vldr	s15, [r7, #12]
 8002414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002418:	ed97 7a05 	vldr	s14, [r7, #20]
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	3301      	adds	r3, #1
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2bff      	cmp	r3, #255	; 0xff
 800242e:	d9e1      	bls.n	80023f4 <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002430:	ed97 7a05 	vldr	s14, [r7, #20]
 8002434:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002470 <ADC2_IN3_SD_BL+0x94>
 8002438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800243c:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f7fe f84d 	bl	80004e0 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	ec43 2b10 	vmov	d0, r2, r3
 800244e:	f008 ffc7 	bl	800b3e0 <sqrt>
 8002452:	ec53 2b10 	vmov	r2, r3, d0
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe fb71 	bl	8000b40 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	ee07 3a90 	vmov	s15, r3

}
 8002464:	eeb0 0a67 	vmov.f32	s0, s15
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	43800000 	.word	0x43800000

08002474 <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	e01a      	b.n	80024c2 <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	3308      	adds	r3, #8
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	ed93 7a00 	vldr	s14, [r3]
 800249c:	edd7 7a00 	vldr	s15, [r7]
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 80024a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	3301      	adds	r3, #1
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2bff      	cmp	r3, #255	; 0xff
 80024c6:	d9e1      	bls.n	800248c <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80024c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024cc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002508 <ADC2_IN4_SD_BL+0x94>
 80024d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d4:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f7fe f801 	bl	80004e0 <__aeabi_f2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	ec43 2b10 	vmov	d0, r2, r3
 80024e6:	f008 ff7b 	bl	800b3e0 <sqrt>
 80024ea:	ec53 2b10 	vmov	r2, r3, d0
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7fe fb25 	bl	8000b40 <__aeabi_d2f>
 80024f6:	4603      	mov	r3, r0
 80024f8:	ee07 3a90 	vmov	s15, r3

}
 80024fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	43800000 	.word	0x43800000

0800250c <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e01a      	b.n	800255a <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	3308      	adds	r3, #8
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3304      	adds	r3, #4
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	edd7 7a00 	vldr	s15, [r7]
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 8002540:	edd7 7a03 	vldr	s15, [r7, #12]
 8002544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002548:	ed97 7a05 	vldr	s14, [r7, #20]
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3301      	adds	r3, #1
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2bff      	cmp	r3, #255	; 0xff
 800255e:	d9e1      	bls.n	8002524 <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002560:	ed97 7a05 	vldr	s14, [r7, #20]
 8002564:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80025a0 <ADC3_IN1_SD_BL+0x94>
 8002568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256c:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 8002570:	6978      	ldr	r0, [r7, #20]
 8002572:	f7fd ffb5 	bl	80004e0 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	ec43 2b10 	vmov	d0, r2, r3
 800257e:	f008 ff2f 	bl	800b3e0 <sqrt>
 8002582:	ec53 2b10 	vmov	r2, r3, d0
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fad9 	bl	8000b40 <__aeabi_d2f>
 800258e:	4603      	mov	r3, r0
 8002590:	ee07 3a90 	vmov	s15, r3

}
 8002594:	eeb0 0a67 	vmov.f32	s0, s15
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	43800000 	.word	0x43800000

080025a4 <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	e01a      	b.n	80025f2 <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	3308      	adds	r3, #8
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3304      	adds	r3, #4
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	edd7 7a00 	vldr	s15, [r7]
 80025d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 80025d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3301      	adds	r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2bff      	cmp	r3, #255	; 0xff
 80025f6:	d9e1      	bls.n	80025bc <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80025f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80025fc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002638 <ADC3_IN2_SD_BL+0x94>
 8002600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002604:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7fd ff69 	bl	80004e0 <__aeabi_f2d>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	ec43 2b10 	vmov	d0, r2, r3
 8002616:	f008 fee3 	bl	800b3e0 <sqrt>
 800261a:	ec53 2b10 	vmov	r2, r3, d0
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fa8d 	bl	8000b40 <__aeabi_d2f>
 8002626:	4603      	mov	r3, r0
 8002628:	ee07 3a90 	vmov	s15, r3

}
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	43800000 	.word	0x43800000

0800263c <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800264e:	2301      	movs	r3, #1
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e055      	b.n	8002700 <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	3308      	adds	r3, #8
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3304      	adds	r3, #4
 8002660:	ed93 7a00 	vldr	s14, [r3]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	3b01      	subs	r3, #1
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	3308      	adds	r3, #8
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3301      	adds	r3, #1
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	3308      	adds	r3, #8
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3308      	adds	r3, #8
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a4:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 80026a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80026ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd1d      	ble.n	80026fa <ADC1_IN1_SSC+0xbe>
 80026be:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c2:	eef0 7ae7 	vabs.f32	s15, s15
 80026c6:	ed97 7a00 	vldr	s14, [r7]
 80026ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	d40a      	bmi.n	80026ea <ADC1_IN1_SSC+0xae>
 80026d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d8:	eef0 7ae7 	vabs.f32	s15, s15
 80026dc:	ed97 7a00 	vldr	s14, [r7]
 80026e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	d507      	bpl.n	80026fa <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 80026ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f6:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3301      	adds	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d9a6      	bls.n	8002654 <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	ee07 3a90 	vmov	s15, r3
}
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 800271a:	b480      	push	{r7}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800272c:	2301      	movs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e055      	b.n	80027de <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3308      	adds	r3, #8
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3304      	adds	r3, #4
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3b01      	subs	r3, #1
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	3308      	adds	r3, #8
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002758:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	3301      	adds	r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	3308      	adds	r3, #8
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	ed93 7a00 	vldr	s14, [r3]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	3308      	adds	r3, #8
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 8002786:	ed97 7a03 	vldr	s14, [r7, #12]
 800278a:	edd7 7a02 	vldr	s15, [r7, #8]
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	dd1d      	ble.n	80027d8 <ADC1_IN2_SSC+0xbe>
 800279c:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a0:	eef0 7ae7 	vabs.f32	s15, s15
 80027a4:	ed97 7a00 	vldr	s14, [r7]
 80027a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	d40a      	bmi.n	80027c8 <ADC1_IN2_SSC+0xae>
 80027b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b6:	eef0 7ae7 	vabs.f32	s15, s15
 80027ba:	ed97 7a00 	vldr	s14, [r7]
 80027be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	d507      	bpl.n	80027d8 <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027d4:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	3301      	adds	r3, #1
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2bff      	cmp	r3, #255	; 0xff
 80027e2:	d9a6      	bls.n	8002732 <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	ee07 3a90 	vmov	s15, r3
}
 80027ea:	eeb0 0a67 	vmov.f32	s0, s15
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800280a:	2301      	movs	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e055      	b.n	80028bc <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3308      	adds	r3, #8
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	ed93 7a00 	vldr	s14, [r3]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	3b01      	subs	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	3308      	adds	r3, #8
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002836:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	3301      	adds	r3, #1
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	3308      	adds	r3, #8
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	3308      	adds	r3, #8
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002860:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 8002864:	ed97 7a03 	vldr	s14, [r7, #12]
 8002868:	edd7 7a02 	vldr	s15, [r7, #8]
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002878:	dd1d      	ble.n	80028b6 <ADC2_IN3_SSC+0xbe>
 800287a:	edd7 7a03 	vldr	s15, [r7, #12]
 800287e:	eef0 7ae7 	vabs.f32	s15, s15
 8002882:	ed97 7a00 	vldr	s14, [r7]
 8002886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	d40a      	bmi.n	80028a6 <ADC2_IN3_SSC+0xae>
 8002890:	edd7 7a02 	vldr	s15, [r7, #8]
 8002894:	eef0 7ae7 	vabs.f32	s15, s15
 8002898:	ed97 7a00 	vldr	s14, [r7]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d507      	bpl.n	80028b6 <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 80028a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028b2:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	3301      	adds	r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2bff      	cmp	r3, #255	; 0xff
 80028c0:	d9a6      	bls.n	8002810 <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	ee07 3a90 	vmov	s15, r3
}
 80028c8:	eeb0 0a67 	vmov.f32	s0, s15
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b087      	sub	sp, #28
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e055      	b.n	800299a <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	3308      	adds	r3, #8
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	3b01      	subs	r3, #1
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	3308      	adds	r3, #8
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002914:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	3301      	adds	r3, #1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	3308      	adds	r3, #8
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	3308      	adds	r3, #8
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3304      	adds	r3, #4
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 8002942:	ed97 7a03 	vldr	s14, [r7, #12]
 8002946:	edd7 7a02 	vldr	s15, [r7, #8]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002956:	dd1d      	ble.n	8002994 <ADC2_IN4_SSC+0xbe>
 8002958:	edd7 7a03 	vldr	s15, [r7, #12]
 800295c:	eef0 7ae7 	vabs.f32	s15, s15
 8002960:	ed97 7a00 	vldr	s14, [r7]
 8002964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	d40a      	bmi.n	8002984 <ADC2_IN4_SSC+0xae>
 800296e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002972:	eef0 7ae7 	vabs.f32	s15, s15
 8002976:	ed97 7a00 	vldr	s14, [r7]
 800297a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002982:	d507      	bpl.n	8002994 <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 8002984:	edd7 7a05 	vldr	s15, [r7, #20]
 8002988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800298c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002990:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	3301      	adds	r3, #1
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2bff      	cmp	r3, #255	; 0xff
 800299e:	d9a6      	bls.n	80028ee <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	ee07 3a90 	vmov	s15, r3
}
 80029a6:	eeb0 0a67 	vmov.f32	s0, s15
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80029c6:	2301      	movs	r3, #1
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	e055      	b.n	8002a78 <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3308      	adds	r3, #8
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	3b01      	subs	r3, #1
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	3308      	adds	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	3301      	adds	r3, #1
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	3308      	adds	r3, #8
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1c:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 8002a20:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	dd1d      	ble.n	8002a72 <ADC3_IN1_SSC+0xbe>
 8002a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a3a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a3e:	ed97 7a00 	vldr	s14, [r7]
 8002a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4a:	d40a      	bmi.n	8002a62 <ADC3_IN1_SSC+0xae>
 8002a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a50:	eef0 7ae7 	vabs.f32	s15, s15
 8002a54:	ed97 7a00 	vldr	s14, [r7]
 8002a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	d507      	bpl.n	8002a72 <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 8002a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a6e:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	3301      	adds	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d9a6      	bls.n	80029cc <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	ee07 3a90 	vmov	s15, r3
}
 8002a84:	eeb0 0a67 	vmov.f32	s0, s15
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e055      	b.n	8002b56 <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	ed93 7a00 	vldr	s14, [r3]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	3308      	adds	r3, #8
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	3308      	adds	r3, #8
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afa:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 8002afe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	dd1d      	ble.n	8002b50 <ADC3_IN2_SSC+0xbe>
 8002b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b18:	eef0 7ae7 	vabs.f32	s15, s15
 8002b1c:	ed97 7a00 	vldr	s14, [r7]
 8002b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	d40a      	bmi.n	8002b40 <ADC3_IN2_SSC+0xae>
 8002b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b32:	ed97 7a00 	vldr	s14, [r7]
 8002b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d507      	bpl.n	8002b50 <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 8002b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b4c:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	3301      	adds	r3, #1
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	d9a6      	bls.n	8002aaa <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	ee07 3a90 	vmov	s15, r3
}
 8002b62:	eeb0 0a67 	vmov.f32	s0, s15
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <ADC1_IN1_STFT_Update>:
float32_t FFT_Mag_Res_6[ADC_DMA_SIXTEENTHBUFFERSIZE / 2];


//FUNCTION DEFINITIONS
float32_t* ADC1_IN1_STFT_Update(ADC1_IN1_STFT_par*ADC1_IN1_STFT_par_ptr, ADC1_IN1_MA*ADC1_IN1_STFT_ptr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	ADC1_IN1_STFT_par_ptr->Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b80:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <ADC1_IN1_STFT_Update+0x1b8>)
 8002b82:	601a      	str	r2, [r3, #0]
	ADC1_IN1_STFT_par_ptr->mu_1 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f)); // To ensure symmetry
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b8a:	4a68      	ldr	r2, [pc, #416]	; (8002d2c <ADC1_IN1_STFT_Update+0x1bc>)
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e045      	b.n	8002c20 <ADC1_IN1_STFT_Update+0xb0>
	{
		float32_t exponent_1 = -0.5f*(pow(((n - ADC1_IN1_STFT_par_ptr->mu_1)/ADC1_IN1_STFT_par_ptr->Sigma_1), 2));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bba:	ee16 0a90 	vmov	r0, s13
 8002bbe:	f7fd fc8f 	bl	80004e0 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002d20 <ADC1_IN1_STFT_Update+0x1b0>
 8002bca:	ec43 2b10 	vmov	d0, r2, r3
 8002bce:	f008 fb97 	bl	800b300 <pow>
 8002bd2:	ec51 0b10 	vmov	r0, r1, d0
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <ADC1_IN1_STFT_Update+0x1c0>)
 8002bdc:	f7fd fcd8 	bl	8000590 <__aeabi_dmul>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f7fd ffaa 	bl	8000b40 <__aeabi_d2f>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60bb      	str	r3, [r7, #8]
		ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[n] = exp(exponent_1);
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f7fd fc75 	bl	80004e0 <__aeabi_f2d>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	ec43 2b10 	vmov	d0, r2, r3
 8002bfe:	f008 fb37 	bl	800b270 <exp>
 8002c02:	ec53 2b10 	vmov	r2, r3, d0
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ff99 	bl	8000b40 <__aeabi_d2f>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2bff      	cmp	r3, #255	; 0xff
 8002c24:	d9b6      	bls.n	8002b94 <ADC1_IN1_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e01a      	b.n	8002c62 <ADC1_IN1_STFT_Update+0xf2>
	{
		ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1[m] = ADC1_IN1_STFT_ptr->MA_ADC1_IN1_OutBfr[m] * ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[m];
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3308      	adds	r3, #8
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2bff      	cmp	r3, #255	; 0xff
 8002c66:	d9e1      	bls.n	8002c2c <ADC1_IN1_STFT_Update+0xbc>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_1 = arm_rfft_fast_init_f32 (&ADC1_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c6c:	4831      	ldr	r0, [pc, #196]	; (8002d34 <ADC1_IN1_STFT_Update+0x1c4>)
 8002c6e:	f006 ff7f 	bl	8009b70 <arm_rfft_fast_init_f32>
 8002c72:	4603      	mov	r3, r0
 8002c74:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_1 == ARM_MATH_SUCCESS)
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d14b      	bne.n	8002d16 <ADC1_IN1_STFT_Update+0x1a6>
	{
		arm_rfft_fast_f32 (&ADC1_IN1_FFT, ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1 , ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr, 0 );
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f603 0208 	addw	r2, r3, #2056	; 0x808
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	4829      	ldr	r0, [pc, #164]	; (8002d34 <ADC1_IN1_STFT_Update+0x1c4>)
 8002c8e:	f007 f853 	bl	8009d38 <arm_rfft_fast_f32>

		uint32_t mag_indx_1 = 0.0f; // Index to fill the frequency magnitude response buffer without skips
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]

		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	e039      	b.n	8002d10 <ADC1_IN1_STFT_Update+0x1a0>
		{
			FFT_Mag_Res_1[mag_indx_1] = sqrtf((ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p]) + (ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1])); // Calculates the magnitude response
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	ed93 7a00 	vldr	s14, [r3]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	edd3 6a00 	vldr	s13, [r3]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf0:	f008 fba2 	bl	800b438 <sqrtf>
 8002cf4:	eef0 7a40 	vmov.f32	s15, s0
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <ADC1_IN1_STFT_Update+0x1c8>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_1++;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
		for (uint32_t p = 0; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2bff      	cmp	r3, #255	; 0xff
 8002d14:	d9c2      	bls.n	8002c9c <ADC1_IN1_STFT_Update+0x12c>
		}
	}

	return FFT_Mag_Res_1;
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <ADC1_IN1_STFT_Update+0x1c8>)
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	00000000 	.word	0x00000000
 8002d24:	40000000 	.word	0x40000000
 8002d28:	42280000 	.word	0x42280000
 8002d2c:	42ff0000 	.word	0x42ff0000
 8002d30:	bfe00000 	.word	0xbfe00000
 8002d34:	200094ec 	.word	0x200094ec
 8002d38:	2000957c 	.word	0x2000957c
 8002d3c:	00000000 	.word	0x00000000

08002d40 <ADC1_IN2_STFT_Update>:

float32_t* ADC1_IN2_STFT_Update(ADC1_IN2_STFT_par*ADC1_IN2_STFT_par_ptr, ADC1_IN2_MA*ADC1_IN2_STFT_ptr)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	ADC1_IN2_STFT_par_ptr->Sigma_2 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d50:	4a69      	ldr	r2, [pc, #420]	; (8002ef8 <ADC1_IN2_STFT_Update+0x1b8>)
 8002d52:	601a      	str	r2, [r3, #0]
	ADC1_IN2_STFT_par_ptr->mu_2 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d5a:	4a68      	ldr	r2, [pc, #416]	; (8002efc <ADC1_IN2_STFT_Update+0x1bc>)
 8002d5c:	601a      	str	r2, [r3, #0]

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e045      	b.n	8002df0 <ADC1_IN2_STFT_Update+0xb0>
	{
		float32_t exponent_2 = -0.5f*(pow(((n - ADC1_IN2_STFT_par_ptr->mu_2)/ADC1_IN2_STFT_par_ptr->Sigma_2), 2));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d8a:	ee16 0a90 	vmov	r0, s13
 8002d8e:	f7fd fba7 	bl	80004e0 <__aeabi_f2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002ef0 <ADC1_IN2_STFT_Update+0x1b0>
 8002d9a:	ec43 2b10 	vmov	d0, r2, r3
 8002d9e:	f008 faaf 	bl	800b300 <pow>
 8002da2:	ec51 0b10 	vmov	r0, r1, d0
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <ADC1_IN2_STFT_Update+0x1c0>)
 8002dac:	f7fd fbf0 	bl	8000590 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fd fec2 	bl	8000b40 <__aeabi_d2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60bb      	str	r3, [r7, #8]
		ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[n] = exp(exponent_2);
 8002dc0:	68b8      	ldr	r0, [r7, #8]
 8002dc2:	f7fd fb8d 	bl	80004e0 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	ec43 2b10 	vmov	d0, r2, r3
 8002dce:	f008 fa4f 	bl	800b270 <exp>
 8002dd2:	ec53 2b10 	vmov	r2, r3, d0
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd feb1 	bl	8000b40 <__aeabi_d2f>
 8002dde:	4601      	mov	r1, r0
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d9b6      	bls.n	8002d64 <ADC1_IN2_STFT_Update+0x24>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e01a      	b.n	8002e32 <ADC1_IN2_STFT_Update+0xf2>
	{
		ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2[m] = ADC1_IN2_STFT_ptr->MA_ADC1_IN2_OutBfr[m] * ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[m];
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3308      	adds	r3, #8
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2bff      	cmp	r3, #255	; 0xff
 8002e36:	d9e1      	bls.n	8002dfc <ADC1_IN2_STFT_Update+0xbc>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_2 = arm_rfft_fast_init_f32 (&ADC1_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e3c:	4831      	ldr	r0, [pc, #196]	; (8002f04 <ADC1_IN2_STFT_Update+0x1c4>)
 8002e3e:	f006 fe97 	bl	8009b70 <arm_rfft_fast_init_f32>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_2 == ARM_MATH_SUCCESS)
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d149      	bne.n	8002ee2 <ADC1_IN2_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC1_IN2_FFT, ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2 , ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr, 0 );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f603 0208 	addw	r2, r3, #2056	; 0x808
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4829      	ldr	r0, [pc, #164]	; (8002f04 <ADC1_IN2_STFT_Update+0x1c4>)
 8002e5e:	f006 ff6b 	bl	8009d38 <arm_rfft_fast_f32>

		uint32_t mag_indx_2 = 0.0f;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002e66:	e039      	b.n	8002edc <ADC1_IN2_STFT_Update+0x19c>
		{
			FFT_Mag_Res_2[mag_indx_2] = sqrtf((ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p]) + (ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1]));
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	edd3 6a00 	vldr	s13, [r3]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f008 fabc 	bl	800b438 <sqrtf>
 8002ec0:	eef0 7a40 	vmov.f32	s15, s0
 8002ec4:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <ADC1_IN2_STFT_Update+0x1c8>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_2++;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	3302      	adds	r3, #2
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2bff      	cmp	r3, #255	; 0xff
 8002ee0:	d9c2      	bls.n	8002e68 <ADC1_IN2_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_2;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <ADC1_IN2_STFT_Update+0x1c8>)
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	f3af 8000 	nop.w
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40000000 	.word	0x40000000
 8002ef8:	42280000 	.word	0x42280000
 8002efc:	42ff0000 	.word	0x42ff0000
 8002f00:	bfe00000 	.word	0xbfe00000
 8002f04:	20009504 	.word	0x20009504
 8002f08:	2000977c 	.word	0x2000977c
 8002f0c:	00000000 	.word	0x00000000

08002f10 <ADC2_IN3_STFT_Update>:

float32_t* ADC2_IN3_STFT_Update(ADC2_IN3_STFT_par*ADC2_IN3_STFT_par_ptr, ADC2_IN3_MA*ADC2_IN3_STFT_ptr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	ADC2_IN3_STFT_par_ptr->Sigma_3 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f20:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <ADC2_IN3_STFT_Update+0x1b8>)
 8002f22:	601a      	str	r2, [r3, #0]
	ADC2_IN3_STFT_par_ptr->mu_3 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f2a:	4a68      	ldr	r2, [pc, #416]	; (80030cc <ADC2_IN3_STFT_Update+0x1bc>)
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e045      	b.n	8002fc0 <ADC2_IN3_STFT_Update+0xb0>
	{
		float32_t exponent_3 = -0.5f*(pow(((n - ADC2_IN3_STFT_par_ptr->mu_3)/ADC2_IN3_STFT_par_ptr->Sigma_3), 2));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f5a:	ee16 0a90 	vmov	r0, s13
 8002f5e:	f7fd fabf 	bl	80004e0 <__aeabi_f2d>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80030c0 <ADC2_IN3_STFT_Update+0x1b0>
 8002f6a:	ec43 2b10 	vmov	d0, r2, r3
 8002f6e:	f008 f9c7 	bl	800b300 <pow>
 8002f72:	ec51 0b10 	vmov	r0, r1, d0
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <ADC2_IN3_STFT_Update+0x1c0>)
 8002f7c:	f7fd fb08 	bl	8000590 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7fd fdda 	bl	8000b40 <__aeabi_d2f>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60bb      	str	r3, [r7, #8]
		ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[n] = exp(exponent_3);
 8002f90:	68b8      	ldr	r0, [r7, #8]
 8002f92:	f7fd faa5 	bl	80004e0 <__aeabi_f2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	ec43 2b10 	vmov	d0, r2, r3
 8002f9e:	f008 f967 	bl	800b270 <exp>
 8002fa2:	ec53 2b10 	vmov	r2, r3, d0
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fdc9 	bl	8000b40 <__aeabi_d2f>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2bff      	cmp	r3, #255	; 0xff
 8002fc4:	d9b6      	bls.n	8002f34 <ADC2_IN3_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e01a      	b.n	8003002 <ADC2_IN3_STFT_Update+0xf2>
	{
		ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3[m] = ADC2_IN3_STFT_ptr->MA_ADC2_IN3_OutBfr[m] * ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[m];
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	3301      	adds	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2bff      	cmp	r3, #255	; 0xff
 8003006:	d9e1      	bls.n	8002fcc <ADC2_IN3_STFT_Update+0xbc>
	}

	arm_status FFT_status_3 = arm_rfft_fast_init_f32 (&ADC2_IN3_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300c:	4831      	ldr	r0, [pc, #196]	; (80030d4 <ADC2_IN3_STFT_Update+0x1c4>)
 800300e:	f006 fdaf 	bl	8009b70 <arm_rfft_fast_init_f32>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_3 == ARM_MATH_SUCCESS)
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d149      	bne.n	80030b2 <ADC2_IN3_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC2_IN3_FFT, ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3 , ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr, 0 );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f603 0208 	addw	r2, r3, #2056	; 0x808
 800302a:	2300      	movs	r3, #0
 800302c:	4829      	ldr	r0, [pc, #164]	; (80030d4 <ADC2_IN3_STFT_Update+0x1c4>)
 800302e:	f006 fe83 	bl	8009d38 <arm_rfft_fast_f32>

		uint32_t mag_indx_3 = 0.0f;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003036:	e039      	b.n	80030ac <ADC2_IN3_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_3] = sqrtf((ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p]) + (ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1]));
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3301      	adds	r3, #1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	edd3 6a00 	vldr	s13, [r3]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3301      	adds	r3, #1
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	f008 f9d4 	bl	800b438 <sqrtf>
 8003090:	eef0 7a40 	vmov.f32	s15, s0
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <ADC2_IN3_STFT_Update+0x1c8>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_3++;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3301      	adds	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	3302      	adds	r3, #2
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2bff      	cmp	r3, #255	; 0xff
 80030b0:	d9c2      	bls.n	8003038 <ADC2_IN3_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_3;
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <ADC2_IN3_STFT_Update+0x1c8>)
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f3af 8000 	nop.w
 80030c0:	00000000 	.word	0x00000000
 80030c4:	40000000 	.word	0x40000000
 80030c8:	42280000 	.word	0x42280000
 80030cc:	42ff0000 	.word	0x42ff0000
 80030d0:	bfe00000 	.word	0xbfe00000
 80030d4:	2000951c 	.word	0x2000951c
 80030d8:	2000997c 	.word	0x2000997c
 80030dc:	00000000 	.word	0x00000000

080030e0 <ADC2_IN4_STFT_Update>:

float32_t* ADC2_IN4_STFT_Update(ADC2_IN4_STFT_par*ADC2_IN4_STFT_par_ptr, ADC2_IN4_MA*ADC2_IN4_STFT_ptr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	ADC2_IN4_STFT_par_ptr->Sigma_4 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f0:	4a69      	ldr	r2, [pc, #420]	; (8003298 <ADC2_IN4_STFT_Update+0x1b8>)
 80030f2:	601a      	str	r2, [r3, #0]
	ADC2_IN4_STFT_par_ptr->mu_4 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030fa:	4a68      	ldr	r2, [pc, #416]	; (800329c <ADC2_IN4_STFT_Update+0x1bc>)
 80030fc:	601a      	str	r2, [r3, #0]

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e045      	b.n	8003190 <ADC2_IN4_STFT_Update+0xb0>
	{
		float32_t exponent_4 = -0.5f*(pow(((n - ADC2_IN4_STFT_par_ptr->mu_4)/ADC2_IN4_STFT_par_ptr->Sigma_4), 2));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800312a:	ee16 0a90 	vmov	r0, s13
 800312e:	f7fd f9d7 	bl	80004e0 <__aeabi_f2d>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8003290 <ADC2_IN4_STFT_Update+0x1b0>
 800313a:	ec43 2b10 	vmov	d0, r2, r3
 800313e:	f008 f8df 	bl	800b300 <pow>
 8003142:	ec51 0b10 	vmov	r0, r1, d0
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <ADC2_IN4_STFT_Update+0x1c0>)
 800314c:	f7fd fa20 	bl	8000590 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	f7fd fcf2 	bl	8000b40 <__aeabi_d2f>
 800315c:	4603      	mov	r3, r0
 800315e:	60bb      	str	r3, [r7, #8]
		ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[n] = exp(exponent_4);
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	f7fd f9bd 	bl	80004e0 <__aeabi_f2d>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	ec43 2b10 	vmov	d0, r2, r3
 800316e:	f008 f87f 	bl	800b270 <exp>
 8003172:	ec53 2b10 	vmov	r2, r3, d0
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f7fd fce1 	bl	8000b40 <__aeabi_d2f>
 800317e:	4601      	mov	r1, r0
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2bff      	cmp	r3, #255	; 0xff
 8003194:	d9b6      	bls.n	8003104 <ADC2_IN4_STFT_Update+0x24>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e01a      	b.n	80031d2 <ADC2_IN4_STFT_Update+0xf2>
	{
		ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4[m] = ADC2_IN4_STFT_ptr->MA_ADC2_IN4_OutBfr[m] * ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[m];
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3308      	adds	r3, #8
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3304      	adds	r3, #4
 80031a8:	ed93 7a00 	vldr	s14, [r3]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3301      	adds	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d9e1      	bls.n	800319c <ADC2_IN4_STFT_Update+0xbc>
	}

	arm_status FFT_status_4 = arm_rfft_fast_init_f32 (&ADC2_IN4_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80031d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031dc:	4831      	ldr	r0, [pc, #196]	; (80032a4 <ADC2_IN4_STFT_Update+0x1c4>)
 80031de:	f006 fcc7 	bl	8009b70 <arm_rfft_fast_init_f32>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_4 == ARM_MATH_SUCCESS)
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d149      	bne.n	8003282 <ADC2_IN4_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC2_IN4_FFT, ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4 , ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr, 0 );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f603 0208 	addw	r2, r3, #2056	; 0x808
 80031fa:	2300      	movs	r3, #0
 80031fc:	4829      	ldr	r0, [pc, #164]	; (80032a4 <ADC2_IN4_STFT_Update+0x1c4>)
 80031fe:	f006 fd9b 	bl	8009d38 <arm_rfft_fast_f32>

		uint32_t mag_indx_4 = 0.0f;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003206:	e039      	b.n	800327c <ADC2_IN4_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_4] = sqrtf((ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p]) + (ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1]));
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	ed93 7a00 	vldr	s14, [r3]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	3301      	adds	r3, #1
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	edd3 6a00 	vldr	s13, [r3]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3301      	adds	r3, #1
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	f008 f8ec 	bl	800b438 <sqrtf>
 8003260:	eef0 7a40 	vmov.f32	s15, s0
 8003264:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <ADC2_IN4_STFT_Update+0x1c8>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_4++;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3302      	adds	r3, #2
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2bff      	cmp	r3, #255	; 0xff
 8003280:	d9c2      	bls.n	8003208 <ADC2_IN4_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_4;
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <ADC2_IN4_STFT_Update+0x1cc>)
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	f3af 8000 	nop.w
 8003290:	00000000 	.word	0x00000000
 8003294:	40000000 	.word	0x40000000
 8003298:	42280000 	.word	0x42280000
 800329c:	42ff0000 	.word	0x42ff0000
 80032a0:	bfe00000 	.word	0xbfe00000
 80032a4:	20009534 	.word	0x20009534
 80032a8:	2000997c 	.word	0x2000997c
 80032ac:	20009b7c 	.word	0x20009b7c

080032b0 <ADC3_IN1_STFT_Update>:

float32_t* ADC3_IN1_STFT_Update(ADC3_IN1_STFT_par*ADC3_IN1_STFT_par_ptr, ADC3_IN1_MA*ADC3_IN1_STFT_ptr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
	ADC3_IN1_STFT_par_ptr->Sigma_5 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032c0:	4a69      	ldr	r2, [pc, #420]	; (8003468 <ADC3_IN1_STFT_Update+0x1b8>)
 80032c2:	601a      	str	r2, [r3, #0]
	ADC3_IN1_STFT_par_ptr->mu_5 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032ca:	4a68      	ldr	r2, [pc, #416]	; (800346c <ADC3_IN1_STFT_Update+0x1bc>)
 80032cc:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e045      	b.n	8003360 <ADC3_IN1_STFT_Update+0xb0>
	{
		float32_t exponent_5 = -0.5f*(pow(((n - ADC3_IN1_STFT_par_ptr->mu_5)/ADC3_IN1_STFT_par_ptr->Sigma_5), 2));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032fa:	ee16 0a90 	vmov	r0, s13
 80032fe:	f7fd f8ef 	bl	80004e0 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8003460 <ADC3_IN1_STFT_Update+0x1b0>
 800330a:	ec43 2b10 	vmov	d0, r2, r3
 800330e:	f007 fff7 	bl	800b300 <pow>
 8003312:	ec51 0b10 	vmov	r0, r1, d0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <ADC3_IN1_STFT_Update+0x1c0>)
 800331c:	f7fd f938 	bl	8000590 <__aeabi_dmul>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f7fd fc0a 	bl	8000b40 <__aeabi_d2f>
 800332c:	4603      	mov	r3, r0
 800332e:	60bb      	str	r3, [r7, #8]
		ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[n] = exp(exponent_5);
 8003330:	68b8      	ldr	r0, [r7, #8]
 8003332:	f7fd f8d5 	bl	80004e0 <__aeabi_f2d>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	ec43 2b10 	vmov	d0, r2, r3
 800333e:	f007 ff97 	bl	800b270 <exp>
 8003342:	ec53 2b10 	vmov	r2, r3, d0
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	f7fd fbf9 	bl	8000b40 <__aeabi_d2f>
 800334e:	4601      	mov	r1, r0
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2bff      	cmp	r3, #255	; 0xff
 8003364:	d9b6      	bls.n	80032d4 <ADC3_IN1_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e01a      	b.n	80033a2 <ADC3_IN1_STFT_Update+0xf2>
	{
		ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5[m] = ADC3_IN1_STFT_ptr->MA_ADC3_IN1_OutBfr[m] * ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[m];
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3308      	adds	r3, #8
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	ed93 7a00 	vldr	s14, [r3]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	3301      	adds	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2bff      	cmp	r3, #255	; 0xff
 80033a6:	d9e1      	bls.n	800336c <ADC3_IN1_STFT_Update+0xbc>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_5 = arm_rfft_fast_init_f32 (&ADC3_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80033a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ac:	4831      	ldr	r0, [pc, #196]	; (8003474 <ADC3_IN1_STFT_Update+0x1c4>)
 80033ae:	f006 fbdf 	bl	8009b70 <arm_rfft_fast_init_f32>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_5 == ARM_MATH_SUCCESS)
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d149      	bne.n	8003452 <ADC3_IN1_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC3_IN1_FFT, ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5 , ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr, 0 );
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f603 0208 	addw	r2, r3, #2056	; 0x808
 80033ca:	2300      	movs	r3, #0
 80033cc:	4829      	ldr	r0, [pc, #164]	; (8003474 <ADC3_IN1_STFT_Update+0x1c4>)
 80033ce:	f006 fcb3 	bl	8009d38 <arm_rfft_fast_f32>

		uint32_t mag_indx_5 = 0.0f;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80033d6:	e039      	b.n	800344c <ADC3_IN1_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_5] = sqrtf((ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p]) + (ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1]));
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f203 2302 	addw	r3, r3, #514	; 0x202
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	ed93 7a00 	vldr	s14, [r3]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f203 2302 	addw	r3, r3, #514	; 0x202
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	3301      	adds	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	edd3 6a00 	vldr	s13, [r3]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	3301      	adds	r3, #1
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	eeb0 0a67 	vmov.f32	s0, s15
 800342c:	f008 f804 	bl	800b438 <sqrtf>
 8003430:	eef0 7a40 	vmov.f32	s15, s0
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <ADC3_IN1_STFT_Update+0x1c8>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_5++;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3301      	adds	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3302      	adds	r3, #2
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2bff      	cmp	r3, #255	; 0xff
 8003450:	d9c2      	bls.n	80033d8 <ADC3_IN1_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_5;
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <ADC3_IN1_STFT_Update+0x1cc>)
}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	f3af 8000 	nop.w
 8003460:	00000000 	.word	0x00000000
 8003464:	40000000 	.word	0x40000000
 8003468:	42280000 	.word	0x42280000
 800346c:	42ff0000 	.word	0x42ff0000
 8003470:	bfe00000 	.word	0xbfe00000
 8003474:	2000954c 	.word	0x2000954c
 8003478:	2000997c 	.word	0x2000997c
 800347c:	20009d7c 	.word	0x20009d7c

08003480 <ADC3_IN2_STFT_Update>:

float32_t* ADC3_IN2_STFT_Update(ADC3_IN2_STFT_par*ADC3_IN2_STFT_par_ptr, ADC3_IN2_MA*ADC3_IN2_STFT_ptr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
	ADC3_IN2_STFT_par_ptr->Sigma_6 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003490:	4a69      	ldr	r2, [pc, #420]	; (8003638 <ADC3_IN2_STFT_Update+0x1b8>)
 8003492:	601a      	str	r2, [r3, #0]
	ADC3_IN2_STFT_par_ptr->mu_6 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800349a:	4a68      	ldr	r2, [pc, #416]	; (800363c <ADC3_IN2_STFT_Update+0x1bc>)
 800349c:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e045      	b.n	8003530 <ADC3_IN2_STFT_Update+0xb0>
	{
		float32_t exponent_6 = -0.5f*(pow(((n - ADC3_IN2_STFT_par_ptr->mu_6)/ADC3_IN2_STFT_par_ptr->Sigma_6), 2));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034ca:	ee16 0a90 	vmov	r0, s13
 80034ce:	f7fd f807 	bl	80004e0 <__aeabi_f2d>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8003630 <ADC3_IN2_STFT_Update+0x1b0>
 80034da:	ec43 2b10 	vmov	d0, r2, r3
 80034de:	f007 ff0f 	bl	800b300 <pow>
 80034e2:	ec51 0b10 	vmov	r0, r1, d0
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	4b55      	ldr	r3, [pc, #340]	; (8003640 <ADC3_IN2_STFT_Update+0x1c0>)
 80034ec:	f7fd f850 	bl	8000590 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd fb22 	bl	8000b40 <__aeabi_d2f>
 80034fc:	4603      	mov	r3, r0
 80034fe:	60bb      	str	r3, [r7, #8]
		ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[n] = exp(exponent_6);
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	f7fc ffed 	bl	80004e0 <__aeabi_f2d>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	ec43 2b10 	vmov	d0, r2, r3
 800350e:	f007 feaf 	bl	800b270 <exp>
 8003512:	ec53 2b10 	vmov	r2, r3, d0
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f7fd fb11 	bl	8000b40 <__aeabi_d2f>
 800351e:	4601      	mov	r1, r0
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3301      	adds	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2bff      	cmp	r3, #255	; 0xff
 8003534:	d9b6      	bls.n	80034a4 <ADC3_IN2_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e01a      	b.n	8003572 <ADC3_IN2_STFT_Update+0xf2>
	{
		ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6[m] = ADC3_IN2_STFT_ptr->MA_ADC3_IN2_OutBfr[m] * ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[m];
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3308      	adds	r3, #8
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	ed93 7a00 	vldr	s14, [r3]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	3301      	adds	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2bff      	cmp	r3, #255	; 0xff
 8003576:	d9e1      	bls.n	800353c <ADC3_IN2_STFT_Update+0xbc>
	}

	/* Initializes the FFT operation and if the initialization is successful, it computes the FFT from the specified source buffer */
	arm_status FFT_status_6 = arm_rfft_fast_init_f32 (&ADC3_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800357c:	4831      	ldr	r0, [pc, #196]	; (8003644 <ADC3_IN2_STFT_Update+0x1c4>)
 800357e:	f006 faf7 	bl	8009b70 <arm_rfft_fast_init_f32>
 8003582:	4603      	mov	r3, r0
 8003584:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_6 == ARM_MATH_SUCCESS)
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d149      	bne.n	8003622 <ADC3_IN2_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC3_IN2_FFT, ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6 , ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr, 0 );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f603 0208 	addw	r2, r3, #2056	; 0x808
 800359a:	2300      	movs	r3, #0
 800359c:	4829      	ldr	r0, [pc, #164]	; (8003644 <ADC3_IN2_STFT_Update+0x1c4>)
 800359e:	f006 fbcb 	bl	8009d38 <arm_rfft_fast_f32>

		uint32_t mag_indx_6 = 0.0f;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80035a6:	e039      	b.n	800361c <ADC3_IN2_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_6] = sqrtf((ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p]) + (ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1]));
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3301      	adds	r3, #1
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	edd3 6a00 	vldr	s13, [r3]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3301      	adds	r3, #1
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f8:	eeb0 0a67 	vmov.f32	s0, s15
 80035fc:	f007 ff1c 	bl	800b438 <sqrtf>
 8003600:	eef0 7a40 	vmov.f32	s15, s0
 8003604:	4a10      	ldr	r2, [pc, #64]	; (8003648 <ADC3_IN2_STFT_Update+0x1c8>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_6++;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3302      	adds	r3, #2
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2bff      	cmp	r3, #255	; 0xff
 8003620:	d9c2      	bls.n	80035a8 <ADC3_IN2_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_6;
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <ADC3_IN2_STFT_Update+0x1cc>)
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f3af 8000 	nop.w
 8003630:	00000000 	.word	0x00000000
 8003634:	40000000 	.word	0x40000000
 8003638:	42280000 	.word	0x42280000
 800363c:	42ff0000 	.word	0x42ff0000
 8003640:	bfe00000 	.word	0xbfe00000
 8003644:	20009564 	.word	0x20009564
 8003648:	2000997c 	.word	0x2000997c
 800364c:	20009f7c 	.word	0x20009f7c

08003650 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800365c:	2301      	movs	r3, #1
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003660:	e030      	b.n	80036c4 <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	3308      	adds	r3, #8
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	ed93 7a00 	vldr	s14, [r3]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	3308      	adds	r3, #8
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3304      	adds	r3, #4
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	3b01      	subs	r3, #1
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	3308      	adds	r3, #8
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	edd3 6a00 	vldr	s13, [r3]
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	3301      	adds	r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	3308      	adds	r3, #8
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b2:	4a47      	ldr	r2, [pc, #284]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	3301      	adds	r3, #1
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	2bfe      	cmp	r3, #254	; 0xfe
 80036c8:	d9cb      	bls.n	8003662 <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80036d2:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	e00e      	b.n	800371c <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 80036fe:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	3301      	adds	r3, #1
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2bff      	cmp	r3, #255	; 0xff
 8003720:	d9ed      	bls.n	80036fe <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003722:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003726:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80037d4 <ADC1_IN1_TKEO+0x184>
 800372a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800372e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e018      	b.n	800376a <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	ed93 7a00 	vldr	s14, [r3]
 8003744:	edd7 7a06 	vldr	s15, [r7, #24]
 8003748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 8003750:	edd7 7a03 	vldr	s15, [r7, #12]
 8003754:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003758:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800375c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003760:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2bff      	cmp	r3, #255	; 0xff
 800376e:	d9e3      	bls.n	8003738 <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003770:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003774:	eddf 6a17 	vldr	s13, [pc, #92]	; 80037d4 <ADC1_IN1_TKEO+0x184>
 8003778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800377c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8003780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003782:	f7fc fead 	bl	80004e0 <__aeabi_f2d>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	ec43 2b10 	vmov	d0, r2, r3
 800378e:	f007 fe27 	bl	800b3e0 <sqrt>
 8003792:	ec53 2b10 	vmov	r2, r3, d0
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f9d1 	bl	8000b40 <__aeabi_d2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 80037a2:	edd7 7a00 	vldr	s15, [r7]
 80037a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80037aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80037b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	dd03      	ble.n	80037c4 <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 80037bc:	2301      	movs	r3, #1
 80037be:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	e000      	b.n	80037c6 <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 80037c4:	2300      	movs	r3, #0
  }


}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3730      	adds	r7, #48	; 0x30
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	2000a17c 	.word	0x2000a17c
 80037d4:	43800000 	.word	0x43800000

080037d8 <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	; 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80037e4:	2301      	movs	r3, #1
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	e030      	b.n	800384c <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	3308      	adds	r3, #8
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	3308      	adds	r3, #8
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	3304      	adds	r3, #4
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	3b01      	subs	r3, #1
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	3308      	adds	r3, #8
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3304      	adds	r3, #4
 800381c:	edd3 6a00 	vldr	s13, [r3]
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	3301      	adds	r3, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	3308      	adds	r3, #8
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	3304      	adds	r3, #4
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383a:	4a47      	ldr	r2, [pc, #284]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	3301      	adds	r3, #1
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	2bfe      	cmp	r3, #254	; 0xfe
 8003850:	d9cb      	bls.n	80037ea <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_2 = 0.0f;
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003880:	2300      	movs	r3, #0
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	e00e      	b.n	80038a4 <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 8003886:	4a34      	ldr	r2, [pc, #208]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	3301      	adds	r3, #1
 80038a2:	623b      	str	r3, [r7, #32]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d9ed      	bls.n	8003886 <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80038aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80038ae:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800395c <ADC1_IN2_TKEO+0x184>
 80038b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e018      	b.n	80038f2 <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	ed93 7a00 	vldr	s14, [r3]
 80038cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 80038d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	d9e3      	bls.n	80038c0 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80038f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038fc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800395c <ADC1_IN2_TKEO+0x184>
 8003900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003904:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 8003908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800390a:	f7fc fde9 	bl	80004e0 <__aeabi_f2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	ec43 2b10 	vmov	d0, r2, r3
 8003916:	f007 fd63 	bl	800b3e0 <sqrt>
 800391a:	ec53 2b10 	vmov	r2, r3, d0
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	f7fd f90d 	bl	8000b40 <__aeabi_d2f>
 8003926:	4603      	mov	r3, r0
 8003928:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 800392a:	edd7 7a00 	vldr	s15, [r7]
 800392e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003936:	ed97 7a05 	vldr	s14, [r7, #20]
 800393a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003942:	dd03      	ble.n	800394c <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 8003944:	2301      	movs	r3, #1
 8003946:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	e000      	b.n	800394e <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 800394c:	2300      	movs	r3, #0
  }


}
 800394e:	4618      	mov	r0, r3
 8003950:	3730      	adds	r7, #48	; 0x30
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000a57c 	.word	0x2000a57c
 800395c:	43800000 	.word	0x43800000

08003960 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800396c:	2301      	movs	r3, #1
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003970:	e030      	b.n	80039d4 <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	3308      	adds	r3, #8
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	ed93 7a00 	vldr	s14, [r3]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	3308      	adds	r3, #8
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	3b01      	subs	r3, #1
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	3308      	adds	r3, #8
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	edd3 6a00 	vldr	s13, [r3]
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	3301      	adds	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	3308      	adds	r3, #8
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	3304      	adds	r3, #4
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c2:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	3301      	adds	r3, #1
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	2bfe      	cmp	r3, #254	; 0xfe
 80039d8:	d9cb      	bls.n	8003972 <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80039e2:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_3 = 0.0f;
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	e00e      	b.n	8003a2c <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 8003a0e:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a22:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2bff      	cmp	r3, #255	; 0xff
 8003a30:	d9ed      	bls.n	8003a0e <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003a32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a36:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003ae4 <ADC2_IN3_TKEO+0x184>
 8003a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a3e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e018      	b.n	8003a7a <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 8003a48:	4a25      	ldr	r2, [pc, #148]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	ed93 7a00 	vldr	s14, [r3]
 8003a54:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8003a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3301      	adds	r3, #1
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2bff      	cmp	r3, #255	; 0xff
 8003a7e:	d9e3      	bls.n	8003a48 <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003a80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a84:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003ae4 <ADC2_IN3_TKEO+0x184>
 8003a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8003a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a92:	f7fc fd25 	bl	80004e0 <__aeabi_f2d>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	ec43 2b10 	vmov	d0, r2, r3
 8003a9e:	f007 fc9f 	bl	800b3e0 <sqrt>
 8003aa2:	ec53 2b10 	vmov	r2, r3, d0
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7fd f849 	bl	8000b40 <__aeabi_d2f>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8003ab2:	edd7 7a00 	vldr	s15, [r7]
 8003ab6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003abe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dd03      	ble.n	8003ad4 <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 8003acc:	2301      	movs	r3, #1
 8003ace:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	e000      	b.n	8003ad6 <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003ad4:	2300      	movs	r3, #0
  }


}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3730      	adds	r7, #48	; 0x30
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000a97c 	.word	0x2000a97c
 8003ae4:	43800000 	.word	0x43800000

08003ae8 <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003af4:	2301      	movs	r3, #1
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af8:	e030      	b.n	8003b5c <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	3308      	adds	r3, #8
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	ed93 7a00 	vldr	s14, [r3]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	3308      	adds	r3, #8
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	3b01      	subs	r3, #1
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	3308      	adds	r3, #8
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	edd3 6a00 	vldr	s13, [r3]
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	3301      	adds	r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	3308      	adds	r3, #8
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b4a:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	3301      	adds	r3, #1
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2bfe      	cmp	r3, #254	; 0xfe
 8003b60:	d9cb      	bls.n	8003afa <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_4 = 0.0f;
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	e00e      	b.n	8003bb4 <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 8003b96:	4a34      	ldr	r2, [pc, #208]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003baa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	d9ed      	bls.n	8003b96 <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003bba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003bbe:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003c6c <ADC2_IN4_TKEO+0x184>
 8003bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bc6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e018      	b.n	8003c02 <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 8003bd0:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 8003be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bf0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2bff      	cmp	r3, #255	; 0xff
 8003c06:	d9e3      	bls.n	8003bd0 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003c08:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c0c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003c6c <ADC2_IN4_TKEO+0x184>
 8003c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 8003c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c1a:	f7fc fc61 	bl	80004e0 <__aeabi_f2d>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	ec43 2b10 	vmov	d0, r2, r3
 8003c26:	f007 fbdb 	bl	800b3e0 <sqrt>
 8003c2a:	ec53 2b10 	vmov	r2, r3, d0
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7fc ff85 	bl	8000b40 <__aeabi_d2f>
 8003c36:	4603      	mov	r3, r0
 8003c38:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 8003c3a:	edd7 7a00 	vldr	s15, [r7]
 8003c3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c46:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	dd03      	ble.n	8003c5c <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 8003c54:	2301      	movs	r3, #1
 8003c56:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	e000      	b.n	8003c5e <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003c5c:	2300      	movs	r3, #0
  }


}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3730      	adds	r7, #48	; 0x30
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2000ad7c 	.word	0x2000ad7c
 8003c6c:	43800000 	.word	0x43800000

08003c70 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c80:	e030      	b.n	8003ce4 <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	3308      	adds	r3, #8
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	ed93 7a00 	vldr	s14, [r3]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	3308      	adds	r3, #8
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	edd3 7a00 	vldr	s15, [r3]
 8003ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	3308      	adds	r3, #8
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	edd3 6a00 	vldr	s13, [r3]
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	3301      	adds	r3, #1
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd2:	4a47      	ldr	r2, [pc, #284]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce8:	d9cb      	bls.n	8003c82 <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003cf2:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	e00e      	b.n	8003d3c <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 8003d1e:	4a34      	ldr	r2, [pc, #208]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d32:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	2bff      	cmp	r3, #255	; 0xff
 8003d40:	d9ed      	bls.n	8003d1e <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003d42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d46:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003df4 <ADC3_IN1_TKEO+0x184>
 8003d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d4e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e018      	b.n	8003d8a <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 8003d58:	4a25      	ldr	r2, [pc, #148]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	ed93 7a00 	vldr	s14, [r3]
 8003d64:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d6c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 8003d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2bff      	cmp	r3, #255	; 0xff
 8003d8e:	d9e3      	bls.n	8003d58 <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003d90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d94:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003df4 <ADC3_IN1_TKEO+0x184>
 8003d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 8003da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da2:	f7fc fb9d 	bl	80004e0 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	ec43 2b10 	vmov	d0, r2, r3
 8003dae:	f007 fb17 	bl	800b3e0 <sqrt>
 8003db2:	ec53 2b10 	vmov	r2, r3, d0
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	f7fc fec1 	bl	8000b40 <__aeabi_d2f>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8003dc2:	edd7 7a00 	vldr	s15, [r7]
 8003dc6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dce:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dda:	dd03      	ble.n	8003de4 <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	e000      	b.n	8003de6 <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003de4:	2300      	movs	r3, #0
  }


}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3730      	adds	r7, #48	; 0x30
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000b17c 	.word	0x2000b17c
 8003df4:	43800000 	.word	0x43800000

08003df8 <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003e04:	2301      	movs	r3, #1
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e08:	e030      	b.n	8003e6c <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	3308      	adds	r3, #8
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	3304      	adds	r3, #4
 8003e16:	ed93 7a00 	vldr	s14, [r3]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	3308      	adds	r3, #8
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	3b01      	subs	r3, #1
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	3308      	adds	r3, #8
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	edd3 6a00 	vldr	s13, [r3]
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	3301      	adds	r3, #1
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	3308      	adds	r3, #8
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e5a:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	3301      	adds	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	2bfe      	cmp	r3, #254	; 0xfe
 8003e70:	d9cb      	bls.n	8003e0a <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_6 = 0.0f;
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	e00e      	b.n	8003ec4 <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 8003ea6:	4a34      	ldr	r2, [pc, #208]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	edd3 7a00 	vldr	s15, [r3]
 8003eb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	623b      	str	r3, [r7, #32]
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2bff      	cmp	r3, #255	; 0xff
 8003ec8:	d9ed      	bls.n	8003ea6 <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003eca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ece:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003f7c <ADC3_IN2_TKEO+0x184>
 8003ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e018      	b.n	8003f12 <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	ed93 7a00 	vldr	s14, [r3]
 8003eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 8003ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003efc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2bff      	cmp	r3, #255	; 0xff
 8003f16:	d9e3      	bls.n	8003ee0 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003f18:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f1c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003f7c <ADC3_IN2_TKEO+0x184>
 8003f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 8003f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f2a:	f7fc fad9 	bl	80004e0 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	ec43 2b10 	vmov	d0, r2, r3
 8003f36:	f007 fa53 	bl	800b3e0 <sqrt>
 8003f3a:	ec53 2b10 	vmov	r2, r3, d0
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7fc fdfd 	bl	8000b40 <__aeabi_d2f>
 8003f46:	4603      	mov	r3, r0
 8003f48:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 8003f4a:	edd7 7a00 	vldr	s15, [r7]
 8003f4e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f56:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f62:	dd03      	ble.n	8003f6c <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	e000      	b.n	8003f6e <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003f6c:	2300      	movs	r3, #0
  }


}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3730      	adds	r7, #48	; 0x30
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	2000b57c 	.word	0x2000b57c
 8003f7c:	43800000 	.word	0x43800000

08003f80 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e038      	b.n	8003ffe <ADC1_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <ADC1_DMA_sort_uhb+0x1c>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d117      	bne.n	8003fcc <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	e00f      	b.n	8003fc2 <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <ADC1_DMA_sort_uhb+0x94>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1b      	ldr	r2, [pc, #108]	; (8004014 <ADC1_DMA_sort_uhb+0x94>)
 8003fa8:	6811      	ldr	r1, [r2, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003fc8:	d3eb      	bcc.n	8003fa2 <ADC1_DMA_sort_uhb+0x22>
 8003fca:	e015      	b.n	8003ff8 <ADC1_DMA_sort_uhb+0x78>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8003fcc:	2300      	movs	r3, #0
 8003fce:	607b      	str	r3, [r7, #4]
 8003fd0:	e00e      	b.n	8003ff0 <ADC1_DMA_sort_uhb+0x70>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <ADC1_DMA_sort_uhb+0x94>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <ADC1_DMA_sort_uhb+0x94>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68f9      	ldr	r1, [r7, #12]
 8003fdc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8003fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3301      	adds	r3, #1
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003ff6:	d3ec      	bcc.n	8003fd2 <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004004:	d9c2      	bls.n	8003f8c <ADC1_DMA_sort_uhb+0xc>
			}
		}
     }

};
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	2000bdd0 	.word	0x2000bdd0

08004018 <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 800401e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e03a      	b.n	800409c <ADC1_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <ADC1_DMA_sort_lhb+0x1e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d118      	bne.n	8004068 <ADC1_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8004036:	f240 2371 	movw	r3, #625	; 0x271
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	e00f      	b.n	800405e <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <ADC1_DMA_sort_lhb+0x9c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1c      	ldr	r2, [pc, #112]	; (80040b4 <ADC1_DMA_sort_lhb+0x9c>)
 8004044:	6811      	ldr	r1, [r2, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3301      	adds	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004064:	d9eb      	bls.n	800403e <ADC1_DMA_sort_lhb+0x26>
 8004066:	e016      	b.n	8004096 <ADC1_DMA_sort_lhb+0x7e>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8004068:	f240 2371 	movw	r3, #625	; 0x271
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	e00e      	b.n	800408e <ADC1_DMA_sort_lhb+0x76>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <ADC1_DMA_sort_lhb+0x9c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <ADC1_DMA_sort_lhb+0x9c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8004084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3301      	adds	r3, #1
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004094:	d9ec      	bls.n	8004070 <ADC1_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d9bf      	bls.n	8004026 <ADC1_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	2000bdd0 	.word	0x2000bdd0

080040b8 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e038      	b.n	8004136 <ADC2_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <ADC2_DMA_sort_uhb+0x1c>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d117      	bne.n	8004104 <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	e00f      	b.n	80040fa <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <ADC2_DMA_sort_uhb+0x94>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1b      	ldr	r2, [pc, #108]	; (800414c <ADC2_DMA_sort_uhb+0x94>)
 80040e0:	6811      	ldr	r1, [r2, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004100:	d3eb      	bcc.n	80040da <ADC2_DMA_sort_uhb+0x22>
 8004102:	e015      	b.n	8004130 <ADC2_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004104:	2300      	movs	r3, #0
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	e00e      	b.n	8004128 <ADC2_DMA_sort_uhb+0x70>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <ADC2_DMA_sort_uhb+0x94>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <ADC2_DMA_sort_uhb+0x94>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 800411e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3301      	adds	r3, #1
 8004126:	607b      	str	r3, [r7, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800412e:	d3ec      	bcc.n	800410a <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800413c:	d9c2      	bls.n	80040c4 <ADC2_DMA_sort_uhb+0xc>
			}
		}
     }

};
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	2000bdd4 	.word	0x2000bdd4

08004150 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004156:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e03a      	b.n	80041d4 <ADC2_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <ADC2_DMA_sort_lhb+0x1e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d118      	bne.n	80041a0 <ADC2_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800416e:	f240 2371 	movw	r3, #625	; 0x271
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	e00f      	b.n	8004196 <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <ADC2_DMA_sort_lhb+0x9c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <ADC2_DMA_sort_lhb+0x9c>)
 800417c:	6811      	ldr	r1, [r2, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	3301      	adds	r3, #1
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800419c:	d9eb      	bls.n	8004176 <ADC2_DMA_sort_lhb+0x26>
 800419e:	e016      	b.n	80041ce <ADC2_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80041a0:	f240 2371 	movw	r3, #625	; 0x271
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	e00e      	b.n	80041c6 <ADC2_DMA_sort_lhb+0x76>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <ADC2_DMA_sort_lhb+0x9c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <ADC2_DMA_sort_lhb+0x9c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68f9      	ldr	r1, [r7, #12]
 80041b2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80041bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3301      	adds	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80041cc:	d9ec      	bls.n	80041a8 <ADC2_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80041da:	4293      	cmp	r3, r2
 80041dc:	d9bf      	bls.n	800415e <ADC2_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	2000bdd4 	.word	0x2000bdd4

080041f0 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e038      	b.n	800426e <ADC3_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <ADC3_DMA_sort_uhb+0x1c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d117      	bne.n	800423c <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	e00f      	b.n	8004232 <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <ADC3_DMA_sort_uhb+0x94>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <ADC3_DMA_sort_uhb+0x94>)
 8004218:	6811      	ldr	r1, [r2, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	3301      	adds	r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004238:	d3eb      	bcc.n	8004212 <ADC3_DMA_sort_uhb+0x22>
 800423a:	e015      	b.n	8004268 <ADC3_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800423c:	2300      	movs	r3, #0
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	e00e      	b.n	8004260 <ADC3_DMA_sort_uhb+0x70>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <ADC3_DMA_sort_uhb+0x94>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <ADC3_DMA_sort_uhb+0x94>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8004256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3301      	adds	r3, #1
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8004266:	d3ec      	bcc.n	8004242 <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004274:	d9c2      	bls.n	80041fc <ADC3_DMA_sort_uhb+0xc>
			}
		}
     }

};
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	2000bdd8 	.word	0x2000bdd8

08004288 <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800428e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e03a      	b.n	800430c <ADC3_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <ADC3_DMA_sort_lhb+0x1e>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d118      	bne.n	80042d8 <ADC3_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80042a6:	f240 2371 	movw	r3, #625	; 0x271
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	e00f      	b.n	80042ce <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <ADC3_DMA_sort_lhb+0x9c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <ADC3_DMA_sort_lhb+0x9c>)
 80042b4:	6811      	ldr	r1, [r2, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80042d4:	d9eb      	bls.n	80042ae <ADC3_DMA_sort_lhb+0x26>
 80042d6:	e016      	b.n	8004306 <ADC3_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80042d8:	f240 2371 	movw	r3, #625	; 0x271
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e00e      	b.n	80042fe <ADC3_DMA_sort_lhb+0x76>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <ADC3_DMA_sort_lhb+0x9c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <ADC3_DMA_sort_lhb+0x9c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80042f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3301      	adds	r3, #1
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8004304:	d9ec      	bls.n	80042e0 <ADC3_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3301      	adds	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004312:	4293      	cmp	r3, r2
 8004314:	d9bf      	bls.n	8004296 <ADC3_DMA_sort_lhb+0xe>
			}
		}
     }

};
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	2000bdd8 	.word	0x2000bdd8

08004328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800432e:	f001 fcf8 	bl	8005d22 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8004332:	f7fd fd33 	bl	8001d9c <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 8004336:	f7fd fd43 	bl	8001dc0 <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 800433a:	48a2      	ldr	r0, [pc, #648]	; (80045c4 <main+0x29c>)
 800433c:	f7fd f956 	bl	80015ec <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8004340:	f7fd fd68 	bl	8001e14 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8004344:	f7fd fd78 	bl	8001e38 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 8004348:	489f      	ldr	r0, [pc, #636]	; (80045c8 <main+0x2a0>)
 800434a:	f7fd f9f3 	bl	8001734 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 800434e:	f7fd fd9d 	bl	8001e8c <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8004352:	f7fd fdad 	bl	8001eb0 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 8004356:	489d      	ldr	r0, [pc, #628]	; (80045cc <main+0x2a4>)
 8004358:	f7fd fa90 	bl	800187c <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 800435c:	f7fd fdd2 	bl	8001f04 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8004360:	f7fd fde2 	bl	8001f28 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8004364:	489a      	ldr	r0, [pc, #616]	; (80045d0 <main+0x2a8>)
 8004366:	f7fd fb2d 	bl	80019c4 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 800436a:	f7fd fe07 	bl	8001f7c <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 800436e:	f7fd fe17 	bl	8001fa0 <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8004372:	4898      	ldr	r0, [pc, #608]	; (80045d4 <main+0x2ac>)
 8004374:	f7fd fbca 	bl	8001b0c <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 8004378:	f7fd fe3c 	bl	8001ff4 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 800437c:	f7fd fe4c 	bl	8002018 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8004380:	4895      	ldr	r0, [pc, #596]	; (80045d8 <main+0x2b0>)
 8004382:	f7fd fc67 	bl	8001c54 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004386:	f000 fa97 	bl	80048b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800438a:	f000 fdc9 	bl	8004f20 <MX_GPIO_Init>
  MX_DMA_Init();
 800438e:	f000 fd71 	bl	8004e74 <MX_DMA_Init>
  MX_ADC1_Init();
 8004392:	f000 fadb 	bl	800494c <MX_ADC1_Init>
  MX_ADC2_Init();
 8004396:	f000 fb63 	bl	8004a60 <MX_ADC2_Init>
  MX_ADC3_Init();
 800439a:	f000 fbd9 	bl	8004b50 <MX_ADC3_Init>
  MX_FMAC_Init();
 800439e:	f000 fc95 	bl	8004ccc <MX_FMAC_Init>
  MX_TIM6_Init();
 80043a2:	f000 fca7 	bl	8004cf4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80043a6:	f000 fcdb 	bl	8004d60 <MX_TIM7_Init>
  MX_TIM20_Init();
 80043aa:	f000 fd0f 	bl	8004dcc <MX_TIM20_Init>
  MX_DAC1_Init();
 80043ae:	f000 fc47 	bl	8004c40 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  // Enable the EXTI line 2 interrupt
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);  // Set priority
 80043b2:	2200      	movs	r2, #0
 80043b4:	2102      	movs	r1, #2
 80043b6:	2008      	movs	r0, #8
 80043b8:	f003 f925 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn); // Enable the interrupt in NVIC (Interrupt is triggered by pressing the push button)
 80043bc:	2008      	movs	r0, #8
 80043be:	f003 f93c 	bl	800763a <HAL_NVIC_EnableIRQ>

  EXT12_IRQHandler(); // When the push button is pressed - starts all ADCs with DMA, starts the sorting algorithm for each ADC, calculates the offset from the baseline and the standard deviation from the baseline data (for all channels). Finally, it toggles the status LED to indicate that acquisition has started
 80043c2:	f000 fe11 	bl	8004fe8 <EXT12_IRQHandler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80043c6:	f7fd fd0d 	bl	8001de4 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 80043ca:	487e      	ldr	r0, [pc, #504]	; (80045c4 <main+0x29c>)
 80043cc:	f7fd f940 	bl	8001650 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e017      	b.n	8004406 <main+0xde>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtracts the stored offset
 80043d6:	4a7b      	ldr	r2, [pc, #492]	; (80045c4 <main+0x29c>)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3308      	adds	r3, #8
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	3304      	adds	r3, #4
 80043e2:	ed93 7a00 	vldr	s14, [r3]
 80043e6:	4b7d      	ldr	r3, [pc, #500]	; (80045dc <main+0x2b4>)
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f0:	4a74      	ldr	r2, [pc, #464]	; (80045c4 <main+0x29c>)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	3308      	adds	r3, #8
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3301      	adds	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2bff      	cmp	r3, #255	; 0xff
 800440a:	d9e4      	bls.n	80043d6 <main+0xae>
      #ifdef MONITOR_CHANNEL_1_LEFT
	  ADC1_IN1_DAC_Update(&DAC1_ADC1_IN1); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 800440c:	4b74      	ldr	r3, [pc, #464]	; (80045e0 <main+0x2b8>)
 800440e:	edd3 7a00 	vldr	s15, [r3]
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	4873      	ldr	r0, [pc, #460]	; (80045e4 <main+0x2bc>)
 8004418:	f7ff f91a 	bl	8003650 <ADC1_IN1_TKEO>
 800441c:	4603      	mov	r3, r0
 800441e:	461a      	mov	r2, r3
 8004420:	4b71      	ldr	r3, [pc, #452]	; (80045e8 <main+0x2c0>)
 8004422:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 8004424:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <main+0x2c0>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d11e      	bne.n	800446a <main+0x142>
      {
      /* Slope sign change */
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 800442c:	4b6b      	ldr	r3, [pc, #428]	; (80045dc <main+0x2b4>)
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800443a:	eeb0 0a67 	vmov.f32	s0, s15
 800443e:	486b      	ldr	r0, [pc, #428]	; (80045ec <main+0x2c4>)
 8004440:	f7fe f8fc 	bl	800263c <ADC1_IN1_SSC>
 8004444:	eef0 7a40 	vmov.f32	s15, s0
 8004448:	4b69      	ldr	r3, [pc, #420]	; (80045f0 <main+0x2c8>)
 800444a:	edc3 7a00 	vstr	s15, [r3]
      /*Computes the autocorrelation values and the autoregression coefficients and returns the latter*/
      ADC1_IN1_autocorr_calc();
 800444e:	f7fc fbc7 	bl	8000be0 <ADC1_IN1_autocorr_calc>
      AR_1 = ADC1_IN1_autoreg_coeffs();
 8004452:	f7fc fbfb 	bl	8000c4c <ADC1_IN1_autoreg_coeffs>
 8004456:	4603      	mov	r3, r0
 8004458:	4a66      	ldr	r2, [pc, #408]	; (80045f4 <main+0x2cc>)
 800445a:	6013      	str	r3, [r2, #0]
      /* Computes the Short Time Fourier Transform from the moving average buffer */
      STFT_1 = ADC1_IN1_STFT_Update(&STFT_par_ADC1_IN1, &STFT_ADC1_IN1);
 800445c:	4966      	ldr	r1, [pc, #408]	; (80045f8 <main+0x2d0>)
 800445e:	4867      	ldr	r0, [pc, #412]	; (80045fc <main+0x2d4>)
 8004460:	f7fe fb86 	bl	8002b70 <ADC1_IN1_STFT_Update>
 8004464:	4603      	mov	r3, r0
 8004466:	4a66      	ldr	r2, [pc, #408]	; (8004600 <main+0x2d8>)
 8004468:	6013      	str	r3, [r2, #0]
      }


	  update_ADC1_IN2_FO_biquad_filter();
 800446a:	f7fd fcf7 	bl	8001e5c <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 800446e:	4856      	ldr	r0, [pc, #344]	; (80045c8 <main+0x2a0>)
 8004470:	f7fd f992 	bl	8001798 <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	e017      	b.n	80044aa <main+0x182>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 800447a:	4a53      	ldr	r2, [pc, #332]	; (80045c8 <main+0x2a0>)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	3308      	adds	r3, #8
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	3304      	adds	r3, #4
 8004486:	ed93 7a00 	vldr	s14, [r3]
 800448a:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <main+0x2dc>)
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004494:	4a4c      	ldr	r2, [pc, #304]	; (80045c8 <main+0x2a0>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3308      	adds	r3, #8
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	3304      	adds	r3, #4
 80044a0:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	3301      	adds	r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2bff      	cmp	r3, #255	; 0xff
 80044ae:	d9e4      	bls.n	800447a <main+0x152>
      #ifdef MONITOR_CHANNEL_4_RIGHT
	  ADC1_IN2_DAC_Update(&DAC1_ADC1_IN2);
      #endif


	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 80044b0:	4b55      	ldr	r3, [pc, #340]	; (8004608 <main+0x2e0>)
 80044b2:	edd3 7a00 	vldr	s15, [r3]
 80044b6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ba:	4854      	ldr	r0, [pc, #336]	; (800460c <main+0x2e4>)
 80044bc:	f7ff f98c 	bl	80037d8 <ADC1_IN2_TKEO>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	4b52      	ldr	r3, [pc, #328]	; (8004610 <main+0x2e8>)
 80044c6:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 80044c8:	4b51      	ldr	r3, [pc, #324]	; (8004610 <main+0x2e8>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d11e      	bne.n	800450e <main+0x1e6>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 80044d0:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <main+0x2dc>)
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044de:	eeb0 0a67 	vmov.f32	s0, s15
 80044e2:	484c      	ldr	r0, [pc, #304]	; (8004614 <main+0x2ec>)
 80044e4:	f7fe f919 	bl	800271a <ADC1_IN2_SSC>
 80044e8:	eef0 7a40 	vmov.f32	s15, s0
 80044ec:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <main+0x2f0>)
 80044ee:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_IN2_autocorr_calc();
 80044f2:	f7fc fc4b 	bl	8000d8c <ADC1_IN2_autocorr_calc>
	  AR_2 = ADC1_IN2_autoreg_coeffs();
 80044f6:	f7fc fc7f 	bl	8000df8 <ADC1_IN2_autoreg_coeffs>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a47      	ldr	r2, [pc, #284]	; (800461c <main+0x2f4>)
 80044fe:	6013      	str	r3, [r2, #0]
	  STFT_2 = ADC1_IN2_STFT_Update(&STFT_par_ADC1_IN2, &STFT_ADC1_IN2);
 8004500:	4947      	ldr	r1, [pc, #284]	; (8004620 <main+0x2f8>)
 8004502:	4848      	ldr	r0, [pc, #288]	; (8004624 <main+0x2fc>)
 8004504:	f7fe fc1c 	bl	8002d40 <ADC1_IN2_STFT_Update>
 8004508:	4603      	mov	r3, r0
 800450a:	4a47      	ldr	r2, [pc, #284]	; (8004628 <main+0x300>)
 800450c:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN3_FO_biquad_filter();
 800450e:	f7fd fce1 	bl	8001ed4 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8004512:	482e      	ldr	r0, [pc, #184]	; (80045cc <main+0x2a4>)
 8004514:	f7fd f9e4 	bl	80018e0 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e017      	b.n	800454e <main+0x226>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 800451e:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <main+0x2a4>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3308      	adds	r3, #8
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	ed93 7a00 	vldr	s14, [r3]
 800452e:	4b3f      	ldr	r3, [pc, #252]	; (800462c <main+0x304>)
 8004530:	edd3 7a00 	vldr	s15, [r3]
 8004534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004538:	4a24      	ldr	r2, [pc, #144]	; (80045cc <main+0x2a4>)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3308      	adds	r3, #8
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	3304      	adds	r3, #4
 8004544:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2bff      	cmp	r3, #255	; 0xff
 8004552:	d9e4      	bls.n	800451e <main+0x1f6>

      #ifdef MONITOR_CHANNEL_2_LEFT
	  ADC2_IN3_DAC_Update(&DAC1_ADC2_IN3);
      #endif

	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <main+0x308>)
 8004556:	edd3 7a00 	vldr	s15, [r3]
 800455a:	eeb0 0a67 	vmov.f32	s0, s15
 800455e:	4835      	ldr	r0, [pc, #212]	; (8004634 <main+0x30c>)
 8004560:	f7ff f9fe 	bl	8003960 <ADC2_IN3_TKEO>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <main+0x310>)
 800456a:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 800456c:	4b32      	ldr	r3, [pc, #200]	; (8004638 <main+0x310>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d11e      	bne.n	80045b2 <main+0x28a>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 8004574:	4b2d      	ldr	r3, [pc, #180]	; (800462c <main+0x304>)
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800457e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004582:	eeb0 0a67 	vmov.f32	s0, s15
 8004586:	482d      	ldr	r0, [pc, #180]	; (800463c <main+0x314>)
 8004588:	f7fe f936 	bl	80027f8 <ADC2_IN3_SSC>
 800458c:	eef0 7a40 	vmov.f32	s15, s0
 8004590:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <main+0x318>)
 8004592:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN3_autocorr_calc();
 8004596:	f7fc fccf 	bl	8000f38 <ADC2_IN3_autocorr_calc>
	  AR_3 = ADC2_IN3_autoreg_coeffs();
 800459a:	f7fc fd03 	bl	8000fa4 <ADC2_IN3_autoreg_coeffs>
 800459e:	4603      	mov	r3, r0
 80045a0:	4a28      	ldr	r2, [pc, #160]	; (8004644 <main+0x31c>)
 80045a2:	6013      	str	r3, [r2, #0]
	  STFT_3 = ADC2_IN3_STFT_Update(&STFT_par_ADC2_IN3, &STFT_ADC2_IN3);
 80045a4:	4928      	ldr	r1, [pc, #160]	; (8004648 <main+0x320>)
 80045a6:	4829      	ldr	r0, [pc, #164]	; (800464c <main+0x324>)
 80045a8:	f7fe fcb2 	bl	8002f10 <ADC2_IN3_STFT_Update>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4a28      	ldr	r2, [pc, #160]	; (8004650 <main+0x328>)
 80045b0:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 80045b2:	f7fd fccb 	bl	8001f4c <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 80045b6:	4806      	ldr	r0, [pc, #24]	; (80045d0 <main+0x2a8>)
 80045b8:	f7fd fa36 	bl	8001a28 <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 80045bc:	2300      	movs	r3, #0
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	e060      	b.n	8004684 <main+0x35c>
 80045c2:	bf00      	nop
 80045c4:	2000bddc 	.word	0x2000bddc
 80045c8:	2000c200 	.word	0x2000c200
 80045cc:	2000c624 	.word	0x2000c624
 80045d0:	2000ca48 	.word	0x2000ca48
 80045d4:	2000ce6c 	.word	0x2000ce6c
 80045d8:	2000d290 	.word	0x2000d290
 80045dc:	20019b20 	.word	0x20019b20
 80045e0:	20019b40 	.word	0x20019b40
 80045e4:	20010864 	.word	0x20010864
 80045e8:	20019b58 	.word	0x20019b58
 80045ec:	2001213c 	.word	0x2001213c
 80045f0:	20019b60 	.word	0x20019b60
 80045f4:	20019b78 	.word	0x20019b78
 80045f8:	20013a14 	.word	0x20013a14
 80045fc:	200152ec 	.word	0x200152ec
 8004600:	20019b90 	.word	0x20019b90
 8004604:	20019b24 	.word	0x20019b24
 8004608:	20019b44 	.word	0x20019b44
 800460c:	20010c88 	.word	0x20010c88
 8004610:	20019b59 	.word	0x20019b59
 8004614:	20012560 	.word	0x20012560
 8004618:	20019b64 	.word	0x20019b64
 800461c:	20019b7c 	.word	0x20019b7c
 8004620:	20013e38 	.word	0x20013e38
 8004624:	20015ef4 	.word	0x20015ef4
 8004628:	20019b94 	.word	0x20019b94
 800462c:	20019b28 	.word	0x20019b28
 8004630:	20019b48 	.word	0x20019b48
 8004634:	200110ac 	.word	0x200110ac
 8004638:	20019b5a 	.word	0x20019b5a
 800463c:	20012984 	.word	0x20012984
 8004640:	20019b68 	.word	0x20019b68
 8004644:	20019b80 	.word	0x20019b80
 8004648:	2001425c 	.word	0x2001425c
 800464c:	20016afc 	.word	0x20016afc
 8004650:	20019b98 	.word	0x20019b98
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 8004654:	4a77      	ldr	r2, [pc, #476]	; (8004834 <main+0x50c>)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3308      	adds	r3, #8
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	3304      	adds	r3, #4
 8004660:	ed93 7a00 	vldr	s14, [r3]
 8004664:	4b74      	ldr	r3, [pc, #464]	; (8004838 <main+0x510>)
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466e:	4a71      	ldr	r2, [pc, #452]	; (8004834 <main+0x50c>)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3308      	adds	r3, #8
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	3304      	adds	r3, #4
 800467a:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	3301      	adds	r3, #1
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2bff      	cmp	r3, #255	; 0xff
 8004688:	d9e4      	bls.n	8004654 <main+0x32c>

      #ifdef MONITOR_CHANNEL_5_RIGHT
	  ADC2_IN4_DAC_Update(&DAC1_ADC2_IN4);
      #endif

	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 800468a:	4b6c      	ldr	r3, [pc, #432]	; (800483c <main+0x514>)
 800468c:	edd3 7a00 	vldr	s15, [r3]
 8004690:	eeb0 0a67 	vmov.f32	s0, s15
 8004694:	486a      	ldr	r0, [pc, #424]	; (8004840 <main+0x518>)
 8004696:	f7ff fa27 	bl	8003ae8 <ADC2_IN4_TKEO>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	4b69      	ldr	r3, [pc, #420]	; (8004844 <main+0x51c>)
 80046a0:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 80046a2:	4b68      	ldr	r3, [pc, #416]	; (8004844 <main+0x51c>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d11e      	bne.n	80046e8 <main+0x3c0>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 80046aa:	4b63      	ldr	r3, [pc, #396]	; (8004838 <main+0x510>)
 80046ac:	edd3 7a00 	vldr	s15, [r3]
 80046b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046b8:	eeb0 0a67 	vmov.f32	s0, s15
 80046bc:	4862      	ldr	r0, [pc, #392]	; (8004848 <main+0x520>)
 80046be:	f7fe f90a 	bl	80028d6 <ADC2_IN4_SSC>
 80046c2:	eef0 7a40 	vmov.f32	s15, s0
 80046c6:	4b61      	ldr	r3, [pc, #388]	; (800484c <main+0x524>)
 80046c8:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN4_autocorr_calc();
 80046cc:	f7fc fd0a 	bl	80010e4 <ADC2_IN4_autocorr_calc>
	  AR_4 = ADC2_IN4_autoreg_coeffs();
 80046d0:	f7fc fd3e 	bl	8001150 <ADC2_IN4_autoreg_coeffs>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4a5e      	ldr	r2, [pc, #376]	; (8004850 <main+0x528>)
 80046d8:	6013      	str	r3, [r2, #0]
	  STFT_4 = ADC2_IN4_STFT_Update(&STFT_par_ADC2_IN4, &STFT_ADC2_IN4);
 80046da:	495e      	ldr	r1, [pc, #376]	; (8004854 <main+0x52c>)
 80046dc:	485e      	ldr	r0, [pc, #376]	; (8004858 <main+0x530>)
 80046de:	f7fe fcff 	bl	80030e0 <ADC2_IN4_STFT_Update>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4a5d      	ldr	r2, [pc, #372]	; (800485c <main+0x534>)
 80046e6:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC3_IN1_FO_biquad_filter();
 80046e8:	f7fd fc6c 	bl	8001fc4 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 80046ec:	485c      	ldr	r0, [pc, #368]	; (8004860 <main+0x538>)
 80046ee:	f7fd fa3f 	bl	8001b70 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	e017      	b.n	8004728 <main+0x400>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 80046f8:	4a59      	ldr	r2, [pc, #356]	; (8004860 <main+0x538>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3308      	adds	r3, #8
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	3304      	adds	r3, #4
 8004704:	ed93 7a00 	vldr	s14, [r3]
 8004708:	4b56      	ldr	r3, [pc, #344]	; (8004864 <main+0x53c>)
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004712:	4a53      	ldr	r2, [pc, #332]	; (8004860 <main+0x538>)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3308      	adds	r3, #8
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	3304      	adds	r3, #4
 800471e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3301      	adds	r3, #1
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2bff      	cmp	r3, #255	; 0xff
 800472c:	d9e4      	bls.n	80046f8 <main+0x3d0>
      #ifdef MONITOR_CHANNEL_3_LEFT
	  ADC3_IN1_DAC_Update(&DAC1_ADC3_IN1);
      #endif


	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 800472e:	4b4e      	ldr	r3, [pc, #312]	; (8004868 <main+0x540>)
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	eeb0 0a67 	vmov.f32	s0, s15
 8004738:	484c      	ldr	r0, [pc, #304]	; (800486c <main+0x544>)
 800473a:	f7ff fa99 	bl	8003c70 <ADC3_IN1_TKEO>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <main+0x548>)
 8004744:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 8004746:	4b4a      	ldr	r3, [pc, #296]	; (8004870 <main+0x548>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d11e      	bne.n	800478c <main+0x464>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 800474e:	4b45      	ldr	r3, [pc, #276]	; (8004864 <main+0x53c>)
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475c:	eeb0 0a67 	vmov.f32	s0, s15
 8004760:	4844      	ldr	r0, [pc, #272]	; (8004874 <main+0x54c>)
 8004762:	f7fe f927 	bl	80029b4 <ADC3_IN1_SSC>
 8004766:	eef0 7a40 	vmov.f32	s15, s0
 800476a:	4b43      	ldr	r3, [pc, #268]	; (8004878 <main+0x550>)
 800476c:	edc3 7a00 	vstr	s15, [r3]
	  ADC3_IN1_autocorr_calc();
 8004770:	f7fc fd8e 	bl	8001290 <ADC3_IN1_autocorr_calc>
	  AR_5 = ADC3_IN1_autoreg_coeffs();
 8004774:	f7fc fdc2 	bl	80012fc <ADC3_IN1_autoreg_coeffs>
 8004778:	4603      	mov	r3, r0
 800477a:	4a40      	ldr	r2, [pc, #256]	; (800487c <main+0x554>)
 800477c:	6013      	str	r3, [r2, #0]
	  STFT_5 = ADC3_IN1_STFT_Update(&STFT_par_ADC3_IN1, &STFT_ADC3_IN1);
 800477e:	4940      	ldr	r1, [pc, #256]	; (8004880 <main+0x558>)
 8004780:	4840      	ldr	r0, [pc, #256]	; (8004884 <main+0x55c>)
 8004782:	f7fe fd95 	bl	80032b0 <ADC3_IN1_STFT_Update>
 8004786:	4603      	mov	r3, r0
 8004788:	4a3f      	ldr	r2, [pc, #252]	; (8004888 <main+0x560>)
 800478a:	6013      	str	r3, [r2, #0]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 800478c:	f7fd fc56 	bl	800203c <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 8004790:	483e      	ldr	r0, [pc, #248]	; (800488c <main+0x564>)
 8004792:	f7fd fa91 	bl	8001cb8 <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8004796:	2300      	movs	r3, #0
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	e017      	b.n	80047cc <main+0x4a4>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtracts the stored offset
 800479c:	4a3b      	ldr	r2, [pc, #236]	; (800488c <main+0x564>)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3308      	adds	r3, #8
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	ed93 7a00 	vldr	s14, [r3]
 80047ac:	4b38      	ldr	r3, [pc, #224]	; (8004890 <main+0x568>)
 80047ae:	edd3 7a00 	vldr	s15, [r3]
 80047b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b6:	4a35      	ldr	r2, [pc, #212]	; (800488c <main+0x564>)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2bff      	cmp	r3, #255	; 0xff
 80047d0:	d9e4      	bls.n	800479c <main+0x474>
      #ifdef MONITOR_CHANNEL_6_RIGHT
	  ADC3_IN2_DAC_Update(&DAC1_ADC3_IN2); // For monitoring the channel on an oscilloscope through the DAC
      #endif

	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 80047d2:	4b30      	ldr	r3, [pc, #192]	; (8004894 <main+0x56c>)
 80047d4:	edd3 7a00 	vldr	s15, [r3]
 80047d8:	eeb0 0a67 	vmov.f32	s0, s15
 80047dc:	482e      	ldr	r0, [pc, #184]	; (8004898 <main+0x570>)
 80047de:	f7ff fb0b 	bl	8003df8 <ADC3_IN2_TKEO>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b2d      	ldr	r3, [pc, #180]	; (800489c <main+0x574>)
 80047e8:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 80047ea:	4b2c      	ldr	r3, [pc, #176]	; (800489c <main+0x574>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f47f ade9 	bne.w	80043c6 <main+0x9e>
	  {
	  /* Slope sign change */
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 80047f4:	4b26      	ldr	r3, [pc, #152]	; (8004890 <main+0x568>)
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004802:	eeb0 0a67 	vmov.f32	s0, s15
 8004806:	4826      	ldr	r0, [pc, #152]	; (80048a0 <main+0x578>)
 8004808:	f7fe f943 	bl	8002a92 <ADC3_IN2_SSC>
 800480c:	eef0 7a40 	vmov.f32	s15, s0
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <main+0x57c>)
 8004812:	edc3 7a00 	vstr	s15, [r3]
	  /* Computes the autocorrelation values and the autoregression coefficients and returns the latter */
	  ADC3_IN2_autocorr_calc();
 8004816:	f7fc fe13 	bl	8001440 <ADC3_IN2_autocorr_calc>
	  AR_6 = ADC3_IN2_autoreg_coeffs();
 800481a:	f7fc fe47 	bl	80014ac <ADC3_IN2_autoreg_coeffs>
 800481e:	4603      	mov	r3, r0
 8004820:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <main+0x580>)
 8004822:	6013      	str	r3, [r2, #0]
	  /* Computes the Short Time Fourier Transform from the moving average buffer */
	  STFT_6 = ADC3_IN2_STFT_Update(&STFT_par_ADC3_IN2, &STFT_ADC3_IN2);
 8004824:	4921      	ldr	r1, [pc, #132]	; (80048ac <main+0x584>)
 8004826:	4822      	ldr	r0, [pc, #136]	; (80048b0 <main+0x588>)
 8004828:	f7fe fe2a 	bl	8003480 <ADC3_IN2_STFT_Update>
 800482c:	4603      	mov	r3, r0
 800482e:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <main+0x58c>)
 8004830:	6013      	str	r3, [r2, #0]
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8004832:	e5c8      	b.n	80043c6 <main+0x9e>
 8004834:	2000ca48 	.word	0x2000ca48
 8004838:	20019b2c 	.word	0x20019b2c
 800483c:	20019b4c 	.word	0x20019b4c
 8004840:	200114d0 	.word	0x200114d0
 8004844:	20019b5b 	.word	0x20019b5b
 8004848:	20012da8 	.word	0x20012da8
 800484c:	20019b6c 	.word	0x20019b6c
 8004850:	20019b84 	.word	0x20019b84
 8004854:	20014680 	.word	0x20014680
 8004858:	20017704 	.word	0x20017704
 800485c:	20019b9c 	.word	0x20019b9c
 8004860:	2000ce6c 	.word	0x2000ce6c
 8004864:	20019b30 	.word	0x20019b30
 8004868:	20019b50 	.word	0x20019b50
 800486c:	200118f4 	.word	0x200118f4
 8004870:	20019b5c 	.word	0x20019b5c
 8004874:	200131cc 	.word	0x200131cc
 8004878:	20019b70 	.word	0x20019b70
 800487c:	20019b88 	.word	0x20019b88
 8004880:	20014aa4 	.word	0x20014aa4
 8004884:	2001830c 	.word	0x2001830c
 8004888:	20019ba0 	.word	0x20019ba0
 800488c:	2000d290 	.word	0x2000d290
 8004890:	20019b34 	.word	0x20019b34
 8004894:	20019b54 	.word	0x20019b54
 8004898:	20011d18 	.word	0x20011d18
 800489c:	20019b5d 	.word	0x20019b5d
 80048a0:	200135f0 	.word	0x200135f0
 80048a4:	20019b74 	.word	0x20019b74
 80048a8:	20019b8c 	.word	0x20019b8c
 80048ac:	20014ec8 	.word	0x20014ec8
 80048b0:	20018f14 	.word	0x20018f14
 80048b4:	20019ba4 	.word	0x20019ba4

080048b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b094      	sub	sp, #80	; 0x50
 80048bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048be:	f107 0318 	add.w	r3, r7, #24
 80048c2:	2238      	movs	r2, #56	; 0x38
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f006 fc9e 	bl	800b208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048cc:	1d3b      	adds	r3, r7, #4
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	609a      	str	r2, [r3, #8]
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80048de:	f003 fd71 	bl	80083c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048ec:	2302      	movs	r3, #2
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048f0:	2303      	movs	r3, #3
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80048f8:	2308      	movs	r3, #8
 80048fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048fc:	2302      	movs	r3, #2
 80048fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004900:	2302      	movs	r3, #2
 8004902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004904:	2302      	movs	r3, #2
 8004906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004908:	f107 0318 	add.w	r3, r7, #24
 800490c:	4618      	mov	r0, r3
 800490e:	f003 fe0d 	bl	800852c <HAL_RCC_OscConfig>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8004918:	f000 feb0 	bl	800567c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800491c:	230f      	movs	r3, #15
 800491e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004920:	2303      	movs	r3, #3
 8004922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004930:	1d3b      	adds	r3, r7, #4
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f004 f90b 	bl	8008b50 <HAL_RCC_ClockConfig>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004940:	f000 fe9c 	bl	800567c <Error_Handler>
  }
}
 8004944:	bf00      	nop
 8004946:	3750      	adds	r7, #80	; 0x50
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	605a      	str	r2, [r3, #4]
 800495c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	2220      	movs	r2, #32
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f006 fc4f 	bl	800b208 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800496a:	4b3a      	ldr	r3, [pc, #232]	; (8004a54 <MX_ADC1_Init+0x108>)
 800496c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004970:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <MX_ADC1_Init+0x108>)
 8004974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800497a:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <MX_ADC1_Init+0x108>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004980:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <MX_ADC1_Init+0x108>)
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004986:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <MX_ADC1_Init+0x108>)
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800498c:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <MX_ADC1_Init+0x108>)
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004992:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <MX_ADC1_Init+0x108>)
 8004994:	2204      	movs	r2, #4
 8004996:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004998:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <MX_ADC1_Init+0x108>)
 800499a:	2200      	movs	r2, #0
 800499c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800499e:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049a6:	2202      	movs	r2, #2
 80049a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80049aa:	4b2a      	ldr	r3, [pc, #168]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80049b2:	4b28      	ldr	r3, [pc, #160]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049b4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80049b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80049ba:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80049ca:	4b22      	ldr	r3, [pc, #136]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80049d0:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80049d8:	481e      	ldr	r0, [pc, #120]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049da:	f001 fc53 	bl	8006284 <HAL_ADC_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80049e4:	f000 fe4a 	bl	800567c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80049ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f0:	4619      	mov	r1, r3
 80049f2:	4818      	ldr	r0, [pc, #96]	; (8004a54 <MX_ADC1_Init+0x108>)
 80049f4:	f002 fc44 	bl	8007280 <HAL_ADCEx_MultiModeConfigChannel>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80049fe:	f000 fe3d 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <MX_ADC1_Init+0x10c>)
 8004a04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004a06:	2306      	movs	r3, #6
 8004a08:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004a0a:	2305      	movs	r3, #5
 8004a0c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004a0e:	237f      	movs	r3, #127	; 0x7f
 8004a10:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004a12:	2304      	movs	r3, #4
 8004a14:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	480d      	ldr	r0, [pc, #52]	; (8004a54 <MX_ADC1_Init+0x108>)
 8004a20:	f001 feb2 	bl	8006788 <HAL_ADC_ConfigChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8004a2a:	f000 fe27 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <MX_ADC1_Init+0x110>)
 8004a30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004a32:	230c      	movs	r3, #12
 8004a34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4806      	ldr	r0, [pc, #24]	; (8004a54 <MX_ADC1_Init+0x108>)
 8004a3c:	f001 fea4 	bl	8006788 <HAL_ADC_ConfigChannel>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8004a46:	f000 fe19 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000b97c 	.word	0x2000b97c
 8004a58:	04300002 	.word	0x04300002
 8004a5c:	08600004 	.word	0x08600004

08004a60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a66:	463b      	mov	r3, r7
 8004a68:	2220      	movs	r2, #32
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f006 fbcb 	bl	800b208 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004a74:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <MX_ADC2_Init+0xe4>)
 8004a76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004a78:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004a80:	4b2f      	ldr	r3, [pc, #188]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004a8c:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004a92:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004a9e:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004aa4:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8004aaa:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004aac:	2202      	movs	r2, #2
 8004aae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004aba:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004ac0:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004ade:	4818      	ldr	r0, [pc, #96]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004ae0:	f001 fbd0 	bl	8006284 <HAL_ADC_Init>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8004aea:	f000 fdc7 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <MX_ADC2_Init+0xe8>)
 8004af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004af2:	2306      	movs	r3, #6
 8004af4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004af6:	2305      	movs	r3, #5
 8004af8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004afa:	237f      	movs	r3, #127	; 0x7f
 8004afc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004afe:	2304      	movs	r3, #4
 8004b00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b06:	463b      	mov	r3, r7
 8004b08:	4619      	mov	r1, r3
 8004b0a:	480d      	ldr	r0, [pc, #52]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004b0c:	f001 fe3c 	bl	8006788 <HAL_ADC_ConfigChannel>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8004b16:	f000 fdb1 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <MX_ADC2_Init+0xec>)
 8004b1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004b1e:	230c      	movs	r3, #12
 8004b20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b22:	463b      	mov	r3, r7
 8004b24:	4619      	mov	r1, r3
 8004b26:	4806      	ldr	r0, [pc, #24]	; (8004b40 <MX_ADC2_Init+0xe0>)
 8004b28:	f001 fe2e 	bl	8006788 <HAL_ADC_ConfigChannel>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8004b32:	f000 fda3 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004b36:	bf00      	nop
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000b9e8 	.word	0x2000b9e8
 8004b44:	50000100 	.word	0x50000100
 8004b48:	0c900008 	.word	0x0c900008
 8004b4c:	10c00010 	.word	0x10c00010

08004b50 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b56:	463b      	mov	r3, r7
 8004b58:	2220      	movs	r2, #32
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f006 fb53 	bl	800b208 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8004b62:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b64:	4a33      	ldr	r2, [pc, #204]	; (8004c34 <MX_ADC3_Init+0xe4>)
 8004b66:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b6e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004b70:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8004b7c:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004b82:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b88:	4b29      	ldr	r3, [pc, #164]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004b94:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8004b9a:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 8004ba8:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004baa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004bb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004bce:	4818      	ldr	r0, [pc, #96]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004bd0:	f001 fb58 	bl	8006284 <HAL_ADC_Init>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004bda:	f000 fd4f 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004bde:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <MX_ADC3_Init+0xe8>)
 8004be0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004be2:	2306      	movs	r3, #6
 8004be4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004be6:	2305      	movs	r3, #5
 8004be8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004bea:	237f      	movs	r3, #127	; 0x7f
 8004bec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004bee:	2304      	movs	r3, #4
 8004bf0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	480d      	ldr	r0, [pc, #52]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004bfc:	f001 fdc4 	bl	8006788 <HAL_ADC_ConfigChannel>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8004c06:	f000 fd39 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <MX_ADC3_Init+0xec>)
 8004c0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004c0e:	230c      	movs	r3, #12
 8004c10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004c12:	463b      	mov	r3, r7
 8004c14:	4619      	mov	r1, r3
 8004c16:	4806      	ldr	r0, [pc, #24]	; (8004c30 <MX_ADC3_Init+0xe0>)
 8004c18:	f001 fdb6 	bl	8006788 <HAL_ADC_ConfigChannel>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8004c22:	f000 fd2b 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004c26:	bf00      	nop
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	2000ba54 	.word	0x2000ba54
 8004c34:	50000400 	.word	0x50000400
 8004c38:	04300002 	.word	0x04300002
 8004c3c:	08600004 	.word	0x08600004

08004c40 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08c      	sub	sp, #48	; 0x30
 8004c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004c46:	463b      	mov	r3, r7
 8004c48:	2230      	movs	r2, #48	; 0x30
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f006 fadb 	bl	800b208 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004c52:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <MX_DAC1_Init+0x84>)
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <MX_DAC1_Init+0x88>)
 8004c56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004c58:	481a      	ldr	r0, [pc, #104]	; (8004cc4 <MX_DAC1_Init+0x84>)
 8004c5a:	f002 fd08 	bl	800766e <HAL_DAC_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004c64:	f000 fd0a 	bl	800567c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8004c78:	231e      	movs	r3, #30
 8004c7a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8004c84:	2301      	movs	r3, #1
 8004c86:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	2200      	movs	r2, #0
 8004c90:	4619      	mov	r1, r3
 8004c92:	480c      	ldr	r0, [pc, #48]	; (8004cc4 <MX_DAC1_Init+0x84>)
 8004c94:	f002 fd0e 	bl	80076b4 <HAL_DAC_ConfigChannel>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8004c9e:	f000 fced 	bl	800567c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004ca2:	230a      	movs	r3, #10
 8004ca4:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	2210      	movs	r2, #16
 8004caa:	4619      	mov	r1, r3
 8004cac:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <MX_DAC1_Init+0x84>)
 8004cae:	f002 fd01 	bl	80076b4 <HAL_DAC_ConfigChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 8004cb8:	f000 fce0 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004cbc:	bf00      	nop
 8004cbe:	3730      	adds	r7, #48	; 0x30
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	2000bbe0 	.word	0x2000bbe0
 8004cc8:	50000800 	.word	0x50000800

08004ccc <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <MX_FMAC_Init+0x20>)
 8004cd2:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <MX_FMAC_Init+0x24>)
 8004cd4:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004cd6:	4805      	ldr	r0, [pc, #20]	; (8004cec <MX_FMAC_Init+0x20>)
 8004cd8:	f003 f916 	bl	8007f08 <HAL_FMAC_Init>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8004ce2:	f000 fccb 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2000bcb4 	.word	0x2000bcb4
 8004cf0:	40021400 	.word	0x40021400

08004cf4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <MX_TIM6_Init+0x64>)
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <MX_TIM6_Init+0x68>)
 8004d08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <MX_TIM6_Init+0x64>)
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <MX_TIM6_Init+0x64>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <MX_TIM6_Init+0x64>)
 8004d18:	2207      	movs	r2, #7
 8004d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <MX_TIM6_Init+0x64>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d22:	480d      	ldr	r0, [pc, #52]	; (8004d58 <MX_TIM6_Init+0x64>)
 8004d24:	f004 fb3c 	bl	80093a0 <HAL_TIM_Base_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004d2e:	f000 fca5 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d32:	2320      	movs	r3, #32
 8004d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d3a:	1d3b      	adds	r3, r7, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4806      	ldr	r0, [pc, #24]	; (8004d58 <MX_TIM6_Init+0x64>)
 8004d40:	f004 fdc0 	bl	80098c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004d4a:	f000 fc97 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	2000bcec 	.word	0x2000bcec
 8004d5c:	40001000 	.word	0x40001000

08004d60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <MX_TIM7_Init+0x64>)
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <MX_TIM7_Init+0x68>)
 8004d74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <MX_TIM7_Init+0x64>)
 8004d78:	2207      	movs	r2, #7
 8004d7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <MX_TIM7_Init+0x64>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <MX_TIM7_Init+0x64>)
 8004d84:	2207      	movs	r2, #7
 8004d86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <MX_TIM7_Init+0x64>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004d8e:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <MX_TIM7_Init+0x64>)
 8004d90:	f004 fb06 	bl	80093a0 <HAL_TIM_Base_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004d9a:	f000 fc6f 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d9e:	2320      	movs	r3, #32
 8004da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4806      	ldr	r0, [pc, #24]	; (8004dc4 <MX_TIM7_Init+0x64>)
 8004dac:	f004 fd8a 	bl	80098c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004db6:	f000 fc61 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000bd38 	.word	0x2000bd38
 8004dc8:	40001400 	.word	0x40001400

08004dcc <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004dd2:	f107 030c 	add.w	r3, r7, #12
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	609a      	str	r2, [r3, #8]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004de2:	463b      	mov	r3, r7
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8004dec:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004dee:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <MX_TIM20_Init+0xa4>)
 8004df0:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004df4:	2207      	movs	r2, #7
 8004df6:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e04:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e10:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8004e16:	4815      	ldr	r0, [pc, #84]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004e18:	f004 fac2 	bl	80093a0 <HAL_TIM_Base_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8004e22:	f000 fc2b 	bl	800567c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8004e2e:	f107 030c 	add.w	r3, r7, #12
 8004e32:	4619      	mov	r1, r3
 8004e34:	480d      	ldr	r0, [pc, #52]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004e36:	f004 fb0a 	bl	800944e <HAL_TIM_SlaveConfigSynchro>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8004e40:	f000 fc1c 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e44:	2320      	movs	r3, #32
 8004e46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8004e50:	463b      	mov	r3, r7
 8004e52:	4619      	mov	r1, r3
 8004e54:	4805      	ldr	r0, [pc, #20]	; (8004e6c <MX_TIM20_Init+0xa0>)
 8004e56:	f004 fd35 	bl	80098c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8004e60:	f000 fc0c 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8004e64:	bf00      	nop
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	2000bd84 	.word	0x2000bd84
 8004e70:	40015000 	.word	0x40015000

08004e74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e7a:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6493      	str	r3, [r2, #72]	; 0x48
 8004e86:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e92:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e96:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6493      	str	r3, [r2, #72]	; 0x48
 8004e9e:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	60bb      	str	r3, [r7, #8]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eae:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	6493      	str	r3, [r2, #72]	; 0x48
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <MX_DMA_Init+0xa8>)
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	607b      	str	r3, [r7, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	200b      	movs	r0, #11
 8004ec8:	f002 fb9d 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ecc:	200b      	movs	r0, #11
 8004ece:	f002 fbb4 	bl	800763a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	200d      	movs	r0, #13
 8004ed8:	f002 fb95 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004edc:	200d      	movs	r0, #13
 8004ede:	f002 fbac 	bl	800763a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	2010      	movs	r0, #16
 8004ee8:	f002 fb8d 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004eec:	2010      	movs	r0, #16
 8004eee:	f002 fba4 	bl	800763a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	2038      	movs	r0, #56	; 0x38
 8004ef8:	f002 fb85 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8004efc:	2038      	movs	r0, #56	; 0x38
 8004efe:	f002 fb9c 	bl	800763a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2100      	movs	r1, #0
 8004f06:	2061      	movs	r0, #97	; 0x61
 8004f08:	f002 fb7d 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8004f0c:	2061      	movs	r0, #97	; 0x61
 8004f0e:	f002 fb94 	bl	800763a <HAL_NVIC_EnableIRQ>

}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000

08004f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	609a      	str	r2, [r3, #8]
 8004f32:	60da      	str	r2, [r3, #12]
 8004f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f36:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f3c:	f043 0310 	orr.w	r3, r3, #16
 8004f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f42:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f4e:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f54:	f043 0320 	orr.w	r3, r3, #32
 8004f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f66:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f72:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7e:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <MX_GPIO_Init+0xc0>)
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8004f96:	2200      	movs	r2, #0
 8004f98:	2120      	movs	r1, #32
 8004f9a:	4812      	ldr	r0, [pc, #72]	; (8004fe4 <MX_GPIO_Init+0xc4>)
 8004f9c:	f003 f9e2 	bl	8008364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_bgn_aqstn_Pin */
  GPIO_InitStruct.Pin = GPIO_bgn_aqstn_Pin;
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004faa:	2302      	movs	r3, #2
 8004fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_bgn_aqstn_GPIO_Port, &GPIO_InitStruct);
 8004fae:	f107 0314 	add.w	r3, r7, #20
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <MX_GPIO_Init+0xc4>)
 8004fb6:	f003 f853 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004fba:	2320      	movs	r3, #32
 8004fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fca:	f107 0314 	add.w	r3, r7, #20
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4804      	ldr	r0, [pc, #16]	; (8004fe4 <MX_GPIO_Init+0xc4>)
 8004fd2:	f003 f845 	bl	8008060 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004fd6:	bf00      	nop
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	48001000 	.word	0x48001000

08004fe8 <EXT12_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXT12_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0

	  /* ADC1 is started using timer 6 triggered conversions */
	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
      ADC_status = HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8004fee:	4bba      	ldr	r3, [pc, #744]	; (80052d8 <EXT12_IRQHandler+0x2f0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	48b8      	ldr	r0, [pc, #736]	; (80052dc <EXT12_IRQHandler+0x2f4>)
 8004ffa:	f001 faf1 	bl	80065e0 <HAL_ADC_Start_DMA>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	4bb7      	ldr	r3, [pc, #732]	; (80052e0 <EXT12_IRQHandler+0x2f8>)
 8005004:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc1);
 8005006:	48b5      	ldr	r0, [pc, #724]	; (80052dc <EXT12_IRQHandler+0x2f4>)
 8005008:	f000 fa16 	bl	8005438 <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 800500c:	48b3      	ldr	r0, [pc, #716]	; (80052dc <EXT12_IRQHandler+0x2f4>)
 800500e:	f000 faa1 	bl	8005554 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
	  ADC_status = HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005012:	4bb4      	ldr	r3, [pc, #720]	; (80052e4 <EXT12_IRQHandler+0x2fc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800501a:	4619      	mov	r1, r3
 800501c:	48b2      	ldr	r0, [pc, #712]	; (80052e8 <EXT12_IRQHandler+0x300>)
 800501e:	f001 fadf 	bl	80065e0 <HAL_ADC_Start_DMA>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	4bae      	ldr	r3, [pc, #696]	; (80052e0 <EXT12_IRQHandler+0x2f8>)
 8005028:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc2);
 800502a:	48af      	ldr	r0, [pc, #700]	; (80052e8 <EXT12_IRQHandler+0x300>)
 800502c:	f000 fa04 	bl	8005438 <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc2);
 8005030:	48ad      	ldr	r0, [pc, #692]	; (80052e8 <EXT12_IRQHandler+0x300>)
 8005032:	f000 fa8f 	bl	8005554 <HAL_ADC_ConvCpltCallback>

	  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
	  ADC_status = HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8005036:	4bad      	ldr	r3, [pc, #692]	; (80052ec <EXT12_IRQHandler+0x304>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800503e:	4619      	mov	r1, r3
 8005040:	48ab      	ldr	r0, [pc, #684]	; (80052f0 <EXT12_IRQHandler+0x308>)
 8005042:	f001 facd 	bl	80065e0 <HAL_ADC_Start_DMA>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	4ba5      	ldr	r3, [pc, #660]	; (80052e0 <EXT12_IRQHandler+0x2f8>)
 800504c:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_ConvHalfCpltCallback(&hadc3);
 800504e:	48a8      	ldr	r0, [pc, #672]	; (80052f0 <EXT12_IRQHandler+0x308>)
 8005050:	f000 f9f2 	bl	8005438 <HAL_ADC_ConvHalfCpltCallback>
	  HAL_ADC_ConvCpltCallback(&hadc3);
 8005054:	48a6      	ldr	r0, [pc, #664]	; (80052f0 <EXT12_IRQHandler+0x308>)
 8005056:	f000 fa7d 	bl	8005554 <HAL_ADC_ConvCpltCallback>

	/* Calculating the offset value and standard deviation for the base line signal for all the channels */
	if(Offset_1_Calculated==0)
 800505a:	4ba6      	ldr	r3, [pc, #664]	; (80052f4 <EXT12_IRQHandler+0x30c>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d13e      	bne.n	80050e0 <EXT12_IRQHandler+0xf8>
	{
	  float32_t OffsetSum_1 = 0.0f;
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8005068:	2300      	movs	r3, #0
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506e:	e01a      	b.n	80050a6 <EXT12_IRQHandler+0xbe>
		{
			/* Collects samples to fill the buffer */
			update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8005070:	f7fc feb8 	bl	8001de4 <update_ADC1_IN1_FO_biquad_filter>
			MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 8005074:	48a0      	ldr	r0, [pc, #640]	; (80052f8 <EXT12_IRQHandler+0x310>)
 8005076:	f7fc faeb 	bl	8001650 <MA_ADC1_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 800507a:	48a0      	ldr	r0, [pc, #640]	; (80052fc <EXT12_IRQHandler+0x314>)
 800507c:	f7fc fff6 	bl	800206c <ADC1_IN1_OffsetCalc>
 8005080:	eef0 7a40 	vmov.f32	s15, s0
 8005084:	4b9e      	ldr	r3, [pc, #632]	; (8005300 <EXT12_IRQHandler+0x318>)
 8005086:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_1 += Offset_1;
 800508a:	4b9d      	ldr	r3, [pc, #628]	; (8005300 <EXT12_IRQHandler+0x318>)
 800508c:	edd3 7a00 	vldr	s15, [r3]
 8005090:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005098:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800509c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050a0:	3301      	adds	r3, #1
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050aa:	2b13      	cmp	r3, #19
 80050ac:	d9e0      	bls.n	8005070 <EXT12_IRQHandler+0x88>
		}

	  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 80050ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80050b2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80050b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050ba:	4b91      	ldr	r3, [pc, #580]	; (8005300 <EXT12_IRQHandler+0x318>)
 80050bc:	edc3 7a00 	vstr	s15, [r3]
	  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 80050c0:	4b8c      	ldr	r3, [pc, #560]	; (80052f4 <EXT12_IRQHandler+0x30c>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]

	  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 80050c6:	4b8e      	ldr	r3, [pc, #568]	; (8005300 <EXT12_IRQHandler+0x318>)
 80050c8:	edd3 7a00 	vldr	s15, [r3]
 80050cc:	eeb0 0a67 	vmov.f32	s0, s15
 80050d0:	488c      	ldr	r0, [pc, #560]	; (8005304 <EXT12_IRQHandler+0x31c>)
 80050d2:	f7fd f8eb 	bl	80022ac <ADC1_IN1_SD_BL>
 80050d6:	eef0 7a40 	vmov.f32	s15, s0
 80050da:	4b8b      	ldr	r3, [pc, #556]	; (8005308 <EXT12_IRQHandler+0x320>)
 80050dc:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_2_Calculated==0)
 80050e0:	4b8a      	ldr	r3, [pc, #552]	; (800530c <EXT12_IRQHandler+0x324>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d13b      	bne.n	8005160 <EXT12_IRQHandler+0x178>
	{
	  float32_t OffsetSum_2;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e01a      	b.n	8005126 <EXT12_IRQHandler+0x13e>
		{

			update_ADC1_IN2_FO_biquad_filter();
 80050f0:	f7fc feb4 	bl	8001e5c <update_ADC1_IN2_FO_biquad_filter>
			MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 80050f4:	4886      	ldr	r0, [pc, #536]	; (8005310 <EXT12_IRQHandler+0x328>)
 80050f6:	f7fc fb4f 	bl	8001798 <MA_ADC1_IN2_Update>


			Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 80050fa:	4886      	ldr	r0, [pc, #536]	; (8005314 <EXT12_IRQHandler+0x32c>)
 80050fc:	f7fc ffe6 	bl	80020cc <ADC1_IN2_OffsetCalc>
 8005100:	eef0 7a40 	vmov.f32	s15, s0
 8005104:	4b84      	ldr	r3, [pc, #528]	; (8005318 <EXT12_IRQHandler+0x330>)
 8005106:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_2 += Offset_2;
 800510a:	4b83      	ldr	r3, [pc, #524]	; (8005318 <EXT12_IRQHandler+0x330>)
 800510c:	edd3 7a00 	vldr	s15, [r3]
 8005110:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800511c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005120:	3301      	adds	r3, #1
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005126:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800512a:	2b13      	cmp	r3, #19
 800512c:	d9e0      	bls.n	80050f0 <EXT12_IRQHandler+0x108>
		}

	  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 800512e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005132:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800513a:	4b77      	ldr	r3, [pc, #476]	; (8005318 <EXT12_IRQHandler+0x330>)
 800513c:	edc3 7a00 	vstr	s15, [r3]
	  Offset_2_Calculated = 1;
 8005140:	4b72      	ldr	r3, [pc, #456]	; (800530c <EXT12_IRQHandler+0x324>)
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]

	  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 8005146:	4b74      	ldr	r3, [pc, #464]	; (8005318 <EXT12_IRQHandler+0x330>)
 8005148:	edd3 7a00 	vldr	s15, [r3]
 800514c:	eeb0 0a67 	vmov.f32	s0, s15
 8005150:	4872      	ldr	r0, [pc, #456]	; (800531c <EXT12_IRQHandler+0x334>)
 8005152:	f7fd f8f7 	bl	8002344 <ADC1_IN2_SD_BL>
 8005156:	eef0 7a40 	vmov.f32	s15, s0
 800515a:	4b71      	ldr	r3, [pc, #452]	; (8005320 <EXT12_IRQHandler+0x338>)
 800515c:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_3_Calculated==0)
 8005160:	4b70      	ldr	r3, [pc, #448]	; (8005324 <EXT12_IRQHandler+0x33c>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d137      	bne.n	80051d8 <EXT12_IRQHandler+0x1f0>
	{
	  float32_t OffsetSum_3;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005168:	2300      	movs	r3, #0
 800516a:	76fb      	strb	r3, [r7, #27]
 800516c:	e018      	b.n	80051a0 <EXT12_IRQHandler+0x1b8>
		{

			update_ADC2_IN3_FO_biquad_filter();
 800516e:	f7fc feb1 	bl	8001ed4 <update_ADC2_IN3_FO_biquad_filter>
			MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8005172:	486d      	ldr	r0, [pc, #436]	; (8005328 <EXT12_IRQHandler+0x340>)
 8005174:	f7fc fbb4 	bl	80018e0 <MA_ADC2_IN3_Update>


			Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 8005178:	486c      	ldr	r0, [pc, #432]	; (800532c <EXT12_IRQHandler+0x344>)
 800517a:	f7fc ffd7 	bl	800212c <ADC2_IN3_OffsetCalc>
 800517e:	eef0 7a40 	vmov.f32	s15, s0
 8005182:	4b6b      	ldr	r3, [pc, #428]	; (8005330 <EXT12_IRQHandler+0x348>)
 8005184:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_3 += Offset_3;
 8005188:	4b69      	ldr	r3, [pc, #420]	; (8005330 <EXT12_IRQHandler+0x348>)
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005196:	edc7 7a07 	vstr	s15, [r7, #28]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800519a:	7efb      	ldrb	r3, [r7, #27]
 800519c:	3301      	adds	r3, #1
 800519e:	76fb      	strb	r3, [r7, #27]
 80051a0:	7efb      	ldrb	r3, [r7, #27]
 80051a2:	2b13      	cmp	r3, #19
 80051a4:	d9e3      	bls.n	800516e <EXT12_IRQHandler+0x186>
		}

	  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 80051a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80051aa:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80051ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051b2:	4b5f      	ldr	r3, [pc, #380]	; (8005330 <EXT12_IRQHandler+0x348>)
 80051b4:	edc3 7a00 	vstr	s15, [r3]
	  Offset_3_Calculated = 1;
 80051b8:	4b5a      	ldr	r3, [pc, #360]	; (8005324 <EXT12_IRQHandler+0x33c>)
 80051ba:	2201      	movs	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]

	  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 80051be:	4b5c      	ldr	r3, [pc, #368]	; (8005330 <EXT12_IRQHandler+0x348>)
 80051c0:	edd3 7a00 	vldr	s15, [r3]
 80051c4:	eeb0 0a67 	vmov.f32	s0, s15
 80051c8:	485a      	ldr	r0, [pc, #360]	; (8005334 <EXT12_IRQHandler+0x34c>)
 80051ca:	f7fd f907 	bl	80023dc <ADC2_IN3_SD_BL>
 80051ce:	eef0 7a40 	vmov.f32	s15, s0
 80051d2:	4b59      	ldr	r3, [pc, #356]	; (8005338 <EXT12_IRQHandler+0x350>)
 80051d4:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_4_Calculated==0)
 80051d8:	4b58      	ldr	r3, [pc, #352]	; (800533c <EXT12_IRQHandler+0x354>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d137      	bne.n	8005250 <EXT12_IRQHandler+0x268>
	{
	  float32_t OffsetSum_4;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80051e0:	2300      	movs	r3, #0
 80051e2:	74fb      	strb	r3, [r7, #19]
 80051e4:	e018      	b.n	8005218 <EXT12_IRQHandler+0x230>
		{

			update_ADC2_IN4_FO_biquad_filter();
 80051e6:	f7fc feb1 	bl	8001f4c <update_ADC2_IN4_FO_biquad_filter>
			MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 80051ea:	4855      	ldr	r0, [pc, #340]	; (8005340 <EXT12_IRQHandler+0x358>)
 80051ec:	f7fc fc1c 	bl	8001a28 <MA_ADC2_IN4_Update>


			Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 80051f0:	4854      	ldr	r0, [pc, #336]	; (8005344 <EXT12_IRQHandler+0x35c>)
 80051f2:	f7fc ffcb 	bl	800218c <ADC2_IN4_OffsetCalc>
 80051f6:	eef0 7a40 	vmov.f32	s15, s0
 80051fa:	4b53      	ldr	r3, [pc, #332]	; (8005348 <EXT12_IRQHandler+0x360>)
 80051fc:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_4 += Offset_4;
 8005200:	4b51      	ldr	r3, [pc, #324]	; (8005348 <EXT12_IRQHandler+0x360>)
 8005202:	edd3 7a00 	vldr	s15, [r3]
 8005206:	ed97 7a05 	vldr	s14, [r7, #20]
 800520a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800520e:	edc7 7a05 	vstr	s15, [r7, #20]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8005212:	7cfb      	ldrb	r3, [r7, #19]
 8005214:	3301      	adds	r3, #1
 8005216:	74fb      	strb	r3, [r7, #19]
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	2b13      	cmp	r3, #19
 800521c:	d9e3      	bls.n	80051e6 <EXT12_IRQHandler+0x1fe>
		}

	  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 800521e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005222:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800522a:	4b47      	ldr	r3, [pc, #284]	; (8005348 <EXT12_IRQHandler+0x360>)
 800522c:	edc3 7a00 	vstr	s15, [r3]
	  Offset_4_Calculated = 1;
 8005230:	4b42      	ldr	r3, [pc, #264]	; (800533c <EXT12_IRQHandler+0x354>)
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]

	  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 8005236:	4b44      	ldr	r3, [pc, #272]	; (8005348 <EXT12_IRQHandler+0x360>)
 8005238:	edd3 7a00 	vldr	s15, [r3]
 800523c:	eeb0 0a67 	vmov.f32	s0, s15
 8005240:	4842      	ldr	r0, [pc, #264]	; (800534c <EXT12_IRQHandler+0x364>)
 8005242:	f7fd f917 	bl	8002474 <ADC2_IN4_SD_BL>
 8005246:	eef0 7a40 	vmov.f32	s15, s0
 800524a:	4b41      	ldr	r3, [pc, #260]	; (8005350 <EXT12_IRQHandler+0x368>)
 800524c:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_5_Calculated==0)
 8005250:	4b40      	ldr	r3, [pc, #256]	; (8005354 <EXT12_IRQHandler+0x36c>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d137      	bne.n	80052c8 <EXT12_IRQHandler+0x2e0>
	{
	  float32_t OffsetSum_5;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8005258:	2300      	movs	r3, #0
 800525a:	72fb      	strb	r3, [r7, #11]
 800525c:	e018      	b.n	8005290 <EXT12_IRQHandler+0x2a8>
		{
			/* Collects samples to fill the buffer */
			update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 800525e:	f7fc feb1 	bl	8001fc4 <update_ADC3_IN1_FO_biquad_filter>
			MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 8005262:	483d      	ldr	r0, [pc, #244]	; (8005358 <EXT12_IRQHandler+0x370>)
 8005264:	f7fc fc84 	bl	8001b70 <MA_ADC3_IN1_Update>

			/* Calculate the offset from the filled buffer */
			Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 8005268:	483c      	ldr	r0, [pc, #240]	; (800535c <EXT12_IRQHandler+0x374>)
 800526a:	f7fc ffbf 	bl	80021ec <ADC3_IN1_OffsetCalc>
 800526e:	eef0 7a40 	vmov.f32	s15, s0
 8005272:	4b23      	ldr	r3, [pc, #140]	; (8005300 <EXT12_IRQHandler+0x318>)
 8005274:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_5 += Offset_5;
 8005278:	4b39      	ldr	r3, [pc, #228]	; (8005360 <EXT12_IRQHandler+0x378>)
 800527a:	edd3 7a00 	vldr	s15, [r3]
 800527e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005286:	edc7 7a03 	vstr	s15, [r7, #12]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800528a:	7afb      	ldrb	r3, [r7, #11]
 800528c:	3301      	adds	r3, #1
 800528e:	72fb      	strb	r3, [r7, #11]
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	2b13      	cmp	r3, #19
 8005294:	d9e3      	bls.n	800525e <EXT12_IRQHandler+0x276>
		}

	  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 8005296:	ed97 7a03 	vldr	s14, [r7, #12]
 800529a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800529e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052a2:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <EXT12_IRQHandler+0x378>)
 80052a4:	edc3 7a00 	vstr	s15, [r3]
	  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <EXT12_IRQHandler+0x36c>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]

	  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 80052ae:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <EXT12_IRQHandler+0x378>)
 80052b0:	edd3 7a00 	vldr	s15, [r3]
 80052b4:	eeb0 0a67 	vmov.f32	s0, s15
 80052b8:	482a      	ldr	r0, [pc, #168]	; (8005364 <EXT12_IRQHandler+0x37c>)
 80052ba:	f7fd f927 	bl	800250c <ADC3_IN1_SD_BL>
 80052be:	eef0 7a40 	vmov.f32	s15, s0
 80052c2:	4b29      	ldr	r3, [pc, #164]	; (8005368 <EXT12_IRQHandler+0x380>)
 80052c4:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Offset_6_Calculated==0)
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <EXT12_IRQHandler+0x384>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8084 	bne.w	80053da <EXT12_IRQHandler+0x3f2>
	{
	  float32_t OffsetSum_6;
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80052d2:	2300      	movs	r3, #0
 80052d4:	70fb      	strb	r3, [r7, #3]
 80052d6:	e064      	b.n	80053a2 <EXT12_IRQHandler+0x3ba>
 80052d8:	2000bdd0 	.word	0x2000bdd0
 80052dc:	2000b97c 	.word	0x2000b97c
 80052e0:	20019b1c 	.word	0x20019b1c
 80052e4:	2000bdd4 	.word	0x2000bdd4
 80052e8:	2000b9e8 	.word	0x2000b9e8
 80052ec:	2000bdd8 	.word	0x2000bdd8
 80052f0:	2000ba54 	.word	0x2000ba54
 80052f4:	20019b38 	.word	0x20019b38
 80052f8:	2000bddc 	.word	0x2000bddc
 80052fc:	2000d6b4 	.word	0x2000d6b4
 8005300:	20019b20 	.word	0x20019b20
 8005304:	2000ef8c 	.word	0x2000ef8c
 8005308:	20019b40 	.word	0x20019b40
 800530c:	20019b39 	.word	0x20019b39
 8005310:	2000c200 	.word	0x2000c200
 8005314:	2000dad8 	.word	0x2000dad8
 8005318:	20019b24 	.word	0x20019b24
 800531c:	2000f3b0 	.word	0x2000f3b0
 8005320:	20019b44 	.word	0x20019b44
 8005324:	20019b3a 	.word	0x20019b3a
 8005328:	2000c624 	.word	0x2000c624
 800532c:	2000defc 	.word	0x2000defc
 8005330:	20019b28 	.word	0x20019b28
 8005334:	2000f7d4 	.word	0x2000f7d4
 8005338:	20019b48 	.word	0x20019b48
 800533c:	20019b3b 	.word	0x20019b3b
 8005340:	2000ca48 	.word	0x2000ca48
 8005344:	2000e320 	.word	0x2000e320
 8005348:	20019b2c 	.word	0x20019b2c
 800534c:	2000fbf8 	.word	0x2000fbf8
 8005350:	20019b4c 	.word	0x20019b4c
 8005354:	20019b3c 	.word	0x20019b3c
 8005358:	2000ce6c 	.word	0x2000ce6c
 800535c:	2000e744 	.word	0x2000e744
 8005360:	20019b30 	.word	0x20019b30
 8005364:	2001001c 	.word	0x2001001c
 8005368:	20019b50 	.word	0x20019b50
 800536c:	20019b3d 	.word	0x20019b3d
		{

			update_ADC3_IN2_FO_biquad_filter();
 8005370:	f7fc fe64 	bl	800203c <update_ADC3_IN2_FO_biquad_filter>
			MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 8005374:	481c      	ldr	r0, [pc, #112]	; (80053e8 <EXT12_IRQHandler+0x400>)
 8005376:	f7fc fc9f 	bl	8001cb8 <MA_ADC3_IN2_Update>


			Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 800537a:	481c      	ldr	r0, [pc, #112]	; (80053ec <EXT12_IRQHandler+0x404>)
 800537c:	f7fc ff66 	bl	800224c <ADC3_IN2_OffsetCalc>
 8005380:	eef0 7a40 	vmov.f32	s15, s0
 8005384:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <EXT12_IRQHandler+0x408>)
 8005386:	edc3 7a00 	vstr	s15, [r3]
			OffsetSum_6 += Offset_6;
 800538a:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <EXT12_IRQHandler+0x408>)
 800538c:	edd3 7a00 	vldr	s15, [r3]
 8005390:	ed97 7a01 	vldr	s14, [r7, #4]
 8005394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005398:	edc7 7a01 	vstr	s15, [r7, #4]
	  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	3301      	adds	r3, #1
 80053a0:	70fb      	strb	r3, [r7, #3]
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	2b13      	cmp	r3, #19
 80053a6:	d9e3      	bls.n	8005370 <EXT12_IRQHandler+0x388>
		}

	  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 80053a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80053ac:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80053b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <EXT12_IRQHandler+0x408>)
 80053b6:	edc3 7a00 	vstr	s15, [r3]
	  Offset_6_Calculated = 1;
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <EXT12_IRQHandler+0x40c>)
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]

	  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <EXT12_IRQHandler+0x408>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ca:	480b      	ldr	r0, [pc, #44]	; (80053f8 <EXT12_IRQHandler+0x410>)
 80053cc:	f7fd f8ea 	bl	80025a4 <ADC3_IN2_SD_BL>
 80053d0:	eef0 7a40 	vmov.f32	s15, s0
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <EXT12_IRQHandler+0x414>)
 80053d6:	edc3 7a00 	vstr	s15, [r3]
	}

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);  // Calls the HAL's callback function
 80053da:	2004      	movs	r0, #4
 80053dc:	f002 ffda 	bl	8008394 <HAL_GPIO_EXTI_IRQHandler>
}
 80053e0:	bf00      	nop
 80053e2:	3730      	adds	r7, #48	; 0x30
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	2000d290 	.word	0x2000d290
 80053ec:	2000eb68 	.word	0x2000eb68
 80053f0:	20019b34 	.word	0x20019b34
 80053f4:	20019b3d 	.word	0x20019b3d
 80053f8:	20010440 	.word	0x20010440
 80053fc:	20019b54 	.word	0x20019b54

08005400 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // Callback function (Called by HAL_GPIO_EXTI_IRQHandler (above))
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2)
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b04      	cmp	r3, #4
 800540e:	d10d      	bne.n	800542c <HAL_GPIO_EXTI_Callback+0x2c>
	{
		// Turn the LED connected to PE5 on
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8005410:	2201      	movs	r2, #1
 8005412:	2120      	movs	r1, #32
 8005414:	4807      	ldr	r0, [pc, #28]	; (8005434 <HAL_GPIO_EXTI_Callback+0x34>)
 8005416:	f002 ffa5 	bl	8008364 <HAL_GPIO_WritePin>

        // Delay for 2 seconds (2000 milliseconds)
        HAL_Delay(2000);
 800541a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800541e:	f000 fcf1 	bl	8005e04 <HAL_Delay>

        // Turn the LED off
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8005422:	2200      	movs	r2, #0
 8005424:	2120      	movs	r1, #32
 8005426:	4803      	ldr	r0, [pc, #12]	; (8005434 <HAL_GPIO_EXTI_Callback+0x34>)
 8005428:	f002 ff9c 	bl	8008364 <HAL_GPIO_WritePin>
	}
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	48001000 	.word	0x48001000

08005438 <HAL_ADC_ConvHalfCpltCallback>:

void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005448:	d123      	bne.n	8005492 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 800544a:	f7fe fd99 	bl	8003f80 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 800544e:	4b3c      	ldr	r3, [pc, #240]	; (8005540 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 800545a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800545e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 8005462:	4b37      	ldr	r3, [pc, #220]	; (8005540 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a36      	ldr	r2, [pc, #216]	; (8005540 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800546e:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8005472:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8005476:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a30      	ldr	r2, [pc, #192]	; (8005540 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005486:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 800548a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800548e:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2b      	ldr	r2, [pc, #172]	; (8005544 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d123      	bne.n	80054e4 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 800549c:	f7fe fe0c 	bl	80040b8 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 80054a0:	4b29      	ldr	r3, [pc, #164]	; (8005548 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a28      	ldr	r2, [pc, #160]	; (8005548 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 80054ac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80054b0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a23      	ldr	r2, [pc, #140]	; (8005548 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054c0:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 80054c4:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80054c8:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80054d8:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 80054dc:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80054e0:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a18      	ldr	r2, [pc, #96]	; (800554c <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d123      	bne.n	8005536 <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 80054ee:	f7fe fe7f 	bl	80041f0 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 80054f2:	4b17      	ldr	r3, [pc, #92]	; (8005550 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a16      	ldr	r2, [pc, #88]	; (8005550 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 80054fe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005502:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005512:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8005516:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800551a:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a0b      	ldr	r2, [pc, #44]	; (8005550 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800552a:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 800552e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005532:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	2000bdd0 	.word	0x2000bdd0
 8005544:	50000100 	.word	0x50000100
 8005548:	2000bdd4 	.word	0x2000bdd4
 800554c:	50000400 	.word	0x50000400
 8005550:	2000bdd8 	.word	0x2000bdd8

08005554 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005564:	d125      	bne.n	80055b2 <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 8005566:	f7fe fd57 	bl	8004018 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 800556a:	4b3f      	ldr	r3, [pc, #252]	; (8005668 <HAL_ADC_ConvCpltCallback+0x114>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a3e      	ldr	r2, [pc, #248]	; (8005668 <HAL_ADC_ConvCpltCallback+0x114>)
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005576:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800557a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800557e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8005582:	4b39      	ldr	r3, [pc, #228]	; (8005668 <HAL_ADC_ConvCpltCallback+0x114>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a38      	ldr	r2, [pc, #224]	; (8005668 <HAL_ADC_ConvCpltCallback+0x114>)
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800558e:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8005592:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8005596:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 800559a:	4b33      	ldr	r3, [pc, #204]	; (8005668 <HAL_ADC_ConvCpltCallback+0x114>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a32      	ldr	r2, [pc, #200]	; (8005668 <HAL_ADC_ConvCpltCallback+0x114>)
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80055a6:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 80055aa:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80055ae:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2d      	ldr	r2, [pc, #180]	; (800566c <HAL_ADC_ConvCpltCallback+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d125      	bne.n	8005608 <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb();
 80055bc:	f7fe fdc8 	bl	8004150 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 80055c0:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <HAL_ADC_ConvCpltCallback+0x11c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <HAL_ADC_ConvCpltCallback+0x11c>)
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055cc:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80055d0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80055d4:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80055d8:	4b25      	ldr	r3, [pc, #148]	; (8005670 <HAL_ADC_ConvCpltCallback+0x11c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a24      	ldr	r2, [pc, #144]	; (8005670 <HAL_ADC_ConvCpltCallback+0x11c>)
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80055e4:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80055e8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80055ec:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80055f0:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <HAL_ADC_ConvCpltCallback+0x11c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <HAL_ADC_ConvCpltCallback+0x11c>)
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80055fc:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8005600:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005604:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a19      	ldr	r2, [pc, #100]	; (8005674 <HAL_ADC_ConvCpltCallback+0x120>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d125      	bne.n	800565e <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb();
 8005612:	f7fe fe39 	bl	8004288 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <HAL_ADC_ConvCpltCallback+0x124>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a17      	ldr	r2, [pc, #92]	; (8005678 <HAL_ADC_ConvCpltCallback+0x124>)
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005622:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8005626:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800562a:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_ADC_ConvCpltCallback+0x124>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a11      	ldr	r2, [pc, #68]	; (8005678 <HAL_ADC_ConvCpltCallback+0x124>)
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800563a:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800563e:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8005642:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <HAL_ADC_ConvCpltCallback+0x124>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a0b      	ldr	r2, [pc, #44]	; (8005678 <HAL_ADC_ConvCpltCallback+0x124>)
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005652:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8005656:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800565a:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	2000bdd0 	.word	0x2000bdd0
 800566c:	50000100 	.word	0x50000100
 8005670:	2000bdd4 	.word	0x2000bdd4
 8005674:	50000400 	.word	0x50000400
 8005678:	2000bdd8 	.word	0x2000bdd8

0800567c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005680:	b672      	cpsid	i
}
 8005682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005684:	e7fe      	b.n	8005684 <Error_Handler+0x8>
	...

08005688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <HAL_MspInit+0x44>)
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <HAL_MspInit+0x44>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6613      	str	r3, [r2, #96]	; 0x60
 800569a:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <HAL_MspInit+0x44>)
 800569c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <HAL_MspInit+0x44>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	4a08      	ldr	r2, [pc, #32]	; (80056cc <HAL_MspInit+0x44>)
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b0:	6593      	str	r3, [r2, #88]	; 0x58
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_MspInit+0x44>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80056be:	f002 ff25 	bl	800850c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000

080056d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b0a2      	sub	sp, #136	; 0x88
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ec:	2250      	movs	r2, #80	; 0x50
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f005 fd89 	bl	800b208 <memset>
  if(hadc->Instance==ADC1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056fe:	d169      	bne.n	80057d4 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005706:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800570a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800570c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005710:	4618      	mov	r0, r3
 8005712:	f003 fc09 	bl	8008f28 <HAL_RCCEx_PeriphCLKConfig>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800571c:	f7ff ffae 	bl	800567c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005720:	4b64      	ldr	r3, [pc, #400]	; (80058b4 <HAL_ADC_MspInit+0x1e4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	4a63      	ldr	r2, [pc, #396]	; (80058b4 <HAL_ADC_MspInit+0x1e4>)
 8005728:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800572a:	4b62      	ldr	r3, [pc, #392]	; (80058b4 <HAL_ADC_MspInit+0x1e4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d10b      	bne.n	800574a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005732:	4b61      	ldr	r3, [pc, #388]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	4a60      	ldr	r2, [pc, #384]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005738:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800573c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800573e:	4b5e      	ldr	r3, [pc, #376]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574a:	4b5b      	ldr	r3, [pc, #364]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	4a5a      	ldr	r2, [pc, #360]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005756:	4b58      	ldr	r3, [pc, #352]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005762:	2303      	movs	r3, #3
 8005764:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005766:	2303      	movs	r3, #3
 8005768:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800576a:	2300      	movs	r3, #0
 800576c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800576e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005772:	4619      	mov	r1, r3
 8005774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005778:	f002 fc72 	bl	8008060 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800577c:	4b4f      	ldr	r3, [pc, #316]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 800577e:	4a50      	ldr	r2, [pc, #320]	; (80058c0 <HAL_ADC_MspInit+0x1f0>)
 8005780:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005782:	4b4e      	ldr	r3, [pc, #312]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 8005784:	2205      	movs	r2, #5
 8005786:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005788:	4b4c      	ldr	r3, [pc, #304]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 800578a:	2200      	movs	r2, #0
 800578c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800578e:	4b4b      	ldr	r3, [pc, #300]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 8005790:	2200      	movs	r2, #0
 8005792:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005794:	4b49      	ldr	r3, [pc, #292]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800579a:	4b48      	ldr	r3, [pc, #288]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 800579c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80057a2:	4b46      	ldr	r3, [pc, #280]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 80057a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80057aa:	4b44      	ldr	r3, [pc, #272]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 80057ac:	2220      	movs	r2, #32
 80057ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80057b0:	4b42      	ldr	r3, [pc, #264]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80057b6:	4841      	ldr	r0, [pc, #260]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 80057b8:	f002 f934 	bl	8007a24 <HAL_DMA_Init>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80057c2:	f7ff ff5b 	bl	800567c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a3c      	ldr	r2, [pc, #240]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54
 80057cc:	4a3b      	ldr	r2, [pc, #236]	; (80058bc <HAL_ADC_MspInit+0x1ec>)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80057d2:	e0fa      	b.n	80059ca <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3a      	ldr	r2, [pc, #232]	; (80058c4 <HAL_ADC_MspInit+0x1f4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d178      	bne.n	80058d0 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80057de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80057e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80057e8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f003 fb9a 	bl	8008f28 <HAL_RCCEx_PeriphCLKConfig>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80057fa:	f7ff ff3f 	bl	800567c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80057fe:	4b2d      	ldr	r3, [pc, #180]	; (80058b4 <HAL_ADC_MspInit+0x1e4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3301      	adds	r3, #1
 8005804:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <HAL_ADC_MspInit+0x1e4>)
 8005806:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005808:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <HAL_ADC_MspInit+0x1e4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d10b      	bne.n	8005828 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005810:	4b29      	ldr	r3, [pc, #164]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005814:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800581a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800581c:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 800581e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005828:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 800582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582c:	4a22      	ldr	r2, [pc, #136]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005834:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <HAL_ADC_MspInit+0x1e8>)
 8005836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005840:	23c0      	movs	r3, #192	; 0xc0
 8005842:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005844:	2303      	movs	r3, #3
 8005846:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005848:	2300      	movs	r3, #0
 800584a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005850:	4619      	mov	r1, r3
 8005852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005856:	f002 fc03 	bl	8008060 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_ADC_MspInit+0x1fc>)
 800585e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 8005862:	2224      	movs	r2, #36	; 0x24
 8005864:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005866:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800586c:	4b16      	ldr	r3, [pc, #88]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 800586e:	2200      	movs	r2, #0
 8005870:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005878:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 800587a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800587e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 8005882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005886:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 800588a:	2220      	movs	r2, #32
 800588c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800588e:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 8005890:	2200      	movs	r2, #0
 8005892:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005894:	480c      	ldr	r0, [pc, #48]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 8005896:	f002 f8c5 	bl	8007a24 <HAL_DMA_Init>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80058a0:	f7ff feec 	bl	800567c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a08      	ldr	r2, [pc, #32]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
 80058aa:	4a07      	ldr	r2, [pc, #28]	; (80058c8 <HAL_ADC_MspInit+0x1f8>)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6293      	str	r3, [r2, #40]	; 0x28
}
 80058b0:	e08b      	b.n	80059ca <HAL_ADC_MspInit+0x2fa>
 80058b2:	bf00      	nop
 80058b4:	20019ba8 	.word	0x20019ba8
 80058b8:	40021000 	.word	0x40021000
 80058bc:	2000bac0 	.word	0x2000bac0
 80058c0:	40020008 	.word	0x40020008
 80058c4:	50000100 	.word	0x50000100
 80058c8:	2000bb20 	.word	0x2000bb20
 80058cc:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a3f      	ldr	r2, [pc, #252]	; (80059d4 <HAL_ADC_MspInit+0x304>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d177      	bne.n	80059ca <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80058da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80058e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058e4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80058e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f003 fb1c 	bl	8008f28 <HAL_RCCEx_PeriphCLKConfig>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 80058f6:	f7ff fec1 	bl	800567c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80058fa:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	4a36      	ldr	r2, [pc, #216]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 8005900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005906:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005912:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 8005914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005916:	4a30      	ldr	r2, [pc, #192]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 8005918:	f043 0302 	orr.w	r3, r3, #2
 800591c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 8005920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800592a:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 800592c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592e:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 8005930:	f043 0310 	orr.w	r3, r3, #16
 8005934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005936:	4b28      	ldr	r3, [pc, #160]	; (80059d8 <HAL_ADC_MspInit+0x308>)
 8005938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005942:	2302      	movs	r3, #2
 8005944:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005946:	2303      	movs	r3, #3
 8005948:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594a:	2300      	movs	r3, #0
 800594c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800594e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005952:	4619      	mov	r1, r3
 8005954:	4821      	ldr	r0, [pc, #132]	; (80059dc <HAL_ADC_MspInit+0x30c>)
 8005956:	f002 fb83 	bl	8008060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800595a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800595e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005960:	2303      	movs	r3, #3
 8005962:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005964:	2300      	movs	r3, #0
 8005966:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005968:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800596c:	4619      	mov	r1, r3
 800596e:	481c      	ldr	r0, [pc, #112]	; (80059e0 <HAL_ADC_MspInit+0x310>)
 8005970:	f002 fb76 	bl	8008060 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8005974:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 8005976:	4a1c      	ldr	r2, [pc, #112]	; (80059e8 <HAL_ADC_MspInit+0x318>)
 8005978:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800597a:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 800597c:	2225      	movs	r2, #37	; 0x25
 800597e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005980:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 8005982:	2200      	movs	r2, #0
 8005984:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005986:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 8005988:	2200      	movs	r2, #0
 800598a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800598c:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005992:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 8005994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005998:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 800599c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059a0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80059a2:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 80059a4:	2220      	movs	r2, #32
 80059a6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80059ae:	480d      	ldr	r0, [pc, #52]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 80059b0:	f002 f838 	bl	8007a24 <HAL_DMA_Init>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 80059ba:	f7ff fe5f 	bl	800567c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54
 80059c4:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <HAL_ADC_MspInit+0x314>)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80059ca:	bf00      	nop
 80059cc:	3788      	adds	r7, #136	; 0x88
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	50000400 	.word	0x50000400
 80059d8:	40021000 	.word	0x40021000
 80059dc:	48000400 	.word	0x48000400
 80059e0:	48001000 	.word	0x48001000
 80059e4:	2000bb80 	.word	0x2000bb80
 80059e8:	40020408 	.word	0x40020408

080059ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f4:	f107 0314 	add.w	r3, r7, #20
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a40      	ldr	r2, [pc, #256]	; (8005b0c <HAL_DAC_MspInit+0x120>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d17a      	bne.n	8005b04 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005a0e:	4b40      	ldr	r3, [pc, #256]	; (8005b10 <HAL_DAC_MspInit+0x124>)
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	4a3f      	ldr	r2, [pc, #252]	; (8005b10 <HAL_DAC_MspInit+0x124>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <HAL_DAC_MspInit+0x124>)
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a26:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <HAL_DAC_MspInit+0x124>)
 8005a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2a:	4a39      	ldr	r2, [pc, #228]	; (8005b10 <HAL_DAC_MspInit+0x124>)
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a32:	4b37      	ldr	r3, [pc, #220]	; (8005b10 <HAL_DAC_MspInit+0x124>)
 8005a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005a3e:	2330      	movs	r3, #48	; 0x30
 8005a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a42:	2303      	movs	r3, #3
 8005a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a4a:	f107 0314 	add.w	r3, r7, #20
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a54:	f002 fb04 	bl	8008060 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8005a58:	4b2e      	ldr	r3, [pc, #184]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a5a:	4a2f      	ldr	r2, [pc, #188]	; (8005b18 <HAL_DAC_MspInit+0x12c>)
 8005a5c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8005a5e:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a60:	2206      	movs	r2, #6
 8005a62:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a64:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a66:	2210      	movs	r2, #16
 8005a68:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6a:	4b2a      	ldr	r3, [pc, #168]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005a70:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a76:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a7e:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a84:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005a86:	4b23      	ldr	r3, [pc, #140]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a88:	2220      	movs	r2, #32
 8005a8a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005a8c:	4b21      	ldr	r3, [pc, #132]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005a92:	4820      	ldr	r0, [pc, #128]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005a94:	f001 ffc6 	bl	8007a24 <HAL_DMA_Init>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8005a9e:	f7ff fded 	bl	800567c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <HAL_DAC_MspInit+0x128>)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA2_Channel6;
 8005aae:	4b1b      	ldr	r3, [pc, #108]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ab0:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <HAL_DAC_MspInit+0x134>)
 8005ab2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8005ab4:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ab6:	2207      	movs	r2, #7
 8005ab8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005aba:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005abc:	2210      	movs	r2, #16
 8005abe:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ac0:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ada:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ade:	2220      	movs	r2, #32
 8005ae0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005ae2:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8005ae8:	480c      	ldr	r0, [pc, #48]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005aea:	f001 ff9b 	bl	8007a24 <HAL_DMA_Init>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8005af4:	f7ff fdc2 	bl	800567c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	4a07      	ldr	r2, [pc, #28]	; (8005b1c <HAL_DAC_MspInit+0x130>)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005b04:	bf00      	nop
 8005b06:	3728      	adds	r7, #40	; 0x28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	50000800 	.word	0x50000800
 8005b10:	40021000 	.word	0x40021000
 8005b14:	2000bbf4 	.word	0x2000bbf4
 8005b18:	40020030 	.word	0x40020030
 8005b1c:	2000bc54 	.word	0x2000bc54
 8005b20:	4002046c 	.word	0x4002046c

08005b24 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <HAL_FMAC_MspInit+0x38>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10b      	bne.n	8005b4e <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8005b36:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <HAL_FMAC_MspInit+0x3c>)
 8005b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <HAL_FMAC_MspInit+0x3c>)
 8005b3c:	f043 0310 	orr.w	r3, r3, #16
 8005b40:	6493      	str	r3, [r2, #72]	; 0x48
 8005b42:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <HAL_FMAC_MspInit+0x3c>)
 8005b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40021400 	.word	0x40021400
 8005b60:	40021000 	.word	0x40021000

08005b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_TIM_Base_MspInit+0x80>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10c      	bne.n	8005b90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b76:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005b7c:	f043 0310 	orr.w	r3, r3, #16
 8005b80:	6593      	str	r3, [r2, #88]	; 0x58
 8005b82:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8005b8e:	e022      	b.n	8005bd6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a15      	ldr	r2, [pc, #84]	; (8005bec <HAL_TIM_Base_MspInit+0x88>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10c      	bne.n	8005bb4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b9a:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005ba0:	f043 0320 	orr.w	r3, r3, #32
 8005ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ba6:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	693b      	ldr	r3, [r7, #16]
}
 8005bb2:	e010      	b.n	8005bd6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <HAL_TIM_Base_MspInit+0x8c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10b      	bne.n	8005bd6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc2:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8005bca:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <HAL_TIM_Base_MspInit+0x84>)
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40001000 	.word	0x40001000
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40001400 	.word	0x40001400
 8005bf0:	40015000 	.word	0x40015000

08005bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005bf8:	e7fe      	b.n	8005bf8 <NMI_Handler+0x4>

08005bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bfe:	e7fe      	b.n	8005bfe <HardFault_Handler+0x4>

08005c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c04:	e7fe      	b.n	8005c04 <MemManage_Handler+0x4>

08005c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c0a:	e7fe      	b.n	8005c0a <BusFault_Handler+0x4>

08005c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c10:	e7fe      	b.n	8005c10 <UsageFault_Handler+0x4>

08005c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c24:	bf00      	nop
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c32:	bf00      	nop
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c40:	f000 f8c2 	bl	8005dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005c4c:	4802      	ldr	r0, [pc, #8]	; (8005c58 <DMA1_Channel1_IRQHandler+0x10>)
 8005c4e:	f002 f80c 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	2000bac0 	.word	0x2000bac0

08005c5c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005c60:	4802      	ldr	r0, [pc, #8]	; (8005c6c <DMA1_Channel3_IRQHandler+0x10>)
 8005c62:	f002 f802 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000bbf4 	.word	0x2000bbf4

08005c70 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005c74:	4802      	ldr	r0, [pc, #8]	; (8005c80 <DMA1_Channel6_IRQHandler+0x10>)
 8005c76:	f001 fff8 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	2000bb20 	.word	0x2000bb20

08005c84 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005c88:	4802      	ldr	r0, [pc, #8]	; (8005c94 <DMA2_Channel1_IRQHandler+0x10>)
 8005c8a:	f001 ffee 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	2000bb80 	.word	0x2000bb80

08005c98 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8005c9c:	4802      	ldr	r0, [pc, #8]	; (8005ca8 <DMA2_Channel6_IRQHandler+0x10>)
 8005c9e:	f001 ffe4 	bl	8007c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2000bc54 	.word	0x2000bc54

08005cac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <SystemInit+0x20>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <SystemInit+0x20>)
 8005cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	e000ed00 	.word	0xe000ed00

08005cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005cd0:	480d      	ldr	r0, [pc, #52]	; (8005d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005cd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005cd4:	f7ff ffea 	bl	8005cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005cd8:	480c      	ldr	r0, [pc, #48]	; (8005d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8005cda:	490d      	ldr	r1, [pc, #52]	; (8005d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005cdc:	4a0d      	ldr	r2, [pc, #52]	; (8005d14 <LoopForever+0xe>)
  movs r3, #0
 8005cde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005ce0:	e002      	b.n	8005ce8 <LoopCopyDataInit>

08005ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ce6:	3304      	adds	r3, #4

08005ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cec:	d3f9      	bcc.n	8005ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005cf0:	4c0a      	ldr	r4, [pc, #40]	; (8005d1c <LoopForever+0x16>)
  movs r3, #0
 8005cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005cf4:	e001      	b.n	8005cfa <LoopFillZerobss>

08005cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cf8:	3204      	adds	r2, #4

08005cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cfc:	d3fb      	bcc.n	8005cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005cfe:	f005 fa91 	bl	800b224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005d02:	f7fe fb11 	bl	8004328 <main>

08005d06 <LoopForever>:

LoopForever:
    b LoopForever
 8005d06:	e7fe      	b.n	8005d06 <LoopForever>
  ldr   r0, =_estack
 8005d08:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d10:	200078d8 	.word	0x200078d8
  ldr r2, =_sidata
 8005d14:	0801f590 	.word	0x0801f590
  ldr r2, =_sbss
 8005d18:	200078d8 	.word	0x200078d8
  ldr r4, =_ebss
 8005d1c:	20019ce8 	.word	0x20019ce8

08005d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005d20:	e7fe      	b.n	8005d20 <ADC1_2_IRQHandler>

08005d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d2c:	2003      	movs	r0, #3
 8005d2e:	f001 fc5f 	bl	80075f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d32:	200f      	movs	r0, #15
 8005d34:	f000 f80e 	bl	8005d54 <HAL_InitTick>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	71fb      	strb	r3, [r7, #7]
 8005d42:	e001      	b.n	8005d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005d44:	f7ff fca0 	bl	8005688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005d48:	79fb      	ldrb	r3, [r7, #7]

}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005d60:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <HAL_InitTick+0x68>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d022      	beq.n	8005dae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_InitTick+0x6c>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <HAL_InitTick+0x68>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fc6a 	bl	8007656 <HAL_SYSTICK_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10f      	bne.n	8005da8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	d809      	bhi.n	8005da2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d8e:	2200      	movs	r2, #0
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	f04f 30ff 	mov.w	r0, #4294967295
 8005d96:	f001 fc36 	bl	8007606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <HAL_InitTick+0x70>)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e007      	b.n	8005db2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	e004      	b.n	8005db2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
 8005dac:	e001      	b.n	8005db2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20007870 	.word	0x20007870
 8005dc0:	20007868 	.word	0x20007868
 8005dc4:	2000786c 	.word	0x2000786c

08005dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_IncTick+0x1c>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_IncTick+0x20>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	4a03      	ldr	r2, [pc, #12]	; (8005de4 <HAL_IncTick+0x1c>)
 8005dd8:	6013      	str	r3, [r2, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	20019bac 	.word	0x20019bac
 8005de8:	20007870 	.word	0x20007870

08005dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  return uwTick;
 8005df0:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <HAL_GetTick+0x14>)
 8005df2:	681b      	ldr	r3, [r3, #0]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20019bac 	.word	0x20019bac

08005e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e0c:	f7ff ffee 	bl	8005dec <HAL_GetTick>
 8005e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d004      	beq.n	8005e28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <HAL_Delay+0x40>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e28:	bf00      	nop
 8005e2a:	f7ff ffdf 	bl	8005dec <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d8f7      	bhi.n	8005e2a <HAL_Delay+0x26>
  {
  }
}
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20007870 	.word	0x20007870

08005e48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	609a      	str	r2, [r3, #8]
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3360      	adds	r3, #96	; 0x60
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <LL_ADC_SetOffset+0x44>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	03fff000 	.word	0x03fff000

08005ef8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3360      	adds	r3, #96	; 0x60
 8005f06:	461a      	mov	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3360      	adds	r3, #96	; 0x60
 8005f34:	461a      	mov	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3360      	adds	r3, #96	; 0x60
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3360      	adds	r3, #96	; 0x60
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	615a      	str	r2, [r3, #20]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3330      	adds	r3, #48	; 0x30
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	4413      	add	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	211f      	movs	r1, #31
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	401a      	ands	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0e9b      	lsrs	r3, r3, #26
 800604a:	f003 011f 	and.w	r1, r3, #31
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	431a      	orrs	r2, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800606a:	b480      	push	{r7}
 800606c:	b087      	sub	sp, #28
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3314      	adds	r3, #20
 800607a:	461a      	mov	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	0e5b      	lsrs	r3, r3, #25
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	4413      	add	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	0d1b      	lsrs	r3, r3, #20
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	2107      	movs	r1, #7
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	401a      	ands	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	0d1b      	lsrs	r3, r3, #20
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	431a      	orrs	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d8:	43db      	mvns	r3, r3
 80060da:	401a      	ands	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f003 0318 	and.w	r3, r3, #24
 80060e2:	4908      	ldr	r1, [pc, #32]	; (8006104 <LL_ADC_SetChannelSingleDiff+0x44>)
 80060e4:	40d9      	lsrs	r1, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	400b      	ands	r3, r1
 80060ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	0007ffff 	.word	0x0007ffff

08006108 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 031f 	and.w	r3, r3, #31
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6093      	str	r3, [r2, #8]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615c:	d101      	bne.n	8006162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006184:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ac:	d101      	bne.n	80061b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061d4:	f043 0201 	orr.w	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <LL_ADC_IsEnabled+0x18>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <LL_ADC_IsEnabled+0x1a>
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800621e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d101      	bne.n	800624e <LL_ADC_REG_IsConversionOngoing+0x18>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b08      	cmp	r3, #8
 800626e:	d101      	bne.n	8006274 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b089      	sub	sp, #36	; 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e19b      	b.n	80065d6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fa0f 	bl	80056d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff ff3f 	bl	8006148 <LL_ADC_IsDeepPowerDownEnabled>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff ff25 	bl	8006124 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff ff5a 	bl	8006198 <LL_ADC_IsInternalRegulatorEnabled>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d115      	bne.n	8006316 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff ff3e 	bl	8006170 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062f4:	4b97      	ldr	r3, [pc, #604]	; (8006554 <HAL_ADC_Init+0x2d0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	099b      	lsrs	r3, r3, #6
 80062fa:	4a97      	ldr	r2, [pc, #604]	; (8006558 <HAL_ADC_Init+0x2d4>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	099b      	lsrs	r3, r3, #6
 8006302:	3301      	adds	r3, #1
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006308:	e002      	b.n	8006310 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3b01      	subs	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f9      	bne.n	800630a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ff3c 	bl	8006198 <LL_ADC_IsInternalRegulatorEnabled>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10d      	bne.n	8006342 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632a:	f043 0210 	orr.w	r2, r3, #16
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006336:	f043 0201 	orr.w	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff ff75 	bl	8006236 <LL_ADC_REG_IsConversionOngoing>
 800634c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 8134 	bne.w	80065c4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f040 8130 	bne.w	80065c4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800636c:	f043 0202 	orr.w	r2, r3, #2
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff ff35 	bl	80061e8 <LL_ADC_IsEnabled>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d137      	bne.n	80063f4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800638c:	d004      	beq.n	8006398 <HAL_ADC_Init+0x114>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a72      	ldr	r2, [pc, #456]	; (800655c <HAL_ADC_Init+0x2d8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d10f      	bne.n	80063b8 <HAL_ADC_Init+0x134>
 8006398:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800639c:	f7ff ff24 	bl	80061e8 <LL_ADC_IsEnabled>
 80063a0:	4604      	mov	r4, r0
 80063a2:	486e      	ldr	r0, [pc, #440]	; (800655c <HAL_ADC_Init+0x2d8>)
 80063a4:	f7ff ff20 	bl	80061e8 <LL_ADC_IsEnabled>
 80063a8:	4603      	mov	r3, r0
 80063aa:	4323      	orrs	r3, r4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e008      	b.n	80063ca <HAL_ADC_Init+0x146>
 80063b8:	4869      	ldr	r0, [pc, #420]	; (8006560 <HAL_ADC_Init+0x2dc>)
 80063ba:	f7ff ff15 	bl	80061e8 <LL_ADC_IsEnabled>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d012      	beq.n	80063f4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d6:	d004      	beq.n	80063e2 <HAL_ADC_Init+0x15e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5f      	ldr	r2, [pc, #380]	; (800655c <HAL_ADC_Init+0x2d8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d101      	bne.n	80063e6 <HAL_ADC_Init+0x162>
 80063e2:	4a60      	ldr	r2, [pc, #384]	; (8006564 <HAL_ADC_Init+0x2e0>)
 80063e4:	e000      	b.n	80063e8 <HAL_ADC_Init+0x164>
 80063e6:	4a60      	ldr	r2, [pc, #384]	; (8006568 <HAL_ADC_Init+0x2e4>)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f7ff fd2a 	bl	8005e48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	7f5b      	ldrb	r3, [r3, #29]
 80063f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80063fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006404:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800640a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006412:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006414:	4313      	orrs	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800641e:	2b01      	cmp	r3, #1
 8006420:	d106      	bne.n	8006430 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	045b      	lsls	r3, r3, #17
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4313      	orrs	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4313      	orrs	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	4b46      	ldr	r3, [pc, #280]	; (800656c <HAL_ADC_Init+0x2e8>)
 8006454:	4013      	ands	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	430b      	orrs	r3, r1
 800645e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff feee 	bl	800625c <LL_ADC_INJ_IsConversionOngoing>
 8006480:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d17b      	bne.n	8006580 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d178      	bne.n	8006580 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006492:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800649a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800649c:	4313      	orrs	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064aa:	f023 0302 	bic.w	r3, r3, #2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	69b9      	ldr	r1, [r7, #24]
 80064b4:	430b      	orrs	r3, r1
 80064b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d017      	beq.n	80064f0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80064ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80064dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6911      	ldr	r1, [r2, #16]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80064ee:	e013      	b.n	8006518 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80064fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006514:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651e:	2b01      	cmp	r3, #1
 8006520:	d126      	bne.n	8006570 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800652c:	f023 0304 	bic.w	r3, r3, #4
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006538:	4311      	orrs	r1, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800653e:	4311      	orrs	r1, r2
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006544:	430a      	orrs	r2, r1
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	611a      	str	r2, [r3, #16]
 8006552:	e015      	b.n	8006580 <HAL_ADC_Init+0x2fc>
 8006554:	20007868 	.word	0x20007868
 8006558:	053e2d63 	.word	0x053e2d63
 800655c:	50000100 	.word	0x50000100
 8006560:	50000400 	.word	0x50000400
 8006564:	50000300 	.word	0x50000300
 8006568:	50000700 	.word	0x50000700
 800656c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691a      	ldr	r2, [r3, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10c      	bne.n	80065a2 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f023 010f 	bic.w	r1, r3, #15
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	1e5a      	subs	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
 80065a0:	e007      	b.n	80065b2 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 020f 	bic.w	r2, r2, #15
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80065c2:	e007      	b.n	80065d4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c8:	f043 0210 	orr.w	r2, r3, #16
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80065d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3724      	adds	r7, #36	; 0x24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop

080065e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065f4:	d004      	beq.n	8006600 <HAL_ADC_Start_DMA+0x20>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a57      	ldr	r2, [pc, #348]	; (8006758 <HAL_ADC_Start_DMA+0x178>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d101      	bne.n	8006604 <HAL_ADC_Start_DMA+0x24>
 8006600:	4b56      	ldr	r3, [pc, #344]	; (800675c <HAL_ADC_Start_DMA+0x17c>)
 8006602:	e000      	b.n	8006606 <HAL_ADC_Start_DMA+0x26>
 8006604:	4b56      	ldr	r3, [pc, #344]	; (8006760 <HAL_ADC_Start_DMA+0x180>)
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fd7e 	bl	8006108 <LL_ADC_GetMultimode>
 800660c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fe0f 	bl	8006236 <LL_ADC_REG_IsConversionOngoing>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 8094 	bne.w	8006748 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_ADC_Start_DMA+0x4e>
 800662a:	2302      	movs	r3, #2
 800662c:	e08f      	b.n	800674e <HAL_ADC_Start_DMA+0x16e>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a4a      	ldr	r2, [pc, #296]	; (8006764 <HAL_ADC_Start_DMA+0x184>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d008      	beq.n	8006652 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b05      	cmp	r3, #5
 800664a:	d002      	beq.n	8006652 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b09      	cmp	r3, #9
 8006650:	d173      	bne.n	800673a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fcc4 	bl	8006fe0 <ADC_Enable>
 8006658:	4603      	mov	r3, r0
 800665a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d166      	bne.n	8006730 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006666:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a37      	ldr	r2, [pc, #220]	; (8006758 <HAL_ADC_Start_DMA+0x178>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d002      	beq.n	8006686 <HAL_ADC_Start_DMA+0xa6>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	e001      	b.n	800668a <HAL_ADC_Start_DMA+0xaa>
 8006686:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	4293      	cmp	r3, r2
 8006690:	d002      	beq.n	8006698 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d006      	beq.n	80066be <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b4:	f023 0206 	bic.w	r2, r3, #6
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	661a      	str	r2, [r3, #96]	; 0x60
 80066bc:	e002      	b.n	80066c4 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	4a27      	ldr	r2, [pc, #156]	; (8006768 <HAL_ADC_Start_DMA+0x188>)
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d0:	4a26      	ldr	r2, [pc, #152]	; (800676c <HAL_ADC_Start_DMA+0x18c>)
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d8:	4a25      	ldr	r2, [pc, #148]	; (8006770 <HAL_ADC_Start_DMA+0x190>)
 80066da:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	221c      	movs	r2, #28
 80066e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0210 	orr.w	r2, r2, #16
 80066fa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3340      	adds	r3, #64	; 0x40
 8006716:	4619      	mov	r1, r3
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f001 fa2a 	bl	8007b74 <HAL_DMA_Start_IT>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fd70 	bl	800620e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800672e:	e00d      	b.n	800674c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006738:	e008      	b.n	800674c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006746:	e001      	b.n	800674c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006748:	2302      	movs	r3, #2
 800674a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	50000100 	.word	0x50000100
 800675c:	50000300 	.word	0x50000300
 8006760:	50000700 	.word	0x50000700
 8006764:	50000400 	.word	0x50000400
 8006768:	0800710d 	.word	0x0800710d
 800676c:	080071e5 	.word	0x080071e5
 8006770:	08007201 	.word	0x08007201

08006774 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b0b6      	sub	sp, #216	; 0xd8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d102      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x24>
 80067a6:	2302      	movs	r3, #2
 80067a8:	f000 bc04 	b.w	8006fb4 <HAL_ADC_ConfigChannel+0x82c>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fd3c 	bl	8006236 <LL_ADC_REG_IsConversionOngoing>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 83e8 	bne.w	8006f96 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7ff fc1d 	bl	8006012 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fd2a 	bl	8006236 <LL_ADC_REG_IsConversionOngoing>
 80067e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fd36 	bl	800625c <LL_ADC_INJ_IsConversionOngoing>
 80067f0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80067f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f040 81d9 	bne.w	8006bb0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80067fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 81d4 	bne.w	8006bb0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006810:	d10f      	bne.n	8006832 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	4619      	mov	r1, r3
 800681e:	f7ff fc24 	bl	800606a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fbcb 	bl	8005fc6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006830:	e00e      	b.n	8006850 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6819      	ldr	r1, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	461a      	mov	r2, r3
 8006840:	f7ff fc13 	bl	800606a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fbbb 	bl	8005fc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	08db      	lsrs	r3, r3, #3
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	fa02 f303 	lsl.w	r3, r2, r3
 8006866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b04      	cmp	r3, #4
 8006870:	d022      	beq.n	80068b8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6919      	ldr	r1, [r3, #16]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006882:	f7ff fb15 	bl	8005eb0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6919      	ldr	r1, [r3, #16]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	461a      	mov	r2, r3
 8006894:	f7ff fb61 	bl	8005f5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d102      	bne.n	80068ae <HAL_ADC_ConfigChannel+0x126>
 80068a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ac:	e000      	b.n	80068b0 <HAL_ADC_ConfigChannel+0x128>
 80068ae:	2300      	movs	r3, #0
 80068b0:	461a      	mov	r2, r3
 80068b2:	f7ff fb6d 	bl	8005f90 <LL_ADC_SetOffsetSaturation>
 80068b6:	e17b      	b.n	8006bb0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff fb1a 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x15c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff fb0f 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 80068da:	4603      	mov	r3, r0
 80068dc:	0e9b      	lsrs	r3, r3, #26
 80068de:	f003 021f 	and.w	r2, r3, #31
 80068e2:	e01e      	b.n	8006922 <HAL_ADC_ConfigChannel+0x19a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fb04 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068fa:	fa93 f3a3 	rbit	r3, r3
 80068fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800690a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006912:	2320      	movs	r3, #32
 8006914:	e004      	b.n	8006920 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800691a:	fab3 f383 	clz	r3, r3
 800691e:	b2db      	uxtb	r3, r3
 8006920:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <HAL_ADC_ConfigChannel+0x1b2>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	0e9b      	lsrs	r3, r3, #26
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	e018      	b.n	800696c <HAL_ADC_ConfigChannel+0x1e4>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006946:	fa93 f3a3 	rbit	r3, r3
 800694a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800694e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800695e:	2320      	movs	r3, #32
 8006960:	e004      	b.n	800696c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006966:	fab3 f383 	clz	r3, r3
 800696a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800696c:	429a      	cmp	r2, r3
 800696e:	d106      	bne.n	800697e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2200      	movs	r2, #0
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fad3 	bl	8005f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2101      	movs	r1, #1
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fab7 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 800698a:	4603      	mov	r3, r0
 800698c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <HAL_ADC_ConfigChannel+0x222>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2101      	movs	r1, #1
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff faac 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 80069a0:	4603      	mov	r3, r0
 80069a2:	0e9b      	lsrs	r3, r3, #26
 80069a4:	f003 021f 	and.w	r2, r3, #31
 80069a8:	e01e      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x260>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff faa1 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069c0:	fa93 f3a3 	rbit	r3, r3
 80069c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80069c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80069d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80069d8:	2320      	movs	r3, #32
 80069da:	e004      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80069dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069e0:	fab3 f383 	clz	r3, r3
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_ADC_ConfigChannel+0x278>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	0e9b      	lsrs	r3, r3, #26
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	e018      	b.n	8006a32 <HAL_ADC_ConfigChannel+0x2aa>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0c:	fa93 f3a3 	rbit	r3, r3
 8006a10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006a24:	2320      	movs	r3, #32
 8006a26:	e004      	b.n	8006a32 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a2c:	fab3 f383 	clz	r3, r3
 8006a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d106      	bne.n	8006a44 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fa70 	bl	8005f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2102      	movs	r1, #2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff fa54 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <HAL_ADC_ConfigChannel+0x2e8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2102      	movs	r1, #2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fa49 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 8006a66:	4603      	mov	r3, r0
 8006a68:	0e9b      	lsrs	r3, r3, #26
 8006a6a:	f003 021f 	and.w	r2, r3, #31
 8006a6e:	e01e      	b.n	8006aae <HAL_ADC_ConfigChannel+0x326>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2102      	movs	r1, #2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fa3e 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a86:	fa93 f3a3 	rbit	r3, r3
 8006a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006a9e:	2320      	movs	r3, #32
 8006aa0:	e004      	b.n	8006aac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006aa6:	fab3 f383 	clz	r3, r3
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <HAL_ADC_ConfigChannel+0x33e>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	0e9b      	lsrs	r3, r3, #26
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	e016      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x36c>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ad2:	fa93 f3a3 	rbit	r3, r3
 8006ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006ae6:	2320      	movs	r3, #32
 8006ae8:	e004      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aee:	fab3 f383 	clz	r3, r3
 8006af2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d106      	bne.n	8006b06 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2200      	movs	r2, #0
 8006afe:	2102      	movs	r1, #2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fa0f 	bl	8005f24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2103      	movs	r1, #3
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff f9f3 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <HAL_ADC_ConfigChannel+0x3aa>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2103      	movs	r1, #3
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff f9e8 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	0e9b      	lsrs	r3, r3, #26
 8006b2c:	f003 021f 	and.w	r2, r3, #31
 8006b30:	e017      	b.n	8006b62 <HAL_ADC_ConfigChannel+0x3da>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2103      	movs	r1, #3
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff f9dd 	bl	8005ef8 <LL_ADC_GetOffsetChannel>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	fa93 f3a3 	rbit	r3, r3
 8006b48:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006b54:	2320      	movs	r3, #32
 8006b56:	e003      	b.n	8006b60 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5a:	fab3 f383 	clz	r3, r3
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d105      	bne.n	8006b7a <HAL_ADC_ConfigChannel+0x3f2>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	0e9b      	lsrs	r3, r3, #26
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	e011      	b.n	8006b9e <HAL_ADC_ConfigChannel+0x416>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b82:	fa93 f3a3 	rbit	r3, r3
 8006b86:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006b92:	2320      	movs	r3, #32
 8006b94:	e003      	b.n	8006b9e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b98:	fab3 f383 	clz	r3, r3
 8006b9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d106      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2103      	movs	r1, #3
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff f9ba 	bl	8005f24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fb17 	bl	80061e8 <LL_ADC_IsEnabled>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 813d 	bne.w	8006e3c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f7ff fa76 	bl	80060c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	4aa2      	ldr	r2, [pc, #648]	; (8006e64 <HAL_ADC_ConfigChannel+0x6dc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	f040 812e 	bne.w	8006e3c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <HAL_ADC_ConfigChannel+0x480>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	0e9b      	lsrs	r3, r3, #26
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	bf94      	ite	ls
 8006c00:	2301      	movls	r3, #1
 8006c02:	2300      	movhi	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	e019      	b.n	8006c3c <HAL_ADC_ConfigChannel+0x4b4>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c10:	fa93 f3a3 	rbit	r3, r3
 8006c14:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c18:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006c20:	2320      	movs	r3, #32
 8006c22:	e003      	b.n	8006c2c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c26:	fab3 f383 	clz	r3, r3
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	2b09      	cmp	r3, #9
 8006c34:	bf94      	ite	ls
 8006c36:	2301      	movls	r3, #1
 8006c38:	2300      	movhi	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d079      	beq.n	8006d34 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d107      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x4d4>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	0e9b      	lsrs	r3, r3, #26
 8006c52:	3301      	adds	r3, #1
 8006c54:	069b      	lsls	r3, r3, #26
 8006c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c5a:	e015      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x500>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c64:	fa93 f3a3 	rbit	r3, r3
 8006c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006c74:	2320      	movs	r3, #32
 8006c76:	e003      	b.n	8006c80 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7a:	fab3 f383 	clz	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	3301      	adds	r3, #1
 8006c82:	069b      	lsls	r3, r3, #26
 8006c84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x520>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	0e9b      	lsrs	r3, r3, #26
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca6:	e017      	b.n	8006cd8 <HAL_ADC_ConfigChannel+0x550>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb0:	fa93 f3a3 	rbit	r3, r3
 8006cb4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006cc0:	2320      	movs	r3, #32
 8006cc2:	e003      	b.n	8006ccc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc6:	fab3 f383 	clz	r3, r3
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	3301      	adds	r3, #1
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd8:	ea42 0103 	orr.w	r1, r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <HAL_ADC_ConfigChannel+0x576>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	0e9b      	lsrs	r3, r3, #26
 8006cee:	3301      	adds	r3, #1
 8006cf0:	f003 021f 	and.w	r2, r3, #31
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	4413      	add	r3, r2
 8006cfa:	051b      	lsls	r3, r3, #20
 8006cfc:	e018      	b.n	8006d30 <HAL_ADC_ConfigChannel+0x5a8>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	fa93 f3a3 	rbit	r3, r3
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006d16:	2320      	movs	r3, #32
 8006d18:	e003      	b.n	8006d22 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	fab3 f383 	clz	r3, r3
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	3301      	adds	r3, #1
 8006d24:	f003 021f 	and.w	r2, r3, #31
 8006d28:	4613      	mov	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d30:	430b      	orrs	r3, r1
 8006d32:	e07e      	b.n	8006e32 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d107      	bne.n	8006d50 <HAL_ADC_ConfigChannel+0x5c8>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	0e9b      	lsrs	r3, r3, #26
 8006d46:	3301      	adds	r3, #1
 8006d48:	069b      	lsls	r3, r3, #26
 8006d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d4e:	e015      	b.n	8006d7c <HAL_ADC_ConfigChannel+0x5f4>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	fa93 f3a3 	rbit	r3, r3
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006d68:	2320      	movs	r3, #32
 8006d6a:	e003      	b.n	8006d74 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	fab3 f383 	clz	r3, r3
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	3301      	adds	r3, #1
 8006d76:	069b      	lsls	r3, r3, #26
 8006d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <HAL_ADC_ConfigChannel+0x614>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	0e9b      	lsrs	r3, r3, #26
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	2101      	movs	r1, #1
 8006d96:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9a:	e017      	b.n	8006dcc <HAL_ADC_ConfigChannel+0x644>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	fa93 f3a3 	rbit	r3, r3
 8006da8:	61fb      	str	r3, [r7, #28]
  return result;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006db4:	2320      	movs	r3, #32
 8006db6:	e003      	b.n	8006dc0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	fab3 f383 	clz	r3, r3
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	ea42 0103 	orr.w	r1, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10d      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x670>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	0e9b      	lsrs	r3, r3, #26
 8006de2:	3301      	adds	r3, #1
 8006de4:	f003 021f 	and.w	r2, r3, #31
 8006de8:	4613      	mov	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	3b1e      	subs	r3, #30
 8006df0:	051b      	lsls	r3, r3, #20
 8006df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006df6:	e01b      	b.n	8006e30 <HAL_ADC_ConfigChannel+0x6a8>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	fa93 f3a3 	rbit	r3, r3
 8006e04:	613b      	str	r3, [r7, #16]
  return result;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006e10:	2320      	movs	r3, #32
 8006e12:	e003      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	fab3 f383 	clz	r3, r3
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	f003 021f 	and.w	r2, r3, #31
 8006e22:	4613      	mov	r3, r2
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	4413      	add	r3, r2
 8006e28:	3b1e      	subs	r3, #30
 8006e2a:	051b      	lsls	r3, r3, #20
 8006e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e36:	4619      	mov	r1, r3
 8006e38:	f7ff f917 	bl	800606a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <HAL_ADC_ConfigChannel+0x6e0>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80af 	beq.w	8006fa8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e52:	d004      	beq.n	8006e5e <HAL_ADC_ConfigChannel+0x6d6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a04      	ldr	r2, [pc, #16]	; (8006e6c <HAL_ADC_ConfigChannel+0x6e4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10a      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x6ec>
 8006e5e:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <HAL_ADC_ConfigChannel+0x6e8>)
 8006e60:	e009      	b.n	8006e76 <HAL_ADC_ConfigChannel+0x6ee>
 8006e62:	bf00      	nop
 8006e64:	407f0000 	.word	0x407f0000
 8006e68:	80080000 	.word	0x80080000
 8006e6c:	50000100 	.word	0x50000100
 8006e70:	50000300 	.word	0x50000300
 8006e74:	4b51      	ldr	r3, [pc, #324]	; (8006fbc <HAL_ADC_ConfigChannel+0x834>)
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff f80c 	bl	8005e94 <LL_ADC_GetCommonPathInternalCh>
 8006e7c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a4e      	ldr	r2, [pc, #312]	; (8006fc0 <HAL_ADC_ConfigChannel+0x838>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <HAL_ADC_ConfigChannel+0x70c>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a4d      	ldr	r2, [pc, #308]	; (8006fc4 <HAL_ADC_ConfigChannel+0x83c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d134      	bne.n	8006efe <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d12e      	bne.n	8006efe <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ea8:	d17e      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb2:	d004      	beq.n	8006ebe <HAL_ADC_ConfigChannel+0x736>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a43      	ldr	r2, [pc, #268]	; (8006fc8 <HAL_ADC_ConfigChannel+0x840>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d101      	bne.n	8006ec2 <HAL_ADC_ConfigChannel+0x73a>
 8006ebe:	4a43      	ldr	r2, [pc, #268]	; (8006fcc <HAL_ADC_ConfigChannel+0x844>)
 8006ec0:	e000      	b.n	8006ec4 <HAL_ADC_ConfigChannel+0x73c>
 8006ec2:	4a3e      	ldr	r2, [pc, #248]	; (8006fbc <HAL_ADC_ConfigChannel+0x834>)
 8006ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe ffcd 	bl	8005e6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ed4:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <HAL_ADC_ConfigChannel+0x848>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	099b      	lsrs	r3, r3, #6
 8006eda:	4a3e      	ldr	r2, [pc, #248]	; (8006fd4 <HAL_ADC_ConfigChannel+0x84c>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	099b      	lsrs	r3, r3, #6
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006eee:	e002      	b.n	8006ef6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f9      	bne.n	8006ef0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006efc:	e054      	b.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a35      	ldr	r2, [pc, #212]	; (8006fd8 <HAL_ADC_ConfigChannel+0x850>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d120      	bne.n	8006f4a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d11a      	bne.n	8006f4a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f1c:	d144      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f26:	d004      	beq.n	8006f32 <HAL_ADC_ConfigChannel+0x7aa>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a26      	ldr	r2, [pc, #152]	; (8006fc8 <HAL_ADC_ConfigChannel+0x840>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x7ae>
 8006f32:	4a26      	ldr	r2, [pc, #152]	; (8006fcc <HAL_ADC_ConfigChannel+0x844>)
 8006f34:	e000      	b.n	8006f38 <HAL_ADC_ConfigChannel+0x7b0>
 8006f36:	4a21      	ldr	r2, [pc, #132]	; (8006fbc <HAL_ADC_ConfigChannel+0x834>)
 8006f38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f40:	4619      	mov	r1, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	f7fe ff93 	bl	8005e6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f48:	e02e      	b.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <HAL_ADC_ConfigChannel+0x854>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d129      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d123      	bne.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a18      	ldr	r2, [pc, #96]	; (8006fc8 <HAL_ADC_ConfigChannel+0x840>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01e      	beq.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f72:	d004      	beq.n	8006f7e <HAL_ADC_ConfigChannel+0x7f6>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a13      	ldr	r2, [pc, #76]	; (8006fc8 <HAL_ADC_ConfigChannel+0x840>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <HAL_ADC_ConfigChannel+0x7fa>
 8006f7e:	4a13      	ldr	r2, [pc, #76]	; (8006fcc <HAL_ADC_ConfigChannel+0x844>)
 8006f80:	e000      	b.n	8006f84 <HAL_ADC_ConfigChannel+0x7fc>
 8006f82:	4a0e      	ldr	r2, [pc, #56]	; (8006fbc <HAL_ADC_ConfigChannel+0x834>)
 8006f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fe ff6d 	bl	8005e6e <LL_ADC_SetCommonPathInternalCh>
 8006f94:	e008      	b.n	8006fa8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f9a:	f043 0220 	orr.w	r2, r3, #32
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006fb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	37d8      	adds	r7, #216	; 0xd8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	50000700 	.word	0x50000700
 8006fc0:	c3210000 	.word	0xc3210000
 8006fc4:	90c00010 	.word	0x90c00010
 8006fc8:	50000100 	.word	0x50000100
 8006fcc:	50000300 	.word	0x50000300
 8006fd0:	20007868 	.word	0x20007868
 8006fd4:	053e2d63 	.word	0x053e2d63
 8006fd8:	c7520000 	.word	0xc7520000
 8006fdc:	cb840000 	.word	0xcb840000

08006fe0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff f8f9 	bl	80061e8 <LL_ADC_IsEnabled>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d176      	bne.n	80070ea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	4b3c      	ldr	r3, [pc, #240]	; (80070f4 <ADC_Enable+0x114>)
 8007004:	4013      	ands	r3, r2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00d      	beq.n	8007026 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	f043 0210 	orr.w	r2, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701a:	f043 0201 	orr.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e062      	b.n	80070ec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff f8c8 	bl	80061c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007038:	d004      	beq.n	8007044 <ADC_Enable+0x64>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a2e      	ldr	r2, [pc, #184]	; (80070f8 <ADC_Enable+0x118>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d101      	bne.n	8007048 <ADC_Enable+0x68>
 8007044:	4b2d      	ldr	r3, [pc, #180]	; (80070fc <ADC_Enable+0x11c>)
 8007046:	e000      	b.n	800704a <ADC_Enable+0x6a>
 8007048:	4b2d      	ldr	r3, [pc, #180]	; (8007100 <ADC_Enable+0x120>)
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe ff22 	bl	8005e94 <LL_ADC_GetCommonPathInternalCh>
 8007050:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007056:	2b00      	cmp	r3, #0
 8007058:	d013      	beq.n	8007082 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800705a:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <ADC_Enable+0x124>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	099b      	lsrs	r3, r3, #6
 8007060:	4a29      	ldr	r2, [pc, #164]	; (8007108 <ADC_Enable+0x128>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	099b      	lsrs	r3, r3, #6
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	4613      	mov	r3, r2
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007074:	e002      	b.n	800707c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3b01      	subs	r3, #1
 800707a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f9      	bne.n	8007076 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007082:	f7fe feb3 	bl	8005dec <HAL_GetTick>
 8007086:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007088:	e028      	b.n	80070dc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff f8aa 	bl	80061e8 <LL_ADC_IsEnabled>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff f88e 	bl	80061c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80070a4:	f7fe fea2 	bl	8005dec <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d914      	bls.n	80070dc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d00d      	beq.n	80070dc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	f043 0210 	orr.w	r2, r3, #16
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d0:	f043 0201 	orr.w	r2, r3, #1
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e007      	b.n	80070ec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d1cf      	bne.n	800708a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	8000003f 	.word	0x8000003f
 80070f8:	50000100 	.word	0x50000100
 80070fc:	50000300 	.word	0x50000300
 8007100:	50000700 	.word	0x50000700
 8007104:	20007868 	.word	0x20007868
 8007108:	053e2d63 	.word	0x053e2d63

0800710c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007122:	2b00      	cmp	r3, #0
 8007124:	d14b      	bne.n	80071be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d021      	beq.n	8007184 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe ff51 	bl	8005fec <LL_ADC_REG_IsTriggerSourceSWStart>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d032      	beq.n	80071b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d12b      	bne.n	80071b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d11f      	bne.n	80071b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717a:	f043 0201 	orr.w	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	65da      	str	r2, [r3, #92]	; 0x5c
 8007182:	e018      	b.n	80071b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d111      	bne.n	80071b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ae:	f043 0201 	orr.w	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7fe f9cc 	bl	8005554 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80071bc:	e00e      	b.n	80071dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff fad2 	bl	8006774 <HAL_ADC_ErrorCallback>
}
 80071d0:	e004      	b.n	80071dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7fe f920 	bl	8005438 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071f8:	bf00      	nop
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721e:	f043 0204 	orr.w	r2, r3, #4
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff faa4 	bl	8006774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <LL_ADC_IsEnabled>:
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <LL_ADC_IsEnabled+0x18>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <LL_ADC_IsEnabled+0x1a>
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <LL_ADC_REG_IsConversionOngoing>:
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b04      	cmp	r3, #4
 800726c:	d101      	bne.n	8007272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b0a1      	sub	sp, #132	; 0x84
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800729a:	2302      	movs	r3, #2
 800729c:	e0cb      	b.n	8007436 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80072a6:	2300      	movs	r3, #0
 80072a8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80072aa:	2300      	movs	r3, #0
 80072ac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072b6:	d102      	bne.n	80072be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80072b8:	4b61      	ldr	r3, [pc, #388]	; (8007440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	e001      	b.n	80072c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10b      	bne.n	80072e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e0aa      	b.n	8007436 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff ffb9 	bl	800725a <LL_ADC_REG_IsConversionOngoing>
 80072e8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ffb3 	bl	800725a <LL_ADC_REG_IsConversionOngoing>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 808c 	bne.w	8007414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80072fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f040 8088 	bne.w	8007414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800730c:	d004      	beq.n	8007318 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a4b      	ldr	r2, [pc, #300]	; (8007440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d101      	bne.n	800731c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8007318:	4b4a      	ldr	r3, [pc, #296]	; (8007444 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800731a:	e000      	b.n	800731e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800731c:	4b4a      	ldr	r3, [pc, #296]	; (8007448 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800731e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d041      	beq.n	80073ac <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6859      	ldr	r1, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800733a:	035b      	lsls	r3, r3, #13
 800733c:	430b      	orrs	r3, r1
 800733e:	431a      	orrs	r2, r3
 8007340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007342:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800734c:	d004      	beq.n	8007358 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a3b      	ldr	r2, [pc, #236]	; (8007440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d10f      	bne.n	8007378 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8007358:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800735c:	f7ff ff6a 	bl	8007234 <LL_ADC_IsEnabled>
 8007360:	4604      	mov	r4, r0
 8007362:	4837      	ldr	r0, [pc, #220]	; (8007440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007364:	f7ff ff66 	bl	8007234 <LL_ADC_IsEnabled>
 8007368:	4603      	mov	r3, r0
 800736a:	4323      	orrs	r3, r4
 800736c:	2b00      	cmp	r3, #0
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	e008      	b.n	800738a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8007378:	4834      	ldr	r0, [pc, #208]	; (800744c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800737a:	f7ff ff5b 	bl	8007234 <LL_ADC_IsEnabled>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf0c      	ite	eq
 8007384:	2301      	moveq	r3, #1
 8007386:	2300      	movne	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d04c      	beq.n	8007428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800738e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007396:	f023 030f 	bic.w	r3, r3, #15
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	6811      	ldr	r1, [r2, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	6892      	ldr	r2, [r2, #8]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	431a      	orrs	r2, r3
 80073a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80073aa:	e03d      	b.n	8007428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80073ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073c0:	d004      	beq.n	80073cc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1e      	ldr	r2, [pc, #120]	; (8007440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10f      	bne.n	80073ec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80073cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80073d0:	f7ff ff30 	bl	8007234 <LL_ADC_IsEnabled>
 80073d4:	4604      	mov	r4, r0
 80073d6:	481a      	ldr	r0, [pc, #104]	; (8007440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80073d8:	f7ff ff2c 	bl	8007234 <LL_ADC_IsEnabled>
 80073dc:	4603      	mov	r3, r0
 80073de:	4323      	orrs	r3, r4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	e008      	b.n	80073fe <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80073ec:	4817      	ldr	r0, [pc, #92]	; (800744c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80073ee:	f7ff ff21 	bl	8007234 <LL_ADC_IsEnabled>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bf0c      	ite	eq
 80073f8:	2301      	moveq	r3, #1
 80073fa:	2300      	movne	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d012      	beq.n	8007428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800740a:	f023 030f 	bic.w	r3, r3, #15
 800740e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007410:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007412:	e009      	b.n	8007428 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007418:	f043 0220 	orr.w	r2, r3, #32
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007426:	e000      	b.n	800742a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007432:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007436:	4618      	mov	r0, r3
 8007438:	3784      	adds	r7, #132	; 0x84
 800743a:	46bd      	mov	sp, r7
 800743c:	bd90      	pop	{r4, r7, pc}
 800743e:	bf00      	nop
 8007440:	50000100 	.word	0x50000100
 8007444:	50000300 	.word	0x50000300
 8007448:	50000700 	.word	0x50000700
 800744c:	50000400 	.word	0x50000400

08007450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <__NVIC_SetPriorityGrouping+0x44>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800746c:	4013      	ands	r3, r2
 800746e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800747c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007482:	4a04      	ldr	r2, [pc, #16]	; (8007494 <__NVIC_SetPriorityGrouping+0x44>)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	60d3      	str	r3, [r2, #12]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	e000ed00 	.word	0xe000ed00

08007498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <__NVIC_GetPriorityGrouping+0x18>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	f003 0307 	and.w	r3, r3, #7
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	e000ed00 	.word	0xe000ed00

080074b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	db0b      	blt.n	80074de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	f003 021f 	and.w	r2, r3, #31
 80074cc:	4907      	ldr	r1, [pc, #28]	; (80074ec <__NVIC_EnableIRQ+0x38>)
 80074ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	2001      	movs	r0, #1
 80074d6:	fa00 f202 	lsl.w	r2, r0, r2
 80074da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	e000e100 	.word	0xe000e100

080074f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	6039      	str	r1, [r7, #0]
 80074fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007500:	2b00      	cmp	r3, #0
 8007502:	db0a      	blt.n	800751a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	490c      	ldr	r1, [pc, #48]	; (800753c <__NVIC_SetPriority+0x4c>)
 800750a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800750e:	0112      	lsls	r2, r2, #4
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	440b      	add	r3, r1
 8007514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007518:	e00a      	b.n	8007530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	b2da      	uxtb	r2, r3
 800751e:	4908      	ldr	r1, [pc, #32]	; (8007540 <__NVIC_SetPriority+0x50>)
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	3b04      	subs	r3, #4
 8007528:	0112      	lsls	r2, r2, #4
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	440b      	add	r3, r1
 800752e:	761a      	strb	r2, [r3, #24]
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	e000e100 	.word	0xe000e100
 8007540:	e000ed00 	.word	0xe000ed00

08007544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007544:	b480      	push	{r7}
 8007546:	b089      	sub	sp, #36	; 0x24
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f1c3 0307 	rsb	r3, r3, #7
 800755e:	2b04      	cmp	r3, #4
 8007560:	bf28      	it	cs
 8007562:	2304      	movcs	r3, #4
 8007564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	3304      	adds	r3, #4
 800756a:	2b06      	cmp	r3, #6
 800756c:	d902      	bls.n	8007574 <NVIC_EncodePriority+0x30>
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	3b03      	subs	r3, #3
 8007572:	e000      	b.n	8007576 <NVIC_EncodePriority+0x32>
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	43da      	mvns	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	401a      	ands	r2, r3
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800758c:	f04f 31ff 	mov.w	r1, #4294967295
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	43d9      	mvns	r1, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800759c:	4313      	orrs	r3, r2
         );
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3724      	adds	r7, #36	; 0x24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075bc:	d301      	bcc.n	80075c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075be:	2301      	movs	r3, #1
 80075c0:	e00f      	b.n	80075e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075c2:	4a0a      	ldr	r2, [pc, #40]	; (80075ec <SysTick_Config+0x40>)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075ca:	210f      	movs	r1, #15
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	f7ff ff8e 	bl	80074f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <SysTick_Config+0x40>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <SysTick_Config+0x40>)
 80075dc:	2207      	movs	r2, #7
 80075de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	e000e010 	.word	0xe000e010

080075f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ff29 	bl	8007450 <__NVIC_SetPriorityGrouping>
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b086      	sub	sp, #24
 800760a:	af00      	add	r7, sp, #0
 800760c:	4603      	mov	r3, r0
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007614:	f7ff ff40 	bl	8007498 <__NVIC_GetPriorityGrouping>
 8007618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	68b9      	ldr	r1, [r7, #8]
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ff90 	bl	8007544 <NVIC_EncodePriority>
 8007624:	4602      	mov	r2, r0
 8007626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff ff5f 	bl	80074f0 <__NVIC_SetPriority>
}
 8007632:	bf00      	nop
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	4603      	mov	r3, r0
 8007642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff ff33 	bl	80074b4 <__NVIC_EnableIRQ>
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff ffa4 	bl	80075ac <SysTick_Config>
 8007664:	4603      	mov	r3, r0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e014      	b.n	80076aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	791b      	ldrb	r3, [r3, #4]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d105      	bne.n	8007696 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7fe f9ab 	bl	80059ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2202      	movs	r2, #2
 800769a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <HAL_DAC_ConfigChannel+0x1c>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e19e      	b.n	8007a12 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	795b      	ldrb	r3, [r3, #5]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_DAC_ConfigChannel+0x2c>
 80076dc:	2302      	movs	r3, #2
 80076de:	e198      	b.n	8007a12 <HAL_DAC_ConfigChannel+0x35e>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2202      	movs	r2, #2
 80076ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d17a      	bne.n	80077ea <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80076f4:	f7fe fb7a 	bl	8005dec <HAL_GetTick>
 80076f8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d13d      	bne.n	800777c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007700:	e018      	b.n	8007734 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007702:	f7fe fb73 	bl	8005dec <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b01      	cmp	r3, #1
 800770e:	d911      	bls.n	8007734 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f043 0208 	orr.w	r2, r3, #8
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2203      	movs	r2, #3
 800772e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e16e      	b.n	8007a12 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1df      	bne.n	8007702 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800774a:	641a      	str	r2, [r3, #64]	; 0x40
 800774c:	e020      	b.n	8007790 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800774e:	f7fe fb4d 	bl	8005dec <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d90f      	bls.n	800777c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007762:	2b00      	cmp	r3, #0
 8007764:	da0a      	bge.n	800777c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f043 0208 	orr.w	r2, r3, #8
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2203      	movs	r2, #3
 8007776:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e14a      	b.n	8007a12 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007782:	2b00      	cmp	r3, #0
 8007784:	dbe3      	blt.n	800774e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800778e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	43db      	mvns	r3, r3
 80077a6:	ea02 0103 	and.w	r1, r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	409a      	lsls	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f003 0310 	and.w	r3, r3, #16
 80077ca:	21ff      	movs	r1, #255	; 0xff
 80077cc:	fa01 f303 	lsl.w	r3, r1, r3
 80077d0:	43db      	mvns	r3, r3
 80077d2:	ea02 0103 	and.w	r1, r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	409a      	lsls	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d11d      	bne.n	800782e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	221f      	movs	r2, #31
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	43db      	mvns	r3, r3
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	4013      	ands	r3, r2
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	4313      	orrs	r3, r2
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2207      	movs	r2, #7
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	43db      	mvns	r3, r3
 8007844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007846:	4013      	ands	r3, r2
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d102      	bne.n	8007858 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8007852:	2300      	movs	r3, #0
 8007854:	623b      	str	r3, [r7, #32]
 8007856:	e00f      	b.n	8007878 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d102      	bne.n	8007866 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007860:	2301      	movs	r3, #1
 8007862:	623b      	str	r3, [r7, #32]
 8007864:	e008      	b.n	8007878 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d102      	bne.n	8007874 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800786e:	2301      	movs	r3, #1
 8007870:	623b      	str	r3, [r7, #32]
 8007872:	e001      	b.n	8007878 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007874:	2300      	movs	r3, #0
 8007876:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	6a3a      	ldr	r2, [r7, #32]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	43db      	mvns	r3, r3
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	4013      	ands	r3, r2
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	791b      	ldrb	r3, [r3, #4]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d102      	bne.n	80078ac <HAL_DAC_ConfigChannel+0x1f8>
 80078a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078aa:	e000      	b.n	80078ae <HAL_DAC_ConfigChannel+0x1fa>
 80078ac:	2300      	movs	r3, #0
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c6:	4013      	ands	r3, r2
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	795b      	ldrb	r3, [r3, #5]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d102      	bne.n	80078d8 <HAL_DAC_ConfigChannel+0x224>
 80078d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d6:	e000      	b.n	80078da <HAL_DAC_ConfigChannel+0x226>
 80078d8:	2300      	movs	r3, #0
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d114      	bne.n	800791a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80078f0:	f001 faca 	bl	8008e88 <HAL_RCC_GetHCLKFreq>
 80078f4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4a48      	ldr	r2, [pc, #288]	; (8007a1c <HAL_DAC_ConfigChannel+0x368>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d904      	bls.n	8007908 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
 8007906:	e00f      	b.n	8007928 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4a45      	ldr	r2, [pc, #276]	; (8007a20 <HAL_DAC_ConfigChannel+0x36c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d90a      	bls.n	8007926 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
 8007918:	e006      	b.n	8007928 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007920:	4313      	orrs	r3, r2
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
 8007924:	e000      	b.n	8007928 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007926:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f003 0310 	and.w	r3, r3, #16
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007936:	4313      	orrs	r3, r2
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6819      	ldr	r1, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007952:	fa02 f303 	lsl.w	r3, r2, r3
 8007956:	43da      	mvns	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	400a      	ands	r2, r1
 800795e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007972:	fa02 f303 	lsl.w	r3, r2, r3
 8007976:	43db      	mvns	r3, r3
 8007978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797a:	4013      	ands	r3, r2
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f003 0310 	and.w	r3, r3, #16
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007992:	4313      	orrs	r3, r2
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f003 0310 	and.w	r3, r3, #16
 80079aa:	22c0      	movs	r2, #192	; 0xc0
 80079ac:	fa02 f303 	lsl.w	r3, r2, r3
 80079b0:	43da      	mvns	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	400a      	ands	r2, r1
 80079b8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	089b      	lsrs	r3, r3, #2
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	089b      	lsrs	r3, r3, #2
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80079e8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ec:	43db      	mvns	r3, r3
 80079ee:	ea02 0103 	and.w	r1, r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	409a      	lsls	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3728      	adds	r7, #40	; 0x28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	09896800 	.word	0x09896800
 8007a20:	04c4b400 	.word	0x04c4b400

08007a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e08d      	b.n	8007b52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4b47      	ldr	r3, [pc, #284]	; (8007b5c <HAL_DMA_Init+0x138>)
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d80f      	bhi.n	8007a62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	4b45      	ldr	r3, [pc, #276]	; (8007b60 <HAL_DMA_Init+0x13c>)
 8007a4a:	4413      	add	r3, r2
 8007a4c:	4a45      	ldr	r2, [pc, #276]	; (8007b64 <HAL_DMA_Init+0x140>)
 8007a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	009a      	lsls	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a42      	ldr	r2, [pc, #264]	; (8007b68 <HAL_DMA_Init+0x144>)
 8007a5e:	641a      	str	r2, [r3, #64]	; 0x40
 8007a60:	e00e      	b.n	8007a80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	4b40      	ldr	r3, [pc, #256]	; (8007b6c <HAL_DMA_Init+0x148>)
 8007a6a:	4413      	add	r3, r2
 8007a6c:	4a3d      	ldr	r2, [pc, #244]	; (8007b64 <HAL_DMA_Init+0x140>)
 8007a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	009a      	lsls	r2, r3, #2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a3c      	ldr	r2, [pc, #240]	; (8007b70 <HAL_DMA_Init+0x14c>)
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9b6 	bl	8007e44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae0:	d102      	bne.n	8007ae8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007afc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d010      	beq.n	8007b28 <HAL_DMA_Init+0x104>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d80c      	bhi.n	8007b28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9d6 	bl	8007ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	e008      	b.n	8007b3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40020407 	.word	0x40020407
 8007b60:	bffdfff8 	.word	0xbffdfff8
 8007b64:	cccccccd 	.word	0xcccccccd
 8007b68:	40020000 	.word	0x40020000
 8007b6c:	bffdfbf8 	.word	0xbffdfbf8
 8007b70:	40020400 	.word	0x40020400

08007b74 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_DMA_Start_IT+0x20>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e066      	b.n	8007c62 <HAL_DMA_Start_IT+0xee>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d155      	bne.n	8007c54 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0201 	bic.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f8fb 	bl	8007dc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 020e 	orr.w	r2, r2, #14
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	e00f      	b.n	8007c0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0204 	bic.w	r2, r2, #4
 8007bfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 020a 	orr.w	r2, r2, #10
 8007c0a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c28:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c40:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0201 	orr.w	r2, r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e005      	b.n	8007c60 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	409a      	lsls	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d026      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x7a>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d021      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d107      	bne.n	8007cbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0204 	bic.w	r2, r2, #4
 8007cbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	f003 021f 	and.w	r2, r3, #31
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	2104      	movs	r1, #4
 8007ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8007cd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d071      	beq.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007ce2:	e06c      	b.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	2202      	movs	r2, #2
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d02e      	beq.n	8007d56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d029      	beq.n	8007d56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 020a 	bic.w	r2, r2, #10
 8007d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2c:	f003 021f 	and.w	r2, r3, #31
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	2102      	movs	r1, #2
 8007d36:	fa01 f202 	lsl.w	r2, r1, r2
 8007d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d038      	beq.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007d54:	e033      	b.n	8007dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	f003 031f 	and.w	r3, r3, #31
 8007d5e:	2208      	movs	r2, #8
 8007d60:	409a      	lsls	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d02a      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d025      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 020e 	bic.w	r2, r2, #14
 8007d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d88:	f003 021f 	and.w	r2, r3, #31
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	2101      	movs	r1, #1
 8007d92:	fa01 f202 	lsl.w	r2, r1, r2
 8007d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
}
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007dde:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d004      	beq.n	8007df2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007df0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df6:	f003 021f 	and.w	r2, r3, #31
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	2101      	movs	r1, #1
 8007e00:	fa01 f202 	lsl.w	r2, r1, r2
 8007e04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d108      	bne.n	8007e28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e26:	e007      	b.n	8007e38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	60da      	str	r2, [r3, #12]
}
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	4b16      	ldr	r3, [pc, #88]	; (8007eac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d802      	bhi.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007e58:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e001      	b.n	8007e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007e5e:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007e60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	3b08      	subs	r3, #8
 8007e6e:	4a12      	ldr	r2, [pc, #72]	; (8007eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007e70:	fba2 2303 	umull	r2, r3, r2, r3
 8007e74:	091b      	lsrs	r3, r3, #4
 8007e76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7c:	089b      	lsrs	r3, r3, #2
 8007e7e:	009a      	lsls	r2, r3, #2
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a0b      	ldr	r2, [pc, #44]	; (8007ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007e8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f003 031f 	and.w	r3, r3, #31
 8007e96:	2201      	movs	r2, #1
 8007e98:	409a      	lsls	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40020407 	.word	0x40020407
 8007eb0:	40020800 	.word	0x40020800
 8007eb4:	40020820 	.word	0x40020820
 8007eb8:	cccccccd 	.word	0xcccccccd
 8007ebc:	40020880 	.word	0x40020880

08007ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	461a      	mov	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a08      	ldr	r2, [pc, #32]	; (8007f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ee2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	2201      	movs	r2, #1
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	1000823f 	.word	0x1000823f
 8007f04:	40020940 	.word	0x40020940

08007f08 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e033      	b.n	8007f82 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fd fdf8 	bl	8005b24 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f854 	bl	8007fe8 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f822 	bl	8007f8a <FMAC_Reset>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d10c      	bne.n	8007f66 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f50:	f043 0210 	orr.w	r2, r3, #16
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	22a0      	movs	r2, #160	; 0xa0
 8007f5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
 8007f64:	e008      	b.n	8007f78 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f92:	f7fd ff2b 	bl	8005dec <HAL_GetTick>
 8007f96:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691a      	ldr	r2, [r3, #16]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007fa6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007fa8:	e00f      	b.n	8007fca <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007faa:	f7fd ff1f 	bl	8005dec <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007fb8:	d907      	bls.n	8007fca <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e00a      	b.n	8007fe0 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e8      	bne.n	8007faa <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f807 	bl	8008004 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f81b 	bl	8008032 <FMAC_ResetOutputStateAndDataPointers>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800806a:	2300      	movs	r3, #0
 800806c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800806e:	e15a      	b.n	8008326 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	2101      	movs	r1, #1
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	fa01 f303 	lsl.w	r3, r1, r3
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 814c 	beq.w	8008320 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f003 0303 	and.w	r3, r3, #3
 8008090:	2b01      	cmp	r3, #1
 8008092:	d005      	beq.n	80080a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800809c:	2b02      	cmp	r3, #2
 800809e:	d130      	bne.n	8008102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	2203      	movs	r2, #3
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	43db      	mvns	r3, r3
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4013      	ands	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080d6:	2201      	movs	r2, #1
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	fa02 f303 	lsl.w	r3, r2, r3
 80080de:	43db      	mvns	r3, r3
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4013      	ands	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	f003 0201 	and.w	r2, r3, #1
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	fa02 f303 	lsl.w	r3, r2, r3
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	2b03      	cmp	r3, #3
 800810c:	d017      	beq.n	800813e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	2203      	movs	r2, #3
 800811a:	fa02 f303 	lsl.w	r3, r2, r3
 800811e:	43db      	mvns	r3, r3
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4013      	ands	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d123      	bne.n	8008192 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	08da      	lsrs	r2, r3, #3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3208      	adds	r2, #8
 8008152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008156:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	220f      	movs	r2, #15
 8008162:	fa02 f303 	lsl.w	r3, r2, r3
 8008166:	43db      	mvns	r3, r3
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4013      	ands	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	691a      	ldr	r2, [r3, #16]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	fa02 f303 	lsl.w	r3, r2, r3
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	08da      	lsrs	r2, r3, #3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3208      	adds	r2, #8
 800818c:	6939      	ldr	r1, [r7, #16]
 800818e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	2203      	movs	r2, #3
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43db      	mvns	r3, r3
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4013      	ands	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f003 0203 	and.w	r2, r3, #3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 80a6 	beq.w	8008320 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081d4:	4b5b      	ldr	r3, [pc, #364]	; (8008344 <HAL_GPIO_Init+0x2e4>)
 80081d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d8:	4a5a      	ldr	r2, [pc, #360]	; (8008344 <HAL_GPIO_Init+0x2e4>)
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	6613      	str	r3, [r2, #96]	; 0x60
 80081e0:	4b58      	ldr	r3, [pc, #352]	; (8008344 <HAL_GPIO_Init+0x2e4>)
 80081e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	60bb      	str	r3, [r7, #8]
 80081ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081ec:	4a56      	ldr	r2, [pc, #344]	; (8008348 <HAL_GPIO_Init+0x2e8>)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	089b      	lsrs	r3, r3, #2
 80081f2:	3302      	adds	r3, #2
 80081f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	220f      	movs	r2, #15
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	43db      	mvns	r3, r3
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4013      	ands	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008216:	d01f      	beq.n	8008258 <HAL_GPIO_Init+0x1f8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a4c      	ldr	r2, [pc, #304]	; (800834c <HAL_GPIO_Init+0x2ec>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d019      	beq.n	8008254 <HAL_GPIO_Init+0x1f4>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a4b      	ldr	r2, [pc, #300]	; (8008350 <HAL_GPIO_Init+0x2f0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d013      	beq.n	8008250 <HAL_GPIO_Init+0x1f0>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a4a      	ldr	r2, [pc, #296]	; (8008354 <HAL_GPIO_Init+0x2f4>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00d      	beq.n	800824c <HAL_GPIO_Init+0x1ec>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a49      	ldr	r2, [pc, #292]	; (8008358 <HAL_GPIO_Init+0x2f8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d007      	beq.n	8008248 <HAL_GPIO_Init+0x1e8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a48      	ldr	r2, [pc, #288]	; (800835c <HAL_GPIO_Init+0x2fc>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d101      	bne.n	8008244 <HAL_GPIO_Init+0x1e4>
 8008240:	2305      	movs	r3, #5
 8008242:	e00a      	b.n	800825a <HAL_GPIO_Init+0x1fa>
 8008244:	2306      	movs	r3, #6
 8008246:	e008      	b.n	800825a <HAL_GPIO_Init+0x1fa>
 8008248:	2304      	movs	r3, #4
 800824a:	e006      	b.n	800825a <HAL_GPIO_Init+0x1fa>
 800824c:	2303      	movs	r3, #3
 800824e:	e004      	b.n	800825a <HAL_GPIO_Init+0x1fa>
 8008250:	2302      	movs	r3, #2
 8008252:	e002      	b.n	800825a <HAL_GPIO_Init+0x1fa>
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <HAL_GPIO_Init+0x1fa>
 8008258:	2300      	movs	r3, #0
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	f002 0203 	and.w	r2, r2, #3
 8008260:	0092      	lsls	r2, r2, #2
 8008262:	4093      	lsls	r3, r2
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800826a:	4937      	ldr	r1, [pc, #220]	; (8008348 <HAL_GPIO_Init+0x2e8>)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	3302      	adds	r3, #2
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008278:	4b39      	ldr	r3, [pc, #228]	; (8008360 <HAL_GPIO_Init+0x300>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	43db      	mvns	r3, r3
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4013      	ands	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800829c:	4a30      	ldr	r2, [pc, #192]	; (8008360 <HAL_GPIO_Init+0x300>)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80082a2:	4b2f      	ldr	r3, [pc, #188]	; (8008360 <HAL_GPIO_Init+0x300>)
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	43db      	mvns	r3, r3
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4013      	ands	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082c6:	4a26      	ldr	r2, [pc, #152]	; (8008360 <HAL_GPIO_Init+0x300>)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80082cc:	4b24      	ldr	r3, [pc, #144]	; (8008360 <HAL_GPIO_Init+0x300>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	4013      	ands	r3, r2
 80082da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082f0:	4a1b      	ldr	r2, [pc, #108]	; (8008360 <HAL_GPIO_Init+0x300>)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80082f6:	4b1a      	ldr	r3, [pc, #104]	; (8008360 <HAL_GPIO_Init+0x300>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	43db      	mvns	r3, r3
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4013      	ands	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800831a:	4a11      	ldr	r2, [pc, #68]	; (8008360 <HAL_GPIO_Init+0x300>)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	3301      	adds	r3, #1
 8008324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	f47f ae9d 	bne.w	8008070 <HAL_GPIO_Init+0x10>
  }
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40021000 	.word	0x40021000
 8008348:	40010000 	.word	0x40010000
 800834c:	48000400 	.word	0x48000400
 8008350:	48000800 	.word	0x48000800
 8008354:	48000c00 	.word	0x48000c00
 8008358:	48001000 	.word	0x48001000
 800835c:	48001400 	.word	0x48001400
 8008360:	40010400 	.word	0x40010400

08008364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
 8008370:	4613      	mov	r3, r2
 8008372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008374:	787b      	ldrb	r3, [r7, #1]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800837a:	887a      	ldrh	r2, [r7, #2]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008380:	e002      	b.n	8008388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008382:	887a      	ldrh	r2, [r7, #2]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800839e:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	4013      	ands	r3, r2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d006      	beq.n	80083b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083aa:	4a05      	ldr	r2, [pc, #20]	; (80083c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083ac:	88fb      	ldrh	r3, [r7, #6]
 80083ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fd f824 	bl	8005400 <HAL_GPIO_EXTI_Callback>
  }
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	40010400 	.word	0x40010400

080083c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d141      	bne.n	8008456 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80083d2:	4b4b      	ldr	r3, [pc, #300]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083de:	d131      	bne.n	8008444 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80083e0:	4b47      	ldr	r3, [pc, #284]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e6:	4a46      	ldr	r2, [pc, #280]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80083f0:	4b43      	ldr	r3, [pc, #268]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083f8:	4a41      	ldr	r2, [pc, #260]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008400:	4b40      	ldr	r3, [pc, #256]	; (8008504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2232      	movs	r2, #50	; 0x32
 8008406:	fb02 f303 	mul.w	r3, r2, r3
 800840a:	4a3f      	ldr	r2, [pc, #252]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	0c9b      	lsrs	r3, r3, #18
 8008412:	3301      	adds	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008416:	e002      	b.n	800841e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3b01      	subs	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800841e:	4b38      	ldr	r3, [pc, #224]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800842a:	d102      	bne.n	8008432 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f2      	bne.n	8008418 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008432:	4b33      	ldr	r3, [pc, #204]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843e:	d158      	bne.n	80084f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e057      	b.n	80084f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008444:	4b2e      	ldr	r3, [pc, #184]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800844a:	4a2d      	ldr	r2, [pc, #180]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800844c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008454:	e04d      	b.n	80084f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800845c:	d141      	bne.n	80084e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800845e:	4b28      	ldr	r3, [pc, #160]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846a:	d131      	bne.n	80084d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800846c:	4b24      	ldr	r3, [pc, #144]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800846e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008472:	4a23      	ldr	r2, [pc, #140]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800847c:	4b20      	ldr	r3, [pc, #128]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008484:	4a1e      	ldr	r2, [pc, #120]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800848a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800848c:	4b1d      	ldr	r3, [pc, #116]	; (8008504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2232      	movs	r2, #50	; 0x32
 8008492:	fb02 f303 	mul.w	r3, r2, r3
 8008496:	4a1c      	ldr	r2, [pc, #112]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008498:	fba2 2303 	umull	r2, r3, r2, r3
 800849c:	0c9b      	lsrs	r3, r3, #18
 800849e:	3301      	adds	r3, #1
 80084a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084a2:	e002      	b.n	80084aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b6:	d102      	bne.n	80084be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f2      	bne.n	80084a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ca:	d112      	bne.n	80084f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e011      	b.n	80084f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d6:	4a0a      	ldr	r2, [pc, #40]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80084e0:	e007      	b.n	80084f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80084e2:	4b07      	ldr	r3, [pc, #28]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084ea:	4a05      	ldr	r2, [pc, #20]	; (8008500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	40007000 	.word	0x40007000
 8008504:	20007868 	.word	0x20007868
 8008508:	431bde83 	.word	0x431bde83

0800850c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4a04      	ldr	r2, [pc, #16]	; (8008528 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800851a:	6093      	str	r3, [r2, #8]
}
 800851c:	bf00      	nop
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	40007000 	.word	0x40007000

0800852c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e2fe      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d075      	beq.n	8008636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800854a:	4b97      	ldr	r3, [pc, #604]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 030c 	and.w	r3, r3, #12
 8008552:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008554:	4b94      	ldr	r3, [pc, #592]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b0c      	cmp	r3, #12
 8008562:	d102      	bne.n	800856a <HAL_RCC_OscConfig+0x3e>
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d002      	beq.n	8008570 <HAL_RCC_OscConfig+0x44>
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b08      	cmp	r3, #8
 800856e:	d10b      	bne.n	8008588 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008570:	4b8d      	ldr	r3, [pc, #564]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d05b      	beq.n	8008634 <HAL_RCC_OscConfig+0x108>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d157      	bne.n	8008634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e2d9      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008590:	d106      	bne.n	80085a0 <HAL_RCC_OscConfig+0x74>
 8008592:	4b85      	ldr	r3, [pc, #532]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a84      	ldr	r2, [pc, #528]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	e01d      	b.n	80085dc <HAL_RCC_OscConfig+0xb0>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085a8:	d10c      	bne.n	80085c4 <HAL_RCC_OscConfig+0x98>
 80085aa:	4b7f      	ldr	r3, [pc, #508]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a7e      	ldr	r2, [pc, #504]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	4b7c      	ldr	r3, [pc, #496]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a7b      	ldr	r2, [pc, #492]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	e00b      	b.n	80085dc <HAL_RCC_OscConfig+0xb0>
 80085c4:	4b78      	ldr	r3, [pc, #480]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a77      	ldr	r2, [pc, #476]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	4b75      	ldr	r3, [pc, #468]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a74      	ldr	r2, [pc, #464]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80085d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d013      	beq.n	800860c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e4:	f7fd fc02 	bl	8005dec <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085ec:	f7fd fbfe 	bl	8005dec <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b64      	cmp	r3, #100	; 0x64
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e29e      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085fe:	4b6a      	ldr	r3, [pc, #424]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0f0      	beq.n	80085ec <HAL_RCC_OscConfig+0xc0>
 800860a:	e014      	b.n	8008636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860c:	f7fd fbee 	bl	8005dec <HAL_GetTick>
 8008610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008612:	e008      	b.n	8008626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008614:	f7fd fbea 	bl	8005dec <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	2b64      	cmp	r3, #100	; 0x64
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e28a      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008626:	4b60      	ldr	r3, [pc, #384]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f0      	bne.n	8008614 <HAL_RCC_OscConfig+0xe8>
 8008632:	e000      	b.n	8008636 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d075      	beq.n	800872e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008642:	4b59      	ldr	r3, [pc, #356]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 030c 	and.w	r3, r3, #12
 800864a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800864c:	4b56      	ldr	r3, [pc, #344]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	2b0c      	cmp	r3, #12
 800865a:	d102      	bne.n	8008662 <HAL_RCC_OscConfig+0x136>
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d002      	beq.n	8008668 <HAL_RCC_OscConfig+0x13c>
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d11f      	bne.n	80086a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008668:	4b4f      	ldr	r3, [pc, #316]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_RCC_OscConfig+0x154>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e25d      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008680:	4b49      	ldr	r3, [pc, #292]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	4946      	ldr	r1, [pc, #280]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008690:	4313      	orrs	r3, r2
 8008692:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008694:	4b45      	ldr	r3, [pc, #276]	; (80087ac <HAL_RCC_OscConfig+0x280>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd fb5b 	bl	8005d54 <HAL_InitTick>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d043      	beq.n	800872c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e249      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d023      	beq.n	80086f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086b0:	4b3d      	ldr	r3, [pc, #244]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a3c      	ldr	r2, [pc, #240]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80086b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086bc:	f7fd fb96 	bl	8005dec <HAL_GetTick>
 80086c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086c4:	f7fd fb92 	bl	8005dec <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e232      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086d6:	4b34      	ldr	r3, [pc, #208]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f0      	beq.n	80086c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e2:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	061b      	lsls	r3, r3, #24
 80086f0:	492d      	ldr	r1, [pc, #180]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	604b      	str	r3, [r1, #4]
 80086f6:	e01a      	b.n	800872e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086f8:	4b2b      	ldr	r3, [pc, #172]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a2a      	ldr	r2, [pc, #168]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 80086fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008704:	f7fd fb72 	bl	8005dec <HAL_GetTick>
 8008708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800870a:	e008      	b.n	800871e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800870c:	f7fd fb6e 	bl	8005dec <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e20e      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800871e:	4b22      	ldr	r3, [pc, #136]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f0      	bne.n	800870c <HAL_RCC_OscConfig+0x1e0>
 800872a:	e000      	b.n	800872e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800872c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d041      	beq.n	80087be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01c      	beq.n	800877c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008742:	4b19      	ldr	r3, [pc, #100]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008748:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 800874a:	f043 0301 	orr.w	r3, r3, #1
 800874e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008752:	f7fd fb4b 	bl	8005dec <HAL_GetTick>
 8008756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800875a:	f7fd fb47 	bl	8005dec <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e1e7      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800876c:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 800876e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0ef      	beq.n	800875a <HAL_RCC_OscConfig+0x22e>
 800877a:	e020      	b.n	80087be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 800877e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008782:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <HAL_RCC_OscConfig+0x27c>)
 8008784:	f023 0301 	bic.w	r3, r3, #1
 8008788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878c:	f7fd fb2e 	bl	8005dec <HAL_GetTick>
 8008790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008792:	e00d      	b.n	80087b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008794:	f7fd fb2a 	bl	8005dec <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d906      	bls.n	80087b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e1ca      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
 80087a6:	bf00      	nop
 80087a8:	40021000 	.word	0x40021000
 80087ac:	2000786c 	.word	0x2000786c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087b0:	4b8c      	ldr	r3, [pc, #560]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80087b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1ea      	bne.n	8008794 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80a6 	beq.w	8008918 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087cc:	2300      	movs	r3, #0
 80087ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80087d0:	4b84      	ldr	r3, [pc, #528]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80087d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_RCC_OscConfig+0x2b4>
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <HAL_RCC_OscConfig+0x2b6>
 80087e0:	2300      	movs	r3, #0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087e6:	4b7f      	ldr	r3, [pc, #508]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	4a7e      	ldr	r2, [pc, #504]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80087ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087f0:	6593      	str	r3, [r2, #88]	; 0x58
 80087f2:	4b7c      	ldr	r3, [pc, #496]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80087f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80087fe:	2301      	movs	r3, #1
 8008800:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008802:	4b79      	ldr	r3, [pc, #484]	; (80089e8 <HAL_RCC_OscConfig+0x4bc>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880a:	2b00      	cmp	r3, #0
 800880c:	d118      	bne.n	8008840 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800880e:	4b76      	ldr	r3, [pc, #472]	; (80089e8 <HAL_RCC_OscConfig+0x4bc>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a75      	ldr	r2, [pc, #468]	; (80089e8 <HAL_RCC_OscConfig+0x4bc>)
 8008814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800881a:	f7fd fae7 	bl	8005dec <HAL_GetTick>
 800881e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008820:	e008      	b.n	8008834 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008822:	f7fd fae3 	bl	8005dec <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e183      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008834:	4b6c      	ldr	r3, [pc, #432]	; (80089e8 <HAL_RCC_OscConfig+0x4bc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0f0      	beq.n	8008822 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d108      	bne.n	800885a <HAL_RCC_OscConfig+0x32e>
 8008848:	4b66      	ldr	r3, [pc, #408]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884e:	4a65      	ldr	r2, [pc, #404]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008858:	e024      	b.n	80088a4 <HAL_RCC_OscConfig+0x378>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	2b05      	cmp	r3, #5
 8008860:	d110      	bne.n	8008884 <HAL_RCC_OscConfig+0x358>
 8008862:	4b60      	ldr	r3, [pc, #384]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008868:	4a5e      	ldr	r2, [pc, #376]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800886a:	f043 0304 	orr.w	r3, r3, #4
 800886e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008872:	4b5c      	ldr	r3, [pc, #368]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008878:	4a5a      	ldr	r2, [pc, #360]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008882:	e00f      	b.n	80088a4 <HAL_RCC_OscConfig+0x378>
 8008884:	4b57      	ldr	r3, [pc, #348]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800888a:	4a56      	ldr	r2, [pc, #344]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800888c:	f023 0301 	bic.w	r3, r3, #1
 8008890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008894:	4b53      	ldr	r3, [pc, #332]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889a:	4a52      	ldr	r2, [pc, #328]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800889c:	f023 0304 	bic.w	r3, r3, #4
 80088a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d016      	beq.n	80088da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ac:	f7fd fa9e 	bl	8005dec <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088b2:	e00a      	b.n	80088ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088b4:	f7fd fa9a 	bl	8005dec <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e138      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088ca:	4b46      	ldr	r3, [pc, #280]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80088cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0ed      	beq.n	80088b4 <HAL_RCC_OscConfig+0x388>
 80088d8:	e015      	b.n	8008906 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088da:	f7fd fa87 	bl	8005dec <HAL_GetTick>
 80088de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80088e0:	e00a      	b.n	80088f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088e2:	f7fd fa83 	bl	8005dec <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d901      	bls.n	80088f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e121      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80088f8:	4b3a      	ldr	r3, [pc, #232]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80088fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1ed      	bne.n	80088e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008906:	7ffb      	ldrb	r3, [r7, #31]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d105      	bne.n	8008918 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800890c:	4b35      	ldr	r3, [pc, #212]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800890e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008910:	4a34      	ldr	r2, [pc, #208]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008916:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0320 	and.w	r3, r3, #32
 8008920:	2b00      	cmp	r3, #0
 8008922:	d03c      	beq.n	800899e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01c      	beq.n	8008966 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800892c:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800892e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008932:	4a2c      	ldr	r2, [pc, #176]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008934:	f043 0301 	orr.w	r3, r3, #1
 8008938:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800893c:	f7fd fa56 	bl	8005dec <HAL_GetTick>
 8008940:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008942:	e008      	b.n	8008956 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008944:	f7fd fa52 	bl	8005dec <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e0f2      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008956:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0ef      	beq.n	8008944 <HAL_RCC_OscConfig+0x418>
 8008964:	e01b      	b.n	800899e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008966:	4b1f      	ldr	r3, [pc, #124]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008976:	f7fd fa39 	bl	8005dec <HAL_GetTick>
 800897a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800897c:	e008      	b.n	8008990 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800897e:	f7fd fa35 	bl	8005dec <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d901      	bls.n	8008990 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e0d5      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008990:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 8008992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1ef      	bne.n	800897e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 80c9 	beq.w	8008b3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089a8:	4b0e      	ldr	r3, [pc, #56]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 030c 	and.w	r3, r3, #12
 80089b0:	2b0c      	cmp	r3, #12
 80089b2:	f000 8083 	beq.w	8008abc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d15e      	bne.n	8008a7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089be:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a08      	ldr	r2, [pc, #32]	; (80089e4 <HAL_RCC_OscConfig+0x4b8>)
 80089c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ca:	f7fd fa0f 	bl	8005dec <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089d0:	e00c      	b.n	80089ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d2:	f7fd fa0b 	bl	8005dec <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d905      	bls.n	80089ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e0ab      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
 80089e4:	40021000 	.word	0x40021000
 80089e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089ec:	4b55      	ldr	r3, [pc, #340]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1ec      	bne.n	80089d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089f8:	4b52      	ldr	r3, [pc, #328]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 80089fa:	68da      	ldr	r2, [r3, #12]
 80089fc:	4b52      	ldr	r3, [pc, #328]	; (8008b48 <HAL_RCC_OscConfig+0x61c>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6a11      	ldr	r1, [r2, #32]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a08:	3a01      	subs	r2, #1
 8008a0a:	0112      	lsls	r2, r2, #4
 8008a0c:	4311      	orrs	r1, r2
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008a12:	0212      	lsls	r2, r2, #8
 8008a14:	4311      	orrs	r1, r2
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a1a:	0852      	lsrs	r2, r2, #1
 8008a1c:	3a01      	subs	r2, #1
 8008a1e:	0552      	lsls	r2, r2, #21
 8008a20:	4311      	orrs	r1, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a26:	0852      	lsrs	r2, r2, #1
 8008a28:	3a01      	subs	r2, #1
 8008a2a:	0652      	lsls	r2, r2, #25
 8008a2c:	4311      	orrs	r1, r2
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a32:	06d2      	lsls	r2, r2, #27
 8008a34:	430a      	orrs	r2, r1
 8008a36:	4943      	ldr	r1, [pc, #268]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a3c:	4b41      	ldr	r3, [pc, #260]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a40      	ldr	r2, [pc, #256]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a48:	4b3e      	ldr	r3, [pc, #248]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	4a3d      	ldr	r2, [pc, #244]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a54:	f7fd f9ca 	bl	8005dec <HAL_GetTick>
 8008a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a5a:	e008      	b.n	8008a6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a5c:	f7fd f9c6 	bl	8005dec <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e066      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a6e:	4b35      	ldr	r3, [pc, #212]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0f0      	beq.n	8008a5c <HAL_RCC_OscConfig+0x530>
 8008a7a:	e05e      	b.n	8008b3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a7c:	4b31      	ldr	r3, [pc, #196]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a30      	ldr	r2, [pc, #192]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fd f9b0 	bl	8005dec <HAL_GetTick>
 8008a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a90:	f7fd f9ac 	bl	8005dec <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e04c      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008aa2:	4b28      	ldr	r3, [pc, #160]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1f0      	bne.n	8008a90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008aae:	4b25      	ldr	r3, [pc, #148]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	4924      	ldr	r1, [pc, #144]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <HAL_RCC_OscConfig+0x620>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	60cb      	str	r3, [r1, #12]
 8008aba:	e03e      	b.n	8008b3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e039      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008ac8:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <HAL_RCC_OscConfig+0x618>)
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f003 0203 	and.w	r2, r3, #3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d12c      	bne.n	8008b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d123      	bne.n	8008b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d11b      	bne.n	8008b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d113      	bne.n	8008b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d109      	bne.n	8008b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d001      	beq.n	8008b3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	40021000 	.word	0x40021000
 8008b48:	019f800c 	.word	0x019f800c
 8008b4c:	feeefffc 	.word	0xfeeefffc

08008b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e11e      	b.n	8008da6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b68:	4b91      	ldr	r3, [pc, #580]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d910      	bls.n	8008b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b76:	4b8e      	ldr	r3, [pc, #568]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 020f 	bic.w	r2, r3, #15
 8008b7e:	498c      	ldr	r1, [pc, #560]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b8a      	ldr	r3, [pc, #552]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d001      	beq.n	8008b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e106      	b.n	8008da6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d073      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d129      	bne.n	8008c00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bac:	4b81      	ldr	r3, [pc, #516]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0f4      	b.n	8008da6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008bbc:	f000 f970 	bl	8008ea0 <RCC_GetSysClockFreqFromPLLSource>
 8008bc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	4a7c      	ldr	r2, [pc, #496]	; (8008db8 <HAL_RCC_ClockConfig+0x268>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d93f      	bls.n	8008c4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008bca:	4b7a      	ldr	r3, [pc, #488]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d033      	beq.n	8008c4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d12f      	bne.n	8008c4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008bea:	4b72      	ldr	r3, [pc, #456]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bf2:	4a70      	ldr	r2, [pc, #448]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008bfa:	2380      	movs	r3, #128	; 0x80
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	e024      	b.n	8008c4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d107      	bne.n	8008c18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c08:	4b6a      	ldr	r3, [pc, #424]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e0c6      	b.n	8008da6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c18:	4b66      	ldr	r3, [pc, #408]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0be      	b.n	8008da6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008c28:	f000 f8ce 	bl	8008dc8 <HAL_RCC_GetSysClockFreq>
 8008c2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	4a61      	ldr	r2, [pc, #388]	; (8008db8 <HAL_RCC_ClockConfig+0x268>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d909      	bls.n	8008c4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c36:	4b5f      	ldr	r3, [pc, #380]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c3e:	4a5d      	ldr	r2, [pc, #372]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c4a:	4b5a      	ldr	r3, [pc, #360]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f023 0203 	bic.w	r2, r3, #3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	4957      	ldr	r1, [pc, #348]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c5c:	f7fd f8c6 	bl	8005dec <HAL_GetTick>
 8008c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c62:	e00a      	b.n	8008c7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c64:	f7fd f8c2 	bl	8005dec <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e095      	b.n	8008da6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c7a:	4b4e      	ldr	r3, [pc, #312]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f003 020c 	and.w	r2, r3, #12
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d1eb      	bne.n	8008c64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d023      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0304 	and.w	r3, r3, #4
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ca4:	4b43      	ldr	r3, [pc, #268]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	4a42      	ldr	r2, [pc, #264]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008cae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008cbc:	4b3d      	ldr	r3, [pc, #244]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008cc4:	4a3b      	ldr	r2, [pc, #236]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ccc:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4936      	ldr	r1, [pc, #216]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	608b      	str	r3, [r1, #8]
 8008cde:	e008      	b.n	8008cf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2b80      	cmp	r3, #128	; 0x80
 8008ce4:	d105      	bne.n	8008cf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008ce6:	4b33      	ldr	r3, [pc, #204]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	4a32      	ldr	r2, [pc, #200]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf2:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d21d      	bcs.n	8008d3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d00:	4b2b      	ldr	r3, [pc, #172]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f023 020f 	bic.w	r2, r3, #15
 8008d08:	4929      	ldr	r1, [pc, #164]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d10:	f7fd f86c 	bl	8005dec <HAL_GetTick>
 8008d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d16:	e00a      	b.n	8008d2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d18:	f7fd f868 	bl	8005dec <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e03b      	b.n	8008da6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d2e:	4b20      	ldr	r3, [pc, #128]	; (8008db0 <HAL_RCC_ClockConfig+0x260>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d1ed      	bne.n	8008d18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d008      	beq.n	8008d5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d48:	4b1a      	ldr	r3, [pc, #104]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	4917      	ldr	r1, [pc, #92]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0308 	and.w	r3, r3, #8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d66:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	490f      	ldr	r1, [pc, #60]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d7a:	f000 f825 	bl	8008dc8 <HAL_RCC_GetSysClockFreq>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <HAL_RCC_ClockConfig+0x264>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	091b      	lsrs	r3, r3, #4
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	490c      	ldr	r1, [pc, #48]	; (8008dbc <HAL_RCC_ClockConfig+0x26c>)
 8008d8c:	5ccb      	ldrb	r3, [r1, r3]
 8008d8e:	f003 031f 	and.w	r3, r3, #31
 8008d92:	fa22 f303 	lsr.w	r3, r2, r3
 8008d96:	4a0a      	ldr	r2, [pc, #40]	; (8008dc0 <HAL_RCC_ClockConfig+0x270>)
 8008d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <HAL_RCC_ClockConfig+0x274>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fc ffd8 	bl	8005d54 <HAL_InitTick>
 8008da4:	4603      	mov	r3, r0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	40022000 	.word	0x40022000
 8008db4:	40021000 	.word	0x40021000
 8008db8:	04c4b400 	.word	0x04c4b400
 8008dbc:	0800c530 	.word	0x0800c530
 8008dc0:	20007868 	.word	0x20007868
 8008dc4:	2000786c 	.word	0x2000786c

08008dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008dce:	4b2c      	ldr	r3, [pc, #176]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f003 030c 	and.w	r3, r3, #12
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d102      	bne.n	8008de0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008dda:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	e047      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008de0:	4b27      	ldr	r3, [pc, #156]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f003 030c 	and.w	r3, r3, #12
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d102      	bne.n	8008df2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008dec:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008dee:	613b      	str	r3, [r7, #16]
 8008df0:	e03e      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008df2:	4b23      	ldr	r3, [pc, #140]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f003 030c 	and.w	r3, r3, #12
 8008dfa:	2b0c      	cmp	r3, #12
 8008dfc:	d136      	bne.n	8008e6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008dfe:	4b20      	ldr	r3, [pc, #128]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e08:	4b1d      	ldr	r3, [pc, #116]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	3301      	adds	r3, #1
 8008e14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d10c      	bne.n	8008e36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e1c:	4a19      	ldr	r2, [pc, #100]	; (8008e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e24:	4a16      	ldr	r2, [pc, #88]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e26:	68d2      	ldr	r2, [r2, #12]
 8008e28:	0a12      	lsrs	r2, r2, #8
 8008e2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e2e:	fb02 f303 	mul.w	r3, r2, r3
 8008e32:	617b      	str	r3, [r7, #20]
      break;
 8008e34:	e00c      	b.n	8008e50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e36:	4a13      	ldr	r2, [pc, #76]	; (8008e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e40:	68d2      	ldr	r2, [r2, #12]
 8008e42:	0a12      	lsrs	r2, r2, #8
 8008e44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e48:	fb02 f303 	mul.w	r3, r2, r3
 8008e4c:	617b      	str	r3, [r7, #20]
      break;
 8008e4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e50:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	0e5b      	lsrs	r3, r3, #25
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	e001      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008e70:	693b      	ldr	r3, [r7, #16]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40021000 	.word	0x40021000
 8008e84:	00f42400 	.word	0x00f42400

08008e88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e8c:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	20007868 	.word	0x20007868

08008ea0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ea6:	4b1e      	ldr	r3, [pc, #120]	; (8008f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008eb0:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	091b      	lsrs	r3, r3, #4
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d10c      	bne.n	8008ede <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ec4:	4a17      	ldr	r2, [pc, #92]	; (8008f24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ecc:	4a14      	ldr	r2, [pc, #80]	; (8008f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ece:	68d2      	ldr	r2, [r2, #12]
 8008ed0:	0a12      	lsrs	r2, r2, #8
 8008ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ed6:	fb02 f303 	mul.w	r3, r2, r3
 8008eda:	617b      	str	r3, [r7, #20]
    break;
 8008edc:	e00c      	b.n	8008ef8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ede:	4a11      	ldr	r2, [pc, #68]	; (8008f24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee6:	4a0e      	ldr	r2, [pc, #56]	; (8008f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ee8:	68d2      	ldr	r2, [r2, #12]
 8008eea:	0a12      	lsrs	r2, r2, #8
 8008eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ef0:	fb02 f303 	mul.w	r3, r2, r3
 8008ef4:	617b      	str	r3, [r7, #20]
    break;
 8008ef6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ef8:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	0e5b      	lsrs	r3, r3, #25
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	3301      	adds	r3, #1
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008f12:	687b      	ldr	r3, [r7, #4]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	371c      	adds	r7, #28
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	40021000 	.word	0x40021000
 8008f24:	00f42400 	.word	0x00f42400

08008f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f30:	2300      	movs	r3, #0
 8008f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f34:	2300      	movs	r3, #0
 8008f36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8098 	beq.w	8009076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f46:	2300      	movs	r3, #0
 8008f48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f4a:	4b43      	ldr	r3, [pc, #268]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f56:	4b40      	ldr	r3, [pc, #256]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5a:	4a3f      	ldr	r2, [pc, #252]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f60:	6593      	str	r3, [r2, #88]	; 0x58
 8008f62:	4b3d      	ldr	r3, [pc, #244]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f72:	4b3a      	ldr	r3, [pc, #232]	; (800905c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a39      	ldr	r2, [pc, #228]	; (800905c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f7e:	f7fc ff35 	bl	8005dec <HAL_GetTick>
 8008f82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f84:	e009      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f86:	f7fc ff31 	bl	8005dec <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d902      	bls.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	74fb      	strb	r3, [r7, #19]
        break;
 8008f98:	e005      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f9a:	4b30      	ldr	r3, [pc, #192]	; (800905c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0ef      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008fa6:	7cfb      	ldrb	r3, [r7, #19]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d159      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008fac:	4b2a      	ldr	r3, [pc, #168]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01e      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d019      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008fc8:	4b23      	ldr	r3, [pc, #140]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fd4:	4b20      	ldr	r3, [pc, #128]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fda:	4a1f      	ldr	r2, [pc, #124]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fe4:	4b1c      	ldr	r3, [pc, #112]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fea:	4a1b      	ldr	r2, [pc, #108]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ff4:	4a18      	ldr	r2, [pc, #96]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d016      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009006:	f7fc fef1 	bl	8005dec <HAL_GetTick>
 800900a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800900c:	e00b      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800900e:	f7fc feed 	bl	8005dec <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f241 3288 	movw	r2, #5000	; 0x1388
 800901c:	4293      	cmp	r3, r2
 800901e:	d902      	bls.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	74fb      	strb	r3, [r7, #19]
            break;
 8009024:	e006      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0ec      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009034:	7cfb      	ldrb	r3, [r7, #19]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800903a:	4b07      	ldr	r3, [pc, #28]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800903c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009048:	4903      	ldr	r1, [pc, #12]	; (8009058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800904a:	4313      	orrs	r3, r2
 800904c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009050:	e008      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009052:	7cfb      	ldrb	r3, [r7, #19]
 8009054:	74bb      	strb	r3, [r7, #18]
 8009056:	e005      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009058:	40021000 	.word	0x40021000
 800905c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009060:	7cfb      	ldrb	r3, [r7, #19]
 8009062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009064:	7c7b      	ldrb	r3, [r7, #17]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d105      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800906a:	4ba7      	ldr	r3, [pc, #668]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800906c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906e:	4aa6      	ldr	r2, [pc, #664]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009082:	4ba1      	ldr	r3, [pc, #644]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009088:	f023 0203 	bic.w	r2, r3, #3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	499d      	ldr	r1, [pc, #628]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090a4:	4b98      	ldr	r3, [pc, #608]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090aa:	f023 020c 	bic.w	r2, r3, #12
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	4995      	ldr	r1, [pc, #596]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80090c6:	4b90      	ldr	r3, [pc, #576]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	498c      	ldr	r1, [pc, #560]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00a      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80090e8:	4b87      	ldr	r3, [pc, #540]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	4984      	ldr	r1, [pc, #528]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0310 	and.w	r3, r3, #16
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800910a:	4b7f      	ldr	r3, [pc, #508]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800910c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	497b      	ldr	r1, [pc, #492]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800911a:	4313      	orrs	r3, r2
 800911c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0320 	and.w	r3, r3, #32
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00a      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800912c:	4b76      	ldr	r3, [pc, #472]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800912e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	4973      	ldr	r1, [pc, #460]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800913c:	4313      	orrs	r3, r2
 800913e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00a      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800914e:	4b6e      	ldr	r3, [pc, #440]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009154:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	496a      	ldr	r1, [pc, #424]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800915e:	4313      	orrs	r3, r2
 8009160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00a      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009170:	4b65      	ldr	r3, [pc, #404]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	4962      	ldr	r1, [pc, #392]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009180:	4313      	orrs	r3, r2
 8009182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00a      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009192:	4b5d      	ldr	r3, [pc, #372]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009198:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	4959      	ldr	r1, [pc, #356]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091b4:	4b54      	ldr	r3, [pc, #336]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	4951      	ldr	r1, [pc, #324]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d015      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091d6:	4b4c      	ldr	r3, [pc, #304]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	4948      	ldr	r1, [pc, #288]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091f4:	d105      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091f6:	4b44      	ldr	r3, [pc, #272]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	4a43      	ldr	r2, [pc, #268]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009200:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800920a:	2b00      	cmp	r3, #0
 800920c:	d015      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800920e:	4b3e      	ldr	r3, [pc, #248]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009214:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921c:	493a      	ldr	r1, [pc, #232]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800921e:	4313      	orrs	r3, r2
 8009220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800922c:	d105      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800922e:	4b36      	ldr	r3, [pc, #216]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	4a35      	ldr	r2, [pc, #212]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009238:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d015      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009246:	4b30      	ldr	r3, [pc, #192]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	492c      	ldr	r1, [pc, #176]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009256:	4313      	orrs	r3, r2
 8009258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009264:	d105      	bne.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009266:	4b28      	ldr	r3, [pc, #160]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	4a27      	ldr	r2, [pc, #156]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800926c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009270:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d015      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800927e:	4b22      	ldr	r3, [pc, #136]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009284:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928c:	491e      	ldr	r1, [pc, #120]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800928e:	4313      	orrs	r3, r2
 8009290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800929c:	d105      	bne.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800929e:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	4a19      	ldr	r2, [pc, #100]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092a8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d015      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092b6:	4b14      	ldr	r3, [pc, #80]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c4:	4910      	ldr	r1, [pc, #64]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092d4:	d105      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	4a0b      	ldr	r2, [pc, #44]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d018      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	4902      	ldr	r1, [pc, #8]	; (8009308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	e001      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009308:	40021000 	.word	0x40021000
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009312:	d105      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009314:	4b21      	ldr	r3, [pc, #132]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	4a20      	ldr	r2, [pc, #128]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800931a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800931e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d015      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800932e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009332:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933a:	4918      	ldr	r1, [pc, #96]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800933c:	4313      	orrs	r3, r2
 800933e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934a:	d105      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800934c:	4b13      	ldr	r3, [pc, #76]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	4a12      	ldr	r2, [pc, #72]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009356:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d015      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009364:	4b0d      	ldr	r3, [pc, #52]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800936a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009372:	490a      	ldr	r1, [pc, #40]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009374:	4313      	orrs	r3, r2
 8009376:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009382:	d105      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009384:	4b05      	ldr	r3, [pc, #20]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	4a04      	ldr	r2, [pc, #16]	; (800939c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800938a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800938e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009390:	7cbb      	ldrb	r3, [r7, #18]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	40021000 	.word	0x40021000

080093a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e049      	b.n	8009446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d106      	bne.n	80093cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7fc fbcc 	bl	8005b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3304      	adds	r3, #4
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f000 f878 	bl	80094d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009462:	2302      	movs	r3, #2
 8009464:	e031      	b.n	80094ca <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2202      	movs	r2, #2
 8009472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f8d5 	bl	8009628 <TIM_SlaveTimer_SetConfig>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d009      	beq.n	8009498 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e018      	b.n	80094ca <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094a6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094b6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a48      	ldr	r2, [pc, #288]	; (8009608 <TIM_Base_SetConfig+0x134>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d013      	beq.n	8009514 <TIM_Base_SetConfig+0x40>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f2:	d00f      	beq.n	8009514 <TIM_Base_SetConfig+0x40>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a45      	ldr	r2, [pc, #276]	; (800960c <TIM_Base_SetConfig+0x138>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00b      	beq.n	8009514 <TIM_Base_SetConfig+0x40>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a44      	ldr	r2, [pc, #272]	; (8009610 <TIM_Base_SetConfig+0x13c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d007      	beq.n	8009514 <TIM_Base_SetConfig+0x40>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a43      	ldr	r2, [pc, #268]	; (8009614 <TIM_Base_SetConfig+0x140>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d003      	beq.n	8009514 <TIM_Base_SetConfig+0x40>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a42      	ldr	r2, [pc, #264]	; (8009618 <TIM_Base_SetConfig+0x144>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d108      	bne.n	8009526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a37      	ldr	r2, [pc, #220]	; (8009608 <TIM_Base_SetConfig+0x134>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d01f      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009534:	d01b      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a34      	ldr	r2, [pc, #208]	; (800960c <TIM_Base_SetConfig+0x138>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d017      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a33      	ldr	r2, [pc, #204]	; (8009610 <TIM_Base_SetConfig+0x13c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d013      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a32      	ldr	r2, [pc, #200]	; (8009614 <TIM_Base_SetConfig+0x140>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00f      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a32      	ldr	r2, [pc, #200]	; (800961c <TIM_Base_SetConfig+0x148>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00b      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a31      	ldr	r2, [pc, #196]	; (8009620 <TIM_Base_SetConfig+0x14c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d007      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a30      	ldr	r2, [pc, #192]	; (8009624 <TIM_Base_SetConfig+0x150>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_Base_SetConfig+0x9a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a2b      	ldr	r2, [pc, #172]	; (8009618 <TIM_Base_SetConfig+0x144>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d108      	bne.n	8009580 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4313      	orrs	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a18      	ldr	r2, [pc, #96]	; (8009608 <TIM_Base_SetConfig+0x134>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d013      	beq.n	80095d4 <TIM_Base_SetConfig+0x100>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a19      	ldr	r2, [pc, #100]	; (8009614 <TIM_Base_SetConfig+0x140>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00f      	beq.n	80095d4 <TIM_Base_SetConfig+0x100>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a19      	ldr	r2, [pc, #100]	; (800961c <TIM_Base_SetConfig+0x148>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00b      	beq.n	80095d4 <TIM_Base_SetConfig+0x100>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a18      	ldr	r2, [pc, #96]	; (8009620 <TIM_Base_SetConfig+0x14c>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d007      	beq.n	80095d4 <TIM_Base_SetConfig+0x100>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a17      	ldr	r2, [pc, #92]	; (8009624 <TIM_Base_SetConfig+0x150>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d003      	beq.n	80095d4 <TIM_Base_SetConfig+0x100>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a12      	ldr	r2, [pc, #72]	; (8009618 <TIM_Base_SetConfig+0x144>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d103      	bne.n	80095dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d105      	bne.n	80095fa <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f023 0201 	bic.w	r2, r3, #1
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	611a      	str	r2, [r3, #16]
  }
}
 80095fa:	bf00      	nop
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40012c00 	.word	0x40012c00
 800960c:	40000400 	.word	0x40000400
 8009610:	40000800 	.word	0x40000800
 8009614:	40013400 	.word	0x40013400
 8009618:	40015000 	.word	0x40015000
 800961c:	40014000 	.word	0x40014000
 8009620:	40014400 	.word	0x40014400
 8009624:	40014800 	.word	0x40014800

08009628 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009648:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800965a:	f023 0307 	bic.w	r3, r3, #7
 800965e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	4a4e      	ldr	r2, [pc, #312]	; (80097b0 <TIM_SlaveTimer_SetConfig+0x188>)
 8009678:	4293      	cmp	r3, r2
 800967a:	f000 8092 	beq.w	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 800967e:	4a4c      	ldr	r2, [pc, #304]	; (80097b0 <TIM_SlaveTimer_SetConfig+0x188>)
 8009680:	4293      	cmp	r3, r2
 8009682:	f200 808b 	bhi.w	800979c <TIM_SlaveTimer_SetConfig+0x174>
 8009686:	4a4b      	ldr	r2, [pc, #300]	; (80097b4 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009688:	4293      	cmp	r3, r2
 800968a:	f000 808a 	beq.w	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 800968e:	4a49      	ldr	r2, [pc, #292]	; (80097b4 <TIM_SlaveTimer_SetConfig+0x18c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	f200 8083 	bhi.w	800979c <TIM_SlaveTimer_SetConfig+0x174>
 8009696:	4a48      	ldr	r2, [pc, #288]	; (80097b8 <TIM_SlaveTimer_SetConfig+0x190>)
 8009698:	4293      	cmp	r3, r2
 800969a:	f000 8082 	beq.w	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 800969e:	4a46      	ldr	r2, [pc, #280]	; (80097b8 <TIM_SlaveTimer_SetConfig+0x190>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d87b      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096a4:	4a45      	ldr	r2, [pc, #276]	; (80097bc <TIM_SlaveTimer_SetConfig+0x194>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d07b      	beq.n	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 80096aa:	4a44      	ldr	r2, [pc, #272]	; (80097bc <TIM_SlaveTimer_SetConfig+0x194>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d875      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096b0:	4a43      	ldr	r2, [pc, #268]	; (80097c0 <TIM_SlaveTimer_SetConfig+0x198>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d075      	beq.n	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 80096b6:	4a42      	ldr	r2, [pc, #264]	; (80097c0 <TIM_SlaveTimer_SetConfig+0x198>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d86f      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80096c0:	d06f      	beq.n	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 80096c2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80096c6:	d869      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096c8:	2b70      	cmp	r3, #112	; 0x70
 80096ca:	d01a      	beq.n	8009702 <TIM_SlaveTimer_SetConfig+0xda>
 80096cc:	2b70      	cmp	r3, #112	; 0x70
 80096ce:	d865      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096d0:	2b60      	cmp	r3, #96	; 0x60
 80096d2:	d059      	beq.n	8009788 <TIM_SlaveTimer_SetConfig+0x160>
 80096d4:	2b60      	cmp	r3, #96	; 0x60
 80096d6:	d861      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096d8:	2b50      	cmp	r3, #80	; 0x50
 80096da:	d04b      	beq.n	8009774 <TIM_SlaveTimer_SetConfig+0x14c>
 80096dc:	2b50      	cmp	r3, #80	; 0x50
 80096de:	d85d      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096e0:	2b40      	cmp	r3, #64	; 0x40
 80096e2:	d019      	beq.n	8009718 <TIM_SlaveTimer_SetConfig+0xf0>
 80096e4:	2b40      	cmp	r3, #64	; 0x40
 80096e6:	d859      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096e8:	2b30      	cmp	r3, #48	; 0x30
 80096ea:	d05a      	beq.n	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 80096ec:	2b30      	cmp	r3, #48	; 0x30
 80096ee:	d855      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d056      	beq.n	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 80096f4:	2b20      	cmp	r3, #32
 80096f6:	d851      	bhi.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d052      	beq.n	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 80096fc:	2b10      	cmp	r3, #16
 80096fe:	d050      	beq.n	80097a2 <TIM_SlaveTimer_SetConfig+0x17a>
 8009700:	e04c      	b.n	800979c <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009712:	f000 f8b6 	bl	8009882 <TIM_ETR_SetConfig>
      break;
 8009716:	e045      	b.n	80097a4 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b05      	cmp	r3, #5
 800971e:	d004      	beq.n	800972a <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009724:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009728:	d101      	bne.n	800972e <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e03b      	b.n	80097a6 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6a1a      	ldr	r2, [r3, #32]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0201 	bic.w	r2, r2, #1
 8009744:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009754:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	4313      	orrs	r3, r2
 8009760:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	621a      	str	r2, [r3, #32]
      break;
 8009772:	e017      	b.n	80097a4 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009780:	461a      	mov	r2, r3
 8009782:	f000 f81f 	bl	80097c4 <TIM_TI1_ConfigInputStage>
      break;
 8009786:	e00d      	b.n	80097a4 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009794:	461a      	mov	r2, r3
 8009796:	f000 f844 	bl	8009822 <TIM_TI2_ConfigInputStage>
      break;
 800979a:	e003      	b.n	80097a4 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	75fb      	strb	r3, [r7, #23]
      break;
 80097a0:	e000      	b.n	80097a4 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 80097a2:	bf00      	nop
  }

  return status;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	00100070 	.word	0x00100070
 80097b4:	00100050 	.word	0x00100050
 80097b8:	00100040 	.word	0x00100040
 80097bc:	00100030 	.word	0x00100030
 80097c0:	00100020 	.word	0x00100020

080097c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	f023 0201 	bic.w	r2, r3, #1
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	011b      	lsls	r3, r3, #4
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f023 030a 	bic.w	r3, r3, #10
 8009800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	621a      	str	r2, [r3, #32]
}
 8009816:	bf00      	nop
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009822:	b480      	push	{r7}
 8009824:	b087      	sub	sp, #28
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	f023 0210 	bic.w	r2, r3, #16
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800984c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	031b      	lsls	r3, r3, #12
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800985e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	621a      	str	r2, [r3, #32]
}
 8009876:	bf00      	nop
 8009878:	371c      	adds	r7, #28
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009882:	b480      	push	{r7}
 8009884:	b087      	sub	sp, #28
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800989c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	021a      	lsls	r2, r3, #8
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	431a      	orrs	r2, r3
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	609a      	str	r2, [r3, #8]
}
 80098b6:	bf00      	nop
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
	...

080098c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098d8:	2302      	movs	r3, #2
 80098da:	e06f      	b.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a31      	ldr	r2, [pc, #196]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d009      	beq.n	800991a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a30      	ldr	r2, [pc, #192]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d004      	beq.n	800991a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a2e      	ldr	r2, [pc, #184]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d108      	bne.n	800992c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009920:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a1e      	ldr	r2, [pc, #120]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d01d      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800995c:	d018      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a1c      	ldr	r2, [pc, #112]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d013      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a1a      	ldr	r2, [pc, #104]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00e      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a15      	ldr	r2, [pc, #84]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d009      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a16      	ldr	r2, [pc, #88]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d004      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a11      	ldr	r2, [pc, #68]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d10c      	bne.n	80099aa <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009996:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	40012c00 	.word	0x40012c00
 80099cc:	40013400 	.word	0x40013400
 80099d0:	40015000 	.word	0x40015000
 80099d4:	40000400 	.word	0x40000400
 80099d8:	40000800 	.word	0x40000800
 80099dc:	40014000 	.word	0x40014000

080099e0 <arm_rfft_32_fast_init_f32>:
 80099e0:	b178      	cbz	r0, 8009a02 <arm_rfft_32_fast_init_f32+0x22>
 80099e2:	b430      	push	{r4, r5}
 80099e4:	4908      	ldr	r1, [pc, #32]	; (8009a08 <arm_rfft_32_fast_init_f32+0x28>)
 80099e6:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <arm_rfft_32_fast_init_f32+0x2c>)
 80099e8:	2310      	movs	r3, #16
 80099ea:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80099ee:	8003      	strh	r3, [r0, #0]
 80099f0:	2520      	movs	r5, #32
 80099f2:	2414      	movs	r4, #20
 80099f4:	4b06      	ldr	r3, [pc, #24]	; (8009a10 <arm_rfft_32_fast_init_f32+0x30>)
 80099f6:	8205      	strh	r5, [r0, #16]
 80099f8:	8184      	strh	r4, [r0, #12]
 80099fa:	6143      	str	r3, [r0, #20]
 80099fc:	bc30      	pop	{r4, r5}
 80099fe:	2000      	movs	r0, #0
 8009a00:	4770      	bx	lr
 8009a02:	f04f 30ff 	mov.w	r0, #4294967295
 8009a06:	4770      	bx	lr
 8009a08:	0800d4f0 	.word	0x0800d4f0
 8009a0c:	08011e28 	.word	0x08011e28
 8009a10:	0801aba8 	.word	0x0801aba8

08009a14 <arm_rfft_64_fast_init_f32>:
 8009a14:	b178      	cbz	r0, 8009a36 <arm_rfft_64_fast_init_f32+0x22>
 8009a16:	b430      	push	{r4, r5}
 8009a18:	4908      	ldr	r1, [pc, #32]	; (8009a3c <arm_rfft_64_fast_init_f32+0x28>)
 8009a1a:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <arm_rfft_64_fast_init_f32+0x2c>)
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009a22:	8003      	strh	r3, [r0, #0]
 8009a24:	2540      	movs	r5, #64	; 0x40
 8009a26:	2430      	movs	r4, #48	; 0x30
 8009a28:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <arm_rfft_64_fast_init_f32+0x30>)
 8009a2a:	8205      	strh	r5, [r0, #16]
 8009a2c:	8184      	strh	r4, [r0, #12]
 8009a2e:	6143      	str	r3, [r0, #20]
 8009a30:	bc30      	pop	{r4, r5}
 8009a32:	2000      	movs	r0, #0
 8009a34:	4770      	bx	lr
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	4770      	bx	lr
 8009a3c:	0800f648 	.word	0x0800f648
 8009a40:	080166a8 	.word	0x080166a8
 8009a44:	0801f428 	.word	0x0801f428

08009a48 <arm_rfft_256_fast_init_f32>:
 8009a48:	b180      	cbz	r0, 8009a6c <arm_rfft_256_fast_init_f32+0x24>
 8009a4a:	b430      	push	{r4, r5}
 8009a4c:	4909      	ldr	r1, [pc, #36]	; (8009a74 <arm_rfft_256_fast_init_f32+0x2c>)
 8009a4e:	4a0a      	ldr	r2, [pc, #40]	; (8009a78 <arm_rfft_256_fast_init_f32+0x30>)
 8009a50:	2380      	movs	r3, #128	; 0x80
 8009a52:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009a56:	8003      	strh	r3, [r0, #0]
 8009a58:	f44f 7580 	mov.w	r5, #256	; 0x100
 8009a5c:	24d0      	movs	r4, #208	; 0xd0
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <arm_rfft_256_fast_init_f32+0x34>)
 8009a60:	8205      	strh	r5, [r0, #16]
 8009a62:	8184      	strh	r4, [r0, #12]
 8009a64:	6143      	str	r3, [r0, #20]
 8009a66:	bc30      	pop	{r4, r5}
 8009a68:	2000      	movs	r0, #0
 8009a6a:	4770      	bx	lr
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	0800d350 	.word	0x0800d350
 8009a78:	08011a28 	.word	0x08011a28
 8009a7c:	0801a7a8 	.word	0x0801a7a8

08009a80 <arm_rfft_512_fast_init_f32>:
 8009a80:	b190      	cbz	r0, 8009aa8 <arm_rfft_512_fast_init_f32+0x28>
 8009a82:	b430      	push	{r4, r5}
 8009a84:	490a      	ldr	r1, [pc, #40]	; (8009ab0 <arm_rfft_512_fast_init_f32+0x30>)
 8009a86:	4a0b      	ldr	r2, [pc, #44]	; (8009ab4 <arm_rfft_512_fast_init_f32+0x34>)
 8009a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a8c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009a90:	8003      	strh	r3, [r0, #0]
 8009a92:	f44f 7500 	mov.w	r5, #512	; 0x200
 8009a96:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8009a9a:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <arm_rfft_512_fast_init_f32+0x38>)
 8009a9c:	8205      	strh	r5, [r0, #16]
 8009a9e:	8184      	strh	r4, [r0, #12]
 8009aa0:	6143      	str	r3, [r0, #20]
 8009aa2:	bc30      	pop	{r4, r5}
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	4770      	bx	lr
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	0800f2d8 	.word	0x0800f2d8
 8009ab4:	08015ea8 	.word	0x08015ea8
 8009ab8:	0801ec28 	.word	0x0801ec28

08009abc <arm_rfft_1024_fast_init_f32>:
 8009abc:	b190      	cbz	r0, 8009ae4 <arm_rfft_1024_fast_init_f32+0x28>
 8009abe:	b430      	push	{r4, r5}
 8009ac0:	490a      	ldr	r1, [pc, #40]	; (8009aec <arm_rfft_1024_fast_init_f32+0x30>)
 8009ac2:	4a0b      	ldr	r2, [pc, #44]	; (8009af0 <arm_rfft_1024_fast_init_f32+0x34>)
 8009ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ac8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009acc:	8003      	strh	r3, [r0, #0]
 8009ace:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009ad2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <arm_rfft_1024_fast_init_f32+0x38>)
 8009ad8:	8205      	strh	r5, [r0, #16]
 8009ada:	8184      	strh	r4, [r0, #12]
 8009adc:	6143      	str	r3, [r0, #20]
 8009ade:	bc30      	pop	{r4, r5}
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	4770      	bx	lr
 8009ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	0800f6a8 	.word	0x0800f6a8
 8009af0:	080167a8 	.word	0x080167a8
 8009af4:	080177a8 	.word	0x080177a8

08009af8 <arm_rfft_2048_fast_init_f32>:
 8009af8:	b190      	cbz	r0, 8009b20 <arm_rfft_2048_fast_init_f32+0x28>
 8009afa:	b430      	push	{r4, r5}
 8009afc:	490a      	ldr	r1, [pc, #40]	; (8009b28 <arm_rfft_2048_fast_init_f32+0x30>)
 8009afe:	4a0b      	ldr	r2, [pc, #44]	; (8009b2c <arm_rfft_2048_fast_init_f32+0x34>)
 8009b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b04:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009b08:	8003      	strh	r3, [r0, #0]
 8009b0a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009b0e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8009b12:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <arm_rfft_2048_fast_init_f32+0x38>)
 8009b14:	8205      	strh	r5, [r0, #16]
 8009b16:	8184      	strh	r4, [r0, #12]
 8009b18:	6143      	str	r3, [r0, #20]
 8009b1a:	bc30      	pop	{r4, r5}
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	4770      	bx	lr
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	0800c540 	.word	0x0800c540
 8009b2c:	0800fa28 	.word	0x0800fa28
 8009b30:	080187a8 	.word	0x080187a8

08009b34 <arm_rfft_4096_fast_init_f32>:
 8009b34:	b190      	cbz	r0, 8009b5c <arm_rfft_4096_fast_init_f32+0x28>
 8009b36:	b430      	push	{r4, r5}
 8009b38:	490a      	ldr	r1, [pc, #40]	; (8009b64 <arm_rfft_4096_fast_init_f32+0x30>)
 8009b3a:	4a0b      	ldr	r2, [pc, #44]	; (8009b68 <arm_rfft_4096_fast_init_f32+0x34>)
 8009b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b40:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009b44:	8003      	strh	r3, [r0, #0]
 8009b46:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8009b4a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8009b4e:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <arm_rfft_4096_fast_init_f32+0x38>)
 8009b50:	8205      	strh	r5, [r0, #16]
 8009b52:	8184      	strh	r4, [r0, #12]
 8009b54:	6143      	str	r3, [r0, #20]
 8009b56:	bc30      	pop	{r4, r5}
 8009b58:	2000      	movs	r0, #0
 8009b5a:	4770      	bx	lr
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	0800d518 	.word	0x0800d518
 8009b68:	08011ea8 	.word	0x08011ea8
 8009b6c:	0801ac28 	.word	0x0801ac28

08009b70 <arm_rfft_fast_init_f32>:
 8009b70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b74:	d01f      	beq.n	8009bb6 <arm_rfft_fast_init_f32+0x46>
 8009b76:	d90b      	bls.n	8009b90 <arm_rfft_fast_init_f32+0x20>
 8009b78:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009b7c:	d019      	beq.n	8009bb2 <arm_rfft_fast_init_f32+0x42>
 8009b7e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009b82:	d012      	beq.n	8009baa <arm_rfft_fast_init_f32+0x3a>
 8009b84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009b88:	d00d      	beq.n	8009ba6 <arm_rfft_fast_init_f32+0x36>
 8009b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8e:	4770      	bx	lr
 8009b90:	2940      	cmp	r1, #64	; 0x40
 8009b92:	d00c      	beq.n	8009bae <arm_rfft_fast_init_f32+0x3e>
 8009b94:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009b98:	d003      	beq.n	8009ba2 <arm_rfft_fast_init_f32+0x32>
 8009b9a:	2920      	cmp	r1, #32
 8009b9c:	d1f5      	bne.n	8009b8a <arm_rfft_fast_init_f32+0x1a>
 8009b9e:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <arm_rfft_fast_init_f32+0x4c>)
 8009ba0:	4718      	bx	r3
 8009ba2:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <arm_rfft_fast_init_f32+0x50>)
 8009ba4:	4718      	bx	r3
 8009ba6:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <arm_rfft_fast_init_f32+0x54>)
 8009ba8:	4718      	bx	r3
 8009baa:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <arm_rfft_fast_init_f32+0x58>)
 8009bac:	4718      	bx	r3
 8009bae:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <arm_rfft_fast_init_f32+0x5c>)
 8009bb0:	e7f6      	b.n	8009ba0 <arm_rfft_fast_init_f32+0x30>
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <arm_rfft_fast_init_f32+0x60>)
 8009bb4:	e7f4      	b.n	8009ba0 <arm_rfft_fast_init_f32+0x30>
 8009bb6:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <arm_rfft_fast_init_f32+0x64>)
 8009bb8:	e7f2      	b.n	8009ba0 <arm_rfft_fast_init_f32+0x30>
 8009bba:	bf00      	nop
 8009bbc:	080099e1 	.word	0x080099e1
 8009bc0:	08009a49 	.word	0x08009a49
 8009bc4:	08009abd 	.word	0x08009abd
 8009bc8:	08009b35 	.word	0x08009b35
 8009bcc:	08009a15 	.word	0x08009a15
 8009bd0:	08009af9 	.word	0x08009af9
 8009bd4:	08009a81 	.word	0x08009a81

08009bd8 <stage_rfft_f32>:
 8009bd8:	b410      	push	{r4}
 8009bda:	edd1 7a00 	vldr	s15, [r1]
 8009bde:	ed91 7a01 	vldr	s14, [r1, #4]
 8009be2:	8804      	ldrh	r4, [r0, #0]
 8009be4:	6940      	ldr	r0, [r0, #20]
 8009be6:	ee37 7a07 	vadd.f32	s14, s14, s14
 8009bea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009bee:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009bf2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009bf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bfa:	3c01      	subs	r4, #1
 8009bfc:	ee26 7a84 	vmul.f32	s14, s13, s8
 8009c00:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009c04:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8009c08:	ed82 7a00 	vstr	s14, [r2]
 8009c0c:	edc2 7a01 	vstr	s15, [r2, #4]
 8009c10:	3010      	adds	r0, #16
 8009c12:	3210      	adds	r2, #16
 8009c14:	3b08      	subs	r3, #8
 8009c16:	3110      	adds	r1, #16
 8009c18:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009c1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009c20:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009c24:	edd3 4a03 	vldr	s9, [r3, #12]
 8009c28:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009c2c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009c30:	ee77 5a45 	vsub.f32	s11, s14, s10
 8009c34:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009c38:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009c3c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009c40:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009c44:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009c48:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009c4c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009c50:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009c54:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009c58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009c5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c60:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009c64:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009c68:	3c01      	subs	r4, #1
 8009c6a:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009c6e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009c72:	f1a3 0308 	sub.w	r3, r3, #8
 8009c76:	f101 0108 	add.w	r1, r1, #8
 8009c7a:	f100 0008 	add.w	r0, r0, #8
 8009c7e:	f102 0208 	add.w	r2, r2, #8
 8009c82:	d1c9      	bne.n	8009c18 <stage_rfft_f32+0x40>
 8009c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop

08009c8c <merge_rfft_f32>:
 8009c8c:	b410      	push	{r4}
 8009c8e:	edd1 7a00 	vldr	s15, [r1]
 8009c92:	edd1 6a01 	vldr	s13, [r1, #4]
 8009c96:	8804      	ldrh	r4, [r0, #0]
 8009c98:	6940      	ldr	r0, [r0, #20]
 8009c9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009c9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ca2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009ca6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009caa:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009cae:	3c01      	subs	r4, #1
 8009cb0:	ed82 7a00 	vstr	s14, [r2]
 8009cb4:	edc2 7a01 	vstr	s15, [r2, #4]
 8009cb8:	b3dc      	cbz	r4, 8009d32 <merge_rfft_f32+0xa6>
 8009cba:	00e3      	lsls	r3, r4, #3
 8009cbc:	3b08      	subs	r3, #8
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3010      	adds	r0, #16
 8009cc2:	3210      	adds	r2, #16
 8009cc4:	3110      	adds	r1, #16
 8009cc6:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009cca:	ed93 7a02 	vldr	s14, [r3, #8]
 8009cce:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009cd2:	edd3 4a03 	vldr	s9, [r3, #12]
 8009cd6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009cda:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009cde:	ee75 5a47 	vsub.f32	s11, s10, s14
 8009ce2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009ce6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009cea:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009cee:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009cf2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009cf6:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009cfa:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009cfe:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009d02:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009d06:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009d0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d0e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009d12:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009d16:	3c01      	subs	r4, #1
 8009d18:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009d1c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009d20:	f1a3 0308 	sub.w	r3, r3, #8
 8009d24:	f101 0108 	add.w	r1, r1, #8
 8009d28:	f100 0008 	add.w	r0, r0, #8
 8009d2c:	f102 0208 	add.w	r2, r2, #8
 8009d30:	d1c9      	bne.n	8009cc6 <merge_rfft_f32+0x3a>
 8009d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <arm_rfft_fast_f32>:
 8009d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	8a05      	ldrh	r5, [r0, #16]
 8009d3e:	086d      	lsrs	r5, r5, #1
 8009d40:	8005      	strh	r5, [r0, #0]
 8009d42:	4604      	mov	r4, r0
 8009d44:	4616      	mov	r6, r2
 8009d46:	461d      	mov	r5, r3
 8009d48:	b14b      	cbz	r3, 8009d5e <arm_rfft_fast_f32+0x26>
 8009d4a:	f7ff ff9f 	bl	8009c8c <merge_rfft_f32>
 8009d4e:	462a      	mov	r2, r5
 8009d50:	4631      	mov	r1, r6
 8009d52:	4620      	mov	r0, r4
 8009d54:	2301      	movs	r3, #1
 8009d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5a:	f000 bb33 	b.w	800a3c4 <arm_cfft_f32>
 8009d5e:	460f      	mov	r7, r1
 8009d60:	461a      	mov	r2, r3
 8009d62:	2301      	movs	r3, #1
 8009d64:	f000 fb2e 	bl	800a3c4 <arm_cfft_f32>
 8009d68:	4632      	mov	r2, r6
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d72:	f7ff bf31 	b.w	8009bd8 <stage_rfft_f32>
 8009d76:	bf00      	nop

08009d78 <arm_cfft_radix8by2_f32>:
 8009d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7c:	ed2d 8b08 	vpush	{d8-d11}
 8009d80:	4607      	mov	r7, r0
 8009d82:	4608      	mov	r0, r1
 8009d84:	f8b7 c000 	ldrh.w	ip, [r7]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8009d8e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009d92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009d96:	f000 80b0 	beq.w	8009efa <arm_cfft_radix8by2_f32+0x182>
 8009d9a:	008c      	lsls	r4, r1, #2
 8009d9c:	3410      	adds	r4, #16
 8009d9e:	f100 0310 	add.w	r3, r0, #16
 8009da2:	1906      	adds	r6, r0, r4
 8009da4:	3210      	adds	r2, #16
 8009da6:	4444      	add	r4, r8
 8009da8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009dac:	f108 0510 	add.w	r5, r8, #16
 8009db0:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009db4:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009db8:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009dbc:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009dc0:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009dc4:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009dc8:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009dcc:	ed15 0a02 	vldr	s0, [r5, #-8]
 8009dd0:	ed55 0a01 	vldr	s1, [r5, #-4]
 8009dd4:	ed56 6a04 	vldr	s13, [r6, #-16]
 8009dd8:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009ddc:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009de0:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009de4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009de8:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009dec:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009df0:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009df4:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009df8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009dfc:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009e00:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009e04:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009e08:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009e0c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009e10:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009e14:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009e18:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009e1c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009e20:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009e24:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009e28:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009e2c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009e30:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009e34:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009e38:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009e3c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009e40:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009e44:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009e48:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009e4c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009e50:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009e54:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009e58:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009e5c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009e60:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009e64:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009e68:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009e6c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009e70:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009e74:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009e78:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009e7c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009e80:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009e84:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009e88:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009e8c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8009e90:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009e94:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009e98:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009e9c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009ea0:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009ea4:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009ea8:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009eac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009eb0:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009eb4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009eb8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009ebc:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009ec0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009ec4:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009ec8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009ecc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009ed0:	3310      	adds	r3, #16
 8009ed2:	4563      	cmp	r3, ip
 8009ed4:	ed45 5a02 	vstr	s11, [r5, #-8]
 8009ed8:	f106 0610 	add.w	r6, r6, #16
 8009edc:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009ee0:	f102 0210 	add.w	r2, r2, #16
 8009ee4:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009ee8:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009eec:	f105 0510 	add.w	r5, r5, #16
 8009ef0:	f104 0410 	add.w	r4, r4, #16
 8009ef4:	f47f af5c 	bne.w	8009db0 <arm_cfft_radix8by2_f32+0x38>
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	b28c      	uxth	r4, r1
 8009efc:	4621      	mov	r1, r4
 8009efe:	2302      	movs	r3, #2
 8009f00:	f000 fec2 	bl	800ac88 <arm_radix8_butterfly_f32>
 8009f04:	ecbd 8b08 	vpop	{d8-d11}
 8009f08:	4621      	mov	r1, r4
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	4640      	mov	r0, r8
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	f000 beb8 	b.w	800ac88 <arm_radix8_butterfly_f32>

08009f18 <arm_cfft_radix8by4_f32>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	ed2d 8b0a 	vpush	{d8-d12}
 8009f20:	b08d      	sub	sp, #52	; 0x34
 8009f22:	460d      	mov	r5, r1
 8009f24:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f26:	8801      	ldrh	r1, [r0, #0]
 8009f28:	6842      	ldr	r2, [r0, #4]
 8009f2a:	900a      	str	r0, [sp, #40]	; 0x28
 8009f2c:	0849      	lsrs	r1, r1, #1
 8009f2e:	008b      	lsls	r3, r1, #2
 8009f30:	18ee      	adds	r6, r5, r3
 8009f32:	18f0      	adds	r0, r6, r3
 8009f34:	edd0 5a00 	vldr	s11, [r0]
 8009f38:	edd5 7a00 	vldr	s15, [r5]
 8009f3c:	ed96 7a00 	vldr	s14, [r6]
 8009f40:	edd0 3a01 	vldr	s7, [r0, #4]
 8009f44:	ed96 4a01 	vldr	s8, [r6, #4]
 8009f48:	ed95 5a01 	vldr	s10, [r5, #4]
 8009f4c:	9008      	str	r0, [sp, #32]
 8009f4e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8009f52:	18c7      	adds	r7, r0, r3
 8009f54:	edd7 4a00 	vldr	s9, [r7]
 8009f58:	ed97 3a01 	vldr	s6, [r7, #4]
 8009f5c:	9701      	str	r7, [sp, #4]
 8009f5e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8009f62:	462c      	mov	r4, r5
 8009f64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009f68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009f6c:	ee16 ca90 	vmov	ip, s13
 8009f70:	f844 cb08 	str.w	ip, [r4], #8
 8009f74:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009f78:	edd6 5a01 	vldr	s11, [r6, #4]
 8009f7c:	edd7 2a01 	vldr	s5, [r7, #4]
 8009f80:	9404      	str	r4, [sp, #16]
 8009f82:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009f86:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009f8a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009f8e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009f92:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009f96:	0849      	lsrs	r1, r1, #1
 8009f98:	f102 0e08 	add.w	lr, r2, #8
 8009f9c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009fa0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009fa4:	9109      	str	r1, [sp, #36]	; 0x24
 8009fa6:	ee35 4a47 	vsub.f32	s8, s10, s14
 8009faa:	f1a1 0902 	sub.w	r9, r1, #2
 8009fae:	f8cd e00c 	str.w	lr, [sp, #12]
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	ee13 ea90 	vmov	lr, s7
 8009fb8:	ee36 6a64 	vsub.f32	s12, s12, s9
 8009fbc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	edc5 5a01 	vstr	s11, [r5, #4]
 8009fc6:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009fca:	f841 eb08 	str.w	lr, [r1], #8
 8009fce:	ee34 5a24 	vadd.f32	s10, s8, s9
 8009fd2:	ee16 ea10 	vmov	lr, s12
 8009fd6:	ed86 5a01 	vstr	s10, [r6, #4]
 8009fda:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009fde:	f844 eb08 	str.w	lr, [r4], #8
 8009fe2:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009fe6:	edc0 6a01 	vstr	s13, [r0, #4]
 8009fea:	9405      	str	r4, [sp, #20]
 8009fec:	4604      	mov	r4, r0
 8009fee:	ee17 0a90 	vmov	r0, s15
 8009ff2:	9106      	str	r1, [sp, #24]
 8009ff4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009ff8:	f102 0110 	add.w	r1, r2, #16
 8009ffc:	46bc      	mov	ip, r7
 8009ffe:	9100      	str	r1, [sp, #0]
 800a000:	f847 0b08 	str.w	r0, [r7], #8
 800a004:	f102 0118 	add.w	r1, r2, #24
 800a008:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800a00c:	9102      	str	r1, [sp, #8]
 800a00e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a012:	9007      	str	r0, [sp, #28]
 800a014:	f000 8134 	beq.w	800a280 <arm_cfft_radix8by4_f32+0x368>
 800a018:	f102 0920 	add.w	r9, r2, #32
 800a01c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a020:	9a01      	ldr	r2, [sp, #4]
 800a022:	f8dd a000 	ldr.w	sl, [sp]
 800a026:	3b0c      	subs	r3, #12
 800a028:	4683      	mov	fp, r0
 800a02a:	4463      	add	r3, ip
 800a02c:	f105 0e10 	add.w	lr, r5, #16
 800a030:	f1a4 010c 	sub.w	r1, r4, #12
 800a034:	f104 0510 	add.w	r5, r4, #16
 800a038:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a03c:	f1a2 040c 	sub.w	r4, r2, #12
 800a040:	f106 0010 	add.w	r0, r6, #16
 800a044:	3210      	adds	r2, #16
 800a046:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800a04a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a04e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a052:	ed52 1a02 	vldr	s3, [r2, #-8]
 800a056:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a05a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800a05e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800a062:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a066:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a06a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800a06e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800a072:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a076:	ee37 7a21 	vadd.f32	s14, s14, s3
 800a07a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a07e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800a082:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a086:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a08a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a08e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800a092:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a096:	ee70 3a67 	vsub.f32	s7, s0, s15
 800a09a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800a09e:	ed94 7a02 	vldr	s14, [r4, #8]
 800a0a2:	ed9c 2a02 	vldr	s4, [ip, #8]
 800a0a6:	ed91 ba02 	vldr	s22, [r1, #8]
 800a0aa:	edd3 9a02 	vldr	s19, [r3, #8]
 800a0ae:	edd4 2a01 	vldr	s5, [r4, #4]
 800a0b2:	ed9c 9a01 	vldr	s18, [ip, #4]
 800a0b6:	ed93 5a01 	vldr	s10, [r3, #4]
 800a0ba:	edd1 0a01 	vldr	s1, [r1, #4]
 800a0be:	ee72 6a07 	vadd.f32	s13, s4, s14
 800a0c2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800a0c6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800a0ca:	ee79 4a22 	vadd.f32	s9, s18, s5
 800a0ce:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800a0d2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800a0d6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800a0da:	ed91 7a01 	vldr	s14, [r1, #4]
 800a0de:	edd3 8a01 	vldr	s17, [r3, #4]
 800a0e2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a0e6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800a0ea:	ee37 7a28 	vadd.f32	s14, s14, s17
 800a0ee:	ee32 9a60 	vsub.f32	s18, s4, s1
 800a0f2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a0f6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800a0fa:	ed1a aa02 	vldr	s20, [sl, #-8]
 800a0fe:	ee73 8a22 	vadd.f32	s17, s6, s5
 800a102:	ee39 9a05 	vadd.f32	s18, s18, s10
 800a106:	ee7a aac1 	vsub.f32	s21, s21, s2
 800a10a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a10e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800a112:	ee69 ba07 	vmul.f32	s23, s18, s14
 800a116:	ee6a aa87 	vmul.f32	s21, s21, s14
 800a11a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800a11e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800a122:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800a126:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800a12a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a12e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800a132:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a136:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800a13a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a13e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800a142:	ee76 6acb 	vsub.f32	s13, s13, s22
 800a146:	ee36 6a48 	vsub.f32	s12, s12, s16
 800a14a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800a14e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800a152:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a156:	edc1 8a01 	vstr	s17, [r1, #4]
 800a15a:	ed81 aa02 	vstr	s20, [r1, #8]
 800a15e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800a162:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800a166:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800a16a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800a16e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800a172:	ee36 6a41 	vsub.f32	s12, s12, s2
 800a176:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800a17a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800a17e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800a182:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a186:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a18a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a18e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a192:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800a196:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a19a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a19e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800a1a2:	ee79 3a29 	vadd.f32	s7, s18, s19
 800a1a6:	ee75 6a60 	vsub.f32	s13, s10, s1
 800a1aa:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800a1ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a1b2:	ed45 3a02 	vstr	s7, [r5, #-8]
 800a1b6:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a1ba:	ed84 7a01 	vstr	s14, [r4, #4]
 800a1be:	ed84 4a02 	vstr	s8, [r4, #8]
 800a1c2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800a1c6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800a1ca:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800a1ce:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800a1d2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a1d6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800a1da:	ee67 2a26 	vmul.f32	s5, s14, s13
 800a1de:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a1e2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a1e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a1ea:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a1ee:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a1f2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a1f6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a1fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a1fe:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a202:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a206:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a20a:	f1bb 0b01 	subs.w	fp, fp, #1
 800a20e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a212:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a216:	f10e 0e08 	add.w	lr, lr, #8
 800a21a:	ed83 3a02 	vstr	s6, [r3, #8]
 800a21e:	ed83 7a01 	vstr	s14, [r3, #4]
 800a222:	f1ac 0c08 	sub.w	ip, ip, #8
 800a226:	f10a 0a08 	add.w	sl, sl, #8
 800a22a:	f100 0008 	add.w	r0, r0, #8
 800a22e:	f1a1 0108 	sub.w	r1, r1, #8
 800a232:	f109 0910 	add.w	r9, r9, #16
 800a236:	f105 0508 	add.w	r5, r5, #8
 800a23a:	f1a4 0408 	sub.w	r4, r4, #8
 800a23e:	f108 0818 	add.w	r8, r8, #24
 800a242:	f102 0208 	add.w	r2, r2, #8
 800a246:	f1a3 0308 	sub.w	r3, r3, #8
 800a24a:	f47f aefc 	bne.w	800a046 <arm_cfft_radix8by4_f32+0x12e>
 800a24e:	9907      	ldr	r1, [sp, #28]
 800a250:	9800      	ldr	r0, [sp, #0]
 800a252:	00cb      	lsls	r3, r1, #3
 800a254:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a258:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a25c:	9100      	str	r1, [sp, #0]
 800a25e:	9904      	ldr	r1, [sp, #16]
 800a260:	4419      	add	r1, r3
 800a262:	9104      	str	r1, [sp, #16]
 800a264:	9903      	ldr	r1, [sp, #12]
 800a266:	4419      	add	r1, r3
 800a268:	9103      	str	r1, [sp, #12]
 800a26a:	9906      	ldr	r1, [sp, #24]
 800a26c:	4419      	add	r1, r3
 800a26e:	9106      	str	r1, [sp, #24]
 800a270:	9905      	ldr	r1, [sp, #20]
 800a272:	441f      	add	r7, r3
 800a274:	4419      	add	r1, r3
 800a276:	9b02      	ldr	r3, [sp, #8]
 800a278:	9105      	str	r1, [sp, #20]
 800a27a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a27e:	9302      	str	r3, [sp, #8]
 800a280:	9904      	ldr	r1, [sp, #16]
 800a282:	9805      	ldr	r0, [sp, #20]
 800a284:	ed91 4a00 	vldr	s8, [r1]
 800a288:	edd0 6a00 	vldr	s13, [r0]
 800a28c:	9b06      	ldr	r3, [sp, #24]
 800a28e:	ed97 3a00 	vldr	s6, [r7]
 800a292:	edd3 7a00 	vldr	s15, [r3]
 800a296:	edd0 4a01 	vldr	s9, [r0, #4]
 800a29a:	edd1 3a01 	vldr	s7, [r1, #4]
 800a29e:	ed97 2a01 	vldr	s4, [r7, #4]
 800a2a2:	ed93 7a01 	vldr	s14, [r3, #4]
 800a2a6:	9a03      	ldr	r2, [sp, #12]
 800a2a8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a2ac:	ee34 6a26 	vadd.f32	s12, s8, s13
 800a2b0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800a2b4:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a2b8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a2bc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a2c0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800a2c4:	ed81 5a00 	vstr	s10, [r1]
 800a2c8:	ed93 5a01 	vldr	s10, [r3, #4]
 800a2cc:	edd7 4a01 	vldr	s9, [r7, #4]
 800a2d0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a2d4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800a2d8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a2dc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800a2e0:	ed81 5a01 	vstr	s10, [r1, #4]
 800a2e4:	edd2 1a00 	vldr	s3, [r2]
 800a2e8:	edd2 2a01 	vldr	s5, [r2, #4]
 800a2ec:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a2f0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a2f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a2f8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a2fc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a300:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a304:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a308:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a30c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a310:	edc3 2a00 	vstr	s5, [r3]
 800a314:	ed83 5a01 	vstr	s10, [r3, #4]
 800a318:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a31c:	9b00      	ldr	r3, [sp, #0]
 800a31e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a322:	ed93 4a01 	vldr	s8, [r3, #4]
 800a326:	ed93 5a00 	vldr	s10, [r3]
 800a32a:	9b02      	ldr	r3, [sp, #8]
 800a32c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a330:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a334:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a338:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a33c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a340:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a344:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a348:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a34c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a350:	ed80 6a01 	vstr	s12, [r0, #4]
 800a354:	edc0 5a00 	vstr	s11, [r0]
 800a358:	edd3 5a01 	vldr	s11, [r3, #4]
 800a35c:	edd3 6a00 	vldr	s13, [r3]
 800a360:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a364:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800a368:	ee27 6a26 	vmul.f32	s12, s14, s13
 800a36c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a370:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a374:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a378:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a37c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a380:	ed87 7a01 	vstr	s14, [r7, #4]
 800a384:	edc7 7a00 	vstr	s15, [r7]
 800a388:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800a38c:	4621      	mov	r1, r4
 800a38e:	686a      	ldr	r2, [r5, #4]
 800a390:	2304      	movs	r3, #4
 800a392:	f000 fc79 	bl	800ac88 <arm_radix8_butterfly_f32>
 800a396:	4630      	mov	r0, r6
 800a398:	4621      	mov	r1, r4
 800a39a:	686a      	ldr	r2, [r5, #4]
 800a39c:	2304      	movs	r3, #4
 800a39e:	f000 fc73 	bl	800ac88 <arm_radix8_butterfly_f32>
 800a3a2:	9808      	ldr	r0, [sp, #32]
 800a3a4:	686a      	ldr	r2, [r5, #4]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	2304      	movs	r3, #4
 800a3aa:	f000 fc6d 	bl	800ac88 <arm_radix8_butterfly_f32>
 800a3ae:	686a      	ldr	r2, [r5, #4]
 800a3b0:	9801      	ldr	r0, [sp, #4]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	b00d      	add	sp, #52	; 0x34
 800a3b8:	ecbd 8b0a 	vpop	{d8-d12}
 800a3bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	f000 bc62 	b.w	800ac88 <arm_radix8_butterfly_f32>

0800a3c4 <arm_cfft_f32>:
 800a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c8:	2a01      	cmp	r2, #1
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	4617      	mov	r7, r2
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	4698      	mov	r8, r3
 800a3d2:	8805      	ldrh	r5, [r0, #0]
 800a3d4:	d056      	beq.n	800a484 <arm_cfft_f32+0xc0>
 800a3d6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a3da:	d063      	beq.n	800a4a4 <arm_cfft_f32+0xe0>
 800a3dc:	d916      	bls.n	800a40c <arm_cfft_f32+0x48>
 800a3de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a3e2:	d01a      	beq.n	800a41a <arm_cfft_f32+0x56>
 800a3e4:	d947      	bls.n	800a476 <arm_cfft_f32+0xb2>
 800a3e6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a3ea:	d05b      	beq.n	800a4a4 <arm_cfft_f32+0xe0>
 800a3ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a3f0:	d105      	bne.n	800a3fe <arm_cfft_f32+0x3a>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	6872      	ldr	r2, [r6, #4]
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 fc45 	bl	800ac88 <arm_radix8_butterfly_f32>
 800a3fe:	f1b8 0f00 	cmp.w	r8, #0
 800a402:	d111      	bne.n	800a428 <arm_cfft_f32+0x64>
 800a404:	2f01      	cmp	r7, #1
 800a406:	d016      	beq.n	800a436 <arm_cfft_f32+0x72>
 800a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a40c:	2d20      	cmp	r5, #32
 800a40e:	d049      	beq.n	800a4a4 <arm_cfft_f32+0xe0>
 800a410:	d935      	bls.n	800a47e <arm_cfft_f32+0xba>
 800a412:	2d40      	cmp	r5, #64	; 0x40
 800a414:	d0ed      	beq.n	800a3f2 <arm_cfft_f32+0x2e>
 800a416:	2d80      	cmp	r5, #128	; 0x80
 800a418:	d1f1      	bne.n	800a3fe <arm_cfft_f32+0x3a>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7ff fcab 	bl	8009d78 <arm_cfft_radix8by2_f32>
 800a422:	f1b8 0f00 	cmp.w	r8, #0
 800a426:	d0ed      	beq.n	800a404 <arm_cfft_f32+0x40>
 800a428:	68b2      	ldr	r2, [r6, #8]
 800a42a:	89b1      	ldrh	r1, [r6, #12]
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 f841 	bl	800a4b4 <arm_bitreversal_32>
 800a432:	2f01      	cmp	r7, #1
 800a434:	d1e8      	bne.n	800a408 <arm_cfft_f32+0x44>
 800a436:	ee07 5a90 	vmov	s15, r5
 800a43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a442:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a446:	2d00      	cmp	r5, #0
 800a448:	d0de      	beq.n	800a408 <arm_cfft_f32+0x44>
 800a44a:	f104 0108 	add.w	r1, r4, #8
 800a44e:	2300      	movs	r3, #0
 800a450:	3301      	adds	r3, #1
 800a452:	429d      	cmp	r5, r3
 800a454:	f101 0108 	add.w	r1, r1, #8
 800a458:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a45c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a460:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a464:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a468:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a46c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a470:	d1ee      	bne.n	800a450 <arm_cfft_f32+0x8c>
 800a472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a476:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a47a:	d0ba      	beq.n	800a3f2 <arm_cfft_f32+0x2e>
 800a47c:	e7bf      	b.n	800a3fe <arm_cfft_f32+0x3a>
 800a47e:	2d10      	cmp	r5, #16
 800a480:	d0cb      	beq.n	800a41a <arm_cfft_f32+0x56>
 800a482:	e7bc      	b.n	800a3fe <arm_cfft_f32+0x3a>
 800a484:	b19d      	cbz	r5, 800a4ae <arm_cfft_f32+0xea>
 800a486:	f101 030c 	add.w	r3, r1, #12
 800a48a:	2200      	movs	r2, #0
 800a48c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a490:	3201      	adds	r2, #1
 800a492:	eef1 7a67 	vneg.f32	s15, s15
 800a496:	4295      	cmp	r5, r2
 800a498:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a49c:	f103 0308 	add.w	r3, r3, #8
 800a4a0:	d1f4      	bne.n	800a48c <arm_cfft_f32+0xc8>
 800a4a2:	e798      	b.n	800a3d6 <arm_cfft_f32+0x12>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f7ff fd36 	bl	8009f18 <arm_cfft_radix8by4_f32>
 800a4ac:	e7a7      	b.n	800a3fe <arm_cfft_f32+0x3a>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0aa      	beq.n	800a408 <arm_cfft_f32+0x44>
 800a4b2:	e7b9      	b.n	800a428 <arm_cfft_f32+0x64>

0800a4b4 <arm_bitreversal_32>:
 800a4b4:	b1e9      	cbz	r1, 800a4f2 <arm_bitreversal_32+0x3e>
 800a4b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b8:	2500      	movs	r5, #0
 800a4ba:	f102 0e02 	add.w	lr, r2, #2
 800a4be:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800a4c2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800a4c6:	08a4      	lsrs	r4, r4, #2
 800a4c8:	089b      	lsrs	r3, r3, #2
 800a4ca:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800a4ce:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800a4d2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a4d6:	00a6      	lsls	r6, r4, #2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	1d34      	adds	r4, r6, #4
 800a4e2:	3502      	adds	r5, #2
 800a4e4:	58c6      	ldr	r6, [r0, r3]
 800a4e6:	5907      	ldr	r7, [r0, r4]
 800a4e8:	50c7      	str	r7, [r0, r3]
 800a4ea:	428d      	cmp	r5, r1
 800a4ec:	5106      	str	r6, [r0, r4]
 800a4ee:	d3e6      	bcc.n	800a4be <arm_bitreversal_32+0xa>
 800a4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f2:	4770      	bx	lr

0800a4f4 <arm_mat_mult_f32>:
 800a4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f8:	8845      	ldrh	r5, [r0, #2]
 800a4fa:	880b      	ldrh	r3, [r1, #0]
 800a4fc:	8806      	ldrh	r6, [r0, #0]
 800a4fe:	6847      	ldr	r7, [r0, #4]
 800a500:	6854      	ldr	r4, [r2, #4]
 800a502:	6848      	ldr	r0, [r1, #4]
 800a504:	b08b      	sub	sp, #44	; 0x2c
 800a506:	42ab      	cmp	r3, r5
 800a508:	9109      	str	r1, [sp, #36]	; 0x24
 800a50a:	9604      	str	r6, [sp, #16]
 800a50c:	8849      	ldrh	r1, [r1, #2]
 800a50e:	f040 808a 	bne.w	800a626 <arm_mat_mult_f32+0x132>
 800a512:	8815      	ldrh	r5, [r2, #0]
 800a514:	42b5      	cmp	r5, r6
 800a516:	f040 8086 	bne.w	800a626 <arm_mat_mult_f32+0x132>
 800a51a:	8852      	ldrh	r2, [r2, #2]
 800a51c:	428a      	cmp	r2, r1
 800a51e:	f040 8082 	bne.w	800a626 <arm_mat_mult_f32+0x132>
 800a522:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a526:	1d01      	adds	r1, r0, #4
 800a528:	0116      	lsls	r6, r2, #4
 800a52a:	9108      	str	r1, [sp, #32]
 800a52c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800a530:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800a534:	9101      	str	r1, [sp, #4]
 800a536:	fb06 f108 	mul.w	r1, r6, r8
 800a53a:	0095      	lsls	r5, r2, #2
 800a53c:	9103      	str	r1, [sp, #12]
 800a53e:	00d2      	lsls	r2, r2, #3
 800a540:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800a544:	f003 0903 	and.w	r9, r3, #3
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	f107 0b10 	add.w	fp, r7, #16
 800a54e:	eb04 0a05 	add.w	sl, r4, r5
 800a552:	9107      	str	r1, [sp, #28]
 800a554:	9202      	str	r2, [sp, #8]
 800a556:	9306      	str	r3, [sp, #24]
 800a558:	f1ab 0310 	sub.w	r3, fp, #16
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	9b07      	ldr	r3, [sp, #28]
 800a560:	f8dd e020 	ldr.w	lr, [sp, #32]
 800a564:	eb03 0c0a 	add.w	ip, r3, sl
 800a568:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a630 <arm_mat_mult_f32+0x13c>
 800a56c:	f1b8 0f00 	cmp.w	r8, #0
 800a570:	d053      	beq.n	800a61a <arm_mat_mult_f32+0x126>
 800a572:	9b02      	ldr	r3, [sp, #8]
 800a574:	4644      	mov	r4, r8
 800a576:	18c1      	adds	r1, r0, r3
 800a578:	4602      	mov	r2, r0
 800a57a:	465b      	mov	r3, fp
 800a57c:	ed92 6a00 	vldr	s12, [r2]
 800a580:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a584:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a588:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a58c:	ed91 5a00 	vldr	s10, [r1]
 800a590:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a594:	1957      	adds	r7, r2, r5
 800a596:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a59a:	ed97 6a00 	vldr	s12, [r7]
 800a59e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5a2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a5a6:	194f      	adds	r7, r1, r5
 800a5a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a5ac:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a5b0:	edd7 7a00 	vldr	s15, [r7]
 800a5b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a5b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a5bc:	3c01      	subs	r4, #1
 800a5be:	4432      	add	r2, r6
 800a5c0:	4431      	add	r1, r6
 800a5c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5c6:	f103 0310 	add.w	r3, r3, #16
 800a5ca:	d1d7      	bne.n	800a57c <arm_mat_mult_f32+0x88>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	9a01      	ldr	r2, [sp, #4]
 800a5d0:	4418      	add	r0, r3
 800a5d2:	f1b9 0f00 	cmp.w	r9, #0
 800a5d6:	d00b      	beq.n	800a5f0 <arm_mat_mult_f32+0xfc>
 800a5d8:	464b      	mov	r3, r9
 800a5da:	edd0 6a00 	vldr	s13, [r0]
 800a5de:	ecb2 7a01 	vldmia	r2!, {s14}
 800a5e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	4428      	add	r0, r5
 800a5ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5ee:	d1f4      	bne.n	800a5da <arm_mat_mult_f32+0xe6>
 800a5f0:	ecec 7a01 	vstmia	ip!, {s15}
 800a5f4:	45d4      	cmp	ip, sl
 800a5f6:	4670      	mov	r0, lr
 800a5f8:	f10e 0e04 	add.w	lr, lr, #4
 800a5fc:	d1b4      	bne.n	800a568 <arm_mat_mult_f32+0x74>
 800a5fe:	9a01      	ldr	r2, [sp, #4]
 800a600:	9b06      	ldr	r3, [sp, #24]
 800a602:	4611      	mov	r1, r2
 800a604:	4419      	add	r1, r3
 800a606:	449b      	add	fp, r3
 800a608:	9b04      	ldr	r3, [sp, #16]
 800a60a:	9101      	str	r1, [sp, #4]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	44aa      	add	sl, r5
 800a610:	9304      	str	r3, [sp, #16]
 800a612:	d004      	beq.n	800a61e <arm_mat_mult_f32+0x12a>
 800a614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a616:	6858      	ldr	r0, [r3, #4]
 800a618:	e79e      	b.n	800a558 <arm_mat_mult_f32+0x64>
 800a61a:	9a05      	ldr	r2, [sp, #20]
 800a61c:	e7d9      	b.n	800a5d2 <arm_mat_mult_f32+0xde>
 800a61e:	4618      	mov	r0, r3
 800a620:	b00b      	add	sp, #44	; 0x2c
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	f06f 0002 	mvn.w	r0, #2
 800a62a:	b00b      	add	sp, #44	; 0x2c
 800a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a630:	00000000 	.word	0x00000000

0800a634 <arm_mat_inverse_f32>:
 800a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	8843      	ldrh	r3, [r0, #2]
 800a63a:	8804      	ldrh	r4, [r0, #0]
 800a63c:	684e      	ldr	r6, [r1, #4]
 800a63e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a642:	b087      	sub	sp, #28
 800a644:	429c      	cmp	r4, r3
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	9603      	str	r6, [sp, #12]
 800a64a:	f040 80ea 	bne.w	800a822 <arm_mat_inverse_f32+0x1ee>
 800a64e:	880a      	ldrh	r2, [r1, #0]
 800a650:	884b      	ldrh	r3, [r1, #2]
 800a652:	4293      	cmp	r3, r2
 800a654:	f040 80e5 	bne.w	800a822 <arm_mat_inverse_f32+0x1ee>
 800a658:	429c      	cmp	r4, r3
 800a65a:	f040 80e2 	bne.w	800a822 <arm_mat_inverse_f32+0x1ee>
 800a65e:	9005      	str	r0, [sp, #20]
 800a660:	b30c      	cbz	r4, 800a6a6 <arm_mat_inverse_f32+0x72>
 800a662:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a666:	1e67      	subs	r7, r4, #1
 800a668:	f846 bb04 	str.w	fp, [r6], #4
 800a66c:	d01b      	beq.n	800a6a6 <arm_mat_inverse_f32+0x72>
 800a66e:	f04f 0801 	mov.w	r8, #1
 800a672:	00ba      	lsls	r2, r7, #2
 800a674:	eb06 0a02 	add.w	sl, r6, r2
 800a678:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800a67c:	4630      	mov	r0, r6
 800a67e:	2100      	movs	r1, #0
 800a680:	f000 fdc2 	bl	800b208 <memset>
 800a684:	eb0a 0605 	add.w	r6, sl, r5
 800a688:	462a      	mov	r2, r5
 800a68a:	2100      	movs	r1, #0
 800a68c:	4650      	mov	r0, sl
 800a68e:	f1b8 0f00 	cmp.w	r8, #0
 800a692:	f000 80cb 	beq.w	800a82c <arm_mat_inverse_f32+0x1f8>
 800a696:	f000 fdb7 	bl	800b208 <memset>
 800a69a:	3f01      	subs	r7, #1
 800a69c:	f108 0801 	add.w	r8, r8, #1
 800a6a0:	f846 bb04 	str.w	fp, [r6], #4
 800a6a4:	d1e5      	bne.n	800a672 <arm_mat_inverse_f32+0x3e>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 80b5 	beq.w	800a818 <arm_mat_inverse_f32+0x1e4>
 800a6ae:	009d      	lsls	r5, r3, #2
 800a6b0:	eb09 0205 	add.w	r2, r9, r5
 800a6b4:	46cc      	mov	ip, r9
 800a6b6:	9202      	str	r2, [sp, #8]
 800a6b8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a6bc:	1d2a      	adds	r2, r5, #4
 800a6be:	9204      	str	r2, [sp, #16]
 800a6c0:	462f      	mov	r7, r5
 800a6c2:	469e      	mov	lr, r3
 800a6c4:	2600      	movs	r6, #0
 800a6c6:	9b02      	ldr	r3, [sp, #8]
 800a6c8:	eddc 6a00 	vldr	s13, [ip]
 800a6cc:	42b4      	cmp	r4, r6
 800a6ce:	eba3 0b07 	sub.w	fp, r3, r7
 800a6d2:	f000 80a1 	beq.w	800a818 <arm_mat_inverse_f32+0x1e4>
 800a6d6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a83c <arm_mat_inverse_f32+0x208>
 800a6da:	4632      	mov	r2, r6
 800a6dc:	4663      	mov	r3, ip
 800a6de:	e00b      	b.n	800a6f8 <arm_mat_inverse_f32+0xc4>
 800a6e0:	eef4 7a47 	vcmp.f32	s15, s14
 800a6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e8:	f102 0201 	add.w	r2, r2, #1
 800a6ec:	bfc8      	it	gt
 800a6ee:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a6f2:	42a2      	cmp	r2, r4
 800a6f4:	442b      	add	r3, r5
 800a6f6:	d014      	beq.n	800a722 <arm_mat_inverse_f32+0xee>
 800a6f8:	edd3 7a00 	vldr	s15, [r3]
 800a6fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a704:	eeb1 6a67 	vneg.f32	s12, s15
 800a708:	dcea      	bgt.n	800a6e0 <arm_mat_inverse_f32+0xac>
 800a70a:	eeb4 6a47 	vcmp.f32	s12, s14
 800a70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a712:	f102 0201 	add.w	r2, r2, #1
 800a716:	bfc8      	it	gt
 800a718:	eeb0 7a46 	vmovgt.f32	s14, s12
 800a71c:	42a2      	cmp	r2, r4
 800a71e:	442b      	add	r3, r5
 800a720:	d1ea      	bne.n	800a6f8 <arm_mat_inverse_f32+0xc4>
 800a722:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72a:	d075      	beq.n	800a818 <arm_mat_inverse_f32+0x1e4>
 800a72c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a734:	d070      	beq.n	800a818 <arm_mat_inverse_f32+0x1e4>
 800a736:	4672      	mov	r2, lr
 800a738:	4663      	mov	r3, ip
 800a73a:	ed93 7a00 	vldr	s14, [r3]
 800a73e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a742:	3a01      	subs	r2, #1
 800a744:	ece3 7a01 	vstmia	r3!, {s15}
 800a748:	d1f7      	bne.n	800a73a <arm_mat_inverse_f32+0x106>
 800a74a:	9901      	ldr	r1, [sp, #4]
 800a74c:	464b      	mov	r3, r9
 800a74e:	ed93 7a00 	vldr	s14, [r3]
 800a752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a756:	3901      	subs	r1, #1
 800a758:	ece3 7a01 	vstmia	r3!, {s15}
 800a75c:	d1f7      	bne.n	800a74e <arm_mat_inverse_f32+0x11a>
 800a75e:	9803      	ldr	r0, [sp, #12]
 800a760:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800a764:	42b1      	cmp	r1, r6
 800a766:	d039      	beq.n	800a7dc <arm_mat_inverse_f32+0x1a8>
 800a768:	eddb 6a00 	vldr	s13, [fp]
 800a76c:	465a      	mov	r2, fp
 800a76e:	4673      	mov	r3, lr
 800a770:	46e2      	mov	sl, ip
 800a772:	ecba 7a01 	vldmia	sl!, {s14}
 800a776:	edd2 7a00 	vldr	s15, [r2]
 800a77a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a77e:	3b01      	subs	r3, #1
 800a780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a784:	ece2 7a01 	vstmia	r2!, {s15}
 800a788:	d1f3      	bne.n	800a772 <arm_mat_inverse_f32+0x13e>
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	44bb      	add	fp, r7
 800a78e:	4602      	mov	r2, r0
 800a790:	46ca      	mov	sl, r9
 800a792:	ecba 7a01 	vldmia	sl!, {s14}
 800a796:	edd2 7a00 	vldr	s15, [r2]
 800a79a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7a4:	ece2 7a01 	vstmia	r2!, {s15}
 800a7a8:	d1f3      	bne.n	800a792 <arm_mat_inverse_f32+0x15e>
 800a7aa:	4428      	add	r0, r5
 800a7ac:	3101      	adds	r1, #1
 800a7ae:	428c      	cmp	r4, r1
 800a7b0:	44c3      	add	fp, r8
 800a7b2:	d1d7      	bne.n	800a764 <arm_mat_inverse_f32+0x130>
 800a7b4:	9b04      	ldr	r3, [sp, #16]
 800a7b6:	f1be 0e01 	subs.w	lr, lr, #1
 800a7ba:	f106 0601 	add.w	r6, r6, #1
 800a7be:	449c      	add	ip, r3
 800a7c0:	f1a7 0704 	sub.w	r7, r7, #4
 800a7c4:	44a9      	add	r9, r5
 800a7c6:	f47f af7e 	bne.w	800a6c6 <arm_mat_inverse_f32+0x92>
 800a7ca:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d2:	d006      	beq.n	800a7e2 <arm_mat_inverse_f32+0x1ae>
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	b007      	add	sp, #28
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	44bb      	add	fp, r7
 800a7de:	4428      	add	r0, r5
 800a7e0:	e7e4      	b.n	800a7ac <arm_mat_inverse_f32+0x178>
 800a7e2:	9b05      	ldr	r3, [sp, #20]
 800a7e4:	9a01      	ldr	r2, [sp, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	edd3 7a00 	vldr	s15, [r3]
 800a7ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a7f0:	fb02 f204 	mul.w	r2, r2, r4
 800a7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f8:	4614      	mov	r4, r2
 800a7fa:	bf08      	it	eq
 800a7fc:	3304      	addeq	r3, #4
 800a7fe:	d007      	beq.n	800a810 <arm_mat_inverse_f32+0x1dc>
 800a800:	e7e8      	b.n	800a7d4 <arm_mat_inverse_f32+0x1a0>
 800a802:	ecf3 7a01 	vldmia	r3!, {s15}
 800a806:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80e:	d1e1      	bne.n	800a7d4 <arm_mat_inverse_f32+0x1a0>
 800a810:	f10e 0e01 	add.w	lr, lr, #1
 800a814:	4574      	cmp	r4, lr
 800a816:	d1f4      	bne.n	800a802 <arm_mat_inverse_f32+0x1ce>
 800a818:	f06f 0004 	mvn.w	r0, #4
 800a81c:	b007      	add	sp, #28
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	f06f 0002 	mvn.w	r0, #2
 800a826:	b007      	add	sp, #28
 800a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82c:	4656      	mov	r6, sl
 800a82e:	3f01      	subs	r7, #1
 800a830:	f846 bb04 	str.w	fp, [r6], #4
 800a834:	f47f af1b 	bne.w	800a66e <arm_mat_inverse_f32+0x3a>
 800a838:	e735      	b.n	800a6a6 <arm_mat_inverse_f32+0x72>
 800a83a:	bf00      	nop
 800a83c:	00000000 	.word	0x00000000

0800a840 <arm_mat_init_f32>:
 800a840:	8001      	strh	r1, [r0, #0]
 800a842:	8042      	strh	r2, [r0, #2]
 800a844:	6043      	str	r3, [r0, #4]
 800a846:	4770      	bx	lr

0800a848 <arm_biquad_cascade_df2T_f32>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	7807      	ldrb	r7, [r0, #0]
 800a84e:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800a852:	6885      	ldr	r5, [r0, #8]
 800a854:	3514      	adds	r5, #20
 800a856:	6846      	ldr	r6, [r0, #4]
 800a858:	3608      	adds	r6, #8
 800a85a:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800a85e:	eb02 0b09 	add.w	fp, r2, r9
 800a862:	f003 080f 	and.w	r8, r3, #15
 800a866:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800a86a:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800a86e:	ed15 7a04 	vldr	s14, [r5, #-16]
 800a872:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a876:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a87a:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a87e:	46b4      	mov	ip, r6
 800a880:	ed56 3a02 	vldr	s7, [r6, #-8]
 800a884:	ed16 4a01 	vldr	s8, [r6, #-4]
 800a888:	f1be 0f00 	cmp.w	lr, #0
 800a88c:	f000 8195 	beq.w	800abba <arm_biquad_cascade_df2T_f32+0x372>
 800a890:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800a894:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800a898:	4674      	mov	r4, lr
 800a89a:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800a89e:	ee27 5a83 	vmul.f32	s10, s15, s6
 800a8a2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a8a6:	ee67 4a03 	vmul.f32	s9, s14, s6
 800a8aa:	ee34 4a84 	vadd.f32	s8, s9, s8
 800a8ae:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a8b2:	ee34 4a84 	vadd.f32	s8, s9, s8
 800a8b6:	ee26 3a83 	vmul.f32	s6, s13, s6
 800a8ba:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800a8be:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 800a8c2:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800a8c6:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a8ca:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a8ce:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a8d2:	ee27 4a23 	vmul.f32	s8, s14, s7
 800a8d6:	ee35 5a04 	vadd.f32	s10, s10, s8
 800a8da:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a8de:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a8e2:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800a8e6:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800a8ea:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800a8ee:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a8f2:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a8f6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a8fa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a8fe:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a902:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a906:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a90a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a90e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a912:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800a916:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800a91a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a91e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a922:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a926:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a92a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a92e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a932:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a936:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a93a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a93e:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800a942:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 800a946:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a94a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a94e:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a952:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a956:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a95a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a95e:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a962:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a966:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a96a:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800a96e:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800a972:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a976:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a97a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a97e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a982:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a986:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a98a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a98e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a992:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a996:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800a99a:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800a99e:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a9a2:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a9a6:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a9aa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a9ae:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a9b2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a9b6:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a9ba:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a9be:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a9c2:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800a9c6:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800a9ca:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a9ce:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a9d2:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a9d6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a9da:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a9de:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a9e2:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a9e6:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a9ea:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a9ee:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800a9f2:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800a9f6:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a9fa:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a9fe:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800aa02:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aa06:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aa0a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aa0e:	ee26 3a05 	vmul.f32	s6, s12, s10
 800aa12:	ee33 3a24 	vadd.f32	s6, s6, s9
 800aa16:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aa1a:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800aa1e:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800aa22:	ee67 4a84 	vmul.f32	s9, s15, s8
 800aa26:	ee74 4a83 	vadd.f32	s9, s9, s6
 800aa2a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800aa2e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aa32:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aa36:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aa3a:	ee26 3a24 	vmul.f32	s6, s12, s9
 800aa3e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800aa42:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aa46:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800aa4a:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800aa4e:	ee27 5a84 	vmul.f32	s10, s15, s8
 800aa52:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aa56:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800aa5a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aa5e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aa62:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aa66:	ee26 3a05 	vmul.f32	s6, s12, s10
 800aa6a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800aa6e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aa72:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 800aa76:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800aa7a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800aa7e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800aa82:	ee25 5a85 	vmul.f32	s10, s11, s10
 800aa86:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aa8a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aa8e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aa92:	ee26 3a24 	vmul.f32	s6, s12, s9
 800aa96:	ee33 3a05 	vadd.f32	s6, s6, s10
 800aa9a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aa9e:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800aaa2:	ed10 4a04 	vldr	s8, [r0, #-16]
 800aaa6:	ee27 5a84 	vmul.f32	s10, s15, s8
 800aaaa:	ee35 5a03 	vadd.f32	s10, s10, s6
 800aaae:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800aab2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aab6:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aaba:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800aabe:	ee26 3a05 	vmul.f32	s6, s12, s10
 800aac2:	ee33 3a24 	vadd.f32	s6, s6, s9
 800aac6:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aaca:	ed03 5a04 	vstr	s10, [r3, #-16]
 800aace:	ed10 4a03 	vldr	s8, [r0, #-12]
 800aad2:	ee67 4a84 	vmul.f32	s9, s15, s8
 800aad6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800aada:	ee25 5a85 	vmul.f32	s10, s11, s10
 800aade:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aae2:	ee67 3a04 	vmul.f32	s7, s14, s8
 800aae6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aaea:	ee26 3a24 	vmul.f32	s6, s12, s9
 800aaee:	ee33 3a05 	vadd.f32	s6, s6, s10
 800aaf2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800aaf6:	ed43 4a03 	vstr	s9, [r3, #-12]
 800aafa:	ed10 4a02 	vldr	s8, [r0, #-8]
 800aafe:	ee27 5a84 	vmul.f32	s10, s15, s8
 800ab02:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ab06:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800ab0a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800ab0e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ab12:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800ab16:	ee26 3a05 	vmul.f32	s6, s12, s10
 800ab1a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800ab1e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800ab22:	ed03 5a02 	vstr	s10, [r3, #-8]
 800ab26:	ed10 4a01 	vldr	s8, [r0, #-4]
 800ab2a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800ab2e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ab32:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ab36:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ab3a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800ab3e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ab42:	ee66 3a24 	vmul.f32	s7, s12, s9
 800ab46:	ee73 3a85 	vadd.f32	s7, s7, s10
 800ab4a:	ee26 5a84 	vmul.f32	s10, s13, s8
 800ab4e:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800ab52:	ee34 4a05 	vadd.f32	s8, s8, s10
 800ab56:	ed43 4a01 	vstr	s9, [r3, #-4]
 800ab5a:	3040      	adds	r0, #64	; 0x40
 800ab5c:	3340      	adds	r3, #64	; 0x40
 800ab5e:	3c01      	subs	r4, #1
 800ab60:	f47f ae9b 	bne.w	800a89a <arm_biquad_cascade_df2T_f32+0x52>
 800ab64:	4449      	add	r1, r9
 800ab66:	465b      	mov	r3, fp
 800ab68:	f1b8 0f00 	cmp.w	r8, #0
 800ab6c:	d019      	beq.n	800aba2 <arm_biquad_cascade_df2T_f32+0x35a>
 800ab6e:	eb01 000a 	add.w	r0, r1, sl
 800ab72:	ecf1 2a01 	vldmia	r1!, {s5}
 800ab76:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800ab7a:	ee33 3a23 	vadd.f32	s6, s6, s7
 800ab7e:	ee67 3a22 	vmul.f32	s7, s14, s5
 800ab82:	ee33 4a84 	vadd.f32	s8, s7, s8
 800ab86:	ee26 5a03 	vmul.f32	s10, s12, s6
 800ab8a:	ee75 3a04 	vadd.f32	s7, s10, s8
 800ab8e:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800ab92:	ee25 4a83 	vmul.f32	s8, s11, s6
 800ab96:	ee34 4a22 	vadd.f32	s8, s8, s5
 800ab9a:	eca3 3a01 	vstmia	r3!, {s6}
 800ab9e:	4281      	cmp	r1, r0
 800aba0:	d1e7      	bne.n	800ab72 <arm_biquad_cascade_df2T_f32+0x32a>
 800aba2:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800aba6:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800abaa:	3514      	adds	r5, #20
 800abac:	3608      	adds	r6, #8
 800abae:	4611      	mov	r1, r2
 800abb0:	3f01      	subs	r7, #1
 800abb2:	f47f ae5a 	bne.w	800a86a <arm_biquad_cascade_df2T_f32+0x22>
 800abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abba:	4613      	mov	r3, r2
 800abbc:	e7d4      	b.n	800ab68 <arm_biquad_cascade_df2T_f32+0x320>
	...

0800abc0 <arm_biquad_cascade_df2T_init_f32>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	6082      	str	r2, [r0, #8]
 800abc4:	7001      	strb	r1, [r0, #0]
 800abc6:	4604      	mov	r4, r0
 800abc8:	00ca      	lsls	r2, r1, #3
 800abca:	4618      	mov	r0, r3
 800abcc:	2100      	movs	r1, #0
 800abce:	f000 fb1b 	bl	800b208 <memset>
 800abd2:	6060      	str	r0, [r4, #4]
 800abd4:	bd10      	pop	{r4, pc}
 800abd6:	bf00      	nop

0800abd8 <arm_dot_prod_f32>:
 800abd8:	b4f0      	push	{r4, r5, r6, r7}
 800abda:	0897      	lsrs	r7, r2, #2
 800abdc:	eddf 5a29 	vldr	s11, [pc, #164]	; 800ac84 <arm_dot_prod_f32+0xac>
 800abe0:	d02d      	beq.n	800ac3e <arm_dot_prod_f32+0x66>
 800abe2:	f100 0510 	add.w	r5, r0, #16
 800abe6:	f101 0410 	add.w	r4, r1, #16
 800abea:	463e      	mov	r6, r7
 800abec:	ed55 6a04 	vldr	s13, [r5, #-16]
 800abf0:	ed54 3a04 	vldr	s7, [r4, #-16]
 800abf4:	ed15 7a03 	vldr	s14, [r5, #-12]
 800abf8:	ed14 4a03 	vldr	s8, [r4, #-12]
 800abfc:	ed55 7a02 	vldr	s15, [r5, #-8]
 800ac00:	ed54 4a02 	vldr	s9, [r4, #-8]
 800ac04:	ed15 6a01 	vldr	s12, [r5, #-4]
 800ac08:	ed14 5a01 	vldr	s10, [r4, #-4]
 800ac0c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ac10:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ac14:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ac18:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ac1c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ac20:	ee66 6a05 	vmul.f32	s13, s12, s10
 800ac24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac28:	3e01      	subs	r6, #1
 800ac2a:	f105 0510 	add.w	r5, r5, #16
 800ac2e:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800ac32:	f104 0410 	add.w	r4, r4, #16
 800ac36:	d1d9      	bne.n	800abec <arm_dot_prod_f32+0x14>
 800ac38:	013f      	lsls	r7, r7, #4
 800ac3a:	4438      	add	r0, r7
 800ac3c:	4439      	add	r1, r7
 800ac3e:	f012 0203 	ands.w	r2, r2, #3
 800ac42:	d01b      	beq.n	800ac7c <arm_dot_prod_f32+0xa4>
 800ac44:	edd1 7a00 	vldr	s15, [r1]
 800ac48:	ed90 7a00 	vldr	s14, [r0]
 800ac4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac50:	3a01      	subs	r2, #1
 800ac52:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ac56:	d011      	beq.n	800ac7c <arm_dot_prod_f32+0xa4>
 800ac58:	edd1 7a01 	vldr	s15, [r1, #4]
 800ac5c:	ed90 7a01 	vldr	s14, [r0, #4]
 800ac60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac64:	2a01      	cmp	r2, #1
 800ac66:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ac6a:	d007      	beq.n	800ac7c <arm_dot_prod_f32+0xa4>
 800ac6c:	edd0 7a02 	vldr	s15, [r0, #8]
 800ac70:	ed91 7a02 	vldr	s14, [r1, #8]
 800ac74:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac78:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800ac7c:	edc3 5a00 	vstr	s11, [r3]
 800ac80:	bcf0      	pop	{r4, r5, r6, r7}
 800ac82:	4770      	bx	lr
 800ac84:	00000000 	.word	0x00000000

0800ac88 <arm_radix8_butterfly_f32>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	ed2d 8b10 	vpush	{d8-d15}
 800ac90:	b095      	sub	sp, #84	; 0x54
 800ac92:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800ac96:	4603      	mov	r3, r0
 800ac98:	3304      	adds	r3, #4
 800ac9a:	ed9f bab9 	vldr	s22, [pc, #740]	; 800af80 <arm_radix8_butterfly_f32+0x2f8>
 800ac9e:	9012      	str	r0, [sp, #72]	; 0x48
 800aca0:	468b      	mov	fp, r1
 800aca2:	9313      	str	r3, [sp, #76]	; 0x4c
 800aca4:	4689      	mov	r9, r1
 800aca6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800acaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acac:	960f      	str	r6, [sp, #60]	; 0x3c
 800acae:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800acb2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800acb6:	eb03 0508 	add.w	r5, r3, r8
 800acba:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800acbe:	eb05 040e 	add.w	r4, r5, lr
 800acc2:	0137      	lsls	r7, r6, #4
 800acc4:	eba6 030a 	sub.w	r3, r6, sl
 800acc8:	eb04 000e 	add.w	r0, r4, lr
 800accc:	44b2      	add	sl, r6
 800acce:	1d3a      	adds	r2, r7, #4
 800acd0:	9702      	str	r7, [sp, #8]
 800acd2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800acd6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800acda:	ebae 0c06 	sub.w	ip, lr, r6
 800acde:	9703      	str	r7, [sp, #12]
 800ace0:	eb03 0708 	add.w	r7, r3, r8
 800ace4:	9701      	str	r7, [sp, #4]
 800ace6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800acea:	9706      	str	r7, [sp, #24]
 800acec:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800acee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800acf2:	f10e 0104 	add.w	r1, lr, #4
 800acf6:	4439      	add	r1, r7
 800acf8:	443a      	add	r2, r7
 800acfa:	0137      	lsls	r7, r6, #4
 800acfc:	00f6      	lsls	r6, r6, #3
 800acfe:	9704      	str	r7, [sp, #16]
 800ad00:	9605      	str	r6, [sp, #20]
 800ad02:	9f01      	ldr	r7, [sp, #4]
 800ad04:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ad06:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800ad0a:	f04f 0c00 	mov.w	ip, #0
 800ad0e:	edd4 6a00 	vldr	s13, [r4]
 800ad12:	edd7 1a00 	vldr	s3, [r7]
 800ad16:	ed16 aa01 	vldr	s20, [r6, #-4]
 800ad1a:	edd5 5a00 	vldr	s11, [r5]
 800ad1e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800ad22:	ed90 6a00 	vldr	s12, [r0]
 800ad26:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ad2a:	ed93 3a00 	vldr	s6, [r3]
 800ad2e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800ad32:	ee33 2a21 	vadd.f32	s4, s6, s3
 800ad36:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800ad3a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800ad3e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800ad42:	ee34 4a80 	vadd.f32	s8, s9, s0
 800ad46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad4a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800ad4e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800ad52:	ed46 6a01 	vstr	s13, [r6, #-4]
 800ad56:	ed85 4a00 	vstr	s8, [r5]
 800ad5a:	edd1 6a00 	vldr	s13, [r1]
 800ad5e:	ed94 9a01 	vldr	s18, [r4, #4]
 800ad62:	edd3 2a01 	vldr	s5, [r3, #4]
 800ad66:	edd7 8a01 	vldr	s17, [r7, #4]
 800ad6a:	edd6 0a00 	vldr	s1, [r6]
 800ad6e:	edd5 3a01 	vldr	s7, [r5, #4]
 800ad72:	ed90 8a01 	vldr	s16, [r0, #4]
 800ad76:	ed92 7a00 	vldr	s14, [r2]
 800ad7a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ad7e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800ad82:	ee72 aae8 	vsub.f32	s21, s5, s17
 800ad86:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800ad8a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800ad8e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ad92:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800ad96:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800ad9a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800ad9e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800ada2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800ada6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800adaa:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800adae:	ee37 7a48 	vsub.f32	s14, s14, s16
 800adb2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800adb6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800adba:	ee76 6a89 	vadd.f32	s13, s13, s18
 800adbe:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800adc2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800adc6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800adca:	ee35 5a42 	vsub.f32	s10, s10, s4
 800adce:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800add2:	ee33 2a20 	vadd.f32	s4, s6, s1
 800add6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800adda:	ee33 3a60 	vsub.f32	s6, s6, s1
 800adde:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800ade2:	ee77 0a01 	vadd.f32	s1, s14, s2
 800ade6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800adea:	ee37 7a41 	vsub.f32	s14, s14, s2
 800adee:	ee73 1a84 	vadd.f32	s3, s7, s8
 800adf2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800adf6:	ee76 3a27 	vadd.f32	s7, s12, s15
 800adfa:	ee76 7a67 	vsub.f32	s15, s12, s15
 800adfe:	ee32 8a00 	vadd.f32	s16, s4, s0
 800ae02:	ee33 1a45 	vsub.f32	s2, s6, s10
 800ae06:	ee32 2a40 	vsub.f32	s4, s4, s0
 800ae0a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ae0e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800ae12:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800ae16:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800ae1a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800ae1e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800ae22:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800ae26:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ae2a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ae2e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800ae32:	44dc      	add	ip, fp
 800ae34:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ae38:	45e1      	cmp	r9, ip
 800ae3a:	ed86 8a00 	vstr	s16, [r6]
 800ae3e:	ed85 2a01 	vstr	s4, [r5, #4]
 800ae42:	4456      	add	r6, sl
 800ae44:	ed02 0a01 	vstr	s0, [r2, #-4]
 800ae48:	4455      	add	r5, sl
 800ae4a:	edc0 6a00 	vstr	s13, [r0]
 800ae4e:	ed82 1a00 	vstr	s2, [r2]
 800ae52:	ed80 5a01 	vstr	s10, [r0, #4]
 800ae56:	4452      	add	r2, sl
 800ae58:	ed01 3a01 	vstr	s6, [r1, #-4]
 800ae5c:	4450      	add	r0, sl
 800ae5e:	edc7 2a00 	vstr	s5, [r7]
 800ae62:	edc4 4a00 	vstr	s9, [r4]
 800ae66:	ed83 7a00 	vstr	s14, [r3]
 800ae6a:	edc1 5a00 	vstr	s11, [r1]
 800ae6e:	edc7 3a01 	vstr	s7, [r7, #4]
 800ae72:	4451      	add	r1, sl
 800ae74:	ed84 6a01 	vstr	s12, [r4, #4]
 800ae78:	4457      	add	r7, sl
 800ae7a:	edc3 7a01 	vstr	s15, [r3, #4]
 800ae7e:	4454      	add	r4, sl
 800ae80:	4453      	add	r3, sl
 800ae82:	f63f af44 	bhi.w	800ad0e <arm_radix8_butterfly_f32+0x86>
 800ae86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae88:	2b07      	cmp	r3, #7
 800ae8a:	f240 81b7 	bls.w	800b1fc <arm_radix8_butterfly_f32+0x574>
 800ae8e:	9b06      	ldr	r3, [sp, #24]
 800ae90:	9903      	ldr	r1, [sp, #12]
 800ae92:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae94:	9e05      	ldr	r6, [sp, #20]
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	f103 0c08 	add.w	ip, r3, #8
 800ae9c:	9b02      	ldr	r3, [sp, #8]
 800ae9e:	3108      	adds	r1, #8
 800aea0:	f108 0808 	add.w	r8, r8, #8
 800aea4:	1841      	adds	r1, r0, r1
 800aea6:	3608      	adds	r6, #8
 800aea8:	330c      	adds	r3, #12
 800aeaa:	4604      	mov	r4, r0
 800aeac:	4444      	add	r4, r8
 800aeae:	18c3      	adds	r3, r0, r3
 800aeb0:	9109      	str	r1, [sp, #36]	; 0x24
 800aeb2:	1981      	adds	r1, r0, r6
 800aeb4:	f10e 0e08 	add.w	lr, lr, #8
 800aeb8:	3208      	adds	r2, #8
 800aeba:	940b      	str	r4, [sp, #44]	; 0x2c
 800aebc:	9107      	str	r1, [sp, #28]
 800aebe:	4604      	mov	r4, r0
 800aec0:	4601      	mov	r1, r0
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	f100 030c 	add.w	r3, r0, #12
 800aec8:	4474      	add	r4, lr
 800aeca:	f04f 0801 	mov.w	r8, #1
 800aece:	1882      	adds	r2, r0, r2
 800aed0:	4461      	add	r1, ip
 800aed2:	9305      	str	r3, [sp, #20]
 800aed4:	464b      	mov	r3, r9
 800aed6:	940a      	str	r4, [sp, #40]	; 0x28
 800aed8:	46c1      	mov	r9, r8
 800aeda:	9208      	str	r2, [sp, #32]
 800aedc:	46d8      	mov	r8, fp
 800aede:	9106      	str	r1, [sp, #24]
 800aee0:	f04f 0e00 	mov.w	lr, #0
 800aee4:	469b      	mov	fp, r3
 800aee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aeea:	449e      	add	lr, r3
 800aeec:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800aef0:	441a      	add	r2, r3
 800aef2:	920e      	str	r2, [sp, #56]	; 0x38
 800aef4:	441a      	add	r2, r3
 800aef6:	18d4      	adds	r4, r2, r3
 800aef8:	18e5      	adds	r5, r4, r3
 800aefa:	18ee      	adds	r6, r5, r3
 800aefc:	18f7      	adds	r7, r6, r3
 800aefe:	eb07 0c03 	add.w	ip, r7, r3
 800af02:	920d      	str	r2, [sp, #52]	; 0x34
 800af04:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800af08:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800af0c:	910c      	str	r1, [sp, #48]	; 0x30
 800af0e:	4419      	add	r1, r3
 800af10:	9103      	str	r1, [sp, #12]
 800af12:	4419      	add	r1, r3
 800af14:	18ca      	adds	r2, r1, r3
 800af16:	9202      	str	r2, [sp, #8]
 800af18:	441a      	add	r2, r3
 800af1a:	18d0      	adds	r0, r2, r3
 800af1c:	ed92 ea01 	vldr	s28, [r2, #4]
 800af20:	9a02      	ldr	r2, [sp, #8]
 800af22:	edd4 7a00 	vldr	s15, [r4]
 800af26:	edd2 da01 	vldr	s27, [r2, #4]
 800af2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af2c:	ed91 da01 	vldr	s26, [r1, #4]
 800af30:	ed92 ca01 	vldr	s24, [r2, #4]
 800af34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af36:	9903      	ldr	r1, [sp, #12]
 800af38:	edcd 7a03 	vstr	s15, [sp, #12]
 800af3c:	edd2 7a00 	vldr	s15, [r2]
 800af40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af42:	edcd 7a02 	vstr	s15, [sp, #8]
 800af46:	edd2 7a00 	vldr	s15, [r2]
 800af4a:	edd0 ea01 	vldr	s29, [r0, #4]
 800af4e:	edd1 ca01 	vldr	s25, [r1, #4]
 800af52:	eddc ba00 	vldr	s23, [ip]
 800af56:	edd7 aa00 	vldr	s21, [r7]
 800af5a:	ed96 aa00 	vldr	s20, [r6]
 800af5e:	edd5 9a00 	vldr	s19, [r5]
 800af62:	edcd 7a01 	vstr	s15, [sp, #4]
 800af66:	4403      	add	r3, r0
 800af68:	ed93 fa01 	vldr	s30, [r3, #4]
 800af6c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800af70:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800af74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af7c:	46cc      	mov	ip, r9
 800af7e:	e001      	b.n	800af84 <arm_radix8_butterfly_f32+0x2fc>
 800af80:	3f3504f3 	.word	0x3f3504f3
 800af84:	ed91 6a00 	vldr	s12, [r1]
 800af88:	ed93 5a00 	vldr	s10, [r3]
 800af8c:	edd0 fa00 	vldr	s31, [r0]
 800af90:	edd4 7a00 	vldr	s15, [r4]
 800af94:	ed95 7a00 	vldr	s14, [r5]
 800af98:	ed56 3a01 	vldr	s7, [r6, #-4]
 800af9c:	ed17 3a01 	vldr	s6, [r7, #-4]
 800afa0:	ed92 2a00 	vldr	s4, [r2]
 800afa4:	ed96 0a00 	vldr	s0, [r6]
 800afa8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800afac:	ee32 1a06 	vadd.f32	s2, s4, s12
 800afb0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800afb4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800afb8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800afbc:	ee71 6a24 	vadd.f32	s13, s2, s9
 800afc0:	ee32 2a46 	vsub.f32	s4, s4, s12
 800afc4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800afc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afcc:	ed06 6a01 	vstr	s12, [r6, #-4]
 800afd0:	edd4 8a01 	vldr	s17, [r4, #4]
 800afd4:	ed92 9a01 	vldr	s18, [r2, #4]
 800afd8:	edd7 0a00 	vldr	s1, [r7]
 800afdc:	edd1 2a01 	vldr	s5, [r1, #4]
 800afe0:	ed95 7a01 	vldr	s14, [r5, #4]
 800afe4:	ed93 6a01 	vldr	s12, [r3, #4]
 800afe8:	edd0 5a01 	vldr	s11, [r0, #4]
 800afec:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800aff0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800aff4:	ee39 5a62 	vsub.f32	s10, s18, s5
 800aff8:	ee78 fac7 	vsub.f32	s31, s17, s14
 800affc:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b000:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b004:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b008:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b00c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b010:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b014:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b018:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b01c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b020:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b024:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b028:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b02c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b030:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b034:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b038:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b03c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b040:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b044:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b048:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b04c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b050:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b054:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b058:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b05c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b060:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b064:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b068:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b06c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b070:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b074:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b078:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b07c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b080:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b084:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b088:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b08c:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b090:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b094:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b098:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b09c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b0a0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b0a4:	eddd 1a02 	vldr	s3, [sp, #8]
 800b0a8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b0ac:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b0b0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b0b4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b0b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b0bc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b0c0:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b0c4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b0c8:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b0cc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b0d0:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b0d4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b0d8:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b0dc:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b0e0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b0e4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b0e8:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b0ec:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b0f0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b0f4:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b0f8:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b0fc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b100:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b104:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b108:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b10c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b110:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b114:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b118:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b11c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b120:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b124:	eddd 5a03 	vldr	s11, [sp, #12]
 800b128:	edc6 fa00 	vstr	s31, [r6]
 800b12c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b130:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b134:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b138:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b13c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b140:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b144:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b148:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b14c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b150:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b154:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b158:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b15c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b160:	44c4      	add	ip, r8
 800b162:	45e3      	cmp	fp, ip
 800b164:	edc3 3a00 	vstr	s7, [r3]
 800b168:	edc3 6a01 	vstr	s13, [r3, #4]
 800b16c:	4456      	add	r6, sl
 800b16e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b172:	edc7 0a00 	vstr	s1, [r7]
 800b176:	4453      	add	r3, sl
 800b178:	ed80 2a00 	vstr	s4, [r0]
 800b17c:	edc0 2a01 	vstr	s5, [r0, #4]
 800b180:	4457      	add	r7, sl
 800b182:	edc2 1a00 	vstr	s3, [r2]
 800b186:	ed82 7a01 	vstr	s14, [r2, #4]
 800b18a:	4450      	add	r0, sl
 800b18c:	ed85 8a00 	vstr	s16, [r5]
 800b190:	ed85 0a01 	vstr	s0, [r5, #4]
 800b194:	4452      	add	r2, sl
 800b196:	edc1 4a00 	vstr	s9, [r1]
 800b19a:	4455      	add	r5, sl
 800b19c:	ed81 3a01 	vstr	s6, [r1, #4]
 800b1a0:	edc4 8a00 	vstr	s17, [r4]
 800b1a4:	ed84 6a01 	vstr	s12, [r4, #4]
 800b1a8:	4451      	add	r1, sl
 800b1aa:	4454      	add	r4, sl
 800b1ac:	f63f aeea 	bhi.w	800af84 <arm_radix8_butterfly_f32+0x2fc>
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1be:	3308      	adds	r3, #8
 800b1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c2:	9b08      	ldr	r3, [sp, #32]
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	9308      	str	r3, [sp, #32]
 800b1c8:	9b07      	ldr	r3, [sp, #28]
 800b1ca:	3308      	adds	r3, #8
 800b1cc:	9307      	str	r3, [sp, #28]
 800b1ce:	9b06      	ldr	r3, [sp, #24]
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	9306      	str	r3, [sp, #24]
 800b1d4:	9b05      	ldr	r3, [sp, #20]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	9305      	str	r3, [sp, #20]
 800b1da:	9b04      	ldr	r3, [sp, #16]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	9304      	str	r3, [sp, #16]
 800b1e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1e2:	f109 0901 	add.w	r9, r9, #1
 800b1e6:	454b      	cmp	r3, r9
 800b1e8:	f47f ae7d 	bne.w	800aee6 <arm_radix8_butterfly_f32+0x25e>
 800b1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	46d9      	mov	r9, fp
 800b1f4:	9310      	str	r3, [sp, #64]	; 0x40
 800b1f6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800b1fa:	e554      	b.n	800aca6 <arm_radix8_butterfly_f32+0x1e>
 800b1fc:	b015      	add	sp, #84	; 0x54
 800b1fe:	ecbd 8b10 	vpop	{d8-d15}
 800b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b206:	bf00      	nop

0800b208 <memset>:
 800b208:	4402      	add	r2, r0
 800b20a:	4603      	mov	r3, r0
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d100      	bne.n	800b212 <memset+0xa>
 800b210:	4770      	bx	lr
 800b212:	f803 1b01 	strb.w	r1, [r3], #1
 800b216:	e7f9      	b.n	800b20c <memset+0x4>

0800b218 <__errno>:
 800b218:	4b01      	ldr	r3, [pc, #4]	; (800b220 <__errno+0x8>)
 800b21a:	6818      	ldr	r0, [r3, #0]
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	200078c0 	.word	0x200078c0

0800b224 <__libc_init_array>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4d0d      	ldr	r5, [pc, #52]	; (800b25c <__libc_init_array+0x38>)
 800b228:	4c0d      	ldr	r4, [pc, #52]	; (800b260 <__libc_init_array+0x3c>)
 800b22a:	1b64      	subs	r4, r4, r5
 800b22c:	10a4      	asrs	r4, r4, #2
 800b22e:	2600      	movs	r6, #0
 800b230:	42a6      	cmp	r6, r4
 800b232:	d109      	bne.n	800b248 <__libc_init_array+0x24>
 800b234:	4d0b      	ldr	r5, [pc, #44]	; (800b264 <__libc_init_array+0x40>)
 800b236:	4c0c      	ldr	r4, [pc, #48]	; (800b268 <__libc_init_array+0x44>)
 800b238:	f001 f96c 	bl	800c514 <_init>
 800b23c:	1b64      	subs	r4, r4, r5
 800b23e:	10a4      	asrs	r4, r4, #2
 800b240:	2600      	movs	r6, #0
 800b242:	42a6      	cmp	r6, r4
 800b244:	d105      	bne.n	800b252 <__libc_init_array+0x2e>
 800b246:	bd70      	pop	{r4, r5, r6, pc}
 800b248:	f855 3b04 	ldr.w	r3, [r5], #4
 800b24c:	4798      	blx	r3
 800b24e:	3601      	adds	r6, #1
 800b250:	e7ee      	b.n	800b230 <__libc_init_array+0xc>
 800b252:	f855 3b04 	ldr.w	r3, [r5], #4
 800b256:	4798      	blx	r3
 800b258:	3601      	adds	r6, #1
 800b25a:	e7f2      	b.n	800b242 <__libc_init_array+0x1e>
 800b25c:	0801f588 	.word	0x0801f588
 800b260:	0801f588 	.word	0x0801f588
 800b264:	0801f588 	.word	0x0801f588
 800b268:	0801f58c 	.word	0x0801f58c
 800b26c:	00000000 	.word	0x00000000

0800b270 <exp>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	ed2d 8b02 	vpush	{d8}
 800b276:	ec55 4b10 	vmov	r4, r5, d0
 800b27a:	f000 f9e5 	bl	800b648 <__ieee754_exp>
 800b27e:	eeb0 8a40 	vmov.f32	s16, s0
 800b282:	eef0 8a60 	vmov.f32	s17, s1
 800b286:	ec45 4b10 	vmov	d0, r4, r5
 800b28a:	f000 f8f3 	bl	800b474 <finite>
 800b28e:	b168      	cbz	r0, 800b2ac <exp+0x3c>
 800b290:	a317      	add	r3, pc, #92	; (adr r3, 800b2f0 <exp+0x80>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	4620      	mov	r0, r4
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f5 fc09 	bl	8000ab0 <__aeabi_dcmpgt>
 800b29e:	b160      	cbz	r0, 800b2ba <exp+0x4a>
 800b2a0:	f7ff ffba 	bl	800b218 <__errno>
 800b2a4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800b2e0 <exp+0x70>
 800b2a8:	2322      	movs	r3, #34	; 0x22
 800b2aa:	6003      	str	r3, [r0, #0]
 800b2ac:	eeb0 0a48 	vmov.f32	s0, s16
 800b2b0:	eef0 0a68 	vmov.f32	s1, s17
 800b2b4:	ecbd 8b02 	vpop	{d8}
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	a30f      	add	r3, pc, #60	; (adr r3, 800b2f8 <exp+0x88>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 fbd6 	bl	8000a74 <__aeabi_dcmplt>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d0ef      	beq.n	800b2ac <exp+0x3c>
 800b2cc:	f7ff ffa4 	bl	800b218 <__errno>
 800b2d0:	2322      	movs	r3, #34	; 0x22
 800b2d2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800b2e8 <exp+0x78>
 800b2d6:	6003      	str	r3, [r0, #0]
 800b2d8:	e7e8      	b.n	800b2ac <exp+0x3c>
 800b2da:	bf00      	nop
 800b2dc:	f3af 8000 	nop.w
 800b2e0:	00000000 	.word	0x00000000
 800b2e4:	7ff00000 	.word	0x7ff00000
	...
 800b2f0:	fefa39ef 	.word	0xfefa39ef
 800b2f4:	40862e42 	.word	0x40862e42
 800b2f8:	d52d3051 	.word	0xd52d3051
 800b2fc:	c0874910 	.word	0xc0874910

0800b300 <pow>:
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b302:	ed2d 8b02 	vpush	{d8}
 800b306:	eeb0 8a40 	vmov.f32	s16, s0
 800b30a:	eef0 8a60 	vmov.f32	s17, s1
 800b30e:	ec55 4b11 	vmov	r4, r5, d1
 800b312:	f000 fb1d 	bl	800b950 <__ieee754_pow>
 800b316:	4622      	mov	r2, r4
 800b318:	462b      	mov	r3, r5
 800b31a:	4620      	mov	r0, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	ec57 6b10 	vmov	r6, r7, d0
 800b322:	f7f5 fbcf 	bl	8000ac4 <__aeabi_dcmpun>
 800b326:	2800      	cmp	r0, #0
 800b328:	d13b      	bne.n	800b3a2 <pow+0xa2>
 800b32a:	ec51 0b18 	vmov	r0, r1, d8
 800b32e:	2200      	movs	r2, #0
 800b330:	2300      	movs	r3, #0
 800b332:	f7f5 fb95 	bl	8000a60 <__aeabi_dcmpeq>
 800b336:	b1b8      	cbz	r0, 800b368 <pow+0x68>
 800b338:	2200      	movs	r2, #0
 800b33a:	2300      	movs	r3, #0
 800b33c:	4620      	mov	r0, r4
 800b33e:	4629      	mov	r1, r5
 800b340:	f7f5 fb8e 	bl	8000a60 <__aeabi_dcmpeq>
 800b344:	2800      	cmp	r0, #0
 800b346:	d146      	bne.n	800b3d6 <pow+0xd6>
 800b348:	ec45 4b10 	vmov	d0, r4, r5
 800b34c:	f000 f892 	bl	800b474 <finite>
 800b350:	b338      	cbz	r0, 800b3a2 <pow+0xa2>
 800b352:	2200      	movs	r2, #0
 800b354:	2300      	movs	r3, #0
 800b356:	4620      	mov	r0, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	f7f5 fb8b 	bl	8000a74 <__aeabi_dcmplt>
 800b35e:	b300      	cbz	r0, 800b3a2 <pow+0xa2>
 800b360:	f7ff ff5a 	bl	800b218 <__errno>
 800b364:	2322      	movs	r3, #34	; 0x22
 800b366:	e01b      	b.n	800b3a0 <pow+0xa0>
 800b368:	ec47 6b10 	vmov	d0, r6, r7
 800b36c:	f000 f882 	bl	800b474 <finite>
 800b370:	b9e0      	cbnz	r0, 800b3ac <pow+0xac>
 800b372:	eeb0 0a48 	vmov.f32	s0, s16
 800b376:	eef0 0a68 	vmov.f32	s1, s17
 800b37a:	f000 f87b 	bl	800b474 <finite>
 800b37e:	b1a8      	cbz	r0, 800b3ac <pow+0xac>
 800b380:	ec45 4b10 	vmov	d0, r4, r5
 800b384:	f000 f876 	bl	800b474 <finite>
 800b388:	b180      	cbz	r0, 800b3ac <pow+0xac>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	4630      	mov	r0, r6
 800b390:	4639      	mov	r1, r7
 800b392:	f7f5 fb97 	bl	8000ac4 <__aeabi_dcmpun>
 800b396:	2800      	cmp	r0, #0
 800b398:	d0e2      	beq.n	800b360 <pow+0x60>
 800b39a:	f7ff ff3d 	bl	800b218 <__errno>
 800b39e:	2321      	movs	r3, #33	; 0x21
 800b3a0:	6003      	str	r3, [r0, #0]
 800b3a2:	ecbd 8b02 	vpop	{d8}
 800b3a6:	ec47 6b10 	vmov	d0, r6, r7
 800b3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	4639      	mov	r1, r7
 800b3b4:	f7f5 fb54 	bl	8000a60 <__aeabi_dcmpeq>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d0f2      	beq.n	800b3a2 <pow+0xa2>
 800b3bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b3c0:	eef0 0a68 	vmov.f32	s1, s17
 800b3c4:	f000 f856 	bl	800b474 <finite>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d0ea      	beq.n	800b3a2 <pow+0xa2>
 800b3cc:	ec45 4b10 	vmov	d0, r4, r5
 800b3d0:	f000 f850 	bl	800b474 <finite>
 800b3d4:	e7c3      	b.n	800b35e <pow+0x5e>
 800b3d6:	4f01      	ldr	r7, [pc, #4]	; (800b3dc <pow+0xdc>)
 800b3d8:	2600      	movs	r6, #0
 800b3da:	e7e2      	b.n	800b3a2 <pow+0xa2>
 800b3dc:	3ff00000 	.word	0x3ff00000

0800b3e0 <sqrt>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	ed2d 8b02 	vpush	{d8}
 800b3e6:	ec55 4b10 	vmov	r4, r5, d0
 800b3ea:	f000 f84f 	bl	800b48c <__ieee754_sqrt>
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	462b      	mov	r3, r5
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	eeb0 8a40 	vmov.f32	s16, s0
 800b3fa:	eef0 8a60 	vmov.f32	s17, s1
 800b3fe:	f7f5 fb61 	bl	8000ac4 <__aeabi_dcmpun>
 800b402:	b990      	cbnz	r0, 800b42a <sqrt+0x4a>
 800b404:	2200      	movs	r2, #0
 800b406:	2300      	movs	r3, #0
 800b408:	4620      	mov	r0, r4
 800b40a:	4629      	mov	r1, r5
 800b40c:	f7f5 fb32 	bl	8000a74 <__aeabi_dcmplt>
 800b410:	b158      	cbz	r0, 800b42a <sqrt+0x4a>
 800b412:	f7ff ff01 	bl	800b218 <__errno>
 800b416:	2321      	movs	r3, #33	; 0x21
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	2200      	movs	r2, #0
 800b41c:	2300      	movs	r3, #0
 800b41e:	4610      	mov	r0, r2
 800b420:	4619      	mov	r1, r3
 800b422:	f7f5 f9df 	bl	80007e4 <__aeabi_ddiv>
 800b426:	ec41 0b18 	vmov	d8, r0, r1
 800b42a:	eeb0 0a48 	vmov.f32	s0, s16
 800b42e:	eef0 0a68 	vmov.f32	s1, s17
 800b432:	ecbd 8b02 	vpop	{d8}
 800b436:	bd38      	pop	{r3, r4, r5, pc}

0800b438 <sqrtf>:
 800b438:	b508      	push	{r3, lr}
 800b43a:	ed2d 8b02 	vpush	{d8}
 800b43e:	eeb0 8a40 	vmov.f32	s16, s0
 800b442:	f000 f8fd 	bl	800b640 <__ieee754_sqrtf>
 800b446:	eeb4 8a48 	vcmp.f32	s16, s16
 800b44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44e:	d60c      	bvs.n	800b46a <sqrtf+0x32>
 800b450:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b470 <sqrtf+0x38>
 800b454:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b45c:	d505      	bpl.n	800b46a <sqrtf+0x32>
 800b45e:	f7ff fedb 	bl	800b218 <__errno>
 800b462:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b466:	2321      	movs	r3, #33	; 0x21
 800b468:	6003      	str	r3, [r0, #0]
 800b46a:	ecbd 8b02 	vpop	{d8}
 800b46e:	bd08      	pop	{r3, pc}
 800b470:	00000000 	.word	0x00000000

0800b474 <finite>:
 800b474:	b082      	sub	sp, #8
 800b476:	ed8d 0b00 	vstr	d0, [sp]
 800b47a:	9801      	ldr	r0, [sp, #4]
 800b47c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b480:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b484:	0fc0      	lsrs	r0, r0, #31
 800b486:	b002      	add	sp, #8
 800b488:	4770      	bx	lr
	...

0800b48c <__ieee754_sqrt>:
 800b48c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	ec55 4b10 	vmov	r4, r5, d0
 800b494:	4e67      	ldr	r6, [pc, #412]	; (800b634 <__ieee754_sqrt+0x1a8>)
 800b496:	43ae      	bics	r6, r5
 800b498:	ee10 0a10 	vmov	r0, s0
 800b49c:	ee10 2a10 	vmov	r2, s0
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	d10d      	bne.n	800b4c2 <__ieee754_sqrt+0x36>
 800b4a6:	f7f5 f873 	bl	8000590 <__aeabi_dmul>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7f4 feb7 	bl	8000224 <__adddf3>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	ec45 4b10 	vmov	d0, r4, r5
 800b4be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c2:	2d00      	cmp	r5, #0
 800b4c4:	dc0b      	bgt.n	800b4de <__ieee754_sqrt+0x52>
 800b4c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b4ca:	4326      	orrs	r6, r4
 800b4cc:	d0f5      	beq.n	800b4ba <__ieee754_sqrt+0x2e>
 800b4ce:	b135      	cbz	r5, 800b4de <__ieee754_sqrt+0x52>
 800b4d0:	f7f4 fea6 	bl	8000220 <__aeabi_dsub>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	f7f5 f984 	bl	80007e4 <__aeabi_ddiv>
 800b4dc:	e7eb      	b.n	800b4b6 <__ieee754_sqrt+0x2a>
 800b4de:	1509      	asrs	r1, r1, #20
 800b4e0:	f000 808d 	beq.w	800b5fe <__ieee754_sqrt+0x172>
 800b4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4e8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4f0:	07c9      	lsls	r1, r1, #31
 800b4f2:	bf5c      	itt	pl
 800b4f4:	005b      	lslpl	r3, r3, #1
 800b4f6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b4fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4fe:	bf58      	it	pl
 800b500:	0052      	lslpl	r2, r2, #1
 800b502:	2500      	movs	r5, #0
 800b504:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b508:	1076      	asrs	r6, r6, #1
 800b50a:	0052      	lsls	r2, r2, #1
 800b50c:	f04f 0e16 	mov.w	lr, #22
 800b510:	46ac      	mov	ip, r5
 800b512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b516:	eb0c 0001 	add.w	r0, ip, r1
 800b51a:	4298      	cmp	r0, r3
 800b51c:	bfde      	ittt	le
 800b51e:	1a1b      	suble	r3, r3, r0
 800b520:	eb00 0c01 	addle.w	ip, r0, r1
 800b524:	186d      	addle	r5, r5, r1
 800b526:	005b      	lsls	r3, r3, #1
 800b528:	f1be 0e01 	subs.w	lr, lr, #1
 800b52c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b530:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b534:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b538:	d1ed      	bne.n	800b516 <__ieee754_sqrt+0x8a>
 800b53a:	4674      	mov	r4, lr
 800b53c:	2720      	movs	r7, #32
 800b53e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b542:	4563      	cmp	r3, ip
 800b544:	eb01 000e 	add.w	r0, r1, lr
 800b548:	dc02      	bgt.n	800b550 <__ieee754_sqrt+0xc4>
 800b54a:	d113      	bne.n	800b574 <__ieee754_sqrt+0xe8>
 800b54c:	4290      	cmp	r0, r2
 800b54e:	d811      	bhi.n	800b574 <__ieee754_sqrt+0xe8>
 800b550:	2800      	cmp	r0, #0
 800b552:	eb00 0e01 	add.w	lr, r0, r1
 800b556:	da57      	bge.n	800b608 <__ieee754_sqrt+0x17c>
 800b558:	f1be 0f00 	cmp.w	lr, #0
 800b55c:	db54      	blt.n	800b608 <__ieee754_sqrt+0x17c>
 800b55e:	f10c 0801 	add.w	r8, ip, #1
 800b562:	eba3 030c 	sub.w	r3, r3, ip
 800b566:	4290      	cmp	r0, r2
 800b568:	bf88      	it	hi
 800b56a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b56e:	1a12      	subs	r2, r2, r0
 800b570:	440c      	add	r4, r1
 800b572:	46c4      	mov	ip, r8
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	3f01      	subs	r7, #1
 800b578:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b57c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b580:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b584:	d1dd      	bne.n	800b542 <__ieee754_sqrt+0xb6>
 800b586:	4313      	orrs	r3, r2
 800b588:	d01b      	beq.n	800b5c2 <__ieee754_sqrt+0x136>
 800b58a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b638 <__ieee754_sqrt+0x1ac>
 800b58e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b63c <__ieee754_sqrt+0x1b0>
 800b592:	e9da 0100 	ldrd	r0, r1, [sl]
 800b596:	e9db 2300 	ldrd	r2, r3, [fp]
 800b59a:	f7f4 fe41 	bl	8000220 <__aeabi_dsub>
 800b59e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	f7f5 fa6d 	bl	8000a88 <__aeabi_dcmple>
 800b5ae:	b140      	cbz	r0, 800b5c2 <__ieee754_sqrt+0x136>
 800b5b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b5b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5bc:	d126      	bne.n	800b60c <__ieee754_sqrt+0x180>
 800b5be:	3501      	adds	r5, #1
 800b5c0:	463c      	mov	r4, r7
 800b5c2:	106a      	asrs	r2, r5, #1
 800b5c4:	0863      	lsrs	r3, r4, #1
 800b5c6:	07e9      	lsls	r1, r5, #31
 800b5c8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b5cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b5d0:	bf48      	it	mi
 800b5d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b5d6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b5da:	461c      	mov	r4, r3
 800b5dc:	e76d      	b.n	800b4ba <__ieee754_sqrt+0x2e>
 800b5de:	0ad3      	lsrs	r3, r2, #11
 800b5e0:	3815      	subs	r0, #21
 800b5e2:	0552      	lsls	r2, r2, #21
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0fa      	beq.n	800b5de <__ieee754_sqrt+0x152>
 800b5e8:	02dc      	lsls	r4, r3, #11
 800b5ea:	d50a      	bpl.n	800b602 <__ieee754_sqrt+0x176>
 800b5ec:	f1c1 0420 	rsb	r4, r1, #32
 800b5f0:	fa22 f404 	lsr.w	r4, r2, r4
 800b5f4:	1e4d      	subs	r5, r1, #1
 800b5f6:	408a      	lsls	r2, r1
 800b5f8:	4323      	orrs	r3, r4
 800b5fa:	1b41      	subs	r1, r0, r5
 800b5fc:	e772      	b.n	800b4e4 <__ieee754_sqrt+0x58>
 800b5fe:	4608      	mov	r0, r1
 800b600:	e7f0      	b.n	800b5e4 <__ieee754_sqrt+0x158>
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	3101      	adds	r1, #1
 800b606:	e7ef      	b.n	800b5e8 <__ieee754_sqrt+0x15c>
 800b608:	46e0      	mov	r8, ip
 800b60a:	e7aa      	b.n	800b562 <__ieee754_sqrt+0xd6>
 800b60c:	f7f4 fe0a 	bl	8000224 <__adddf3>
 800b610:	e9da 8900 	ldrd	r8, r9, [sl]
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4640      	mov	r0, r8
 800b61a:	4649      	mov	r1, r9
 800b61c:	f7f5 fa2a 	bl	8000a74 <__aeabi_dcmplt>
 800b620:	b120      	cbz	r0, 800b62c <__ieee754_sqrt+0x1a0>
 800b622:	1ca0      	adds	r0, r4, #2
 800b624:	bf08      	it	eq
 800b626:	3501      	addeq	r5, #1
 800b628:	3402      	adds	r4, #2
 800b62a:	e7ca      	b.n	800b5c2 <__ieee754_sqrt+0x136>
 800b62c:	3401      	adds	r4, #1
 800b62e:	f024 0401 	bic.w	r4, r4, #1
 800b632:	e7c6      	b.n	800b5c2 <__ieee754_sqrt+0x136>
 800b634:	7ff00000 	.word	0x7ff00000
 800b638:	200078c8 	.word	0x200078c8
 800b63c:	200078d0 	.word	0x200078d0

0800b640 <__ieee754_sqrtf>:
 800b640:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b644:	4770      	bx	lr
	...

0800b648 <__ieee754_exp>:
 800b648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64c:	ec55 4b10 	vmov	r4, r5, d0
 800b650:	49b5      	ldr	r1, [pc, #724]	; (800b928 <__ieee754_exp+0x2e0>)
 800b652:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b656:	428a      	cmp	r2, r1
 800b658:	ed2d 8b04 	vpush	{d8-d9}
 800b65c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b660:	d93b      	bls.n	800b6da <__ieee754_exp+0x92>
 800b662:	49b2      	ldr	r1, [pc, #712]	; (800b92c <__ieee754_exp+0x2e4>)
 800b664:	428a      	cmp	r2, r1
 800b666:	d916      	bls.n	800b696 <__ieee754_exp+0x4e>
 800b668:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b66c:	4323      	orrs	r3, r4
 800b66e:	ee10 2a10 	vmov	r2, s0
 800b672:	d007      	beq.n	800b684 <__ieee754_exp+0x3c>
 800b674:	462b      	mov	r3, r5
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f4 fdd3 	bl	8000224 <__adddf3>
 800b67e:	4604      	mov	r4, r0
 800b680:	460d      	mov	r5, r1
 800b682:	e002      	b.n	800b68a <__ieee754_exp+0x42>
 800b684:	b10e      	cbz	r6, 800b68a <__ieee754_exp+0x42>
 800b686:	2400      	movs	r4, #0
 800b688:	2500      	movs	r5, #0
 800b68a:	ecbd 8b04 	vpop	{d8-d9}
 800b68e:	ec45 4b10 	vmov	d0, r4, r5
 800b692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b696:	a38e      	add	r3, pc, #568	; (adr r3, 800b8d0 <__ieee754_exp+0x288>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	ee10 0a10 	vmov	r0, s0
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7f5 fa05 	bl	8000ab0 <__aeabi_dcmpgt>
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	b130      	cbz	r0, 800b6b8 <__ieee754_exp+0x70>
 800b6aa:	ecbd 8b04 	vpop	{d8-d9}
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b4:	f000 bf25 	b.w	800c502 <__math_oflow>
 800b6b8:	a387      	add	r3, pc, #540	; (adr r3, 800b8d8 <__ieee754_exp+0x290>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	f7f5 f9d7 	bl	8000a74 <__aeabi_dcmplt>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f000 808b 	beq.w	800b7e2 <__ieee754_exp+0x19a>
 800b6cc:	ecbd 8b04 	vpop	{d8-d9}
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d6:	f000 bf0b 	b.w	800c4f0 <__math_uflow>
 800b6da:	4b95      	ldr	r3, [pc, #596]	; (800b930 <__ieee754_exp+0x2e8>)
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	f240 80ac 	bls.w	800b83a <__ieee754_exp+0x1f2>
 800b6e2:	4b94      	ldr	r3, [pc, #592]	; (800b934 <__ieee754_exp+0x2ec>)
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d87c      	bhi.n	800b7e2 <__ieee754_exp+0x19a>
 800b6e8:	4b93      	ldr	r3, [pc, #588]	; (800b938 <__ieee754_exp+0x2f0>)
 800b6ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f2:	ee10 0a10 	vmov	r0, s0
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	f7f4 fd92 	bl	8000220 <__aeabi_dsub>
 800b6fc:	4b8f      	ldr	r3, [pc, #572]	; (800b93c <__ieee754_exp+0x2f4>)
 800b6fe:	00f7      	lsls	r7, r6, #3
 800b700:	443b      	add	r3, r7
 800b702:	ed93 7b00 	vldr	d7, [r3]
 800b706:	f1c6 0a01 	rsb	sl, r6, #1
 800b70a:	4680      	mov	r8, r0
 800b70c:	4689      	mov	r9, r1
 800b70e:	ebaa 0a06 	sub.w	sl, sl, r6
 800b712:	eeb0 8a47 	vmov.f32	s16, s14
 800b716:	eef0 8a67 	vmov.f32	s17, s15
 800b71a:	ec53 2b18 	vmov	r2, r3, d8
 800b71e:	4640      	mov	r0, r8
 800b720:	4649      	mov	r1, r9
 800b722:	f7f4 fd7d 	bl	8000220 <__aeabi_dsub>
 800b726:	4604      	mov	r4, r0
 800b728:	460d      	mov	r5, r1
 800b72a:	4622      	mov	r2, r4
 800b72c:	462b      	mov	r3, r5
 800b72e:	4620      	mov	r0, r4
 800b730:	4629      	mov	r1, r5
 800b732:	f7f4 ff2d 	bl	8000590 <__aeabi_dmul>
 800b736:	a36a      	add	r3, pc, #424	; (adr r3, 800b8e0 <__ieee754_exp+0x298>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	4606      	mov	r6, r0
 800b73e:	460f      	mov	r7, r1
 800b740:	f7f4 ff26 	bl	8000590 <__aeabi_dmul>
 800b744:	a368      	add	r3, pc, #416	; (adr r3, 800b8e8 <__ieee754_exp+0x2a0>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd69 	bl	8000220 <__aeabi_dsub>
 800b74e:	4632      	mov	r2, r6
 800b750:	463b      	mov	r3, r7
 800b752:	f7f4 ff1d 	bl	8000590 <__aeabi_dmul>
 800b756:	a366      	add	r3, pc, #408	; (adr r3, 800b8f0 <__ieee754_exp+0x2a8>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f4 fd62 	bl	8000224 <__adddf3>
 800b760:	4632      	mov	r2, r6
 800b762:	463b      	mov	r3, r7
 800b764:	f7f4 ff14 	bl	8000590 <__aeabi_dmul>
 800b768:	a363      	add	r3, pc, #396	; (adr r3, 800b8f8 <__ieee754_exp+0x2b0>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f7f4 fd57 	bl	8000220 <__aeabi_dsub>
 800b772:	4632      	mov	r2, r6
 800b774:	463b      	mov	r3, r7
 800b776:	f7f4 ff0b 	bl	8000590 <__aeabi_dmul>
 800b77a:	a361      	add	r3, pc, #388	; (adr r3, 800b900 <__ieee754_exp+0x2b8>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	f7f4 fd50 	bl	8000224 <__adddf3>
 800b784:	4632      	mov	r2, r6
 800b786:	463b      	mov	r3, r7
 800b788:	f7f4 ff02 	bl	8000590 <__aeabi_dmul>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	4620      	mov	r0, r4
 800b792:	4629      	mov	r1, r5
 800b794:	f7f4 fd44 	bl	8000220 <__aeabi_dsub>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4606      	mov	r6, r0
 800b79e:	460f      	mov	r7, r1
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f7f4 fef4 	bl	8000590 <__aeabi_dmul>
 800b7a8:	ec41 0b19 	vmov	d9, r0, r1
 800b7ac:	f1ba 0f00 	cmp.w	sl, #0
 800b7b0:	d15d      	bne.n	800b86e <__ieee754_exp+0x226>
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f4 fd30 	bl	8000220 <__aeabi_dsub>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	ec51 0b19 	vmov	r0, r1, d9
 800b7c8:	f7f5 f80c 	bl	80007e4 <__aeabi_ddiv>
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	462b      	mov	r3, r5
 800b7d0:	f7f4 fd26 	bl	8000220 <__aeabi_dsub>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	2000      	movs	r0, #0
 800b7da:	4959      	ldr	r1, [pc, #356]	; (800b940 <__ieee754_exp+0x2f8>)
 800b7dc:	f7f4 fd20 	bl	8000220 <__aeabi_dsub>
 800b7e0:	e74d      	b.n	800b67e <__ieee754_exp+0x36>
 800b7e2:	4b58      	ldr	r3, [pc, #352]	; (800b944 <__ieee754_exp+0x2fc>)
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	a346      	add	r3, pc, #280	; (adr r3, 800b908 <__ieee754_exp+0x2c0>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	f7f4 fecd 	bl	8000590 <__aeabi_dmul>
 800b7f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7fa:	f7f4 fd13 	bl	8000224 <__adddf3>
 800b7fe:	f7f5 f977 	bl	8000af0 <__aeabi_d2iz>
 800b802:	4682      	mov	sl, r0
 800b804:	f7f4 fe5a 	bl	80004bc <__aeabi_i2d>
 800b808:	a341      	add	r3, pc, #260	; (adr r3, 800b910 <__ieee754_exp+0x2c8>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	4606      	mov	r6, r0
 800b810:	460f      	mov	r7, r1
 800b812:	f7f4 febd 	bl	8000590 <__aeabi_dmul>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4620      	mov	r0, r4
 800b81c:	4629      	mov	r1, r5
 800b81e:	f7f4 fcff 	bl	8000220 <__aeabi_dsub>
 800b822:	a33d      	add	r3, pc, #244	; (adr r3, 800b918 <__ieee754_exp+0x2d0>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	4680      	mov	r8, r0
 800b82a:	4689      	mov	r9, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f4 feae 	bl	8000590 <__aeabi_dmul>
 800b834:	ec41 0b18 	vmov	d8, r0, r1
 800b838:	e76f      	b.n	800b71a <__ieee754_exp+0xd2>
 800b83a:	4b43      	ldr	r3, [pc, #268]	; (800b948 <__ieee754_exp+0x300>)
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d811      	bhi.n	800b864 <__ieee754_exp+0x21c>
 800b840:	a337      	add	r3, pc, #220	; (adr r3, 800b920 <__ieee754_exp+0x2d8>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	ee10 0a10 	vmov	r0, s0
 800b84a:	4629      	mov	r1, r5
 800b84c:	f7f4 fcea 	bl	8000224 <__adddf3>
 800b850:	4b3b      	ldr	r3, [pc, #236]	; (800b940 <__ieee754_exp+0x2f8>)
 800b852:	2200      	movs	r2, #0
 800b854:	f7f5 f92c 	bl	8000ab0 <__aeabi_dcmpgt>
 800b858:	b138      	cbz	r0, 800b86a <__ieee754_exp+0x222>
 800b85a:	4b39      	ldr	r3, [pc, #228]	; (800b940 <__ieee754_exp+0x2f8>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	e70a      	b.n	800b67a <__ieee754_exp+0x32>
 800b864:	f04f 0a00 	mov.w	sl, #0
 800b868:	e75f      	b.n	800b72a <__ieee754_exp+0xe2>
 800b86a:	4682      	mov	sl, r0
 800b86c:	e75d      	b.n	800b72a <__ieee754_exp+0xe2>
 800b86e:	4632      	mov	r2, r6
 800b870:	463b      	mov	r3, r7
 800b872:	2000      	movs	r0, #0
 800b874:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b878:	f7f4 fcd2 	bl	8000220 <__aeabi_dsub>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	ec51 0b19 	vmov	r0, r1, d9
 800b884:	f7f4 ffae 	bl	80007e4 <__aeabi_ddiv>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	ec51 0b18 	vmov	r0, r1, d8
 800b890:	f7f4 fcc6 	bl	8000220 <__aeabi_dsub>
 800b894:	4642      	mov	r2, r8
 800b896:	464b      	mov	r3, r9
 800b898:	f7f4 fcc2 	bl	8000220 <__aeabi_dsub>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	4927      	ldr	r1, [pc, #156]	; (800b940 <__ieee754_exp+0x2f8>)
 800b8a4:	f7f4 fcbc 	bl	8000220 <__aeabi_dsub>
 800b8a8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800b8ac:	4592      	cmp	sl, r2
 800b8ae:	db02      	blt.n	800b8b6 <__ieee754_exp+0x26e>
 800b8b0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b8b4:	e6e3      	b.n	800b67e <__ieee754_exp+0x36>
 800b8b6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800b8ba:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800b8c4:	f7f4 fe64 	bl	8000590 <__aeabi_dmul>
 800b8c8:	e6d9      	b.n	800b67e <__ieee754_exp+0x36>
 800b8ca:	bf00      	nop
 800b8cc:	f3af 8000 	nop.w
 800b8d0:	fefa39ef 	.word	0xfefa39ef
 800b8d4:	40862e42 	.word	0x40862e42
 800b8d8:	d52d3051 	.word	0xd52d3051
 800b8dc:	c0874910 	.word	0xc0874910
 800b8e0:	72bea4d0 	.word	0x72bea4d0
 800b8e4:	3e663769 	.word	0x3e663769
 800b8e8:	c5d26bf1 	.word	0xc5d26bf1
 800b8ec:	3ebbbd41 	.word	0x3ebbbd41
 800b8f0:	af25de2c 	.word	0xaf25de2c
 800b8f4:	3f11566a 	.word	0x3f11566a
 800b8f8:	16bebd93 	.word	0x16bebd93
 800b8fc:	3f66c16c 	.word	0x3f66c16c
 800b900:	5555553e 	.word	0x5555553e
 800b904:	3fc55555 	.word	0x3fc55555
 800b908:	652b82fe 	.word	0x652b82fe
 800b90c:	3ff71547 	.word	0x3ff71547
 800b910:	fee00000 	.word	0xfee00000
 800b914:	3fe62e42 	.word	0x3fe62e42
 800b918:	35793c76 	.word	0x35793c76
 800b91c:	3dea39ef 	.word	0x3dea39ef
 800b920:	8800759c 	.word	0x8800759c
 800b924:	7e37e43c 	.word	0x7e37e43c
 800b928:	40862e41 	.word	0x40862e41
 800b92c:	7fefffff 	.word	0x7fefffff
 800b930:	3fd62e42 	.word	0x3fd62e42
 800b934:	3ff0a2b1 	.word	0x3ff0a2b1
 800b938:	0801f538 	.word	0x0801f538
 800b93c:	0801f548 	.word	0x0801f548
 800b940:	3ff00000 	.word	0x3ff00000
 800b944:	0801f528 	.word	0x0801f528
 800b948:	3defffff 	.word	0x3defffff
 800b94c:	00000000 	.word	0x00000000

0800b950 <__ieee754_pow>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	ed2d 8b06 	vpush	{d8-d10}
 800b958:	b089      	sub	sp, #36	; 0x24
 800b95a:	ed8d 1b00 	vstr	d1, [sp]
 800b95e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b962:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b966:	ea58 0102 	orrs.w	r1, r8, r2
 800b96a:	ec57 6b10 	vmov	r6, r7, d0
 800b96e:	d115      	bne.n	800b99c <__ieee754_pow+0x4c>
 800b970:	19b3      	adds	r3, r6, r6
 800b972:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b976:	4152      	adcs	r2, r2
 800b978:	4299      	cmp	r1, r3
 800b97a:	4b89      	ldr	r3, [pc, #548]	; (800bba0 <__ieee754_pow+0x250>)
 800b97c:	4193      	sbcs	r3, r2
 800b97e:	f080 84d1 	bcs.w	800c324 <__ieee754_pow+0x9d4>
 800b982:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b986:	4630      	mov	r0, r6
 800b988:	4639      	mov	r1, r7
 800b98a:	f7f4 fc4b 	bl	8000224 <__adddf3>
 800b98e:	ec41 0b10 	vmov	d0, r0, r1
 800b992:	b009      	add	sp, #36	; 0x24
 800b994:	ecbd 8b06 	vpop	{d8-d10}
 800b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99c:	4b81      	ldr	r3, [pc, #516]	; (800bba4 <__ieee754_pow+0x254>)
 800b99e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b9a2:	429c      	cmp	r4, r3
 800b9a4:	ee10 aa10 	vmov	sl, s0
 800b9a8:	463d      	mov	r5, r7
 800b9aa:	dc06      	bgt.n	800b9ba <__ieee754_pow+0x6a>
 800b9ac:	d101      	bne.n	800b9b2 <__ieee754_pow+0x62>
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	d1e7      	bne.n	800b982 <__ieee754_pow+0x32>
 800b9b2:	4598      	cmp	r8, r3
 800b9b4:	dc01      	bgt.n	800b9ba <__ieee754_pow+0x6a>
 800b9b6:	d10f      	bne.n	800b9d8 <__ieee754_pow+0x88>
 800b9b8:	b172      	cbz	r2, 800b9d8 <__ieee754_pow+0x88>
 800b9ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b9be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b9c2:	ea55 050a 	orrs.w	r5, r5, sl
 800b9c6:	d1dc      	bne.n	800b982 <__ieee754_pow+0x32>
 800b9c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9cc:	18db      	adds	r3, r3, r3
 800b9ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b9d2:	4152      	adcs	r2, r2
 800b9d4:	429d      	cmp	r5, r3
 800b9d6:	e7d0      	b.n	800b97a <__ieee754_pow+0x2a>
 800b9d8:	2d00      	cmp	r5, #0
 800b9da:	da3b      	bge.n	800ba54 <__ieee754_pow+0x104>
 800b9dc:	4b72      	ldr	r3, [pc, #456]	; (800bba8 <__ieee754_pow+0x258>)
 800b9de:	4598      	cmp	r8, r3
 800b9e0:	dc51      	bgt.n	800ba86 <__ieee754_pow+0x136>
 800b9e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b9e6:	4598      	cmp	r8, r3
 800b9e8:	f340 84ab 	ble.w	800c342 <__ieee754_pow+0x9f2>
 800b9ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b9f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9f4:	2b14      	cmp	r3, #20
 800b9f6:	dd0f      	ble.n	800ba18 <__ieee754_pow+0xc8>
 800b9f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b9fc:	fa22 f103 	lsr.w	r1, r2, r3
 800ba00:	fa01 f303 	lsl.w	r3, r1, r3
 800ba04:	4293      	cmp	r3, r2
 800ba06:	f040 849c 	bne.w	800c342 <__ieee754_pow+0x9f2>
 800ba0a:	f001 0101 	and.w	r1, r1, #1
 800ba0e:	f1c1 0302 	rsb	r3, r1, #2
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	b182      	cbz	r2, 800ba38 <__ieee754_pow+0xe8>
 800ba16:	e05f      	b.n	800bad8 <__ieee754_pow+0x188>
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d15b      	bne.n	800bad4 <__ieee754_pow+0x184>
 800ba1c:	f1c3 0314 	rsb	r3, r3, #20
 800ba20:	fa48 f103 	asr.w	r1, r8, r3
 800ba24:	fa01 f303 	lsl.w	r3, r1, r3
 800ba28:	4543      	cmp	r3, r8
 800ba2a:	f040 8487 	bne.w	800c33c <__ieee754_pow+0x9ec>
 800ba2e:	f001 0101 	and.w	r1, r1, #1
 800ba32:	f1c1 0302 	rsb	r3, r1, #2
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	4b5c      	ldr	r3, [pc, #368]	; (800bbac <__ieee754_pow+0x25c>)
 800ba3a:	4598      	cmp	r8, r3
 800ba3c:	d132      	bne.n	800baa4 <__ieee754_pow+0x154>
 800ba3e:	f1b9 0f00 	cmp.w	r9, #0
 800ba42:	f280 8477 	bge.w	800c334 <__ieee754_pow+0x9e4>
 800ba46:	4959      	ldr	r1, [pc, #356]	; (800bbac <__ieee754_pow+0x25c>)
 800ba48:	4632      	mov	r2, r6
 800ba4a:	463b      	mov	r3, r7
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	f7f4 fec9 	bl	80007e4 <__aeabi_ddiv>
 800ba52:	e79c      	b.n	800b98e <__ieee754_pow+0x3e>
 800ba54:	2300      	movs	r3, #0
 800ba56:	9304      	str	r3, [sp, #16]
 800ba58:	2a00      	cmp	r2, #0
 800ba5a:	d13d      	bne.n	800bad8 <__ieee754_pow+0x188>
 800ba5c:	4b51      	ldr	r3, [pc, #324]	; (800bba4 <__ieee754_pow+0x254>)
 800ba5e:	4598      	cmp	r8, r3
 800ba60:	d1ea      	bne.n	800ba38 <__ieee754_pow+0xe8>
 800ba62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ba66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ba6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba6e:	f000 8459 	beq.w	800c324 <__ieee754_pow+0x9d4>
 800ba72:	4b4f      	ldr	r3, [pc, #316]	; (800bbb0 <__ieee754_pow+0x260>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	dd08      	ble.n	800ba8a <__ieee754_pow+0x13a>
 800ba78:	f1b9 0f00 	cmp.w	r9, #0
 800ba7c:	f2c0 8456 	blt.w	800c32c <__ieee754_pow+0x9dc>
 800ba80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba84:	e783      	b.n	800b98e <__ieee754_pow+0x3e>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e7e5      	b.n	800ba56 <__ieee754_pow+0x106>
 800ba8a:	f1b9 0f00 	cmp.w	r9, #0
 800ba8e:	f04f 0000 	mov.w	r0, #0
 800ba92:	f04f 0100 	mov.w	r1, #0
 800ba96:	f6bf af7a 	bge.w	800b98e <__ieee754_pow+0x3e>
 800ba9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ba9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800baa2:	e774      	b.n	800b98e <__ieee754_pow+0x3e>
 800baa4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800baa8:	d106      	bne.n	800bab8 <__ieee754_pow+0x168>
 800baaa:	4632      	mov	r2, r6
 800baac:	463b      	mov	r3, r7
 800baae:	4630      	mov	r0, r6
 800bab0:	4639      	mov	r1, r7
 800bab2:	f7f4 fd6d 	bl	8000590 <__aeabi_dmul>
 800bab6:	e76a      	b.n	800b98e <__ieee754_pow+0x3e>
 800bab8:	4b3e      	ldr	r3, [pc, #248]	; (800bbb4 <__ieee754_pow+0x264>)
 800baba:	4599      	cmp	r9, r3
 800babc:	d10c      	bne.n	800bad8 <__ieee754_pow+0x188>
 800babe:	2d00      	cmp	r5, #0
 800bac0:	db0a      	blt.n	800bad8 <__ieee754_pow+0x188>
 800bac2:	ec47 6b10 	vmov	d0, r6, r7
 800bac6:	b009      	add	sp, #36	; 0x24
 800bac8:	ecbd 8b06 	vpop	{d8-d10}
 800bacc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad0:	f7ff bcdc 	b.w	800b48c <__ieee754_sqrt>
 800bad4:	2300      	movs	r3, #0
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	ec47 6b10 	vmov	d0, r6, r7
 800badc:	f000 fc62 	bl	800c3a4 <fabs>
 800bae0:	ec51 0b10 	vmov	r0, r1, d0
 800bae4:	f1ba 0f00 	cmp.w	sl, #0
 800bae8:	d129      	bne.n	800bb3e <__ieee754_pow+0x1ee>
 800baea:	b124      	cbz	r4, 800baf6 <__ieee754_pow+0x1a6>
 800baec:	4b2f      	ldr	r3, [pc, #188]	; (800bbac <__ieee754_pow+0x25c>)
 800baee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d123      	bne.n	800bb3e <__ieee754_pow+0x1ee>
 800baf6:	f1b9 0f00 	cmp.w	r9, #0
 800bafa:	da05      	bge.n	800bb08 <__ieee754_pow+0x1b8>
 800bafc:	4602      	mov	r2, r0
 800bafe:	460b      	mov	r3, r1
 800bb00:	2000      	movs	r0, #0
 800bb02:	492a      	ldr	r1, [pc, #168]	; (800bbac <__ieee754_pow+0x25c>)
 800bb04:	f7f4 fe6e 	bl	80007e4 <__aeabi_ddiv>
 800bb08:	2d00      	cmp	r5, #0
 800bb0a:	f6bf af40 	bge.w	800b98e <__ieee754_pow+0x3e>
 800bb0e:	9b04      	ldr	r3, [sp, #16]
 800bb10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb18:	431c      	orrs	r4, r3
 800bb1a:	d108      	bne.n	800bb2e <__ieee754_pow+0x1de>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4610      	mov	r0, r2
 800bb22:	4619      	mov	r1, r3
 800bb24:	f7f4 fb7c 	bl	8000220 <__aeabi_dsub>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	e78f      	b.n	800ba4e <__ieee754_pow+0xfe>
 800bb2e:	9b04      	ldr	r3, [sp, #16]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	f47f af2c 	bne.w	800b98e <__ieee754_pow+0x3e>
 800bb36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	e727      	b.n	800b98e <__ieee754_pow+0x3e>
 800bb3e:	0feb      	lsrs	r3, r5, #31
 800bb40:	3b01      	subs	r3, #1
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	9a06      	ldr	r2, [sp, #24]
 800bb46:	9b04      	ldr	r3, [sp, #16]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	d102      	bne.n	800bb52 <__ieee754_pow+0x202>
 800bb4c:	4632      	mov	r2, r6
 800bb4e:	463b      	mov	r3, r7
 800bb50:	e7e6      	b.n	800bb20 <__ieee754_pow+0x1d0>
 800bb52:	4b19      	ldr	r3, [pc, #100]	; (800bbb8 <__ieee754_pow+0x268>)
 800bb54:	4598      	cmp	r8, r3
 800bb56:	f340 80fb 	ble.w	800bd50 <__ieee754_pow+0x400>
 800bb5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bb5e:	4598      	cmp	r8, r3
 800bb60:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <__ieee754_pow+0x260>)
 800bb62:	dd0c      	ble.n	800bb7e <__ieee754_pow+0x22e>
 800bb64:	429c      	cmp	r4, r3
 800bb66:	dc0f      	bgt.n	800bb88 <__ieee754_pow+0x238>
 800bb68:	f1b9 0f00 	cmp.w	r9, #0
 800bb6c:	da0f      	bge.n	800bb8e <__ieee754_pow+0x23e>
 800bb6e:	2000      	movs	r0, #0
 800bb70:	b009      	add	sp, #36	; 0x24
 800bb72:	ecbd 8b06 	vpop	{d8-d10}
 800bb76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7a:	f000 bcc2 	b.w	800c502 <__math_oflow>
 800bb7e:	429c      	cmp	r4, r3
 800bb80:	dbf2      	blt.n	800bb68 <__ieee754_pow+0x218>
 800bb82:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <__ieee754_pow+0x25c>)
 800bb84:	429c      	cmp	r4, r3
 800bb86:	dd19      	ble.n	800bbbc <__ieee754_pow+0x26c>
 800bb88:	f1b9 0f00 	cmp.w	r9, #0
 800bb8c:	dcef      	bgt.n	800bb6e <__ieee754_pow+0x21e>
 800bb8e:	2000      	movs	r0, #0
 800bb90:	b009      	add	sp, #36	; 0x24
 800bb92:	ecbd 8b06 	vpop	{d8-d10}
 800bb96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9a:	f000 bca9 	b.w	800c4f0 <__math_uflow>
 800bb9e:	bf00      	nop
 800bba0:	fff00000 	.word	0xfff00000
 800bba4:	7ff00000 	.word	0x7ff00000
 800bba8:	433fffff 	.word	0x433fffff
 800bbac:	3ff00000 	.word	0x3ff00000
 800bbb0:	3fefffff 	.word	0x3fefffff
 800bbb4:	3fe00000 	.word	0x3fe00000
 800bbb8:	41e00000 	.word	0x41e00000
 800bbbc:	4b60      	ldr	r3, [pc, #384]	; (800bd40 <__ieee754_pow+0x3f0>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f7f4 fb2e 	bl	8000220 <__aeabi_dsub>
 800bbc4:	a354      	add	r3, pc, #336	; (adr r3, 800bd18 <__ieee754_pow+0x3c8>)
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	4604      	mov	r4, r0
 800bbcc:	460d      	mov	r5, r1
 800bbce:	f7f4 fcdf 	bl	8000590 <__aeabi_dmul>
 800bbd2:	a353      	add	r3, pc, #332	; (adr r3, 800bd20 <__ieee754_pow+0x3d0>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	4606      	mov	r6, r0
 800bbda:	460f      	mov	r7, r1
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4629      	mov	r1, r5
 800bbe0:	f7f4 fcd6 	bl	8000590 <__aeabi_dmul>
 800bbe4:	4b57      	ldr	r3, [pc, #348]	; (800bd44 <__ieee754_pow+0x3f4>)
 800bbe6:	4682      	mov	sl, r0
 800bbe8:	468b      	mov	fp, r1
 800bbea:	2200      	movs	r2, #0
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 fcce 	bl	8000590 <__aeabi_dmul>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	a14b      	add	r1, pc, #300	; (adr r1, 800bd28 <__ieee754_pow+0x3d8>)
 800bbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbfe:	f7f4 fb0f 	bl	8000220 <__aeabi_dsub>
 800bc02:	4622      	mov	r2, r4
 800bc04:	462b      	mov	r3, r5
 800bc06:	f7f4 fcc3 	bl	8000590 <__aeabi_dmul>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	2000      	movs	r0, #0
 800bc10:	494d      	ldr	r1, [pc, #308]	; (800bd48 <__ieee754_pow+0x3f8>)
 800bc12:	f7f4 fb05 	bl	8000220 <__aeabi_dsub>
 800bc16:	4622      	mov	r2, r4
 800bc18:	4680      	mov	r8, r0
 800bc1a:	4689      	mov	r9, r1
 800bc1c:	462b      	mov	r3, r5
 800bc1e:	4620      	mov	r0, r4
 800bc20:	4629      	mov	r1, r5
 800bc22:	f7f4 fcb5 	bl	8000590 <__aeabi_dmul>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fcaf 	bl	8000590 <__aeabi_dmul>
 800bc32:	a33f      	add	r3, pc, #252	; (adr r3, 800bd30 <__ieee754_pow+0x3e0>)
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	f7f4 fcaa 	bl	8000590 <__aeabi_dmul>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4650      	mov	r0, sl
 800bc42:	4659      	mov	r1, fp
 800bc44:	f7f4 faec 	bl	8000220 <__aeabi_dsub>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	4689      	mov	r9, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fae6 	bl	8000224 <__adddf3>
 800bc58:	2000      	movs	r0, #0
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	463b      	mov	r3, r7
 800bc5e:	4604      	mov	r4, r0
 800bc60:	460d      	mov	r5, r1
 800bc62:	f7f4 fadd 	bl	8000220 <__aeabi_dsub>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	f7f4 fad7 	bl	8000220 <__aeabi_dsub>
 800bc72:	9b04      	ldr	r3, [sp, #16]
 800bc74:	9a06      	ldr	r2, [sp, #24]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	4682      	mov	sl, r0
 800bc7c:	468b      	mov	fp, r1
 800bc7e:	f040 81e7 	bne.w	800c050 <__ieee754_pow+0x700>
 800bc82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bd38 <__ieee754_pow+0x3e8>
 800bc86:	eeb0 8a47 	vmov.f32	s16, s14
 800bc8a:	eef0 8a67 	vmov.f32	s17, s15
 800bc8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc92:	2600      	movs	r6, #0
 800bc94:	4632      	mov	r2, r6
 800bc96:	463b      	mov	r3, r7
 800bc98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc9c:	f7f4 fac0 	bl	8000220 <__aeabi_dsub>
 800bca0:	4622      	mov	r2, r4
 800bca2:	462b      	mov	r3, r5
 800bca4:	f7f4 fc74 	bl	8000590 <__aeabi_dmul>
 800bca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcac:	4680      	mov	r8, r0
 800bcae:	4689      	mov	r9, r1
 800bcb0:	4650      	mov	r0, sl
 800bcb2:	4659      	mov	r1, fp
 800bcb4:	f7f4 fc6c 	bl	8000590 <__aeabi_dmul>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	f7f4 fab0 	bl	8000224 <__adddf3>
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	4680      	mov	r8, r0
 800bcca:	4689      	mov	r9, r1
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fc5e 	bl	8000590 <__aeabi_dmul>
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	460d      	mov	r5, r1
 800bcda:	4602      	mov	r2, r0
 800bcdc:	4649      	mov	r1, r9
 800bcde:	4640      	mov	r0, r8
 800bce0:	f7f4 faa0 	bl	8000224 <__adddf3>
 800bce4:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <__ieee754_pow+0x3fc>)
 800bce6:	4299      	cmp	r1, r3
 800bce8:	ec45 4b19 	vmov	d9, r4, r5
 800bcec:	4606      	mov	r6, r0
 800bcee:	460f      	mov	r7, r1
 800bcf0:	468b      	mov	fp, r1
 800bcf2:	f340 82f0 	ble.w	800c2d6 <__ieee754_pow+0x986>
 800bcf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bcfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bcfe:	4303      	orrs	r3, r0
 800bd00:	f000 81e4 	beq.w	800c0cc <__ieee754_pow+0x77c>
 800bd04:	ec51 0b18 	vmov	r0, r1, d8
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f7f4 feb2 	bl	8000a74 <__aeabi_dcmplt>
 800bd10:	3800      	subs	r0, #0
 800bd12:	bf18      	it	ne
 800bd14:	2001      	movne	r0, #1
 800bd16:	e72b      	b.n	800bb70 <__ieee754_pow+0x220>
 800bd18:	60000000 	.word	0x60000000
 800bd1c:	3ff71547 	.word	0x3ff71547
 800bd20:	f85ddf44 	.word	0xf85ddf44
 800bd24:	3e54ae0b 	.word	0x3e54ae0b
 800bd28:	55555555 	.word	0x55555555
 800bd2c:	3fd55555 	.word	0x3fd55555
 800bd30:	652b82fe 	.word	0x652b82fe
 800bd34:	3ff71547 	.word	0x3ff71547
 800bd38:	00000000 	.word	0x00000000
 800bd3c:	bff00000 	.word	0xbff00000
 800bd40:	3ff00000 	.word	0x3ff00000
 800bd44:	3fd00000 	.word	0x3fd00000
 800bd48:	3fe00000 	.word	0x3fe00000
 800bd4c:	408fffff 	.word	0x408fffff
 800bd50:	4bd5      	ldr	r3, [pc, #852]	; (800c0a8 <__ieee754_pow+0x758>)
 800bd52:	402b      	ands	r3, r5
 800bd54:	2200      	movs	r2, #0
 800bd56:	b92b      	cbnz	r3, 800bd64 <__ieee754_pow+0x414>
 800bd58:	4bd4      	ldr	r3, [pc, #848]	; (800c0ac <__ieee754_pow+0x75c>)
 800bd5a:	f7f4 fc19 	bl	8000590 <__aeabi_dmul>
 800bd5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bd62:	460c      	mov	r4, r1
 800bd64:	1523      	asrs	r3, r4, #20
 800bd66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd6a:	4413      	add	r3, r2
 800bd6c:	9305      	str	r3, [sp, #20]
 800bd6e:	4bd0      	ldr	r3, [pc, #832]	; (800c0b0 <__ieee754_pow+0x760>)
 800bd70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bd74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bd78:	429c      	cmp	r4, r3
 800bd7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd7e:	dd08      	ble.n	800bd92 <__ieee754_pow+0x442>
 800bd80:	4bcc      	ldr	r3, [pc, #816]	; (800c0b4 <__ieee754_pow+0x764>)
 800bd82:	429c      	cmp	r4, r3
 800bd84:	f340 8162 	ble.w	800c04c <__ieee754_pow+0x6fc>
 800bd88:	9b05      	ldr	r3, [sp, #20]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	9305      	str	r3, [sp, #20]
 800bd8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bd92:	2400      	movs	r4, #0
 800bd94:	00e3      	lsls	r3, r4, #3
 800bd96:	9307      	str	r3, [sp, #28]
 800bd98:	4bc7      	ldr	r3, [pc, #796]	; (800c0b8 <__ieee754_pow+0x768>)
 800bd9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd9e:	ed93 7b00 	vldr	d7, [r3]
 800bda2:	4629      	mov	r1, r5
 800bda4:	ec53 2b17 	vmov	r2, r3, d7
 800bda8:	eeb0 9a47 	vmov.f32	s18, s14
 800bdac:	eef0 9a67 	vmov.f32	s19, s15
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	f7f4 fa35 	bl	8000220 <__aeabi_dsub>
 800bdb6:	4652      	mov	r2, sl
 800bdb8:	4606      	mov	r6, r0
 800bdba:	460f      	mov	r7, r1
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	ec51 0b19 	vmov	r0, r1, d9
 800bdc2:	f7f4 fa2f 	bl	8000224 <__adddf3>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	2000      	movs	r0, #0
 800bdcc:	49bb      	ldr	r1, [pc, #748]	; (800c0bc <__ieee754_pow+0x76c>)
 800bdce:	f7f4 fd09 	bl	80007e4 <__aeabi_ddiv>
 800bdd2:	ec41 0b1a 	vmov	d10, r0, r1
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4630      	mov	r0, r6
 800bddc:	4639      	mov	r1, r7
 800bdde:	f7f4 fbd7 	bl	8000590 <__aeabi_dmul>
 800bde2:	2300      	movs	r3, #0
 800bde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bde8:	9302      	str	r3, [sp, #8]
 800bdea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bdee:	46ab      	mov	fp, r5
 800bdf0:	106d      	asrs	r5, r5, #1
 800bdf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bdf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bdfa:	ec41 0b18 	vmov	d8, r0, r1
 800bdfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800be02:	2200      	movs	r2, #0
 800be04:	4640      	mov	r0, r8
 800be06:	4649      	mov	r1, r9
 800be08:	4614      	mov	r4, r2
 800be0a:	461d      	mov	r5, r3
 800be0c:	f7f4 fbc0 	bl	8000590 <__aeabi_dmul>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4630      	mov	r0, r6
 800be16:	4639      	mov	r1, r7
 800be18:	f7f4 fa02 	bl	8000220 <__aeabi_dsub>
 800be1c:	ec53 2b19 	vmov	r2, r3, d9
 800be20:	4606      	mov	r6, r0
 800be22:	460f      	mov	r7, r1
 800be24:	4620      	mov	r0, r4
 800be26:	4629      	mov	r1, r5
 800be28:	f7f4 f9fa 	bl	8000220 <__aeabi_dsub>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4650      	mov	r0, sl
 800be32:	4659      	mov	r1, fp
 800be34:	f7f4 f9f4 	bl	8000220 <__aeabi_dsub>
 800be38:	4642      	mov	r2, r8
 800be3a:	464b      	mov	r3, r9
 800be3c:	f7f4 fba8 	bl	8000590 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f7f4 f9ea 	bl	8000220 <__aeabi_dsub>
 800be4c:	ec53 2b1a 	vmov	r2, r3, d10
 800be50:	f7f4 fb9e 	bl	8000590 <__aeabi_dmul>
 800be54:	ec53 2b18 	vmov	r2, r3, d8
 800be58:	ec41 0b19 	vmov	d9, r0, r1
 800be5c:	ec51 0b18 	vmov	r0, r1, d8
 800be60:	f7f4 fb96 	bl	8000590 <__aeabi_dmul>
 800be64:	a37c      	add	r3, pc, #496	; (adr r3, 800c058 <__ieee754_pow+0x708>)
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	4604      	mov	r4, r0
 800be6c:	460d      	mov	r5, r1
 800be6e:	f7f4 fb8f 	bl	8000590 <__aeabi_dmul>
 800be72:	a37b      	add	r3, pc, #492	; (adr r3, 800c060 <__ieee754_pow+0x710>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 f9d4 	bl	8000224 <__adddf3>
 800be7c:	4622      	mov	r2, r4
 800be7e:	462b      	mov	r3, r5
 800be80:	f7f4 fb86 	bl	8000590 <__aeabi_dmul>
 800be84:	a378      	add	r3, pc, #480	; (adr r3, 800c068 <__ieee754_pow+0x718>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f7f4 f9cb 	bl	8000224 <__adddf3>
 800be8e:	4622      	mov	r2, r4
 800be90:	462b      	mov	r3, r5
 800be92:	f7f4 fb7d 	bl	8000590 <__aeabi_dmul>
 800be96:	a376      	add	r3, pc, #472	; (adr r3, 800c070 <__ieee754_pow+0x720>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 f9c2 	bl	8000224 <__adddf3>
 800bea0:	4622      	mov	r2, r4
 800bea2:	462b      	mov	r3, r5
 800bea4:	f7f4 fb74 	bl	8000590 <__aeabi_dmul>
 800bea8:	a373      	add	r3, pc, #460	; (adr r3, 800c078 <__ieee754_pow+0x728>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 f9b9 	bl	8000224 <__adddf3>
 800beb2:	4622      	mov	r2, r4
 800beb4:	462b      	mov	r3, r5
 800beb6:	f7f4 fb6b 	bl	8000590 <__aeabi_dmul>
 800beba:	a371      	add	r3, pc, #452	; (adr r3, 800c080 <__ieee754_pow+0x730>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	f7f4 f9b0 	bl	8000224 <__adddf3>
 800bec4:	4622      	mov	r2, r4
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	462b      	mov	r3, r5
 800becc:	4620      	mov	r0, r4
 800bece:	4629      	mov	r1, r5
 800bed0:	f7f4 fb5e 	bl	8000590 <__aeabi_dmul>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	f7f4 fb58 	bl	8000590 <__aeabi_dmul>
 800bee0:	4642      	mov	r2, r8
 800bee2:	4604      	mov	r4, r0
 800bee4:	460d      	mov	r5, r1
 800bee6:	464b      	mov	r3, r9
 800bee8:	ec51 0b18 	vmov	r0, r1, d8
 800beec:	f7f4 f99a 	bl	8000224 <__adddf3>
 800bef0:	ec53 2b19 	vmov	r2, r3, d9
 800bef4:	f7f4 fb4c 	bl	8000590 <__aeabi_dmul>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	f7f4 f992 	bl	8000224 <__adddf3>
 800bf00:	4642      	mov	r2, r8
 800bf02:	4682      	mov	sl, r0
 800bf04:	468b      	mov	fp, r1
 800bf06:	464b      	mov	r3, r9
 800bf08:	4640      	mov	r0, r8
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	f7f4 fb40 	bl	8000590 <__aeabi_dmul>
 800bf10:	4b6b      	ldr	r3, [pc, #428]	; (800c0c0 <__ieee754_pow+0x770>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	f7f4 f984 	bl	8000224 <__adddf3>
 800bf1c:	4652      	mov	r2, sl
 800bf1e:	465b      	mov	r3, fp
 800bf20:	f7f4 f980 	bl	8000224 <__adddf3>
 800bf24:	2000      	movs	r0, #0
 800bf26:	4604      	mov	r4, r0
 800bf28:	460d      	mov	r5, r1
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4640      	mov	r0, r8
 800bf30:	4649      	mov	r1, r9
 800bf32:	f7f4 fb2d 	bl	8000590 <__aeabi_dmul>
 800bf36:	4b62      	ldr	r3, [pc, #392]	; (800c0c0 <__ieee754_pow+0x770>)
 800bf38:	4680      	mov	r8, r0
 800bf3a:	4689      	mov	r9, r1
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 f96d 	bl	8000220 <__aeabi_dsub>
 800bf46:	4632      	mov	r2, r6
 800bf48:	463b      	mov	r3, r7
 800bf4a:	f7f4 f969 	bl	8000220 <__aeabi_dsub>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4650      	mov	r0, sl
 800bf54:	4659      	mov	r1, fp
 800bf56:	f7f4 f963 	bl	8000220 <__aeabi_dsub>
 800bf5a:	ec53 2b18 	vmov	r2, r3, d8
 800bf5e:	f7f4 fb17 	bl	8000590 <__aeabi_dmul>
 800bf62:	4622      	mov	r2, r4
 800bf64:	4606      	mov	r6, r0
 800bf66:	460f      	mov	r7, r1
 800bf68:	462b      	mov	r3, r5
 800bf6a:	ec51 0b19 	vmov	r0, r1, d9
 800bf6e:	f7f4 fb0f 	bl	8000590 <__aeabi_dmul>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	4630      	mov	r0, r6
 800bf78:	4639      	mov	r1, r7
 800bf7a:	f7f4 f953 	bl	8000224 <__adddf3>
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4640      	mov	r0, r8
 800bf88:	4649      	mov	r1, r9
 800bf8a:	f7f4 f94b 	bl	8000224 <__adddf3>
 800bf8e:	a33e      	add	r3, pc, #248	; (adr r3, 800c088 <__ieee754_pow+0x738>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	2000      	movs	r0, #0
 800bf96:	4604      	mov	r4, r0
 800bf98:	460d      	mov	r5, r1
 800bf9a:	f7f4 faf9 	bl	8000590 <__aeabi_dmul>
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	ec41 0b18 	vmov	d8, r0, r1
 800bfa4:	464b      	mov	r3, r9
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	f7f4 f939 	bl	8000220 <__aeabi_dsub>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	f7f4 f933 	bl	8000220 <__aeabi_dsub>
 800bfba:	a335      	add	r3, pc, #212	; (adr r3, 800c090 <__ieee754_pow+0x740>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	f7f4 fae6 	bl	8000590 <__aeabi_dmul>
 800bfc4:	a334      	add	r3, pc, #208	; (adr r3, 800c098 <__ieee754_pow+0x748>)
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	4606      	mov	r6, r0
 800bfcc:	460f      	mov	r7, r1
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 fadd 	bl	8000590 <__aeabi_dmul>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f7f4 f921 	bl	8000224 <__adddf3>
 800bfe2:	9a07      	ldr	r2, [sp, #28]
 800bfe4:	4b37      	ldr	r3, [pc, #220]	; (800c0c4 <__ieee754_pow+0x774>)
 800bfe6:	4413      	add	r3, r2
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f7f4 f91a 	bl	8000224 <__adddf3>
 800bff0:	4682      	mov	sl, r0
 800bff2:	9805      	ldr	r0, [sp, #20]
 800bff4:	468b      	mov	fp, r1
 800bff6:	f7f4 fa61 	bl	80004bc <__aeabi_i2d>
 800bffa:	9a07      	ldr	r2, [sp, #28]
 800bffc:	4b32      	ldr	r3, [pc, #200]	; (800c0c8 <__ieee754_pow+0x778>)
 800bffe:	4413      	add	r3, r2
 800c000:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c004:	4606      	mov	r6, r0
 800c006:	460f      	mov	r7, r1
 800c008:	4652      	mov	r2, sl
 800c00a:	465b      	mov	r3, fp
 800c00c:	ec51 0b18 	vmov	r0, r1, d8
 800c010:	f7f4 f908 	bl	8000224 <__adddf3>
 800c014:	4642      	mov	r2, r8
 800c016:	464b      	mov	r3, r9
 800c018:	f7f4 f904 	bl	8000224 <__adddf3>
 800c01c:	4632      	mov	r2, r6
 800c01e:	463b      	mov	r3, r7
 800c020:	f7f4 f900 	bl	8000224 <__adddf3>
 800c024:	2000      	movs	r0, #0
 800c026:	4632      	mov	r2, r6
 800c028:	463b      	mov	r3, r7
 800c02a:	4604      	mov	r4, r0
 800c02c:	460d      	mov	r5, r1
 800c02e:	f7f4 f8f7 	bl	8000220 <__aeabi_dsub>
 800c032:	4642      	mov	r2, r8
 800c034:	464b      	mov	r3, r9
 800c036:	f7f4 f8f3 	bl	8000220 <__aeabi_dsub>
 800c03a:	ec53 2b18 	vmov	r2, r3, d8
 800c03e:	f7f4 f8ef 	bl	8000220 <__aeabi_dsub>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4650      	mov	r0, sl
 800c048:	4659      	mov	r1, fp
 800c04a:	e610      	b.n	800bc6e <__ieee754_pow+0x31e>
 800c04c:	2401      	movs	r4, #1
 800c04e:	e6a1      	b.n	800bd94 <__ieee754_pow+0x444>
 800c050:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c0a0 <__ieee754_pow+0x750>
 800c054:	e617      	b.n	800bc86 <__ieee754_pow+0x336>
 800c056:	bf00      	nop
 800c058:	4a454eef 	.word	0x4a454eef
 800c05c:	3fca7e28 	.word	0x3fca7e28
 800c060:	93c9db65 	.word	0x93c9db65
 800c064:	3fcd864a 	.word	0x3fcd864a
 800c068:	a91d4101 	.word	0xa91d4101
 800c06c:	3fd17460 	.word	0x3fd17460
 800c070:	518f264d 	.word	0x518f264d
 800c074:	3fd55555 	.word	0x3fd55555
 800c078:	db6fabff 	.word	0xdb6fabff
 800c07c:	3fdb6db6 	.word	0x3fdb6db6
 800c080:	33333303 	.word	0x33333303
 800c084:	3fe33333 	.word	0x3fe33333
 800c088:	e0000000 	.word	0xe0000000
 800c08c:	3feec709 	.word	0x3feec709
 800c090:	dc3a03fd 	.word	0xdc3a03fd
 800c094:	3feec709 	.word	0x3feec709
 800c098:	145b01f5 	.word	0x145b01f5
 800c09c:	be3e2fe0 	.word	0xbe3e2fe0
 800c0a0:	00000000 	.word	0x00000000
 800c0a4:	3ff00000 	.word	0x3ff00000
 800c0a8:	7ff00000 	.word	0x7ff00000
 800c0ac:	43400000 	.word	0x43400000
 800c0b0:	0003988e 	.word	0x0003988e
 800c0b4:	000bb679 	.word	0x000bb679
 800c0b8:	0801f558 	.word	0x0801f558
 800c0bc:	3ff00000 	.word	0x3ff00000
 800c0c0:	40080000 	.word	0x40080000
 800c0c4:	0801f578 	.word	0x0801f578
 800c0c8:	0801f568 	.word	0x0801f568
 800c0cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800c39c <__ieee754_pow+0xa4c>)
 800c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	f7f4 f8a5 	bl	8000224 <__adddf3>
 800c0da:	4622      	mov	r2, r4
 800c0dc:	ec41 0b1a 	vmov	d10, r0, r1
 800c0e0:	462b      	mov	r3, r5
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	f7f4 f89b 	bl	8000220 <__aeabi_dsub>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	ec51 0b1a 	vmov	r0, r1, d10
 800c0f2:	f7f4 fcdd 	bl	8000ab0 <__aeabi_dcmpgt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f47f ae04 	bne.w	800bd04 <__ieee754_pow+0x3b4>
 800c0fc:	4aa2      	ldr	r2, [pc, #648]	; (800c388 <__ieee754_pow+0xa38>)
 800c0fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c102:	4293      	cmp	r3, r2
 800c104:	f340 8107 	ble.w	800c316 <__ieee754_pow+0x9c6>
 800c108:	151b      	asrs	r3, r3, #20
 800c10a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c10e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c112:	fa4a fa03 	asr.w	sl, sl, r3
 800c116:	44da      	add	sl, fp
 800c118:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c11c:	489b      	ldr	r0, [pc, #620]	; (800c38c <__ieee754_pow+0xa3c>)
 800c11e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c122:	4108      	asrs	r0, r1
 800c124:	ea00 030a 	and.w	r3, r0, sl
 800c128:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c12c:	f1c1 0114 	rsb	r1, r1, #20
 800c130:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c134:	fa4a fa01 	asr.w	sl, sl, r1
 800c138:	f1bb 0f00 	cmp.w	fp, #0
 800c13c:	f04f 0200 	mov.w	r2, #0
 800c140:	4620      	mov	r0, r4
 800c142:	4629      	mov	r1, r5
 800c144:	bfb8      	it	lt
 800c146:	f1ca 0a00 	rsblt	sl, sl, #0
 800c14a:	f7f4 f869 	bl	8000220 <__aeabi_dsub>
 800c14e:	ec41 0b19 	vmov	d9, r0, r1
 800c152:	4642      	mov	r2, r8
 800c154:	464b      	mov	r3, r9
 800c156:	ec51 0b19 	vmov	r0, r1, d9
 800c15a:	f7f4 f863 	bl	8000224 <__adddf3>
 800c15e:	a37a      	add	r3, pc, #488	; (adr r3, 800c348 <__ieee754_pow+0x9f8>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	2000      	movs	r0, #0
 800c166:	4604      	mov	r4, r0
 800c168:	460d      	mov	r5, r1
 800c16a:	f7f4 fa11 	bl	8000590 <__aeabi_dmul>
 800c16e:	ec53 2b19 	vmov	r2, r3, d9
 800c172:	4606      	mov	r6, r0
 800c174:	460f      	mov	r7, r1
 800c176:	4620      	mov	r0, r4
 800c178:	4629      	mov	r1, r5
 800c17a:	f7f4 f851 	bl	8000220 <__aeabi_dsub>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 f84b 	bl	8000220 <__aeabi_dsub>
 800c18a:	a371      	add	r3, pc, #452	; (adr r3, 800c350 <__ieee754_pow+0xa00>)
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	f7f4 f9fe 	bl	8000590 <__aeabi_dmul>
 800c194:	a370      	add	r3, pc, #448	; (adr r3, 800c358 <__ieee754_pow+0xa08>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	4680      	mov	r8, r0
 800c19c:	4689      	mov	r9, r1
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 f9f5 	bl	8000590 <__aeabi_dmul>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	f7f4 f839 	bl	8000224 <__adddf3>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	4639      	mov	r1, r7
 800c1be:	f7f4 f831 	bl	8000224 <__adddf3>
 800c1c2:	4632      	mov	r2, r6
 800c1c4:	463b      	mov	r3, r7
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	4689      	mov	r9, r1
 800c1ca:	f7f4 f829 	bl	8000220 <__aeabi_dsub>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	f7f4 f823 	bl	8000220 <__aeabi_dsub>
 800c1da:	4642      	mov	r2, r8
 800c1dc:	4606      	mov	r6, r0
 800c1de:	460f      	mov	r7, r1
 800c1e0:	464b      	mov	r3, r9
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	4649      	mov	r1, r9
 800c1e6:	f7f4 f9d3 	bl	8000590 <__aeabi_dmul>
 800c1ea:	a35d      	add	r3, pc, #372	; (adr r3, 800c360 <__ieee754_pow+0xa10>)
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	460d      	mov	r5, r1
 800c1f4:	f7f4 f9cc 	bl	8000590 <__aeabi_dmul>
 800c1f8:	a35b      	add	r3, pc, #364	; (adr r3, 800c368 <__ieee754_pow+0xa18>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	f7f4 f80f 	bl	8000220 <__aeabi_dsub>
 800c202:	4622      	mov	r2, r4
 800c204:	462b      	mov	r3, r5
 800c206:	f7f4 f9c3 	bl	8000590 <__aeabi_dmul>
 800c20a:	a359      	add	r3, pc, #356	; (adr r3, 800c370 <__ieee754_pow+0xa20>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 f808 	bl	8000224 <__adddf3>
 800c214:	4622      	mov	r2, r4
 800c216:	462b      	mov	r3, r5
 800c218:	f7f4 f9ba 	bl	8000590 <__aeabi_dmul>
 800c21c:	a356      	add	r3, pc, #344	; (adr r3, 800c378 <__ieee754_pow+0xa28>)
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f7f3 fffd 	bl	8000220 <__aeabi_dsub>
 800c226:	4622      	mov	r2, r4
 800c228:	462b      	mov	r3, r5
 800c22a:	f7f4 f9b1 	bl	8000590 <__aeabi_dmul>
 800c22e:	a354      	add	r3, pc, #336	; (adr r3, 800c380 <__ieee754_pow+0xa30>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	f7f3 fff6 	bl	8000224 <__adddf3>
 800c238:	4622      	mov	r2, r4
 800c23a:	462b      	mov	r3, r5
 800c23c:	f7f4 f9a8 	bl	8000590 <__aeabi_dmul>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4640      	mov	r0, r8
 800c246:	4649      	mov	r1, r9
 800c248:	f7f3 ffea 	bl	8000220 <__aeabi_dsub>
 800c24c:	4604      	mov	r4, r0
 800c24e:	460d      	mov	r5, r1
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4640      	mov	r0, r8
 800c256:	4649      	mov	r1, r9
 800c258:	f7f4 f99a 	bl	8000590 <__aeabi_dmul>
 800c25c:	2200      	movs	r2, #0
 800c25e:	ec41 0b19 	vmov	d9, r0, r1
 800c262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c266:	4620      	mov	r0, r4
 800c268:	4629      	mov	r1, r5
 800c26a:	f7f3 ffd9 	bl	8000220 <__aeabi_dsub>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	ec51 0b19 	vmov	r0, r1, d9
 800c276:	f7f4 fab5 	bl	80007e4 <__aeabi_ddiv>
 800c27a:	4632      	mov	r2, r6
 800c27c:	4604      	mov	r4, r0
 800c27e:	460d      	mov	r5, r1
 800c280:	463b      	mov	r3, r7
 800c282:	4640      	mov	r0, r8
 800c284:	4649      	mov	r1, r9
 800c286:	f7f4 f983 	bl	8000590 <__aeabi_dmul>
 800c28a:	4632      	mov	r2, r6
 800c28c:	463b      	mov	r3, r7
 800c28e:	f7f3 ffc9 	bl	8000224 <__adddf3>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4620      	mov	r0, r4
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f3 ffc1 	bl	8000220 <__aeabi_dsub>
 800c29e:	4642      	mov	r2, r8
 800c2a0:	464b      	mov	r3, r9
 800c2a2:	f7f3 ffbd 	bl	8000220 <__aeabi_dsub>
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	4939      	ldr	r1, [pc, #228]	; (800c390 <__ieee754_pow+0xa40>)
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	f7f3 ffb7 	bl	8000220 <__aeabi_dsub>
 800c2b2:	ec41 0b10 	vmov	d0, r0, r1
 800c2b6:	ee10 3a90 	vmov	r3, s1
 800c2ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2c2:	da2b      	bge.n	800c31c <__ieee754_pow+0x9cc>
 800c2c4:	4650      	mov	r0, sl
 800c2c6:	f000 f877 	bl	800c3b8 <scalbn>
 800c2ca:	ec51 0b10 	vmov	r0, r1, d0
 800c2ce:	ec53 2b18 	vmov	r2, r3, d8
 800c2d2:	f7ff bbee 	b.w	800bab2 <__ieee754_pow+0x162>
 800c2d6:	4b2f      	ldr	r3, [pc, #188]	; (800c394 <__ieee754_pow+0xa44>)
 800c2d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c2dc:	429e      	cmp	r6, r3
 800c2de:	f77f af0d 	ble.w	800c0fc <__ieee754_pow+0x7ac>
 800c2e2:	4b2d      	ldr	r3, [pc, #180]	; (800c398 <__ieee754_pow+0xa48>)
 800c2e4:	440b      	add	r3, r1
 800c2e6:	4303      	orrs	r3, r0
 800c2e8:	d009      	beq.n	800c2fe <__ieee754_pow+0x9ae>
 800c2ea:	ec51 0b18 	vmov	r0, r1, d8
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f7f4 fbbf 	bl	8000a74 <__aeabi_dcmplt>
 800c2f6:	3800      	subs	r0, #0
 800c2f8:	bf18      	it	ne
 800c2fa:	2001      	movne	r0, #1
 800c2fc:	e448      	b.n	800bb90 <__ieee754_pow+0x240>
 800c2fe:	4622      	mov	r2, r4
 800c300:	462b      	mov	r3, r5
 800c302:	f7f3 ff8d 	bl	8000220 <__aeabi_dsub>
 800c306:	4642      	mov	r2, r8
 800c308:	464b      	mov	r3, r9
 800c30a:	f7f4 fbc7 	bl	8000a9c <__aeabi_dcmpge>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f43f aef4 	beq.w	800c0fc <__ieee754_pow+0x7ac>
 800c314:	e7e9      	b.n	800c2ea <__ieee754_pow+0x99a>
 800c316:	f04f 0a00 	mov.w	sl, #0
 800c31a:	e71a      	b.n	800c152 <__ieee754_pow+0x802>
 800c31c:	ec51 0b10 	vmov	r0, r1, d0
 800c320:	4619      	mov	r1, r3
 800c322:	e7d4      	b.n	800c2ce <__ieee754_pow+0x97e>
 800c324:	491a      	ldr	r1, [pc, #104]	; (800c390 <__ieee754_pow+0xa40>)
 800c326:	2000      	movs	r0, #0
 800c328:	f7ff bb31 	b.w	800b98e <__ieee754_pow+0x3e>
 800c32c:	2000      	movs	r0, #0
 800c32e:	2100      	movs	r1, #0
 800c330:	f7ff bb2d 	b.w	800b98e <__ieee754_pow+0x3e>
 800c334:	4630      	mov	r0, r6
 800c336:	4639      	mov	r1, r7
 800c338:	f7ff bb29 	b.w	800b98e <__ieee754_pow+0x3e>
 800c33c:	9204      	str	r2, [sp, #16]
 800c33e:	f7ff bb7b 	b.w	800ba38 <__ieee754_pow+0xe8>
 800c342:	2300      	movs	r3, #0
 800c344:	f7ff bb65 	b.w	800ba12 <__ieee754_pow+0xc2>
 800c348:	00000000 	.word	0x00000000
 800c34c:	3fe62e43 	.word	0x3fe62e43
 800c350:	fefa39ef 	.word	0xfefa39ef
 800c354:	3fe62e42 	.word	0x3fe62e42
 800c358:	0ca86c39 	.word	0x0ca86c39
 800c35c:	be205c61 	.word	0xbe205c61
 800c360:	72bea4d0 	.word	0x72bea4d0
 800c364:	3e663769 	.word	0x3e663769
 800c368:	c5d26bf1 	.word	0xc5d26bf1
 800c36c:	3ebbbd41 	.word	0x3ebbbd41
 800c370:	af25de2c 	.word	0xaf25de2c
 800c374:	3f11566a 	.word	0x3f11566a
 800c378:	16bebd93 	.word	0x16bebd93
 800c37c:	3f66c16c 	.word	0x3f66c16c
 800c380:	5555553e 	.word	0x5555553e
 800c384:	3fc55555 	.word	0x3fc55555
 800c388:	3fe00000 	.word	0x3fe00000
 800c38c:	fff00000 	.word	0xfff00000
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	4090cbff 	.word	0x4090cbff
 800c398:	3f6f3400 	.word	0x3f6f3400
 800c39c:	652b82fe 	.word	0x652b82fe
 800c3a0:	3c971547 	.word	0x3c971547

0800c3a4 <fabs>:
 800c3a4:	ec51 0b10 	vmov	r0, r1, d0
 800c3a8:	ee10 2a10 	vmov	r2, s0
 800c3ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3b0:	ec43 2b10 	vmov	d0, r2, r3
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <scalbn>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	ec55 4b10 	vmov	r4, r5, d0
 800c3be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	462b      	mov	r3, r5
 800c3c6:	b999      	cbnz	r1, 800c3f0 <scalbn+0x38>
 800c3c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3cc:	4323      	orrs	r3, r4
 800c3ce:	d03f      	beq.n	800c450 <scalbn+0x98>
 800c3d0:	4b35      	ldr	r3, [pc, #212]	; (800c4a8 <scalbn+0xf0>)
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	ee10 0a10 	vmov	r0, s0
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f7f4 f8d9 	bl	8000590 <__aeabi_dmul>
 800c3de:	4b33      	ldr	r3, [pc, #204]	; (800c4ac <scalbn+0xf4>)
 800c3e0:	429e      	cmp	r6, r3
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	da10      	bge.n	800c40a <scalbn+0x52>
 800c3e8:	a327      	add	r3, pc, #156	; (adr r3, 800c488 <scalbn+0xd0>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	e01f      	b.n	800c430 <scalbn+0x78>
 800c3f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c3f4:	4291      	cmp	r1, r2
 800c3f6:	d10c      	bne.n	800c412 <scalbn+0x5a>
 800c3f8:	ee10 2a10 	vmov	r2, s0
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	f7f3 ff10 	bl	8000224 <__adddf3>
 800c404:	4604      	mov	r4, r0
 800c406:	460d      	mov	r5, r1
 800c408:	e022      	b.n	800c450 <scalbn+0x98>
 800c40a:	460b      	mov	r3, r1
 800c40c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c410:	3936      	subs	r1, #54	; 0x36
 800c412:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c416:	4296      	cmp	r6, r2
 800c418:	dd0d      	ble.n	800c436 <scalbn+0x7e>
 800c41a:	2d00      	cmp	r5, #0
 800c41c:	a11c      	add	r1, pc, #112	; (adr r1, 800c490 <scalbn+0xd8>)
 800c41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c422:	da02      	bge.n	800c42a <scalbn+0x72>
 800c424:	a11c      	add	r1, pc, #112	; (adr r1, 800c498 <scalbn+0xe0>)
 800c426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c42a:	a319      	add	r3, pc, #100	; (adr r3, 800c490 <scalbn+0xd8>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f4 f8ae 	bl	8000590 <__aeabi_dmul>
 800c434:	e7e6      	b.n	800c404 <scalbn+0x4c>
 800c436:	1872      	adds	r2, r6, r1
 800c438:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c43c:	428a      	cmp	r2, r1
 800c43e:	dcec      	bgt.n	800c41a <scalbn+0x62>
 800c440:	2a00      	cmp	r2, #0
 800c442:	dd08      	ble.n	800c456 <scalbn+0x9e>
 800c444:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c448:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c44c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c450:	ec45 4b10 	vmov	d0, r4, r5
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c45a:	da08      	bge.n	800c46e <scalbn+0xb6>
 800c45c:	2d00      	cmp	r5, #0
 800c45e:	a10a      	add	r1, pc, #40	; (adr r1, 800c488 <scalbn+0xd0>)
 800c460:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c464:	dac0      	bge.n	800c3e8 <scalbn+0x30>
 800c466:	a10e      	add	r1, pc, #56	; (adr r1, 800c4a0 <scalbn+0xe8>)
 800c468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c46c:	e7bc      	b.n	800c3e8 <scalbn+0x30>
 800c46e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c472:	3236      	adds	r2, #54	; 0x36
 800c474:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c478:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c47c:	4620      	mov	r0, r4
 800c47e:	4b0c      	ldr	r3, [pc, #48]	; (800c4b0 <scalbn+0xf8>)
 800c480:	2200      	movs	r2, #0
 800c482:	e7d5      	b.n	800c430 <scalbn+0x78>
 800c484:	f3af 8000 	nop.w
 800c488:	c2f8f359 	.word	0xc2f8f359
 800c48c:	01a56e1f 	.word	0x01a56e1f
 800c490:	8800759c 	.word	0x8800759c
 800c494:	7e37e43c 	.word	0x7e37e43c
 800c498:	8800759c 	.word	0x8800759c
 800c49c:	fe37e43c 	.word	0xfe37e43c
 800c4a0:	c2f8f359 	.word	0xc2f8f359
 800c4a4:	81a56e1f 	.word	0x81a56e1f
 800c4a8:	43500000 	.word	0x43500000
 800c4ac:	ffff3cb0 	.word	0xffff3cb0
 800c4b0:	3c900000 	.word	0x3c900000

0800c4b4 <with_errno>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	4616      	mov	r6, r2
 800c4bc:	f7fe feac 	bl	800b218 <__errno>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	6006      	str	r6, [r0, #0]
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}

0800c4c8 <xflow>:
 800c4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	461d      	mov	r5, r3
 800c4ce:	b108      	cbz	r0, 800c4d4 <xflow+0xc>
 800c4d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4d4:	e9cd 2300 	strd	r2, r3, [sp]
 800c4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 f856 	bl	8000590 <__aeabi_dmul>
 800c4e4:	2222      	movs	r2, #34	; 0x22
 800c4e6:	b003      	add	sp, #12
 800c4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4ec:	f7ff bfe2 	b.w	800c4b4 <with_errno>

0800c4f0 <__math_uflow>:
 800c4f0:	b508      	push	{r3, lr}
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c4f8:	f7ff ffe6 	bl	800c4c8 <xflow>
 800c4fc:	ec41 0b10 	vmov	d0, r0, r1
 800c500:	bd08      	pop	{r3, pc}

0800c502 <__math_oflow>:
 800c502:	b508      	push	{r3, lr}
 800c504:	2200      	movs	r2, #0
 800c506:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c50a:	f7ff ffdd 	bl	800c4c8 <xflow>
 800c50e:	ec41 0b10 	vmov	d0, r0, r1
 800c512:	bd08      	pop	{r3, pc}

0800c514 <_init>:
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	bf00      	nop
 800c518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51a:	bc08      	pop	{r3}
 800c51c:	469e      	mov	lr, r3
 800c51e:	4770      	bx	lr

0800c520 <_fini>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr
