
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f1c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009104  08009104  000278d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009104  08009104  000278d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009104  08009104  000278d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078d8  20000000  0800910c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000768c  200078d8  080109e4  000278d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ef64  080109e4  0002ef64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000278d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00027908  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b05b  00000000  00000000  000279c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9c  00000000  00000000  00042a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  000469b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e9  00000000  00000000  00048078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002297a  00000000  00000000  00049161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c456  00000000  00000000  0006badb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e30c7  00000000  00000000  00087f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061a8  00000000  00000000  0016aff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001711a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001d97  00000000  00000000  0017122b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00172fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200078d8 	.word	0x200078d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080090dc 	.word	0x080090dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200078dc 	.word	0x200078dc
 8000214:	080090dc 	.word	0x080090dc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <ADC1_IN1_autocorr_calc>:
arm_status StatusCoeffs_5;
arm_status StatusCoeffs_6;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e01e      	b.n	8000bda <ADC1_IN1_autocorr_calc+0x4a>
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag  for the data set*/
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000ba2:	2396      	movs	r3, #150	; 0x96
 8000ba4:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1); // A CMSIS DSP function for computing dot products
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <ADC1_IN1_autocorr_calc+0x5c>)
 8000bae:	4413      	add	r3, r2
 8000bb0:	1d18      	adds	r0, r3, #4
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <ADC1_IN1_autocorr_calc+0x60>)
 8000bb8:	f008 f900 	bl	8008dbc <arm_dot_prod_f32>

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000bbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000bf4 <ADC1_IN1_autocorr_calc+0x64>
 8000bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <ADC1_IN1_autocorr_calc+0x68>)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b0a      	cmp	r3, #10
 8000bde:	d9dd      	bls.n	8000b9c <ADC1_IN1_autocorr_calc+0xc>
	}
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20007aec 	.word	0x20007aec
 8000bf0:	20007b10 	.word	0x20007b10
 8000bf4:	43200000 	.word	0x43200000
 8000bf8:	200078f4 	.word	0x200078f4

08000bfc <ADC1_IN1_autoreg_coeffs>:

float32_t* ADC1_IN1_autoreg_coeffs(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000c02:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c0a:	e013      	b.n	8000c34 <ADC1_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000c0c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c10:	3301      	adds	r3, #1
 8000c12:	4a43      	ldr	r2, [pc, #268]	; (8000d20 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000c24:	443b      	add	r3, r7
 8000c26:	3b38      	subs	r3, #56	; 0x38
 8000c28:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c2a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c2e:	3301      	adds	r3, #1
 8000c30:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c34:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c38:	2b09      	cmp	r3, #9
 8000c3a:	d9e7      	bls.n	8000c0c <ADC1_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1); //Initializes the autocorrelations matrix
 8000c3c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000c40:	2201      	movs	r2, #1
 8000c42:	210a      	movs	r1, #10
 8000c44:	4837      	ldr	r0, [pc, #220]	; (8000d24 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000c46:	f007 feed 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000c50:	e02f      	b.n	8000cb2 <ADC1_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000c58:	e022      	b.n	8000ca0 <ADC1_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000c5a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000c5e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000c68:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000c6c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000c7e:	4413      	add	r3, r2
 8000c80:	4827      	ldr	r0, [pc, #156]	; (8000d20 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000c82:	008a      	lsls	r2, r1, #2
 8000c84:	4402      	add	r2, r0
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000c8c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	440b      	add	r3, r1
 8000c94:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000c96:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000ca0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ca4:	2b09      	cmp	r3, #9
 8000ca6:	ddd8      	ble.n	8000c5a <ADC1_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000ca8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000cac:	3301      	adds	r3, #1
 8000cae:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000cb2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000cb6:	2b09      	cmp	r3, #9
 8000cb8:	ddcb      	ble.n	8000c52 <ADC1_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1); // Initializes the Yule-Walker matrix
 8000cba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000cbe:	220a      	movs	r2, #10
 8000cc0:	210a      	movs	r1, #10
 8000cc2:	4819      	ldr	r0, [pc, #100]	; (8000d28 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000cc4:	f007 feae 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1); // Initializes the inverse Yule-Walker matrix
 8000cc8:	463b      	mov	r3, r7
 8000cca:	220a      	movs	r2, #10
 8000ccc:	210a      	movs	r1, #10
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000cd0:	f007 fea8 	bl	8008a24 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000cd8:	f007 fd9e 	bl	8008818 <arm_mat_inverse_f32>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000ce2:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d113      	bne.n	8000d12 <ADC1_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4810      	ldr	r0, [pc, #64]	; (8000d30 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000cf0:	f008 f8bc 	bl	8008e6c <memset>

		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1); //Initializes the coefficients Matrix
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	210a      	movs	r1, #10
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000cfc:	f007 fe92 	bl	8008a24 <arm_mat_init_f32>

        StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
 8000d00:	4a0c      	ldr	r2, [pc, #48]	; (8000d34 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d06:	f007 fce7 	bl	80086d8 <arm_mat_mult_f32>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <ADC1_IN1_autoreg_coeffs+0x13c>)
 8000d10:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_1;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <ADC1_IN1_autoreg_coeffs+0x134>)
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200078f4 	.word	0x200078f4
 8000d24:	20008b24 	.word	0x20008b24
 8000d28:	20008ac4 	.word	0x20008ac4
 8000d2c:	20008af4 	.word	0x20008af4
 8000d30:	200079fc 	.word	0x200079fc
 8000d34:	20008b54 	.word	0x20008b54
 8000d38:	20008b84 	.word	0x20008b84

08000d3c <ADC1_IN2_autocorr_calc>:



void ADC1_IN2_autocorr_calc(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	e01e      	b.n	8000d86 <ADC1_IN2_autocorr_calc+0x4a>
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000d4e:	2396      	movs	r3, #150	; 0x96
 8000d50:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3308      	adds	r3, #8
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <ADC1_IN2_autocorr_calc+0x5c>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	1d18      	adds	r0, r3, #4
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <ADC1_IN2_autocorr_calc+0x60>)
 8000d64:	f008 f82a 	bl	8008dbc <arm_dot_prod_f32>

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000d68:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d6c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000da0 <ADC1_IN2_autocorr_calc+0x64>
 8000d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <ADC1_IN2_autocorr_calc+0x68>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3301      	adds	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d9dd      	bls.n	8000d48 <ADC1_IN2_autocorr_calc+0xc>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20007d90 	.word	0x20007d90
 8000d9c:	20007db4 	.word	0x20007db4
 8000da0:	43200000 	.word	0x43200000
 8000da4:	20007920 	.word	0x20007920

08000da8 <ADC1_IN2_autoreg_coeffs>:

float32_t* ADC1_IN2_autoreg_coeffs(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000dae:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_2 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000db6:	e013      	b.n	8000de0 <ADC1_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_2[n] = AutoCorr_2[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000db8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <ADC1_IN2_autoreg_coeffs+0x124>)
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000dd0:	443b      	add	r3, r7
 8000dd2:	3b38      	subs	r3, #56	; 0x38
 8000dd4:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000dd6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000de0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	d9e7      	bls.n	8000db8 <ADC1_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_2); //Initializes the autocorrelations matrix
 8000de8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000dec:	2201      	movs	r2, #1
 8000dee:	210a      	movs	r1, #10
 8000df0:	4837      	ldr	r0, [pc, #220]	; (8000ed0 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000df2:	f007 fe17 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_2[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000dfc:	e02f      	b.n	8000e5e <ADC1_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e04:	e022      	b.n	8000e4c <ADC1_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_2[r * 10 + c] = AutoCorr_2[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000e06:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e14:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e18:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	461a      	mov	r2, r3
 8000e26:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4827      	ldr	r0, [pc, #156]	; (8000ecc <ADC1_IN2_autoreg_coeffs+0x124>)
 8000e2e:	008a      	lsls	r2, r1, #2
 8000e30:	4402      	add	r2, r0
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000e38:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000e42:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e46:	3301      	adds	r3, #1
 8000e48:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e4c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	ddd8      	ble.n	8000e06 <ADC1_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000e54:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000e5e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	ddcb      	ble.n	8000dfe <ADC1_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_2); // Initializes the Yule-Walker matrix
 8000e66:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e6a:	220a      	movs	r2, #10
 8000e6c:	210a      	movs	r1, #10
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000e70:	f007 fdd8 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_2[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_2); // Initializes the inverse Yule-Walker matrix
 8000e74:	463b      	mov	r3, r7
 8000e76:	220a      	movs	r2, #10
 8000e78:	210a      	movs	r1, #10
 8000e7a:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000e7c:	f007 fdd2 	bl	8008a24 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_2 = arm_mat_inverse_f32(&ADC1_IN2_YW_mtx, &ADC1_IN2_Inv_YW_mtx);
 8000e80:	4915      	ldr	r1, [pc, #84]	; (8000ed8 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000e82:	4814      	ldr	r0, [pc, #80]	; (8000ed4 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000e84:	f007 fcc8 	bl	8008818 <arm_mat_inverse_f32>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_2 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000e8e:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d113      	bne.n	8000ebe <ADC1_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_2, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000e96:	2228      	movs	r2, #40	; 0x28
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4810      	ldr	r0, [pc, #64]	; (8000edc <ADC1_IN2_autoreg_coeffs+0x134>)
 8000e9c:	f007 ffe6 	bl	8008e6c <memset>

		arm_mat_init_f32(&ADC1_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_2); //Initializes the coefficients Matrix
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <ADC1_IN2_autoreg_coeffs+0x134>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	210a      	movs	r1, #10
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000ea8:	f007 fdbc 	bl	8008a24 <arm_mat_init_f32>

        StatusCoeffs_2 = arm_mat_mult_f32( &ADC1_IN2_Inv_YW_mtx, &ADC1_IN2_AC_mtx, &ADC1_IN2_coeffs_mtx );
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000eb2:	f007 fc11 	bl	80086d8 <arm_mat_mult_f32>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <ADC1_IN2_autoreg_coeffs+0x13c>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_2;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <ADC1_IN2_autoreg_coeffs+0x134>)
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20007920 	.word	0x20007920
 8000ed0:	20008b2c 	.word	0x20008b2c
 8000ed4:	20008acc 	.word	0x20008acc
 8000ed8:	20008afc 	.word	0x20008afc
 8000edc:	20007a24 	.word	0x20007a24
 8000ee0:	20008b5c 	.word	0x20008b5c
 8000ee4:	20008b85 	.word	0x20008b85

08000ee8 <ADC2_IN3_autocorr_calc>:



void ADC2_IN3_autocorr_calc(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e01e      	b.n	8000f32 <ADC2_IN3_autocorr_calc+0x4a>
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000efa:	2396      	movs	r3, #150	; 0x96
 8000efc:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3308      	adds	r3, #8
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <ADC2_IN3_autocorr_calc+0x5c>)
 8000f06:	4413      	add	r3, r2
 8000f08:	1d18      	adds	r0, r3, #4
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <ADC2_IN3_autocorr_calc+0x60>)
 8000f10:	f007 ff54 	bl	8008dbc <arm_dot_prod_f32>

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000f14:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f18:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000f4c <ADC2_IN3_autocorr_calc+0x64>
 8000f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <ADC2_IN3_autocorr_calc+0x68>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	d9dd      	bls.n	8000ef4 <ADC2_IN3_autocorr_calc+0xc>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20008034 	.word	0x20008034
 8000f48:	20008058 	.word	0x20008058
 8000f4c:	43200000 	.word	0x43200000
 8000f50:	2000794c 	.word	0x2000794c

08000f54 <ADC2_IN3_autoreg_coeffs>:

float32_t* ADC2_IN3_autoreg_coeffs(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000f5a:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_3 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000f62:	e013      	b.n	8000f8c <ADC2_IN3_autoreg_coeffs+0x38>
	{
		AC_Matrix_3[n] = AutoCorr_3[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000f64:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <ADC2_IN3_autoreg_coeffs+0x124>)
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000f7c:	443b      	add	r3, r7
 8000f7e:	3b38      	subs	r3, #56	; 0x38
 8000f80:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000f82:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000f86:	3301      	adds	r3, #1
 8000f88:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000f8c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d9e7      	bls.n	8000f64 <ADC2_IN3_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN3_AC_mtx, AR_ORDER, 1, AC_Matrix_3); //Initializes the autocorrelations matrix
 8000f94:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000f98:	2201      	movs	r2, #1
 8000f9a:	210a      	movs	r1, #10
 8000f9c:	4837      	ldr	r0, [pc, #220]	; (800107c <ADC2_IN3_autoreg_coeffs+0x128>)
 8000f9e:	f007 fd41 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_3[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000fa8:	e02f      	b.n	800100a <ADC2_IN3_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000fb0:	e022      	b.n	8000ff8 <ADC2_IN3_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_3[r * 10 + c] = AutoCorr_3[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000fb2:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000fb6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000fc0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000fc4:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4827      	ldr	r0, [pc, #156]	; (8001078 <ADC2_IN3_autoreg_coeffs+0x124>)
 8000fda:	008a      	lsls	r2, r1, #2
 8000fdc:	4402      	add	r2, r0
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000fe4:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000fee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000ff8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	ddd8      	ble.n	8000fb2 <ADC2_IN3_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001000:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001004:	3301      	adds	r3, #1
 8001006:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800100a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800100e:	2b09      	cmp	r3, #9
 8001010:	ddcb      	ble.n	8000faa <ADC2_IN3_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN3_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_3); // Initializes the Yule-Walker matrix
 8001012:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001016:	220a      	movs	r2, #10
 8001018:	210a      	movs	r1, #10
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <ADC2_IN3_autoreg_coeffs+0x12c>)
 800101c:	f007 fd02 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_3[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN3_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_3); // Initializes the inverse Yule-Walker matrix
 8001020:	463b      	mov	r3, r7
 8001022:	220a      	movs	r2, #10
 8001024:	210a      	movs	r1, #10
 8001026:	4817      	ldr	r0, [pc, #92]	; (8001084 <ADC2_IN3_autoreg_coeffs+0x130>)
 8001028:	f007 fcfc 	bl	8008a24 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_3 = arm_mat_inverse_f32(&ADC2_IN3_YW_mtx, &ADC2_IN3_Inv_YW_mtx);
 800102c:	4915      	ldr	r1, [pc, #84]	; (8001084 <ADC2_IN3_autoreg_coeffs+0x130>)
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <ADC2_IN3_autoreg_coeffs+0x12c>)
 8001030:	f007 fbf2 	bl	8008818 <arm_mat_inverse_f32>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_3 == ARM_MATH_SUCCESS) // Check if operation was successful
 800103a:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800103e:	2b00      	cmp	r3, #0
 8001040:	d113      	bne.n	800106a <ADC2_IN3_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_3, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8001042:	2228      	movs	r2, #40	; 0x28
 8001044:	2100      	movs	r1, #0
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <ADC2_IN3_autoreg_coeffs+0x134>)
 8001048:	f007 ff10 	bl	8008e6c <memset>

		arm_mat_init_f32(&ADC2_IN3_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_3); //Initializes the coefficients Matrix
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <ADC2_IN3_autoreg_coeffs+0x134>)
 800104e:	2201      	movs	r2, #1
 8001050:	210a      	movs	r1, #10
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <ADC2_IN3_autoreg_coeffs+0x138>)
 8001054:	f007 fce6 	bl	8008a24 <arm_mat_init_f32>

        StatusCoeffs_3 = arm_mat_mult_f32( &ADC2_IN3_Inv_YW_mtx, &ADC2_IN3_AC_mtx, &ADC2_IN3_coeffs_mtx );
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <ADC2_IN3_autoreg_coeffs+0x138>)
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <ADC2_IN3_autoreg_coeffs+0x128>)
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <ADC2_IN3_autoreg_coeffs+0x130>)
 800105e:	f007 fb3b 	bl	80086d8 <arm_mat_mult_f32>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <ADC2_IN3_autoreg_coeffs+0x13c>)
 8001068:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_3;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <ADC2_IN3_autoreg_coeffs+0x134>)
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000794c 	.word	0x2000794c
 800107c:	20008b34 	.word	0x20008b34
 8001080:	20008ad4 	.word	0x20008ad4
 8001084:	20008b04 	.word	0x20008b04
 8001088:	20007a4c 	.word	0x20007a4c
 800108c:	20008b64 	.word	0x20008b64
 8001090:	20008b86 	.word	0x20008b86

08001094 <ADC2_IN4_autocorr_calc>:



void ADC2_IN4_autocorr_calc(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e01e      	b.n	80010de <ADC2_IN4_autocorr_calc+0x4a>
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80010a6:	2396      	movs	r3, #150	; 0x96
 80010a8:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3308      	adds	r3, #8
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <ADC2_IN4_autocorr_calc+0x5c>)
 80010b2:	4413      	add	r3, r2
 80010b4:	1d18      	adds	r0, r3, #4
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <ADC2_IN4_autocorr_calc+0x60>)
 80010bc:	f007 fe7e 	bl	8008dbc <arm_dot_prod_f32>

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80010c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010c4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80010f8 <ADC2_IN4_autocorr_calc+0x64>
 80010c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <ADC2_IN4_autocorr_calc+0x68>)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b09      	cmp	r3, #9
 80010e2:	d9dd      	bls.n	80010a0 <ADC2_IN4_autocorr_calc+0xc>
	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200082d8 	.word	0x200082d8
 80010f4:	200082fc 	.word	0x200082fc
 80010f8:	43200000 	.word	0x43200000
 80010fc:	20007978 	.word	0x20007978

08001100 <ADC2_IN4_autoreg_coeffs>:

float32_t* ADC2_IN4_autoreg_coeffs(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001106:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_4 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800110e:	e013      	b.n	8001138 <ADC2_IN4_autoreg_coeffs+0x38>
	{
		AC_Matrix_4[n] = AutoCorr_4[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001110:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001114:	3301      	adds	r3, #1
 8001116:	4a43      	ldr	r2, [pc, #268]	; (8001224 <ADC2_IN4_autoreg_coeffs+0x124>)
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001128:	443b      	add	r3, r7
 800112a:	3b38      	subs	r3, #56	; 0x38
 800112c:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800112e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001138:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800113c:	2b09      	cmp	r3, #9
 800113e:	d9e7      	bls.n	8001110 <ADC2_IN4_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN4_AC_mtx, AR_ORDER, 1, AC_Matrix_4); //Initializes the autocorrelations matrix
 8001140:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001144:	2201      	movs	r2, #1
 8001146:	210a      	movs	r1, #10
 8001148:	4837      	ldr	r0, [pc, #220]	; (8001228 <ADC2_IN4_autoreg_coeffs+0x128>)
 800114a:	f007 fc6b 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_4[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001154:	e02f      	b.n	80011b6 <ADC2_IN4_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800115c:	e022      	b.n	80011a4 <ADC2_IN4_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_4[r * 10 + c] = AutoCorr_4[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800115e:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001162:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800116c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001170:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	461a      	mov	r2, r3
 800117e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001182:	4413      	add	r3, r2
 8001184:	4827      	ldr	r0, [pc, #156]	; (8001224 <ADC2_IN4_autoreg_coeffs+0x124>)
 8001186:	008a      	lsls	r2, r1, #2
 8001188:	4402      	add	r2, r0
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001190:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800119a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800119e:	3301      	adds	r3, #1
 80011a0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80011a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011a8:	2b09      	cmp	r3, #9
 80011aa:	ddd8      	ble.n	800115e <ADC2_IN4_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80011ac:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80011b6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80011ba:	2b09      	cmp	r3, #9
 80011bc:	ddcb      	ble.n	8001156 <ADC2_IN4_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN4_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_4); // Initializes the Yule-Walker matrix
 80011be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80011c2:	220a      	movs	r2, #10
 80011c4:	210a      	movs	r1, #10
 80011c6:	4819      	ldr	r0, [pc, #100]	; (800122c <ADC2_IN4_autoreg_coeffs+0x12c>)
 80011c8:	f007 fc2c 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_4[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN4_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_4); // Initializes the inverse Yule-Walker matrix
 80011cc:	463b      	mov	r3, r7
 80011ce:	220a      	movs	r2, #10
 80011d0:	210a      	movs	r1, #10
 80011d2:	4817      	ldr	r0, [pc, #92]	; (8001230 <ADC2_IN4_autoreg_coeffs+0x130>)
 80011d4:	f007 fc26 	bl	8008a24 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_4 = arm_mat_inverse_f32(&ADC2_IN4_YW_mtx, &ADC2_IN4_Inv_YW_mtx);
 80011d8:	4915      	ldr	r1, [pc, #84]	; (8001230 <ADC2_IN4_autoreg_coeffs+0x130>)
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <ADC2_IN4_autoreg_coeffs+0x12c>)
 80011dc:	f007 fb1c 	bl	8008818 <arm_mat_inverse_f32>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_4 == ARM_MATH_SUCCESS) // Check if operation was successful
 80011e6:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d113      	bne.n	8001216 <ADC2_IN4_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_4, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80011ee:	2228      	movs	r2, #40	; 0x28
 80011f0:	2100      	movs	r1, #0
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <ADC2_IN4_autoreg_coeffs+0x134>)
 80011f4:	f007 fe3a 	bl	8008e6c <memset>

		arm_mat_init_f32(&ADC2_IN4_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_4); //Initializes the coefficients Matrix
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <ADC2_IN4_autoreg_coeffs+0x134>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	210a      	movs	r1, #10
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001200:	f007 fc10 	bl	8008a24 <arm_mat_init_f32>

        StatusCoeffs_4 = arm_mat_mult_f32( &ADC2_IN4_Inv_YW_mtx, &ADC2_IN4_AC_mtx, &ADC2_IN4_coeffs_mtx );
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <ADC2_IN4_autoreg_coeffs+0x128>)
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <ADC2_IN4_autoreg_coeffs+0x130>)
 800120a:	f007 fa65 	bl	80086d8 <arm_mat_mult_f32>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <ADC2_IN4_autoreg_coeffs+0x13c>)
 8001214:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_4;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <ADC2_IN4_autoreg_coeffs+0x134>)
}
 8001218:	4618      	mov	r0, r3
 800121a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20007978 	.word	0x20007978
 8001228:	20008b3c 	.word	0x20008b3c
 800122c:	20008adc 	.word	0x20008adc
 8001230:	20008b0c 	.word	0x20008b0c
 8001234:	20007a74 	.word	0x20007a74
 8001238:	20008b6c 	.word	0x20008b6c
 800123c:	20008b87 	.word	0x20008b87

08001240 <ADC3_IN1_autocorr_calc>:



void ADC3_IN1_autocorr_calc(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e01e      	b.n	800128a <ADC3_IN1_autocorr_calc+0x4a>
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001252:	2396      	movs	r3, #150	; 0x96
 8001254:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3308      	adds	r3, #8
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <ADC3_IN1_autocorr_calc+0x5c>)
 800125e:	4413      	add	r3, r2
 8001260:	1d18      	adds	r0, r3, #4
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	490e      	ldr	r1, [pc, #56]	; (80012a0 <ADC3_IN1_autocorr_calc+0x60>)
 8001268:	f007 fda8 	bl	8008dbc <arm_dot_prod_f32>

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800126c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001270:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80012a4 <ADC3_IN1_autocorr_calc+0x64>
 8001274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <ADC3_IN1_autocorr_calc+0x68>)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3301      	adds	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d9dd      	bls.n	800124c <ADC3_IN1_autocorr_calc+0xc>
	}
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000857c 	.word	0x2000857c
 80012a0:	200085a0 	.word	0x200085a0
 80012a4:	43200000 	.word	0x43200000
 80012a8:	200079a4 	.word	0x200079a4

080012ac <ADC3_IN1_autoreg_coeffs>:

float32_t* ADC3_IN1_autoreg_coeffs(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80012b2:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_5 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80012ba:	e013      	b.n	80012e4 <ADC3_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_5[n] = AutoCorr_5[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80012bc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <ADC3_IN1_autoreg_coeffs+0x124>)
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80012d4:	443b      	add	r3, r7
 80012d6:	3b38      	subs	r3, #56	; 0x38
 80012d8:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80012da:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80012de:	3301      	adds	r3, #1
 80012e0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80012e4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d9e7      	bls.n	80012bc <ADC3_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_5); //Initializes the autocorrelations matrix
 80012ec:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80012f0:	2201      	movs	r2, #1
 80012f2:	210a      	movs	r1, #10
 80012f4:	4837      	ldr	r0, [pc, #220]	; (80013d4 <ADC3_IN1_autoreg_coeffs+0x128>)
 80012f6:	f007 fb95 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_5[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001300:	e02f      	b.n	8001362 <ADC3_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001308:	e022      	b.n	8001350 <ADC3_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_5[r * 10 + c] = AutoCorr_5[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800130a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800130e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001318:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800131c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	461a      	mov	r2, r3
 800132a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800132e:	4413      	add	r3, r2
 8001330:	4827      	ldr	r0, [pc, #156]	; (80013d0 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001332:	008a      	lsls	r2, r1, #2
 8001334:	4402      	add	r2, r0
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800133c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001346:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800134a:	3301      	adds	r3, #1
 800134c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001350:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001354:	2b09      	cmp	r3, #9
 8001356:	ddd8      	ble.n	800130a <ADC3_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001358:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800135c:	3301      	adds	r3, #1
 800135e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001362:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001366:	2b09      	cmp	r3, #9
 8001368:	ddcb      	ble.n	8001302 <ADC3_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_5); // Initializes the Yule-Walker matrix
 800136a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800136e:	220a      	movs	r2, #10
 8001370:	210a      	movs	r1, #10
 8001372:	4819      	ldr	r0, [pc, #100]	; (80013d8 <ADC3_IN1_autoreg_coeffs+0x12c>)
 8001374:	f007 fb56 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_5[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_5); // Initializes the inverse Yule-Walker matrix
 8001378:	463b      	mov	r3, r7
 800137a:	220a      	movs	r2, #10
 800137c:	210a      	movs	r1, #10
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <ADC3_IN1_autoreg_coeffs+0x130>)
 8001380:	f007 fb50 	bl	8008a24 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_5 = arm_mat_inverse_f32(&ADC3_IN1_YW_mtx, &ADC3_IN1_Inv_YW_mtx);
 8001384:	4915      	ldr	r1, [pc, #84]	; (80013dc <ADC3_IN1_autoreg_coeffs+0x130>)
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <ADC3_IN1_autoreg_coeffs+0x12c>)
 8001388:	f007 fa46 	bl	8008818 <arm_mat_inverse_f32>
 800138c:	4603      	mov	r3, r0
 800138e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_5 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001392:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001396:	2b00      	cmp	r3, #0
 8001398:	d113      	bne.n	80013c2 <ADC3_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4810      	ldr	r0, [pc, #64]	; (80013e0 <ADC3_IN1_autoreg_coeffs+0x134>)
 80013a0:	f007 fd64 	bl	8008e6c <memset>

		arm_mat_init_f32(&ADC3_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_5); //Initializes the coefficients Matrix
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <ADC3_IN1_autoreg_coeffs+0x138>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	210a      	movs	r1, #10
 80013aa:	480f      	ldr	r0, [pc, #60]	; (80013e8 <ADC3_IN1_autoreg_coeffs+0x13c>)
 80013ac:	f007 fb3a 	bl	8008a24 <arm_mat_init_f32>

        StatusCoeffs_5 = arm_mat_mult_f32( &ADC3_IN1_Inv_YW_mtx, &ADC3_IN1_AC_mtx, &ADC3_IN1_coeffs_mtx );
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <ADC3_IN1_autoreg_coeffs+0x13c>)
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <ADC3_IN1_autoreg_coeffs+0x128>)
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <ADC3_IN1_autoreg_coeffs+0x130>)
 80013b6:	f007 f98f 	bl	80086d8 <arm_mat_mult_f32>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <ADC3_IN1_autoreg_coeffs+0x140>)
 80013c0:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_5;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <ADC3_IN1_autoreg_coeffs+0x138>)
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200079a4 	.word	0x200079a4
 80013d4:	20008b44 	.word	0x20008b44
 80013d8:	20008ae4 	.word	0x20008ae4
 80013dc:	20008b14 	.word	0x20008b14
 80013e0:	200079fc 	.word	0x200079fc
 80013e4:	20007a9c 	.word	0x20007a9c
 80013e8:	20008b74 	.word	0x20008b74
 80013ec:	20008b88 	.word	0x20008b88

080013f0 <ADC3_IN2_autocorr_calc>:



void ADC3_IN2_autocorr_calc(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e01e      	b.n	800143a <ADC3_IN2_autocorr_calc+0x4a>
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001402:	2396      	movs	r3, #150	; 0x96
 8001404:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3308      	adds	r3, #8
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <ADC3_IN2_autocorr_calc+0x5c>)
 800140e:	4413      	add	r3, r2
 8001410:	1d18      	adds	r0, r3, #4
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <ADC3_IN2_autocorr_calc+0x60>)
 8001418:	f007 fcd0 	bl	8008dbc <arm_dot_prod_f32>

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800141c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001420:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001454 <ADC3_IN2_autocorr_calc+0x64>
 8001424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <ADC3_IN2_autocorr_calc+0x68>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b09      	cmp	r3, #9
 800143e:	d9dd      	bls.n	80013fc <ADC3_IN2_autocorr_calc+0xc>
	}
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20008820 	.word	0x20008820
 8001450:	20008844 	.word	0x20008844
 8001454:	43200000 	.word	0x43200000
 8001458:	200079d0 	.word	0x200079d0

0800145c <ADC3_IN2_autoreg_coeffs>:

float32_t* ADC3_IN2_autoreg_coeffs(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001462:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_6 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800146a:	e013      	b.n	8001494 <ADC3_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_6[n] = AutoCorr_6[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 800146c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001470:	3301      	adds	r3, #1
 8001472:	4a43      	ldr	r2, [pc, #268]	; (8001580 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001484:	443b      	add	r3, r7
 8001486:	3b38      	subs	r3, #56	; 0x38
 8001488:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800148a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800148e:	3301      	adds	r3, #1
 8001490:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001494:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001498:	2b09      	cmp	r3, #9
 800149a:	d9e7      	bls.n	800146c <ADC3_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_6); //Initializes the autocorrelations matrix
 800149c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80014a0:	2201      	movs	r2, #1
 80014a2:	210a      	movs	r1, #10
 80014a4:	4837      	ldr	r0, [pc, #220]	; (8001584 <ADC3_IN2_autoreg_coeffs+0x128>)
 80014a6:	f007 fabd 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_6[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80014b0:	e02f      	b.n	8001512 <ADC3_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80014b8:	e022      	b.n	8001500 <ADC3_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_6[r * 10 + c] = AutoCorr_6[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80014ba:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80014be:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80014c8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80014cc:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	461a      	mov	r2, r3
 80014da:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80014de:	4413      	add	r3, r2
 80014e0:	4827      	ldr	r0, [pc, #156]	; (8001580 <ADC3_IN2_autoreg_coeffs+0x124>)
 80014e2:	008a      	lsls	r2, r1, #2
 80014e4:	4402      	add	r2, r0
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80014ec:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80014f6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80014fa:	3301      	adds	r3, #1
 80014fc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001500:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001504:	2b09      	cmp	r3, #9
 8001506:	ddd8      	ble.n	80014ba <ADC3_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001508:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800150c:	3301      	adds	r3, #1
 800150e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001512:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001516:	2b09      	cmp	r3, #9
 8001518:	ddcb      	ble.n	80014b2 <ADC3_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_6); // Initializes the Yule-Walker matrix
 800151a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800151e:	220a      	movs	r2, #10
 8001520:	210a      	movs	r1, #10
 8001522:	4819      	ldr	r0, [pc, #100]	; (8001588 <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001524:	f007 fa7e 	bl	8008a24 <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_6[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_6); // Initializes the inverse Yule-Walker matrix
 8001528:	463b      	mov	r3, r7
 800152a:	220a      	movs	r2, #10
 800152c:	210a      	movs	r1, #10
 800152e:	4817      	ldr	r0, [pc, #92]	; (800158c <ADC3_IN2_autoreg_coeffs+0x130>)
 8001530:	f007 fa78 	bl	8008a24 <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_6 = arm_mat_inverse_f32(&ADC3_IN2_YW_mtx, &ADC3_IN2_Inv_YW_mtx);
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <ADC3_IN2_autoreg_coeffs+0x130>)
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001538:	f007 f96e 	bl	8008818 <arm_mat_inverse_f32>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_6 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001542:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001546:	2b00      	cmp	r3, #0
 8001548:	d113      	bne.n	8001572 <ADC3_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_6, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800154a:	2228      	movs	r2, #40	; 0x28
 800154c:	2100      	movs	r1, #0
 800154e:	4810      	ldr	r0, [pc, #64]	; (8001590 <ADC3_IN2_autoreg_coeffs+0x134>)
 8001550:	f007 fc8c 	bl	8008e6c <memset>

		arm_mat_init_f32(&ADC3_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_6); //Initializes the coefficients Matrix
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <ADC3_IN2_autoreg_coeffs+0x134>)
 8001556:	2201      	movs	r2, #1
 8001558:	210a      	movs	r1, #10
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <ADC3_IN2_autoreg_coeffs+0x138>)
 800155c:	f007 fa62 	bl	8008a24 <arm_mat_init_f32>

        StatusCoeffs_6 = arm_mat_mult_f32( &ADC3_IN2_Inv_YW_mtx, &ADC3_IN2_AC_mtx, &ADC3_IN2_coeffs_mtx );
 8001560:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <ADC3_IN2_autoreg_coeffs+0x138>)
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <ADC3_IN2_autoreg_coeffs+0x128>)
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <ADC3_IN2_autoreg_coeffs+0x130>)
 8001566:	f007 f8b7 	bl	80086d8 <arm_mat_mult_f32>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <ADC3_IN2_autoreg_coeffs+0x13c>)
 8001570:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_6;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <ADC3_IN2_autoreg_coeffs+0x134>)
}
 8001574:	4618      	mov	r0, r3
 8001576:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200079d0 	.word	0x200079d0
 8001584:	20008b4c 	.word	0x20008b4c
 8001588:	20008aec 	.word	0x20008aec
 800158c:	20008b1c 	.word	0x20008b1c
 8001590:	20007ac4 	.word	0x20007ac4
 8001594:	20008b7c 	.word	0x20008b7c
 8001598:	20008b89 	.word	0x20008b89

0800159c <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e00a      	b.n	80015c0 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3304      	adds	r3, #4
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	2b07      	cmp	r3, #7
 80015c4:	d9f1      	bls.n	80015aa <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	e00b      	b.n	80015ea <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3308      	adds	r3, #8
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	3304      	adds	r3, #4
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b9f      	cmp	r3, #159	; 0x9f
 80015ee:	d9f0      	bls.n	80015d2 <MA_ADC1_IN1_Init+0x36>
	}
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e05a      	b.n	80016c4 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4932      	ldr	r1, [pc, #200]	; (80016dc <MA_ADC1_IN1_Update+0xdc>)
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	3212      	adds	r2, #18
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	440a      	add	r2, r1
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	3304      	adds	r3, #4
 8001626:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b08      	cmp	r3, #8
 8001638:	d102      	bne.n	8001640 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3308      	adds	r3, #8
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3304      	adds	r3, #4
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e02c      	b.n	80016b8 <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	3b01      	subs	r3, #1
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	e001      	b.n	8001670 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 800166c:	2307      	movs	r3, #7
 800166e:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3308      	adds	r3, #8
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3304      	adds	r3, #4
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <MA_ADC1_IN1_Update+0xe0>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	edd3 6a00 	vldr	s13, [r3]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	3304      	adds	r3, #4
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3308      	adds	r3, #8
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3304      	adds	r3, #4
 80016ae:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b07      	cmp	r3, #7
 80016bc:	d9cf      	bls.n	800165e <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d99f      	bls.n	800160e <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	20000048 	.word	0x20000048
 80016e0:	20000000 	.word	0x20000000

080016e4 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e00a      	b.n	8001708 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3304      	adds	r3, #4
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3301      	adds	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d9f1      	bls.n	80016f2 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	e00b      	b.n	8001732 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3308      	adds	r3, #8
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3304      	adds	r3, #4
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3301      	adds	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b9f      	cmp	r3, #159	; 0x9f
 8001736:	d9f0      	bls.n	800171a <MA_ADC1_IN2_Init+0x36>
	}
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e05a      	b.n	800180c <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4932      	ldr	r1, [pc, #200]	; (8001824 <MA_ADC1_IN2_Update+0xdc>)
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	3212      	adds	r2, #18
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	440a      	add	r2, r1
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	3304      	adds	r3, #4
 800176e:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d102      	bne.n	8001788 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3308      	adds	r3, #8
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3304      	adds	r3, #4
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e02c      	b.n	8001800 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	e001      	b.n	80017b8 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 80017b4:	2307      	movs	r3, #7
 80017b6:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3308      	adds	r3, #8
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	3304      	adds	r3, #4
 80017c4:	ed93 7a00 	vldr	s14, [r3]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <MA_ADC1_IN2_Update+0xe0>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	edd3 6a00 	vldr	s13, [r3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3304      	adds	r3, #4
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3308      	adds	r3, #8
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3304      	adds	r3, #4
 80017f6:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b07      	cmp	r3, #7
 8001804:	d9cf      	bls.n	80017a6 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001812:	4293      	cmp	r3, r2
 8001814:	d99f      	bls.n	8001756 <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20001454 	.word	0x20001454
 8001828:	20000000 	.word	0x20000000

0800182c <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e00a      	b.n	8001850 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3304      	adds	r3, #4
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	3301      	adds	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b07      	cmp	r3, #7
 8001854:	d9f1      	bls.n	800183a <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	e00b      	b.n	800187a <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3308      	adds	r3, #8
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	3304      	adds	r3, #4
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3301      	adds	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b9f      	cmp	r3, #159	; 0x9f
 800187e:	d9f0      	bls.n	8001862 <MA_ADC2_IN3_Init+0x36>
	}
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e05a      	b.n	8001954 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4932      	ldr	r1, [pc, #200]	; (800196c <MA_ADC2_IN3_Update+0xdc>)
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	3212      	adds	r2, #18
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	440a      	add	r2, r1
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3304      	adds	r3, #4
 80018b6:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d102      	bne.n	80018d0 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3308      	adds	r3, #8
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3304      	adds	r3, #4
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e02c      	b.n	8001948 <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	e001      	b.n	8001900 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 80018fc:	2307      	movs	r3, #7
 80018fe:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3308      	adds	r3, #8
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <MA_ADC2_IN3_Update+0xe0>)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	edd3 6a00 	vldr	s13, [r3]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3304      	adds	r3, #4
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3308      	adds	r3, #8
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3304      	adds	r3, #4
 800193e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3301      	adds	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b07      	cmp	r3, #7
 800194c:	d9cf      	bls.n	80018ee <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800195a:	4293      	cmp	r3, r2
 800195c:	d99f      	bls.n	800189e <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	20002860 	.word	0x20002860
 8001970:	20000000 	.word	0x20000000

08001974 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e00a      	b.n	8001998 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3304      	adds	r3, #4
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b07      	cmp	r3, #7
 800199c:	d9f1      	bls.n	8001982 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	e00b      	b.n	80019c2 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3308      	adds	r3, #8
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b9f      	cmp	r3, #159	; 0x9f
 80019c6:	d9f0      	bls.n	80019aa <MA_ADC2_IN4_Init+0x36>
	}
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e05a      	b.n	8001a9c <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4932      	ldr	r1, [pc, #200]	; (8001ab4 <MA_ADC2_IN4_Update+0xdc>)
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	3212      	adds	r2, #18
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	440a      	add	r2, r1
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3304      	adds	r3, #4
 80019fe:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d102      	bne.n	8001a18 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	e02c      	b.n	8001a90 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	e001      	b.n	8001a48 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001a44:	2307      	movs	r3, #7
 8001a46:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3304      	adds	r3, #4
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <MA_ADC2_IN4_Update+0xe0>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	edd3 6a00 	vldr	s13, [r3]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	3304      	adds	r3, #4
 8001a86:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b07      	cmp	r3, #7
 8001a94:	d9cf      	bls.n	8001a36 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d99f      	bls.n	80019e6 <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20003c6c 	.word	0x20003c6c
 8001ab8:	20000000 	.word	0x20000000

08001abc <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e00a      	b.n	8001ae0 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3301      	adds	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	d9f1      	bls.n	8001aca <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	e00b      	b.n	8001b0a <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3308      	adds	r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3304      	adds	r3, #4
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b9f      	cmp	r3, #159	; 0x9f
 8001b0e:	d9f0      	bls.n	8001af2 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e05a      	b.n	8001be4 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4932      	ldr	r1, [pc, #200]	; (8001bfc <MA_ADC3_IN1_Update+0xdc>)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	3212      	adds	r2, #18
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	440a      	add	r2, r1
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3304      	adds	r3, #4
 8001b46:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d102      	bne.n	8001b60 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3308      	adds	r3, #8
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e02c      	b.n	8001bd8 <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e001      	b.n	8001b90 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3308      	adds	r3, #8
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <MA_ADC3_IN1_Update+0xe0>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	edd3 6a00 	vldr	s13, [r3]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b07      	cmp	r3, #7
 8001bdc:	d9cf      	bls.n	8001b7e <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d99f      	bls.n	8001b2e <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	20005078 	.word	0x20005078
 8001c00:	20000000 	.word	0x20000000

08001c04 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e00a      	b.n	8001c28 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	3301      	adds	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	d9f1      	bls.n	8001c12 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	e00b      	b.n	8001c52 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b9f      	cmp	r3, #159	; 0x9f
 8001c56:	d9f0      	bls.n	8001c3a <MA_ADC3_IN2_Init+0x36>
	}
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e05a      	b.n	8001d2c <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4932      	ldr	r1, [pc, #200]	; (8001d44 <MA_ADC3_IN2_Update+0xdc>)
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	3212      	adds	r2, #18
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	440a      	add	r2, r1
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d102      	bne.n	8001ca8 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3308      	adds	r3, #8
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e02c      	b.n	8001d20 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e001      	b.n	8001cd8 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3308      	adds	r3, #8
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	ed93 7a00 	vldr	s14, [r3]
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <MA_ADC3_IN2_Update+0xe0>)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	edd3 6a00 	vldr	s13, [r3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3308      	adds	r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	d9cf      	bls.n	8001cc6 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d99f      	bls.n	8001c76 <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	20006484 	.word	0x20006484
 8001d48:	20000000 	.word	0x20000000

08001d4c <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <init_ADC1_IN1_struct+0x1c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001d58:	3314      	adds	r3, #20
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <init_ADC1_IN1_struct+0x20>)
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	20009e6c 	.word	0x20009e6c
 8001d6c:	20000048 	.word	0x20000048

08001d70 <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001d76:	7819      	ldrb	r1, [r3, #0]
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <init_ADC1_IN1_FO_biquad_filter+0x20>)
 8001d82:	f007 f80f 	bl	8008da4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000048 	.word	0x20000048
 8001d90:	20001420 	.word	0x20001420

08001d94 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001d9a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da2:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8001db2:	f006 fe3b 	bl	8008a2c <arm_biquad_cascade_df2T_f32>
   }
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000048 	.word	0x20000048
 8001dc0:	20001420 	.word	0x20001420

08001dc4 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <init_ADC1_IN2_struct+0x1c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001dd0:	3320      	adds	r3, #32
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <init_ADC1_IN2_struct+0x20>)
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20009e6c 	.word	0x20009e6c
 8001de4:	20001454 	.word	0x20001454

08001de8 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001dee:	7819      	ldrb	r1, [r3, #0]
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8001dfa:	f006 ffd3 	bl	8008da4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20001454 	.word	0x20001454
 8001e08:	2000282c 	.word	0x2000282c

08001e0c <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 8001e2a:	f006 fdff 	bl	8008a2c <arm_biquad_cascade_df2T_f32>
   }
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20001454 	.word	0x20001454
 8001e38:	2000282c 	.word	0x2000282c

08001e3c <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <init_ADC2_IN3_struct+0x1c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e48:	3314      	adds	r3, #20
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <init_ADC2_IN3_struct+0x20>)
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20009e70 	.word	0x20009e70
 8001e5c:	20002860 	.word	0x20002860

08001e60 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001e66:	7819      	ldrb	r1, [r3, #0]
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8001e72:	f006 ff97 	bl	8008da4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20002860 	.word	0x20002860
 8001e80:	20003c38 	.word	0x20003c38

08001e84 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001e8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8001ea2:	f006 fdc3 	bl	8008a2c <arm_biquad_cascade_df2T_f32>
   }
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20002860 	.word	0x20002860
 8001eb0:	20003c38 	.word	0x20003c38

08001eb4 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <init_ADC2_IN4_struct+0x1c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001ec0:	3320      	adds	r3, #32
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <init_ADC2_IN4_struct+0x20>)
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20009e70 	.word	0x20009e70
 8001ed4:	20003c6c 	.word	0x20003c6c

08001ed8 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001ede:	7819      	ldrb	r1, [r3, #0]
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 8001eea:	f006 ff5b 	bl	8008da4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20003c6c 	.word	0x20003c6c
 8001ef8:	20005044 	.word	0x20005044

08001efc <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0a:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 8001f1a:	f006 fd87 	bl	8008a2c <arm_biquad_cascade_df2T_f32>
   }
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20003c6c 	.word	0x20003c6c
 8001f28:	20005044 	.word	0x20005044

08001f2c <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <init_ADC3_IN1_struct+0x1c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f38:	3314      	adds	r3, #20
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <init_ADC3_IN1_struct+0x20>)
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20009e74 	.word	0x20009e74
 8001f4c:	20005078 	.word	0x20005078

08001f50 <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001f56:	7819      	ldrb	r1, [r3, #0]
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8001f62:	f006 ff1f 	bl	8008da4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20005078 	.word	0x20005078
 8001f70:	20006450 	.word	0x20006450

08001f74 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001f7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8001f92:	f006 fd4b 	bl	8008a2c <arm_biquad_cascade_df2T_f32>
   }
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20005078 	.word	0x20005078
 8001fa0:	20006450 	.word	0x20006450

08001fa4 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <init_ADC3_IN2_struct+0x1c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001fb0:	3320      	adds	r3, #32
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <init_ADC3_IN2_struct+0x20>)
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	20009e74 	.word	0x20009e74
 8001fc4:	20006484 	.word	0x20006484

08001fc8 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8001fce:	7819      	ldrb	r1, [r3, #0]
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 8001fda:	f006 fee3 	bl	8008da4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20006484 	.word	0x20006484
 8001fe8:	2000785c 	.word	0x2000785c

08001fec <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8001ff2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffa:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 800200a:	f006 fd0f 	bl	8008a2c <arm_biquad_cascade_df2T_f32>
   }
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20006484 	.word	0x20006484
 8002018:	2000785c 	.word	0x2000785c

0800201c <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	e010      	b.n	8002052 <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3308      	adds	r3, #8
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ed97 7a03 	vldr	s14, [r7, #12]
 8002044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002048:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b9f      	cmp	r3, #159	; 0x9f
 8002056:	d9eb      	bls.n	8002030 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002058:	edd7 7a03 	vldr	s15, [r7, #12]
 800205c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002078 <ADC1_IN1_OffsetCalc+0x5c>
 8002060:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002064:	eef0 7a66 	vmov.f32	s15, s13
}
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	43200000 	.word	0x43200000

0800207c <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	e010      	b.n	80020b2 <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3308      	adds	r3, #8
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b9f      	cmp	r3, #159	; 0x9f
 80020b6:	d9eb      	bls.n	8002090 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80020b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020bc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020d8 <ADC1_IN2_OffsetCalc+0x5c>
 80020c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	43200000 	.word	0x43200000

080020dc <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	e010      	b.n	8002112 <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3308      	adds	r3, #8
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3304      	adds	r3, #4
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ed97 7a03 	vldr	s14, [r7, #12]
 8002104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002108:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3301      	adds	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b9f      	cmp	r3, #159	; 0x9f
 8002116:	d9eb      	bls.n	80020f0 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002118:	edd7 7a03 	vldr	s15, [r7, #12]
 800211c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002138 <ADC2_IN3_OffsetCalc+0x5c>
 8002120:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002124:	eef0 7a66 	vmov.f32	s15, s13
}
 8002128:	eeb0 0a67 	vmov.f32	s0, s15
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	43200000 	.word	0x43200000

0800213c <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	e010      	b.n	8002172 <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3308      	adds	r3, #8
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3304      	adds	r3, #4
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	ed97 7a03 	vldr	s14, [r7, #12]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3301      	adds	r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b9f      	cmp	r3, #159	; 0x9f
 8002176:	d9eb      	bls.n	8002150 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002178:	edd7 7a03 	vldr	s15, [r7, #12]
 800217c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002198 <ADC2_IN4_OffsetCalc+0x5c>
 8002180:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002184:	eef0 7a66 	vmov.f32	s15, s13
}
 8002188:	eeb0 0a67 	vmov.f32	s0, s15
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	43200000 	.word	0x43200000

0800219c <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	e010      	b.n	80021d2 <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3308      	adds	r3, #8
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80021c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3301      	adds	r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b9f      	cmp	r3, #159	; 0x9f
 80021d6:	d9eb      	bls.n	80021b0 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80021d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021dc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021f8 <ADC3_IN1_OffsetCalc+0x5c>
 80021e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80021e8:	eeb0 0a67 	vmov.f32	s0, s15
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	43200000 	.word	0x43200000

080021fc <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	e010      	b.n	8002232 <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3308      	adds	r3, #8
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	3304      	adds	r3, #4
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ed97 7a03 	vldr	s14, [r7, #12]
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3301      	adds	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b9f      	cmp	r3, #159	; 0x9f
 8002236:	d9eb      	bls.n	8002210 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002238:	edd7 7a03 	vldr	s15, [r7, #12]
 800223c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002258 <ADC3_IN2_OffsetCalc+0x5c>
 8002240:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002244:	eef0 7a66 	vmov.f32	s15, s13
}
 8002248:	eeb0 0a67 	vmov.f32	s0, s15
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	43200000 	.word	0x43200000

0800225c <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e01a      	b.n	80022aa <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3308      	adds	r3, #8
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3304      	adds	r3, #4
 8002280:	ed93 7a00 	vldr	s14, [r3]
 8002284:	edd7 7a00 	vldr	s15, [r7]
 8002288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 8002290:	edd7 7a03 	vldr	s15, [r7, #12]
 8002294:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002298:	ed97 7a05 	vldr	s14, [r7, #20]
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	3301      	adds	r3, #1
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b9f      	cmp	r3, #159	; 0x9f
 80022ae:	d9e1      	bls.n	8002274 <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80022b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80022b4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80022f0 <ADC1_IN1_SD_BL+0x94>
 80022b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022bc:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	f7fe f90d 	bl	80004e0 <__aeabi_f2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	ec43 2b10 	vmov	d0, r2, r3
 80022ce:	f006 fdff 	bl	8008ed0 <sqrt>
 80022d2:	ec53 2b10 	vmov	r2, r3, d0
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fc09 	bl	8000af0 <__aeabi_d2f>
 80022de:	4603      	mov	r3, r0
 80022e0:	ee07 3a90 	vmov	s15, r3
}
 80022e4:	eeb0 0a67 	vmov.f32	s0, s15
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	43200000 	.word	0x43200000

080022f4 <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e01a      	b.n	8002342 <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3308      	adds	r3, #8
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	ed93 7a00 	vldr	s14, [r3]
 800231c:	edd7 7a00 	vldr	s15, [r7]
 8002320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002324:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 8002328:	edd7 7a03 	vldr	s15, [r7, #12]
 800232c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002330:	ed97 7a05 	vldr	s14, [r7, #20]
 8002334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002338:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	3301      	adds	r3, #1
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b9f      	cmp	r3, #159	; 0x9f
 8002346:	d9e1      	bls.n	800230c <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002348:	ed97 7a05 	vldr	s14, [r7, #20]
 800234c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002388 <ADC1_IN2_SD_BL+0x94>
 8002350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002354:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 8002358:	6978      	ldr	r0, [r7, #20]
 800235a:	f7fe f8c1 	bl	80004e0 <__aeabi_f2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	ec43 2b10 	vmov	d0, r2, r3
 8002366:	f006 fdb3 	bl	8008ed0 <sqrt>
 800236a:	ec53 2b10 	vmov	r2, r3, d0
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f7fe fbbd 	bl	8000af0 <__aeabi_d2f>
 8002376:	4603      	mov	r3, r0
 8002378:	ee07 3a90 	vmov	s15, r3

}
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	43200000 	.word	0x43200000

0800238c <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e01a      	b.n	80023da <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	3308      	adds	r3, #8
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3304      	adds	r3, #4
 80023b0:	ed93 7a00 	vldr	s14, [r3]
 80023b4:	edd7 7a00 	vldr	s15, [r7]
 80023b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023bc:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 80023c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	3301      	adds	r3, #1
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b9f      	cmp	r3, #159	; 0x9f
 80023de:	d9e1      	bls.n	80023a4 <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80023e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80023e4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002420 <ADC2_IN3_SD_BL+0x94>
 80023e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ec:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	f7fe f875 	bl	80004e0 <__aeabi_f2d>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	ec43 2b10 	vmov	d0, r2, r3
 80023fe:	f006 fd67 	bl	8008ed0 <sqrt>
 8002402:	ec53 2b10 	vmov	r2, r3, d0
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fb71 	bl	8000af0 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
 8002410:	ee07 3a90 	vmov	s15, r3

}
 8002414:	eeb0 0a67 	vmov.f32	s0, s15
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	43200000 	.word	0x43200000

08002424 <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	e01a      	b.n	8002472 <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	3308      	adds	r3, #8
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	ed93 7a00 	vldr	s14, [r3]
 800244c:	edd7 7a00 	vldr	s15, [r7]
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 8002458:	edd7 7a03 	vldr	s15, [r7, #12]
 800245c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002460:	ed97 7a05 	vldr	s14, [r7, #20]
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	3301      	adds	r3, #1
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b9f      	cmp	r3, #159	; 0x9f
 8002476:	d9e1      	bls.n	800243c <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002478:	ed97 7a05 	vldr	s14, [r7, #20]
 800247c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80024b8 <ADC2_IN4_SD_BL+0x94>
 8002480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002484:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 8002488:	6978      	ldr	r0, [r7, #20]
 800248a:	f7fe f829 	bl	80004e0 <__aeabi_f2d>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	ec43 2b10 	vmov	d0, r2, r3
 8002496:	f006 fd1b 	bl	8008ed0 <sqrt>
 800249a:	ec53 2b10 	vmov	r2, r3, d0
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fb25 	bl	8000af0 <__aeabi_d2f>
 80024a6:	4603      	mov	r3, r0
 80024a8:	ee07 3a90 	vmov	s15, r3

}
 80024ac:	eeb0 0a67 	vmov.f32	s0, s15
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	43200000 	.word	0x43200000

080024bc <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e01a      	b.n	800250a <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	3308      	adds	r3, #8
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	edd7 7a00 	vldr	s15, [r7]
 80024e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ec:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 80024f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002500:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	3301      	adds	r3, #1
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b9f      	cmp	r3, #159	; 0x9f
 800250e:	d9e1      	bls.n	80024d4 <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002510:	ed97 7a05 	vldr	s14, [r7, #20]
 8002514:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002550 <ADC3_IN1_SD_BL+0x94>
 8002518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251c:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 8002520:	6978      	ldr	r0, [r7, #20]
 8002522:	f7fd ffdd 	bl	80004e0 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	ec43 2b10 	vmov	d0, r2, r3
 800252e:	f006 fccf 	bl	8008ed0 <sqrt>
 8002532:	ec53 2b10 	vmov	r2, r3, d0
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe fad9 	bl	8000af0 <__aeabi_d2f>
 800253e:	4603      	mov	r3, r0
 8002540:	ee07 3a90 	vmov	s15, r3

}
 8002544:	eeb0 0a67 	vmov.f32	s0, s15
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	43200000 	.word	0x43200000

08002554 <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	e01a      	b.n	80025a2 <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	3308      	adds	r3, #8
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3304      	adds	r3, #4
 8002578:	ed93 7a00 	vldr	s14, [r3]
 800257c:	edd7 7a00 	vldr	s15, [r7]
 8002580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002584:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 8002588:	edd7 7a03 	vldr	s15, [r7, #12]
 800258c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002590:	ed97 7a05 	vldr	s14, [r7, #20]
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	3301      	adds	r3, #1
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b9f      	cmp	r3, #159	; 0x9f
 80025a6:	d9e1      	bls.n	800256c <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80025a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80025ac:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80025e8 <ADC3_IN2_SD_BL+0x94>
 80025b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b4:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 80025b8:	6978      	ldr	r0, [r7, #20]
 80025ba:	f7fd ff91 	bl	80004e0 <__aeabi_f2d>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	ec43 2b10 	vmov	d0, r2, r3
 80025c6:	f006 fc83 	bl	8008ed0 <sqrt>
 80025ca:	ec53 2b10 	vmov	r2, r3, d0
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fa8d 	bl	8000af0 <__aeabi_d2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	ee07 3a90 	vmov	s15, r3

}
 80025dc:	eeb0 0a67 	vmov.f32	s0, s15
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	43200000 	.word	0x43200000

080025ec <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80025fe:	2301      	movs	r3, #1
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e055      	b.n	80026b0 <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	3308      	adds	r3, #8
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3b01      	subs	r3, #1
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	3308      	adds	r3, #8
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3304      	adds	r3, #4
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262a:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	3301      	adds	r3, #1
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	3308      	adds	r3, #8
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3304      	adds	r3, #4
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	3308      	adds	r3, #8
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002654:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 8002658:	ed97 7a03 	vldr	s14, [r7, #12]
 800265c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	dd1d      	ble.n	80026aa <ADC1_IN1_SSC+0xbe>
 800266e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002672:	eef0 7ae7 	vabs.f32	s15, s15
 8002676:	ed97 7a00 	vldr	s14, [r7]
 800267a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	d40a      	bmi.n	800269a <ADC1_IN1_SSC+0xae>
 8002684:	edd7 7a02 	vldr	s15, [r7, #8]
 8002688:	eef0 7ae7 	vabs.f32	s15, s15
 800268c:	ed97 7a00 	vldr	s14, [r7]
 8002690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	d507      	bpl.n	80026aa <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 800269a:	edd7 7a05 	vldr	s15, [r7, #20]
 800269e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026a6:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	3301      	adds	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b9f      	cmp	r3, #159	; 0x9f
 80026b4:	d9a6      	bls.n	8002604 <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	ee07 3a90 	vmov	s15, r3
}
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80026dc:	2301      	movs	r3, #1
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e055      	b.n	800278e <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	3308      	adds	r3, #8
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	ed93 7a00 	vldr	s14, [r3]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	3308      	adds	r3, #8
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002708:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	3301      	adds	r3, #1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	3308      	adds	r3, #8
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3304      	adds	r3, #4
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	3308      	adds	r3, #8
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002732:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 8002736:	ed97 7a03 	vldr	s14, [r7, #12]
 800273a:	edd7 7a02 	vldr	s15, [r7, #8]
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	dd1d      	ble.n	8002788 <ADC1_IN2_SSC+0xbe>
 800274c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002750:	eef0 7ae7 	vabs.f32	s15, s15
 8002754:	ed97 7a00 	vldr	s14, [r7]
 8002758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002760:	d40a      	bmi.n	8002778 <ADC1_IN2_SSC+0xae>
 8002762:	edd7 7a02 	vldr	s15, [r7, #8]
 8002766:	eef0 7ae7 	vabs.f32	s15, s15
 800276a:	ed97 7a00 	vldr	s14, [r7]
 800276e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d507      	bpl.n	8002788 <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 8002778:	edd7 7a05 	vldr	s15, [r7, #20]
 800277c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002784:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3301      	adds	r3, #1
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b9f      	cmp	r3, #159	; 0x9f
 8002792:	d9a6      	bls.n	80026e2 <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	ee07 3a90 	vmov	s15, r3
}
 800279a:	eeb0 0a67 	vmov.f32	s0, s15
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80027ba:	2301      	movs	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e055      	b.n	800286c <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	3308      	adds	r3, #8
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	ed93 7a00 	vldr	s14, [r3]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	3308      	adds	r3, #8
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3301      	adds	r3, #1
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	3308      	adds	r3, #8
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	ed93 7a00 	vldr	s14, [r3]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	3308      	adds	r3, #8
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3304      	adds	r3, #4
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 8002814:	ed97 7a03 	vldr	s14, [r7, #12]
 8002818:	edd7 7a02 	vldr	s15, [r7, #8]
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	dd1d      	ble.n	8002866 <ADC2_IN3_SSC+0xbe>
 800282a:	edd7 7a03 	vldr	s15, [r7, #12]
 800282e:	eef0 7ae7 	vabs.f32	s15, s15
 8002832:	ed97 7a00 	vldr	s14, [r7]
 8002836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283e:	d40a      	bmi.n	8002856 <ADC2_IN3_SSC+0xae>
 8002840:	edd7 7a02 	vldr	s15, [r7, #8]
 8002844:	eef0 7ae7 	vabs.f32	s15, s15
 8002848:	ed97 7a00 	vldr	s14, [r7]
 800284c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d507      	bpl.n	8002866 <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 8002856:	edd7 7a05 	vldr	s15, [r7, #20]
 800285a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800285e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002862:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	3301      	adds	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2b9f      	cmp	r3, #159	; 0x9f
 8002870:	d9a6      	bls.n	80027c0 <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	ee07 3a90 	vmov	s15, r3
}
 8002878:	eeb0 0a67 	vmov.f32	s0, s15
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 8002886:	b480      	push	{r7}
 8002888:	b087      	sub	sp, #28
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e055      	b.n	800294a <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	3308      	adds	r3, #8
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3304      	adds	r3, #4
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	3308      	adds	r3, #8
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c4:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	3301      	adds	r3, #1
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	3308      	adds	r3, #8
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3304      	adds	r3, #4
 80028d6:	ed93 7a00 	vldr	s14, [r3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	3308      	adds	r3, #8
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3304      	adds	r3, #4
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ee:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 80028f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80028f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	dd1d      	ble.n	8002944 <ADC2_IN4_SSC+0xbe>
 8002908:	edd7 7a03 	vldr	s15, [r7, #12]
 800290c:	eef0 7ae7 	vabs.f32	s15, s15
 8002910:	ed97 7a00 	vldr	s14, [r7]
 8002914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d40a      	bmi.n	8002934 <ADC2_IN4_SSC+0xae>
 800291e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002922:	eef0 7ae7 	vabs.f32	s15, s15
 8002926:	ed97 7a00 	vldr	s14, [r7]
 800292a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	d507      	bpl.n	8002944 <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 8002934:	edd7 7a05 	vldr	s15, [r7, #20]
 8002938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800293c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002940:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	3301      	adds	r3, #1
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b9f      	cmp	r3, #159	; 0x9f
 800294e:	d9a6      	bls.n	800289e <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	ee07 3a90 	vmov	s15, r3
}
 8002956:	eeb0 0a67 	vmov.f32	s0, s15
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002976:	2301      	movs	r3, #1
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	e055      	b.n	8002a28 <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	3308      	adds	r3, #8
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3304      	adds	r3, #4
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	3b01      	subs	r3, #1
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	3308      	adds	r3, #8
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	3304      	adds	r3, #4
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	3301      	adds	r3, #1
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	3308      	adds	r3, #8
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	ed93 7a00 	vldr	s14, [r3]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3308      	adds	r3, #8
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3304      	adds	r3, #4
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029cc:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 80029d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80029d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	dd1d      	ble.n	8002a22 <ADC3_IN1_SSC+0xbe>
 80029e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ea:	eef0 7ae7 	vabs.f32	s15, s15
 80029ee:	ed97 7a00 	vldr	s14, [r7]
 80029f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fa:	d40a      	bmi.n	8002a12 <ADC3_IN1_SSC+0xae>
 80029fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a00:	eef0 7ae7 	vabs.f32	s15, s15
 8002a04:	ed97 7a00 	vldr	s14, [r7]
 8002a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	d507      	bpl.n	8002a22 <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 8002a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a1e:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	3301      	adds	r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b9f      	cmp	r3, #159	; 0x9f
 8002a2c:	d9a6      	bls.n	800297c <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	ee07 3a90 	vmov	s15, r3
}
 8002a34:	eeb0 0a67 	vmov.f32	s0, s15
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	e055      	b.n	8002b06 <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	3308      	adds	r3, #8
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	ed93 7a00 	vldr	s14, [r3]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	3308      	adds	r3, #8
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a80:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	3301      	adds	r3, #1
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 8002aae:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac2:	dd1d      	ble.n	8002b00 <ADC3_IN2_SSC+0xbe>
 8002ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac8:	eef0 7ae7 	vabs.f32	s15, s15
 8002acc:	ed97 7a00 	vldr	s14, [r7]
 8002ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d40a      	bmi.n	8002af0 <ADC3_IN2_SSC+0xae>
 8002ada:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ade:	eef0 7ae7 	vabs.f32	s15, s15
 8002ae2:	ed97 7a00 	vldr	s14, [r7]
 8002ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aee:	d507      	bpl.n	8002b00 <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 8002af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002afc:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	3301      	adds	r3, #1
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b9f      	cmp	r3, #159	; 0x9f
 8002b0a:	d9a6      	bls.n	8002a5a <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	ee07 3a90 	vmov	s15, r3
}
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b30:	e030      	b.n	8002b94 <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	3308      	adds	r3, #8
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	ed93 7a00 	vldr	s14, [r3]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	3308      	adds	r3, #8
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	edd3 6a00 	vldr	s13, [r3]
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b82:	4a47      	ldr	r2, [pc, #284]	; (8002ca0 <ADC1_IN1_TKEO+0x180>)
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	3301      	adds	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	2b9e      	cmp	r3, #158	; 0x9e
 8002b98:	d9cb      	bls.n	8002b32 <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <ADC1_IN1_TKEO+0x180>)
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <ADC1_IN1_TKEO+0x180>)
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	e00e      	b.n	8002bec <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 8002bce:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <ADC1_IN1_TKEO+0x180>)
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	3301      	adds	r3, #1
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2b9f      	cmp	r3, #159	; 0x9f
 8002bf0:	d9ed      	bls.n	8002bce <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002bf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002bf6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002ca4 <ADC1_IN1_TKEO+0x184>
 8002bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bfe:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	e018      	b.n	8002c3a <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 8002c08:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <ADC1_IN1_TKEO+0x180>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 8002c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	3301      	adds	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b9f      	cmp	r3, #159	; 0x9f
 8002c3e:	d9e3      	bls.n	8002c08 <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002c40:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c44:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002ca4 <ADC1_IN1_TKEO+0x184>
 8002c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c4c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8002c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c52:	f7fd fc45 	bl	80004e0 <__aeabi_f2d>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	ec43 2b10 	vmov	d0, r2, r3
 8002c5e:	f006 f937 	bl	8008ed0 <sqrt>
 8002c62:	ec53 2b10 	vmov	r2, r3, d0
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7fd ff41 	bl	8000af0 <__aeabi_d2f>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 8002c72:	edd7 7a00 	vldr	s15, [r7]
 8002c76:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	dd03      	ble.n	8002c94 <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	e000      	b.n	8002c96 <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002c94:	2300      	movs	r3, #0
  }


}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3730      	adds	r7, #48	; 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20008bec 	.word	0x20008bec
 8002ca4:	43200000 	.word	0x43200000

08002ca8 <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb8:	e030      	b.n	8002d1c <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	ed93 7a00 	vldr	s14, [r3]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cce:	3308      	adds	r3, #8
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	edd3 6a00 	vldr	s13, [r3]
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0a:	4a47      	ldr	r2, [pc, #284]	; (8002e28 <ADC1_IN2_TKEO+0x180>)
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	3301      	adds	r3, #1
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	2b9e      	cmp	r3, #158	; 0x9e
 8002d20:	d9cb      	bls.n	8002cba <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <ADC1_IN2_TKEO+0x180>)
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <ADC1_IN2_TKEO+0x180>)
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_2 = 0.0f;
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	e00e      	b.n	8002d74 <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <ADC1_IN2_TKEO+0x180>)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	3301      	adds	r3, #1
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b9f      	cmp	r3, #159	; 0x9f
 8002d78:	d9ed      	bls.n	8002d56 <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002d7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d7e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002e2c <ADC1_IN2_TKEO+0x184>
 8002d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d86:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e018      	b.n	8002dc2 <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 8002d90:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <ADC1_IN2_TKEO+0x180>)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	ed93 7a00 	vldr	s14, [r3]
 8002d9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 8002da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002db0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2b9f      	cmp	r3, #159	; 0x9f
 8002dc6:	d9e3      	bls.n	8002d90 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002dc8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002dcc:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002e2c <ADC1_IN2_TKEO+0x184>
 8002dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 8002dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dda:	f7fd fb81 	bl	80004e0 <__aeabi_f2d>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	ec43 2b10 	vmov	d0, r2, r3
 8002de6:	f006 f873 	bl	8008ed0 <sqrt>
 8002dea:	ec53 2b10 	vmov	r2, r3, d0
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd fe7d 	bl	8000af0 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 8002dfa:	edd7 7a00 	vldr	s15, [r7]
 8002dfe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e06:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	dd03      	ble.n	8002e1c <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	e000      	b.n	8002e1e <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002e1c:	2300      	movs	r3, #0
  }


}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20008e6c 	.word	0x20008e6c
 8002e2c:	43200000 	.word	0x43200000

08002e30 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e40:	e030      	b.n	8002ea4 <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	3308      	adds	r3, #8
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	ed93 7a00 	vldr	s14, [r3]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	3308      	adds	r3, #8
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	edd3 6a00 	vldr	s13, [r3]
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e92:	4a47      	ldr	r2, [pc, #284]	; (8002fb0 <ADC2_IN3_TKEO+0x180>)
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	2b9e      	cmp	r3, #158	; 0x9e
 8002ea8:	d9cb      	bls.n	8002e42 <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <ADC2_IN3_TKEO+0x180>)
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <ADC2_IN3_TKEO+0x180>)
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_3 = 0.0f;
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	e00e      	b.n	8002efc <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 8002ede:	4a34      	ldr	r2, [pc, #208]	; (8002fb0 <ADC2_IN3_TKEO+0x180>)
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2b9f      	cmp	r3, #159	; 0x9f
 8002f00:	d9ed      	bls.n	8002ede <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002f02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f06:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002fb4 <ADC2_IN3_TKEO+0x184>
 8002f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f0e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e018      	b.n	8002f4a <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <ADC2_IN3_TKEO+0x180>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	ed93 7a00 	vldr	s14, [r3]
 8002f24:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8002f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f38:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f40:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2b9f      	cmp	r3, #159	; 0x9f
 8002f4e:	d9e3      	bls.n	8002f18 <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002f50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f54:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002fb4 <ADC2_IN3_TKEO+0x184>
 8002f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8002f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f62:	f7fd fabd 	bl	80004e0 <__aeabi_f2d>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	ec43 2b10 	vmov	d0, r2, r3
 8002f6e:	f005 ffaf 	bl	8008ed0 <sqrt>
 8002f72:	ec53 2b10 	vmov	r2, r3, d0
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7fd fdb9 	bl	8000af0 <__aeabi_d2f>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8002f82:	edd7 7a00 	vldr	s15, [r7]
 8002f86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9a:	dd03      	ble.n	8002fa4 <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	e000      	b.n	8002fa6 <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002fa4:	2300      	movs	r3, #0
  }


}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3730      	adds	r7, #48	; 0x30
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200090ec 	.word	0x200090ec
 8002fb4:	43200000 	.word	0x43200000

08002fb8 <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc8:	e030      	b.n	800302c <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	3308      	adds	r3, #8
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	ed93 7a00 	vldr	s14, [r3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fde:	3308      	adds	r3, #8
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	edd3 6a00 	vldr	s13, [r3]
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	3301      	adds	r3, #1
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	3308      	adds	r3, #8
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301a:	4a47      	ldr	r2, [pc, #284]	; (8003138 <ADC2_IN4_TKEO+0x180>)
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	3301      	adds	r3, #1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	2b9e      	cmp	r3, #158	; 0x9e
 8003030:	d9cb      	bls.n	8002fca <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <ADC2_IN4_TKEO+0x180>)
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 800303a:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <ADC2_IN4_TKEO+0x180>)
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_4 = 0.0f;
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	e00e      	b.n	8003084 <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 8003066:	4a34      	ldr	r2, [pc, #208]	; (8003138 <ADC2_IN4_TKEO+0x180>)
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	3301      	adds	r3, #1
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b9f      	cmp	r3, #159	; 0x9f
 8003088:	d9ed      	bls.n	8003066 <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800308a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800308e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800313c <ADC2_IN4_TKEO+0x184>
 8003092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003096:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	e018      	b.n	80030d2 <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <ADC2_IN4_TKEO+0x180>)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	ed93 7a00 	vldr	s14, [r3]
 80030ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80030b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 80030b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030c0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	3301      	adds	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	2b9f      	cmp	r3, #159	; 0x9f
 80030d6:	d9e3      	bls.n	80030a0 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80030d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030dc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800313c <ADC2_IN4_TKEO+0x184>
 80030e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 80030e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ea:	f7fd f9f9 	bl	80004e0 <__aeabi_f2d>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	ec43 2b10 	vmov	d0, r2, r3
 80030f6:	f005 feeb 	bl	8008ed0 <sqrt>
 80030fa:	ec53 2b10 	vmov	r2, r3, d0
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	f7fd fcf5 	bl	8000af0 <__aeabi_d2f>
 8003106:	4603      	mov	r3, r0
 8003108:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 800310a:	edd7 7a00 	vldr	s15, [r7]
 800310e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003116:	ed97 7a05 	vldr	s14, [r7, #20]
 800311a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	dd03      	ble.n	800312c <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	e000      	b.n	800312e <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 800312c:	2300      	movs	r3, #0
  }


}
 800312e:	4618      	mov	r0, r3
 8003130:	3730      	adds	r7, #48	; 0x30
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2000936c 	.word	0x2000936c
 800313c:	43200000 	.word	0x43200000

08003140 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	; 0x30
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800314c:	2301      	movs	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003150:	e030      	b.n	80031b4 <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	3308      	adds	r3, #8
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	ed93 7a00 	vldr	s14, [r3]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	3308      	adds	r3, #8
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	3b01      	subs	r3, #1
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	3308      	adds	r3, #8
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	edd3 6a00 	vldr	s13, [r3]
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	3301      	adds	r3, #1
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	3308      	adds	r3, #8
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a2:	4a47      	ldr	r2, [pc, #284]	; (80032c0 <ADC3_IN1_TKEO+0x180>)
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	3301      	adds	r3, #1
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	2b9e      	cmp	r3, #158	; 0x9e
 80031b8:	d9cb      	bls.n	8003152 <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <ADC3_IN1_TKEO+0x180>)
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <ADC3_IN1_TKEO+0x180>)
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	e00e      	b.n	800320c <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 80031ee:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <ADC3_IN1_TKEO+0x180>)
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	3301      	adds	r3, #1
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	2b9f      	cmp	r3, #159	; 0x9f
 8003210:	d9ed      	bls.n	80031ee <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003212:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003216:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80032c4 <ADC3_IN1_TKEO+0x184>
 800321a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800321e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e018      	b.n	800325a <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 8003228:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <ADC3_IN1_TKEO+0x180>)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	ed93 7a00 	vldr	s14, [r3]
 8003234:	edd7 7a06 	vldr	s15, [r7, #24]
 8003238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 8003240:	edd7 7a03 	vldr	s15, [r7, #12]
 8003244:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003248:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003250:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	2b9f      	cmp	r3, #159	; 0x9f
 800325e:	d9e3      	bls.n	8003228 <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003260:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003264:	eddf 6a17 	vldr	s13, [pc, #92]	; 80032c4 <ADC3_IN1_TKEO+0x184>
 8003268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 8003270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003272:	f7fd f935 	bl	80004e0 <__aeabi_f2d>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	ec43 2b10 	vmov	d0, r2, r3
 800327e:	f005 fe27 	bl	8008ed0 <sqrt>
 8003282:	ec53 2b10 	vmov	r2, r3, d0
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f7fd fc31 	bl	8000af0 <__aeabi_d2f>
 800328e:	4603      	mov	r3, r0
 8003290:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8003292:	edd7 7a00 	vldr	s15, [r7]
 8003296:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800329a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800329e:	ed97 7a05 	vldr	s14, [r7, #20]
 80032a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	dd03      	ble.n	80032b4 <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 80032ac:	2301      	movs	r3, #1
 80032ae:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	e000      	b.n	80032b6 <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 80032b4:	2300      	movs	r3, #0
  }


}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3730      	adds	r7, #48	; 0x30
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200095ec 	.word	0x200095ec
 80032c4:	43200000 	.word	0x43200000

080032c8 <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80032d4:	2301      	movs	r3, #1
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d8:	e030      	b.n	800333c <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	3308      	adds	r3, #8
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	ed93 7a00 	vldr	s14, [r3]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	3308      	adds	r3, #8
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3304      	adds	r3, #4
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	3b01      	subs	r3, #1
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	3308      	adds	r3, #8
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	3304      	adds	r3, #4
 800330c:	edd3 6a00 	vldr	s13, [r3]
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	3301      	adds	r3, #1
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	3308      	adds	r3, #8
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332a:	4a47      	ldr	r2, [pc, #284]	; (8003448 <ADC3_IN2_TKEO+0x180>)
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	3301      	adds	r3, #1
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	2b9e      	cmp	r3, #158	; 0x9e
 8003340:	d9cb      	bls.n	80032da <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <ADC3_IN2_TKEO+0x180>)
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 800334a:	4b3f      	ldr	r3, [pc, #252]	; (8003448 <ADC3_IN2_TKEO+0x180>)
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_6 = 0.0f;
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	e00e      	b.n	8003394 <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <ADC3_IN2_TKEO+0x180>)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	3301      	adds	r3, #1
 8003392:	623b      	str	r3, [r7, #32]
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	2b9f      	cmp	r3, #159	; 0x9f
 8003398:	d9ed      	bls.n	8003376 <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800339a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800339e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800344c <ADC3_IN2_TKEO+0x184>
 80033a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e018      	b.n	80033e2 <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <ADC3_IN2_TKEO+0x180>)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	ed93 7a00 	vldr	s14, [r3]
 80033bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80033c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 80033c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3301      	adds	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b9f      	cmp	r3, #159	; 0x9f
 80033e6:	d9e3      	bls.n	80033b0 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80033e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033ec:	eddf 6a17 	vldr	s13, [pc, #92]	; 800344c <ADC3_IN2_TKEO+0x184>
 80033f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 80033f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033fa:	f7fd f871 	bl	80004e0 <__aeabi_f2d>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	ec43 2b10 	vmov	d0, r2, r3
 8003406:	f005 fd63 	bl	8008ed0 <sqrt>
 800340a:	ec53 2b10 	vmov	r2, r3, d0
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f7fd fb6d 	bl	8000af0 <__aeabi_d2f>
 8003416:	4603      	mov	r3, r0
 8003418:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 800341a:	edd7 7a00 	vldr	s15, [r7]
 800341e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003426:	ed97 7a05 	vldr	s14, [r7, #20]
 800342a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	dd03      	ble.n	800343c <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 8003434:	2301      	movs	r3, #1
 8003436:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	e000      	b.n	800343e <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 800343c:	2300      	movs	r3, #0
  }


}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	; 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000986c 	.word	0x2000986c
 800344c:	43200000 	.word	0x43200000

08003450 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e038      	b.n	80034ce <ADC1_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <ADC1_DMA_sort_uhb+0x1c>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d117      	bne.n	800349c <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	e00f      	b.n	8003492 <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <ADC1_DMA_sort_uhb+0x94>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <ADC1_DMA_sort_uhb+0x94>)
 8003478:	6811      	ldr	r1, [r2, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3301      	adds	r3, #1
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003498:	d3eb      	bcc.n	8003472 <ADC1_DMA_sort_uhb+0x22>
 800349a:	e015      	b.n	80034c8 <ADC1_DMA_sort_uhb+0x78>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 800349c:	2300      	movs	r3, #0
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	e00e      	b.n	80034c0 <ADC1_DMA_sort_uhb+0x70>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <ADC1_DMA_sort_uhb+0x94>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <ADC1_DMA_sort_uhb+0x94>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80034b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3301      	adds	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80034c6:	d3ec      	bcc.n	80034a2 <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80034d4:	d9c2      	bls.n	800345c <ADC1_DMA_sort_uhb+0xc>
			}
		}
     }

};
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	20009e6c 	.word	0x20009e6c

080034e8 <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 80034ee:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e03a      	b.n	800356c <ADC1_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <ADC1_DMA_sort_lhb+0x1e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <ADC1_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8003506:	f240 2371 	movw	r3, #625	; 0x271
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	e00f      	b.n	800352e <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <ADC1_DMA_sort_lhb+0x9c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <ADC1_DMA_sort_lhb+0x9c>)
 8003514:	6811      	ldr	r1, [r2, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3301      	adds	r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8003534:	d9eb      	bls.n	800350e <ADC1_DMA_sort_lhb+0x26>
 8003536:	e016      	b.n	8003566 <ADC1_DMA_sort_lhb+0x7e>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8003538:	f240 2371 	movw	r3, #625	; 0x271
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	e00e      	b.n	800355e <ADC1_DMA_sort_lhb+0x76>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <ADC1_DMA_sort_lhb+0x9c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <ADC1_DMA_sort_lhb+0x9c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3301      	adds	r3, #1
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8003564:	d9ec      	bls.n	8003540 <ADC1_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3301      	adds	r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8003572:	4293      	cmp	r3, r2
 8003574:	d9bf      	bls.n	80034f6 <ADC1_DMA_sort_lhb+0xe>
			}
		}
     }

};
 8003576:	bf00      	nop
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20009e6c 	.word	0x20009e6c

08003588 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e038      	b.n	8003606 <ADC2_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <ADC2_DMA_sort_uhb+0x1c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d117      	bne.n	80035d4 <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	e00f      	b.n	80035ca <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <ADC2_DMA_sort_uhb+0x94>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <ADC2_DMA_sort_uhb+0x94>)
 80035b0:	6811      	ldr	r1, [r2, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3301      	adds	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80035d0:	d3eb      	bcc.n	80035aa <ADC2_DMA_sort_uhb+0x22>
 80035d2:	e015      	b.n	8003600 <ADC2_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	e00e      	b.n	80035f8 <ADC2_DMA_sort_uhb+0x70>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <ADC2_DMA_sort_uhb+0x94>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b0f      	ldr	r3, [pc, #60]	; (800361c <ADC2_DMA_sort_uhb+0x94>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80035ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3301      	adds	r3, #1
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80035fe:	d3ec      	bcc.n	80035da <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3301      	adds	r3, #1
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800360c:	d9c2      	bls.n	8003594 <ADC2_DMA_sort_uhb+0xc>
			}
		}
     }

};
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20009e70 	.word	0x20009e70

08003620 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8003626:	f240 43e2 	movw	r3, #1250	; 0x4e2
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e03a      	b.n	80036a4 <ADC2_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <ADC2_DMA_sort_lhb+0x1e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d118      	bne.n	8003670 <ADC2_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800363e:	f240 2371 	movw	r3, #625	; 0x271
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	e00f      	b.n	8003666 <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <ADC2_DMA_sort_lhb+0x9c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <ADC2_DMA_sort_lhb+0x9c>)
 800364c:	6811      	ldr	r1, [r2, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3301      	adds	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800366c:	d9eb      	bls.n	8003646 <ADC2_DMA_sort_lhb+0x26>
 800366e:	e016      	b.n	800369e <ADC2_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8003670:	f240 2371 	movw	r3, #625	; 0x271
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	e00e      	b.n	8003696 <ADC2_DMA_sort_lhb+0x76>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <ADC2_DMA_sort_lhb+0x9c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <ADC2_DMA_sort_lhb+0x9c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 800368c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3301      	adds	r3, #1
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800369c:	d9ec      	bls.n	8003678 <ADC2_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d9bf      	bls.n	800362e <ADC2_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	20009e70 	.word	0x20009e70

080036c0 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e038      	b.n	800373e <ADC3_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <ADC3_DMA_sort_uhb+0x1c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d117      	bne.n	800370c <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	e00f      	b.n	8003702 <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 80036e2:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <ADC3_DMA_sort_uhb+0x94>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <ADC3_DMA_sort_uhb+0x94>)
 80036e8:	6811      	ldr	r1, [r2, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	3301      	adds	r3, #1
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003708:	d3eb      	bcc.n	80036e2 <ADC3_DMA_sort_uhb+0x22>
 800370a:	e015      	b.n	8003738 <ADC3_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	e00e      	b.n	8003730 <ADC3_DMA_sort_uhb+0x70>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <ADC3_DMA_sort_uhb+0x94>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <ADC3_DMA_sort_uhb+0x94>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8003726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3301      	adds	r3, #1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003736:	d3ec      	bcc.n	8003712 <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8003744:	d9c2      	bls.n	80036cc <ADC3_DMA_sort_uhb+0xc>
			}
		}
     }

};
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	20009e74 	.word	0x20009e74

08003758 <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 800375e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e03a      	b.n	80037dc <ADC3_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <ADC3_DMA_sort_lhb+0x1e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <ADC3_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8003776:	f240 2371 	movw	r3, #625	; 0x271
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	e00f      	b.n	800379e <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <ADC3_DMA_sort_lhb+0x9c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <ADC3_DMA_sort_lhb+0x9c>)
 8003784:	6811      	ldr	r1, [r2, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80037a4:	d9eb      	bls.n	800377e <ADC3_DMA_sort_lhb+0x26>
 80037a6:	e016      	b.n	80037d6 <ADC3_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80037a8:	f240 2371 	movw	r3, #625	; 0x271
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	e00e      	b.n	80037ce <ADC3_DMA_sort_lhb+0x76>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <ADC3_DMA_sort_lhb+0x9c>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <ADC3_DMA_sort_lhb+0x9c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68f9      	ldr	r1, [r7, #12]
 80037ba:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3301      	adds	r3, #1
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80037d4:	d9ec      	bls.n	80037b0 <ADC3_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3301      	adds	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d9bf      	bls.n	8003766 <ADC3_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	20009e74 	.word	0x20009e74

080037f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b092      	sub	sp, #72	; 0x48
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037fe:	f001 fb44 	bl	8004e8a <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8003802:	f7fe faa3 	bl	8001d4c <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 8003806:	f7fe fab3 	bl	8001d70 <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 800380a:	48b4      	ldr	r0, [pc, #720]	; (8003adc <main+0x2e4>)
 800380c:	f7fd fec6 	bl	800159c <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8003810:	f7fe fad8 	bl	8001dc4 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8003814:	f7fe fae8 	bl	8001de8 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 8003818:	48b1      	ldr	r0, [pc, #708]	; (8003ae0 <main+0x2e8>)
 800381a:	f7fd ff63 	bl	80016e4 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 800381e:	f7fe fb0d 	bl	8001e3c <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8003822:	f7fe fb1d 	bl	8001e60 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 8003826:	48af      	ldr	r0, [pc, #700]	; (8003ae4 <main+0x2ec>)
 8003828:	f7fe f800 	bl	800182c <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 800382c:	f7fe fb42 	bl	8001eb4 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8003830:	f7fe fb52 	bl	8001ed8 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8003834:	48ac      	ldr	r0, [pc, #688]	; (8003ae8 <main+0x2f0>)
 8003836:	f7fe f89d 	bl	8001974 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 800383a:	f7fe fb77 	bl	8001f2c <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 800383e:	f7fe fb87 	bl	8001f50 <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8003842:	48aa      	ldr	r0, [pc, #680]	; (8003aec <main+0x2f4>)
 8003844:	f7fe f93a 	bl	8001abc <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 8003848:	f7fe fbac 	bl	8001fa4 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 800384c:	f7fe fbbc 	bl	8001fc8 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8003850:	48a7      	ldr	r0, [pc, #668]	; (8003af0 <main+0x2f8>)
 8003852:	f7fe f9d7 	bl	8001c04 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003856:	f000 fc39 	bl	80040cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800385a:	f000 ff15 	bl	8004688 <MX_GPIO_Init>
  MX_DMA_Init();
 800385e:	f000 fecd 	bl	80045fc <MX_DMA_Init>
  MX_ADC1_Init();
 8003862:	f000 fc7d 	bl	8004160 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003866:	f000 fd05 	bl	8004274 <MX_ADC2_Init>
  MX_ADC3_Init();
 800386a:	f000 fd7b 	bl	8004364 <MX_ADC3_Init>
  MX_FMAC_Init();
 800386e:	f000 fdf1 	bl	8004454 <MX_FMAC_Init>
  MX_TIM6_Init();
 8003872:	f000 fe03 	bl	800447c <MX_TIM6_Init>
  MX_TIM7_Init();
 8003876:	f000 fe37 	bl	80044e8 <MX_TIM7_Init>
  MX_TIM20_Init();
 800387a:	f000 fe6b 	bl	8004554 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	
  /* ADC1 is started using timer 6 triggered conversions */
  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
    ADC_status=HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 800387e:	4b9d      	ldr	r3, [pc, #628]	; (8003af4 <main+0x2fc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003886:	4619      	mov	r1, r3
 8003888:	489b      	ldr	r0, [pc, #620]	; (8003af8 <main+0x300>)
 800388a:	f001 ff3b 	bl	8005704 <HAL_ADC_Start_DMA>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	4b9a      	ldr	r3, [pc, #616]	; (8003afc <main+0x304>)
 8003894:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
    ADC_status=HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8003896:	4b9a      	ldr	r3, [pc, #616]	; (8003b00 <main+0x308>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800389e:	4619      	mov	r1, r3
 80038a0:	4898      	ldr	r0, [pc, #608]	; (8003b04 <main+0x30c>)
 80038a2:	f001 ff2f 	bl	8005704 <HAL_ADC_Start_DMA>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b94      	ldr	r3, [pc, #592]	; (8003afc <main+0x304>)
 80038ac:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
    ADC_status=HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 80038ae:	4b96      	ldr	r3, [pc, #600]	; (8003b08 <main+0x310>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4894      	ldr	r0, [pc, #592]	; (8003b0c <main+0x314>)
 80038ba:	f001 ff23 	bl	8005704 <HAL_ADC_Start_DMA>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b8e      	ldr	r3, [pc, #568]	; (8003afc <main+0x304>)
 80038c4:	701a      	strb	r2, [r3, #0]

/* Calculating the offset value and standard deviation for the base line signal for all the channels */
if(Offset_1_Calculated==0)
 80038c6:	4b92      	ldr	r3, [pc, #584]	; (8003b10 <main+0x318>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d13e      	bne.n	800394c <main+0x154>
{
  float32_t OffsetSum_1 = 0.0f;
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	647b      	str	r3, [r7, #68]	; 0x44
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80038da:	e01a      	b.n	8003912 <main+0x11a>
    {
		/* Collects samples to fill the buffer */
		update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80038dc:	f7fe fa5a 	bl	8001d94 <update_ADC1_IN1_FO_biquad_filter>
		MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 80038e0:	487e      	ldr	r0, [pc, #504]	; (8003adc <main+0x2e4>)
 80038e2:	f7fd fe8d 	bl	8001600 <MA_ADC1_IN1_Update>

		/* Calculate the offset from the filled buffer */
		Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 80038e6:	488b      	ldr	r0, [pc, #556]	; (8003b14 <main+0x31c>)
 80038e8:	f7fe fb98 	bl	800201c <ADC1_IN1_OffsetCalc>
 80038ec:	eef0 7a40 	vmov.f32	s15, s0
 80038f0:	4b89      	ldr	r3, [pc, #548]	; (8003b18 <main+0x320>)
 80038f2:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_1 += Offset_1;
 80038f6:	4b88      	ldr	r3, [pc, #544]	; (8003b18 <main+0x320>)
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003904:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8003908:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800390c:	3301      	adds	r3, #1
 800390e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003912:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003916:	2b13      	cmp	r3, #19
 8003918:	d9e0      	bls.n	80038dc <main+0xe4>
    }

  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 800391a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800391e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003926:	4b7c      	ldr	r3, [pc, #496]	; (8003b18 <main+0x320>)
 8003928:	edc3 7a00 	vstr	s15, [r3]
  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 800392c:	4b78      	ldr	r3, [pc, #480]	; (8003b10 <main+0x318>)
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]

  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 8003932:	4b79      	ldr	r3, [pc, #484]	; (8003b18 <main+0x320>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	eeb0 0a67 	vmov.f32	s0, s15
 800393c:	4877      	ldr	r0, [pc, #476]	; (8003b1c <main+0x324>)
 800393e:	f7fe fc8d 	bl	800225c <ADC1_IN1_SD_BL>
 8003942:	eef0 7a40 	vmov.f32	s15, s0
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <main+0x328>)
 8003948:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_2_Calculated==0)
 800394c:	4b75      	ldr	r3, [pc, #468]	; (8003b24 <main+0x32c>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13b      	bne.n	80039cc <main+0x1d4>
{
  float32_t OffsetSum_2;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003954:	2300      	movs	r3, #0
 8003956:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800395a:	e01a      	b.n	8003992 <main+0x19a>
    {

		update_ADC1_IN2_FO_biquad_filter();
 800395c:	f7fe fa56 	bl	8001e0c <update_ADC1_IN2_FO_biquad_filter>
		MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8003960:	485f      	ldr	r0, [pc, #380]	; (8003ae0 <main+0x2e8>)
 8003962:	f7fd fef1 	bl	8001748 <MA_ADC1_IN2_Update>


		Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 8003966:	4870      	ldr	r0, [pc, #448]	; (8003b28 <main+0x330>)
 8003968:	f7fe fb88 	bl	800207c <ADC1_IN2_OffsetCalc>
 800396c:	eef0 7a40 	vmov.f32	s15, s0
 8003970:	4b6e      	ldr	r3, [pc, #440]	; (8003b2c <main+0x334>)
 8003972:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_2 += Offset_2;
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <main+0x334>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003984:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003988:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800398c:	3301      	adds	r3, #1
 800398e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003992:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003996:	2b13      	cmp	r3, #19
 8003998:	d9e0      	bls.n	800395c <main+0x164>
    }

  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 800399a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800399e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80039a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a6:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <main+0x334>)
 80039a8:	edc3 7a00 	vstr	s15, [r3]
  Offset_2_Calculated = 1;
 80039ac:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <main+0x32c>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]

  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 80039b2:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <main+0x334>)
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	eeb0 0a67 	vmov.f32	s0, s15
 80039bc:	485c      	ldr	r0, [pc, #368]	; (8003b30 <main+0x338>)
 80039be:	f7fe fc99 	bl	80022f4 <ADC1_IN2_SD_BL>
 80039c2:	eef0 7a40 	vmov.f32	s15, s0
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <main+0x33c>)
 80039c8:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_3_Calculated==0)
 80039cc:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <main+0x340>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d13b      	bne.n	8003a4c <main+0x254>
{
  float32_t OffsetSum_3;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80039da:	e01a      	b.n	8003a12 <main+0x21a>
    {

		update_ADC2_IN3_FO_biquad_filter();
 80039dc:	f7fe fa52 	bl	8001e84 <update_ADC2_IN3_FO_biquad_filter>
		MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 80039e0:	4840      	ldr	r0, [pc, #256]	; (8003ae4 <main+0x2ec>)
 80039e2:	f7fd ff55 	bl	8001890 <MA_ADC2_IN3_Update>


		Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 80039e6:	4855      	ldr	r0, [pc, #340]	; (8003b3c <main+0x344>)
 80039e8:	f7fe fb78 	bl	80020dc <ADC2_IN3_OffsetCalc>
 80039ec:	eef0 7a40 	vmov.f32	s15, s0
 80039f0:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <main+0x348>)
 80039f2:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_3 += Offset_3;
 80039f6:	4b52      	ldr	r3, [pc, #328]	; (8003b40 <main+0x348>)
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003a08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003a12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a16:	2b13      	cmp	r3, #19
 8003a18:	d9e0      	bls.n	80039dc <main+0x1e4>
    }

  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 8003a1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a1e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a26:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <main+0x348>)
 8003a28:	edc3 7a00 	vstr	s15, [r3]
  Offset_3_Calculated = 1;
 8003a2c:	4b42      	ldr	r3, [pc, #264]	; (8003b38 <main+0x340>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]

  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 8003a32:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <main+0x348>)
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	4841      	ldr	r0, [pc, #260]	; (8003b44 <main+0x34c>)
 8003a3e:	f7fe fca5 	bl	800238c <ADC2_IN3_SD_BL>
 8003a42:	eef0 7a40 	vmov.f32	s15, s0
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <main+0x350>)
 8003a48:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_4_Calculated==0)
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <main+0x354>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d13b      	bne.n	8003acc <main+0x2d4>
{
  float32_t OffsetSum_4;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5a:	e01a      	b.n	8003a92 <main+0x29a>
    {

		update_ADC2_IN4_FO_biquad_filter();
 8003a5c:	f7fe fa4e 	bl	8001efc <update_ADC2_IN4_FO_biquad_filter>
		MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8003a60:	4821      	ldr	r0, [pc, #132]	; (8003ae8 <main+0x2f0>)
 8003a62:	f7fd ffb9 	bl	80019d8 <MA_ADC2_IN4_Update>


		Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 8003a66:	483a      	ldr	r0, [pc, #232]	; (8003b50 <main+0x358>)
 8003a68:	f7fe fb68 	bl	800213c <ADC2_IN4_OffsetCalc>
 8003a6c:	eef0 7a40 	vmov.f32	s15, s0
 8003a70:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <main+0x35c>)
 8003a72:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_4 += Offset_4;
 8003a76:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <main+0x35c>)
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a84:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003a88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a96:	2b13      	cmp	r3, #19
 8003a98:	d9e0      	bls.n	8003a5c <main+0x264>
    }

  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 8003a9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003a9e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aa6:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <main+0x35c>)
 8003aa8:	edc3 7a00 	vstr	s15, [r3]
  Offset_4_Calculated = 1;
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <main+0x354>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]

  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 8003ab2:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <main+0x35c>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8003abc:	4826      	ldr	r0, [pc, #152]	; (8003b58 <main+0x360>)
 8003abe:	f7fe fcb1 	bl	8002424 <ADC2_IN4_SD_BL>
 8003ac2:	eef0 7a40 	vmov.f32	s15, s0
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <main+0x364>)
 8003ac8:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_5_Calculated==0)
 8003acc:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <main+0x368>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d17f      	bne.n	8003bd4 <main+0x3dc>
{
  float32_t OffsetSum_5;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e05e      	b.n	8003b9a <main+0x3a2>
 8003adc:	20009e78 	.word	0x20009e78
 8003ae0:	2000a11c 	.word	0x2000a11c
 8003ae4:	2000a3c0 	.word	0x2000a3c0
 8003ae8:	2000a664 	.word	0x2000a664
 8003aec:	2000a908 	.word	0x2000a908
 8003af0:	2000abac 	.word	0x2000abac
 8003af4:	20009e6c 	.word	0x20009e6c
 8003af8:	20009aec 	.word	0x20009aec
 8003afc:	2000edb0 	.word	0x2000edb0
 8003b00:	20009e70 	.word	0x20009e70
 8003b04:	20009b58 	.word	0x20009b58
 8003b08:	20009e74 	.word	0x20009e74
 8003b0c:	20009bc4 	.word	0x20009bc4
 8003b10:	2000edcc 	.word	0x2000edcc
 8003b14:	2000ae50 	.word	0x2000ae50
 8003b18:	2000edb4 	.word	0x2000edb4
 8003b1c:	2000be28 	.word	0x2000be28
 8003b20:	2000edd4 	.word	0x2000edd4
 8003b24:	2000edcd 	.word	0x2000edcd
 8003b28:	2000b0f4 	.word	0x2000b0f4
 8003b2c:	2000edb8 	.word	0x2000edb8
 8003b30:	2000c0cc 	.word	0x2000c0cc
 8003b34:	2000edd8 	.word	0x2000edd8
 8003b38:	2000edce 	.word	0x2000edce
 8003b3c:	2000b398 	.word	0x2000b398
 8003b40:	2000edbc 	.word	0x2000edbc
 8003b44:	2000c370 	.word	0x2000c370
 8003b48:	2000eddc 	.word	0x2000eddc
 8003b4c:	2000edcf 	.word	0x2000edcf
 8003b50:	2000b63c 	.word	0x2000b63c
 8003b54:	2000edc0 	.word	0x2000edc0
 8003b58:	2000c614 	.word	0x2000c614
 8003b5c:	2000ede0 	.word	0x2000ede0
 8003b60:	2000edd0 	.word	0x2000edd0
    {
		/* Collects samples to fill the buffer */
		update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 8003b64:	f7fe fa06 	bl	8001f74 <update_ADC3_IN1_FO_biquad_filter>
		MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 8003b68:	48ad      	ldr	r0, [pc, #692]	; (8003e20 <main+0x628>)
 8003b6a:	f7fd ffd9 	bl	8001b20 <MA_ADC3_IN1_Update>

		/* Calculate the offset from the filled buffer */
		Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 8003b6e:	48ad      	ldr	r0, [pc, #692]	; (8003e24 <main+0x62c>)
 8003b70:	f7fe fb14 	bl	800219c <ADC3_IN1_OffsetCalc>
 8003b74:	eef0 7a40 	vmov.f32	s15, s0
 8003b78:	4bab      	ldr	r3, [pc, #684]	; (8003e28 <main+0x630>)
 8003b7a:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_5 += Offset_5;
 8003b7e:	4bab      	ldr	r3, [pc, #684]	; (8003e2c <main+0x634>)
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8003b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b94:	3301      	adds	r3, #1
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b9e:	2b13      	cmp	r3, #19
 8003ba0:	d9e0      	bls.n	8003b64 <main+0x36c>
    }

  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 8003ba2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003ba6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bae:	4b9f      	ldr	r3, [pc, #636]	; (8003e2c <main+0x634>)
 8003bb0:	edc3 7a00 	vstr	s15, [r3]
  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	; (8003e30 <main+0x638>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]

  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 8003bba:	4b9c      	ldr	r3, [pc, #624]	; (8003e2c <main+0x634>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc4:	489b      	ldr	r0, [pc, #620]	; (8003e34 <main+0x63c>)
 8003bc6:	f7fe fc79 	bl	80024bc <ADC3_IN1_SD_BL>
 8003bca:	eef0 7a40 	vmov.f32	s15, s0
 8003bce:	4b9a      	ldr	r3, [pc, #616]	; (8003e38 <main+0x640>)
 8003bd0:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_6_Calculated==0)
 8003bd4:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <main+0x644>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d137      	bne.n	8003c4c <main+0x454>
{
  float32_t OffsetSum_6;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	76fb      	strb	r3, [r7, #27]
 8003be0:	e018      	b.n	8003c14 <main+0x41c>
    {

		update_ADC3_IN2_FO_biquad_filter();
 8003be2:	f7fe fa03 	bl	8001fec <update_ADC3_IN2_FO_biquad_filter>
		MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 8003be6:	4896      	ldr	r0, [pc, #600]	; (8003e40 <main+0x648>)
 8003be8:	f7fe f83e 	bl	8001c68 <MA_ADC3_IN2_Update>


		Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 8003bec:	4895      	ldr	r0, [pc, #596]	; (8003e44 <main+0x64c>)
 8003bee:	f7fe fb05 	bl	80021fc <ADC3_IN2_OffsetCalc>
 8003bf2:	eef0 7a40 	vmov.f32	s15, s0
 8003bf6:	4b94      	ldr	r3, [pc, #592]	; (8003e48 <main+0x650>)
 8003bf8:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_6 += Offset_6;
 8003bfc:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <main+0x650>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c0a:	edc7 7a07 	vstr	s15, [r7, #28]
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003c0e:	7efb      	ldrb	r3, [r7, #27]
 8003c10:	3301      	adds	r3, #1
 8003c12:	76fb      	strb	r3, [r7, #27]
 8003c14:	7efb      	ldrb	r3, [r7, #27]
 8003c16:	2b13      	cmp	r3, #19
 8003c18:	d9e3      	bls.n	8003be2 <main+0x3ea>
    }

  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 8003c1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c1e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c26:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <main+0x650>)
 8003c28:	edc3 7a00 	vstr	s15, [r3]
  Offset_6_Calculated = 1;
 8003c2c:	4b83      	ldr	r3, [pc, #524]	; (8003e3c <main+0x644>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]

  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 8003c32:	4b85      	ldr	r3, [pc, #532]	; (8003e48 <main+0x650>)
 8003c34:	edd3 7a00 	vldr	s15, [r3]
 8003c38:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3c:	4883      	ldr	r0, [pc, #524]	; (8003e4c <main+0x654>)
 8003c3e:	f7fe fc89 	bl	8002554 <ADC3_IN2_SD_BL>
 8003c42:	eef0 7a40 	vmov.f32	s15, s0
 8003c46:	4b82      	ldr	r3, [pc, #520]	; (8003e50 <main+0x658>)
 8003c48:	edc3 7a00 	vstr	s15, [r3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8003c4c:	f7fe f8a2 	bl	8001d94 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 8003c50:	4880      	ldr	r0, [pc, #512]	; (8003e54 <main+0x65c>)
 8003c52:	f7fd fcd5 	bl	8001600 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e017      	b.n	8003c8c <main+0x494>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtract the stored offset
 8003c5c:	4a7d      	ldr	r2, [pc, #500]	; (8003e54 <main+0x65c>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3308      	adds	r3, #8
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	3304      	adds	r3, #4
 8003c68:	ed93 7a00 	vldr	s14, [r3]
 8003c6c:	4b6e      	ldr	r3, [pc, #440]	; (8003e28 <main+0x630>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c76:	4a77      	ldr	r2, [pc, #476]	; (8003e54 <main+0x65c>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	3304      	adds	r3, #4
 8003c82:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b9f      	cmp	r3, #159	; 0x9f
 8003c90:	d9e4      	bls.n	8003c5c <main+0x464>
	  }
	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8003c92:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <main+0x660>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9c:	486f      	ldr	r0, [pc, #444]	; (8003e5c <main+0x664>)
 8003c9e:	f7fe ff3f 	bl	8002b20 <ADC1_IN1_TKEO>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <main+0x668>)
 8003ca8:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 8003caa:	4b6d      	ldr	r3, [pc, #436]	; (8003e60 <main+0x668>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d117      	bne.n	8003ce2 <main+0x4ea>
      {
      /*Slope sign change*/
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 8003cb2:	4b5d      	ldr	r3, [pc, #372]	; (8003e28 <main+0x630>)
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc4:	4867      	ldr	r0, [pc, #412]	; (8003e64 <main+0x66c>)
 8003cc6:	f7fe fc91 	bl	80025ec <ADC1_IN1_SSC>
 8003cca:	eef0 7a40 	vmov.f32	s15, s0
 8003cce:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <main+0x670>)
 8003cd0:	edc3 7a00 	vstr	s15, [r3]
      /*Computes the auto-correlation values and the auto-regression coefficients and returns the latter*/
      ADC1_IN1_autocorr_calc();
 8003cd4:	f7fc ff5c 	bl	8000b90 <ADC1_IN1_autocorr_calc>
      AR_1 = ADC1_IN1_autoreg_coeffs();
 8003cd8:	f7fc ff90 	bl	8000bfc <ADC1_IN1_autoreg_coeffs>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a63      	ldr	r2, [pc, #396]	; (8003e6c <main+0x674>)
 8003ce0:	6013      	str	r3, [r2, #0]

      }


	  update_ADC1_IN2_FO_biquad_filter();
 8003ce2:	f7fe f893 	bl	8001e0c <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8003ce6:	4862      	ldr	r0, [pc, #392]	; (8003e70 <main+0x678>)
 8003ce8:	f7fd fd2e 	bl	8001748 <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e017      	b.n	8003d22 <main+0x52a>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 8003cf2:	4a5f      	ldr	r2, [pc, #380]	; (8003e70 <main+0x678>)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	ed93 7a00 	vldr	s14, [r3]
 8003d02:	4b5c      	ldr	r3, [pc, #368]	; (8003e74 <main+0x67c>)
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0c:	4a58      	ldr	r2, [pc, #352]	; (8003e70 <main+0x678>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3308      	adds	r3, #8
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b9f      	cmp	r3, #159	; 0x9f
 8003d26:	d9e4      	bls.n	8003cf2 <main+0x4fa>
	  }
	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 8003d28:	4b53      	ldr	r3, [pc, #332]	; (8003e78 <main+0x680>)
 8003d2a:	edd3 7a00 	vldr	s15, [r3]
 8003d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d32:	4852      	ldr	r0, [pc, #328]	; (8003e7c <main+0x684>)
 8003d34:	f7fe ffb8 	bl	8002ca8 <ADC1_IN2_TKEO>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b50      	ldr	r3, [pc, #320]	; (8003e80 <main+0x688>)
 8003d3e:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 8003d40:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <main+0x688>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d117      	bne.n	8003d78 <main+0x580>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 8003d48:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <main+0x67c>)
 8003d4a:	edd3 7a00 	vldr	s15, [r3]
 8003d4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d56:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5a:	484a      	ldr	r0, [pc, #296]	; (8003e84 <main+0x68c>)
 8003d5c:	f7fe fcb5 	bl	80026ca <ADC1_IN2_SSC>
 8003d60:	eef0 7a40 	vmov.f32	s15, s0
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <main+0x690>)
 8003d66:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_IN2_autocorr_calc();
 8003d6a:	f7fc ffe7 	bl	8000d3c <ADC1_IN2_autocorr_calc>
	  AR_2 = ADC1_IN2_autoreg_coeffs();
 8003d6e:	f7fd f81b 	bl	8000da8 <ADC1_IN2_autoreg_coeffs>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4a45      	ldr	r2, [pc, #276]	; (8003e8c <main+0x694>)
 8003d76:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN3_FO_biquad_filter();
 8003d78:	f7fe f884 	bl	8001e84 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8003d7c:	4844      	ldr	r0, [pc, #272]	; (8003e90 <main+0x698>)
 8003d7e:	f7fd fd87 	bl	8001890 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	e017      	b.n	8003db8 <main+0x5c0>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 8003d88:	4a41      	ldr	r2, [pc, #260]	; (8003e90 <main+0x698>)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3308      	adds	r3, #8
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	3304      	adds	r3, #4
 8003d94:	ed93 7a00 	vldr	s14, [r3]
 8003d98:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <main+0x69c>)
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da2:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <main+0x698>)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3308      	adds	r3, #8
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b9f      	cmp	r3, #159	; 0x9f
 8003dbc:	d9e4      	bls.n	8003d88 <main+0x590>
	  }
	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <main+0x6a0>)
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	4834      	ldr	r0, [pc, #208]	; (8003e9c <main+0x6a4>)
 8003dca:	f7ff f831 	bl	8002e30 <ADC2_IN3_TKEO>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b33      	ldr	r3, [pc, #204]	; (8003ea0 <main+0x6a8>)
 8003dd4:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 8003dd6:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <main+0x6a8>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d117      	bne.n	8003e0e <main+0x616>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <main+0x69c>)
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dec:	eeb0 0a67 	vmov.f32	s0, s15
 8003df0:	482c      	ldr	r0, [pc, #176]	; (8003ea4 <main+0x6ac>)
 8003df2:	f7fe fcd9 	bl	80027a8 <ADC2_IN3_SSC>
 8003df6:	eef0 7a40 	vmov.f32	s15, s0
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <main+0x6b0>)
 8003dfc:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN3_autocorr_calc();
 8003e00:	f7fd f872 	bl	8000ee8 <ADC2_IN3_autocorr_calc>
	  AR_3 = ADC2_IN3_autoreg_coeffs();
 8003e04:	f7fd f8a6 	bl	8000f54 <ADC2_IN3_autoreg_coeffs>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4a28      	ldr	r2, [pc, #160]	; (8003eac <main+0x6b4>)
 8003e0c:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 8003e0e:	f7fe f875 	bl	8001efc <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8003e12:	4827      	ldr	r0, [pc, #156]	; (8003eb0 <main+0x6b8>)
 8003e14:	f7fd fde0 	bl	80019d8 <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	e062      	b.n	8003ee4 <main+0x6ec>
 8003e1e:	bf00      	nop
 8003e20:	2000a908 	.word	0x2000a908
 8003e24:	2000b8e0 	.word	0x2000b8e0
 8003e28:	2000edb4 	.word	0x2000edb4
 8003e2c:	2000edc4 	.word	0x2000edc4
 8003e30:	2000edd0 	.word	0x2000edd0
 8003e34:	2000c8b8 	.word	0x2000c8b8
 8003e38:	2000ede4 	.word	0x2000ede4
 8003e3c:	2000edd1 	.word	0x2000edd1
 8003e40:	2000abac 	.word	0x2000abac
 8003e44:	2000bb84 	.word	0x2000bb84
 8003e48:	2000edc8 	.word	0x2000edc8
 8003e4c:	2000cb5c 	.word	0x2000cb5c
 8003e50:	2000ede8 	.word	0x2000ede8
 8003e54:	20009e78 	.word	0x20009e78
 8003e58:	2000edd4 	.word	0x2000edd4
 8003e5c:	2000ce00 	.word	0x2000ce00
 8003e60:	2000edec 	.word	0x2000edec
 8003e64:	2000ddd8 	.word	0x2000ddd8
 8003e68:	2000edf4 	.word	0x2000edf4
 8003e6c:	2000ee0c 	.word	0x2000ee0c
 8003e70:	2000a11c 	.word	0x2000a11c
 8003e74:	2000edb8 	.word	0x2000edb8
 8003e78:	2000edd8 	.word	0x2000edd8
 8003e7c:	2000d0a4 	.word	0x2000d0a4
 8003e80:	2000eded 	.word	0x2000eded
 8003e84:	2000e07c 	.word	0x2000e07c
 8003e88:	2000edf8 	.word	0x2000edf8
 8003e8c:	2000ee10 	.word	0x2000ee10
 8003e90:	2000a3c0 	.word	0x2000a3c0
 8003e94:	2000edbc 	.word	0x2000edbc
 8003e98:	2000eddc 	.word	0x2000eddc
 8003e9c:	2000d348 	.word	0x2000d348
 8003ea0:	2000edee 	.word	0x2000edee
 8003ea4:	2000e320 	.word	0x2000e320
 8003ea8:	2000edfc 	.word	0x2000edfc
 8003eac:	2000ee14 	.word	0x2000ee14
 8003eb0:	2000a664 	.word	0x2000a664
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 8003eb4:	4a6d      	ldr	r2, [pc, #436]	; (800406c <main+0x874>)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	ed93 7a00 	vldr	s14, [r3]
 8003ec4:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <main+0x878>)
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ece:	4a67      	ldr	r2, [pc, #412]	; (800406c <main+0x874>)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3304      	adds	r3, #4
 8003eda:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b9f      	cmp	r3, #159	; 0x9f
 8003ee8:	d9e4      	bls.n	8003eb4 <main+0x6bc>
	  }
	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 8003eea:	4b62      	ldr	r3, [pc, #392]	; (8004074 <main+0x87c>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef4:	4860      	ldr	r0, [pc, #384]	; (8004078 <main+0x880>)
 8003ef6:	f7ff f85f 	bl	8002fb8 <ADC2_IN4_TKEO>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b5f      	ldr	r3, [pc, #380]	; (800407c <main+0x884>)
 8003f00:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 8003f02:	4b5e      	ldr	r3, [pc, #376]	; (800407c <main+0x884>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d117      	bne.n	8003f3a <main+0x742>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 8003f0a:	4b59      	ldr	r3, [pc, #356]	; (8004070 <main+0x878>)
 8003f0c:	edd3 7a00 	vldr	s15, [r3]
 8003f10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f18:	eeb0 0a67 	vmov.f32	s0, s15
 8003f1c:	4858      	ldr	r0, [pc, #352]	; (8004080 <main+0x888>)
 8003f1e:	f7fe fcb2 	bl	8002886 <ADC2_IN4_SSC>
 8003f22:	eef0 7a40 	vmov.f32	s15, s0
 8003f26:	4b57      	ldr	r3, [pc, #348]	; (8004084 <main+0x88c>)
 8003f28:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN4_autocorr_calc();
 8003f2c:	f7fd f8b2 	bl	8001094 <ADC2_IN4_autocorr_calc>
	  AR_4 = ADC2_IN4_autoreg_coeffs();
 8003f30:	f7fd f8e6 	bl	8001100 <ADC2_IN4_autoreg_coeffs>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4a54      	ldr	r2, [pc, #336]	; (8004088 <main+0x890>)
 8003f38:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC3_IN1_FO_biquad_filter();
 8003f3a:	f7fe f81b 	bl	8001f74 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 8003f3e:	4853      	ldr	r0, [pc, #332]	; (800408c <main+0x894>)
 8003f40:	f7fd fdee 	bl	8001b20 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e017      	b.n	8003f7a <main+0x782>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 8003f4a:	4a50      	ldr	r2, [pc, #320]	; (800408c <main+0x894>)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	ed93 7a00 	vldr	s14, [r3]
 8003f5a:	4b4d      	ldr	r3, [pc, #308]	; (8004090 <main+0x898>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f64:	4a49      	ldr	r2, [pc, #292]	; (800408c <main+0x894>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3301      	adds	r3, #1
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b9f      	cmp	r3, #159	; 0x9f
 8003f7e:	d9e4      	bls.n	8003f4a <main+0x752>
	  }
	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 8003f80:	4b44      	ldr	r3, [pc, #272]	; (8004094 <main+0x89c>)
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8a:	4843      	ldr	r0, [pc, #268]	; (8004098 <main+0x8a0>)
 8003f8c:	f7ff f8d8 	bl	8003140 <ADC3_IN1_TKEO>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <main+0x8a4>)
 8003f96:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 8003f98:	4b40      	ldr	r3, [pc, #256]	; (800409c <main+0x8a4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d117      	bne.n	8003fd0 <main+0x7d8>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <main+0x898>)
 8003fa2:	edd3 7a00 	vldr	s15, [r3]
 8003fa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fae:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb2:	483b      	ldr	r0, [pc, #236]	; (80040a0 <main+0x8a8>)
 8003fb4:	f7fe fcd6 	bl	8002964 <ADC3_IN1_SSC>
 8003fb8:	eef0 7a40 	vmov.f32	s15, s0
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <main+0x8ac>)
 8003fbe:	edc3 7a00 	vstr	s15, [r3]
	  ADC3_IN1_autocorr_calc();
 8003fc2:	f7fd f93d 	bl	8001240 <ADC3_IN1_autocorr_calc>
	  AR_5 = ADC3_IN1_autoreg_coeffs();
 8003fc6:	f7fd f971 	bl	80012ac <ADC3_IN1_autoreg_coeffs>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4a36      	ldr	r2, [pc, #216]	; (80040a8 <main+0x8b0>)
 8003fce:	6013      	str	r3, [r2, #0]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 8003fd0:	f7fe f80c 	bl	8001fec <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 8003fd4:	4835      	ldr	r0, [pc, #212]	; (80040ac <main+0x8b4>)
 8003fd6:	f7fd fe47 	bl	8001c68 <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	e017      	b.n	8004010 <main+0x818>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtract the stored offset
 8003fe0:	4a32      	ldr	r2, [pc, #200]	; (80040ac <main+0x8b4>)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	ed93 7a00 	vldr	s14, [r3]
 8003ff0:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <main+0x8b8>)
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <main+0x8b4>)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b9f      	cmp	r3, #159	; 0x9f
 8004014:	d9e4      	bls.n	8003fe0 <main+0x7e8>
	  }
	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <main+0x8bc>)
 8004018:	edd3 7a00 	vldr	s15, [r3]
 800401c:	eeb0 0a67 	vmov.f32	s0, s15
 8004020:	4825      	ldr	r0, [pc, #148]	; (80040b8 <main+0x8c0>)
 8004022:	f7ff f951 	bl	80032c8 <ADC3_IN2_TKEO>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <main+0x8c4>)
 800402c:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <main+0x8c4>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b01      	cmp	r3, #1
 8004034:	f47f ae0a 	bne.w	8003c4c <main+0x454>
	  {
	  /*Slope sign change*/
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <main+0x8b8>)
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004046:	eeb0 0a67 	vmov.f32	s0, s15
 800404a:	481d      	ldr	r0, [pc, #116]	; (80040c0 <main+0x8c8>)
 800404c:	f7fe fcf9 	bl	8002a42 <ADC3_IN2_SSC>
 8004050:	eef0 7a40 	vmov.f32	s15, s0
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <main+0x8cc>)
 8004056:	edc3 7a00 	vstr	s15, [r3]
	  /*Computes the auto-correlation values and the auto-regression coefficients and returns the latter*/
	  ADC3_IN2_autocorr_calc();
 800405a:	f7fd f9c9 	bl	80013f0 <ADC3_IN2_autocorr_calc>
	  AR_6 = ADC3_IN2_autoreg_coeffs();
 800405e:	f7fd f9fd 	bl	800145c <ADC3_IN2_autoreg_coeffs>
 8004062:	4603      	mov	r3, r0
 8004064:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <main+0x8d0>)
 8004066:	6013      	str	r3, [r2, #0]
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8004068:	e5f0      	b.n	8003c4c <main+0x454>
 800406a:	bf00      	nop
 800406c:	2000a664 	.word	0x2000a664
 8004070:	2000edc0 	.word	0x2000edc0
 8004074:	2000ede0 	.word	0x2000ede0
 8004078:	2000d5ec 	.word	0x2000d5ec
 800407c:	2000edef 	.word	0x2000edef
 8004080:	2000e5c4 	.word	0x2000e5c4
 8004084:	2000ee00 	.word	0x2000ee00
 8004088:	2000ee18 	.word	0x2000ee18
 800408c:	2000a908 	.word	0x2000a908
 8004090:	2000edc4 	.word	0x2000edc4
 8004094:	2000ede4 	.word	0x2000ede4
 8004098:	2000d890 	.word	0x2000d890
 800409c:	2000edf0 	.word	0x2000edf0
 80040a0:	2000e868 	.word	0x2000e868
 80040a4:	2000ee04 	.word	0x2000ee04
 80040a8:	2000ee1c 	.word	0x2000ee1c
 80040ac:	2000abac 	.word	0x2000abac
 80040b0:	2000edc8 	.word	0x2000edc8
 80040b4:	2000ede8 	.word	0x2000ede8
 80040b8:	2000db34 	.word	0x2000db34
 80040bc:	2000edf1 	.word	0x2000edf1
 80040c0:	2000eb0c 	.word	0x2000eb0c
 80040c4:	2000ee08 	.word	0x2000ee08
 80040c8:	2000ee20 	.word	0x2000ee20

080040cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d2:	f107 0318 	add.w	r3, r7, #24
 80040d6:	2238      	movs	r2, #56	; 0x38
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f004 fec6 	bl	8008e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040f2:	f002 ffef 	bl	80070d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040f6:	2301      	movs	r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004100:	2302      	movs	r3, #2
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004104:	2303      	movs	r3, #3
 8004106:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004108:	2301      	movs	r3, #1
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800410c:	2308      	movs	r3, #8
 800410e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004110:	2302      	movs	r3, #2
 8004112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004114:	2302      	movs	r3, #2
 8004116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004118:	2302      	movs	r3, #2
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800411c:	f107 0318 	add.w	r3, r7, #24
 8004120:	4618      	mov	r0, r3
 8004122:	f003 f88b 	bl	800723c <HAL_RCC_OscConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800412c:	f000 fc0a 	bl	8004944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004130:	230f      	movs	r3, #15
 8004132:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004134:	2303      	movs	r3, #3
 8004136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f003 fb89 	bl	8007860 <HAL_RCC_ClockConfig>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004154:	f000 fbf6 	bl	8004944 <Error_Handler>
  }
}
 8004158:	bf00      	nop
 800415a:	3750      	adds	r7, #80	; 0x50
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08c      	sub	sp, #48	; 0x30
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	2220      	movs	r2, #32
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f004 fe77 	bl	8008e6c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <MX_ADC1_Init+0x108>)
 8004180:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004186:	4b38      	ldr	r3, [pc, #224]	; (8004268 <MX_ADC1_Init+0x108>)
 8004188:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800418c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <MX_ADC1_Init+0x108>)
 8004190:	2200      	movs	r2, #0
 8004192:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004194:	4b34      	ldr	r3, [pc, #208]	; (8004268 <MX_ADC1_Init+0x108>)
 8004196:	2200      	movs	r2, #0
 8004198:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <MX_ADC1_Init+0x108>)
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80041a0:	4b31      	ldr	r3, [pc, #196]	; (8004268 <MX_ADC1_Init+0x108>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <MX_ADC1_Init+0x108>)
 80041a8:	2204      	movs	r2, #4
 80041aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <MX_ADC1_Init+0x108>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80041b2:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <MX_ADC1_Init+0x108>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80041b8:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <MX_ADC1_Init+0x108>)
 80041ba:	2202      	movs	r2, #2
 80041bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041be:	4b2a      	ldr	r3, [pc, #168]	; (8004268 <MX_ADC1_Init+0x108>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <MX_ADC1_Init+0x108>)
 80041c8:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <MX_ADC1_Init+0x108>)
 80041d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <MX_ADC1_Init+0x108>)
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <MX_ADC1_Init+0x108>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <MX_ADC1_Init+0x108>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041ec:	481e      	ldr	r0, [pc, #120]	; (8004268 <MX_ADC1_Init+0x108>)
 80041ee:	f001 f8db 	bl	80053a8 <HAL_ADC_Init>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80041f8:	f000 fba4 	bl	8004944 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004204:	4619      	mov	r1, r3
 8004206:	4818      	ldr	r0, [pc, #96]	; (8004268 <MX_ADC1_Init+0x108>)
 8004208:	f002 f8cc 	bl	80063a4 <HAL_ADCEx_MultiModeConfigChannel>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8004212:	f000 fb97 	bl	8004944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <MX_ADC1_Init+0x10c>)
 8004218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800421a:	2306      	movs	r3, #6
 800421c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800421e:	2305      	movs	r3, #5
 8004220:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004222:	237f      	movs	r3, #127	; 0x7f
 8004224:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004226:	2304      	movs	r3, #4
 8004228:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	4619      	mov	r1, r3
 8004232:	480d      	ldr	r0, [pc, #52]	; (8004268 <MX_ADC1_Init+0x108>)
 8004234:	f001 fb3a 	bl	80058ac <HAL_ADC_ConfigChannel>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800423e:	f000 fb81 	bl	8004944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <MX_ADC1_Init+0x110>)
 8004244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004246:	230c      	movs	r3, #12
 8004248:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4806      	ldr	r0, [pc, #24]	; (8004268 <MX_ADC1_Init+0x108>)
 8004250:	f001 fb2c 	bl	80058ac <HAL_ADC_ConfigChannel>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800425a:	f000 fb73 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800425e:	bf00      	nop
 8004260:	3730      	adds	r7, #48	; 0x30
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20009aec 	.word	0x20009aec
 800426c:	04300002 	.word	0x04300002
 8004270:	08600004 	.word	0x08600004

08004274 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800427a:	463b      	mov	r3, r7
 800427c:	2220      	movs	r2, #32
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f004 fdf3 	bl	8008e6c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004286:	4b33      	ldr	r3, [pc, #204]	; (8004354 <MX_ADC2_Init+0xe0>)
 8004288:	4a33      	ldr	r2, [pc, #204]	; (8004358 <MX_ADC2_Init+0xe4>)
 800428a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <MX_ADC2_Init+0xe0>)
 800428e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004292:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004294:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <MX_ADC2_Init+0xe0>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <MX_ADC2_Init+0xe0>)
 800429c:	2200      	movs	r2, #0
 800429e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80042a0:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042ac:	4b29      	ldr	r3, [pc, #164]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042ae:	2204      	movs	r2, #4
 80042b0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80042b2:	4b28      	ldr	r3, [pc, #160]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80042b8:	4b26      	ldr	r3, [pc, #152]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80042be:	4b25      	ldr	r3, [pc, #148]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042c0:	2202      	movs	r2, #2
 80042c2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80042c4:	4b23      	ldr	r3, [pc, #140]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042ce:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80042dc:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80042ea:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80042f2:	4818      	ldr	r0, [pc, #96]	; (8004354 <MX_ADC2_Init+0xe0>)
 80042f4:	f001 f858 	bl	80053a8 <HAL_ADC_Init>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80042fe:	f000 fb21 	bl	8004944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004302:	4b16      	ldr	r3, [pc, #88]	; (800435c <MX_ADC2_Init+0xe8>)
 8004304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004306:	2306      	movs	r3, #6
 8004308:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800430a:	2305      	movs	r3, #5
 800430c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800430e:	237f      	movs	r3, #127	; 0x7f
 8004310:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004312:	2304      	movs	r3, #4
 8004314:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800431a:	463b      	mov	r3, r7
 800431c:	4619      	mov	r1, r3
 800431e:	480d      	ldr	r0, [pc, #52]	; (8004354 <MX_ADC2_Init+0xe0>)
 8004320:	f001 fac4 	bl	80058ac <HAL_ADC_ConfigChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800432a:	f000 fb0b 	bl	8004944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <MX_ADC2_Init+0xec>)
 8004330:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004332:	230c      	movs	r3, #12
 8004334:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004336:	463b      	mov	r3, r7
 8004338:	4619      	mov	r1, r3
 800433a:	4806      	ldr	r0, [pc, #24]	; (8004354 <MX_ADC2_Init+0xe0>)
 800433c:	f001 fab6 	bl	80058ac <HAL_ADC_ConfigChannel>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8004346:	f000 fafd 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800434a:	bf00      	nop
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20009b58 	.word	0x20009b58
 8004358:	50000100 	.word	0x50000100
 800435c:	0c900008 	.word	0x0c900008
 8004360:	10c00010 	.word	0x10c00010

08004364 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800436a:	463b      	mov	r3, r7
 800436c:	2220      	movs	r2, #32
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f004 fd7b 	bl	8008e6c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8004376:	4b33      	ldr	r3, [pc, #204]	; (8004444 <MX_ADC3_Init+0xe0>)
 8004378:	4a33      	ldr	r2, [pc, #204]	; (8004448 <MX_ADC3_Init+0xe4>)
 800437a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800437c:	4b31      	ldr	r3, [pc, #196]	; (8004444 <MX_ADC3_Init+0xe0>)
 800437e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004382:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004384:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <MX_ADC3_Init+0xe0>)
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800438a:	4b2e      	ldr	r3, [pc, #184]	; (8004444 <MX_ADC3_Init+0xe0>)
 800438c:	2200      	movs	r2, #0
 800438e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8004390:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <MX_ADC3_Init+0xe0>)
 8004392:	2200      	movs	r2, #0
 8004394:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004396:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <MX_ADC3_Init+0xe0>)
 8004398:	2201      	movs	r2, #1
 800439a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800439c:	4b29      	ldr	r3, [pc, #164]	; (8004444 <MX_ADC3_Init+0xe0>)
 800439e:	2204      	movs	r2, #4
 80043a0:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80043a2:	4b28      	ldr	r3, [pc, #160]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80043a8:	4b26      	ldr	r3, [pc, #152]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043b0:	2202      	movs	r2, #2
 80043b2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 80043bc:	4b21      	ldr	r3, [pc, #132]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80043d4:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80043e2:	4818      	ldr	r0, [pc, #96]	; (8004444 <MX_ADC3_Init+0xe0>)
 80043e4:	f000 ffe0 	bl	80053a8 <HAL_ADC_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80043ee:	f000 faa9 	bl	8004944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <MX_ADC3_Init+0xe8>)
 80043f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043f6:	2306      	movs	r3, #6
 80043f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80043fa:	2305      	movs	r3, #5
 80043fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80043fe:	237f      	movs	r3, #127	; 0x7f
 8004400:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004402:	2304      	movs	r3, #4
 8004404:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800440a:	463b      	mov	r3, r7
 800440c:	4619      	mov	r1, r3
 800440e:	480d      	ldr	r0, [pc, #52]	; (8004444 <MX_ADC3_Init+0xe0>)
 8004410:	f001 fa4c 	bl	80058ac <HAL_ADC_ConfigChannel>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 800441a:	f000 fa93 	bl	8004944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800441e:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <MX_ADC3_Init+0xec>)
 8004420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004422:	230c      	movs	r3, #12
 8004424:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004426:	463b      	mov	r3, r7
 8004428:	4619      	mov	r1, r3
 800442a:	4806      	ldr	r0, [pc, #24]	; (8004444 <MX_ADC3_Init+0xe0>)
 800442c:	f001 fa3e 	bl	80058ac <HAL_ADC_ConfigChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8004436:	f000 fa85 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20009bc4 	.word	0x20009bc4
 8004448:	50000400 	.word	0x50000400
 800444c:	04300002 	.word	0x04300002
 8004450:	08600004 	.word	0x08600004

08004454 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <MX_FMAC_Init+0x20>)
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <MX_FMAC_Init+0x24>)
 800445c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800445e:	4805      	ldr	r0, [pc, #20]	; (8004474 <MX_FMAC_Init+0x20>)
 8004460:	f002 fc0a 	bl	8006c78 <HAL_FMAC_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800446a:	f000 fa6b 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20009d50 	.word	0x20009d50
 8004478:	40021400 	.word	0x40021400

0800447c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <MX_TIM6_Init+0x64>)
 800448e:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <MX_TIM6_Init+0x68>)
 8004490:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8004492:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <MX_TIM6_Init+0x64>)
 8004494:	2207      	movs	r2, #7
 8004496:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <MX_TIM6_Init+0x64>)
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <MX_TIM6_Init+0x64>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <MX_TIM6_Init+0x64>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80044aa:	480d      	ldr	r0, [pc, #52]	; (80044e0 <MX_TIM6_Init+0x64>)
 80044ac:	f003 fdf4 	bl	8008098 <HAL_TIM_Base_Init>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80044b6:	f000 fa45 	bl	8004944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044ba:	2320      	movs	r3, #32
 80044bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4806      	ldr	r0, [pc, #24]	; (80044e0 <MX_TIM6_Init+0x64>)
 80044c8:	f004 f878 	bl	80085bc <HAL_TIMEx_MasterConfigSynchronization>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80044d2:	f000 fa37 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20009d88 	.word	0x20009d88
 80044e4:	40001000 	.word	0x40001000

080044e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ee:	1d3b      	adds	r3, r7, #4
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <MX_TIM7_Init+0x64>)
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <MX_TIM7_Init+0x68>)
 80044fc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <MX_TIM7_Init+0x64>)
 8004500:	2207      	movs	r2, #7
 8004502:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <MX_TIM7_Init+0x64>)
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <MX_TIM7_Init+0x64>)
 800450c:	2207      	movs	r2, #7
 800450e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004510:	4b0e      	ldr	r3, [pc, #56]	; (800454c <MX_TIM7_Init+0x64>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004516:	480d      	ldr	r0, [pc, #52]	; (800454c <MX_TIM7_Init+0x64>)
 8004518:	f003 fdbe 	bl	8008098 <HAL_TIM_Base_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004522:	f000 fa0f 	bl	8004944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004526:	2320      	movs	r3, #32
 8004528:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4806      	ldr	r0, [pc, #24]	; (800454c <MX_TIM7_Init+0x64>)
 8004534:	f004 f842 	bl	80085bc <HAL_TIMEx_MasterConfigSynchronization>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800453e:	f000 fa01 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20009dd4 	.word	0x20009dd4
 8004550:	40001400 	.word	0x40001400

08004554 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800455a:	f107 030c 	add.w	r3, r7, #12
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800456a:	463b      	mov	r3, r7
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8004574:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <MX_TIM20_Init+0xa0>)
 8004576:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <MX_TIM20_Init+0xa4>)
 8004578:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <MX_TIM20_Init+0xa0>)
 800457c:	2207      	movs	r2, #7
 800457e:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <MX_TIM20_Init+0xa0>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <MX_TIM20_Init+0xa0>)
 8004588:	2207      	movs	r2, #7
 800458a:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800458c:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <MX_TIM20_Init+0xa0>)
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8004592:	4b18      	ldr	r3, [pc, #96]	; (80045f4 <MX_TIM20_Init+0xa0>)
 8004594:	2200      	movs	r2, #0
 8004596:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004598:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <MX_TIM20_Init+0xa0>)
 800459a:	2200      	movs	r2, #0
 800459c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800459e:	4815      	ldr	r0, [pc, #84]	; (80045f4 <MX_TIM20_Init+0xa0>)
 80045a0:	f003 fd7a 	bl	8008098 <HAL_TIM_Base_Init>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 80045aa:	f000 f9cb 	bl	8004944 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 80045b6:	f107 030c 	add.w	r3, r7, #12
 80045ba:	4619      	mov	r1, r3
 80045bc:	480d      	ldr	r0, [pc, #52]	; (80045f4 <MX_TIM20_Init+0xa0>)
 80045be:	f003 fdc2 	bl	8008146 <HAL_TIM_SlaveConfigSynchro>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 80045c8:	f000 f9bc 	bl	8004944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80045cc:	2320      	movs	r3, #32
 80045ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80045d0:	2300      	movs	r3, #0
 80045d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80045d8:	463b      	mov	r3, r7
 80045da:	4619      	mov	r1, r3
 80045dc:	4805      	ldr	r0, [pc, #20]	; (80045f4 <MX_TIM20_Init+0xa0>)
 80045de:	f003 ffed 	bl	80085bc <HAL_TIMEx_MasterConfigSynchronization>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80045e8:	f000 f9ac 	bl	8004944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80045ec:	bf00      	nop
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20009e20 	.word	0x20009e20
 80045f8:	40015000 	.word	0x40015000

080045fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004602:	4b20      	ldr	r3, [pc, #128]	; (8004684 <MX_DMA_Init+0x88>)
 8004604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <MX_DMA_Init+0x88>)
 8004608:	f043 0304 	orr.w	r3, r3, #4
 800460c:	6493      	str	r3, [r2, #72]	; 0x48
 800460e:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <MX_DMA_Init+0x88>)
 8004610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800461a:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <MX_DMA_Init+0x88>)
 800461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461e:	4a19      	ldr	r2, [pc, #100]	; (8004684 <MX_DMA_Init+0x88>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6493      	str	r3, [r2, #72]	; 0x48
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <MX_DMA_Init+0x88>)
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <MX_DMA_Init+0x88>)
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004636:	4a13      	ldr	r2, [pc, #76]	; (8004684 <MX_DMA_Init+0x88>)
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	6493      	str	r3, [r2, #72]	; 0x48
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <MX_DMA_Init+0x88>)
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800464a:	2200      	movs	r2, #0
 800464c:	2100      	movs	r1, #0
 800464e:	200b      	movs	r0, #11
 8004650:	f002 f86b 	bl	800672a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004654:	200b      	movs	r0, #11
 8004656:	f002 f882 	bl	800675e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	2010      	movs	r0, #16
 8004660:	f002 f863 	bl	800672a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004664:	2010      	movs	r0, #16
 8004666:	f002 f87a 	bl	800675e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800466a:	2200      	movs	r2, #0
 800466c:	2100      	movs	r1, #0
 800466e:	2038      	movs	r0, #56	; 0x38
 8004670:	f002 f85b 	bl	800672a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8004674:	2038      	movs	r0, #56	; 0x38
 8004676:	f002 f872 	bl	800675e <HAL_NVIC_EnableIRQ>

}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000

08004688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <MX_GPIO_Init+0x74>)
 8004690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004692:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <MX_GPIO_Init+0x74>)
 8004694:	f043 0320 	orr.w	r3, r3, #32
 8004698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800469a:	4b18      	ldr	r3, [pc, #96]	; (80046fc <MX_GPIO_Init+0x74>)
 800469c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <MX_GPIO_Init+0x74>)
 80046a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <MX_GPIO_Init+0x74>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <MX_GPIO_Init+0x74>)
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <MX_GPIO_Init+0x74>)
 80046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <MX_GPIO_Init+0x74>)
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <MX_GPIO_Init+0x74>)
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <MX_GPIO_Init+0x74>)
 80046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046da:	4a08      	ldr	r2, [pc, #32]	; (80046fc <MX_GPIO_Init+0x74>)
 80046dc:	f043 0310 	orr.w	r3, r3, #16
 80046e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <MX_GPIO_Init+0x74>)
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004710:	d123      	bne.n	800475a <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8004712:	f7fe fe9d 	bl	8003450 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 8004716:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3b      	ldr	r2, [pc, #236]	; (8004808 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8004722:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8004726:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a36      	ldr	r2, [pc, #216]	; (8004808 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004736:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 800473a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800473e:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a30      	ldr	r2, [pc, #192]	; (8004808 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800474e:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8004752:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8004756:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2b      	ldr	r2, [pc, #172]	; (800480c <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d123      	bne.n	80047ac <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8004764:	f7fe ff10 	bl	8003588 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a28      	ldr	r2, [pc, #160]	; (8004810 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8004774:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8004778:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 800477c:	4b24      	ldr	r3, [pc, #144]	; (8004810 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a23      	ldr	r2, [pc, #140]	; (8004810 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004788:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 800478c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8004790:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8004794:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80047a0:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 80047a4:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80047a8:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d123      	bne.n	80047fe <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 80047b6:	f7fe ff83 	bl	80036c0 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a16      	ldr	r2, [pc, #88]	; (8004818 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 80047c6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80047ca:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a11      	ldr	r2, [pc, #68]	; (8004818 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80047da:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 80047de:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80047e2:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80047f2:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 80047f6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80047fa:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20009e6c 	.word	0x20009e6c
 800480c:	50000100 	.word	0x50000100
 8004810:	20009e70 	.word	0x20009e70
 8004814:	50000400 	.word	0x50000400
 8004818:	20009e74 	.word	0x20009e74

0800481c <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800482c:	d125      	bne.n	800487a <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 800482e:	f7fe fe5b 	bl	80034e8 <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 8004832:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_ADC_ConvCpltCallback+0x114>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3e      	ldr	r2, [pc, #248]	; (8004930 <HAL_ADC_ConvCpltCallback+0x114>)
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8004842:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8004846:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 800484a:	4b39      	ldr	r3, [pc, #228]	; (8004930 <HAL_ADC_ConvCpltCallback+0x114>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a38      	ldr	r2, [pc, #224]	; (8004930 <HAL_ADC_ConvCpltCallback+0x114>)
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004856:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 800485a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800485e:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 8004862:	4b33      	ldr	r3, [pc, #204]	; (8004930 <HAL_ADC_ConvCpltCallback+0x114>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a32      	ldr	r2, [pc, #200]	; (8004930 <HAL_ADC_ConvCpltCallback+0x114>)
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800486e:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8004872:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8004876:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2d      	ldr	r2, [pc, #180]	; (8004934 <HAL_ADC_ConvCpltCallback+0x118>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d125      	bne.n	80048d0 <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb();
 8004884:	f7fe fecc 	bl	8003620 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8004888:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_ADC_ConvCpltCallback+0x11c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <HAL_ADC_ConvCpltCallback+0x11c>)
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8004898:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800489c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <HAL_ADC_ConvCpltCallback+0x11c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_ADC_ConvCpltCallback+0x11c>)
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80048ac:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 80048b0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80048b4:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80048b8:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_ADC_ConvCpltCallback+0x11c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <HAL_ADC_ConvCpltCallback+0x11c>)
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80048c4:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 80048c8:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80048cc:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_ADC_ConvCpltCallback+0x120>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d125      	bne.n	8004926 <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb();
 80048da:	f7fe ff3d 	bl	8003758 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 80048de:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_ADC_ConvCpltCallback+0x124>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_ADC_ConvCpltCallback+0x124>)
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ea:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80048ee:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80048f2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_ADC_ConvCpltCallback+0x124>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a11      	ldr	r2, [pc, #68]	; (8004940 <HAL_ADC_ConvCpltCallback+0x124>)
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004902:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8004906:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800490a:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800490e:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <HAL_ADC_ConvCpltCallback+0x124>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a0b      	ldr	r2, [pc, #44]	; (8004940 <HAL_ADC_ConvCpltCallback+0x124>)
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800491a:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 800491e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8004922:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20009e6c 	.word	0x20009e6c
 8004934:	50000100 	.word	0x50000100
 8004938:	20009e70 	.word	0x20009e70
 800493c:	50000400 	.word	0x50000400
 8004940:	20009e74 	.word	0x20009e74

08004944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004948:	b672      	cpsid	i
}
 800494a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800494c:	e7fe      	b.n	800494c <Error_Handler+0x8>
	...

08004950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <HAL_MspInit+0x44>)
 8004958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <HAL_MspInit+0x44>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6613      	str	r3, [r2, #96]	; 0x60
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <HAL_MspInit+0x44>)
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	607b      	str	r3, [r7, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	4b09      	ldr	r3, [pc, #36]	; (8004994 <HAL_MspInit+0x44>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	4a08      	ldr	r2, [pc, #32]	; (8004994 <HAL_MspInit+0x44>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6593      	str	r3, [r2, #88]	; 0x58
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_MspInit+0x44>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004986:	f002 fc49 	bl	800721c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000

08004998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b0a2      	sub	sp, #136	; 0x88
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049b4:	2250      	movs	r2, #80	; 0x50
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f004 fa57 	bl	8008e6c <memset>
  if(hadc->Instance==ADC1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c6:	d169      	bne.n	8004a9c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80049c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80049ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80049d2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d8:	4618      	mov	r0, r3
 80049da:	f003 f921 	bl	8007c20 <HAL_RCCEx_PeriphCLKConfig>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80049e4:	f7ff ffae 	bl	8004944 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80049e8:	4b64      	ldr	r3, [pc, #400]	; (8004b7c <HAL_ADC_MspInit+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	4a63      	ldr	r2, [pc, #396]	; (8004b7c <HAL_ADC_MspInit+0x1e4>)
 80049f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80049f2:	4b62      	ldr	r3, [pc, #392]	; (8004b7c <HAL_ADC_MspInit+0x1e4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d10b      	bne.n	8004a12 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80049fa:	4b61      	ldr	r3, [pc, #388]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	4a60      	ldr	r2, [pc, #384]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004a00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a06:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a12:	4b5b      	ldr	r3, [pc, #364]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	4a5a      	ldr	r2, [pc, #360]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a1e:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a40:	f002 f9c6 	bl	8006dd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004a44:	4b4f      	ldr	r3, [pc, #316]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a46:	4a50      	ldr	r2, [pc, #320]	; (8004b88 <HAL_ADC_MspInit+0x1f0>)
 8004a48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004a4a:	4b4e      	ldr	r3, [pc, #312]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a4c:	2205      	movs	r2, #5
 8004a4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a50:	4b4c      	ldr	r3, [pc, #304]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a56:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004a5c:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a5e:	2280      	movs	r2, #128	; 0x80
 8004a60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a62:	4b48      	ldr	r3, [pc, #288]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a6a:	4b46      	ldr	r3, [pc, #280]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004a72:	4b44      	ldr	r3, [pc, #272]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a74:	2220      	movs	r2, #32
 8004a76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004a78:	4b42      	ldr	r3, [pc, #264]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a7e:	4841      	ldr	r0, [pc, #260]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a80:	f001 fe88 	bl	8006794 <HAL_DMA_Init>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004a8a:	f7ff ff5b 	bl	8004944 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a3c      	ldr	r2, [pc, #240]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
 8004a94:	4a3b      	ldr	r2, [pc, #236]	; (8004b84 <HAL_ADC_MspInit+0x1ec>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004a9a:	e0fa      	b.n	8004c92 <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3a      	ldr	r2, [pc, #232]	; (8004b8c <HAL_ADC_MspInit+0x1f4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d178      	bne.n	8004b98 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004aac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ab0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f003 f8b2 	bl	8007c20 <HAL_RCCEx_PeriphCLKConfig>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8004ac2:	f7ff ff3f 	bl	8004944 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004ac6:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_ADC_MspInit+0x1e4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <HAL_ADC_MspInit+0x1e4>)
 8004ace:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	; (8004b7c <HAL_ADC_MspInit+0x1e4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10b      	bne.n	8004af0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004ad8:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004adc:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004ade:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af0:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004afc:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_ADC_MspInit+0x1e8>)
 8004afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b08:	23c0      	movs	r3, #192	; 0xc0
 8004b0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b1e:	f002 f957 	bl	8006dd0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b24:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <HAL_ADC_MspInit+0x1fc>)
 8004b26:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b3c:	2280      	movs	r2, #128	; 0x80
 8004b3e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b46:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b4e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b52:	2220      	movs	r2, #32
 8004b54:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004b5c:	480c      	ldr	r0, [pc, #48]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b5e:	f001 fe19 	bl	8006794 <HAL_DMA_Init>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8004b68:	f7ff feec 	bl	8004944 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <HAL_ADC_MspInit+0x1f8>)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004b78:	e08b      	b.n	8004c92 <HAL_ADC_MspInit+0x2fa>
 8004b7a:	bf00      	nop
 8004b7c:	2000ee24 	.word	0x2000ee24
 8004b80:	40021000 	.word	0x40021000
 8004b84:	20009c30 	.word	0x20009c30
 8004b88:	40020008 	.word	0x40020008
 8004b8c:	50000100 	.word	0x50000100
 8004b90:	20009c90 	.word	0x20009c90
 8004b94:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3f      	ldr	r2, [pc, #252]	; (8004c9c <HAL_ADC_MspInit+0x304>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d177      	bne.n	8004c92 <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8004ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8004ba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bac:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f003 f834 	bl	8007c20 <HAL_RCCEx_PeriphCLKConfig>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8004bbe:	f7ff fec1 	bl	8004944 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004bc2:	4b37      	ldr	r3, [pc, #220]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	4a36      	ldr	r2, [pc, #216]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bce:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bda:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	4a30      	ldr	r2, [pc, #192]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004be6:	4b2e      	ldr	r3, [pc, #184]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bf2:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004bf8:	f043 0310 	orr.w	r3, r3, #16
 8004bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_ADC_MspInit+0x308>)
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4821      	ldr	r0, [pc, #132]	; (8004ca4 <HAL_ADC_MspInit+0x30c>)
 8004c1e:	f002 f8d7 	bl	8006dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c26:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c34:	4619      	mov	r1, r3
 8004c36:	481c      	ldr	r0, [pc, #112]	; (8004ca8 <HAL_ADC_MspInit+0x310>)
 8004c38:	f002 f8ca 	bl	8006dd0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <HAL_ADC_MspInit+0x318>)
 8004c40:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c44:	2225      	movs	r2, #37	; 0x25
 8004c46:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c48:	4b18      	ldr	r3, [pc, #96]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4e:	4b17      	ldr	r3, [pc, #92]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8004c54:	4b15      	ldr	r3, [pc, #84]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c5a:	4b14      	ldr	r3, [pc, #80]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c60:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c68:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004c6a:	4b10      	ldr	r3, [pc, #64]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004c76:	480d      	ldr	r0, [pc, #52]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c78:	f001 fd8c 	bl	8006794 <HAL_DMA_Init>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8004c82:	f7ff fe5f 	bl	8004944 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
 8004c8c:	4a07      	ldr	r2, [pc, #28]	; (8004cac <HAL_ADC_MspInit+0x314>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004c92:	bf00      	nop
 8004c94:	3788      	adds	r7, #136	; 0x88
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	50000400 	.word	0x50000400
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	48000400 	.word	0x48000400
 8004ca8:	48001000 	.word	0x48001000
 8004cac:	20009cf0 	.word	0x20009cf0
 8004cb0:	40020408 	.word	0x40020408

08004cb4 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_FMAC_MspInit+0x38>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d10b      	bne.n	8004cde <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_FMAC_MspInit+0x3c>)
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_FMAC_MspInit+0x3c>)
 8004ccc:	f043 0310 	orr.w	r3, r3, #16
 8004cd0:	6493      	str	r3, [r2, #72]	; 0x48
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <HAL_FMAC_MspInit+0x3c>)
 8004cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004cde:	bf00      	nop
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40021400 	.word	0x40021400
 8004cf0:	40021000 	.word	0x40021000

08004cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <HAL_TIM_Base_MspInit+0x80>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10c      	bne.n	8004d20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d0c:	f043 0310 	orr.w	r3, r3, #16
 8004d10:	6593      	str	r3, [r2, #88]	; 0x58
 8004d12:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8004d1e:	e022      	b.n	8004d66 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <HAL_TIM_Base_MspInit+0x88>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10c      	bne.n	8004d44 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004d2a:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d30:	f043 0320 	orr.w	r3, r3, #32
 8004d34:	6593      	str	r3, [r2, #88]	; 0x58
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
}
 8004d42:	e010      	b.n	8004d66 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <HAL_TIM_Base_MspInit+0x8c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10b      	bne.n	8004d66 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d58:	6613      	str	r3, [r2, #96]	; 0x60
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_TIM_Base_MspInit+0x84>)
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40001000 	.word	0x40001000
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40001400 	.word	0x40001400
 8004d80:	40015000 	.word	0x40015000

08004d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d88:	e7fe      	b.n	8004d88 <NMI_Handler+0x4>

08004d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d8e:	e7fe      	b.n	8004d8e <HardFault_Handler+0x4>

08004d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d94:	e7fe      	b.n	8004d94 <MemManage_Handler+0x4>

08004d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d9a:	e7fe      	b.n	8004d9a <BusFault_Handler+0x4>

08004d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004da0:	e7fe      	b.n	8004da0 <UsageFault_Handler+0x4>

08004da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dd0:	f000 f8ae 	bl	8004f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ddc:	4802      	ldr	r0, [pc, #8]	; (8004de8 <DMA1_Channel1_IRQHandler+0x10>)
 8004dde:	f001 fdfc 	bl	80069da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20009c30 	.word	0x20009c30

08004dec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <DMA1_Channel6_IRQHandler+0x10>)
 8004df2:	f001 fdf2 	bl	80069da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20009c90 	.word	0x20009c90

08004e00 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <DMA2_Channel1_IRQHandler+0x10>)
 8004e06:	f001 fde8 	bl	80069da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20009cf0 	.word	0x20009cf0

08004e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <SystemInit+0x20>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	4a05      	ldr	r2, [pc, #20]	; (8004e34 <SystemInit+0x20>)
 8004e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000ed00 	.word	0xe000ed00

08004e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004e38:	480d      	ldr	r0, [pc, #52]	; (8004e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004e3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e3c:	f7ff ffea 	bl	8004e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e40:	480c      	ldr	r0, [pc, #48]	; (8004e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e42:	490d      	ldr	r1, [pc, #52]	; (8004e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <LoopForever+0xe>)
  movs r3, #0
 8004e46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004e48:	e002      	b.n	8004e50 <LoopCopyDataInit>

08004e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e4e:	3304      	adds	r3, #4

08004e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e54:	d3f9      	bcc.n	8004e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e58:	4c0a      	ldr	r4, [pc, #40]	; (8004e84 <LoopForever+0x16>)
  movs r3, #0
 8004e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e5c:	e001      	b.n	8004e62 <LoopFillZerobss>

08004e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e60:	3204      	adds	r2, #4

08004e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e64:	d3fb      	bcc.n	8004e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e66:	f004 f80f 	bl	8008e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e6a:	f7fe fcc5 	bl	80037f8 <main>

08004e6e <LoopForever>:

LoopForever:
    b LoopForever
 8004e6e:	e7fe      	b.n	8004e6e <LoopForever>
  ldr   r0, =_estack
 8004e70:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8004e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e78:	200078d8 	.word	0x200078d8
  ldr r2, =_sidata
 8004e7c:	0800910c 	.word	0x0800910c
  ldr r2, =_sbss
 8004e80:	200078d8 	.word	0x200078d8
  ldr r4, =_ebss
 8004e84:	2000ef64 	.word	0x2000ef64

08004e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e88:	e7fe      	b.n	8004e88 <ADC1_2_IRQHandler>

08004e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e94:	2003      	movs	r0, #3
 8004e96:	f001 fc3d 	bl	8006714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e9a:	200f      	movs	r0, #15
 8004e9c:	f000 f80e 	bl	8004ebc <HAL_InitTick>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	71fb      	strb	r3, [r7, #7]
 8004eaa:	e001      	b.n	8004eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004eac:	f7ff fd50 	bl	8004950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004eb0:	79fb      	ldrb	r3, [r7, #7]

}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004ec8:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <HAL_InitTick+0x68>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d022      	beq.n	8004f16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <HAL_InitTick+0x6c>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <HAL_InitTick+0x68>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 fc48 	bl	800677a <HAL_SYSTICK_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10f      	bne.n	8004f10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	d809      	bhi.n	8004f0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	f04f 30ff 	mov.w	r0, #4294967295
 8004efe:	f001 fc14 	bl	800672a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <HAL_InitTick+0x70>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e007      	b.n	8004f1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
 8004f0e:	e004      	b.n	8004f1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
 8004f14:	e001      	b.n	8004f1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20007870 	.word	0x20007870
 8004f28:	20007868 	.word	0x20007868
 8004f2c:	2000786c 	.word	0x2000786c

08004f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_IncTick+0x1c>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_IncTick+0x20>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	4a03      	ldr	r2, [pc, #12]	; (8004f4c <HAL_IncTick+0x1c>)
 8004f40:	6013      	str	r3, [r2, #0]
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	2000ee28 	.word	0x2000ee28
 8004f50:	20007870 	.word	0x20007870

08004f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return uwTick;
 8004f58:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_GetTick+0x14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	2000ee28 	.word	0x2000ee28

08004f6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3360      	adds	r3, #96	; 0x60
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <LL_ADC_SetOffset+0x44>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	4313      	orrs	r3, r2
 8005004:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	03fff000 	.word	0x03fff000

0800501c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3360      	adds	r3, #96	; 0x60
 800502a:	461a      	mov	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3360      	adds	r3, #96	; 0x60
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	431a      	orrs	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3360      	adds	r3, #96	; 0x60
 800508e:	461a      	mov	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3360      	adds	r3, #96	; 0x60
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	431a      	orrs	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	615a      	str	r2, [r3, #20]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005136:	b480      	push	{r7}
 8005138:	b087      	sub	sp, #28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3330      	adds	r3, #48	; 0x30
 8005146:	461a      	mov	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	0a1b      	lsrs	r3, r3, #8
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	4413      	add	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	211f      	movs	r1, #31
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	401a      	ands	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	0e9b      	lsrs	r3, r3, #26
 800516e:	f003 011f 	and.w	r1, r3, #31
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa01 f303 	lsl.w	r3, r1, r3
 800517c:	431a      	orrs	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3314      	adds	r3, #20
 800519e:	461a      	mov	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	0e5b      	lsrs	r3, r3, #25
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	4413      	add	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	0d1b      	lsrs	r3, r3, #20
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	2107      	movs	r1, #7
 80051bc:	fa01 f303 	lsl.w	r3, r1, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	0d1b      	lsrs	r3, r3, #20
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	431a      	orrs	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051fc:	43db      	mvns	r3, r3
 80051fe:	401a      	ands	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f003 0318 	and.w	r3, r3, #24
 8005206:	4908      	ldr	r1, [pc, #32]	; (8005228 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005208:	40d9      	lsrs	r1, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	400b      	ands	r3, r1
 800520e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005212:	431a      	orrs	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	0007ffff 	.word	0x0007ffff

0800522c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 031f 	and.w	r3, r3, #31
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6093      	str	r3, [r2, #8]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005280:	d101      	bne.n	8005286 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80052a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d0:	d101      	bne.n	80052d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <LL_ADC_IsEnabled+0x18>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <LL_ADC_IsEnabled+0x1a>
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005346:	f043 0204 	orr.w	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d101      	bne.n	8005372 <LL_ADC_REG_IsConversionOngoing+0x18>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d101      	bne.n	8005398 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b089      	sub	sp, #36	; 0x24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e19b      	b.n	80056fa <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fae1 	bl	8004998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff3f 	bl	800526c <LL_ADC_IsDeepPowerDownEnabled>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff25 	bl	8005248 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff ff5a 	bl	80052bc <LL_ADC_IsInternalRegulatorEnabled>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d115      	bne.n	800543a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff ff3e 	bl	8005294 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005418:	4b97      	ldr	r3, [pc, #604]	; (8005678 <HAL_ADC_Init+0x2d0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	099b      	lsrs	r3, r3, #6
 800541e:	4a97      	ldr	r2, [pc, #604]	; (800567c <HAL_ADC_Init+0x2d4>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	099b      	lsrs	r3, r3, #6
 8005426:	3301      	adds	r3, #1
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800542c:	e002      	b.n	8005434 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3b01      	subs	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f9      	bne.n	800542e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff ff3c 	bl	80052bc <LL_ADC_IsInternalRegulatorEnabled>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544e:	f043 0210 	orr.w	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff75 	bl	800535a <LL_ADC_REG_IsConversionOngoing>
 8005470:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b00      	cmp	r3, #0
 800547c:	f040 8134 	bne.w	80056e8 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 8130 	bne.w	80056e8 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005490:	f043 0202 	orr.w	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff ff35 	bl	800530c <LL_ADC_IsEnabled>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d137      	bne.n	8005518 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054b0:	d004      	beq.n	80054bc <HAL_ADC_Init+0x114>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a72      	ldr	r2, [pc, #456]	; (8005680 <HAL_ADC_Init+0x2d8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d10f      	bne.n	80054dc <HAL_ADC_Init+0x134>
 80054bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80054c0:	f7ff ff24 	bl	800530c <LL_ADC_IsEnabled>
 80054c4:	4604      	mov	r4, r0
 80054c6:	486e      	ldr	r0, [pc, #440]	; (8005680 <HAL_ADC_Init+0x2d8>)
 80054c8:	f7ff ff20 	bl	800530c <LL_ADC_IsEnabled>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4323      	orrs	r3, r4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e008      	b.n	80054ee <HAL_ADC_Init+0x146>
 80054dc:	4869      	ldr	r0, [pc, #420]	; (8005684 <HAL_ADC_Init+0x2dc>)
 80054de:	f7ff ff15 	bl	800530c <LL_ADC_IsEnabled>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d012      	beq.n	8005518 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054fa:	d004      	beq.n	8005506 <HAL_ADC_Init+0x15e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5f      	ldr	r2, [pc, #380]	; (8005680 <HAL_ADC_Init+0x2d8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_ADC_Init+0x162>
 8005506:	4a60      	ldr	r2, [pc, #384]	; (8005688 <HAL_ADC_Init+0x2e0>)
 8005508:	e000      	b.n	800550c <HAL_ADC_Init+0x164>
 800550a:	4a60      	ldr	r2, [pc, #384]	; (800568c <HAL_ADC_Init+0x2e4>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f7ff fd2a 	bl	8004f6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	7f5b      	ldrb	r3, [r3, #29]
 800551c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005522:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005528:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800552e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005536:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005538:	4313      	orrs	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005542:	2b01      	cmp	r3, #1
 8005544:	d106      	bne.n	8005554 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	3b01      	subs	r3, #1
 800554c:	045b      	lsls	r3, r3, #17
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4313      	orrs	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	4b46      	ldr	r3, [pc, #280]	; (8005690 <HAL_ADC_Init+0x2e8>)
 8005578:	4013      	ands	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	69b9      	ldr	r1, [r7, #24]
 8005580:	430b      	orrs	r3, r1
 8005582:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff feee 	bl	8005380 <LL_ADC_INJ_IsConversionOngoing>
 80055a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d17b      	bne.n	80056a4 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d178      	bne.n	80056a4 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ce:	f023 0302 	bic.w	r3, r3, #2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	69b9      	ldr	r1, [r7, #24]
 80055d8:	430b      	orrs	r3, r1
 80055da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d017      	beq.n	8005614 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6911      	ldr	r1, [r2, #16]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	430b      	orrs	r3, r1
 800560e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005612:	e013      	b.n	800563c <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005622:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005638:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005642:	2b01      	cmp	r3, #1
 8005644:	d126      	bne.n	8005694 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800565c:	4311      	orrs	r1, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005662:	4311      	orrs	r1, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005668:	430a      	orrs	r2, r1
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	e015      	b.n	80056a4 <HAL_ADC_Init+0x2fc>
 8005678:	20007868 	.word	0x20007868
 800567c:	053e2d63 	.word	0x053e2d63
 8005680:	50000100 	.word	0x50000100
 8005684:	50000400 	.word	0x50000400
 8005688:	50000300 	.word	0x50000300
 800568c:	50000700 	.word	0x50000700
 8005690:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10c      	bne.n	80056c6 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f023 010f 	bic.w	r1, r3, #15
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	1e5a      	subs	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
 80056c4:	e007      	b.n	80056d6 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 020f 	bic.w	r2, r2, #15
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	f043 0201 	orr.w	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80056e6:	e007      	b.n	80056f8 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	f043 0210 	orr.w	r2, r3, #16
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd90      	pop	{r4, r7, pc}
 8005702:	bf00      	nop

08005704 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005718:	d004      	beq.n	8005724 <HAL_ADC_Start_DMA+0x20>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a57      	ldr	r2, [pc, #348]	; (800587c <HAL_ADC_Start_DMA+0x178>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <HAL_ADC_Start_DMA+0x24>
 8005724:	4b56      	ldr	r3, [pc, #344]	; (8005880 <HAL_ADC_Start_DMA+0x17c>)
 8005726:	e000      	b.n	800572a <HAL_ADC_Start_DMA+0x26>
 8005728:	4b56      	ldr	r3, [pc, #344]	; (8005884 <HAL_ADC_Start_DMA+0x180>)
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fd7e 	bl	800522c <LL_ADC_GetMultimode>
 8005730:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fe0f 	bl	800535a <LL_ADC_REG_IsConversionOngoing>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 8094 	bne.w	800586c <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_ADC_Start_DMA+0x4e>
 800574e:	2302      	movs	r3, #2
 8005750:	e08f      	b.n	8005872 <HAL_ADC_Start_DMA+0x16e>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4a      	ldr	r2, [pc, #296]	; (8005888 <HAL_ADC_Start_DMA+0x184>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d008      	beq.n	8005776 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b05      	cmp	r3, #5
 800576e:	d002      	beq.n	8005776 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b09      	cmp	r3, #9
 8005774:	d173      	bne.n	800585e <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fcc4 	bl	8006104 <ADC_Enable>
 800577c:	4603      	mov	r3, r0
 800577e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d166      	bne.n	8005854 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a37      	ldr	r2, [pc, #220]	; (800587c <HAL_ADC_Start_DMA+0x178>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d002      	beq.n	80057aa <HAL_ADC_Start_DMA+0xa6>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	e001      	b.n	80057ae <HAL_ADC_Start_DMA+0xaa>
 80057aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d002      	beq.n	80057bc <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d8:	f023 0206 	bic.w	r2, r3, #6
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	661a      	str	r2, [r3, #96]	; 0x60
 80057e0:	e002      	b.n	80057e8 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	4a27      	ldr	r2, [pc, #156]	; (800588c <HAL_ADC_Start_DMA+0x188>)
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	4a26      	ldr	r2, [pc, #152]	; (8005890 <HAL_ADC_Start_DMA+0x18c>)
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fc:	4a25      	ldr	r2, [pc, #148]	; (8005894 <HAL_ADC_Start_DMA+0x190>)
 80057fe:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	221c      	movs	r2, #28
 8005806:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0210 	orr.w	r2, r2, #16
 800581e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3340      	adds	r3, #64	; 0x40
 800583a:	4619      	mov	r1, r3
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f001 f850 	bl	80068e4 <HAL_DMA_Start_IT>
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fd70 	bl	8005332 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005852:	e00d      	b.n	8005870 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800585c:	e008      	b.n	8005870 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800586a:	e001      	b.n	8005870 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800586c:	2302      	movs	r3, #2
 800586e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	50000100 	.word	0x50000100
 8005880:	50000300 	.word	0x50000300
 8005884:	50000700 	.word	0x50000700
 8005888:	50000400 	.word	0x50000400
 800588c:	08006231 	.word	0x08006231
 8005890:	08006309 	.word	0x08006309
 8005894:	08006325 	.word	0x08006325

08005898 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b0b6      	sub	sp, #216	; 0xd8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d102      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x24>
 80058ca:	2302      	movs	r3, #2
 80058cc:	f000 bc04 	b.w	80060d8 <HAL_ADC_ConfigChannel+0x82c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fd3c 	bl	800535a <LL_ADC_REG_IsConversionOngoing>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f040 83e8 	bne.w	80060ba <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6859      	ldr	r1, [r3, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f7ff fc1d 	bl	8005136 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fd2a 	bl	800535a <LL_ADC_REG_IsConversionOngoing>
 8005906:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fd36 	bl	8005380 <LL_ADC_INJ_IsConversionOngoing>
 8005914:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005918:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 81d9 	bne.w	8005cd4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 81d4 	bne.w	8005cd4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005934:	d10f      	bne.n	8005956 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	4619      	mov	r1, r3
 8005942:	f7ff fc24 	bl	800518e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fbcb 	bl	80050ea <LL_ADC_SetSamplingTimeCommonConfig>
 8005954:	e00e      	b.n	8005974 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6819      	ldr	r1, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	461a      	mov	r2, r3
 8005964:	f7ff fc13 	bl	800518e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fbbb 	bl	80050ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	08db      	lsrs	r3, r3, #3
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d022      	beq.n	80059dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6919      	ldr	r1, [r3, #16]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059a6:	f7ff fb15 	bl	8004fd4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6919      	ldr	r1, [r3, #16]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f7ff fb61 	bl	800507e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d102      	bne.n	80059d2 <HAL_ADC_ConfigChannel+0x126>
 80059cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d0:	e000      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x128>
 80059d2:	2300      	movs	r3, #0
 80059d4:	461a      	mov	r2, r3
 80059d6:	f7ff fb6d 	bl	80050b4 <LL_ADC_SetOffsetSaturation>
 80059da:	e17b      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fb1a 	bl	800501c <LL_ADC_GetOffsetChannel>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <HAL_ADC_ConfigChannel+0x15c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fb0f 	bl	800501c <LL_ADC_GetOffsetChannel>
 80059fe:	4603      	mov	r3, r0
 8005a00:	0e9b      	lsrs	r3, r3, #26
 8005a02:	f003 021f 	and.w	r2, r3, #31
 8005a06:	e01e      	b.n	8005a46 <HAL_ADC_ConfigChannel+0x19a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fb04 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a1e:	fa93 f3a3 	rbit	r3, r3
 8005a22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005a36:	2320      	movs	r3, #32
 8005a38:	e004      	b.n	8005a44 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a3e:	fab3 f383 	clz	r3, r3
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d105      	bne.n	8005a5e <HAL_ADC_ConfigChannel+0x1b2>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	0e9b      	lsrs	r3, r3, #26
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	e018      	b.n	8005a90 <HAL_ADC_ConfigChannel+0x1e4>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a6a:	fa93 f3a3 	rbit	r3, r3
 8005a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005a82:	2320      	movs	r3, #32
 8005a84:	e004      	b.n	8005a90 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a8a:	fab3 f383 	clz	r3, r3
 8005a8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d106      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fad3 	bl	8005048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fab7 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <HAL_ADC_ConfigChannel+0x222>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff faac 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	0e9b      	lsrs	r3, r3, #26
 8005ac8:	f003 021f 	and.w	r2, r3, #31
 8005acc:	e01e      	b.n	8005b0c <HAL_ADC_ConfigChannel+0x260>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff faa1 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ae4:	fa93 f3a3 	rbit	r3, r3
 8005ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005aec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005afc:	2320      	movs	r3, #32
 8005afe:	e004      	b.n	8005b0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005b00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b04:	fab3 f383 	clz	r3, r3
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x278>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	0e9b      	lsrs	r3, r3, #26
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	e018      	b.n	8005b56 <HAL_ADC_ConfigChannel+0x2aa>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b30:	fa93 f3a3 	rbit	r3, r3
 8005b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005b38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005b48:	2320      	movs	r3, #32
 8005b4a:	e004      	b.n	8005b56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b50:	fab3 f383 	clz	r3, r3
 8005b54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d106      	bne.n	8005b68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2101      	movs	r1, #1
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff fa70 	bl	8005048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fa54 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <HAL_ADC_ConfigChannel+0x2e8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2102      	movs	r1, #2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fa49 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	0e9b      	lsrs	r3, r3, #26
 8005b8e:	f003 021f 	and.w	r2, r3, #31
 8005b92:	e01e      	b.n	8005bd2 <HAL_ADC_ConfigChannel+0x326>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fa3e 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005bc2:	2320      	movs	r3, #32
 8005bc4:	e004      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bca:	fab3 f383 	clz	r3, r3
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <HAL_ADC_ConfigChannel+0x33e>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	0e9b      	lsrs	r3, r3, #26
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	e016      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x36c>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bf6:	fa93 f3a3 	rbit	r3, r3
 8005bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005c0a:	2320      	movs	r3, #32
 8005c0c:	e004      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d106      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2200      	movs	r2, #0
 8005c22:	2102      	movs	r1, #2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fa0f 	bl	8005048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2103      	movs	r1, #3
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff f9f3 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <HAL_ADC_ConfigChannel+0x3aa>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2103      	movs	r1, #3
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff f9e8 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	0e9b      	lsrs	r3, r3, #26
 8005c50:	f003 021f 	and.w	r2, r3, #31
 8005c54:	e017      	b.n	8005c86 <HAL_ADC_ConfigChannel+0x3da>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2103      	movs	r1, #3
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff f9dd 	bl	800501c <LL_ADC_GetOffsetChannel>
 8005c62:	4603      	mov	r3, r0
 8005c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c68:	fa93 f3a3 	rbit	r3, r3
 8005c6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005c78:	2320      	movs	r3, #32
 8005c7a:	e003      	b.n	8005c84 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d105      	bne.n	8005c9e <HAL_ADC_ConfigChannel+0x3f2>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	0e9b      	lsrs	r3, r3, #26
 8005c98:	f003 031f 	and.w	r3, r3, #31
 8005c9c:	e011      	b.n	8005cc2 <HAL_ADC_ConfigChannel+0x416>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ca6:	fa93 f3a3 	rbit	r3, r3
 8005caa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005cb6:	2320      	movs	r3, #32
 8005cb8:	e003      	b.n	8005cc2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbc:	fab3 f383 	clz	r3, r3
 8005cc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d106      	bne.n	8005cd4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2103      	movs	r1, #3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff f9ba 	bl	8005048 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fb17 	bl	800530c <LL_ADC_IsEnabled>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 813d 	bne.w	8005f60 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6819      	ldr	r1, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f7ff fa76 	bl	80051e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4aa2      	ldr	r2, [pc, #648]	; (8005f88 <HAL_ADC_ConfigChannel+0x6dc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	f040 812e 	bne.w	8005f60 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <HAL_ADC_ConfigChannel+0x480>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	0e9b      	lsrs	r3, r3, #26
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	bf94      	ite	ls
 8005d24:	2301      	movls	r3, #1
 8005d26:	2300      	movhi	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	e019      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x4b4>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d34:	fa93 f3a3 	rbit	r3, r3
 8005d38:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005d44:	2320      	movs	r3, #32
 8005d46:	e003      	b.n	8005d50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d4a:	fab3 f383 	clz	r3, r3
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	3301      	adds	r3, #1
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2b09      	cmp	r3, #9
 8005d58:	bf94      	ite	ls
 8005d5a:	2301      	movls	r3, #1
 8005d5c:	2300      	movhi	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d079      	beq.n	8005e58 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d107      	bne.n	8005d80 <HAL_ADC_ConfigChannel+0x4d4>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	0e9b      	lsrs	r3, r3, #26
 8005d76:	3301      	adds	r3, #1
 8005d78:	069b      	lsls	r3, r3, #26
 8005d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d7e:	e015      	b.n	8005dac <HAL_ADC_ConfigChannel+0x500>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d88:	fa93 f3a3 	rbit	r3, r3
 8005d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d90:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005d98:	2320      	movs	r3, #32
 8005d9a:	e003      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9e:	fab3 f383 	clz	r3, r3
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	3301      	adds	r3, #1
 8005da6:	069b      	lsls	r3, r3, #26
 8005da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_ADC_ConfigChannel+0x520>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	0e9b      	lsrs	r3, r3, #26
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dca:	e017      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x550>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd4:	fa93 f3a3 	rbit	r3, r3
 8005dd8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005de4:	2320      	movs	r3, #32
 8005de6:	e003      	b.n	8005df0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dea:	fab3 f383 	clz	r3, r3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	3301      	adds	r3, #1
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2101      	movs	r1, #1
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	ea42 0103 	orr.w	r1, r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <HAL_ADC_ConfigChannel+0x576>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	0e9b      	lsrs	r3, r3, #26
 8005e12:	3301      	adds	r3, #1
 8005e14:	f003 021f 	and.w	r2, r3, #31
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	051b      	lsls	r3, r3, #20
 8005e20:	e018      	b.n	8005e54 <HAL_ADC_ConfigChannel+0x5a8>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	fa93 f3a3 	rbit	r3, r3
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	e003      	b.n	8005e46 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	fab3 f383 	clz	r3, r3
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	3301      	adds	r3, #1
 8005e48:	f003 021f 	and.w	r2, r3, #31
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	4413      	add	r3, r2
 8005e52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e54:	430b      	orrs	r3, r1
 8005e56:	e07e      	b.n	8005f56 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d107      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x5c8>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	0e9b      	lsrs	r3, r3, #26
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	069b      	lsls	r3, r3, #26
 8005e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e72:	e015      	b.n	8005ea0 <HAL_ADC_ConfigChannel+0x5f4>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	fa93 f3a3 	rbit	r3, r3
 8005e80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	e003      	b.n	8005e98 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	fab3 f383 	clz	r3, r3
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	3301      	adds	r3, #1
 8005e9a:	069b      	lsls	r3, r3, #26
 8005e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x614>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	0e9b      	lsrs	r3, r3, #26
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebe:	e017      	b.n	8005ef0 <HAL_ADC_ConfigChannel+0x644>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	fa93 f3a3 	rbit	r3, r3
 8005ecc:	61fb      	str	r3, [r7, #28]
  return result;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005ed8:	2320      	movs	r3, #32
 8005eda:	e003      	b.n	8005ee4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	fab3 f383 	clz	r3, r3
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2101      	movs	r1, #1
 8005eec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef0:	ea42 0103 	orr.w	r1, r2, r3
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10d      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x670>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	0e9b      	lsrs	r3, r3, #26
 8005f06:	3301      	adds	r3, #1
 8005f08:	f003 021f 	and.w	r2, r3, #31
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	4413      	add	r3, r2
 8005f12:	3b1e      	subs	r3, #30
 8005f14:	051b      	lsls	r3, r3, #20
 8005f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f1a:	e01b      	b.n	8005f54 <HAL_ADC_ConfigChannel+0x6a8>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	fa93 f3a3 	rbit	r3, r3
 8005f28:	613b      	str	r3, [r7, #16]
  return result;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005f34:	2320      	movs	r3, #32
 8005f36:	e003      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	fab3 f383 	clz	r3, r3
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	3301      	adds	r3, #1
 8005f42:	f003 021f 	and.w	r2, r3, #31
 8005f46:	4613      	mov	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3b1e      	subs	r3, #30
 8005f4e:	051b      	lsls	r3, r3, #20
 8005f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	f7ff f917 	bl	800518e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_ADC_ConfigChannel+0x6e0>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80af 	beq.w	80060cc <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f76:	d004      	beq.n	8005f82 <HAL_ADC_ConfigChannel+0x6d6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <HAL_ADC_ConfigChannel+0x6e4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10a      	bne.n	8005f98 <HAL_ADC_ConfigChannel+0x6ec>
 8005f82:	4b04      	ldr	r3, [pc, #16]	; (8005f94 <HAL_ADC_ConfigChannel+0x6e8>)
 8005f84:	e009      	b.n	8005f9a <HAL_ADC_ConfigChannel+0x6ee>
 8005f86:	bf00      	nop
 8005f88:	407f0000 	.word	0x407f0000
 8005f8c:	80080000 	.word	0x80080000
 8005f90:	50000100 	.word	0x50000100
 8005f94:	50000300 	.word	0x50000300
 8005f98:	4b51      	ldr	r3, [pc, #324]	; (80060e0 <HAL_ADC_ConfigChannel+0x834>)
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff f80c 	bl	8004fb8 <LL_ADC_GetCommonPathInternalCh>
 8005fa0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a4e      	ldr	r2, [pc, #312]	; (80060e4 <HAL_ADC_ConfigChannel+0x838>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_ADC_ConfigChannel+0x70c>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a4d      	ldr	r2, [pc, #308]	; (80060e8 <HAL_ADC_ConfigChannel+0x83c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d134      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d12e      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fcc:	d17e      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fd6:	d004      	beq.n	8005fe2 <HAL_ADC_ConfigChannel+0x736>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a43      	ldr	r2, [pc, #268]	; (80060ec <HAL_ADC_ConfigChannel+0x840>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d101      	bne.n	8005fe6 <HAL_ADC_ConfigChannel+0x73a>
 8005fe2:	4a43      	ldr	r2, [pc, #268]	; (80060f0 <HAL_ADC_ConfigChannel+0x844>)
 8005fe4:	e000      	b.n	8005fe8 <HAL_ADC_ConfigChannel+0x73c>
 8005fe6:	4a3e      	ldr	r2, [pc, #248]	; (80060e0 <HAL_ADC_ConfigChannel+0x834>)
 8005fe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe ffcd 	bl	8004f92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ff8:	4b3e      	ldr	r3, [pc, #248]	; (80060f4 <HAL_ADC_ConfigChannel+0x848>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	099b      	lsrs	r3, r3, #6
 8005ffe:	4a3e      	ldr	r2, [pc, #248]	; (80060f8 <HAL_ADC_ConfigChannel+0x84c>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	099b      	lsrs	r3, r3, #6
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	4613      	mov	r3, r2
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006012:	e002      	b.n	800601a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3b01      	subs	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1f9      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006020:	e054      	b.n	80060cc <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a35      	ldr	r2, [pc, #212]	; (80060fc <HAL_ADC_ConfigChannel+0x850>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d120      	bne.n	800606e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800602c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11a      	bne.n	800606e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006040:	d144      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800604a:	d004      	beq.n	8006056 <HAL_ADC_ConfigChannel+0x7aa>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <HAL_ADC_ConfigChannel+0x840>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_ADC_ConfigChannel+0x7ae>
 8006056:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <HAL_ADC_ConfigChannel+0x844>)
 8006058:	e000      	b.n	800605c <HAL_ADC_ConfigChannel+0x7b0>
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <HAL_ADC_ConfigChannel+0x834>)
 800605c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006064:	4619      	mov	r1, r3
 8006066:	4610      	mov	r0, r2
 8006068:	f7fe ff93 	bl	8004f92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800606c:	e02e      	b.n	80060cc <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a23      	ldr	r2, [pc, #140]	; (8006100 <HAL_ADC_ConfigChannel+0x854>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d129      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800607c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d123      	bne.n	80060cc <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a18      	ldr	r2, [pc, #96]	; (80060ec <HAL_ADC_ConfigChannel+0x840>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01e      	beq.n	80060cc <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006096:	d004      	beq.n	80060a2 <HAL_ADC_ConfigChannel+0x7f6>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a13      	ldr	r2, [pc, #76]	; (80060ec <HAL_ADC_ConfigChannel+0x840>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d101      	bne.n	80060a6 <HAL_ADC_ConfigChannel+0x7fa>
 80060a2:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <HAL_ADC_ConfigChannel+0x844>)
 80060a4:	e000      	b.n	80060a8 <HAL_ADC_ConfigChannel+0x7fc>
 80060a6:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <HAL_ADC_ConfigChannel+0x834>)
 80060a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f7fe ff6d 	bl	8004f92 <LL_ADC_SetCommonPathInternalCh>
 80060b8:	e008      	b.n	80060cc <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80060d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80060d8:	4618      	mov	r0, r3
 80060da:	37d8      	adds	r7, #216	; 0xd8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	50000700 	.word	0x50000700
 80060e4:	c3210000 	.word	0xc3210000
 80060e8:	90c00010 	.word	0x90c00010
 80060ec:	50000100 	.word	0x50000100
 80060f0:	50000300 	.word	0x50000300
 80060f4:	20007868 	.word	0x20007868
 80060f8:	053e2d63 	.word	0x053e2d63
 80060fc:	c7520000 	.word	0xc7520000
 8006100:	cb840000 	.word	0xcb840000

08006104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800610c:	2300      	movs	r3, #0
 800610e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff f8f9 	bl	800530c <LL_ADC_IsEnabled>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d176      	bne.n	800620e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	4b3c      	ldr	r3, [pc, #240]	; (8006218 <ADC_Enable+0x114>)
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006132:	f043 0210 	orr.w	r2, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613e:	f043 0201 	orr.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e062      	b.n	8006210 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff f8c8 	bl	80052e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800615c:	d004      	beq.n	8006168 <ADC_Enable+0x64>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2e      	ldr	r2, [pc, #184]	; (800621c <ADC_Enable+0x118>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <ADC_Enable+0x68>
 8006168:	4b2d      	ldr	r3, [pc, #180]	; (8006220 <ADC_Enable+0x11c>)
 800616a:	e000      	b.n	800616e <ADC_Enable+0x6a>
 800616c:	4b2d      	ldr	r3, [pc, #180]	; (8006224 <ADC_Enable+0x120>)
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe ff22 	bl	8004fb8 <LL_ADC_GetCommonPathInternalCh>
 8006174:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800617a:	2b00      	cmp	r3, #0
 800617c:	d013      	beq.n	80061a6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800617e:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <ADC_Enable+0x124>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	099b      	lsrs	r3, r3, #6
 8006184:	4a29      	ldr	r2, [pc, #164]	; (800622c <ADC_Enable+0x128>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	099b      	lsrs	r3, r3, #6
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	4613      	mov	r3, r2
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006198:	e002      	b.n	80061a0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3b01      	subs	r3, #1
 800619e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f9      	bne.n	800619a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80061a6:	f7fe fed5 	bl	8004f54 <HAL_GetTick>
 80061aa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061ac:	e028      	b.n	8006200 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff f8aa 	bl	800530c <LL_ADC_IsEnabled>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff f88e 	bl	80052e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061c8:	f7fe fec4 	bl	8004f54 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d914      	bls.n	8006200 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d00d      	beq.n	8006200 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e8:	f043 0210 	orr.w	r2, r3, #16
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f4:	f043 0201 	orr.w	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e007      	b.n	8006210 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b01      	cmp	r3, #1
 800620c:	d1cf      	bne.n	80061ae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	8000003f 	.word	0x8000003f
 800621c:	50000100 	.word	0x50000100
 8006220:	50000300 	.word	0x50000300
 8006224:	50000700 	.word	0x50000700
 8006228:	20007868 	.word	0x20007868
 800622c:	053e2d63 	.word	0x053e2d63

08006230 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006242:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006246:	2b00      	cmp	r3, #0
 8006248:	d14b      	bne.n	80062e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d021      	beq.n	80062a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe ff51 	bl	8005110 <LL_ADC_REG_IsTriggerSourceSWStart>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d032      	beq.n	80062da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d12b      	bne.n	80062da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11f      	bne.n	80062da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80062a6:	e018      	b.n	80062da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d111      	bne.n	80062da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d2:	f043 0201 	orr.w	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7fe fa9e 	bl	800481c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80062e0:	e00e      	b.n	8006300 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff fad2 	bl	8005898 <HAL_ADC_ErrorCallback>
}
 80062f4:	e004      	b.n	8006300 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7fe f9f2 	bl	8004700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006342:	f043 0204 	orr.w	r2, r3, #4
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff faa4 	bl	8005898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <LL_ADC_IsEnabled>:
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <LL_ADC_IsEnabled+0x18>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <LL_ADC_IsEnabled+0x1a>
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <LL_ADC_REG_IsConversionOngoing>:
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d101      	bne.n	8006396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b0a1      	sub	sp, #132	; 0x84
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80063be:	2302      	movs	r3, #2
 80063c0:	e0cb      	b.n	800655a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80063ca:	2300      	movs	r3, #0
 80063cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80063ce:	2300      	movs	r3, #0
 80063d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063da:	d102      	bne.n	80063e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80063dc:	4b61      	ldr	r3, [pc, #388]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80063de:	60bb      	str	r3, [r7, #8]
 80063e0:	e001      	b.n	80063e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f0:	f043 0220 	orr.w	r2, r3, #32
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0aa      	b.n	800655a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ffb9 	bl	800637e <LL_ADC_REG_IsConversionOngoing>
 800640c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff ffb3 	bl	800637e <LL_ADC_REG_IsConversionOngoing>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 808c 	bne.w	8006538 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 8088 	bne.w	8006538 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006430:	d004      	beq.n	800643c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a4b      	ldr	r2, [pc, #300]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d101      	bne.n	8006440 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 800643c:	4b4a      	ldr	r3, [pc, #296]	; (8006568 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800643e:	e000      	b.n	8006442 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006440:	4b4a      	ldr	r3, [pc, #296]	; (800656c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8006442:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d041      	beq.n	80064d0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800644c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800645e:	035b      	lsls	r3, r3, #13
 8006460:	430b      	orrs	r3, r1
 8006462:	431a      	orrs	r2, r3
 8006464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006466:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006470:	d004      	beq.n	800647c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a3b      	ldr	r2, [pc, #236]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d10f      	bne.n	800649c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 800647c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006480:	f7ff ff6a 	bl	8006358 <LL_ADC_IsEnabled>
 8006484:	4604      	mov	r4, r0
 8006486:	4837      	ldr	r0, [pc, #220]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006488:	f7ff ff66 	bl	8006358 <LL_ADC_IsEnabled>
 800648c:	4603      	mov	r3, r0
 800648e:	4323      	orrs	r3, r4
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf0c      	ite	eq
 8006494:	2301      	moveq	r3, #1
 8006496:	2300      	movne	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e008      	b.n	80064ae <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 800649c:	4834      	ldr	r0, [pc, #208]	; (8006570 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800649e:	f7ff ff5b 	bl	8006358 <LL_ADC_IsEnabled>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d04c      	beq.n	800654c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80064b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80064ba:	f023 030f 	bic.w	r3, r3, #15
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	6811      	ldr	r1, [r2, #0]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	6892      	ldr	r2, [r2, #8]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	431a      	orrs	r2, r3
 80064ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064cc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80064ce:	e03d      	b.n	800654c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80064d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064da:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e4:	d004      	beq.n	80064f0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10f      	bne.n	8006510 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80064f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80064f4:	f7ff ff30 	bl	8006358 <LL_ADC_IsEnabled>
 80064f8:	4604      	mov	r4, r0
 80064fa:	481a      	ldr	r0, [pc, #104]	; (8006564 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80064fc:	f7ff ff2c 	bl	8006358 <LL_ADC_IsEnabled>
 8006500:	4603      	mov	r3, r0
 8006502:	4323      	orrs	r3, r4
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf0c      	ite	eq
 8006508:	2301      	moveq	r3, #1
 800650a:	2300      	movne	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	e008      	b.n	8006522 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8006510:	4817      	ldr	r0, [pc, #92]	; (8006570 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006512:	f7ff ff21 	bl	8006358 <LL_ADC_IsEnabled>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d012      	beq.n	800654c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800652e:	f023 030f 	bic.w	r3, r3, #15
 8006532:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006534:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006536:	e009      	b.n	800654c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	f043 0220 	orr.w	r2, r3, #32
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800654a:	e000      	b.n	800654e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800654c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006556:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800655a:	4618      	mov	r0, r3
 800655c:	3784      	adds	r7, #132	; 0x84
 800655e:	46bd      	mov	sp, r7
 8006560:	bd90      	pop	{r4, r7, pc}
 8006562:	bf00      	nop
 8006564:	50000100 	.word	0x50000100
 8006568:	50000300 	.word	0x50000300
 800656c:	50000700 	.word	0x50000700
 8006570:	50000400 	.word	0x50000400

08006574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006584:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006590:	4013      	ands	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800659c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065a6:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <__NVIC_SetPriorityGrouping+0x44>)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	60d3      	str	r3, [r2, #12]
}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	e000ed00 	.word	0xe000ed00

080065bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <__NVIC_GetPriorityGrouping+0x18>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	f003 0307 	and.w	r3, r3, #7
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	e000ed00 	.word	0xe000ed00

080065d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	db0b      	blt.n	8006602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	f003 021f 	and.w	r2, r3, #31
 80065f0:	4907      	ldr	r1, [pc, #28]	; (8006610 <__NVIC_EnableIRQ+0x38>)
 80065f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	2001      	movs	r0, #1
 80065fa:	fa00 f202 	lsl.w	r2, r0, r2
 80065fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	e000e100 	.word	0xe000e100

08006614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	6039      	str	r1, [r7, #0]
 800661e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006624:	2b00      	cmp	r3, #0
 8006626:	db0a      	blt.n	800663e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	b2da      	uxtb	r2, r3
 800662c:	490c      	ldr	r1, [pc, #48]	; (8006660 <__NVIC_SetPriority+0x4c>)
 800662e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006632:	0112      	lsls	r2, r2, #4
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	440b      	add	r3, r1
 8006638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800663c:	e00a      	b.n	8006654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	4908      	ldr	r1, [pc, #32]	; (8006664 <__NVIC_SetPriority+0x50>)
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	3b04      	subs	r3, #4
 800664c:	0112      	lsls	r2, r2, #4
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	440b      	add	r3, r1
 8006652:	761a      	strb	r2, [r3, #24]
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	e000e100 	.word	0xe000e100
 8006664:	e000ed00 	.word	0xe000ed00

08006668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f1c3 0307 	rsb	r3, r3, #7
 8006682:	2b04      	cmp	r3, #4
 8006684:	bf28      	it	cs
 8006686:	2304      	movcs	r3, #4
 8006688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3304      	adds	r3, #4
 800668e:	2b06      	cmp	r3, #6
 8006690:	d902      	bls.n	8006698 <NVIC_EncodePriority+0x30>
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	3b03      	subs	r3, #3
 8006696:	e000      	b.n	800669a <NVIC_EncodePriority+0x32>
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800669c:	f04f 32ff 	mov.w	r2, #4294967295
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	fa02 f303 	lsl.w	r3, r2, r3
 80066a6:	43da      	mvns	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	401a      	ands	r2, r3
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066b0:	f04f 31ff 	mov.w	r1, #4294967295
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ba:	43d9      	mvns	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066c0:	4313      	orrs	r3, r2
         );
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3724      	adds	r7, #36	; 0x24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
	...

080066d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3b01      	subs	r3, #1
 80066dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066e0:	d301      	bcc.n	80066e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066e2:	2301      	movs	r3, #1
 80066e4:	e00f      	b.n	8006706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066e6:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <SysTick_Config+0x40>)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066ee:	210f      	movs	r1, #15
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	f7ff ff8e 	bl	8006614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <SysTick_Config+0x40>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <SysTick_Config+0x40>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	e000e010 	.word	0xe000e010

08006714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff ff29 	bl	8006574 <__NVIC_SetPriorityGrouping>
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	4603      	mov	r3, r0
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006738:	f7ff ff40 	bl	80065bc <__NVIC_GetPriorityGrouping>
 800673c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	f7ff ff90 	bl	8006668 <NVIC_EncodePriority>
 8006748:	4602      	mov	r2, r0
 800674a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ff5f 	bl	8006614 <__NVIC_SetPriority>
}
 8006756:	bf00      	nop
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	4603      	mov	r3, r0
 8006766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff ff33 	bl	80065d8 <__NVIC_EnableIRQ>
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff ffa4 	bl	80066d0 <SysTick_Config>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e08d      	b.n	80068c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	4b47      	ldr	r3, [pc, #284]	; (80068cc <HAL_DMA_Init+0x138>)
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d80f      	bhi.n	80067d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	4b45      	ldr	r3, [pc, #276]	; (80068d0 <HAL_DMA_Init+0x13c>)
 80067ba:	4413      	add	r3, r2
 80067bc:	4a45      	ldr	r2, [pc, #276]	; (80068d4 <HAL_DMA_Init+0x140>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	009a      	lsls	r2, r3, #2
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a42      	ldr	r2, [pc, #264]	; (80068d8 <HAL_DMA_Init+0x144>)
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
 80067d0:	e00e      	b.n	80067f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	4b40      	ldr	r3, [pc, #256]	; (80068dc <HAL_DMA_Init+0x148>)
 80067da:	4413      	add	r3, r2
 80067dc:	4a3d      	ldr	r2, [pc, #244]	; (80068d4 <HAL_DMA_Init+0x140>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	009a      	lsls	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a3c      	ldr	r2, [pc, #240]	; (80068e0 <HAL_DMA_Init+0x14c>)
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800682c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9b6 	bl	8006bb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006850:	d102      	bne.n	8006858 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800686c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d010      	beq.n	8006898 <HAL_DMA_Init+0x104>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b04      	cmp	r3, #4
 800687c:	d80c      	bhi.n	8006898 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9d6 	bl	8006c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	e008      	b.n	80068aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40020407 	.word	0x40020407
 80068d0:	bffdfff8 	.word	0xbffdfff8
 80068d4:	cccccccd 	.word	0xcccccccd
 80068d8:	40020000 	.word	0x40020000
 80068dc:	bffdfbf8 	.word	0xbffdfbf8
 80068e0:	40020400 	.word	0x40020400

080068e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_DMA_Start_IT+0x20>
 8006900:	2302      	movs	r3, #2
 8006902:	e066      	b.n	80069d2 <HAL_DMA_Start_IT+0xee>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d155      	bne.n	80069c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f8fb 	bl	8006b38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 020e 	orr.w	r2, r2, #14
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e00f      	b.n	800697c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0204 	bic.w	r2, r2, #4
 800696a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 020a 	orr.w	r2, r2, #10
 800697a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006998:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e005      	b.n	80069d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80069cc:	2302      	movs	r3, #2
 80069ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2204      	movs	r2, #4
 80069fc:	409a      	lsls	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d026      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x7a>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d021      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d107      	bne.n	8006a2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0204 	bic.w	r2, r2, #4
 8006a2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a32:	f003 021f 	and.w	r2, r3, #31
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	2104      	movs	r1, #4
 8006a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d071      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006a52:	e06c      	b.n	8006b2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a58:	f003 031f 	and.w	r3, r3, #31
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02e      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d029      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10b      	bne.n	8006a98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 020a 	bic.w	r2, r2, #10
 8006a8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9c:	f003 021f 	and.w	r2, r3, #31
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8006aaa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d038      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006ac4:	e033      	b.n	8006b2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2208      	movs	r2, #8
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02a      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d025      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 020e 	bic.w	r2, r2, #14
 8006af2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	f003 021f 	and.w	r2, r3, #31
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f202 	lsl.w	r2, r1, r2
 8006b06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
}
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f003 021f 	and.w	r2, r3, #31
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	2101      	movs	r1, #1
 8006b70:	fa01 f202 	lsl.w	r2, r1, r2
 8006b74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d108      	bne.n	8006b98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b96:	e007      	b.n	8006ba8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]
}
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d802      	bhi.n	8006bce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e001      	b.n	8006bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006bce:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006bd0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	3b08      	subs	r3, #8
 8006bde:	4a12      	ldr	r2, [pc, #72]	; (8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006be0:	fba2 2303 	umull	r2, r3, r2, r3
 8006be4:	091b      	lsrs	r3, r3, #4
 8006be6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bec:	089b      	lsrs	r3, r3, #2
 8006bee:	009a      	lsls	r2, r3, #2
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a0b      	ldr	r2, [pc, #44]	; (8006c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2201      	movs	r2, #1
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40020407 	.word	0x40020407
 8006c20:	40020800 	.word	0x40020800
 8006c24:	40020820 	.word	0x40020820
 8006c28:	cccccccd 	.word	0xcccccccd
 8006c2c:	40020880 	.word	0x40020880

08006c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006c52:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	1000823f 	.word	0x1000823f
 8006c74:	40020940 	.word	0x40020940

08006c78 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e033      	b.n	8006cf2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fe f808 	bl	8004cb4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f854 	bl	8006d58 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f822 	bl	8006cfa <FMAC_Reset>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10c      	bne.n	8006cd6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc0:	f043 0210 	orr.w	r2, r3, #16
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	22a0      	movs	r2, #160	; 0xa0
 8006ccc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
 8006cd4:	e008      	b.n	8006ce8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d02:	f7fe f927 	bl	8004f54 <HAL_GetTick>
 8006d06:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d16:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006d18:	e00f      	b.n	8006d3a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006d1a:	f7fe f91b 	bl	8004f54 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d28:	d907      	bls.n	8006d3a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e00a      	b.n	8006d50 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e8      	bne.n	8006d1a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f807 	bl	8006d74 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f81b 	bl	8006da2 <FMAC_ResetOutputStateAndDataPointers>
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006dde:	e15a      	b.n	8007096 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	2101      	movs	r1, #1
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	4013      	ands	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 814c 	beq.w	8007090 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d005      	beq.n	8006e10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d130      	bne.n	8006e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	43db      	mvns	r3, r3
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4013      	ands	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e46:	2201      	movs	r2, #1
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4013      	ands	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	091b      	lsrs	r3, r3, #4
 8006e5c:	f003 0201 	and.w	r2, r3, #1
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	fa02 f303 	lsl.w	r3, r2, r3
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d017      	beq.n	8006eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	2203      	movs	r2, #3
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4013      	ands	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d123      	bne.n	8006f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	08da      	lsrs	r2, r3, #3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3208      	adds	r2, #8
 8006ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	220f      	movs	r2, #15
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4013      	ands	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	08da      	lsrs	r2, r3, #3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3208      	adds	r2, #8
 8006efc:	6939      	ldr	r1, [r7, #16]
 8006efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43db      	mvns	r3, r3
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4013      	ands	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f003 0203 	and.w	r2, r3, #3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80a6 	beq.w	8007090 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f44:	4b5b      	ldr	r3, [pc, #364]	; (80070b4 <HAL_GPIO_Init+0x2e4>)
 8006f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f48:	4a5a      	ldr	r2, [pc, #360]	; (80070b4 <HAL_GPIO_Init+0x2e4>)
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	6613      	str	r3, [r2, #96]	; 0x60
 8006f50:	4b58      	ldr	r3, [pc, #352]	; (80070b4 <HAL_GPIO_Init+0x2e4>)
 8006f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f5c:	4a56      	ldr	r2, [pc, #344]	; (80070b8 <HAL_GPIO_Init+0x2e8>)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	089b      	lsrs	r3, r3, #2
 8006f62:	3302      	adds	r3, #2
 8006f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	220f      	movs	r2, #15
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f86:	d01f      	beq.n	8006fc8 <HAL_GPIO_Init+0x1f8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a4c      	ldr	r2, [pc, #304]	; (80070bc <HAL_GPIO_Init+0x2ec>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d019      	beq.n	8006fc4 <HAL_GPIO_Init+0x1f4>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a4b      	ldr	r2, [pc, #300]	; (80070c0 <HAL_GPIO_Init+0x2f0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_GPIO_Init+0x1f0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a4a      	ldr	r2, [pc, #296]	; (80070c4 <HAL_GPIO_Init+0x2f4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00d      	beq.n	8006fbc <HAL_GPIO_Init+0x1ec>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a49      	ldr	r2, [pc, #292]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <HAL_GPIO_Init+0x1e8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a48      	ldr	r2, [pc, #288]	; (80070cc <HAL_GPIO_Init+0x2fc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d101      	bne.n	8006fb4 <HAL_GPIO_Init+0x1e4>
 8006fb0:	2305      	movs	r3, #5
 8006fb2:	e00a      	b.n	8006fca <HAL_GPIO_Init+0x1fa>
 8006fb4:	2306      	movs	r3, #6
 8006fb6:	e008      	b.n	8006fca <HAL_GPIO_Init+0x1fa>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	e006      	b.n	8006fca <HAL_GPIO_Init+0x1fa>
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e004      	b.n	8006fca <HAL_GPIO_Init+0x1fa>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e002      	b.n	8006fca <HAL_GPIO_Init+0x1fa>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <HAL_GPIO_Init+0x1fa>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	f002 0203 	and.w	r2, r2, #3
 8006fd0:	0092      	lsls	r2, r2, #2
 8006fd2:	4093      	lsls	r3, r2
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fda:	4937      	ldr	r1, [pc, #220]	; (80070b8 <HAL_GPIO_Init+0x2e8>)
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	089b      	lsrs	r3, r3, #2
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fe8:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <HAL_GPIO_Init+0x300>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800700c:	4a30      	ldr	r2, [pc, #192]	; (80070d0 <HAL_GPIO_Init+0x300>)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007012:	4b2f      	ldr	r3, [pc, #188]	; (80070d0 <HAL_GPIO_Init+0x300>)
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	43db      	mvns	r3, r3
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4013      	ands	r3, r2
 8007020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007036:	4a26      	ldr	r2, [pc, #152]	; (80070d0 <HAL_GPIO_Init+0x300>)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800703c:	4b24      	ldr	r3, [pc, #144]	; (80070d0 <HAL_GPIO_Init+0x300>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	43db      	mvns	r3, r3
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4013      	ands	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007060:	4a1b      	ldr	r2, [pc, #108]	; (80070d0 <HAL_GPIO_Init+0x300>)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007066:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <HAL_GPIO_Init+0x300>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	43db      	mvns	r3, r3
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4013      	ands	r3, r2
 8007074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <HAL_GPIO_Init+0x300>)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	3301      	adds	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	fa22 f303 	lsr.w	r3, r2, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f47f ae9d 	bne.w	8006de0 <HAL_GPIO_Init+0x10>
  }
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40010000 	.word	0x40010000
 80070bc:	48000400 	.word	0x48000400
 80070c0:	48000800 	.word	0x48000800
 80070c4:	48000c00 	.word	0x48000c00
 80070c8:	48001000 	.word	0x48001000
 80070cc:	48001400 	.word	0x48001400
 80070d0:	40010400 	.word	0x40010400

080070d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d141      	bne.n	8007166 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070e2:	4b4b      	ldr	r3, [pc, #300]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ee:	d131      	bne.n	8007154 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070f0:	4b47      	ldr	r3, [pc, #284]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f6:	4a46      	ldr	r2, [pc, #280]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007100:	4b43      	ldr	r3, [pc, #268]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007108:	4a41      	ldr	r2, [pc, #260]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800710a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800710e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007110:	4b40      	ldr	r3, [pc, #256]	; (8007214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2232      	movs	r2, #50	; 0x32
 8007116:	fb02 f303 	mul.w	r3, r2, r3
 800711a:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	0c9b      	lsrs	r3, r3, #18
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007126:	e002      	b.n	800712e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3b01      	subs	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800712e:	4b38      	ldr	r3, [pc, #224]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800713a:	d102      	bne.n	8007142 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f2      	bne.n	8007128 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007142:	4b33      	ldr	r3, [pc, #204]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714e:	d158      	bne.n	8007202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e057      	b.n	8007204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007154:	4b2e      	ldr	r3, [pc, #184]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800715a:	4a2d      	ldr	r2, [pc, #180]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800715c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007164:	e04d      	b.n	8007202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800716c:	d141      	bne.n	80071f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800716e:	4b28      	ldr	r3, [pc, #160]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717a:	d131      	bne.n	80071e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800717c:	4b24      	ldr	r3, [pc, #144]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800717e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007182:	4a23      	ldr	r2, [pc, #140]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007188:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800718c:	4b20      	ldr	r3, [pc, #128]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007194:	4a1e      	ldr	r2, [pc, #120]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800719a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800719c:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2232      	movs	r2, #50	; 0x32
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	4a1c      	ldr	r2, [pc, #112]	; (8007218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	0c9b      	lsrs	r3, r3, #18
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071b2:	e002      	b.n	80071ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c6:	d102      	bne.n	80071ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f2      	bne.n	80071b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80071ce:	4b10      	ldr	r3, [pc, #64]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071da:	d112      	bne.n	8007202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e011      	b.n	8007204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e6:	4a0a      	ldr	r2, [pc, #40]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80071f0:	e007      	b.n	8007202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071f2:	4b07      	ldr	r3, [pc, #28]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071fa:	4a05      	ldr	r2, [pc, #20]	; (8007210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007200:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40007000 	.word	0x40007000
 8007214:	20007868 	.word	0x20007868
 8007218:	431bde83 	.word	0x431bde83

0800721c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4a04      	ldr	r2, [pc, #16]	; (8007238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800722a:	6093      	str	r3, [r2, #8]
}
 800722c:	bf00      	nop
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40007000 	.word	0x40007000

0800723c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e2fe      	b.n	800784c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d075      	beq.n	8007346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800725a:	4b97      	ldr	r3, [pc, #604]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f003 030c 	and.w	r3, r3, #12
 8007262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007264:	4b94      	ldr	r3, [pc, #592]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	d102      	bne.n	800727a <HAL_RCC_OscConfig+0x3e>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2b03      	cmp	r3, #3
 8007278:	d002      	beq.n	8007280 <HAL_RCC_OscConfig+0x44>
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d10b      	bne.n	8007298 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007280:	4b8d      	ldr	r3, [pc, #564]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d05b      	beq.n	8007344 <HAL_RCC_OscConfig+0x108>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d157      	bne.n	8007344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e2d9      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a0:	d106      	bne.n	80072b0 <HAL_RCC_OscConfig+0x74>
 80072a2:	4b85      	ldr	r3, [pc, #532]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a84      	ldr	r2, [pc, #528]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	e01d      	b.n	80072ec <HAL_RCC_OscConfig+0xb0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCC_OscConfig+0x98>
 80072ba:	4b7f      	ldr	r3, [pc, #508]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a7e      	ldr	r2, [pc, #504]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b7c      	ldr	r3, [pc, #496]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a7b      	ldr	r2, [pc, #492]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	e00b      	b.n	80072ec <HAL_RCC_OscConfig+0xb0>
 80072d4:	4b78      	ldr	r3, [pc, #480]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a77      	ldr	r2, [pc, #476]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4b75      	ldr	r3, [pc, #468]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a74      	ldr	r2, [pc, #464]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80072e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d013      	beq.n	800731c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f4:	f7fd fe2e 	bl	8004f54 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072fc:	f7fd fe2a 	bl	8004f54 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b64      	cmp	r3, #100	; 0x64
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e29e      	b.n	800784c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800730e:	4b6a      	ldr	r3, [pc, #424]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0xc0>
 800731a:	e014      	b.n	8007346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fd fe1a 	bl	8004f54 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007324:	f7fd fe16 	bl	8004f54 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e28a      	b.n	800784c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007336:	4b60      	ldr	r3, [pc, #384]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f0      	bne.n	8007324 <HAL_RCC_OscConfig+0xe8>
 8007342:	e000      	b.n	8007346 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d075      	beq.n	800743e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007352:	4b59      	ldr	r3, [pc, #356]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 030c 	and.w	r3, r3, #12
 800735a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800735c:	4b56      	ldr	r3, [pc, #344]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b0c      	cmp	r3, #12
 800736a:	d102      	bne.n	8007372 <HAL_RCC_OscConfig+0x136>
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d002      	beq.n	8007378 <HAL_RCC_OscConfig+0x13c>
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d11f      	bne.n	80073b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007378:	4b4f      	ldr	r3, [pc, #316]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <HAL_RCC_OscConfig+0x154>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e25d      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007390:	4b49      	ldr	r3, [pc, #292]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	061b      	lsls	r3, r3, #24
 800739e:	4946      	ldr	r1, [pc, #280]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80073a4:	4b45      	ldr	r3, [pc, #276]	; (80074bc <HAL_RCC_OscConfig+0x280>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fd fd87 	bl	8004ebc <HAL_InitTick>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d043      	beq.n	800743c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e249      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d023      	beq.n	8007408 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073c0:	4b3d      	ldr	r3, [pc, #244]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80073c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073cc:	f7fd fdc2 	bl	8004f54 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073d4:	f7fd fdbe 	bl	8004f54 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e232      	b.n	800784c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073e6:	4b34      	ldr	r3, [pc, #208]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0f0      	beq.n	80073d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f2:	4b31      	ldr	r3, [pc, #196]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	061b      	lsls	r3, r3, #24
 8007400:	492d      	ldr	r1, [pc, #180]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007402:	4313      	orrs	r3, r2
 8007404:	604b      	str	r3, [r1, #4]
 8007406:	e01a      	b.n	800743e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007408:	4b2b      	ldr	r3, [pc, #172]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800740e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007414:	f7fd fd9e 	bl	8004f54 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800741c:	f7fd fd9a 	bl	8004f54 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e20e      	b.n	800784c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800742e:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1f0      	bne.n	800741c <HAL_RCC_OscConfig+0x1e0>
 800743a:	e000      	b.n	800743e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800743c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d041      	beq.n	80074ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01c      	beq.n	800748c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007452:	4b19      	ldr	r3, [pc, #100]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007458:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007462:	f7fd fd77 	bl	8004f54 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007468:	e008      	b.n	800747c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800746a:	f7fd fd73 	bl	8004f54 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e1e7      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800747e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0ef      	beq.n	800746a <HAL_RCC_OscConfig+0x22e>
 800748a:	e020      	b.n	80074ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 800748e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007492:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <HAL_RCC_OscConfig+0x27c>)
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749c:	f7fd fd5a 	bl	8004f54 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074a2:	e00d      	b.n	80074c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074a4:	f7fd fd56 	bl	8004f54 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d906      	bls.n	80074c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e1ca      	b.n	800784c <HAL_RCC_OscConfig+0x610>
 80074b6:	bf00      	nop
 80074b8:	40021000 	.word	0x40021000
 80074bc:	2000786c 	.word	0x2000786c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074c0:	4b8c      	ldr	r3, [pc, #560]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80074c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1ea      	bne.n	80074a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80a6 	beq.w	8007628 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074dc:	2300      	movs	r3, #0
 80074de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074e0:	4b84      	ldr	r3, [pc, #528]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_RCC_OscConfig+0x2b4>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <HAL_RCC_OscConfig+0x2b6>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074f6:	4b7f      	ldr	r3, [pc, #508]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	4a7e      	ldr	r2, [pc, #504]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80074fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007500:	6593      	str	r3, [r2, #88]	; 0x58
 8007502:	4b7c      	ldr	r3, [pc, #496]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800750e:	2301      	movs	r3, #1
 8007510:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007512:	4b79      	ldr	r3, [pc, #484]	; (80076f8 <HAL_RCC_OscConfig+0x4bc>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751a:	2b00      	cmp	r3, #0
 800751c:	d118      	bne.n	8007550 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800751e:	4b76      	ldr	r3, [pc, #472]	; (80076f8 <HAL_RCC_OscConfig+0x4bc>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a75      	ldr	r2, [pc, #468]	; (80076f8 <HAL_RCC_OscConfig+0x4bc>)
 8007524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800752a:	f7fd fd13 	bl	8004f54 <HAL_GetTick>
 800752e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007530:	e008      	b.n	8007544 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007532:	f7fd fd0f 	bl	8004f54 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e183      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007544:	4b6c      	ldr	r3, [pc, #432]	; (80076f8 <HAL_RCC_OscConfig+0x4bc>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0f0      	beq.n	8007532 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d108      	bne.n	800756a <HAL_RCC_OscConfig+0x32e>
 8007558:	4b66      	ldr	r3, [pc, #408]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755e:	4a65      	ldr	r2, [pc, #404]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007568:	e024      	b.n	80075b4 <HAL_RCC_OscConfig+0x378>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b05      	cmp	r3, #5
 8007570:	d110      	bne.n	8007594 <HAL_RCC_OscConfig+0x358>
 8007572:	4b60      	ldr	r3, [pc, #384]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007578:	4a5e      	ldr	r2, [pc, #376]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800757a:	f043 0304 	orr.w	r3, r3, #4
 800757e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007582:	4b5c      	ldr	r3, [pc, #368]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007588:	4a5a      	ldr	r2, [pc, #360]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007592:	e00f      	b.n	80075b4 <HAL_RCC_OscConfig+0x378>
 8007594:	4b57      	ldr	r3, [pc, #348]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759a:	4a56      	ldr	r2, [pc, #344]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075a4:	4b53      	ldr	r3, [pc, #332]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075aa:	4a52      	ldr	r2, [pc, #328]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d016      	beq.n	80075ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075bc:	f7fd fcca 	bl	8004f54 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075c2:	e00a      	b.n	80075da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c4:	f7fd fcc6 	bl	8004f54 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e138      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075da:	4b46      	ldr	r3, [pc, #280]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80075dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0ed      	beq.n	80075c4 <HAL_RCC_OscConfig+0x388>
 80075e8:	e015      	b.n	8007616 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ea:	f7fd fcb3 	bl	8004f54 <HAL_GetTick>
 80075ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075f0:	e00a      	b.n	8007608 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f2:	f7fd fcaf 	bl	8004f54 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007600:	4293      	cmp	r3, r2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e121      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007608:	4b3a      	ldr	r3, [pc, #232]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ed      	bne.n	80075f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007616:	7ffb      	ldrb	r3, [r7, #31]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d105      	bne.n	8007628 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800761c:	4b35      	ldr	r3, [pc, #212]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800761e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007620:	4a34      	ldr	r2, [pc, #208]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007626:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0320 	and.w	r3, r3, #32
 8007630:	2b00      	cmp	r3, #0
 8007632:	d03c      	beq.n	80076ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01c      	beq.n	8007676 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800763c:	4b2d      	ldr	r3, [pc, #180]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800763e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007642:	4a2c      	ldr	r2, [pc, #176]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764c:	f7fd fc82 	bl	8004f54 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007654:	f7fd fc7e 	bl	8004f54 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e0f2      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007666:	4b23      	ldr	r3, [pc, #140]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0ef      	beq.n	8007654 <HAL_RCC_OscConfig+0x418>
 8007674:	e01b      	b.n	80076ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007676:	4b1f      	ldr	r3, [pc, #124]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 8007678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007686:	f7fd fc65 	bl	8004f54 <HAL_GetTick>
 800768a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800768c:	e008      	b.n	80076a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800768e:	f7fd fc61 	bl	8004f54 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e0d5      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076a0:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80076a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ef      	bne.n	800768e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80c9 	beq.w	800784a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076b8:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 030c 	and.w	r3, r3, #12
 80076c0:	2b0c      	cmp	r3, #12
 80076c2:	f000 8083 	beq.w	80077cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d15e      	bne.n	800778c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ce:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <HAL_RCC_OscConfig+0x4b8>)
 80076d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076da:	f7fd fc3b 	bl	8004f54 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076e0:	e00c      	b.n	80076fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e2:	f7fd fc37 	bl	8004f54 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d905      	bls.n	80076fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e0ab      	b.n	800784c <HAL_RCC_OscConfig+0x610>
 80076f4:	40021000 	.word	0x40021000
 80076f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076fc:	4b55      	ldr	r3, [pc, #340]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1ec      	bne.n	80076e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007708:	4b52      	ldr	r3, [pc, #328]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	4b52      	ldr	r3, [pc, #328]	; (8007858 <HAL_RCC_OscConfig+0x61c>)
 800770e:	4013      	ands	r3, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6a11      	ldr	r1, [r2, #32]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007718:	3a01      	subs	r2, #1
 800771a:	0112      	lsls	r2, r2, #4
 800771c:	4311      	orrs	r1, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007722:	0212      	lsls	r2, r2, #8
 8007724:	4311      	orrs	r1, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800772a:	0852      	lsrs	r2, r2, #1
 800772c:	3a01      	subs	r2, #1
 800772e:	0552      	lsls	r2, r2, #21
 8007730:	4311      	orrs	r1, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007736:	0852      	lsrs	r2, r2, #1
 8007738:	3a01      	subs	r2, #1
 800773a:	0652      	lsls	r2, r2, #25
 800773c:	4311      	orrs	r1, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007742:	06d2      	lsls	r2, r2, #27
 8007744:	430a      	orrs	r2, r1
 8007746:	4943      	ldr	r1, [pc, #268]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 8007748:	4313      	orrs	r3, r2
 800774a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800774c:	4b41      	ldr	r3, [pc, #260]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a40      	ldr	r2, [pc, #256]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 8007752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007756:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007758:	4b3e      	ldr	r3, [pc, #248]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a3d      	ldr	r2, [pc, #244]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 800775e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007762:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fd fbf6 	bl	8004f54 <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800776c:	f7fd fbf2 	bl	8004f54 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e066      	b.n	800784c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800777e:	4b35      	ldr	r3, [pc, #212]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f0      	beq.n	800776c <HAL_RCC_OscConfig+0x530>
 800778a:	e05e      	b.n	800784a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800778c:	4b31      	ldr	r3, [pc, #196]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a30      	ldr	r2, [pc, #192]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 8007792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007798:	f7fd fbdc 	bl	8004f54 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800779e:	e008      	b.n	80077b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a0:	f7fd fbd8 	bl	8004f54 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e04c      	b.n	800784c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077b2:	4b28      	ldr	r3, [pc, #160]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f0      	bne.n	80077a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80077be:	4b25      	ldr	r3, [pc, #148]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	4924      	ldr	r1, [pc, #144]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 80077c4:	4b25      	ldr	r3, [pc, #148]	; (800785c <HAL_RCC_OscConfig+0x620>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	60cb      	str	r3, [r1, #12]
 80077ca:	e03e      	b.n	800784a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e039      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80077d8:	4b1e      	ldr	r3, [pc, #120]	; (8007854 <HAL_RCC_OscConfig+0x618>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f003 0203 	and.w	r2, r3, #3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d12c      	bne.n	8007846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	3b01      	subs	r3, #1
 80077f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d123      	bne.n	8007846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800780a:	429a      	cmp	r2, r3
 800780c:	d11b      	bne.n	8007846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800781a:	429a      	cmp	r2, r3
 800781c:	d113      	bne.n	8007846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	3b01      	subs	r3, #1
 800782c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800782e:	429a      	cmp	r2, r3
 8007830:	d109      	bne.n	8007846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	085b      	lsrs	r3, r3, #1
 800783e:	3b01      	subs	r3, #1
 8007840:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007842:	429a      	cmp	r2, r3
 8007844:	d001      	beq.n	800784a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40021000 	.word	0x40021000
 8007858:	019f800c 	.word	0x019f800c
 800785c:	feeefffc 	.word	0xfeeefffc

08007860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e11e      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007878:	4b91      	ldr	r3, [pc, #580]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 030f 	and.w	r3, r3, #15
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d910      	bls.n	80078a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007886:	4b8e      	ldr	r3, [pc, #568]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f023 020f 	bic.w	r2, r3, #15
 800788e:	498c      	ldr	r1, [pc, #560]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007896:	4b8a      	ldr	r3, [pc, #552]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d001      	beq.n	80078a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e106      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d073      	beq.n	800799c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d129      	bne.n	8007910 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078bc:	4b81      	ldr	r3, [pc, #516]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0f4      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80078cc:	f000 f964 	bl	8007b98 <RCC_GetSysClockFreqFromPLLSource>
 80078d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4a7c      	ldr	r2, [pc, #496]	; (8007ac8 <HAL_RCC_ClockConfig+0x268>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d93f      	bls.n	800795a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80078da:	4b7a      	ldr	r3, [pc, #488]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d033      	beq.n	800795a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d12f      	bne.n	800795a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078fa:	4b72      	ldr	r3, [pc, #456]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007902:	4a70      	ldr	r2, [pc, #448]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007908:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800790a:	2380      	movs	r3, #128	; 0x80
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e024      	b.n	800795a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b02      	cmp	r3, #2
 8007916:	d107      	bne.n	8007928 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007918:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0c6      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007928:	4b66      	ldr	r3, [pc, #408]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e0be      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007938:	f000 f8ce 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 800793c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4a61      	ldr	r2, [pc, #388]	; (8007ac8 <HAL_RCC_ClockConfig+0x268>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d909      	bls.n	800795a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007946:	4b5f      	ldr	r3, [pc, #380]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800794e:	4a5d      	ldr	r2, [pc, #372]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007954:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007956:	2380      	movs	r3, #128	; 0x80
 8007958:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800795a:	4b5a      	ldr	r3, [pc, #360]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f023 0203 	bic.w	r2, r3, #3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4957      	ldr	r1, [pc, #348]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007968:	4313      	orrs	r3, r2
 800796a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796c:	f7fd faf2 	bl	8004f54 <HAL_GetTick>
 8007970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007972:	e00a      	b.n	800798a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007974:	f7fd faee 	bl	8004f54 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007982:	4293      	cmp	r3, r2
 8007984:	d901      	bls.n	800798a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e095      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800798a:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 020c 	and.w	r2, r3, #12
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	429a      	cmp	r2, r3
 800799a:	d1eb      	bne.n	8007974 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d023      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079b4:	4b43      	ldr	r3, [pc, #268]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4a42      	ldr	r2, [pc, #264]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80079be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80079cc:	4b3d      	ldr	r3, [pc, #244]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80079d4:	4a3b      	ldr	r2, [pc, #236]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80079da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079dc:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	4936      	ldr	r1, [pc, #216]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	608b      	str	r3, [r1, #8]
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d105      	bne.n	8007a02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80079f6:	4b33      	ldr	r3, [pc, #204]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	4a32      	ldr	r2, [pc, #200]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 80079fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a02:	4b2f      	ldr	r3, [pc, #188]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d21d      	bcs.n	8007a4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a10:	4b2b      	ldr	r3, [pc, #172]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f023 020f 	bic.w	r2, r3, #15
 8007a18:	4929      	ldr	r1, [pc, #164]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007a20:	f7fd fa98 	bl	8004f54 <HAL_GetTick>
 8007a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a26:	e00a      	b.n	8007a3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a28:	f7fd fa94 	bl	8004f54 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e03b      	b.n	8007ab6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a3e:	4b20      	ldr	r3, [pc, #128]	; (8007ac0 <HAL_RCC_ClockConfig+0x260>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d1ed      	bne.n	8007a28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a58:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	4917      	ldr	r1, [pc, #92]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	490f      	ldr	r1, [pc, #60]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a8a:	f000 f825 	bl	8007ad8 <HAL_RCC_GetSysClockFreq>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <HAL_RCC_ClockConfig+0x264>)
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	091b      	lsrs	r3, r3, #4
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	490c      	ldr	r1, [pc, #48]	; (8007acc <HAL_RCC_ClockConfig+0x26c>)
 8007a9c:	5ccb      	ldrb	r3, [r1, r3]
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa6:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <HAL_RCC_ClockConfig+0x270>)
 8007aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <HAL_RCC_ClockConfig+0x274>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd fa04 	bl	8004ebc <HAL_InitTick>
 8007ab4:	4603      	mov	r3, r0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40022000 	.word	0x40022000
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	04c4b400 	.word	0x04c4b400
 8007acc:	080090f4 	.word	0x080090f4
 8007ad0:	20007868 	.word	0x20007868
 8007ad4:	2000786c 	.word	0x2000786c

08007ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007ade:	4b2c      	ldr	r3, [pc, #176]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 030c 	and.w	r3, r3, #12
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d102      	bne.n	8007af0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007aea:	4b2a      	ldr	r3, [pc, #168]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	e047      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007af0:	4b27      	ldr	r3, [pc, #156]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 030c 	and.w	r3, r3, #12
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d102      	bne.n	8007b02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007afc:	4b25      	ldr	r3, [pc, #148]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	e03e      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d136      	bne.n	8007b7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b0e:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	091b      	lsrs	r3, r3, #4
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	3301      	adds	r3, #1
 8007b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d10c      	bne.n	8007b46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b2c:	4a19      	ldr	r2, [pc, #100]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	4a16      	ldr	r2, [pc, #88]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b36:	68d2      	ldr	r2, [r2, #12]
 8007b38:	0a12      	lsrs	r2, r2, #8
 8007b3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b3e:	fb02 f303 	mul.w	r3, r2, r3
 8007b42:	617b      	str	r3, [r7, #20]
      break;
 8007b44:	e00c      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b46:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	4a10      	ldr	r2, [pc, #64]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b50:	68d2      	ldr	r2, [r2, #12]
 8007b52:	0a12      	lsrs	r2, r2, #8
 8007b54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b58:	fb02 f303 	mul.w	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
      break;
 8007b5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	0e5b      	lsrs	r3, r3, #25
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	e001      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007b80:	693b      	ldr	r3, [r7, #16]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40021000 	.word	0x40021000
 8007b94:	00f42400 	.word	0x00f42400

08007b98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	091b      	lsrs	r3, r3, #4
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d10c      	bne.n	8007bd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bbc:	4a17      	ldr	r2, [pc, #92]	; (8007c1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc4:	4a14      	ldr	r2, [pc, #80]	; (8007c18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bc6:	68d2      	ldr	r2, [r2, #12]
 8007bc8:	0a12      	lsrs	r2, r2, #8
 8007bca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bce:	fb02 f303 	mul.w	r3, r2, r3
 8007bd2:	617b      	str	r3, [r7, #20]
    break;
 8007bd4:	e00c      	b.n	8007bf0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bd6:	4a11      	ldr	r2, [pc, #68]	; (8007c1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bde:	4a0e      	ldr	r2, [pc, #56]	; (8007c18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007be0:	68d2      	ldr	r2, [r2, #12]
 8007be2:	0a12      	lsrs	r2, r2, #8
 8007be4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
 8007bec:	617b      	str	r3, [r7, #20]
    break;
 8007bee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	0e5b      	lsrs	r3, r3, #25
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007c0a:	687b      	ldr	r3, [r7, #4]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	00f42400 	.word	0x00f42400

08007c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c28:	2300      	movs	r3, #0
 8007c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8098 	beq.w	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c42:	4b43      	ldr	r3, [pc, #268]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c4e:	4b40      	ldr	r3, [pc, #256]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c52:	4a3f      	ldr	r2, [pc, #252]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c58:	6593      	str	r3, [r2, #88]	; 0x58
 8007c5a:	4b3d      	ldr	r3, [pc, #244]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c62:	60bb      	str	r3, [r7, #8]
 8007c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c66:	2301      	movs	r3, #1
 8007c68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c6a:	4b3a      	ldr	r3, [pc, #232]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a39      	ldr	r2, [pc, #228]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c76:	f7fd f96d 	bl	8004f54 <HAL_GetTick>
 8007c7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c7c:	e009      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c7e:	f7fd f969 	bl	8004f54 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d902      	bls.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	74fb      	strb	r3, [r7, #19]
        break;
 8007c90:	e005      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c92:	4b30      	ldr	r3, [pc, #192]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0ef      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007c9e:	7cfb      	ldrb	r3, [r7, #19]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d159      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ca4:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01e      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d019      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cc0:	4b23      	ldr	r3, [pc, #140]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ccc:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cdc:	4b1c      	ldr	r3, [pc, #112]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cec:	4a18      	ldr	r2, [pc, #96]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d016      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfe:	f7fd f929 	bl	8004f54 <HAL_GetTick>
 8007d02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d04:	e00b      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d06:	f7fd f925 	bl	8004f54 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d902      	bls.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	74fb      	strb	r3, [r7, #19]
            break;
 8007d1c:	e006      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0ec      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d2c:	7cfb      	ldrb	r3, [r7, #19]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d40:	4903      	ldr	r1, [pc, #12]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d48:	e008      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d4a:	7cfb      	ldrb	r3, [r7, #19]
 8007d4c:	74bb      	strb	r3, [r7, #18]
 8007d4e:	e005      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d50:	40021000 	.word	0x40021000
 8007d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d58:	7cfb      	ldrb	r3, [r7, #19]
 8007d5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d5c:	7c7b      	ldrb	r3, [r7, #17]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d105      	bne.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d62:	4ba7      	ldr	r3, [pc, #668]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d66:	4aa6      	ldr	r2, [pc, #664]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d7a:	4ba1      	ldr	r3, [pc, #644]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d80:	f023 0203 	bic.w	r2, r3, #3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	499d      	ldr	r1, [pc, #628]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d9c:	4b98      	ldr	r3, [pc, #608]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da2:	f023 020c 	bic.w	r2, r3, #12
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	4995      	ldr	r1, [pc, #596]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dbe:	4b90      	ldr	r3, [pc, #576]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	498c      	ldr	r1, [pc, #560]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007de0:	4b87      	ldr	r3, [pc, #540]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	4984      	ldr	r1, [pc, #528]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e02:	4b7f      	ldr	r3, [pc, #508]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	497b      	ldr	r1, [pc, #492]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00a      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e24:	4b76      	ldr	r3, [pc, #472]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	4973      	ldr	r1, [pc, #460]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e46:	4b6e      	ldr	r3, [pc, #440]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	496a      	ldr	r1, [pc, #424]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00a      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e68:	4b65      	ldr	r3, [pc, #404]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	4962      	ldr	r1, [pc, #392]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e8a:	4b5d      	ldr	r3, [pc, #372]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	4959      	ldr	r1, [pc, #356]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eac:	4b54      	ldr	r3, [pc, #336]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	4951      	ldr	r1, [pc, #324]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d015      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ece:	4b4c      	ldr	r3, [pc, #304]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	4948      	ldr	r1, [pc, #288]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eec:	d105      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007eee:	4b44      	ldr	r3, [pc, #272]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	4a43      	ldr	r2, [pc, #268]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ef8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d015      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f06:	4b3e      	ldr	r3, [pc, #248]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	493a      	ldr	r1, [pc, #232]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f24:	d105      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f26:	4b36      	ldr	r3, [pc, #216]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	4a35      	ldr	r2, [pc, #212]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f30:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d015      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f3e:	4b30      	ldr	r3, [pc, #192]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4c:	492c      	ldr	r1, [pc, #176]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f5c:	d105      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f5e:	4b28      	ldr	r3, [pc, #160]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	4a27      	ldr	r2, [pc, #156]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f68:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d015      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f76:	4b22      	ldr	r3, [pc, #136]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	491e      	ldr	r1, [pc, #120]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f94:	d105      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f96:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	4a19      	ldr	r2, [pc, #100]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fa0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d015      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fae:	4b14      	ldr	r3, [pc, #80]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbc:	4910      	ldr	r1, [pc, #64]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fcc:	d105      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	4a0b      	ldr	r2, [pc, #44]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fd8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d018      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	4902      	ldr	r1, [pc, #8]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	e001      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008000:	40021000 	.word	0x40021000
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800800a:	d105      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800800c:	4b21      	ldr	r3, [pc, #132]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	4a20      	ldr	r2, [pc, #128]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008016:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d015      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008024:	4b1b      	ldr	r3, [pc, #108]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008032:	4918      	ldr	r1, [pc, #96]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008034:	4313      	orrs	r3, r2
 8008036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008042:	d105      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008044:	4b13      	ldr	r3, [pc, #76]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4a12      	ldr	r2, [pc, #72]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800804a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d015      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800805e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806a:	490a      	ldr	r1, [pc, #40]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800806c:	4313      	orrs	r3, r2
 800806e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800807a:	d105      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	4a04      	ldr	r2, [pc, #16]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008086:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008088:	7cbb      	ldrb	r3, [r7, #18]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3718      	adds	r7, #24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40021000 	.word	0x40021000

08008098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e049      	b.n	800813e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fc fe18 	bl	8004cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f000 f878 	bl	80081cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_TIM_SlaveConfigSynchro+0x18>
 800815a:	2302      	movs	r3, #2
 800815c:	e031      	b.n	80081c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f8d5 	bl	8008320 <TIM_SlaveTimer_SetConfig>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d009      	beq.n	8008190 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e018      	b.n	80081c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081ae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
	...

080081cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a48      	ldr	r2, [pc, #288]	; (8008300 <TIM_Base_SetConfig+0x134>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d013      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ea:	d00f      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a45      	ldr	r2, [pc, #276]	; (8008304 <TIM_Base_SetConfig+0x138>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00b      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a44      	ldr	r2, [pc, #272]	; (8008308 <TIM_Base_SetConfig+0x13c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d007      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a43      	ldr	r2, [pc, #268]	; (800830c <TIM_Base_SetConfig+0x140>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a42      	ldr	r2, [pc, #264]	; (8008310 <TIM_Base_SetConfig+0x144>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d108      	bne.n	800821e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a37      	ldr	r2, [pc, #220]	; (8008300 <TIM_Base_SetConfig+0x134>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d01f      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822c:	d01b      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a34      	ldr	r2, [pc, #208]	; (8008304 <TIM_Base_SetConfig+0x138>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d017      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a33      	ldr	r2, [pc, #204]	; (8008308 <TIM_Base_SetConfig+0x13c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d013      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a32      	ldr	r2, [pc, #200]	; (800830c <TIM_Base_SetConfig+0x140>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00f      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a32      	ldr	r2, [pc, #200]	; (8008314 <TIM_Base_SetConfig+0x148>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d00b      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a31      	ldr	r2, [pc, #196]	; (8008318 <TIM_Base_SetConfig+0x14c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d007      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a30      	ldr	r2, [pc, #192]	; (800831c <TIM_Base_SetConfig+0x150>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d003      	beq.n	8008266 <TIM_Base_SetConfig+0x9a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a2b      	ldr	r2, [pc, #172]	; (8008310 <TIM_Base_SetConfig+0x144>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d108      	bne.n	8008278 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800826c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a18      	ldr	r2, [pc, #96]	; (8008300 <TIM_Base_SetConfig+0x134>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d013      	beq.n	80082cc <TIM_Base_SetConfig+0x100>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a19      	ldr	r2, [pc, #100]	; (800830c <TIM_Base_SetConfig+0x140>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00f      	beq.n	80082cc <TIM_Base_SetConfig+0x100>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a19      	ldr	r2, [pc, #100]	; (8008314 <TIM_Base_SetConfig+0x148>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00b      	beq.n	80082cc <TIM_Base_SetConfig+0x100>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a18      	ldr	r2, [pc, #96]	; (8008318 <TIM_Base_SetConfig+0x14c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d007      	beq.n	80082cc <TIM_Base_SetConfig+0x100>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a17      	ldr	r2, [pc, #92]	; (800831c <TIM_Base_SetConfig+0x150>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <TIM_Base_SetConfig+0x100>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a12      	ldr	r2, [pc, #72]	; (8008310 <TIM_Base_SetConfig+0x144>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d103      	bne.n	80082d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d105      	bne.n	80082f2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f023 0201 	bic.w	r2, r3, #1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	611a      	str	r2, [r3, #16]
  }
}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	40012c00 	.word	0x40012c00
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800
 800830c:	40013400 	.word	0x40013400
 8008310:	40015000 	.word	0x40015000
 8008314:	40014000 	.word	0x40014000
 8008318:	40014400 	.word	0x40014400
 800831c:	40014800 	.word	0x40014800

08008320 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008352:	f023 0307 	bic.w	r3, r3, #7
 8008356:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4313      	orrs	r3, r2
 8008360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4a4e      	ldr	r2, [pc, #312]	; (80084a8 <TIM_SlaveTimer_SetConfig+0x188>)
 8008370:	4293      	cmp	r3, r2
 8008372:	f000 8092 	beq.w	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 8008376:	4a4c      	ldr	r2, [pc, #304]	; (80084a8 <TIM_SlaveTimer_SetConfig+0x188>)
 8008378:	4293      	cmp	r3, r2
 800837a:	f200 808b 	bhi.w	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 800837e:	4a4b      	ldr	r2, [pc, #300]	; (80084ac <TIM_SlaveTimer_SetConfig+0x18c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	f000 808a 	beq.w	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 8008386:	4a49      	ldr	r2, [pc, #292]	; (80084ac <TIM_SlaveTimer_SetConfig+0x18c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	f200 8083 	bhi.w	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 800838e:	4a48      	ldr	r2, [pc, #288]	; (80084b0 <TIM_SlaveTimer_SetConfig+0x190>)
 8008390:	4293      	cmp	r3, r2
 8008392:	f000 8082 	beq.w	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 8008396:	4a46      	ldr	r2, [pc, #280]	; (80084b0 <TIM_SlaveTimer_SetConfig+0x190>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d87b      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 800839c:	4a45      	ldr	r2, [pc, #276]	; (80084b4 <TIM_SlaveTimer_SetConfig+0x194>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d07b      	beq.n	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 80083a2:	4a44      	ldr	r2, [pc, #272]	; (80084b4 <TIM_SlaveTimer_SetConfig+0x194>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d875      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083a8:	4a43      	ldr	r2, [pc, #268]	; (80084b8 <TIM_SlaveTimer_SetConfig+0x198>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d075      	beq.n	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 80083ae:	4a42      	ldr	r2, [pc, #264]	; (80084b8 <TIM_SlaveTimer_SetConfig+0x198>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d86f      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083b8:	d06f      	beq.n	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 80083ba:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083be:	d869      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083c0:	2b70      	cmp	r3, #112	; 0x70
 80083c2:	d01a      	beq.n	80083fa <TIM_SlaveTimer_SetConfig+0xda>
 80083c4:	2b70      	cmp	r3, #112	; 0x70
 80083c6:	d865      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083c8:	2b60      	cmp	r3, #96	; 0x60
 80083ca:	d059      	beq.n	8008480 <TIM_SlaveTimer_SetConfig+0x160>
 80083cc:	2b60      	cmp	r3, #96	; 0x60
 80083ce:	d861      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083d0:	2b50      	cmp	r3, #80	; 0x50
 80083d2:	d04b      	beq.n	800846c <TIM_SlaveTimer_SetConfig+0x14c>
 80083d4:	2b50      	cmp	r3, #80	; 0x50
 80083d6:	d85d      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083d8:	2b40      	cmp	r3, #64	; 0x40
 80083da:	d019      	beq.n	8008410 <TIM_SlaveTimer_SetConfig+0xf0>
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d859      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083e0:	2b30      	cmp	r3, #48	; 0x30
 80083e2:	d05a      	beq.n	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 80083e4:	2b30      	cmp	r3, #48	; 0x30
 80083e6:	d855      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d056      	beq.n	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d851      	bhi.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d052      	beq.n	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 80083f4:	2b10      	cmp	r3, #16
 80083f6:	d050      	beq.n	800849a <TIM_SlaveTimer_SetConfig+0x17a>
 80083f8:	e04c      	b.n	8008494 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800840a:	f000 f8b6 	bl	800857a <TIM_ETR_SetConfig>
      break;
 800840e:	e045      	b.n	800849c <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b05      	cmp	r3, #5
 8008416:	d004      	beq.n	8008422 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800841c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8008420:	d101      	bne.n	8008426 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e03b      	b.n	800849e <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6a1a      	ldr	r2, [r3, #32]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800844c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	4313      	orrs	r3, r2
 8008458:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
      break;
 800846a:	e017      	b.n	800849c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008478:	461a      	mov	r2, r3
 800847a:	f000 f81f 	bl	80084bc <TIM_TI1_ConfigInputStage>
      break;
 800847e:	e00d      	b.n	800849c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800848c:	461a      	mov	r2, r3
 800848e:	f000 f844 	bl	800851a <TIM_TI2_ConfigInputStage>
      break;
 8008492:	e003      	b.n	800849c <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
      break;
 8008498:	e000      	b.n	800849c <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800849a:	bf00      	nop
  }

  return status;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	00100070 	.word	0x00100070
 80084ac:	00100050 	.word	0x00100050
 80084b0:	00100040 	.word	0x00100040
 80084b4:	00100030 	.word	0x00100030
 80084b8:	00100020 	.word	0x00100020

080084bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f023 0201 	bic.w	r2, r3, #1
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f023 030a 	bic.w	r3, r3, #10
 80084f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800851a:	b480      	push	{r7}
 800851c:	b087      	sub	sp, #28
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	f023 0210 	bic.w	r2, r3, #16
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	031b      	lsls	r3, r3, #12
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	4313      	orrs	r3, r2
 800854e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008556:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800857a:	b480      	push	{r7}
 800857c:	b087      	sub	sp, #28
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
 8008586:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008594:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	021a      	lsls	r2, r3, #8
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	431a      	orrs	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	609a      	str	r2, [r3, #8]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e06f      	b.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a31      	ldr	r2, [pc, #196]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a30      	ldr	r2, [pc, #192]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a2e      	ldr	r2, [pc, #184]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d108      	bne.n	8008624 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008618:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800862a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1e      	ldr	r2, [pc, #120]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d01d      	beq.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008654:	d018      	beq.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1c      	ldr	r2, [pc, #112]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d013      	beq.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1a      	ldr	r2, [pc, #104]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00e      	beq.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a15      	ldr	r2, [pc, #84]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a16      	ldr	r2, [pc, #88]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a11      	ldr	r2, [pc, #68]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d10c      	bne.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	4313      	orrs	r3, r2
 8008698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40012c00 	.word	0x40012c00
 80086c4:	40013400 	.word	0x40013400
 80086c8:	40015000 	.word	0x40015000
 80086cc:	40000400 	.word	0x40000400
 80086d0:	40000800 	.word	0x40000800
 80086d4:	40014000 	.word	0x40014000

080086d8 <arm_mat_mult_f32>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	8845      	ldrh	r5, [r0, #2]
 80086de:	880b      	ldrh	r3, [r1, #0]
 80086e0:	8806      	ldrh	r6, [r0, #0]
 80086e2:	6847      	ldr	r7, [r0, #4]
 80086e4:	6854      	ldr	r4, [r2, #4]
 80086e6:	6848      	ldr	r0, [r1, #4]
 80086e8:	b08b      	sub	sp, #44	; 0x2c
 80086ea:	42ab      	cmp	r3, r5
 80086ec:	9109      	str	r1, [sp, #36]	; 0x24
 80086ee:	9604      	str	r6, [sp, #16]
 80086f0:	8849      	ldrh	r1, [r1, #2]
 80086f2:	f040 808a 	bne.w	800880a <arm_mat_mult_f32+0x132>
 80086f6:	8815      	ldrh	r5, [r2, #0]
 80086f8:	42b5      	cmp	r5, r6
 80086fa:	f040 8086 	bne.w	800880a <arm_mat_mult_f32+0x132>
 80086fe:	8852      	ldrh	r2, [r2, #2]
 8008700:	428a      	cmp	r2, r1
 8008702:	f040 8082 	bne.w	800880a <arm_mat_mult_f32+0x132>
 8008706:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800870a:	1d01      	adds	r1, r0, #4
 800870c:	0116      	lsls	r6, r2, #4
 800870e:	9108      	str	r1, [sp, #32]
 8008710:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8008714:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8008718:	9101      	str	r1, [sp, #4]
 800871a:	fb06 f108 	mul.w	r1, r6, r8
 800871e:	0095      	lsls	r5, r2, #2
 8008720:	9103      	str	r1, [sp, #12]
 8008722:	00d2      	lsls	r2, r2, #3
 8008724:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8008728:	f003 0903 	and.w	r9, r3, #3
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	f107 0b10 	add.w	fp, r7, #16
 8008732:	eb04 0a05 	add.w	sl, r4, r5
 8008736:	9107      	str	r1, [sp, #28]
 8008738:	9202      	str	r2, [sp, #8]
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	f1ab 0310 	sub.w	r3, fp, #16
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	9b07      	ldr	r3, [sp, #28]
 8008744:	f8dd e020 	ldr.w	lr, [sp, #32]
 8008748:	eb03 0c0a 	add.w	ip, r3, sl
 800874c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008814 <arm_mat_mult_f32+0x13c>
 8008750:	f1b8 0f00 	cmp.w	r8, #0
 8008754:	d053      	beq.n	80087fe <arm_mat_mult_f32+0x126>
 8008756:	9b02      	ldr	r3, [sp, #8]
 8008758:	4644      	mov	r4, r8
 800875a:	18c1      	adds	r1, r0, r3
 800875c:	4602      	mov	r2, r0
 800875e:	465b      	mov	r3, fp
 8008760:	ed92 6a00 	vldr	s12, [r2]
 8008764:	ed13 7a04 	vldr	s14, [r3, #-16]
 8008768:	ed53 4a03 	vldr	s9, [r3, #-12]
 800876c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8008770:	ed91 5a00 	vldr	s10, [r1]
 8008774:	ed53 5a01 	vldr	s11, [r3, #-4]
 8008778:	1957      	adds	r7, r2, r5
 800877a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800877e:	ed97 6a00 	vldr	s12, [r7]
 8008782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008786:	ee26 6a24 	vmul.f32	s12, s12, s9
 800878a:	194f      	adds	r7, r1, r5
 800878c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008790:	ee26 7a85 	vmul.f32	s14, s13, s10
 8008794:	edd7 7a00 	vldr	s15, [r7]
 8008798:	ee37 7a06 	vadd.f32	s14, s14, s12
 800879c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80087a0:	3c01      	subs	r4, #1
 80087a2:	4432      	add	r2, r6
 80087a4:	4431      	add	r1, r6
 80087a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087aa:	f103 0310 	add.w	r3, r3, #16
 80087ae:	d1d7      	bne.n	8008760 <arm_mat_mult_f32+0x88>
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	4418      	add	r0, r3
 80087b6:	f1b9 0f00 	cmp.w	r9, #0
 80087ba:	d00b      	beq.n	80087d4 <arm_mat_mult_f32+0xfc>
 80087bc:	464b      	mov	r3, r9
 80087be:	edd0 6a00 	vldr	s13, [r0]
 80087c2:	ecb2 7a01 	vldmia	r2!, {s14}
 80087c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80087ca:	3b01      	subs	r3, #1
 80087cc:	4428      	add	r0, r5
 80087ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087d2:	d1f4      	bne.n	80087be <arm_mat_mult_f32+0xe6>
 80087d4:	ecec 7a01 	vstmia	ip!, {s15}
 80087d8:	45d4      	cmp	ip, sl
 80087da:	4670      	mov	r0, lr
 80087dc:	f10e 0e04 	add.w	lr, lr, #4
 80087e0:	d1b4      	bne.n	800874c <arm_mat_mult_f32+0x74>
 80087e2:	9a01      	ldr	r2, [sp, #4]
 80087e4:	9b06      	ldr	r3, [sp, #24]
 80087e6:	4611      	mov	r1, r2
 80087e8:	4419      	add	r1, r3
 80087ea:	449b      	add	fp, r3
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	9101      	str	r1, [sp, #4]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	44aa      	add	sl, r5
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	d004      	beq.n	8008802 <arm_mat_mult_f32+0x12a>
 80087f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fa:	6858      	ldr	r0, [r3, #4]
 80087fc:	e79e      	b.n	800873c <arm_mat_mult_f32+0x64>
 80087fe:	9a05      	ldr	r2, [sp, #20]
 8008800:	e7d9      	b.n	80087b6 <arm_mat_mult_f32+0xde>
 8008802:	4618      	mov	r0, r3
 8008804:	b00b      	add	sp, #44	; 0x2c
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880a:	f06f 0002 	mvn.w	r0, #2
 800880e:	b00b      	add	sp, #44	; 0x2c
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	00000000 	.word	0x00000000

08008818 <arm_mat_inverse_f32>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	8843      	ldrh	r3, [r0, #2]
 800881e:	8804      	ldrh	r4, [r0, #0]
 8008820:	684e      	ldr	r6, [r1, #4]
 8008822:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8008826:	b087      	sub	sp, #28
 8008828:	429c      	cmp	r4, r3
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	9603      	str	r6, [sp, #12]
 800882e:	f040 80ea 	bne.w	8008a06 <arm_mat_inverse_f32+0x1ee>
 8008832:	880a      	ldrh	r2, [r1, #0]
 8008834:	884b      	ldrh	r3, [r1, #2]
 8008836:	4293      	cmp	r3, r2
 8008838:	f040 80e5 	bne.w	8008a06 <arm_mat_inverse_f32+0x1ee>
 800883c:	429c      	cmp	r4, r3
 800883e:	f040 80e2 	bne.w	8008a06 <arm_mat_inverse_f32+0x1ee>
 8008842:	9005      	str	r0, [sp, #20]
 8008844:	b30c      	cbz	r4, 800888a <arm_mat_inverse_f32+0x72>
 8008846:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800884a:	1e67      	subs	r7, r4, #1
 800884c:	f846 bb04 	str.w	fp, [r6], #4
 8008850:	d01b      	beq.n	800888a <arm_mat_inverse_f32+0x72>
 8008852:	f04f 0801 	mov.w	r8, #1
 8008856:	00ba      	lsls	r2, r7, #2
 8008858:	eb06 0a02 	add.w	sl, r6, r2
 800885c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8008860:	4630      	mov	r0, r6
 8008862:	2100      	movs	r1, #0
 8008864:	f000 fb02 	bl	8008e6c <memset>
 8008868:	eb0a 0605 	add.w	r6, sl, r5
 800886c:	462a      	mov	r2, r5
 800886e:	2100      	movs	r1, #0
 8008870:	4650      	mov	r0, sl
 8008872:	f1b8 0f00 	cmp.w	r8, #0
 8008876:	f000 80cb 	beq.w	8008a10 <arm_mat_inverse_f32+0x1f8>
 800887a:	f000 faf7 	bl	8008e6c <memset>
 800887e:	3f01      	subs	r7, #1
 8008880:	f108 0801 	add.w	r8, r8, #1
 8008884:	f846 bb04 	str.w	fp, [r6], #4
 8008888:	d1e5      	bne.n	8008856 <arm_mat_inverse_f32+0x3e>
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 80b5 	beq.w	80089fc <arm_mat_inverse_f32+0x1e4>
 8008892:	009d      	lsls	r5, r3, #2
 8008894:	eb09 0205 	add.w	r2, r9, r5
 8008898:	46cc      	mov	ip, r9
 800889a:	9202      	str	r2, [sp, #8]
 800889c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80088a0:	1d2a      	adds	r2, r5, #4
 80088a2:	9204      	str	r2, [sp, #16]
 80088a4:	462f      	mov	r7, r5
 80088a6:	469e      	mov	lr, r3
 80088a8:	2600      	movs	r6, #0
 80088aa:	9b02      	ldr	r3, [sp, #8]
 80088ac:	eddc 6a00 	vldr	s13, [ip]
 80088b0:	42b4      	cmp	r4, r6
 80088b2:	eba3 0b07 	sub.w	fp, r3, r7
 80088b6:	f000 80a1 	beq.w	80089fc <arm_mat_inverse_f32+0x1e4>
 80088ba:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8008a20 <arm_mat_inverse_f32+0x208>
 80088be:	4632      	mov	r2, r6
 80088c0:	4663      	mov	r3, ip
 80088c2:	e00b      	b.n	80088dc <arm_mat_inverse_f32+0xc4>
 80088c4:	eef4 7a47 	vcmp.f32	s15, s14
 80088c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088cc:	f102 0201 	add.w	r2, r2, #1
 80088d0:	bfc8      	it	gt
 80088d2:	eeb0 7a67 	vmovgt.f32	s14, s15
 80088d6:	42a2      	cmp	r2, r4
 80088d8:	442b      	add	r3, r5
 80088da:	d014      	beq.n	8008906 <arm_mat_inverse_f32+0xee>
 80088dc:	edd3 7a00 	vldr	s15, [r3]
 80088e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e8:	eeb1 6a67 	vneg.f32	s12, s15
 80088ec:	dcea      	bgt.n	80088c4 <arm_mat_inverse_f32+0xac>
 80088ee:	eeb4 6a47 	vcmp.f32	s12, s14
 80088f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f6:	f102 0201 	add.w	r2, r2, #1
 80088fa:	bfc8      	it	gt
 80088fc:	eeb0 7a46 	vmovgt.f32	s14, s12
 8008900:	42a2      	cmp	r2, r4
 8008902:	442b      	add	r3, r5
 8008904:	d1ea      	bne.n	80088dc <arm_mat_inverse_f32+0xc4>
 8008906:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890e:	d075      	beq.n	80089fc <arm_mat_inverse_f32+0x1e4>
 8008910:	eef5 6a40 	vcmp.f32	s13, #0.0
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	d070      	beq.n	80089fc <arm_mat_inverse_f32+0x1e4>
 800891a:	4672      	mov	r2, lr
 800891c:	4663      	mov	r3, ip
 800891e:	ed93 7a00 	vldr	s14, [r3]
 8008922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008926:	3a01      	subs	r2, #1
 8008928:	ece3 7a01 	vstmia	r3!, {s15}
 800892c:	d1f7      	bne.n	800891e <arm_mat_inverse_f32+0x106>
 800892e:	9901      	ldr	r1, [sp, #4]
 8008930:	464b      	mov	r3, r9
 8008932:	ed93 7a00 	vldr	s14, [r3]
 8008936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800893a:	3901      	subs	r1, #1
 800893c:	ece3 7a01 	vstmia	r3!, {s15}
 8008940:	d1f7      	bne.n	8008932 <arm_mat_inverse_f32+0x11a>
 8008942:	9803      	ldr	r0, [sp, #12]
 8008944:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8008948:	42b1      	cmp	r1, r6
 800894a:	d039      	beq.n	80089c0 <arm_mat_inverse_f32+0x1a8>
 800894c:	eddb 6a00 	vldr	s13, [fp]
 8008950:	465a      	mov	r2, fp
 8008952:	4673      	mov	r3, lr
 8008954:	46e2      	mov	sl, ip
 8008956:	ecba 7a01 	vldmia	sl!, {s14}
 800895a:	edd2 7a00 	vldr	s15, [r2]
 800895e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008962:	3b01      	subs	r3, #1
 8008964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008968:	ece2 7a01 	vstmia	r2!, {s15}
 800896c:	d1f3      	bne.n	8008956 <arm_mat_inverse_f32+0x13e>
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	44bb      	add	fp, r7
 8008972:	4602      	mov	r2, r0
 8008974:	46ca      	mov	sl, r9
 8008976:	ecba 7a01 	vldmia	sl!, {s14}
 800897a:	edd2 7a00 	vldr	s15, [r2]
 800897e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8008982:	3b01      	subs	r3, #1
 8008984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008988:	ece2 7a01 	vstmia	r2!, {s15}
 800898c:	d1f3      	bne.n	8008976 <arm_mat_inverse_f32+0x15e>
 800898e:	4428      	add	r0, r5
 8008990:	3101      	adds	r1, #1
 8008992:	428c      	cmp	r4, r1
 8008994:	44c3      	add	fp, r8
 8008996:	d1d7      	bne.n	8008948 <arm_mat_inverse_f32+0x130>
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	f1be 0e01 	subs.w	lr, lr, #1
 800899e:	f106 0601 	add.w	r6, r6, #1
 80089a2:	449c      	add	ip, r3
 80089a4:	f1a7 0704 	sub.w	r7, r7, #4
 80089a8:	44a9      	add	r9, r5
 80089aa:	f47f af7e 	bne.w	80088aa <arm_mat_inverse_f32+0x92>
 80089ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 80089b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b6:	d006      	beq.n	80089c6 <arm_mat_inverse_f32+0x1ae>
 80089b8:	2000      	movs	r0, #0
 80089ba:	b007      	add	sp, #28
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	44bb      	add	fp, r7
 80089c2:	4428      	add	r0, r5
 80089c4:	e7e4      	b.n	8008990 <arm_mat_inverse_f32+0x178>
 80089c6:	9b05      	ldr	r3, [sp, #20]
 80089c8:	9a01      	ldr	r2, [sp, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	edd3 7a00 	vldr	s15, [r3]
 80089d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089d4:	fb02 f204 	mul.w	r2, r2, r4
 80089d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089dc:	4614      	mov	r4, r2
 80089de:	bf08      	it	eq
 80089e0:	3304      	addeq	r3, #4
 80089e2:	d007      	beq.n	80089f4 <arm_mat_inverse_f32+0x1dc>
 80089e4:	e7e8      	b.n	80089b8 <arm_mat_inverse_f32+0x1a0>
 80089e6:	ecf3 7a01 	vldmia	r3!, {s15}
 80089ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f2:	d1e1      	bne.n	80089b8 <arm_mat_inverse_f32+0x1a0>
 80089f4:	f10e 0e01 	add.w	lr, lr, #1
 80089f8:	4574      	cmp	r4, lr
 80089fa:	d1f4      	bne.n	80089e6 <arm_mat_inverse_f32+0x1ce>
 80089fc:	f06f 0004 	mvn.w	r0, #4
 8008a00:	b007      	add	sp, #28
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a06:	f06f 0002 	mvn.w	r0, #2
 8008a0a:	b007      	add	sp, #28
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	4656      	mov	r6, sl
 8008a12:	3f01      	subs	r7, #1
 8008a14:	f846 bb04 	str.w	fp, [r6], #4
 8008a18:	f47f af1b 	bne.w	8008852 <arm_mat_inverse_f32+0x3a>
 8008a1c:	e735      	b.n	800888a <arm_mat_inverse_f32+0x72>
 8008a1e:	bf00      	nop
 8008a20:	00000000 	.word	0x00000000

08008a24 <arm_mat_init_f32>:
 8008a24:	8001      	strh	r1, [r0, #0]
 8008a26:	8042      	strh	r2, [r0, #2]
 8008a28:	6043      	str	r3, [r0, #4]
 8008a2a:	4770      	bx	lr

08008a2c <arm_biquad_cascade_df2T_f32>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	7807      	ldrb	r7, [r0, #0]
 8008a32:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8008a36:	6885      	ldr	r5, [r0, #8]
 8008a38:	3514      	adds	r5, #20
 8008a3a:	6846      	ldr	r6, [r0, #4]
 8008a3c:	3608      	adds	r6, #8
 8008a3e:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8008a42:	eb02 0b09 	add.w	fp, r2, r9
 8008a46:	f003 080f 	and.w	r8, r3, #15
 8008a4a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8008a4e:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8008a52:	ed15 7a04 	vldr	s14, [r5, #-16]
 8008a56:	ed55 6a03 	vldr	s13, [r5, #-12]
 8008a5a:	ed15 6a02 	vldr	s12, [r5, #-8]
 8008a5e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8008a62:	46b4      	mov	ip, r6
 8008a64:	ed56 3a02 	vldr	s7, [r6, #-8]
 8008a68:	ed16 4a01 	vldr	s8, [r6, #-4]
 8008a6c:	f1be 0f00 	cmp.w	lr, #0
 8008a70:	f000 8195 	beq.w	8008d9e <arm_biquad_cascade_df2T_f32+0x372>
 8008a74:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8008a78:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8008a7c:	4674      	mov	r4, lr
 8008a7e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8008a82:	ee27 5a83 	vmul.f32	s10, s15, s6
 8008a86:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008a8a:	ee67 4a03 	vmul.f32	s9, s14, s6
 8008a8e:	ee34 4a84 	vadd.f32	s8, s9, s8
 8008a92:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008a96:	ee34 4a84 	vadd.f32	s8, s9, s8
 8008a9a:	ee26 3a83 	vmul.f32	s6, s13, s6
 8008a9e:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8008aa2:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8008aa6:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8008aaa:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008aae:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008ab2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008ab6:	ee27 4a23 	vmul.f32	s8, s14, s7
 8008aba:	ee35 5a04 	vadd.f32	s10, s10, s8
 8008abe:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008ac2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008ac6:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8008aca:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8008ace:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8008ad2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008ad6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008ada:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008ade:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008ae2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008ae6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008aea:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008aee:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008af2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008af6:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8008afa:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8008afe:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008b02:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008b06:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008b0a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008b0e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008b12:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008b16:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008b1a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008b1e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008b22:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8008b26:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8008b2a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008b2e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008b32:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008b36:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008b3a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008b3e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008b42:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008b46:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008b4a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008b4e:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8008b52:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8008b56:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008b5a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008b5e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008b62:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008b66:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008b6a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008b6e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008b72:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008b76:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008b7a:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8008b7e:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8008b82:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008b86:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008b8a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008b8e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008b92:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008b96:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008b9a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008b9e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008ba2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008ba6:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8008baa:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8008bae:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008bb2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008bb6:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008bba:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008bbe:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008bc2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008bc6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008bca:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008bce:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008bd2:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8008bd6:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8008bda:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008bde:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008be2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008be6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008bea:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008bee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008bf2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008bf6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008bfa:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008bfe:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8008c02:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8008c06:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008c0a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008c0e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008c12:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008c16:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008c1a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008c1e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008c22:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008c26:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008c2a:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8008c2e:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8008c32:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008c36:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008c3a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008c3e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008c42:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008c46:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008c4a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008c4e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008c52:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008c56:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8008c5a:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8008c5e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008c62:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008c66:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008c6a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008c6e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008c72:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008c76:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008c7a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008c7e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008c82:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8008c86:	ed10 4a04 	vldr	s8, [r0, #-16]
 8008c8a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008c8e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008c92:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008c96:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008c9a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008c9e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008ca2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008ca6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008caa:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008cae:	ed03 5a04 	vstr	s10, [r3, #-16]
 8008cb2:	ed10 4a03 	vldr	s8, [r0, #-12]
 8008cb6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008cba:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008cbe:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008cc2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008cc6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008cca:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008cce:	ee26 3a24 	vmul.f32	s6, s12, s9
 8008cd2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8008cd6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008cda:	ed43 4a03 	vstr	s9, [r3, #-12]
 8008cde:	ed10 4a02 	vldr	s8, [r0, #-8]
 8008ce2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8008ce6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008cea:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8008cee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008cf2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008cf6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008cfa:	ee26 3a05 	vmul.f32	s6, s12, s10
 8008cfe:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008d02:	ee66 3a84 	vmul.f32	s7, s13, s8
 8008d06:	ed03 5a02 	vstr	s10, [r3, #-8]
 8008d0a:	ed10 4a01 	vldr	s8, [r0, #-4]
 8008d0e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8008d12:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008d16:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008d1a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008d1e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8008d22:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008d26:	ee66 3a24 	vmul.f32	s7, s12, s9
 8008d2a:	ee73 3a85 	vadd.f32	s7, s7, s10
 8008d2e:	ee26 5a84 	vmul.f32	s10, s13, s8
 8008d32:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8008d36:	ee34 4a05 	vadd.f32	s8, s8, s10
 8008d3a:	ed43 4a01 	vstr	s9, [r3, #-4]
 8008d3e:	3040      	adds	r0, #64	; 0x40
 8008d40:	3340      	adds	r3, #64	; 0x40
 8008d42:	3c01      	subs	r4, #1
 8008d44:	f47f ae9b 	bne.w	8008a7e <arm_biquad_cascade_df2T_f32+0x52>
 8008d48:	4449      	add	r1, r9
 8008d4a:	465b      	mov	r3, fp
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	d019      	beq.n	8008d86 <arm_biquad_cascade_df2T_f32+0x35a>
 8008d52:	eb01 000a 	add.w	r0, r1, sl
 8008d56:	ecf1 2a01 	vldmia	r1!, {s5}
 8008d5a:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8008d5e:	ee33 3a23 	vadd.f32	s6, s6, s7
 8008d62:	ee67 3a22 	vmul.f32	s7, s14, s5
 8008d66:	ee33 4a84 	vadd.f32	s8, s7, s8
 8008d6a:	ee26 5a03 	vmul.f32	s10, s12, s6
 8008d6e:	ee75 3a04 	vadd.f32	s7, s10, s8
 8008d72:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8008d76:	ee25 4a83 	vmul.f32	s8, s11, s6
 8008d7a:	ee34 4a22 	vadd.f32	s8, s8, s5
 8008d7e:	eca3 3a01 	vstmia	r3!, {s6}
 8008d82:	4281      	cmp	r1, r0
 8008d84:	d1e7      	bne.n	8008d56 <arm_biquad_cascade_df2T_f32+0x32a>
 8008d86:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8008d8a:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8008d8e:	3514      	adds	r5, #20
 8008d90:	3608      	adds	r6, #8
 8008d92:	4611      	mov	r1, r2
 8008d94:	3f01      	subs	r7, #1
 8008d96:	f47f ae5a 	bne.w	8008a4e <arm_biquad_cascade_df2T_f32+0x22>
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	4613      	mov	r3, r2
 8008da0:	e7d4      	b.n	8008d4c <arm_biquad_cascade_df2T_f32+0x320>
	...

08008da4 <arm_biquad_cascade_df2T_init_f32>:
 8008da4:	b510      	push	{r4, lr}
 8008da6:	6082      	str	r2, [r0, #8]
 8008da8:	7001      	strb	r1, [r0, #0]
 8008daa:	4604      	mov	r4, r0
 8008dac:	00ca      	lsls	r2, r1, #3
 8008dae:	4618      	mov	r0, r3
 8008db0:	2100      	movs	r1, #0
 8008db2:	f000 f85b 	bl	8008e6c <memset>
 8008db6:	6060      	str	r0, [r4, #4]
 8008db8:	bd10      	pop	{r4, pc}
 8008dba:	bf00      	nop

08008dbc <arm_dot_prod_f32>:
 8008dbc:	b4f0      	push	{r4, r5, r6, r7}
 8008dbe:	0897      	lsrs	r7, r2, #2
 8008dc0:	eddf 5a29 	vldr	s11, [pc, #164]	; 8008e68 <arm_dot_prod_f32+0xac>
 8008dc4:	d02d      	beq.n	8008e22 <arm_dot_prod_f32+0x66>
 8008dc6:	f100 0510 	add.w	r5, r0, #16
 8008dca:	f101 0410 	add.w	r4, r1, #16
 8008dce:	463e      	mov	r6, r7
 8008dd0:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008dd4:	ed54 3a04 	vldr	s7, [r4, #-16]
 8008dd8:	ed15 7a03 	vldr	s14, [r5, #-12]
 8008ddc:	ed14 4a03 	vldr	s8, [r4, #-12]
 8008de0:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008de4:	ed54 4a02 	vldr	s9, [r4, #-8]
 8008de8:	ed15 6a01 	vldr	s12, [r5, #-4]
 8008dec:	ed14 5a01 	vldr	s10, [r4, #-4]
 8008df0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008df4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008df8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008dfc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008e00:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008e04:	ee66 6a05 	vmul.f32	s13, s12, s10
 8008e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e0c:	3e01      	subs	r6, #1
 8008e0e:	f105 0510 	add.w	r5, r5, #16
 8008e12:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8008e16:	f104 0410 	add.w	r4, r4, #16
 8008e1a:	d1d9      	bne.n	8008dd0 <arm_dot_prod_f32+0x14>
 8008e1c:	013f      	lsls	r7, r7, #4
 8008e1e:	4438      	add	r0, r7
 8008e20:	4439      	add	r1, r7
 8008e22:	f012 0203 	ands.w	r2, r2, #3
 8008e26:	d01b      	beq.n	8008e60 <arm_dot_prod_f32+0xa4>
 8008e28:	edd1 7a00 	vldr	s15, [r1]
 8008e2c:	ed90 7a00 	vldr	s14, [r0]
 8008e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e34:	3a01      	subs	r2, #1
 8008e36:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008e3a:	d011      	beq.n	8008e60 <arm_dot_prod_f32+0xa4>
 8008e3c:	edd1 7a01 	vldr	s15, [r1, #4]
 8008e40:	ed90 7a01 	vldr	s14, [r0, #4]
 8008e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e48:	2a01      	cmp	r2, #1
 8008e4a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008e4e:	d007      	beq.n	8008e60 <arm_dot_prod_f32+0xa4>
 8008e50:	edd0 7a02 	vldr	s15, [r0, #8]
 8008e54:	ed91 7a02 	vldr	s14, [r1, #8]
 8008e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e5c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008e60:	edc3 5a00 	vstr	s11, [r3]
 8008e64:	bcf0      	pop	{r4, r5, r6, r7}
 8008e66:	4770      	bx	lr
 8008e68:	00000000 	.word	0x00000000

08008e6c <memset>:
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d100      	bne.n	8008e76 <memset+0xa>
 8008e74:	4770      	bx	lr
 8008e76:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7a:	e7f9      	b.n	8008e70 <memset+0x4>

08008e7c <__errno>:
 8008e7c:	4b01      	ldr	r3, [pc, #4]	; (8008e84 <__errno+0x8>)
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	200078c0 	.word	0x200078c0

08008e88 <__libc_init_array>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	4d0d      	ldr	r5, [pc, #52]	; (8008ec0 <__libc_init_array+0x38>)
 8008e8c:	4c0d      	ldr	r4, [pc, #52]	; (8008ec4 <__libc_init_array+0x3c>)
 8008e8e:	1b64      	subs	r4, r4, r5
 8008e90:	10a4      	asrs	r4, r4, #2
 8008e92:	2600      	movs	r6, #0
 8008e94:	42a6      	cmp	r6, r4
 8008e96:	d109      	bne.n	8008eac <__libc_init_array+0x24>
 8008e98:	4d0b      	ldr	r5, [pc, #44]	; (8008ec8 <__libc_init_array+0x40>)
 8008e9a:	4c0c      	ldr	r4, [pc, #48]	; (8008ecc <__libc_init_array+0x44>)
 8008e9c:	f000 f91e 	bl	80090dc <_init>
 8008ea0:	1b64      	subs	r4, r4, r5
 8008ea2:	10a4      	asrs	r4, r4, #2
 8008ea4:	2600      	movs	r6, #0
 8008ea6:	42a6      	cmp	r6, r4
 8008ea8:	d105      	bne.n	8008eb6 <__libc_init_array+0x2e>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb0:	4798      	blx	r3
 8008eb2:	3601      	adds	r6, #1
 8008eb4:	e7ee      	b.n	8008e94 <__libc_init_array+0xc>
 8008eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eba:	4798      	blx	r3
 8008ebc:	3601      	adds	r6, #1
 8008ebe:	e7f2      	b.n	8008ea6 <__libc_init_array+0x1e>
 8008ec0:	08009104 	.word	0x08009104
 8008ec4:	08009104 	.word	0x08009104
 8008ec8:	08009104 	.word	0x08009104
 8008ecc:	08009108 	.word	0x08009108

08008ed0 <sqrt>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	ed2d 8b02 	vpush	{d8}
 8008ed6:	ec55 4b10 	vmov	r4, r5, d0
 8008eda:	f000 f825 	bl	8008f28 <__ieee754_sqrt>
 8008ede:	4622      	mov	r2, r4
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8008eea:	eef0 8a60 	vmov.f32	s17, s1
 8008eee:	f7f7 fde9 	bl	8000ac4 <__aeabi_dcmpun>
 8008ef2:	b990      	cbnz	r0, 8008f1a <sqrt+0x4a>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4620      	mov	r0, r4
 8008efa:	4629      	mov	r1, r5
 8008efc:	f7f7 fdba 	bl	8000a74 <__aeabi_dcmplt>
 8008f00:	b158      	cbz	r0, 8008f1a <sqrt+0x4a>
 8008f02:	f7ff ffbb 	bl	8008e7c <__errno>
 8008f06:	2321      	movs	r3, #33	; 0x21
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4619      	mov	r1, r3
 8008f12:	f7f7 fc67 	bl	80007e4 <__aeabi_ddiv>
 8008f16:	ec41 0b18 	vmov	d8, r0, r1
 8008f1a:	eeb0 0a48 	vmov.f32	s0, s16
 8008f1e:	eef0 0a68 	vmov.f32	s1, s17
 8008f22:	ecbd 8b02 	vpop	{d8}
 8008f26:	bd38      	pop	{r3, r4, r5, pc}

08008f28 <__ieee754_sqrt>:
 8008f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	ec55 4b10 	vmov	r4, r5, d0
 8008f30:	4e67      	ldr	r6, [pc, #412]	; (80090d0 <__ieee754_sqrt+0x1a8>)
 8008f32:	43ae      	bics	r6, r5
 8008f34:	ee10 0a10 	vmov	r0, s0
 8008f38:	ee10 2a10 	vmov	r2, s0
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	462b      	mov	r3, r5
 8008f40:	d10d      	bne.n	8008f5e <__ieee754_sqrt+0x36>
 8008f42:	f7f7 fb25 	bl	8000590 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 f969 	bl	8000224 <__adddf3>
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	ec45 4b10 	vmov	d0, r4, r5
 8008f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	dc0b      	bgt.n	8008f7a <__ieee754_sqrt+0x52>
 8008f62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f66:	4326      	orrs	r6, r4
 8008f68:	d0f5      	beq.n	8008f56 <__ieee754_sqrt+0x2e>
 8008f6a:	b135      	cbz	r5, 8008f7a <__ieee754_sqrt+0x52>
 8008f6c:	f7f7 f958 	bl	8000220 <__aeabi_dsub>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	f7f7 fc36 	bl	80007e4 <__aeabi_ddiv>
 8008f78:	e7eb      	b.n	8008f52 <__ieee754_sqrt+0x2a>
 8008f7a:	1509      	asrs	r1, r1, #20
 8008f7c:	f000 808d 	beq.w	800909a <__ieee754_sqrt+0x172>
 8008f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f84:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f8c:	07c9      	lsls	r1, r1, #31
 8008f8e:	bf5c      	itt	pl
 8008f90:	005b      	lslpl	r3, r3, #1
 8008f92:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008f96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f9a:	bf58      	it	pl
 8008f9c:	0052      	lslpl	r2, r2, #1
 8008f9e:	2500      	movs	r5, #0
 8008fa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008fa4:	1076      	asrs	r6, r6, #1
 8008fa6:	0052      	lsls	r2, r2, #1
 8008fa8:	f04f 0e16 	mov.w	lr, #22
 8008fac:	46ac      	mov	ip, r5
 8008fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fb2:	eb0c 0001 	add.w	r0, ip, r1
 8008fb6:	4298      	cmp	r0, r3
 8008fb8:	bfde      	ittt	le
 8008fba:	1a1b      	suble	r3, r3, r0
 8008fbc:	eb00 0c01 	addle.w	ip, r0, r1
 8008fc0:	186d      	addle	r5, r5, r1
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	f1be 0e01 	subs.w	lr, lr, #1
 8008fc8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008fcc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008fd0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008fd4:	d1ed      	bne.n	8008fb2 <__ieee754_sqrt+0x8a>
 8008fd6:	4674      	mov	r4, lr
 8008fd8:	2720      	movs	r7, #32
 8008fda:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008fde:	4563      	cmp	r3, ip
 8008fe0:	eb01 000e 	add.w	r0, r1, lr
 8008fe4:	dc02      	bgt.n	8008fec <__ieee754_sqrt+0xc4>
 8008fe6:	d113      	bne.n	8009010 <__ieee754_sqrt+0xe8>
 8008fe8:	4290      	cmp	r0, r2
 8008fea:	d811      	bhi.n	8009010 <__ieee754_sqrt+0xe8>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	eb00 0e01 	add.w	lr, r0, r1
 8008ff2:	da57      	bge.n	80090a4 <__ieee754_sqrt+0x17c>
 8008ff4:	f1be 0f00 	cmp.w	lr, #0
 8008ff8:	db54      	blt.n	80090a4 <__ieee754_sqrt+0x17c>
 8008ffa:	f10c 0801 	add.w	r8, ip, #1
 8008ffe:	eba3 030c 	sub.w	r3, r3, ip
 8009002:	4290      	cmp	r0, r2
 8009004:	bf88      	it	hi
 8009006:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800900a:	1a12      	subs	r2, r2, r0
 800900c:	440c      	add	r4, r1
 800900e:	46c4      	mov	ip, r8
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	3f01      	subs	r7, #1
 8009014:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009018:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800901c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009020:	d1dd      	bne.n	8008fde <__ieee754_sqrt+0xb6>
 8009022:	4313      	orrs	r3, r2
 8009024:	d01b      	beq.n	800905e <__ieee754_sqrt+0x136>
 8009026:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80090d4 <__ieee754_sqrt+0x1ac>
 800902a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80090d8 <__ieee754_sqrt+0x1b0>
 800902e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009032:	e9db 2300 	ldrd	r2, r3, [fp]
 8009036:	f7f7 f8f3 	bl	8000220 <__aeabi_dsub>
 800903a:	e9da 8900 	ldrd	r8, r9, [sl]
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4640      	mov	r0, r8
 8009044:	4649      	mov	r1, r9
 8009046:	f7f7 fd1f 	bl	8000a88 <__aeabi_dcmple>
 800904a:	b140      	cbz	r0, 800905e <__ieee754_sqrt+0x136>
 800904c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009050:	e9da 0100 	ldrd	r0, r1, [sl]
 8009054:	e9db 2300 	ldrd	r2, r3, [fp]
 8009058:	d126      	bne.n	80090a8 <__ieee754_sqrt+0x180>
 800905a:	3501      	adds	r5, #1
 800905c:	463c      	mov	r4, r7
 800905e:	106a      	asrs	r2, r5, #1
 8009060:	0863      	lsrs	r3, r4, #1
 8009062:	07e9      	lsls	r1, r5, #31
 8009064:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009068:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800906c:	bf48      	it	mi
 800906e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009072:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009076:	461c      	mov	r4, r3
 8009078:	e76d      	b.n	8008f56 <__ieee754_sqrt+0x2e>
 800907a:	0ad3      	lsrs	r3, r2, #11
 800907c:	3815      	subs	r0, #21
 800907e:	0552      	lsls	r2, r2, #21
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0fa      	beq.n	800907a <__ieee754_sqrt+0x152>
 8009084:	02dc      	lsls	r4, r3, #11
 8009086:	d50a      	bpl.n	800909e <__ieee754_sqrt+0x176>
 8009088:	f1c1 0420 	rsb	r4, r1, #32
 800908c:	fa22 f404 	lsr.w	r4, r2, r4
 8009090:	1e4d      	subs	r5, r1, #1
 8009092:	408a      	lsls	r2, r1
 8009094:	4323      	orrs	r3, r4
 8009096:	1b41      	subs	r1, r0, r5
 8009098:	e772      	b.n	8008f80 <__ieee754_sqrt+0x58>
 800909a:	4608      	mov	r0, r1
 800909c:	e7f0      	b.n	8009080 <__ieee754_sqrt+0x158>
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	3101      	adds	r1, #1
 80090a2:	e7ef      	b.n	8009084 <__ieee754_sqrt+0x15c>
 80090a4:	46e0      	mov	r8, ip
 80090a6:	e7aa      	b.n	8008ffe <__ieee754_sqrt+0xd6>
 80090a8:	f7f7 f8bc 	bl	8000224 <__adddf3>
 80090ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4640      	mov	r0, r8
 80090b6:	4649      	mov	r1, r9
 80090b8:	f7f7 fcdc 	bl	8000a74 <__aeabi_dcmplt>
 80090bc:	b120      	cbz	r0, 80090c8 <__ieee754_sqrt+0x1a0>
 80090be:	1ca0      	adds	r0, r4, #2
 80090c0:	bf08      	it	eq
 80090c2:	3501      	addeq	r5, #1
 80090c4:	3402      	adds	r4, #2
 80090c6:	e7ca      	b.n	800905e <__ieee754_sqrt+0x136>
 80090c8:	3401      	adds	r4, #1
 80090ca:	f024 0401 	bic.w	r4, r4, #1
 80090ce:	e7c6      	b.n	800905e <__ieee754_sqrt+0x136>
 80090d0:	7ff00000 	.word	0x7ff00000
 80090d4:	200078c8 	.word	0x200078c8
 80090d8:	200078d0 	.word	0x200078d0

080090dc <_init>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr

080090e8 <_fini>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr
