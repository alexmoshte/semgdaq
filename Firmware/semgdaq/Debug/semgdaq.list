
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000809c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008284  08008284  000278d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008284  08008284  000278d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008284  08008284  000278d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078d8  20000000  0800828c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063dc  200078d8  0800fb64  000278d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dcb4  0800fb64  0002dcb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000278d8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00027908  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001727d  00000000  00000000  000279c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034b4  00000000  00000000  0003ec3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  000420f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108e  00000000  00000000  000436c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003627  00000000  00000000  0004474e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5d3  00000000  00000000  00047d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e26ff  00000000  00000000  00062348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eec  00000000  00000000  00144a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0014a934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d34  00000000  00000000  0014a9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0014b6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200078d8 	.word	0x200078d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800825c 	.word	0x0800825c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200078dc 	.word	0x200078dc
 8000214:	0800825c 	.word	0x0800825c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e00a      	b.n	8000bb4 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	2b07      	cmp	r3, #7
 8000bb8:	d9f1      	bls.n	8000b9e <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	e00b      	b.n	8000bde <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3308      	adds	r3, #8
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b9f      	cmp	r3, #159	; 0x9f
 8000be2:	d9f0      	bls.n	8000bc6 <MA_ADC1_IN1_Init+0x36>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e05a      	b.n	8000cb8 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4932      	ldr	r1, [pc, #200]	; (8000cd0 <MA_ADC1_IN1_Update+0xdc>)
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	3212      	adds	r2, #18
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	440a      	add	r2, r1
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	3304      	adds	r3, #4
 8000c1a:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d102      	bne.n	8000c34 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3308      	adds	r3, #8
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3304      	adds	r3, #4
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e02c      	b.n	8000cac <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	e001      	b.n	8000c64 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 8000c60:	2307      	movs	r3, #7
 8000c62:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3308      	adds	r3, #8
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3304      	adds	r3, #4
 8000c70:	ed93 7a00 	vldr	s14, [r3]
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <MA_ADC1_IN1_Update+0xe0>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	edd3 6a00 	vldr	s13, [r3]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	3304      	adds	r3, #4
 8000c8a:	edd3 7a00 	vldr	s15, [r3]
 8000c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b07      	cmp	r3, #7
 8000cb0:	d9cf      	bls.n	8000c52 <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d99f      	bls.n	8000c02 <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 8000cc2:	bf00      	nop
 8000cc4:	bf00      	nop
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20000048 	.word	0x20000048
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	e00a      	b.n	8000cfc <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	3304      	adds	r3, #4
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9f1      	bls.n	8000ce6 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	e00b      	b.n	8000d26 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	3308      	adds	r3, #8
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	3304      	adds	r3, #4
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b9f      	cmp	r3, #159	; 0x9f
 8000d2a:	d9f0      	bls.n	8000d0e <MA_ADC1_IN2_Init+0x36>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e05a      	b.n	8000e00 <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4932      	ldr	r1, [pc, #200]	; (8000e18 <MA_ADC1_IN2_Update+0xdc>)
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	3212      	adds	r2, #18
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	440a      	add	r2, r1
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	3304      	adds	r3, #4
 8000d62:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d102      	bne.n	8000d7c <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3308      	adds	r3, #8
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	3304      	adds	r3, #4
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e02c      	b.n	8000df4 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e001      	b.n	8000dac <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8000da8:	2307      	movs	r3, #7
 8000daa:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3308      	adds	r3, #8
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	3304      	adds	r3, #4
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <MA_ADC1_IN2_Update+0xe0>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	edd3 6a00 	vldr	s13, [r3]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	edd3 7a00 	vldr	s15, [r3]
 8000dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3308      	adds	r3, #8
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	3304      	adds	r3, #4
 8000dea:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	d9cf      	bls.n	8000d9a <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d99f      	bls.n	8000d4a <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	20001454 	.word	0x20001454
 8000e1c:	20000000 	.word	0x20000000

08000e20 <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e00a      	b.n	8000e44 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	3304      	adds	r3, #4
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d9f1      	bls.n	8000e2e <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	e00b      	b.n	8000e6e <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	3304      	adds	r3, #4
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b9f      	cmp	r3, #159	; 0x9f
 8000e72:	d9f0      	bls.n	8000e56 <MA_ADC2_IN3_Init+0x36>
	}
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e05a      	b.n	8000f48 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4932      	ldr	r1, [pc, #200]	; (8000f60 <MA_ADC2_IN3_Update+0xdc>)
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	3212      	adds	r2, #18
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	440a      	add	r2, r1
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d102      	bne.n	8000ec4 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3308      	adds	r3, #8
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	3304      	adds	r3, #4
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e02c      	b.n	8000f3c <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	e001      	b.n	8000ef4 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3308      	adds	r3, #8
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	3304      	adds	r3, #4
 8000f00:	ed93 7a00 	vldr	s14, [r3]
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <MA_ADC2_IN3_Update+0xe0>)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	edd3 6a00 	vldr	s13, [r3]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	3304      	adds	r3, #4
 8000f1a:	edd3 7a00 	vldr	s15, [r3]
 8000f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	3304      	adds	r3, #4
 8000f32:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b07      	cmp	r3, #7
 8000f40:	d9cf      	bls.n	8000ee2 <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d99f      	bls.n	8000e92 <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	20002860 	.word	0x20002860
 8000f64:	20000000 	.word	0x20000000

08000f68 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e00a      	b.n	8000f8c <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d9f1      	bls.n	8000f76 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	e00b      	b.n	8000fb6 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3304      	adds	r3, #4
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b9f      	cmp	r3, #159	; 0x9f
 8000fba:	d9f0      	bls.n	8000f9e <MA_ADC2_IN4_Init+0x36>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e05a      	b.n	8001090 <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4932      	ldr	r1, [pc, #200]	; (80010a8 <MA_ADC2_IN4_Update+0xdc>)
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	3212      	adds	r2, #18
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	440a      	add	r2, r1
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b08      	cmp	r3, #8
 8001004:	d102      	bne.n	800100c <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3308      	adds	r3, #8
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	3304      	adds	r3, #4
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e02c      	b.n	8001084 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	3b01      	subs	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	e001      	b.n	800103c <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001038:	2307      	movs	r3, #7
 800103a:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3308      	adds	r3, #8
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	3304      	adds	r3, #4
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MA_ADC2_IN4_Update+0xe0>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	edd3 6a00 	vldr	s13, [r3]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	3304      	adds	r3, #4
 8001062:	edd3 7a00 	vldr	s15, [r3]
 8001066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3308      	adds	r3, #8
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3304      	adds	r3, #4
 800107a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b07      	cmp	r3, #7
 8001088:	d9cf      	bls.n	800102a <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001096:	4293      	cmp	r3, r2
 8001098:	d99f      	bls.n	8000fda <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20003c6c 	.word	0x20003c6c
 80010ac:	20000000 	.word	0x20000000

080010b0 <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e00a      	b.n	80010d4 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	3304      	adds	r3, #4
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d9f1      	bls.n	80010be <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	e00b      	b.n	80010fe <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3308      	adds	r3, #8
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	3304      	adds	r3, #4
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2b9f      	cmp	r3, #159	; 0x9f
 8001102:	d9f0      	bls.n	80010e6 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e05a      	b.n	80011d8 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4932      	ldr	r1, [pc, #200]	; (80011f0 <MA_ADC3_IN1_Update+0xdc>)
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	3212      	adds	r2, #18
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	440a      	add	r2, r1
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	3304      	adds	r3, #4
 800113a:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d102      	bne.n	8001154 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3308      	adds	r3, #8
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3304      	adds	r3, #4
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e02c      	b.n	80011cc <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	3b01      	subs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	e001      	b.n	8001184 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001180:	2307      	movs	r3, #7
 8001182:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3308      	adds	r3, #8
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	ed93 7a00 	vldr	s14, [r3]
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <MA_ADC3_IN1_Update+0xe0>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3304      	adds	r3, #4
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3308      	adds	r3, #8
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b07      	cmp	r3, #7
 80011d0:	d9cf      	bls.n	8001172 <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80011de:	4293      	cmp	r3, r2
 80011e0:	d99f      	bls.n	8001122 <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20005078 	.word	0x20005078
 80011f4:	20000000 	.word	0x20000000

080011f8 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e00a      	b.n	800121c <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3304      	adds	r3, #4
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	3301      	adds	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b07      	cmp	r3, #7
 8001220:	d9f1      	bls.n	8001206 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	e00b      	b.n	8001246 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3308      	adds	r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3304      	adds	r3, #4
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3301      	adds	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b9f      	cmp	r3, #159	; 0x9f
 800124a:	d9f0      	bls.n	800122e <MA_ADC3_IN2_Init+0x36>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e05a      	b.n	8001320 <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4932      	ldr	r1, [pc, #200]	; (8001338 <MA_ADC3_IN2_Update+0xdc>)
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	3212      	adds	r2, #18
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	440a      	add	r2, r1
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	3304      	adds	r3, #4
 8001282:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d102      	bne.n	800129c <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3308      	adds	r3, #8
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3304      	adds	r3, #4
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e02c      	b.n	8001314 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	e001      	b.n	80012cc <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 80012c8:	2307      	movs	r3, #7
 80012ca:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3308      	adds	r3, #8
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3304      	adds	r3, #4
 80012d8:	ed93 7a00 	vldr	s14, [r3]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <MA_ADC3_IN2_Update+0xe0>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	edd3 6a00 	vldr	s13, [r3]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3304      	adds	r3, #4
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3308      	adds	r3, #8
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3304      	adds	r3, #4
 800130a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b07      	cmp	r3, #7
 8001318:	d9cf      	bls.n	80012ba <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001326:	4293      	cmp	r3, r2
 8001328:	d99f      	bls.n	800126a <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20006484 	.word	0x20006484
 800133c:	20000000 	.word	0x20000000

08001340 <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <init_ADC1_IN1_struct+0x1c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800134c:	3314      	adds	r3, #20
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <init_ADC1_IN1_struct+0x20>)
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20008bd4 	.word	0x20008bd4
 8001360:	20000048 	.word	0x20000048

08001364 <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 800136a:	7819      	ldrb	r1, [r3, #0]
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <init_ADC1_IN1_FO_biquad_filter+0x20>)
 8001376:	f006 fe2d 	bl	8007fd4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000048 	.word	0x20000048
 8001384:	20001420 	.word	0x20001420

08001388 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 800138e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001396:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <update_ADC1_IN1_FO_biquad_filter+0x28>)
 800139c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 80013a6:	f006 fc59 	bl	8007c5c <arm_biquad_cascade_df2T_f32>
   }
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000048 	.word	0x20000048
 80013b4:	20001420 	.word	0x20001420

080013b8 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <init_ADC1_IN2_struct+0x1c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80013c4:	3320      	adds	r3, #32
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <init_ADC1_IN2_struct+0x20>)
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20008bd4 	.word	0x20008bd4
 80013d8:	20001454 	.word	0x20001454

080013dc <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80013e2:	7819      	ldrb	r1, [r3, #0]
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80013e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <init_ADC1_IN2_FO_biquad_filter+0x20>)
 80013ee:	f006 fdf1 	bl	8007fd4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20001454 	.word	0x20001454
 80013fc:	2000282c 	.word	0x2000282c

08001400 <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001406:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 800141e:	f006 fc1d 	bl	8007c5c <arm_biquad_cascade_df2T_f32>
   }
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20001454 	.word	0x20001454
 800142c:	2000282c 	.word	0x2000282c

08001430 <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <init_ADC2_IN3_struct+0x1c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800143c:	3314      	adds	r3, #20
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <init_ADC2_IN3_struct+0x20>)
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	20008bd8 	.word	0x20008bd8
 8001450:	20002860 	.word	0x20002860

08001454 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8001466:	f006 fdb5 	bl	8007fd4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20002860 	.word	0x20002860
 8001474:	20003c38 	.word	0x20003c38

08001478 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 800147e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <update_ADC2_IN3_FO_biquad_filter+0x28>)
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8001496:	f006 fbe1 	bl	8007c5c <arm_biquad_cascade_df2T_f32>
   }
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20002860 	.word	0x20002860
 80014a4:	20003c38 	.word	0x20003c38

080014a8 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <init_ADC2_IN4_struct+0x1c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80014b4:	3320      	adds	r3, #32
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <init_ADC2_IN4_struct+0x20>)
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	20008bd8 	.word	0x20008bd8
 80014c8:	20003c6c 	.word	0x20003c6c

080014cc <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80014d2:	7819      	ldrb	r1, [r3, #0]
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80014d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <init_ADC2_IN4_FO_biquad_filter+0x20>)
 80014de:	f006 fd79 	bl	8007fd4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20003c6c 	.word	0x20003c6c
 80014ec:	20005044 	.word	0x20005044

080014f0 <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80014f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 80014fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fe:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001508:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 800150e:	f006 fba5 	bl	8007c5c <arm_biquad_cascade_df2T_f32>
   }
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20003c6c 	.word	0x20003c6c
 800151c:	20005044 	.word	0x20005044

08001520 <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <init_ADC3_IN1_struct+0x1c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800152c:	3314      	adds	r3, #20
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <init_ADC3_IN1_struct+0x20>)
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20008bdc 	.word	0x20008bdc
 8001540:	20005078 	.word	0x20005078

08001544 <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800154a:	7819      	ldrb	r1, [r3, #0]
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8001556:	f006 fd3d 	bl	8007fd4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20005078 	.word	0x20005078
 8001564:	20006450 	.word	0x20006450

08001568 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800156e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <update_ADC3_IN1_FO_biquad_filter+0x28>)
 800157c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8001586:	f006 fb69 	bl	8007c5c <arm_biquad_cascade_df2T_f32>
   }
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20005078 	.word	0x20005078
 8001594:	20006450 	.word	0x20006450

08001598 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <init_ADC3_IN2_struct+0x1c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80015a4:	3320      	adds	r3, #32
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <init_ADC3_IN2_struct+0x20>)
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
  }
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20008bdc 	.word	0x20008bdc
 80015b8:	20006484 	.word	0x20006484

080015bc <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80015c2:	7819      	ldrb	r1, [r3, #0]
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80015c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <init_ADC3_IN2_FO_biquad_filter+0x20>)
 80015ce:	f006 fd01 	bl	8007fd4 <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20006484 	.word	0x20006484
 80015dc:	2000785c 	.word	0x2000785c

080015e0 <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80015e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	f8d3 23d0 	ldr.w	r2, [r3, #976]	; 0x3d0
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 80015fe:	f006 fb2d 	bl	8007c5c <arm_biquad_cascade_df2T_f32>
   }
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20006484 	.word	0x20006484
 800160c:	2000785c 	.word	0x2000785c

08001610 <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	e010      	b.n	8001646 <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3308      	adds	r3, #8
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3304      	adds	r3, #4
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ed97 7a03 	vldr	s14, [r7, #12]
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	3301      	adds	r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b9f      	cmp	r3, #159	; 0x9f
 800164a:	d9eb      	bls.n	8001624 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 800164c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001650:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800166c <ADC1_IN1_OffsetCalc+0x5c>
 8001654:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001658:	eef0 7a66 	vmov.f32	s15, s13
}
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	43200000 	.word	0x43200000

08001670 <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	e010      	b.n	80016a6 <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3308      	adds	r3, #8
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3304      	adds	r3, #4
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ed97 7a03 	vldr	s14, [r7, #12]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b9f      	cmp	r3, #159	; 0x9f
 80016aa:	d9eb      	bls.n	8001684 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80016ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016cc <ADC1_IN2_OffsetCalc+0x5c>
 80016b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	43200000 	.word	0x43200000

080016d0 <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	e010      	b.n	8001706 <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3308      	adds	r3, #8
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	3304      	adds	r3, #4
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b9f      	cmp	r3, #159	; 0x9f
 800170a:	d9eb      	bls.n	80016e4 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 800170c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001710:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800172c <ADC2_IN3_OffsetCalc+0x5c>
 8001714:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001718:	eef0 7a66 	vmov.f32	s15, s13
}
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	43200000 	.word	0x43200000

08001730 <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	e010      	b.n	8001766 <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3308      	adds	r3, #8
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3304      	adds	r3, #4
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ed97 7a03 	vldr	s14, [r7, #12]
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	3301      	adds	r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b9f      	cmp	r3, #159	; 0x9f
 800176a:	d9eb      	bls.n	8001744 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 800176c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001770:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800178c <ADC2_IN4_OffsetCalc+0x5c>
 8001774:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001778:	eef0 7a66 	vmov.f32	s15, s13
}
 800177c:	eeb0 0a67 	vmov.f32	s0, s15
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	43200000 	.word	0x43200000

08001790 <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	e010      	b.n	80017c6 <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3308      	adds	r3, #8
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3304      	adds	r3, #4
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b9f      	cmp	r3, #159	; 0x9f
 80017ca:	d9eb      	bls.n	80017a4 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80017cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017ec <ADC3_IN1_OffsetCalc+0x5c>
 80017d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80017dc:	eeb0 0a67 	vmov.f32	s0, s15
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	43200000 	.word	0x43200000

080017f0 <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e010      	b.n	8001826 <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3308      	adds	r3, #8
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ed97 7a03 	vldr	s14, [r7, #12]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b9f      	cmp	r3, #159	; 0x9f
 800182a:	d9eb      	bls.n	8001804 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 800182c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001830:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800184c <ADC3_IN2_OffsetCalc+0x5c>
 8001834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001838:	eef0 7a66 	vmov.f32	s15, s13
}
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	43200000 	.word	0x43200000

08001850 <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	e01a      	b.n	800189e <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	3308      	adds	r3, #8
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3304      	adds	r3, #4
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	edd7 7a00 	vldr	s15, [r7]
 800187c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001880:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 8001884:	edd7 7a03 	vldr	s15, [r7, #12]
 8001888:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800188c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	3301      	adds	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b9f      	cmp	r3, #159	; 0x9f
 80018a2:	d9e1      	bls.n	8001868 <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80018a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80018a8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80018e4 <ADC1_IN1_SD_BL+0x94>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 80018b4:	6978      	ldr	r0, [r7, #20]
 80018b6:	f7fe fe13 	bl	80004e0 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	ec43 2b10 	vmov	d0, r2, r3
 80018c2:	f006 fbc5 	bl	8008050 <sqrt>
 80018c6:	ec53 2b10 	vmov	r2, r3, d0
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f90f 	bl	8000af0 <__aeabi_d2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	ee07 3a90 	vmov	s15, r3
}
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	43200000 	.word	0x43200000

080018e8 <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e01a      	b.n	8001936 <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3308      	adds	r3, #8
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	edd7 7a00 	vldr	s15, [r7]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001924:	ed97 7a05 	vldr	s14, [r7, #20]
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3301      	adds	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b9f      	cmp	r3, #159	; 0x9f
 800193a:	d9e1      	bls.n	8001900 <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 800193c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001940:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800197c <ADC1_IN2_SD_BL+0x94>
 8001944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001948:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 800194c:	6978      	ldr	r0, [r7, #20]
 800194e:	f7fe fdc7 	bl	80004e0 <__aeabi_f2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	ec43 2b10 	vmov	d0, r2, r3
 800195a:	f006 fb79 	bl	8008050 <sqrt>
 800195e:	ec53 2b10 	vmov	r2, r3, d0
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8c3 	bl	8000af0 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	ee07 3a90 	vmov	s15, r3

}
 8001970:	eeb0 0a67 	vmov.f32	s0, s15
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	43200000 	.word	0x43200000

08001980 <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e01a      	b.n	80019ce <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3308      	adds	r3, #8
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	edd7 7a00 	vldr	s15, [r7]
 80019ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b0:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 80019b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	3301      	adds	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b9f      	cmp	r3, #159	; 0x9f
 80019d2:	d9e1      	bls.n	8001998 <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80019d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a14 <ADC2_IN3_SD_BL+0x94>
 80019dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e0:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f7fe fd7b 	bl	80004e0 <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	ec43 2b10 	vmov	d0, r2, r3
 80019f2:	f006 fb2d 	bl	8008050 <sqrt>
 80019f6:	ec53 2b10 	vmov	r2, r3, d0
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f877 	bl	8000af0 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	ee07 3a90 	vmov	s15, r3

}
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	43200000 	.word	0x43200000

08001a18 <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	e01a      	b.n	8001a66 <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	3308      	adds	r3, #8
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	edd7 7a00 	vldr	s15, [r7]
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a54:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	3301      	adds	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b9f      	cmp	r3, #159	; 0x9f
 8001a6a:	d9e1      	bls.n	8001a30 <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001a6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a70:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001aac <ADC2_IN4_SD_BL+0x94>
 8001a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a78:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f7fe fd2f 	bl	80004e0 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f006 fae1 	bl	8008050 <sqrt>
 8001a8e:	ec53 2b10 	vmov	r2, r3, d0
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f82b 	bl	8000af0 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	ee07 3a90 	vmov	s15, r3

}
 8001aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	43200000 	.word	0x43200000

08001ab0 <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e01a      	b.n	8001afe <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	3308      	adds	r3, #8
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	ed93 7a00 	vldr	s14, [r3]
 8001ad8:	edd7 7a00 	vldr	s15, [r7]
 8001adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae0:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001aec:	ed97 7a05 	vldr	s14, [r7, #20]
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	3301      	adds	r3, #1
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b9f      	cmp	r3, #159	; 0x9f
 8001b02:	d9e1      	bls.n	8001ac8 <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001b04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b08:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001b44 <ADC3_IN1_SD_BL+0x94>
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 8001b14:	6978      	ldr	r0, [r7, #20]
 8001b16:	f7fe fce3 	bl	80004e0 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	ec43 2b10 	vmov	d0, r2, r3
 8001b22:	f006 fa95 	bl	8008050 <sqrt>
 8001b26:	ec53 2b10 	vmov	r2, r3, d0
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ffdf 	bl	8000af0 <__aeabi_d2f>
 8001b32:	4603      	mov	r3, r0
 8001b34:	ee07 3a90 	vmov	s15, r3

}
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	43200000 	.word	0x43200000

08001b48 <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e01a      	b.n	8001b96 <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	3308      	adds	r3, #8
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	ed93 7a00 	vldr	s14, [r3]
 8001b70:	edd7 7a00 	vldr	s15, [r7]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 8001b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	3301      	adds	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b9f      	cmp	r3, #159	; 0x9f
 8001b9a:	d9e1      	bls.n	8001b60 <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8001b9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ba0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001bdc <ADC3_IN2_SD_BL+0x94>
 8001ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba8:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f7fe fc97 	bl	80004e0 <__aeabi_f2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	ec43 2b10 	vmov	d0, r2, r3
 8001bba:	f006 fa49 	bl	8008050 <sqrt>
 8001bbe:	ec53 2b10 	vmov	r2, r3, d0
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ff93 	bl	8000af0 <__aeabi_d2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	ee07 3a90 	vmov	s15, r3

}
 8001bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	43200000 	.word	0x43200000

08001be0 <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e055      	b.n	8001ca4 <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3308      	adds	r3, #8
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3304      	adds	r3, #4
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	3301      	adds	r3, #1
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	3308      	adds	r3, #8
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	ed93 7a00 	vldr	s14, [r3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	3308      	adds	r3, #8
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 8001c4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	dd1d      	ble.n	8001c9e <ADC1_IN1_SSC+0xbe>
 8001c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c66:	eef0 7ae7 	vabs.f32	s15, s15
 8001c6a:	ed97 7a00 	vldr	s14, [r7]
 8001c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	d40a      	bmi.n	8001c8e <ADC1_IN1_SSC+0xae>
 8001c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7c:	eef0 7ae7 	vabs.f32	s15, s15
 8001c80:	ed97 7a00 	vldr	s14, [r7]
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d507      	bpl.n	8001c9e <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 8001c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c9a:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b9f      	cmp	r3, #159	; 0x9f
 8001ca8:	d9a6      	bls.n	8001bf8 <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	ee07 3a90 	vmov	s15, r3
}
 8001cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e055      	b.n	8001d82 <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	ed93 7a00 	vldr	s14, [r3]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	3308      	adds	r3, #8
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cfc:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	3301      	adds	r3, #1
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	3308      	adds	r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	3308      	adds	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d26:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 8001d2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	dd1d      	ble.n	8001d7c <ADC1_IN2_SSC+0xbe>
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	eef0 7ae7 	vabs.f32	s15, s15
 8001d48:	ed97 7a00 	vldr	s14, [r7]
 8001d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	d40a      	bmi.n	8001d6c <ADC1_IN2_SSC+0xae>
 8001d56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d5a:	eef0 7ae7 	vabs.f32	s15, s15
 8001d5e:	ed97 7a00 	vldr	s14, [r7]
 8001d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	d507      	bpl.n	8001d7c <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 8001d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d78:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b9f      	cmp	r3, #159	; 0x9f
 8001d86:	d9a6      	bls.n	8001cd6 <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	ee07 3a90 	vmov	s15, r3
}
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001dae:	2301      	movs	r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e055      	b.n	8001e60 <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	3308      	adds	r3, #8
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dda:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	3301      	adds	r3, #1
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	3308      	adds	r3, #8
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3304      	adds	r3, #4
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	3308      	adds	r3, #8
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e04:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 8001e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	dd1d      	ble.n	8001e5a <ADC2_IN3_SSC+0xbe>
 8001e1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e22:	eef0 7ae7 	vabs.f32	s15, s15
 8001e26:	ed97 7a00 	vldr	s14, [r7]
 8001e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e32:	d40a      	bmi.n	8001e4a <ADC2_IN3_SSC+0xae>
 8001e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e38:	eef0 7ae7 	vabs.f32	s15, s15
 8001e3c:	ed97 7a00 	vldr	s14, [r7]
 8001e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d507      	bpl.n	8001e5a <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 8001e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e56:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b9f      	cmp	r3, #159	; 0x9f
 8001e64:	d9a6      	bls.n	8001db4 <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	ee07 3a90 	vmov	s15, r3
}
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b087      	sub	sp, #28
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e055      	b.n	8001f3e <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	3308      	adds	r3, #8
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	ed93 7a00 	vldr	s14, [r3]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	3308      	adds	r3, #8
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3304      	adds	r3, #4
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3304      	adds	r3, #4
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 8001ee6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	dd1d      	ble.n	8001f38 <ADC2_IN4_SSC+0xbe>
 8001efc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f00:	eef0 7ae7 	vabs.f32	s15, s15
 8001f04:	ed97 7a00 	vldr	s14, [r7]
 8001f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	d40a      	bmi.n	8001f28 <ADC2_IN4_SSC+0xae>
 8001f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f16:	eef0 7ae7 	vabs.f32	s15, s15
 8001f1a:	ed97 7a00 	vldr	s14, [r7]
 8001f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	d507      	bpl.n	8001f38 <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 8001f28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f34:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b9f      	cmp	r3, #159	; 0x9f
 8001f42:	d9a6      	bls.n	8001e92 <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	ee07 3a90 	vmov	s15, r3
}
 8001f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4e:	371c      	adds	r7, #28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e055      	b.n	800201c <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	3308      	adds	r3, #8
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	3308      	adds	r3, #8
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc0:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 8001fc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	dd1d      	ble.n	8002016 <ADC3_IN1_SSC+0xbe>
 8001fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fde:	eef0 7ae7 	vabs.f32	s15, s15
 8001fe2:	ed97 7a00 	vldr	s14, [r7]
 8001fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	d40a      	bmi.n	8002006 <ADC3_IN1_SSC+0xae>
 8001ff0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ff4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff8:	ed97 7a00 	vldr	s14, [r7]
 8001ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	d507      	bpl.n	8002016 <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 8002006:	edd7 7a05 	vldr	s15, [r7, #20]
 800200a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800200e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002012:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	3301      	adds	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b9f      	cmp	r3, #159	; 0x9f
 8002020:	d9a6      	bls.n	8001f70 <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	ee07 3a90 	vmov	s15, r3
}
 8002028:	eeb0 0a67 	vmov.f32	s0, s15
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e055      	b.n	80020fa <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	3308      	adds	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	3b01      	subs	r3, #1
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	3308      	adds	r3, #8
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002074:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	3301      	adds	r3, #1
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	3308      	adds	r3, #8
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3308      	adds	r3, #8
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209e:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 80020a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80020a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	dd1d      	ble.n	80020f4 <ADC3_IN2_SSC+0xbe>
 80020b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020bc:	eef0 7ae7 	vabs.f32	s15, s15
 80020c0:	ed97 7a00 	vldr	s14, [r7]
 80020c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020cc:	d40a      	bmi.n	80020e4 <ADC3_IN2_SSC+0xae>
 80020ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80020d2:	eef0 7ae7 	vabs.f32	s15, s15
 80020d6:	ed97 7a00 	vldr	s14, [r7]
 80020da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d507      	bpl.n	80020f4 <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 80020e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020f0:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	3301      	adds	r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b9f      	cmp	r3, #159	; 0x9f
 80020fe:	d9a6      	bls.n	800204e <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	ee07 3a90 	vmov	s15, r3
}
 8002106:	eeb0 0a67 	vmov.f32	s0, s15
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002124:	e030      	b.n	8002188 <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	3308      	adds	r3, #8
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	3308      	adds	r3, #8
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	3b01      	subs	r3, #1
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	3308      	adds	r3, #8
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3304      	adds	r3, #4
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215e:	3301      	adds	r3, #1
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	3308      	adds	r3, #8
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002176:	4a47      	ldr	r2, [pc, #284]	; (8002294 <ADC1_IN1_TKEO+0x180>)
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	3301      	adds	r3, #1
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	2b9e      	cmp	r3, #158	; 0x9e
 800218c:	d9cb      	bls.n	8002126 <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <ADC1_IN1_TKEO+0x180>)
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8002196:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <ADC1_IN1_TKEO+0x180>)
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	e00e      	b.n	80021e0 <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <ADC1_IN1_TKEO+0x180>)
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80021d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	3301      	adds	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	2b9f      	cmp	r3, #159	; 0x9f
 80021e4:	d9ed      	bls.n	80021c2 <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80021e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80021ea:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002298 <ADC1_IN1_TKEO+0x184>
 80021ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f2:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e018      	b.n	800222e <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 80021fc:	4a25      	ldr	r2, [pc, #148]	; (8002294 <ADC1_IN1_TKEO+0x180>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	edd7 7a06 	vldr	s15, [r7, #24]
 800220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002210:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 8002214:	edd7 7a03 	vldr	s15, [r7, #12]
 8002218:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800221c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002224:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3301      	adds	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b9f      	cmp	r3, #159	; 0x9f
 8002232:	d9e3      	bls.n	80021fc <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002234:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002238:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002298 <ADC1_IN1_TKEO+0x184>
 800223c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002240:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8002244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002246:	f7fe f94b 	bl	80004e0 <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	ec43 2b10 	vmov	d0, r2, r3
 8002252:	f005 fefd 	bl	8008050 <sqrt>
 8002256:	ec53 2b10 	vmov	r2, r3, d0
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fc47 	bl	8000af0 <__aeabi_d2f>
 8002262:	4603      	mov	r3, r0
 8002264:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 8002266:	edd7 7a00 	vldr	s15, [r7]
 800226a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800226e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002272:	ed97 7a05 	vldr	s14, [r7, #20]
 8002276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	dd03      	ble.n	8002288 <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 8002280:	2301      	movs	r3, #1
 8002282:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	e000      	b.n	800228a <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002288:	2300      	movs	r3, #0
  }


}
 800228a:	4618      	mov	r0, r3
 800228c:	3730      	adds	r7, #48	; 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20007954 	.word	0x20007954
 8002298:	43200000 	.word	0x43200000

0800229c <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80022a8:	2301      	movs	r3, #1
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ac:	e030      	b.n	8002310 <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	3308      	adds	r3, #8
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	3308      	adds	r3, #8
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	3b01      	subs	r3, #1
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	3308      	adds	r3, #8
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	edd3 6a00 	vldr	s13, [r3]
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	3301      	adds	r3, #1
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	3308      	adds	r3, #8
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fe:	4a47      	ldr	r2, [pc, #284]	; (800241c <ADC1_IN2_TKEO+0x180>)
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	3301      	adds	r3, #1
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	2b9e      	cmp	r3, #158	; 0x9e
 8002314:	d9cb      	bls.n	80022ae <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <ADC1_IN2_TKEO+0x180>)
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <ADC1_IN2_TKEO+0x180>)
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_2 = 0.0f;
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
 8002348:	e00e      	b.n	8002368 <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 800234a:	4a34      	ldr	r2, [pc, #208]	; (800241c <ADC1_IN2_TKEO+0x180>)
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	3301      	adds	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2b9f      	cmp	r3, #159	; 0x9f
 800236c:	d9ed      	bls.n	800234a <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800236e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002372:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002420 <ADC1_IN2_TKEO+0x184>
 8002376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800237a:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e018      	b.n	80023b6 <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <ADC1_IN2_TKEO+0x180>)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	ed93 7a00 	vldr	s14, [r3]
 8002390:	edd7 7a06 	vldr	s15, [r7, #24]
 8002394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002398:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 800239c:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b9f      	cmp	r3, #159	; 0x9f
 80023ba:	d9e3      	bls.n	8002384 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80023bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80023c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002420 <ADC1_IN2_TKEO+0x184>
 80023c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 80023cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ce:	f7fe f887 	bl	80004e0 <__aeabi_f2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ec43 2b10 	vmov	d0, r2, r3
 80023da:	f005 fe39 	bl	8008050 <sqrt>
 80023de:	ec53 2b10 	vmov	r2, r3, d0
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fb83 	bl	8000af0 <__aeabi_d2f>
 80023ea:	4603      	mov	r3, r0
 80023ec:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 80023ee:	edd7 7a00 	vldr	s15, [r7]
 80023f2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80023f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80023fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	dd03      	ble.n	8002410 <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 8002408:	2301      	movs	r3, #1
 800240a:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	e000      	b.n	8002412 <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002410:	2300      	movs	r3, #0
  }


}
 8002412:	4618      	mov	r0, r3
 8002414:	3730      	adds	r7, #48	; 0x30
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20007bd4 	.word	0x20007bd4
 8002420:	43200000 	.word	0x43200000

08002424 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002430:	2301      	movs	r3, #1
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002434:	e030      	b.n	8002498 <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	3308      	adds	r3, #8
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3304      	adds	r3, #4
 8002442:	ed93 7a00 	vldr	s14, [r3]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	3308      	adds	r3, #8
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	3b01      	subs	r3, #1
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	3308      	adds	r3, #8
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3304      	adds	r3, #4
 8002468:	edd3 6a00 	vldr	s13, [r3]
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	3301      	adds	r3, #1
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	3308      	adds	r3, #8
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002486:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <ADC2_IN3_TKEO+0x180>)
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	3301      	adds	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	2b9e      	cmp	r3, #158	; 0x9e
 800249c:	d9cb      	bls.n	8002436 <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <ADC2_IN3_TKEO+0x180>)
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <ADC2_IN3_TKEO+0x180>)
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_3 = 0.0f;
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	e00e      	b.n	80024f0 <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 80024d2:	4a34      	ldr	r2, [pc, #208]	; (80025a4 <ADC2_IN3_TKEO+0x180>)
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	3301      	adds	r3, #1
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2b9f      	cmp	r3, #159	; 0x9f
 80024f4:	d9ed      	bls.n	80024d2 <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80024f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024fa:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80025a8 <ADC2_IN3_TKEO+0x184>
 80024fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002502:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e018      	b.n	800253e <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 800250c:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <ADC2_IN3_TKEO+0x180>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	ed93 7a00 	vldr	s14, [r3]
 8002518:	edd7 7a06 	vldr	s15, [r7, #24]
 800251c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002520:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8002524:	edd7 7a03 	vldr	s15, [r7, #12]
 8002528:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800252c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002534:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b9f      	cmp	r3, #159	; 0x9f
 8002542:	d9e3      	bls.n	800250c <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002544:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002548:	eddf 6a17 	vldr	s13, [pc, #92]	; 80025a8 <ADC2_IN3_TKEO+0x184>
 800254c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002550:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8002554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002556:	f7fd ffc3 	bl	80004e0 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	ec43 2b10 	vmov	d0, r2, r3
 8002562:	f005 fd75 	bl	8008050 <sqrt>
 8002566:	ec53 2b10 	vmov	r2, r3, d0
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fabf 	bl	8000af0 <__aeabi_d2f>
 8002572:	4603      	mov	r3, r0
 8002574:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8002576:	edd7 7a00 	vldr	s15, [r7]
 800257a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800257e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002582:	ed97 7a05 	vldr	s14, [r7, #20]
 8002586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258e:	dd03      	ble.n	8002598 <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 8002590:	2301      	movs	r3, #1
 8002592:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	e000      	b.n	800259a <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002598:	2300      	movs	r3, #0
  }


}
 800259a:	4618      	mov	r0, r3
 800259c:	3730      	adds	r7, #48	; 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20007e54 	.word	0x20007e54
 80025a8:	43200000 	.word	0x43200000

080025ac <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	; 0x30
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80025b8:	2301      	movs	r3, #1
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025bc:	e030      	b.n	8002620 <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	3308      	adds	r3, #8
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	3304      	adds	r3, #4
 80025ca:	ed93 7a00 	vldr	s14, [r3]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	3308      	adds	r3, #8
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3304      	adds	r3, #4
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	3b01      	subs	r3, #1
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	3308      	adds	r3, #8
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	3304      	adds	r3, #4
 80025f0:	edd3 6a00 	vldr	s13, [r3]
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	3301      	adds	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	3308      	adds	r3, #8
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260e:	4a47      	ldr	r2, [pc, #284]	; (800272c <ADC2_IN4_TKEO+0x180>)
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	3301      	adds	r3, #1
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	2b9e      	cmp	r3, #158	; 0x9e
 8002624:	d9cb      	bls.n	80025be <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <ADC2_IN4_TKEO+0x180>)
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <ADC2_IN4_TKEO+0x180>)
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_4 = 0.0f;
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	e00e      	b.n	8002678 <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 800265a:	4a34      	ldr	r2, [pc, #208]	; (800272c <ADC2_IN4_TKEO+0x180>)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	3301      	adds	r3, #1
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b9f      	cmp	r3, #159	; 0x9f
 800267c:	d9ed      	bls.n	800265a <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800267e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002682:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002730 <ADC2_IN4_TKEO+0x184>
 8002686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800268a:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e018      	b.n	80026c6 <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <ADC2_IN4_TKEO+0x180>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	ed93 7a00 	vldr	s14, [r3]
 80026a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80026a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a8:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 80026ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b9f      	cmp	r3, #159	; 0x9f
 80026ca:	d9e3      	bls.n	8002694 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80026cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026d0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002730 <ADC2_IN4_TKEO+0x184>
 80026d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 80026dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026de:	f7fd feff 	bl	80004e0 <__aeabi_f2d>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	ec43 2b10 	vmov	d0, r2, r3
 80026ea:	f005 fcb1 	bl	8008050 <sqrt>
 80026ee:	ec53 2b10 	vmov	r2, r3, d0
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe f9fb 	bl	8000af0 <__aeabi_d2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 80026fe:	edd7 7a00 	vldr	s15, [r7]
 8002702:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270a:	ed97 7a05 	vldr	s14, [r7, #20]
 800270e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002716:	dd03      	ble.n	8002720 <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 8002718:	2301      	movs	r3, #1
 800271a:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	e000      	b.n	8002722 <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002720:	2300      	movs	r3, #0
  }


}
 8002722:	4618      	mov	r0, r3
 8002724:	3730      	adds	r7, #48	; 0x30
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200080d4 	.word	0x200080d4
 8002730:	43200000 	.word	0x43200000

08002734 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	; 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8002740:	2301      	movs	r3, #1
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002744:	e030      	b.n	80027a8 <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	3308      	adds	r3, #8
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3304      	adds	r3, #4
 8002752:	ed93 7a00 	vldr	s14, [r3]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	3308      	adds	r3, #8
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	3b01      	subs	r3, #1
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	3308      	adds	r3, #8
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3304      	adds	r3, #4
 8002778:	edd3 6a00 	vldr	s13, [r3]
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	3301      	adds	r3, #1
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	3308      	adds	r3, #8
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	3304      	adds	r3, #4
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	4a47      	ldr	r2, [pc, #284]	; (80028b4 <ADC3_IN1_TKEO+0x180>)
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	3301      	adds	r3, #1
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	2b9e      	cmp	r3, #158	; 0x9e
 80027ac:	d9cb      	bls.n	8002746 <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <ADC3_IN1_TKEO+0x180>)
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <ADC3_IN1_TKEO+0x180>)
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	e00e      	b.n	8002800 <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 80027e2:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <ADC3_IN1_TKEO+0x180>)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	edd3 7a00 	vldr	s15, [r3]
 80027ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80027f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	3301      	adds	r3, #1
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2b9f      	cmp	r3, #159	; 0x9f
 8002804:	d9ed      	bls.n	80027e2 <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002806:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800280a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80028b8 <ADC3_IN1_TKEO+0x184>
 800280e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002812:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e018      	b.n	800284e <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 800281c:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <ADC3_IN1_TKEO+0x180>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	edd7 7a06 	vldr	s15, [r7, #24]
 800282c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002830:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 8002834:	edd7 7a03 	vldr	s15, [r7, #12]
 8002838:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800283c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002844:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3301      	adds	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b9f      	cmp	r3, #159	; 0x9f
 8002852:	d9e3      	bls.n	800281c <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002854:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002858:	eddf 6a17 	vldr	s13, [pc, #92]	; 80028b8 <ADC3_IN1_TKEO+0x184>
 800285c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002860:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 8002864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002866:	f7fd fe3b 	bl	80004e0 <__aeabi_f2d>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	ec43 2b10 	vmov	d0, r2, r3
 8002872:	f005 fbed 	bl	8008050 <sqrt>
 8002876:	ec53 2b10 	vmov	r2, r3, d0
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe f937 	bl	8000af0 <__aeabi_d2f>
 8002882:	4603      	mov	r3, r0
 8002884:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8002886:	edd7 7a00 	vldr	s15, [r7]
 800288a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800288e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002892:	ed97 7a05 	vldr	s14, [r7, #20]
 8002896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	dd03      	ble.n	80028a8 <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	e000      	b.n	80028aa <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 80028a8:	2300      	movs	r3, #0
  }


}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3730      	adds	r7, #48	; 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20008354 	.word	0x20008354
 80028b8:	43200000 	.word	0x43200000

080028bc <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80028c8:	2301      	movs	r3, #1
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028cc:	e030      	b.n	8002930 <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	3308      	adds	r3, #8
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	3308      	adds	r3, #8
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	3b01      	subs	r3, #1
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	3308      	adds	r3, #8
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	edd3 6a00 	vldr	s13, [r3]
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	3301      	adds	r3, #1
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	3308      	adds	r3, #8
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	4a47      	ldr	r2, [pc, #284]	; (8002a3c <ADC3_IN2_TKEO+0x180>)
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	3301      	adds	r3, #1
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	2b9e      	cmp	r3, #158	; 0x9e
 8002934:	d9cb      	bls.n	80028ce <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <ADC3_IN2_TKEO+0x180>)
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <ADC3_IN2_TKEO+0x180>)
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c


  float32_t Tkeo_Sum_6 = 0.0f;
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	e00e      	b.n	8002988 <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 800296a:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <ADC3_IN2_TKEO+0x180>)
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800297a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	3301      	adds	r3, #1
 8002986:	623b      	str	r3, [r7, #32]
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	2b9f      	cmp	r3, #159	; 0x9f
 800298c:	d9ed      	bls.n	800296a <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800298e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002992:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002a40 <ADC3_IN2_TKEO+0x184>
 8002996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299a:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e018      	b.n	80029d6 <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <ADC3_IN2_TKEO+0x180>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	ed93 7a00 	vldr	s14, [r3]
 80029b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 80029bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80029c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	3301      	adds	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2b9f      	cmp	r3, #159	; 0x9f
 80029da:	d9e3      	bls.n	80029a4 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80029dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029e0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002a40 <ADC3_IN2_TKEO+0x184>
 80029e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 80029ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ee:	f7fd fd77 	bl	80004e0 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	ec43 2b10 	vmov	d0, r2, r3
 80029fa:	f005 fb29 	bl	8008050 <sqrt>
 80029fe:	ec53 2b10 	vmov	r2, r3, d0
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f873 	bl	8000af0 <__aeabi_d2f>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 8002a0e:	edd7 7a00 	vldr	s15, [r7]
 8002a12:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	dd03      	ble.n	8002a30 <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	e000      	b.n	8002a32 <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8002a30:	2300      	movs	r3, #0
  }


}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3730      	adds	r7, #48	; 0x30
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200085d4 	.word	0x200085d4
 8002a40:	43200000 	.word	0x43200000

08002a44 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e038      	b.n	8002ac2 <ADC1_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <ADC1_DMA_sort_uhb+0x1c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d117      	bne.n	8002a90 <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	e00f      	b.n	8002a86 <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <ADC1_DMA_sort_uhb+0x94>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <ADC1_DMA_sort_uhb+0x94>)
 8002a6c:	6811      	ldr	r1, [r2, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8002a8c:	d3eb      	bcc.n	8002a66 <ADC1_DMA_sort_uhb+0x22>
 8002a8e:	e015      	b.n	8002abc <ADC1_DMA_sort_uhb+0x78>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	e00e      	b.n	8002ab4 <ADC1_DMA_sort_uhb+0x70>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <ADC1_DMA_sort_uhb+0x94>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <ADC1_DMA_sort_uhb+0x94>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8002aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8002aba:	d3ec      	bcc.n	8002a96 <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002ac8:	d9c2      	bls.n	8002a50 <ADC1_DMA_sort_uhb+0xc>
			}
		}
     }

};
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	20008bd4 	.word	0x20008bd4

08002adc <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8002ae2:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e03a      	b.n	8002b60 <ADC1_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <ADC1_DMA_sort_lhb+0x1e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d118      	bne.n	8002b2c <ADC1_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8002afa:	f240 2371 	movw	r3, #625	; 0x271
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	e00f      	b.n	8002b22 <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <ADC1_DMA_sort_lhb+0x9c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <ADC1_DMA_sort_lhb+0x9c>)
 8002b08:	6811      	ldr	r1, [r2, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002b28:	d9eb      	bls.n	8002b02 <ADC1_DMA_sort_lhb+0x26>
 8002b2a:	e016      	b.n	8002b5a <ADC1_DMA_sort_lhb+0x7e>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8002b2c:	f240 2371 	movw	r3, #625	; 0x271
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e00e      	b.n	8002b52 <ADC1_DMA_sort_lhb+0x76>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <ADC1_DMA_sort_lhb+0x9c>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <ADC1_DMA_sort_lhb+0x9c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002b58:	d9ec      	bls.n	8002b34 <ADC1_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d9bf      	bls.n	8002aea <ADC1_DMA_sort_lhb+0xe>
			}
		}
     }

};
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20008bd4 	.word	0x20008bd4

08002b7c <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e038      	b.n	8002bfa <ADC2_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <ADC2_DMA_sort_uhb+0x1c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d117      	bne.n	8002bc8 <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	e00f      	b.n	8002bbe <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <ADC2_DMA_sort_uhb+0x94>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <ADC2_DMA_sort_uhb+0x94>)
 8002ba4:	6811      	ldr	r1, [r2, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8002bc4:	d3eb      	bcc.n	8002b9e <ADC2_DMA_sort_uhb+0x22>
 8002bc6:	e015      	b.n	8002bf4 <ADC2_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e00e      	b.n	8002bec <ADC2_DMA_sort_uhb+0x70>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <ADC2_DMA_sort_uhb+0x94>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <ADC2_DMA_sort_uhb+0x94>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68f9      	ldr	r1, [r7, #12]
 8002bd8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8002be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3301      	adds	r3, #1
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8002bf2:	d3ec      	bcc.n	8002bce <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002c00:	d9c2      	bls.n	8002b88 <ADC2_DMA_sort_uhb+0xc>
			}
		}
     }

};
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20008bd8 	.word	0x20008bd8

08002c14 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8002c1a:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e03a      	b.n	8002c98 <ADC2_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <ADC2_DMA_sort_lhb+0x1e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <ADC2_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8002c32:	f240 2371 	movw	r3, #625	; 0x271
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	e00f      	b.n	8002c5a <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <ADC2_DMA_sort_lhb+0x9c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <ADC2_DMA_sort_lhb+0x9c>)
 8002c40:	6811      	ldr	r1, [r2, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	3301      	adds	r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002c60:	d9eb      	bls.n	8002c3a <ADC2_DMA_sort_lhb+0x26>
 8002c62:	e016      	b.n	8002c92 <ADC2_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8002c64:	f240 2371 	movw	r3, #625	; 0x271
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	e00e      	b.n	8002c8a <ADC2_DMA_sort_lhb+0x76>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <ADC2_DMA_sort_lhb+0x9c>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <ADC2_DMA_sort_lhb+0x9c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8002c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3301      	adds	r3, #1
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002c90:	d9ec      	bls.n	8002c6c <ADC2_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d9bf      	bls.n	8002c22 <ADC2_DMA_sort_lhb+0xe>
			}
		}
     }

};
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	20008bd8 	.word	0x20008bd8

08002cb4 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e038      	b.n	8002d32 <ADC3_DMA_sort_uhb+0x7e>
	{
		if(m==0 || (m%2==0))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <ADC3_DMA_sort_uhb+0x1c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d117      	bne.n	8002d00 <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	e00f      	b.n	8002cf6 <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <ADC3_DMA_sort_uhb+0x94>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <ADC3_DMA_sort_uhb+0x94>)
 8002cdc:	6811      	ldr	r1, [r2, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8002cfc:	d3eb      	bcc.n	8002cd6 <ADC3_DMA_sort_uhb+0x22>
 8002cfe:	e015      	b.n	8002d2c <ADC3_DMA_sort_uhb+0x78>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	e00e      	b.n	8002d24 <ADC3_DMA_sort_uhb+0x70>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <ADC3_DMA_sort_uhb+0x94>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <ADC3_DMA_sort_uhb+0x94>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8002d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3301      	adds	r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8002d2a:	d3ec      	bcc.n	8002d06 <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002d38:	d9c2      	bls.n	8002cc0 <ADC3_DMA_sort_uhb+0xc>
			}
		}
     }

};
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	20008bdc 	.word	0x20008bdc

08002d4c <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8002d52:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e03a      	b.n	8002dd0 <ADC3_DMA_sort_lhb+0x84>
	{
		if(m==0||(m%2==0))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <ADC3_DMA_sort_lhb+0x1e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <ADC3_DMA_sort_lhb+0x50>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8002d6a:	f240 2371 	movw	r3, #625	; 0x271
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e00f      	b.n	8002d92 <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <ADC3_DMA_sort_lhb+0x9c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <ADC3_DMA_sort_lhb+0x9c>)
 8002d78:	6811      	ldr	r1, [r2, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002d98:	d9eb      	bls.n	8002d72 <ADC3_DMA_sort_lhb+0x26>
 8002d9a:	e016      	b.n	8002dca <ADC3_DMA_sort_lhb+0x7e>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8002d9c:	f240 2371 	movw	r3, #625	; 0x271
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	e00e      	b.n	8002dc2 <ADC3_DMA_sort_lhb+0x76>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <ADC3_DMA_sort_lhb+0x9c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <ADC3_DMA_sort_lhb+0x9c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	f602 62a8 	addw	r2, r2, #3752	; 0xea8
 8002db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8002dc8:	d9ec      	bls.n	8002da4 <ADC3_DMA_sort_lhb+0x58>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d9bf      	bls.n	8002d5a <ADC3_DMA_sort_lhb+0xe>
			}
		}
     }

};
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	20008bdc 	.word	0x20008bdc

08002dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b092      	sub	sp, #72	; 0x48
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002df2:	f001 fb0c 	bl	800440e <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8002df6:	f7fe faa3 	bl	8001340 <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 8002dfa:	f7fe fab3 	bl	8001364 <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 8002dfe:	48b4      	ldr	r0, [pc, #720]	; (80030d0 <main+0x2e4>)
 8002e00:	f7fd fec6 	bl	8000b90 <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8002e04:	f7fe fad8 	bl	80013b8 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8002e08:	f7fe fae8 	bl	80013dc <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 8002e0c:	48b1      	ldr	r0, [pc, #708]	; (80030d4 <main+0x2e8>)
 8002e0e:	f7fd ff63 	bl	8000cd8 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 8002e12:	f7fe fb0d 	bl	8001430 <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8002e16:	f7fe fb1d 	bl	8001454 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 8002e1a:	48af      	ldr	r0, [pc, #700]	; (80030d8 <main+0x2ec>)
 8002e1c:	f7fe f800 	bl	8000e20 <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 8002e20:	f7fe fb42 	bl	80014a8 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8002e24:	f7fe fb52 	bl	80014cc <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8002e28:	48ac      	ldr	r0, [pc, #688]	; (80030dc <main+0x2f0>)
 8002e2a:	f7fe f89d 	bl	8000f68 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 8002e2e:	f7fe fb77 	bl	8001520 <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8002e32:	f7fe fb87 	bl	8001544 <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8002e36:	48aa      	ldr	r0, [pc, #680]	; (80030e0 <main+0x2f4>)
 8002e38:	f7fe f93a 	bl	80010b0 <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 8002e3c:	f7fe fbac 	bl	8001598 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 8002e40:	f7fe fbbc 	bl	80015bc <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 8002e44:	48a7      	ldr	r0, [pc, #668]	; (80030e4 <main+0x2f8>)
 8002e46:	f7fe f9d7 	bl	80011f8 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e4a:	f000 fc01 	bl	8003650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e4e:	f000 fedd 	bl	8003c0c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e52:	f000 fe95 	bl	8003b80 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e56:	f000 fc45 	bl	80036e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002e5a:	f000 fccd 	bl	80037f8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002e5e:	f000 fd43 	bl	80038e8 <MX_ADC3_Init>
  MX_FMAC_Init();
 8002e62:	f000 fdb9 	bl	80039d8 <MX_FMAC_Init>
  MX_TIM6_Init();
 8002e66:	f000 fdcb 	bl	8003a00 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002e6a:	f000 fdff 	bl	8003a6c <MX_TIM7_Init>
  MX_TIM20_Init();
 8002e6e:	f000 fe33 	bl	8003ad8 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	
  /* ADC1 is started using timer 6 triggered conversions */
  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
    ADC_status=HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8002e72:	4b9d      	ldr	r3, [pc, #628]	; (80030e8 <main+0x2fc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	489b      	ldr	r0, [pc, #620]	; (80030ec <main+0x300>)
 8002e7e:	f001 ff03 	bl	8004c88 <HAL_ADC_Start_DMA>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b9a      	ldr	r3, [pc, #616]	; (80030f0 <main+0x304>)
 8002e88:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
    ADC_status=HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8002e8a:	4b9a      	ldr	r3, [pc, #616]	; (80030f4 <main+0x308>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4898      	ldr	r0, [pc, #608]	; (80030f8 <main+0x30c>)
 8002e96:	f001 fef7 	bl	8004c88 <HAL_ADC_Start_DMA>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b94      	ldr	r3, [pc, #592]	; (80030f0 <main+0x304>)
 8002ea0:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
    ADC_status=HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8002ea2:	4b96      	ldr	r3, [pc, #600]	; (80030fc <main+0x310>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4894      	ldr	r0, [pc, #592]	; (8003100 <main+0x314>)
 8002eae:	f001 feeb 	bl	8004c88 <HAL_ADC_Start_DMA>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <main+0x304>)
 8002eb8:	701a      	strb	r2, [r3, #0]

/* Calculating the offset value and standard deviation for the base line signal for all the channels */
if(Offset_1_Calculated==0)
 8002eba:	4b92      	ldr	r3, [pc, #584]	; (8003104 <main+0x318>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d13e      	bne.n	8002f40 <main+0x154>
{
  float32_t OffsetSum_1 = 0.0f;
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002ece:	e01a      	b.n	8002f06 <main+0x11a>
    {
		/* Collects samples to fill the buffer */
		update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8002ed0:	f7fe fa5a 	bl	8001388 <update_ADC1_IN1_FO_biquad_filter>
		MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 8002ed4:	487e      	ldr	r0, [pc, #504]	; (80030d0 <main+0x2e4>)
 8002ed6:	f7fd fe8d 	bl	8000bf4 <MA_ADC1_IN1_Update>

		/* Calculate the offset from the filled buffer */
		Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 8002eda:	488b      	ldr	r0, [pc, #556]	; (8003108 <main+0x31c>)
 8002edc:	f7fe fb98 	bl	8001610 <ADC1_IN1_OffsetCalc>
 8002ee0:	eef0 7a40 	vmov.f32	s15, s0
 8002ee4:	4b89      	ldr	r3, [pc, #548]	; (800310c <main+0x320>)
 8002ee6:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_1 += Offset_1;
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <main+0x320>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8002efc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002f00:	3301      	adds	r3, #1
 8002f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002f0a:	2b13      	cmp	r3, #19
 8002f0c:	d9e0      	bls.n	8002ed0 <main+0xe4>
    }

  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 8002f0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002f12:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	; (800310c <main+0x320>)
 8002f1c:	edc3 7a00 	vstr	s15, [r3]
  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 8002f20:	4b78      	ldr	r3, [pc, #480]	; (8003104 <main+0x318>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]

  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 8002f26:	4b79      	ldr	r3, [pc, #484]	; (800310c <main+0x320>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f30:	4877      	ldr	r0, [pc, #476]	; (8003110 <main+0x324>)
 8002f32:	f7fe fc8d 	bl	8001850 <ADC1_IN1_SD_BL>
 8002f36:	eef0 7a40 	vmov.f32	s15, s0
 8002f3a:	4b76      	ldr	r3, [pc, #472]	; (8003114 <main+0x328>)
 8002f3c:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_2_Calculated==0)
 8002f40:	4b75      	ldr	r3, [pc, #468]	; (8003118 <main+0x32c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d13b      	bne.n	8002fc0 <main+0x1d4>
{
  float32_t OffsetSum_2;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002f4e:	e01a      	b.n	8002f86 <main+0x19a>
    {

		update_ADC1_IN2_FO_biquad_filter();
 8002f50:	f7fe fa56 	bl	8001400 <update_ADC1_IN2_FO_biquad_filter>
		MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8002f54:	485f      	ldr	r0, [pc, #380]	; (80030d4 <main+0x2e8>)
 8002f56:	f7fd fef1 	bl	8000d3c <MA_ADC1_IN2_Update>


		Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 8002f5a:	4870      	ldr	r0, [pc, #448]	; (800311c <main+0x330>)
 8002f5c:	f7fe fb88 	bl	8001670 <ADC1_IN2_OffsetCalc>
 8002f60:	eef0 7a40 	vmov.f32	s15, s0
 8002f64:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <main+0x334>)
 8002f66:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_2 += Offset_2;
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <main+0x334>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8002f7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002f80:	3301      	adds	r3, #1
 8002f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002f86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002f8a:	2b13      	cmp	r3, #19
 8002f8c:	d9e0      	bls.n	8002f50 <main+0x164>
    }

  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 8002f8e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f92:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <main+0x334>)
 8002f9c:	edc3 7a00 	vstr	s15, [r3]
  Offset_2_Calculated = 1;
 8002fa0:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <main+0x32c>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]

  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 8002fa6:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <main+0x334>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	485c      	ldr	r0, [pc, #368]	; (8003124 <main+0x338>)
 8002fb2:	f7fe fc99 	bl	80018e8 <ADC1_IN2_SD_BL>
 8002fb6:	eef0 7a40 	vmov.f32	s15, s0
 8002fba:	4b5b      	ldr	r3, [pc, #364]	; (8003128 <main+0x33c>)
 8002fbc:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_3_Calculated==0)
 8002fc0:	4b5a      	ldr	r3, [pc, #360]	; (800312c <main+0x340>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d13b      	bne.n	8003040 <main+0x254>
{
  float32_t OffsetSum_3;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002fce:	e01a      	b.n	8003006 <main+0x21a>
    {

		update_ADC2_IN3_FO_biquad_filter();
 8002fd0:	f7fe fa52 	bl	8001478 <update_ADC2_IN3_FO_biquad_filter>
		MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8002fd4:	4840      	ldr	r0, [pc, #256]	; (80030d8 <main+0x2ec>)
 8002fd6:	f7fd ff55 	bl	8000e84 <MA_ADC2_IN3_Update>


		Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 8002fda:	4855      	ldr	r0, [pc, #340]	; (8003130 <main+0x344>)
 8002fdc:	f7fe fb78 	bl	80016d0 <ADC2_IN3_OffsetCalc>
 8002fe0:	eef0 7a40 	vmov.f32	s15, s0
 8002fe4:	4b53      	ldr	r3, [pc, #332]	; (8003134 <main+0x348>)
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_3 += Offset_3;
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <main+0x348>)
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8002ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003000:	3301      	adds	r3, #1
 8003002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800300a:	2b13      	cmp	r3, #19
 800300c:	d9e0      	bls.n	8002fd0 <main+0x1e4>
    }

  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 800300e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003012:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301a:	4b46      	ldr	r3, [pc, #280]	; (8003134 <main+0x348>)
 800301c:	edc3 7a00 	vstr	s15, [r3]
  Offset_3_Calculated = 1;
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <main+0x340>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]

  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 8003026:	4b43      	ldr	r3, [pc, #268]	; (8003134 <main+0x348>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	eeb0 0a67 	vmov.f32	s0, s15
 8003030:	4841      	ldr	r0, [pc, #260]	; (8003138 <main+0x34c>)
 8003032:	f7fe fca5 	bl	8001980 <ADC2_IN3_SD_BL>
 8003036:	eef0 7a40 	vmov.f32	s15, s0
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <main+0x350>)
 800303c:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_4_Calculated==0)
 8003040:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <main+0x354>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d13b      	bne.n	80030c0 <main+0x2d4>
{
  float32_t OffsetSum_4;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003048:	2300      	movs	r3, #0
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304e:	e01a      	b.n	8003086 <main+0x29a>
    {

		update_ADC2_IN4_FO_biquad_filter();
 8003050:	f7fe fa4e 	bl	80014f0 <update_ADC2_IN4_FO_biquad_filter>
		MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8003054:	4821      	ldr	r0, [pc, #132]	; (80030dc <main+0x2f0>)
 8003056:	f7fd ffb9 	bl	8000fcc <MA_ADC2_IN4_Update>


		Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 800305a:	483a      	ldr	r0, [pc, #232]	; (8003144 <main+0x358>)
 800305c:	f7fe fb68 	bl	8001730 <ADC2_IN4_OffsetCalc>
 8003060:	eef0 7a40 	vmov.f32	s15, s0
 8003064:	4b38      	ldr	r3, [pc, #224]	; (8003148 <main+0x35c>)
 8003066:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_4 += Offset_4;
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <main+0x35c>)
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003078:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800307c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003080:	3301      	adds	r3, #1
 8003082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800308a:	2b13      	cmp	r3, #19
 800308c:	d9e0      	bls.n	8003050 <main+0x264>
    }

  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 800308e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003092:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800309a:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <main+0x35c>)
 800309c:	edc3 7a00 	vstr	s15, [r3]
  Offset_4_Calculated = 1;
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <main+0x354>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]

  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 80030a6:	4b28      	ldr	r3, [pc, #160]	; (8003148 <main+0x35c>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	eeb0 0a67 	vmov.f32	s0, s15
 80030b0:	4826      	ldr	r0, [pc, #152]	; (800314c <main+0x360>)
 80030b2:	f7fe fcb1 	bl	8001a18 <ADC2_IN4_SD_BL>
 80030b6:	eef0 7a40 	vmov.f32	s15, s0
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <main+0x364>)
 80030bc:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_5_Calculated==0)
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <main+0x368>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d17f      	bne.n	80031c8 <main+0x3dc>
{
  float32_t OffsetSum_5;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e05e      	b.n	800318e <main+0x3a2>
 80030d0:	20008be0 	.word	0x20008be0
 80030d4:	20008e84 	.word	0x20008e84
 80030d8:	20009128 	.word	0x20009128
 80030dc:	200093cc 	.word	0x200093cc
 80030e0:	20009670 	.word	0x20009670
 80030e4:	20009914 	.word	0x20009914
 80030e8:	20008bd4 	.word	0x20008bd4
 80030ec:	20008854 	.word	0x20008854
 80030f0:	2000db18 	.word	0x2000db18
 80030f4:	20008bd8 	.word	0x20008bd8
 80030f8:	200088c0 	.word	0x200088c0
 80030fc:	20008bdc 	.word	0x20008bdc
 8003100:	2000892c 	.word	0x2000892c
 8003104:	2000db34 	.word	0x2000db34
 8003108:	20009bb8 	.word	0x20009bb8
 800310c:	2000db1c 	.word	0x2000db1c
 8003110:	2000ab90 	.word	0x2000ab90
 8003114:	2000db3c 	.word	0x2000db3c
 8003118:	2000db35 	.word	0x2000db35
 800311c:	20009e5c 	.word	0x20009e5c
 8003120:	2000db20 	.word	0x2000db20
 8003124:	2000ae34 	.word	0x2000ae34
 8003128:	2000db40 	.word	0x2000db40
 800312c:	2000db36 	.word	0x2000db36
 8003130:	2000a100 	.word	0x2000a100
 8003134:	2000db24 	.word	0x2000db24
 8003138:	2000b0d8 	.word	0x2000b0d8
 800313c:	2000db44 	.word	0x2000db44
 8003140:	2000db37 	.word	0x2000db37
 8003144:	2000a3a4 	.word	0x2000a3a4
 8003148:	2000db28 	.word	0x2000db28
 800314c:	2000b37c 	.word	0x2000b37c
 8003150:	2000db48 	.word	0x2000db48
 8003154:	2000db38 	.word	0x2000db38
    {
		/* Collects samples to fill the buffer */
		update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 8003158:	f7fe fa06 	bl	8001568 <update_ADC3_IN1_FO_biquad_filter>
		MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 800315c:	48a2      	ldr	r0, [pc, #648]	; (80033e8 <main+0x5fc>)
 800315e:	f7fd ffd9 	bl	8001114 <MA_ADC3_IN1_Update>

		/* Calculate the offset from the filled buffer */
		Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 8003162:	48a2      	ldr	r0, [pc, #648]	; (80033ec <main+0x600>)
 8003164:	f7fe fb14 	bl	8001790 <ADC3_IN1_OffsetCalc>
 8003168:	eef0 7a40 	vmov.f32	s15, s0
 800316c:	4ba0      	ldr	r3, [pc, #640]	; (80033f0 <main+0x604>)
 800316e:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_5 += Offset_5;
 8003172:	4ba0      	ldr	r3, [pc, #640]	; (80033f4 <main+0x608>)
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800317c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003180:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8003184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003188:	3301      	adds	r3, #1
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003192:	2b13      	cmp	r3, #19
 8003194:	d9e0      	bls.n	8003158 <main+0x36c>
    }

  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 8003196:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800319a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800319e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031a2:	4b94      	ldr	r3, [pc, #592]	; (80033f4 <main+0x608>)
 80031a4:	edc3 7a00 	vstr	s15, [r3]
  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 80031a8:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <main+0x60c>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]

  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 80031ae:	4b91      	ldr	r3, [pc, #580]	; (80033f4 <main+0x608>)
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	eeb0 0a67 	vmov.f32	s0, s15
 80031b8:	4890      	ldr	r0, [pc, #576]	; (80033fc <main+0x610>)
 80031ba:	f7fe fc79 	bl	8001ab0 <ADC3_IN1_SD_BL>
 80031be:	eef0 7a40 	vmov.f32	s15, s0
 80031c2:	4b8f      	ldr	r3, [pc, #572]	; (8003400 <main+0x614>)
 80031c4:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_6_Calculated==0)
 80031c8:	4b8e      	ldr	r3, [pc, #568]	; (8003404 <main+0x618>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d137      	bne.n	8003240 <main+0x454>
{
  float32_t OffsetSum_6;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e018      	b.n	8003208 <main+0x41c>
    {

		update_ADC3_IN2_FO_biquad_filter();
 80031d6:	f7fe fa03 	bl	80015e0 <update_ADC3_IN2_FO_biquad_filter>
		MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 80031da:	488b      	ldr	r0, [pc, #556]	; (8003408 <main+0x61c>)
 80031dc:	f7fe f83e 	bl	800125c <MA_ADC3_IN2_Update>


		Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 80031e0:	488a      	ldr	r0, [pc, #552]	; (800340c <main+0x620>)
 80031e2:	f7fe fb05 	bl	80017f0 <ADC3_IN2_OffsetCalc>
 80031e6:	eef0 7a40 	vmov.f32	s15, s0
 80031ea:	4b89      	ldr	r3, [pc, #548]	; (8003410 <main+0x624>)
 80031ec:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_6 += Offset_6;
 80031f0:	4b87      	ldr	r3, [pc, #540]	; (8003410 <main+0x624>)
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	edc7 7a07 	vstr	s15, [r7, #28]
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8003202:	7efb      	ldrb	r3, [r7, #27]
 8003204:	3301      	adds	r3, #1
 8003206:	76fb      	strb	r3, [r7, #27]
 8003208:	7efb      	ldrb	r3, [r7, #27]
 800320a:	2b13      	cmp	r3, #19
 800320c:	d9e3      	bls.n	80031d6 <main+0x3ea>
    }

  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 800320e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003212:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800321a:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <main+0x624>)
 800321c:	edc3 7a00 	vstr	s15, [r3]
  Offset_6_Calculated = 1;
 8003220:	4b78      	ldr	r3, [pc, #480]	; (8003404 <main+0x618>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]

  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 8003226:	4b7a      	ldr	r3, [pc, #488]	; (8003410 <main+0x624>)
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	eeb0 0a67 	vmov.f32	s0, s15
 8003230:	4878      	ldr	r0, [pc, #480]	; (8003414 <main+0x628>)
 8003232:	f7fe fc89 	bl	8001b48 <ADC3_IN2_SD_BL>
 8003236:	eef0 7a40 	vmov.f32	s15, s0
 800323a:	4b77      	ldr	r3, [pc, #476]	; (8003418 <main+0x62c>)
 800323c:	edc3 7a00 	vstr	s15, [r3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8003240:	f7fe f8a2 	bl	8001388 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 8003244:	4875      	ldr	r0, [pc, #468]	; (800341c <main+0x630>)
 8003246:	f7fd fcd5 	bl	8000bf4 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	e017      	b.n	8003280 <main+0x494>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtract the stored offset
 8003250:	4a72      	ldr	r2, [pc, #456]	; (800341c <main+0x630>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3308      	adds	r3, #8
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	ed93 7a00 	vldr	s14, [r3]
 8003260:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <main+0x604>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	4a6c      	ldr	r2, [pc, #432]	; (800341c <main+0x630>)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3308      	adds	r3, #8
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3301      	adds	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b9f      	cmp	r3, #159	; 0x9f
 8003284:	d9e4      	bls.n	8003250 <main+0x464>
	  }
	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8003286:	4b66      	ldr	r3, [pc, #408]	; (8003420 <main+0x634>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	4864      	ldr	r0, [pc, #400]	; (8003424 <main+0x638>)
 8003292:	f7fe ff3f 	bl	8002114 <ADC1_IN1_TKEO>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <main+0x63c>)
 800329c:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 800329e:	4b62      	ldr	r3, [pc, #392]	; (8003428 <main+0x63c>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d110      	bne.n	80032c8 <main+0x4dc>
      {
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 80032a6:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <main+0x604>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	485c      	ldr	r0, [pc, #368]	; (800342c <main+0x640>)
 80032ba:	f7fe fc91 	bl	8001be0 <ADC1_IN1_SSC>
 80032be:	eef0 7a40 	vmov.f32	s15, s0
 80032c2:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <main+0x644>)
 80032c4:	edc3 7a00 	vstr	s15, [r3]
      }


	  update_ADC1_IN2_FO_biquad_filter();
 80032c8:	f7fe f89a 	bl	8001400 <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 80032cc:	4859      	ldr	r0, [pc, #356]	; (8003434 <main+0x648>)
 80032ce:	f7fd fd35 	bl	8000d3c <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e017      	b.n	8003308 <main+0x51c>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 80032d8:	4a56      	ldr	r2, [pc, #344]	; (8003434 <main+0x648>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	3308      	adds	r3, #8
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	4b53      	ldr	r3, [pc, #332]	; (8003438 <main+0x64c>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f2:	4a50      	ldr	r2, [pc, #320]	; (8003434 <main+0x648>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	3308      	adds	r3, #8
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3301      	adds	r3, #1
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b9f      	cmp	r3, #159	; 0x9f
 800330c:	d9e4      	bls.n	80032d8 <main+0x4ec>
	  }
	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 800330e:	4b4b      	ldr	r3, [pc, #300]	; (800343c <main+0x650>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	4849      	ldr	r0, [pc, #292]	; (8003440 <main+0x654>)
 800331a:	f7fe ffbf 	bl	800229c <ADC1_IN2_TKEO>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	4b48      	ldr	r3, [pc, #288]	; (8003444 <main+0x658>)
 8003324:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <main+0x658>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d110      	bne.n	8003350 <main+0x564>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 800332e:	4b42      	ldr	r3, [pc, #264]	; (8003438 <main+0x64c>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800333c:	eeb0 0a67 	vmov.f32	s0, s15
 8003340:	4841      	ldr	r0, [pc, #260]	; (8003448 <main+0x65c>)
 8003342:	f7fe fcbc 	bl	8001cbe <ADC1_IN2_SSC>
 8003346:	eef0 7a40 	vmov.f32	s15, s0
 800334a:	4b40      	ldr	r3, [pc, #256]	; (800344c <main+0x660>)
 800334c:	edc3 7a00 	vstr	s15, [r3]
	  }


	  update_ADC2_IN3_FO_biquad_filter();
 8003350:	f7fe f892 	bl	8001478 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8003354:	483e      	ldr	r0, [pc, #248]	; (8003450 <main+0x664>)
 8003356:	f7fd fd95 	bl	8000e84 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e017      	b.n	8003390 <main+0x5a4>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 8003360:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <main+0x664>)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3308      	adds	r3, #8
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	3304      	adds	r3, #4
 800336c:	ed93 7a00 	vldr	s14, [r3]
 8003370:	4b38      	ldr	r3, [pc, #224]	; (8003454 <main+0x668>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337a:	4a35      	ldr	r2, [pc, #212]	; (8003450 <main+0x664>)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3308      	adds	r3, #8
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b9f      	cmp	r3, #159	; 0x9f
 8003394:	d9e4      	bls.n	8003360 <main+0x574>
	  }
	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <main+0x66c>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	eeb0 0a67 	vmov.f32	s0, s15
 80033a0:	482e      	ldr	r0, [pc, #184]	; (800345c <main+0x670>)
 80033a2:	f7ff f83f 	bl	8002424 <ADC2_IN3_TKEO>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <main+0x674>)
 80033ac:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <main+0x674>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d110      	bne.n	80033d8 <main+0x5ec>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <main+0x668>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c4:	eeb0 0a67 	vmov.f32	s0, s15
 80033c8:	4826      	ldr	r0, [pc, #152]	; (8003464 <main+0x678>)
 80033ca:	f7fe fce7 	bl	8001d9c <ADC2_IN3_SSC>
 80033ce:	eef0 7a40 	vmov.f32	s15, s0
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <main+0x67c>)
 80033d4:	edc3 7a00 	vstr	s15, [r3]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 80033d8:	f7fe f88a 	bl	80014f0 <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 80033dc:	4823      	ldr	r0, [pc, #140]	; (800346c <main+0x680>)
 80033de:	f7fd fdf5 	bl	8000fcc <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	e05b      	b.n	80034a0 <main+0x6b4>
 80033e8:	20009670 	.word	0x20009670
 80033ec:	2000a648 	.word	0x2000a648
 80033f0:	2000db1c 	.word	0x2000db1c
 80033f4:	2000db2c 	.word	0x2000db2c
 80033f8:	2000db38 	.word	0x2000db38
 80033fc:	2000b620 	.word	0x2000b620
 8003400:	2000db4c 	.word	0x2000db4c
 8003404:	2000db39 	.word	0x2000db39
 8003408:	20009914 	.word	0x20009914
 800340c:	2000a8ec 	.word	0x2000a8ec
 8003410:	2000db30 	.word	0x2000db30
 8003414:	2000b8c4 	.word	0x2000b8c4
 8003418:	2000db50 	.word	0x2000db50
 800341c:	20008be0 	.word	0x20008be0
 8003420:	2000db3c 	.word	0x2000db3c
 8003424:	2000bb68 	.word	0x2000bb68
 8003428:	2000db54 	.word	0x2000db54
 800342c:	2000cb40 	.word	0x2000cb40
 8003430:	2000db5c 	.word	0x2000db5c
 8003434:	20008e84 	.word	0x20008e84
 8003438:	2000db20 	.word	0x2000db20
 800343c:	2000db40 	.word	0x2000db40
 8003440:	2000be0c 	.word	0x2000be0c
 8003444:	2000db55 	.word	0x2000db55
 8003448:	2000cde4 	.word	0x2000cde4
 800344c:	2000db60 	.word	0x2000db60
 8003450:	20009128 	.word	0x20009128
 8003454:	2000db24 	.word	0x2000db24
 8003458:	2000db44 	.word	0x2000db44
 800345c:	2000c0b0 	.word	0x2000c0b0
 8003460:	2000db56 	.word	0x2000db56
 8003464:	2000d088 	.word	0x2000d088
 8003468:	2000db64 	.word	0x2000db64
 800346c:	200093cc 	.word	0x200093cc
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 8003470:	4a62      	ldr	r2, [pc, #392]	; (80035fc <main+0x810>)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3308      	adds	r3, #8
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	ed93 7a00 	vldr	s14, [r3]
 8003480:	4b5f      	ldr	r3, [pc, #380]	; (8003600 <main+0x814>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348a:	4a5c      	ldr	r2, [pc, #368]	; (80035fc <main+0x810>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3308      	adds	r3, #8
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3301      	adds	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b9f      	cmp	r3, #159	; 0x9f
 80034a4:	d9e4      	bls.n	8003470 <main+0x684>
	  }
	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 80034a6:	4b57      	ldr	r3, [pc, #348]	; (8003604 <main+0x818>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	4855      	ldr	r0, [pc, #340]	; (8003608 <main+0x81c>)
 80034b2:	f7ff f87b 	bl	80025ac <ADC2_IN4_TKEO>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b54      	ldr	r3, [pc, #336]	; (800360c <main+0x820>)
 80034bc:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 80034be:	4b53      	ldr	r3, [pc, #332]	; (800360c <main+0x820>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d110      	bne.n	80034e8 <main+0x6fc>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 80034c6:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <main+0x814>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d4:	eeb0 0a67 	vmov.f32	s0, s15
 80034d8:	484d      	ldr	r0, [pc, #308]	; (8003610 <main+0x824>)
 80034da:	f7fe fcce 	bl	8001e7a <ADC2_IN4_SSC>
 80034de:	eef0 7a40 	vmov.f32	s15, s0
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <main+0x828>)
 80034e4:	edc3 7a00 	vstr	s15, [r3]
	  }


	  update_ADC3_IN1_FO_biquad_filter();
 80034e8:	f7fe f83e 	bl	8001568 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 80034ec:	484a      	ldr	r0, [pc, #296]	; (8003618 <main+0x82c>)
 80034ee:	f7fd fe11 	bl	8001114 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	e017      	b.n	8003528 <main+0x73c>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 80034f8:	4a47      	ldr	r2, [pc, #284]	; (8003618 <main+0x82c>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3308      	adds	r3, #8
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3304      	adds	r3, #4
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	4b44      	ldr	r3, [pc, #272]	; (800361c <main+0x830>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003512:	4a41      	ldr	r2, [pc, #260]	; (8003618 <main+0x82c>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3308      	adds	r3, #8
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3301      	adds	r3, #1
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b9f      	cmp	r3, #159	; 0x9f
 800352c:	d9e4      	bls.n	80034f8 <main+0x70c>
	  }
	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 800352e:	4b3c      	ldr	r3, [pc, #240]	; (8003620 <main+0x834>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	eeb0 0a67 	vmov.f32	s0, s15
 8003538:	483a      	ldr	r0, [pc, #232]	; (8003624 <main+0x838>)
 800353a:	f7ff f8fb 	bl	8002734 <ADC3_IN1_TKEO>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <main+0x83c>)
 8003544:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <main+0x83c>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d110      	bne.n	8003570 <main+0x784>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 800354e:	4b33      	ldr	r3, [pc, #204]	; (800361c <main+0x830>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800355c:	eeb0 0a67 	vmov.f32	s0, s15
 8003560:	4832      	ldr	r0, [pc, #200]	; (800362c <main+0x840>)
 8003562:	f7fe fcf9 	bl	8001f58 <ADC3_IN1_SSC>
 8003566:	eef0 7a40 	vmov.f32	s15, s0
 800356a:	4b31      	ldr	r3, [pc, #196]	; (8003630 <main+0x844>)
 800356c:	edc3 7a00 	vstr	s15, [r3]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 8003570:	f7fe f836 	bl	80015e0 <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 8003574:	482f      	ldr	r0, [pc, #188]	; (8003634 <main+0x848>)
 8003576:	f7fd fe71 	bl	800125c <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 800357a:	2300      	movs	r3, #0
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	e017      	b.n	80035b0 <main+0x7c4>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtract the stored offset
 8003580:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <main+0x848>)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	3304      	adds	r3, #4
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	4b29      	ldr	r3, [pc, #164]	; (8003638 <main+0x84c>)
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359a:	4a26      	ldr	r2, [pc, #152]	; (8003634 <main+0x848>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	3308      	adds	r3, #8
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b9f      	cmp	r3, #159	; 0x9f
 80035b4:	d9e4      	bls.n	8003580 <main+0x794>
	  }
	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <main+0x850>)
 80035b8:	edd3 7a00 	vldr	s15, [r3]
 80035bc:	eeb0 0a67 	vmov.f32	s0, s15
 80035c0:	481f      	ldr	r0, [pc, #124]	; (8003640 <main+0x854>)
 80035c2:	f7ff f97b 	bl	80028bc <ADC3_IN2_TKEO>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <main+0x858>)
 80035cc:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <main+0x858>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	f47f ae34 	bne.w	8003240 <main+0x454>
	  {
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <main+0x84c>)
 80035da:	edd3 7a00 	vldr	s15, [r3]
 80035de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035e6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ea:	4817      	ldr	r0, [pc, #92]	; (8003648 <main+0x85c>)
 80035ec:	f7fe fd23 	bl	8002036 <ADC3_IN2_SSC>
 80035f0:	eef0 7a40 	vmov.f32	s15, s0
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <main+0x860>)
 80035f6:	edc3 7a00 	vstr	s15, [r3]
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80035fa:	e621      	b.n	8003240 <main+0x454>
 80035fc:	200093cc 	.word	0x200093cc
 8003600:	2000db28 	.word	0x2000db28
 8003604:	2000db48 	.word	0x2000db48
 8003608:	2000c354 	.word	0x2000c354
 800360c:	2000db57 	.word	0x2000db57
 8003610:	2000d32c 	.word	0x2000d32c
 8003614:	2000db68 	.word	0x2000db68
 8003618:	20009670 	.word	0x20009670
 800361c:	2000db2c 	.word	0x2000db2c
 8003620:	2000db4c 	.word	0x2000db4c
 8003624:	2000c5f8 	.word	0x2000c5f8
 8003628:	2000db58 	.word	0x2000db58
 800362c:	2000d5d0 	.word	0x2000d5d0
 8003630:	2000db6c 	.word	0x2000db6c
 8003634:	20009914 	.word	0x20009914
 8003638:	2000db30 	.word	0x2000db30
 800363c:	2000db50 	.word	0x2000db50
 8003640:	2000c89c 	.word	0x2000c89c
 8003644:	2000db59 	.word	0x2000db59
 8003648:	2000d874 	.word	0x2000d874
 800364c:	2000db70 	.word	0x2000db70

08003650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b094      	sub	sp, #80	; 0x50
 8003654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	2238      	movs	r2, #56	; 0x38
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fcc4 	bl	8007fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003664:	1d3b      	adds	r3, r7, #4
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003676:	f002 ffef 	bl	8006658 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800367a:	2301      	movs	r3, #1
 800367c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800367e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003684:	2302      	movs	r3, #2
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003688:	2303      	movs	r3, #3
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800368c:	2301      	movs	r3, #1
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003690:	2308      	movs	r3, #8
 8003692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003694:	2302      	movs	r3, #2
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003698:	2302      	movs	r3, #2
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800369c:	2302      	movs	r3, #2
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a0:	f107 0318 	add.w	r3, r7, #24
 80036a4:	4618      	mov	r0, r3
 80036a6:	f003 f88b 	bl	80067c0 <HAL_RCC_OscConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80036b0:	f000 fc0a 	bl	8003ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b4:	230f      	movs	r3, #15
 80036b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036b8:	2303      	movs	r3, #3
 80036ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036c8:	1d3b      	adds	r3, r7, #4
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fb89 	bl	8006de4 <HAL_RCC_ClockConfig>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80036d8:	f000 fbf6 	bl	8003ec8 <Error_Handler>
  }
}
 80036dc:	bf00      	nop
 80036de:	3750      	adds	r7, #80	; 0x50
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80036ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	2220      	movs	r2, #32
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 fc75 	bl	8007fec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003702:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <MX_ADC1_Init+0x108>)
 8003704:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003708:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800370a:	4b38      	ldr	r3, [pc, #224]	; (80037ec <MX_ADC1_Init+0x108>)
 800370c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003710:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <MX_ADC1_Init+0x108>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <MX_ADC1_Init+0x108>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <MX_ADC1_Init+0x108>)
 8003720:	2200      	movs	r2, #0
 8003722:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <MX_ADC1_Init+0x108>)
 8003726:	2201      	movs	r2, #1
 8003728:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800372a:	4b30      	ldr	r3, [pc, #192]	; (80037ec <MX_ADC1_Init+0x108>)
 800372c:	2204      	movs	r2, #4
 800372e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003730:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <MX_ADC1_Init+0x108>)
 8003732:	2200      	movs	r2, #0
 8003734:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <MX_ADC1_Init+0x108>)
 8003738:	2200      	movs	r2, #0
 800373a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <MX_ADC1_Init+0x108>)
 800373e:	2202      	movs	r2, #2
 8003740:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <MX_ADC1_Init+0x108>)
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <MX_ADC1_Init+0x108>)
 800374c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8003750:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <MX_ADC1_Init+0x108>)
 8003754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <MX_ADC1_Init+0x108>)
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <MX_ADC1_Init+0x108>)
 8003764:	2200      	movs	r2, #0
 8003766:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <MX_ADC1_Init+0x108>)
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003770:	481e      	ldr	r0, [pc, #120]	; (80037ec <MX_ADC1_Init+0x108>)
 8003772:	f001 f8db 	bl	800492c <HAL_ADC_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800377c:	f000 fba4 	bl	8003ec8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003788:	4619      	mov	r1, r3
 800378a:	4818      	ldr	r0, [pc, #96]	; (80037ec <MX_ADC1_Init+0x108>)
 800378c:	f002 f8cc 	bl	8005928 <HAL_ADCEx_MultiModeConfigChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8003796:	f000 fb97 	bl	8003ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <MX_ADC1_Init+0x10c>)
 800379c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800379e:	2306      	movs	r3, #6
 80037a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80037a2:	2305      	movs	r3, #5
 80037a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037a6:	237f      	movs	r3, #127	; 0x7f
 80037a8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037aa:	2304      	movs	r3, #4
 80037ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	4619      	mov	r1, r3
 80037b6:	480d      	ldr	r0, [pc, #52]	; (80037ec <MX_ADC1_Init+0x108>)
 80037b8:	f001 fb3a 	bl	8004e30 <HAL_ADC_ConfigChannel>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80037c2:	f000 fb81 	bl	8003ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <MX_ADC1_Init+0x110>)
 80037c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80037ca:	230c      	movs	r3, #12
 80037cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4806      	ldr	r0, [pc, #24]	; (80037ec <MX_ADC1_Init+0x108>)
 80037d4:	f001 fb2c 	bl	8004e30 <HAL_ADC_ConfigChannel>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80037de:	f000 fb73 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037e2:	bf00      	nop
 80037e4:	3730      	adds	r7, #48	; 0x30
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20008854 	.word	0x20008854
 80037f0:	04300002 	.word	0x04300002
 80037f4:	08600004 	.word	0x08600004

080037f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037fe:	463b      	mov	r3, r7
 8003800:	2220      	movs	r2, #32
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f004 fbf1 	bl	8007fec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <MX_ADC2_Init+0xe0>)
 800380c:	4a33      	ldr	r2, [pc, #204]	; (80038dc <MX_ADC2_Init+0xe4>)
 800380e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003816:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <MX_ADC2_Init+0xe0>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003824:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <MX_ADC2_Init+0xe0>)
 800382c:	2201      	movs	r2, #1
 800382e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003830:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003832:	2204      	movs	r2, #4
 8003834:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003836:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800383c:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <MX_ADC2_Init+0xe0>)
 800383e:	2200      	movs	r2, #0
 8003840:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003844:	2202      	movs	r2, #2
 8003846:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003848:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <MX_ADC2_Init+0xe0>)
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8003850:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003852:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <MX_ADC2_Init+0xe0>)
 800385a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <MX_ADC2_Init+0xe0>)
 800386a:	2200      	movs	r2, #0
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800386e:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003876:	4818      	ldr	r0, [pc, #96]	; (80038d8 <MX_ADC2_Init+0xe0>)
 8003878:	f001 f858 	bl	800492c <HAL_ADC_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003882:	f000 fb21 	bl	8003ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <MX_ADC2_Init+0xe8>)
 8003888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800388a:	2306      	movs	r3, #6
 800388c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800388e:	2305      	movs	r3, #5
 8003890:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003892:	237f      	movs	r3, #127	; 0x7f
 8003894:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003896:	2304      	movs	r3, #4
 8003898:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800389e:	463b      	mov	r3, r7
 80038a0:	4619      	mov	r1, r3
 80038a2:	480d      	ldr	r0, [pc, #52]	; (80038d8 <MX_ADC2_Init+0xe0>)
 80038a4:	f001 fac4 	bl	8004e30 <HAL_ADC_ConfigChannel>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80038ae:	f000 fb0b 	bl	8003ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_ADC2_Init+0xec>)
 80038b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038b6:	230c      	movs	r3, #12
 80038b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038ba:	463b      	mov	r3, r7
 80038bc:	4619      	mov	r1, r3
 80038be:	4806      	ldr	r0, [pc, #24]	; (80038d8 <MX_ADC2_Init+0xe0>)
 80038c0:	f001 fab6 	bl	8004e30 <HAL_ADC_ConfigChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80038ca:	f000 fafd 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80038ce:	bf00      	nop
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200088c0 	.word	0x200088c0
 80038dc:	50000100 	.word	0x50000100
 80038e0:	0c900008 	.word	0x0c900008
 80038e4:	10c00010 	.word	0x10c00010

080038e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038ee:	463b      	mov	r3, r7
 80038f0:	2220      	movs	r2, #32
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 fb79 	bl	8007fec <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80038fa:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <MX_ADC3_Init+0xe0>)
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <MX_ADC3_Init+0xe4>)
 80038fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003900:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003906:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003908:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <MX_ADC3_Init+0xe0>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800390e:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8003914:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <MX_ADC3_Init+0xe0>)
 800391c:	2201      	movs	r2, #1
 800391e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003922:	2204      	movs	r2, #4
 8003924:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800392c:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <MX_ADC3_Init+0xe0>)
 800392e:	2200      	movs	r2, #0
 8003930:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8003932:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003934:	2202      	movs	r2, #2
 8003936:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <MX_ADC3_Init+0xe0>)
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003942:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <MX_ADC3_Init+0xe0>)
 800394a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <MX_ADC3_Init+0xe0>)
 800395a:	2200      	movs	r2, #0
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800395e:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003966:	4818      	ldr	r0, [pc, #96]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003968:	f000 ffe0 	bl	800492c <HAL_ADC_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8003972:	f000 faa9 	bl	8003ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <MX_ADC3_Init+0xe8>)
 8003978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800397a:	2306      	movs	r3, #6
 800397c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800397e:	2305      	movs	r3, #5
 8003980:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003982:	237f      	movs	r3, #127	; 0x7f
 8003984:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003986:	2304      	movs	r3, #4
 8003988:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800398e:	463b      	mov	r3, r7
 8003990:	4619      	mov	r1, r3
 8003992:	480d      	ldr	r0, [pc, #52]	; (80039c8 <MX_ADC3_Init+0xe0>)
 8003994:	f001 fa4c 	bl	8004e30 <HAL_ADC_ConfigChannel>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 800399e:	f000 fa93 	bl	8003ec8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <MX_ADC3_Init+0xec>)
 80039a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039a6:	230c      	movs	r3, #12
 80039a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80039aa:	463b      	mov	r3, r7
 80039ac:	4619      	mov	r1, r3
 80039ae:	4806      	ldr	r0, [pc, #24]	; (80039c8 <MX_ADC3_Init+0xe0>)
 80039b0:	f001 fa3e 	bl	8004e30 <HAL_ADC_ConfigChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 80039ba:	f000 fa85 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80039be:	bf00      	nop
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000892c 	.word	0x2000892c
 80039cc:	50000400 	.word	0x50000400
 80039d0:	04300002 	.word	0x04300002
 80039d4:	08600004 	.word	0x08600004

080039d8 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <MX_FMAC_Init+0x20>)
 80039de:	4a07      	ldr	r2, [pc, #28]	; (80039fc <MX_FMAC_Init+0x24>)
 80039e0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80039e2:	4805      	ldr	r0, [pc, #20]	; (80039f8 <MX_FMAC_Init+0x20>)
 80039e4:	f002 fc0a 	bl	80061fc <HAL_FMAC_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80039ee:	f000 fa6b 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20008ab8 	.word	0x20008ab8
 80039fc:	40021400 	.word	0x40021400

08003a00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <MX_TIM6_Init+0x64>)
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <MX_TIM6_Init+0x68>)
 8003a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <MX_TIM6_Init+0x64>)
 8003a18:	2207      	movs	r2, #7
 8003a1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <MX_TIM6_Init+0x64>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <MX_TIM6_Init+0x64>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <MX_TIM6_Init+0x64>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a2e:	480d      	ldr	r0, [pc, #52]	; (8003a64 <MX_TIM6_Init+0x64>)
 8003a30:	f003 fdf4 	bl	800761c <HAL_TIM_Base_Init>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003a3a:	f000 fa45 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a3e:	2320      	movs	r3, #32
 8003a40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4806      	ldr	r0, [pc, #24]	; (8003a64 <MX_TIM6_Init+0x64>)
 8003a4c:	f004 f878 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003a56:	f000 fa37 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20008af0 	.word	0x20008af0
 8003a68:	40001000 	.word	0x40001000

08003a6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <MX_TIM7_Init+0x64>)
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <MX_TIM7_Init+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 8003a82:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <MX_TIM7_Init+0x64>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <MX_TIM7_Init+0x64>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <MX_TIM7_Init+0x64>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <MX_TIM7_Init+0x64>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003a9a:	480d      	ldr	r0, [pc, #52]	; (8003ad0 <MX_TIM7_Init+0x64>)
 8003a9c:	f003 fdbe 	bl	800761c <HAL_TIM_Base_Init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003aa6:	f000 fa0f 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003aaa:	2320      	movs	r3, #32
 8003aac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003ab2:	1d3b      	adds	r3, r7, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4806      	ldr	r0, [pc, #24]	; (8003ad0 <MX_TIM7_Init+0x64>)
 8003ab8:	f004 f842 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003ac2:	f000 fa01 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20008b3c 	.word	0x20008b3c
 8003ad4:	40001400 	.word	0x40001400

08003ad8 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ade:	f107 030c 	add.w	r3, r7, #12
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aee:	463b      	mov	r3, r7
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003afa:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <MX_TIM20_Init+0xa4>)
 8003afc:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8003afe:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8003b22:	4815      	ldr	r0, [pc, #84]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b24:	f003 fd7a 	bl	800761c <HAL_TIM_Base_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8003b2e:	f000 f9cb 	bl	8003ec8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8003b3a:	f107 030c 	add.w	r3, r7, #12
 8003b3e:	4619      	mov	r1, r3
 8003b40:	480d      	ldr	r0, [pc, #52]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b42:	f003 fdc2 	bl	80076ca <HAL_TIM_SlaveConfigSynchro>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 8003b4c:	f000 f9bc 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b50:	2320      	movs	r3, #32
 8003b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b54:	2300      	movs	r3, #0
 8003b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4805      	ldr	r0, [pc, #20]	; (8003b78 <MX_TIM20_Init+0xa0>)
 8003b62:	f003 ffed 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8003b6c:	f000 f9ac 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8003b70:	bf00      	nop
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20008b88 	.word	0x20008b88
 8003b7c:	40015000 	.word	0x40015000

08003b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <MX_DMA_Init+0x88>)
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <MX_DMA_Init+0x88>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6493      	str	r3, [r2, #72]	; 0x48
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <MX_DMA_Init+0x88>)
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <MX_DMA_Init+0x88>)
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <MX_DMA_Init+0x88>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6493      	str	r3, [r2, #72]	; 0x48
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <MX_DMA_Init+0x88>)
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <MX_DMA_Init+0x88>)
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <MX_DMA_Init+0x88>)
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	6493      	str	r3, [r2, #72]	; 0x48
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <MX_DMA_Init+0x88>)
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	200b      	movs	r0, #11
 8003bd4:	f002 f86b 	bl	8005cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003bd8:	200b      	movs	r0, #11
 8003bda:	f002 f882 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2010      	movs	r0, #16
 8003be4:	f002 f863 	bl	8005cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003be8:	2010      	movs	r0, #16
 8003bea:	f002 f87a 	bl	8005ce2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	2038      	movs	r0, #56	; 0x38
 8003bf4:	f002 f85b 	bl	8005cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003bf8:	2038      	movs	r0, #56	; 0x38
 8003bfa:	f002 f872 	bl	8005ce2 <HAL_NVIC_EnableIRQ>

}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000

08003c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c60:	f043 0310 	orr.w	r3, r3, #16
 8003c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <MX_GPIO_Init+0x74>)
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000

08003c84 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c94:	d123      	bne.n	8003cde <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 8003c96:	f7fe fed5 	bl	8002a44 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 8003c9a:	4b3c      	ldr	r3, [pc, #240]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8003ca6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003caa:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 8003cae:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a36      	ldr	r2, [pc, #216]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cba:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8003cbe:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003cc2:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 8003cc6:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a30      	ldr	r2, [pc, #192]	; (8003d8c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003cd2:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8003cd6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003cda:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }


	 if (hadc->Instance == ADC2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d123      	bne.n	8003d30 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8003ce8:	f7fe ff48 	bl	8002b7c <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8003cf8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003cfc:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8003d00:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a23      	ldr	r2, [pc, #140]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d0c:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8003d10:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003d14:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003d24:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8003d28:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003d2c:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }

	 if (hadc->Instance == ADC3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d123      	bne.n	8003d82 <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 8003d3a:	f7fe ffbb 	bl	8002cb4 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	f8d3 39c4 	ldr.w	r3, [r3, #2500]	; 0x9c4
 8003d4a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d4e:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d5e:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	; 0xbf4
 8003d62:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003d66:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003d76:	f8d3 3f80 	ldr.w	r3, [r3, #3968]	; 0xf80
 8003d7a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003d7e:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
	   }
};
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20008bd4 	.word	0x20008bd4
 8003d90:	50000100 	.word	0x50000100
 8003d94:	20008bd8 	.word	0x20008bd8
 8003d98:	50000400 	.word	0x50000400
 8003d9c:	20008bdc 	.word	0x20008bdc

08003da0 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db0:	d125      	bne.n	8003dfe <HAL_ADC_ConvCpltCallback+0x5e>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 8003db2:	f7fe fe93 	bl	8002adc <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 8003db6:	4b3f      	ldr	r3, [pc, #252]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc2:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8003dc6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003dca:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8003dce:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003dda:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8003dde:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003de2:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a32      	ldr	r2, [pc, #200]	; (8003eb4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003df2:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8003df6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003dfa:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}


	  if (hadc->Instance == ADC2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <HAL_ADC_ConvCpltCallback+0x118>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d125      	bne.n	8003e54 <HAL_ADC_ConvCpltCallback+0xb4>

		{
		     ADC2_DMA_sort_lhb();
 8003e08:	f7fe ff04 	bl	8002c14 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e18:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8003e1c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003e20:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003e30:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8003e34:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003e38:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003e48:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8003e4c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003e50:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

	   if (hadc->Instance == ADC3)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_ADC_ConvCpltCallback+0x120>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d125      	bne.n	8003eaa <HAL_ADC_ConvCpltCallback+0x10a>

		{
		     ADC3_DMA_sort_lhb();
 8003e5e:	f7fe ff75 	bl	8002d4c <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8003e62:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x124>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a17      	ldr	r2, [pc, #92]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x124>)
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8003e72:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003e76:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x124>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x124>)
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8003e86:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	; 0x5b8
 8003e8a:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003e8e:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x124>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a0b      	ldr	r2, [pc, #44]	; (8003ec4 <HAL_ADC_ConvCpltCallback+0x124>)
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003e9e:	f8d3 3944 	ldr.w	r3, [r3, #2372]	; 0x944
 8003ea2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003ea6:	f8c2 3e28 	str.w	r3, [r2, #3624]	; 0xe28
		}

};
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20008bd4 	.word	0x20008bd4
 8003eb8:	50000100 	.word	0x50000100
 8003ebc:	20008bd8 	.word	0x20008bd8
 8003ec0:	50000400 	.word	0x50000400
 8003ec4:	20008bdc 	.word	0x20008bdc

08003ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ecc:	b672      	cpsid	i
}
 8003ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <Error_Handler+0x8>
	...

08003ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <HAL_MspInit+0x44>)
 8003edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ede:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <HAL_MspInit+0x44>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_MspInit+0x44>)
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_MspInit+0x44>)
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <HAL_MspInit+0x44>)
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6593      	str	r3, [r2, #88]	; 0x58
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_MspInit+0x44>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003f0a:	f002 fc49 	bl	80067a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000

08003f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b0a2      	sub	sp, #136	; 0x88
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f38:	2250      	movs	r2, #80	; 0x50
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f004 f855 	bl	8007fec <memset>
  if(hadc->Instance==ADC1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f4a:	d169      	bne.n	8004020 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003f52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f56:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f003 f921 	bl	80071a4 <HAL_RCCEx_PeriphCLKConfig>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003f68:	f7ff ffae 	bl	8003ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <HAL_ADC_MspInit+0x1e4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	4a63      	ldr	r2, [pc, #396]	; (8004100 <HAL_ADC_MspInit+0x1e4>)
 8003f74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003f76:	4b62      	ldr	r3, [pc, #392]	; (8004100 <HAL_ADC_MspInit+0x1e4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10b      	bne.n	8003f96 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003f7e:	4b61      	ldr	r3, [pc, #388]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	4a60      	ldr	r2, [pc, #384]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8003f84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8a:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	4a5a      	ldr	r2, [pc, #360]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa2:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fc4:	f002 f9c6 	bl	8006354 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fc8:	4b4f      	ldr	r3, [pc, #316]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003fca:	4a50      	ldr	r2, [pc, #320]	; (800410c <HAL_ADC_MspInit+0x1f0>)
 8003fcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003fce:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003fd0:	2205      	movs	r2, #5
 8003fd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fd4:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fda:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fe0:	4b49      	ldr	r3, [pc, #292]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fe6:	4b48      	ldr	r3, [pc, #288]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fee:	4b46      	ldr	r3, [pc, #280]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ffc:	4b42      	ldr	r3, [pc, #264]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004002:	4841      	ldr	r0, [pc, #260]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8004004:	f001 fe88 	bl	8005d18 <HAL_DMA_Init>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800400e:	f7ff ff5b 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 8004016:	655a      	str	r2, [r3, #84]	; 0x54
 8004018:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <HAL_ADC_MspInit+0x1ec>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800401e:	e0fa      	b.n	8004216 <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3a      	ldr	r2, [pc, #232]	; (8004110 <HAL_ADC_MspInit+0x1f4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d178      	bne.n	800411c <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004030:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004034:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403a:	4618      	mov	r0, r3
 800403c:	f003 f8b2 	bl	80071a4 <HAL_RCCEx_PeriphCLKConfig>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8004046:	f7ff ff3f 	bl	8003ec8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800404a:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <HAL_ADC_MspInit+0x1e4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <HAL_ADC_MspInit+0x1e4>)
 8004052:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_ADC_MspInit+0x1e4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d10b      	bne.n	8004074 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8004062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 800406a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004074:	4b23      	ldr	r3, [pc, #140]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8004076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_ADC_MspInit+0x1e8>)
 8004082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800408c:	23c0      	movs	r3, #192	; 0xc0
 800408e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004090:	2303      	movs	r3, #3
 8004092:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800409c:	4619      	mov	r1, r3
 800409e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040a2:	f002 f957 	bl	8006354 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040a8:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <HAL_ADC_MspInit+0x1fc>)
 80040aa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040ae:	2224      	movs	r2, #36	; 0x24
 80040b0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ca:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040d6:	2220      	movs	r2, #32
 80040d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80040e0:	480c      	ldr	r0, [pc, #48]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040e2:	f001 fe19 	bl	8005d18 <HAL_DMA_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80040ec:	f7ff feec 	bl	8003ec8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_ADC_MspInit+0x1f8>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80040fc:	e08b      	b.n	8004216 <HAL_ADC_MspInit+0x2fa>
 80040fe:	bf00      	nop
 8004100:	2000db74 	.word	0x2000db74
 8004104:	40021000 	.word	0x40021000
 8004108:	20008998 	.word	0x20008998
 800410c:	40020008 	.word	0x40020008
 8004110:	50000100 	.word	0x50000100
 8004114:	200089f8 	.word	0x200089f8
 8004118:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a3f      	ldr	r2, [pc, #252]	; (8004220 <HAL_ADC_MspInit+0x304>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d177      	bne.n	8004216 <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8004126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800412c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004130:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004136:	4618      	mov	r0, r3
 8004138:	f003 f834 	bl	80071a4 <HAL_RCCEx_PeriphCLKConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8004142:	f7ff fec1 	bl	8003ec8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_ADC_MspInit+0x308>)
 8004148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414a:	4a36      	ldr	r2, [pc, #216]	; (8004224 <HAL_ADC_MspInit+0x308>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004152:	4b34      	ldr	r3, [pc, #208]	; (8004224 <HAL_ADC_MspInit+0x308>)
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <HAL_ADC_MspInit+0x308>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	4a30      	ldr	r2, [pc, #192]	; (8004224 <HAL_ADC_MspInit+0x308>)
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <HAL_ADC_MspInit+0x308>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004176:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_ADC_MspInit+0x308>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <HAL_ADC_MspInit+0x308>)
 800417c:	f043 0310 	orr.w	r3, r3, #16
 8004180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_ADC_MspInit+0x308>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800418e:	2302      	movs	r3, #2
 8004190:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004192:	2303      	movs	r3, #3
 8004194:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800419e:	4619      	mov	r1, r3
 80041a0:	4821      	ldr	r0, [pc, #132]	; (8004228 <HAL_ADC_MspInit+0x30c>)
 80041a2:	f002 f8d7 	bl	8006354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ac:	2303      	movs	r3, #3
 80041ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041b8:	4619      	mov	r1, r3
 80041ba:	481c      	ldr	r0, [pc, #112]	; (800422c <HAL_ADC_MspInit+0x310>)
 80041bc:	f002 f8ca 	bl	8006354 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041c2:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <HAL_ADC_MspInit+0x318>)
 80041c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041c8:	2225      	movs	r2, #37	; 0x25
 80041ca:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ec:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041f0:	2220      	movs	r2, #32
 80041f2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80041fa:	480d      	ldr	r0, [pc, #52]	; (8004230 <HAL_ADC_MspInit+0x314>)
 80041fc:	f001 fd8c 	bl	8005d18 <HAL_DMA_Init>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8004206:	f7ff fe5f 	bl	8003ec8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a08      	ldr	r2, [pc, #32]	; (8004230 <HAL_ADC_MspInit+0x314>)
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <HAL_ADC_MspInit+0x314>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004216:	bf00      	nop
 8004218:	3788      	adds	r7, #136	; 0x88
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	50000400 	.word	0x50000400
 8004224:	40021000 	.word	0x40021000
 8004228:	48000400 	.word	0x48000400
 800422c:	48001000 	.word	0x48001000
 8004230:	20008a58 	.word	0x20008a58
 8004234:	40020408 	.word	0x40020408

08004238 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <HAL_FMAC_MspInit+0x38>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10b      	bne.n	8004262 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_FMAC_MspInit+0x3c>)
 800424c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <HAL_FMAC_MspInit+0x3c>)
 8004250:	f043 0310 	orr.w	r3, r3, #16
 8004254:	6493      	str	r3, [r2, #72]	; 0x48
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_FMAC_MspInit+0x3c>)
 8004258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40021400 	.word	0x40021400
 8004274:	40021000 	.word	0x40021000

08004278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <HAL_TIM_Base_MspInit+0x80>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10c      	bne.n	80042a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 8004290:	f043 0310 	orr.w	r3, r3, #16
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80042a2:	e022      	b.n	80042ea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a15      	ldr	r2, [pc, #84]	; (8004300 <HAL_TIM_Base_MspInit+0x88>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10c      	bne.n	80042c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	4a12      	ldr	r2, [pc, #72]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 80042b4:	f043 0320 	orr.w	r3, r3, #32
 80042b8:	6593      	str	r3, [r2, #88]	; 0x58
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]
}
 80042c6:	e010      	b.n	80042ea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <HAL_TIM_Base_MspInit+0x8c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10b      	bne.n	80042ea <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 80042d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 80042d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042dc:	6613      	str	r3, [r2, #96]	; 0x60
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <HAL_TIM_Base_MspInit+0x84>)
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40001000 	.word	0x40001000
 80042fc:	40021000 	.word	0x40021000
 8004300:	40001400 	.word	0x40001400
 8004304:	40015000 	.word	0x40015000

08004308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800430c:	e7fe      	b.n	800430c <NMI_Handler+0x4>

0800430e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004312:	e7fe      	b.n	8004312 <HardFault_Handler+0x4>

08004314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004318:	e7fe      	b.n	8004318 <MemManage_Handler+0x4>

0800431a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800431e:	e7fe      	b.n	800431e <BusFault_Handler+0x4>

08004320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004324:	e7fe      	b.n	8004324 <UsageFault_Handler+0x4>

08004326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004354:	f000 f8ae 	bl	80044b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}

0800435c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <DMA1_Channel1_IRQHandler+0x10>)
 8004362:	f001 fdfc 	bl	8005f5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20008998 	.word	0x20008998

08004370 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <DMA1_Channel6_IRQHandler+0x10>)
 8004376:	f001 fdf2 	bl	8005f5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200089f8 	.word	0x200089f8

08004384 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <DMA2_Channel1_IRQHandler+0x10>)
 800438a:	f001 fde8 	bl	8005f5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20008a58 	.word	0x20008a58

08004398 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <SystemInit+0x20>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <SystemInit+0x20>)
 80043a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043bc:	480d      	ldr	r0, [pc, #52]	; (80043f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043c0:	f7ff ffea 	bl	8004398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043c4:	480c      	ldr	r0, [pc, #48]	; (80043f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80043c6:	490d      	ldr	r1, [pc, #52]	; (80043fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80043c8:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <LoopForever+0xe>)
  movs r3, #0
 80043ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80043cc:	e002      	b.n	80043d4 <LoopCopyDataInit>

080043ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043d2:	3304      	adds	r3, #4

080043d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043d8:	d3f9      	bcc.n	80043ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043dc:	4c0a      	ldr	r4, [pc, #40]	; (8004408 <LoopForever+0x16>)
  movs r3, #0
 80043de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e0:	e001      	b.n	80043e6 <LoopFillZerobss>

080043e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043e4:	3204      	adds	r2, #4

080043e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043e8:	d3fb      	bcc.n	80043e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043ea:	f003 fe0d 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043ee:	f7fe fcfd 	bl	8002dec <main>

080043f2 <LoopForever>:

LoopForever:
    b LoopForever
 80043f2:	e7fe      	b.n	80043f2 <LoopForever>
  ldr   r0, =_estack
 80043f4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80043f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043fc:	200078d8 	.word	0x200078d8
  ldr r2, =_sidata
 8004400:	0800828c 	.word	0x0800828c
  ldr r2, =_sbss
 8004404:	200078d8 	.word	0x200078d8
  ldr r4, =_ebss
 8004408:	2000dcb4 	.word	0x2000dcb4

0800440c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800440c:	e7fe      	b.n	800440c <ADC1_2_IRQHandler>

0800440e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004418:	2003      	movs	r0, #3
 800441a:	f001 fc3d 	bl	8005c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800441e:	200f      	movs	r0, #15
 8004420:	f000 f80e 	bl	8004440 <HAL_InitTick>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	71fb      	strb	r3, [r7, #7]
 800442e:	e001      	b.n	8004434 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004430:	f7ff fd50 	bl	8003ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004434:	79fb      	ldrb	r3, [r7, #7]

}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_InitTick+0x68>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d022      	beq.n	800449a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <HAL_InitTick+0x6c>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_InitTick+0x68>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004460:	fbb1 f3f3 	udiv	r3, r1, r3
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	4618      	mov	r0, r3
 800446a:	f001 fc48 	bl	8005cfe <HAL_SYSTICK_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10f      	bne.n	8004494 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	d809      	bhi.n	800448e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800447a:	2200      	movs	r2, #0
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	f04f 30ff 	mov.w	r0, #4294967295
 8004482:	f001 fc14 	bl	8005cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004486:	4a0a      	ldr	r2, [pc, #40]	; (80044b0 <HAL_InitTick+0x70>)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e007      	b.n	800449e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e004      	b.n	800449e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
 8004498:	e001      	b.n	800449e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20007870 	.word	0x20007870
 80044ac:	20007868 	.word	0x20007868
 80044b0:	2000786c 	.word	0x2000786c

080044b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_IncTick+0x1c>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_IncTick+0x20>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4413      	add	r3, r2
 80044c2:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <HAL_IncTick+0x1c>)
 80044c4:	6013      	str	r3, [r2, #0]
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	2000db78 	.word	0x2000db78
 80044d4:	20007870 	.word	0x20007870

080044d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return uwTick;
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_GetTick+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000db78 	.word	0x2000db78

080044f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3360      	adds	r3, #96	; 0x60
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <LL_ADC_SetOffset+0x44>)
 800457a:	4013      	ands	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	03fff000 	.word	0x03fff000

080045a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3360      	adds	r3, #96	; 0x60
 80045ae:	461a      	mov	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3360      	adds	r3, #96	; 0x60
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004602:	b480      	push	{r7}
 8004604:	b087      	sub	sp, #28
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3360      	adds	r3, #96	; 0x60
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	431a      	orrs	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3360      	adds	r3, #96	; 0x60
 8004648:	461a      	mov	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	431a      	orrs	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	615a      	str	r2, [r3, #20]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b087      	sub	sp, #28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3330      	adds	r3, #48	; 0x30
 80046ca:	461a      	mov	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	4413      	add	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	211f      	movs	r1, #31
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	401a      	ands	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0e9b      	lsrs	r3, r3, #26
 80046f2:	f003 011f 	and.w	r1, r3, #31
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	431a      	orrs	r2, r3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004712:	b480      	push	{r7}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3314      	adds	r3, #20
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	0e5b      	lsrs	r3, r3, #25
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	4413      	add	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	0d1b      	lsrs	r3, r3, #20
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2107      	movs	r1, #7
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	401a      	ands	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	0d1b      	lsrs	r3, r3, #20
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	431a      	orrs	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0318 	and.w	r3, r3, #24
 800478a:	4908      	ldr	r1, [pc, #32]	; (80047ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800478c:	40d9      	lsrs	r1, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	400b      	ands	r3, r1
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	431a      	orrs	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	0007ffff 	.word	0x0007ffff

080047b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 031f 	and.w	r3, r3, #31
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80047dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6093      	str	r3, [r2, #8]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004804:	d101      	bne.n	800480a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800482c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004854:	d101      	bne.n	800485a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <LL_ADC_IsEnabled+0x18>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <LL_ADC_IsEnabled+0x1a>
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048ca:	f043 0204 	orr.w	r2, r3, #4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d101      	bne.n	80048f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d101      	bne.n	800491c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e19b      	b.n	8004c7e <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fae1 	bl	8003f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff3f 	bl	80047f0 <LL_ADC_IsDeepPowerDownEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff25 	bl	80047cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff ff5a 	bl	8004840 <LL_ADC_IsInternalRegulatorEnabled>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d115      	bne.n	80049be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff ff3e 	bl	8004818 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800499c:	4b97      	ldr	r3, [pc, #604]	; (8004bfc <HAL_ADC_Init+0x2d0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	4a97      	ldr	r2, [pc, #604]	; (8004c00 <HAL_ADC_Init+0x2d4>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	099b      	lsrs	r3, r3, #6
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80049b0:	e002      	b.n	80049b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f9      	bne.n	80049b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff3c 	bl	8004840 <LL_ADC_IsInternalRegulatorEnabled>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ff75 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 80049f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f040 8134 	bne.w	8004c6c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 8130 	bne.w	8004c6c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a14:	f043 0202 	orr.w	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff35 	bl	8004890 <LL_ADC_IsEnabled>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d137      	bne.n	8004a9c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a34:	d004      	beq.n	8004a40 <HAL_ADC_Init+0x114>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <HAL_ADC_Init+0x2d8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10f      	bne.n	8004a60 <HAL_ADC_Init+0x134>
 8004a40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a44:	f7ff ff24 	bl	8004890 <LL_ADC_IsEnabled>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	486e      	ldr	r0, [pc, #440]	; (8004c04 <HAL_ADC_Init+0x2d8>)
 8004a4c:	f7ff ff20 	bl	8004890 <LL_ADC_IsEnabled>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4323      	orrs	r3, r4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e008      	b.n	8004a72 <HAL_ADC_Init+0x146>
 8004a60:	4869      	ldr	r0, [pc, #420]	; (8004c08 <HAL_ADC_Init+0x2dc>)
 8004a62:	f7ff ff15 	bl	8004890 <LL_ADC_IsEnabled>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d012      	beq.n	8004a9c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a7e:	d004      	beq.n	8004a8a <HAL_ADC_Init+0x15e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a5f      	ldr	r2, [pc, #380]	; (8004c04 <HAL_ADC_Init+0x2d8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_Init+0x162>
 8004a8a:	4a60      	ldr	r2, [pc, #384]	; (8004c0c <HAL_ADC_Init+0x2e0>)
 8004a8c:	e000      	b.n	8004a90 <HAL_ADC_Init+0x164>
 8004a8e:	4a60      	ldr	r2, [pc, #384]	; (8004c10 <HAL_ADC_Init+0x2e4>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7ff fd2a 	bl	80044f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7f5b      	ldrb	r3, [r3, #29]
 8004aa0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004aa6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004aac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004ab2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d106      	bne.n	8004ad8 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	045b      	lsls	r3, r3, #17
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <HAL_ADC_Init+0x2e8>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	69b9      	ldr	r1, [r7, #24]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff feee 	bl	8004904 <LL_ADC_INJ_IsConversionOngoing>
 8004b28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d17b      	bne.n	8004c28 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d178      	bne.n	8004c28 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b52:	f023 0302 	bic.w	r3, r3, #2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	69b9      	ldr	r1, [r7, #24]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d017      	beq.n	8004b98 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6911      	ldr	r1, [r2, #16]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	430b      	orrs	r3, r1
 8004b92:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004b96:	e013      	b.n	8004bc0 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ba6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d126      	bne.n	8004c18 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004be0:	4311      	orrs	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004be6:	4311      	orrs	r1, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bec:	430a      	orrs	r2, r1
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
 8004bfa:	e015      	b.n	8004c28 <HAL_ADC_Init+0x2fc>
 8004bfc:	20007868 	.word	0x20007868
 8004c00:	053e2d63 	.word	0x053e2d63
 8004c04:	50000100 	.word	0x50000100
 8004c08:	50000400 	.word	0x50000400
 8004c0c:	50000300 	.word	0x50000300
 8004c10:	50000700 	.word	0x50000700
 8004c14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10c      	bne.n	8004c4a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f023 010f 	bic.w	r1, r3, #15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	1e5a      	subs	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
 8004c48:	e007      	b.n	8004c5a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 020f 	bic.w	r2, r2, #15
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c6a:	e007      	b.n	8004c7c <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	f043 0210 	orr.w	r2, r3, #16
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	; 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd90      	pop	{r4, r7, pc}
 8004c86:	bf00      	nop

08004c88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c9c:	d004      	beq.n	8004ca8 <HAL_ADC_Start_DMA+0x20>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a57      	ldr	r2, [pc, #348]	; (8004e00 <HAL_ADC_Start_DMA+0x178>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <HAL_ADC_Start_DMA+0x24>
 8004ca8:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <HAL_ADC_Start_DMA+0x17c>)
 8004caa:	e000      	b.n	8004cae <HAL_ADC_Start_DMA+0x26>
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <HAL_ADC_Start_DMA+0x180>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fd7e 	bl	80047b0 <LL_ADC_GetMultimode>
 8004cb4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fe0f 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 8094 	bne.w	8004df0 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_Start_DMA+0x4e>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e08f      	b.n	8004df6 <HAL_ADC_Start_DMA+0x16e>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a4a      	ldr	r2, [pc, #296]	; (8004e0c <HAL_ADC_Start_DMA+0x184>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d008      	beq.n	8004cfa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	d002      	beq.n	8004cfa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d173      	bne.n	8004de2 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fcc4 	bl	8005688 <ADC_Enable>
 8004d00:	4603      	mov	r3, r0
 8004d02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d166      	bne.n	8004dd8 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a37      	ldr	r2, [pc, #220]	; (8004e00 <HAL_ADC_Start_DMA+0x178>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d002      	beq.n	8004d2e <HAL_ADC_Start_DMA+0xa6>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	e001      	b.n	8004d32 <HAL_ADC_Start_DMA+0xaa>
 8004d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d002      	beq.n	8004d40 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d006      	beq.n	8004d66 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	f023 0206 	bic.w	r2, r3, #6
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60
 8004d64:	e002      	b.n	8004d6c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d70:	4a27      	ldr	r2, [pc, #156]	; (8004e10 <HAL_ADC_Start_DMA+0x188>)
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <HAL_ADC_Start_DMA+0x18c>)
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <HAL_ADC_Start_DMA+0x190>)
 8004d82:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	221c      	movs	r2, #28
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0210 	orr.w	r2, r2, #16
 8004da2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3340      	adds	r3, #64	; 0x40
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f001 f850 	bl	8005e68 <HAL_DMA_Start_IT>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff fd70 	bl	80048b6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004dd6:	e00d      	b.n	8004df4 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004de0:	e008      	b.n	8004df4 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004dee:	e001      	b.n	8004df4 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
 8004df2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	50000100 	.word	0x50000100
 8004e04:	50000300 	.word	0x50000300
 8004e08:	50000700 	.word	0x50000700
 8004e0c:	50000400 	.word	0x50000400
 8004e10:	080057b5 	.word	0x080057b5
 8004e14:	0800588d 	.word	0x0800588d
 8004e18:	080058a9 	.word	0x080058a9

08004e1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b0b6      	sub	sp, #216	; 0xd8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x24>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	f000 bc04 	b.w	800565c <HAL_ADC_ConfigChannel+0x82c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fd3c 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f040 83e8 	bne.w	800563e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7ff fc1d 	bl	80046ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fd2a 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 8004e8a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fd36 	bl	8004904 <LL_ADC_INJ_IsConversionOngoing>
 8004e98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f040 81d9 	bne.w	8005258 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 81d4 	bne.w	8005258 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eb8:	d10f      	bne.n	8004eda <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f7ff fc24 	bl	8004712 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fbcb 	bl	800466e <LL_ADC_SetSamplingTimeCommonConfig>
 8004ed8:	e00e      	b.n	8004ef8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f7ff fc13 	bl	8004712 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fbbb 	bl	800466e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d022      	beq.n	8004f60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6919      	ldr	r1, [r3, #16]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f2a:	f7ff fb15 	bl	8004558 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6919      	ldr	r1, [r3, #16]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7ff fb61 	bl	8004602 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d102      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x126>
 8004f50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f54:	e000      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x128>
 8004f56:	2300      	movs	r3, #0
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f7ff fb6d 	bl	8004638 <LL_ADC_SetOffsetSaturation>
 8004f5e:	e17b      	b.n	8005258 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fb1a 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x15c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fb0f 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 8004f82:	4603      	mov	r3, r0
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	f003 021f 	and.w	r2, r3, #31
 8004f8a:	e01e      	b.n	8004fca <HAL_ADC_ConfigChannel+0x19a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2100      	movs	r1, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fb04 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fa2:	fa93 f3a3 	rbit	r3, r3
 8004fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004fba:	2320      	movs	r3, #32
 8004fbc:	e004      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004fbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d105      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x1b2>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	0e9b      	lsrs	r3, r3, #26
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	e018      	b.n	8005014 <HAL_ADC_ConfigChannel+0x1e4>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004ffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005006:	2320      	movs	r3, #32
 8005008:	e004      	b.n	8005014 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800500a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005014:	429a      	cmp	r2, r3
 8005016:	d106      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2200      	movs	r2, #0
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fad3 	bl	80045cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2101      	movs	r1, #1
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fab7 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 8005032:	4603      	mov	r3, r0
 8005034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x222>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff faac 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 8005048:	4603      	mov	r3, r0
 800504a:	0e9b      	lsrs	r3, r3, #26
 800504c:	f003 021f 	and.w	r2, r3, #31
 8005050:	e01e      	b.n	8005090 <HAL_ADC_ConfigChannel+0x260>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2101      	movs	r1, #1
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff faa1 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 800505e:	4603      	mov	r3, r0
 8005060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005068:	fa93 f3a3 	rbit	r3, r3
 800506c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005070:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005080:	2320      	movs	r3, #32
 8005082:	e004      	b.n	800508e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005088:	fab3 f383 	clz	r3, r3
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x278>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	0e9b      	lsrs	r3, r3, #26
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	e018      	b.n	80050da <HAL_ADC_ConfigChannel+0x2aa>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050b4:	fa93 f3a3 	rbit	r3, r3
 80050b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80050bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80050c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80050cc:	2320      	movs	r3, #32
 80050ce:	e004      	b.n	80050da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80050d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d4:	fab3 f383 	clz	r3, r3
 80050d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050da:	429a      	cmp	r2, r3
 80050dc:	d106      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	2101      	movs	r1, #1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fa70 	bl	80045cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2102      	movs	r1, #2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fa54 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x2e8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fa49 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 800510e:	4603      	mov	r3, r0
 8005110:	0e9b      	lsrs	r3, r3, #26
 8005112:	f003 021f 	and.w	r2, r3, #31
 8005116:	e01e      	b.n	8005156 <HAL_ADC_ConfigChannel+0x326>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2102      	movs	r1, #2
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fa3e 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 8005124:	4603      	mov	r3, r0
 8005126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800512e:	fa93 f3a3 	rbit	r3, r3
 8005132:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800513a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800513e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005146:	2320      	movs	r3, #32
 8005148:	e004      	b.n	8005154 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800514a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <HAL_ADC_ConfigChannel+0x33e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	0e9b      	lsrs	r3, r3, #26
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	e016      	b.n	800519c <HAL_ADC_ConfigChannel+0x36c>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800518e:	2320      	movs	r3, #32
 8005190:	e004      	b.n	800519c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005196:	fab3 f383 	clz	r3, r3
 800519a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800519c:	429a      	cmp	r2, r3
 800519e:	d106      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2102      	movs	r1, #2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fa0f 	bl	80045cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2103      	movs	r1, #3
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff f9f3 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <HAL_ADC_ConfigChannel+0x3aa>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2103      	movs	r1, #3
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff f9e8 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 80051d0:	4603      	mov	r3, r0
 80051d2:	0e9b      	lsrs	r3, r3, #26
 80051d4:	f003 021f 	and.w	r2, r3, #31
 80051d8:	e017      	b.n	800520a <HAL_ADC_ConfigChannel+0x3da>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2103      	movs	r1, #3
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f9dd 	bl	80045a0 <LL_ADC_GetOffsetChannel>
 80051e6:	4603      	mov	r3, r0
 80051e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ec:	fa93 f3a3 	rbit	r3, r3
 80051f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80051f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80051f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80051fc:	2320      	movs	r3, #32
 80051fe:	e003      	b.n	8005208 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005202:	fab3 f383 	clz	r3, r3
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <HAL_ADC_ConfigChannel+0x3f2>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	0e9b      	lsrs	r3, r3, #26
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	e011      	b.n	8005246 <HAL_ADC_ConfigChannel+0x416>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005232:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800523a:	2320      	movs	r3, #32
 800523c:	e003      	b.n	8005246 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800523e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005246:	429a      	cmp	r2, r3
 8005248:	d106      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	2103      	movs	r1, #3
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff f9ba 	bl	80045cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fb17 	bl	8004890 <LL_ADC_IsEnabled>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 813d 	bne.w	80054e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	461a      	mov	r2, r3
 8005278:	f7ff fa76 	bl	8004768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4aa2      	ldr	r2, [pc, #648]	; (800550c <HAL_ADC_ConfigChannel+0x6dc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	f040 812e 	bne.w	80054e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x480>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0e9b      	lsrs	r3, r3, #26
 800529e:	3301      	adds	r3, #1
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2b09      	cmp	r3, #9
 80052a6:	bf94      	ite	ls
 80052a8:	2301      	movls	r3, #1
 80052aa:	2300      	movhi	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e019      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x4b4>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b8:	fa93 f3a3 	rbit	r3, r3
 80052bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80052be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80052c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80052c8:	2320      	movs	r3, #32
 80052ca:	e003      	b.n	80052d4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80052cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ce:	fab3 f383 	clz	r3, r3
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	3301      	adds	r3, #1
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2b09      	cmp	r3, #9
 80052dc:	bf94      	ite	ls
 80052de:	2301      	movls	r3, #1
 80052e0:	2300      	movhi	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d079      	beq.n	80053dc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d107      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x4d4>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0e9b      	lsrs	r3, r3, #26
 80052fa:	3301      	adds	r3, #1
 80052fc:	069b      	lsls	r3, r3, #26
 80052fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005302:	e015      	b.n	8005330 <HAL_ADC_ConfigChannel+0x500>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	fa93 f3a3 	rbit	r3, r3
 8005310:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800531c:	2320      	movs	r3, #32
 800531e:	e003      	b.n	8005328 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005322:	fab3 f383 	clz	r3, r3
 8005326:	b2db      	uxtb	r3, r3
 8005328:	3301      	adds	r3, #1
 800532a:	069b      	lsls	r3, r3, #26
 800532c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x520>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	0e9b      	lsrs	r3, r3, #26
 8005342:	3301      	adds	r3, #1
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2101      	movs	r1, #1
 800534a:	fa01 f303 	lsl.w	r3, r1, r3
 800534e:	e017      	b.n	8005380 <HAL_ADC_ConfigChannel+0x550>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005358:	fa93 f3a3 	rbit	r3, r3
 800535c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800535e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005360:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005368:	2320      	movs	r3, #32
 800536a:	e003      	b.n	8005374 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800536c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	3301      	adds	r3, #1
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	2101      	movs	r1, #1
 800537c:	fa01 f303 	lsl.w	r3, r1, r3
 8005380:	ea42 0103 	orr.w	r1, r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <HAL_ADC_ConfigChannel+0x576>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	0e9b      	lsrs	r3, r3, #26
 8005396:	3301      	adds	r3, #1
 8005398:	f003 021f 	and.w	r2, r3, #31
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	051b      	lsls	r3, r3, #20
 80053a4:	e018      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x5a8>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80053be:	2320      	movs	r3, #32
 80053c0:	e003      	b.n	80053ca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	3301      	adds	r3, #1
 80053cc:	f003 021f 	and.w	r2, r3, #31
 80053d0:	4613      	mov	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053d8:	430b      	orrs	r3, r1
 80053da:	e07e      	b.n	80054da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x5c8>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	3301      	adds	r3, #1
 80053f0:	069b      	lsls	r3, r3, #26
 80053f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053f6:	e015      	b.n	8005424 <HAL_ADC_ConfigChannel+0x5f4>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005410:	2320      	movs	r3, #32
 8005412:	e003      	b.n	800541c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	fab3 f383 	clz	r3, r3
 800541a:	b2db      	uxtb	r3, r3
 800541c:	3301      	adds	r3, #1
 800541e:	069b      	lsls	r3, r3, #26
 8005420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x614>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	0e9b      	lsrs	r3, r3, #26
 8005436:	3301      	adds	r3, #1
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	e017      	b.n	8005474 <HAL_ADC_ConfigChannel+0x644>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	fa93 f3a3 	rbit	r3, r3
 8005450:	61fb      	str	r3, [r7, #28]
  return result;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800545c:	2320      	movs	r3, #32
 800545e:	e003      	b.n	8005468 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	3301      	adds	r3, #1
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2101      	movs	r1, #1
 8005470:	fa01 f303 	lsl.w	r3, r1, r3
 8005474:	ea42 0103 	orr.w	r1, r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10d      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x670>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	0e9b      	lsrs	r3, r3, #26
 800548a:	3301      	adds	r3, #1
 800548c:	f003 021f 	and.w	r2, r3, #31
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	3b1e      	subs	r3, #30
 8005498:	051b      	lsls	r3, r3, #20
 800549a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800549e:	e01b      	b.n	80054d8 <HAL_ADC_ConfigChannel+0x6a8>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	fa93 f3a3 	rbit	r3, r3
 80054ac:	613b      	str	r3, [r7, #16]
  return result;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80054b8:	2320      	movs	r3, #32
 80054ba:	e003      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	fab3 f383 	clz	r3, r3
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	3301      	adds	r3, #1
 80054c6:	f003 021f 	and.w	r2, r3, #31
 80054ca:	4613      	mov	r3, r2
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	4413      	add	r3, r2
 80054d0:	3b1e      	subs	r3, #30
 80054d2:	051b      	lsls	r3, r3, #20
 80054d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054de:	4619      	mov	r1, r3
 80054e0:	f7ff f917 	bl	8004712 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_ADC_ConfigChannel+0x6e0>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80af 	beq.w	8005650 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054fa:	d004      	beq.n	8005506 <HAL_ADC_ConfigChannel+0x6d6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_ADC_ConfigChannel+0x6e4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10a      	bne.n	800551c <HAL_ADC_ConfigChannel+0x6ec>
 8005506:	4b04      	ldr	r3, [pc, #16]	; (8005518 <HAL_ADC_ConfigChannel+0x6e8>)
 8005508:	e009      	b.n	800551e <HAL_ADC_ConfigChannel+0x6ee>
 800550a:	bf00      	nop
 800550c:	407f0000 	.word	0x407f0000
 8005510:	80080000 	.word	0x80080000
 8005514:	50000100 	.word	0x50000100
 8005518:	50000300 	.word	0x50000300
 800551c:	4b51      	ldr	r3, [pc, #324]	; (8005664 <HAL_ADC_ConfigChannel+0x834>)
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff f80c 	bl	800453c <LL_ADC_GetCommonPathInternalCh>
 8005524:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a4e      	ldr	r2, [pc, #312]	; (8005668 <HAL_ADC_ConfigChannel+0x838>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_ADC_ConfigChannel+0x70c>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4d      	ldr	r2, [pc, #308]	; (800566c <HAL_ADC_ConfigChannel+0x83c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d134      	bne.n	80055a6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800553c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d12e      	bne.n	80055a6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005550:	d17e      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800555a:	d004      	beq.n	8005566 <HAL_ADC_ConfigChannel+0x736>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a43      	ldr	r2, [pc, #268]	; (8005670 <HAL_ADC_ConfigChannel+0x840>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d101      	bne.n	800556a <HAL_ADC_ConfigChannel+0x73a>
 8005566:	4a43      	ldr	r2, [pc, #268]	; (8005674 <HAL_ADC_ConfigChannel+0x844>)
 8005568:	e000      	b.n	800556c <HAL_ADC_ConfigChannel+0x73c>
 800556a:	4a3e      	ldr	r2, [pc, #248]	; (8005664 <HAL_ADC_ConfigChannel+0x834>)
 800556c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fe ffcd 	bl	8004516 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800557c:	4b3e      	ldr	r3, [pc, #248]	; (8005678 <HAL_ADC_ConfigChannel+0x848>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	4a3e      	ldr	r2, [pc, #248]	; (800567c <HAL_ADC_ConfigChannel+0x84c>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	099b      	lsrs	r3, r3, #6
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005596:	e002      	b.n	800559e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3b01      	subs	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f9      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055a4:	e054      	b.n	8005650 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a35      	ldr	r2, [pc, #212]	; (8005680 <HAL_ADC_ConfigChannel+0x850>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d120      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d11a      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c4:	d144      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ce:	d004      	beq.n	80055da <HAL_ADC_ConfigChannel+0x7aa>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a26      	ldr	r2, [pc, #152]	; (8005670 <HAL_ADC_ConfigChannel+0x840>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d101      	bne.n	80055de <HAL_ADC_ConfigChannel+0x7ae>
 80055da:	4a26      	ldr	r2, [pc, #152]	; (8005674 <HAL_ADC_ConfigChannel+0x844>)
 80055dc:	e000      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x7b0>
 80055de:	4a21      	ldr	r2, [pc, #132]	; (8005664 <HAL_ADC_ConfigChannel+0x834>)
 80055e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fe ff93 	bl	8004516 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055f0:	e02e      	b.n	8005650 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a23      	ldr	r2, [pc, #140]	; (8005684 <HAL_ADC_ConfigChannel+0x854>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d129      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d123      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a18      	ldr	r2, [pc, #96]	; (8005670 <HAL_ADC_ConfigChannel+0x840>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01e      	beq.n	8005650 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800561a:	d004      	beq.n	8005626 <HAL_ADC_ConfigChannel+0x7f6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <HAL_ADC_ConfigChannel+0x840>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <HAL_ADC_ConfigChannel+0x7fa>
 8005626:	4a13      	ldr	r2, [pc, #76]	; (8005674 <HAL_ADC_ConfigChannel+0x844>)
 8005628:	e000      	b.n	800562c <HAL_ADC_ConfigChannel+0x7fc>
 800562a:	4a0e      	ldr	r2, [pc, #56]	; (8005664 <HAL_ADC_ConfigChannel+0x834>)
 800562c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f7fe ff6d 	bl	8004516 <LL_ADC_SetCommonPathInternalCh>
 800563c:	e008      	b.n	8005650 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	f043 0220 	orr.w	r2, r3, #32
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005658:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800565c:	4618      	mov	r0, r3
 800565e:	37d8      	adds	r7, #216	; 0xd8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	50000700 	.word	0x50000700
 8005668:	c3210000 	.word	0xc3210000
 800566c:	90c00010 	.word	0x90c00010
 8005670:	50000100 	.word	0x50000100
 8005674:	50000300 	.word	0x50000300
 8005678:	20007868 	.word	0x20007868
 800567c:	053e2d63 	.word	0x053e2d63
 8005680:	c7520000 	.word	0xc7520000
 8005684:	cb840000 	.word	0xcb840000

08005688 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff f8f9 	bl	8004890 <LL_ADC_IsEnabled>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d176      	bne.n	8005792 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	4b3c      	ldr	r3, [pc, #240]	; (800579c <ADC_Enable+0x114>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00d      	beq.n	80056ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	f043 0210 	orr.w	r2, r3, #16
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c2:	f043 0201 	orr.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e062      	b.n	8005794 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f8c8 	bl	8004868 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056e0:	d004      	beq.n	80056ec <ADC_Enable+0x64>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2e      	ldr	r2, [pc, #184]	; (80057a0 <ADC_Enable+0x118>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d101      	bne.n	80056f0 <ADC_Enable+0x68>
 80056ec:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <ADC_Enable+0x11c>)
 80056ee:	e000      	b.n	80056f2 <ADC_Enable+0x6a>
 80056f0:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <ADC_Enable+0x120>)
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe ff22 	bl	800453c <LL_ADC_GetCommonPathInternalCh>
 80056f8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80056fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d013      	beq.n	800572a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005702:	4b2a      	ldr	r3, [pc, #168]	; (80057ac <ADC_Enable+0x124>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <ADC_Enable+0x128>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	099b      	lsrs	r3, r3, #6
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	4613      	mov	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800571c:	e002      	b.n	8005724 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	3b01      	subs	r3, #1
 8005722:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f9      	bne.n	800571e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800572a:	f7fe fed5 	bl	80044d8 <HAL_GetTick>
 800572e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005730:	e028      	b.n	8005784 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff f8aa 	bl	8004890 <LL_ADC_IsEnabled>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff f88e 	bl	8004868 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800574c:	f7fe fec4 	bl	80044d8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d914      	bls.n	8005784 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b01      	cmp	r3, #1
 8005766:	d00d      	beq.n	8005784 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	f043 0210 	orr.w	r2, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005778:	f043 0201 	orr.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e007      	b.n	8005794 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d1cf      	bne.n	8005732 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	8000003f 	.word	0x8000003f
 80057a0:	50000100 	.word	0x50000100
 80057a4:	50000300 	.word	0x50000300
 80057a8:	50000700 	.word	0x50000700
 80057ac:	20007868 	.word	0x20007868
 80057b0:	053e2d63 	.word	0x053e2d63

080057b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d14b      	bne.n	8005866 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d021      	beq.n	800582c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe ff51 	bl	8004694 <LL_ADC_REG_IsTriggerSourceSWStart>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d032      	beq.n	800585e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d12b      	bne.n	800585e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11f      	bne.n	800585e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	65da      	str	r2, [r3, #92]	; 0x5c
 800582a:	e018      	b.n	800585e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d111      	bne.n	800585e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d105      	bne.n	800585e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	f043 0201 	orr.w	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7fe fa9e 	bl	8003da0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005864:	e00e      	b.n	8005884 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fad2 	bl	8004e1c <HAL_ADC_ErrorCallback>
}
 8005878:	e004      	b.n	8005884 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7fe f9f2 	bl	8003c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	f043 0204 	orr.w	r2, r3, #4
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff faa4 	bl	8004e1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <LL_ADC_IsEnabled>:
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <LL_ADC_IsEnabled+0x18>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <LL_ADC_IsEnabled+0x1a>
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <LL_ADC_REG_IsConversionOngoing>:
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b04      	cmp	r3, #4
 8005914:	d101      	bne.n	800591a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b0a1      	sub	sp, #132	; 0x84
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005942:	2302      	movs	r3, #2
 8005944:	e0cb      	b.n	8005ade <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800594e:	2300      	movs	r3, #0
 8005950:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005952:	2300      	movs	r3, #0
 8005954:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800595e:	d102      	bne.n	8005966 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005960:	4b61      	ldr	r3, [pc, #388]	; (8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	e001      	b.n	800596a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0aa      	b.n	8005ade <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff ffb9 	bl	8005902 <LL_ADC_REG_IsConversionOngoing>
 8005990:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff ffb3 	bl	8005902 <LL_ADC_REG_IsConversionOngoing>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 808c 	bne.w	8005abc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80059a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f040 8088 	bne.w	8005abc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b4:	d004      	beq.n	80059c0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a4b      	ldr	r2, [pc, #300]	; (8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d101      	bne.n	80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80059c0:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80059c2:	e000      	b.n	80059c6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80059c4:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80059c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d041      	beq.n	8005a54 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80059d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6859      	ldr	r1, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059e2:	035b      	lsls	r3, r3, #13
 80059e4:	430b      	orrs	r3, r1
 80059e6:	431a      	orrs	r2, r3
 80059e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059f4:	d004      	beq.n	8005a00 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a3b      	ldr	r2, [pc, #236]	; (8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10f      	bne.n	8005a20 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005a00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005a04:	f7ff ff6a 	bl	80058dc <LL_ADC_IsEnabled>
 8005a08:	4604      	mov	r4, r0
 8005a0a:	4837      	ldr	r0, [pc, #220]	; (8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a0c:	f7ff ff66 	bl	80058dc <LL_ADC_IsEnabled>
 8005a10:	4603      	mov	r3, r0
 8005a12:	4323      	orrs	r3, r4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e008      	b.n	8005a32 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005a20:	4834      	ldr	r0, [pc, #208]	; (8005af4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005a22:	f7ff ff5b 	bl	80058dc <LL_ADC_IsEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf0c      	ite	eq
 8005a2c:	2301      	moveq	r3, #1
 8005a2e:	2300      	movne	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d04c      	beq.n	8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a3e:	f023 030f 	bic.w	r3, r3, #15
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	6811      	ldr	r1, [r2, #0]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6892      	ldr	r2, [r2, #8]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a50:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a52:	e03d      	b.n	8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a68:	d004      	beq.n	8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10f      	bne.n	8005a94 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8005a74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005a78:	f7ff ff30 	bl	80058dc <LL_ADC_IsEnabled>
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	481a      	ldr	r0, [pc, #104]	; (8005ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005a80:	f7ff ff2c 	bl	80058dc <LL_ADC_IsEnabled>
 8005a84:	4603      	mov	r3, r0
 8005a86:	4323      	orrs	r3, r4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e008      	b.n	8005aa6 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8005a94:	4817      	ldr	r0, [pc, #92]	; (8005af4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005a96:	f7ff ff21 	bl	80058dc <LL_ADC_IsEnabled>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d012      	beq.n	8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ab2:	f023 030f 	bic.w	r3, r3, #15
 8005ab6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ab8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005aba:	e009      	b.n	8005ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005ace:	e000      	b.n	8005ad2 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ad0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ada:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3784      	adds	r7, #132	; 0x84
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	50000100 	.word	0x50000100
 8005aec:	50000300 	.word	0x50000300
 8005af0:	50000700 	.word	0x50000700
 8005af4:	50000400 	.word	0x50000400

08005af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <__NVIC_SetPriorityGrouping+0x44>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b14:	4013      	ands	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2a:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <__NVIC_SetPriorityGrouping+0x44>)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	60d3      	str	r3, [r2, #12]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	e000ed00 	.word	0xe000ed00

08005b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b44:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <__NVIC_GetPriorityGrouping+0x18>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	f003 0307 	and.w	r3, r3, #7
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	e000ed00 	.word	0xe000ed00

08005b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	db0b      	blt.n	8005b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	f003 021f 	and.w	r2, r3, #31
 8005b74:	4907      	ldr	r1, [pc, #28]	; (8005b94 <__NVIC_EnableIRQ+0x38>)
 8005b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	e000e100 	.word	0xe000e100

08005b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	6039      	str	r1, [r7, #0]
 8005ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	db0a      	blt.n	8005bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	490c      	ldr	r1, [pc, #48]	; (8005be4 <__NVIC_SetPriority+0x4c>)
 8005bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb6:	0112      	lsls	r2, r2, #4
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	440b      	add	r3, r1
 8005bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bc0:	e00a      	b.n	8005bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	4908      	ldr	r1, [pc, #32]	; (8005be8 <__NVIC_SetPriority+0x50>)
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	3b04      	subs	r3, #4
 8005bd0:	0112      	lsls	r2, r2, #4
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	761a      	strb	r2, [r3, #24]
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000e100 	.word	0xe000e100
 8005be8:	e000ed00 	.word	0xe000ed00

08005bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	; 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f1c3 0307 	rsb	r3, r3, #7
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	bf28      	it	cs
 8005c0a:	2304      	movcs	r3, #4
 8005c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	3304      	adds	r3, #4
 8005c12:	2b06      	cmp	r3, #6
 8005c14:	d902      	bls.n	8005c1c <NVIC_EncodePriority+0x30>
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	3b03      	subs	r3, #3
 8005c1a:	e000      	b.n	8005c1e <NVIC_EncodePriority+0x32>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c20:	f04f 32ff 	mov.w	r2, #4294967295
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	43da      	mvns	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	401a      	ands	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c34:	f04f 31ff 	mov.w	r1, #4294967295
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3e:	43d9      	mvns	r1, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c44:	4313      	orrs	r3, r2
         );
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3724      	adds	r7, #36	; 0x24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c64:	d301      	bcc.n	8005c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c66:	2301      	movs	r3, #1
 8005c68:	e00f      	b.n	8005c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <SysTick_Config+0x40>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c72:	210f      	movs	r1, #15
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	f7ff ff8e 	bl	8005b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <SysTick_Config+0x40>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c82:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <SysTick_Config+0x40>)
 8005c84:	2207      	movs	r2, #7
 8005c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	e000e010 	.word	0xe000e010

08005c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff29 	bl	8005af8 <__NVIC_SetPriorityGrouping>
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cbc:	f7ff ff40 	bl	8005b40 <__NVIC_GetPriorityGrouping>
 8005cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	6978      	ldr	r0, [r7, #20]
 8005cc8:	f7ff ff90 	bl	8005bec <NVIC_EncodePriority>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff ff5f 	bl	8005b98 <__NVIC_SetPriority>
}
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	4603      	mov	r3, r0
 8005cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff ff33 	bl	8005b5c <__NVIC_EnableIRQ>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff ffa4 	bl	8005c54 <SysTick_Config>
 8005d0c:	4603      	mov	r3, r0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e08d      	b.n	8005e46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <HAL_DMA_Init+0x138>)
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d80f      	bhi.n	8005d56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4b45      	ldr	r3, [pc, #276]	; (8005e54 <HAL_DMA_Init+0x13c>)
 8005d3e:	4413      	add	r3, r2
 8005d40:	4a45      	ldr	r2, [pc, #276]	; (8005e58 <HAL_DMA_Init+0x140>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	009a      	lsls	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a42      	ldr	r2, [pc, #264]	; (8005e5c <HAL_DMA_Init+0x144>)
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40
 8005d54:	e00e      	b.n	8005d74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b40      	ldr	r3, [pc, #256]	; (8005e60 <HAL_DMA_Init+0x148>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	4a3d      	ldr	r2, [pc, #244]	; (8005e58 <HAL_DMA_Init+0x140>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	009a      	lsls	r2, r3, #2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a3c      	ldr	r2, [pc, #240]	; (8005e64 <HAL_DMA_Init+0x14c>)
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9b6 	bl	8006138 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd4:	d102      	bne.n	8005ddc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005df0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <HAL_DMA_Init+0x104>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d80c      	bhi.n	8005e1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f9d6 	bl	80061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	e008      	b.n	8005e2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40020407 	.word	0x40020407
 8005e54:	bffdfff8 	.word	0xbffdfff8
 8005e58:	cccccccd 	.word	0xcccccccd
 8005e5c:	40020000 	.word	0x40020000
 8005e60:	bffdfbf8 	.word	0xbffdfbf8
 8005e64:	40020400 	.word	0x40020400

08005e68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_DMA_Start_IT+0x20>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e066      	b.n	8005f56 <HAL_DMA_Start_IT+0xee>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d155      	bne.n	8005f48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f8fb 	bl	80060bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 020e 	orr.w	r2, r2, #14
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e00f      	b.n	8005f00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0204 	bic.w	r2, r2, #4
 8005eee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 020a 	orr.w	r2, r2, #10
 8005efe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0201 	orr.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e005      	b.n	8005f54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f50:	2302      	movs	r3, #2
 8005f52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	2204      	movs	r2, #4
 8005f80:	409a      	lsls	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d026      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0x7a>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d021      	beq.n	8005fd8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d107      	bne.n	8005fb2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0204 	bic.w	r2, r2, #4
 8005fb0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	f003 021f 	and.w	r2, r3, #31
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	2104      	movs	r1, #4
 8005fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d071      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005fd6:	e06c      	b.n	80060b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f003 031f 	and.w	r3, r3, #31
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d02e      	beq.n	800604a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d029      	beq.n	800604a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10b      	bne.n	800601c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 020a 	bic.w	r2, r2, #10
 8006012:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006020:	f003 021f 	and.w	r2, r3, #31
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	2102      	movs	r1, #2
 800602a:	fa01 f202 	lsl.w	r2, r1, r2
 800602e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d038      	beq.n	80060b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006048:	e033      	b.n	80060b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2208      	movs	r2, #8
 8006054:	409a      	lsls	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4013      	ands	r3, r2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d02a      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d025      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 020e 	bic.w	r2, r2, #14
 8006076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607c:	f003 021f 	and.w	r2, r3, #31
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	2101      	movs	r1, #1
 8006086:	fa01 f202 	lsl.w	r2, r1, r2
 800608a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
}
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80060d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f003 021f 	and.w	r2, r3, #31
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	2101      	movs	r1, #1
 80060f4:	fa01 f202 	lsl.w	r2, r1, r2
 80060f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b10      	cmp	r3, #16
 8006108:	d108      	bne.n	800611c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800611a:	e007      	b.n	800612c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006148:	429a      	cmp	r2, r3
 800614a:	d802      	bhi.n	8006152 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800614c:	4b15      	ldr	r3, [pc, #84]	; (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e001      	b.n	8006156 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006154:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	3b08      	subs	r3, #8
 8006162:	4a12      	ldr	r2, [pc, #72]	; (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	009a      	lsls	r2, r3, #2
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2201      	movs	r2, #1
 800618c:	409a      	lsls	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40020407 	.word	0x40020407
 80061a4:	40020800 	.word	0x40020800
 80061a8:	40020820 	.word	0x40020820
 80061ac:	cccccccd 	.word	0xcccccccd
 80061b0:	40020880 	.word	0x40020880

080061b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	461a      	mov	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80061d6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b01      	subs	r3, #1
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	2201      	movs	r2, #1
 80061e2:	409a      	lsls	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	1000823f 	.word	0x1000823f
 80061f8:	40020940 	.word	0x40020940

080061fc <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e033      	b.n	8006276 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fe f808 	bl	8004238 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f854 	bl	80062dc <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f822 	bl	800627e <FMAC_Reset>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d10c      	bne.n	800625a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	f043 0210 	orr.w	r2, r3, #16
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	22a0      	movs	r2, #160	; 0xa0
 8006250:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e008      	b.n	800626c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006286:	f7fe f927 	bl	80044d8 <HAL_GetTick>
 800628a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800629a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800629c:	e00f      	b.n	80062be <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800629e:	f7fe f91b 	bl	80044d8 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80062ac:	d907      	bls.n	80062be <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e00a      	b.n	80062d4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e8      	bne.n	800629e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f807 	bl	80062f8 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f81b 	bl	8006326 <FMAC_ResetOutputStateAndDataPointers>
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006362:	e15a      	b.n	800661a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	2101      	movs	r1, #1
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	fa01 f303 	lsl.w	r3, r1, r3
 8006370:	4013      	ands	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 814c 	beq.w	8006614 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	2b01      	cmp	r3, #1
 8006386:	d005      	beq.n	8006394 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006390:	2b02      	cmp	r3, #2
 8006392:	d130      	bne.n	80063f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	2203      	movs	r2, #3
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	43db      	mvns	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063ca:	2201      	movs	r2, #1
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43db      	mvns	r3, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	091b      	lsrs	r3, r3, #4
 80063e0:	f003 0201 	and.w	r2, r3, #1
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d017      	beq.n	8006432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	2203      	movs	r2, #3
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4013      	ands	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d123      	bne.n	8006486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	08da      	lsrs	r2, r3, #3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3208      	adds	r2, #8
 8006446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	220f      	movs	r2, #15
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4013      	ands	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	08da      	lsrs	r2, r3, #3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3208      	adds	r2, #8
 8006480:	6939      	ldr	r1, [r7, #16]
 8006482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	2203      	movs	r2, #3
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	43db      	mvns	r3, r3
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4013      	ands	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 0203 	and.w	r2, r3, #3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80a6 	beq.w	8006614 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c8:	4b5b      	ldr	r3, [pc, #364]	; (8006638 <HAL_GPIO_Init+0x2e4>)
 80064ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064cc:	4a5a      	ldr	r2, [pc, #360]	; (8006638 <HAL_GPIO_Init+0x2e4>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6613      	str	r3, [r2, #96]	; 0x60
 80064d4:	4b58      	ldr	r3, [pc, #352]	; (8006638 <HAL_GPIO_Init+0x2e4>)
 80064d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064e0:	4a56      	ldr	r2, [pc, #344]	; (800663c <HAL_GPIO_Init+0x2e8>)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	089b      	lsrs	r3, r3, #2
 80064e6:	3302      	adds	r3, #2
 80064e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	220f      	movs	r2, #15
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4013      	ands	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800650a:	d01f      	beq.n	800654c <HAL_GPIO_Init+0x1f8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a4c      	ldr	r2, [pc, #304]	; (8006640 <HAL_GPIO_Init+0x2ec>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d019      	beq.n	8006548 <HAL_GPIO_Init+0x1f4>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a4b      	ldr	r2, [pc, #300]	; (8006644 <HAL_GPIO_Init+0x2f0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <HAL_GPIO_Init+0x1f0>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a4a      	ldr	r2, [pc, #296]	; (8006648 <HAL_GPIO_Init+0x2f4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00d      	beq.n	8006540 <HAL_GPIO_Init+0x1ec>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a49      	ldr	r2, [pc, #292]	; (800664c <HAL_GPIO_Init+0x2f8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d007      	beq.n	800653c <HAL_GPIO_Init+0x1e8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a48      	ldr	r2, [pc, #288]	; (8006650 <HAL_GPIO_Init+0x2fc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <HAL_GPIO_Init+0x1e4>
 8006534:	2305      	movs	r3, #5
 8006536:	e00a      	b.n	800654e <HAL_GPIO_Init+0x1fa>
 8006538:	2306      	movs	r3, #6
 800653a:	e008      	b.n	800654e <HAL_GPIO_Init+0x1fa>
 800653c:	2304      	movs	r3, #4
 800653e:	e006      	b.n	800654e <HAL_GPIO_Init+0x1fa>
 8006540:	2303      	movs	r3, #3
 8006542:	e004      	b.n	800654e <HAL_GPIO_Init+0x1fa>
 8006544:	2302      	movs	r3, #2
 8006546:	e002      	b.n	800654e <HAL_GPIO_Init+0x1fa>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_GPIO_Init+0x1fa>
 800654c:	2300      	movs	r3, #0
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	f002 0203 	and.w	r2, r2, #3
 8006554:	0092      	lsls	r2, r2, #2
 8006556:	4093      	lsls	r3, r2
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800655e:	4937      	ldr	r1, [pc, #220]	; (800663c <HAL_GPIO_Init+0x2e8>)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	089b      	lsrs	r3, r3, #2
 8006564:	3302      	adds	r3, #2
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800656c:	4b39      	ldr	r3, [pc, #228]	; (8006654 <HAL_GPIO_Init+0x300>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	43db      	mvns	r3, r3
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4013      	ands	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006590:	4a30      	ldr	r2, [pc, #192]	; (8006654 <HAL_GPIO_Init+0x300>)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006596:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <HAL_GPIO_Init+0x300>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	43db      	mvns	r3, r3
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4013      	ands	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065ba:	4a26      	ldr	r2, [pc, #152]	; (8006654 <HAL_GPIO_Init+0x300>)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80065c0:	4b24      	ldr	r3, [pc, #144]	; (8006654 <HAL_GPIO_Init+0x300>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	43db      	mvns	r3, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4013      	ands	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <HAL_GPIO_Init+0x300>)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <HAL_GPIO_Init+0x300>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	43db      	mvns	r3, r3
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4013      	ands	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800660e:	4a11      	ldr	r2, [pc, #68]	; (8006654 <HAL_GPIO_Init+0x300>)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3301      	adds	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	f47f ae9d 	bne.w	8006364 <HAL_GPIO_Init+0x10>
  }
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40021000 	.word	0x40021000
 800663c:	40010000 	.word	0x40010000
 8006640:	48000400 	.word	0x48000400
 8006644:	48000800 	.word	0x48000800
 8006648:	48000c00 	.word	0x48000c00
 800664c:	48001000 	.word	0x48001000
 8006650:	48001400 	.word	0x48001400
 8006654:	40010400 	.word	0x40010400

08006658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d141      	bne.n	80066ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006666:	4b4b      	ldr	r3, [pc, #300]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800666e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006672:	d131      	bne.n	80066d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006674:	4b47      	ldr	r3, [pc, #284]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800667a:	4a46      	ldr	r2, [pc, #280]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006684:	4b43      	ldr	r3, [pc, #268]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800668c:	4a41      	ldr	r2, [pc, #260]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800668e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006694:	4b40      	ldr	r3, [pc, #256]	; (8006798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2232      	movs	r2, #50	; 0x32
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	4a3f      	ldr	r2, [pc, #252]	; (800679c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	0c9b      	lsrs	r3, r3, #18
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066aa:	e002      	b.n	80066b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066b2:	4b38      	ldr	r3, [pc, #224]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066be:	d102      	bne.n	80066c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f2      	bne.n	80066ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066c6:	4b33      	ldr	r3, [pc, #204]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d158      	bne.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e057      	b.n	8006788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066d8:	4b2e      	ldr	r3, [pc, #184]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066de:	4a2d      	ldr	r2, [pc, #180]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066e8:	e04d      	b.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f0:	d141      	bne.n	8006776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066f2:	4b28      	ldr	r3, [pc, #160]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fe:	d131      	bne.n	8006764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006700:	4b24      	ldr	r3, [pc, #144]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006706:	4a23      	ldr	r2, [pc, #140]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006710:	4b20      	ldr	r3, [pc, #128]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006718:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800671a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800671e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2232      	movs	r2, #50	; 0x32
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	4a1c      	ldr	r2, [pc, #112]	; (800679c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800672c:	fba2 2303 	umull	r2, r3, r2, r3
 8006730:	0c9b      	lsrs	r3, r3, #18
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006736:	e002      	b.n	800673e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3b01      	subs	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800673e:	4b15      	ldr	r3, [pc, #84]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674a:	d102      	bne.n	8006752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f2      	bne.n	8006738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800675a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675e:	d112      	bne.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e011      	b.n	8006788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676a:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006774:	e007      	b.n	8006786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800677e:	4a05      	ldr	r2, [pc, #20]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006784:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	40007000 	.word	0x40007000
 8006798:	20007868 	.word	0x20007868
 800679c:	431bde83 	.word	0x431bde83

080067a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4a04      	ldr	r2, [pc, #16]	; (80067bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80067aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067ae:	6093      	str	r3, [r2, #8]
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40007000 	.word	0x40007000

080067c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e2fe      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d075      	beq.n	80068ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067de:	4b97      	ldr	r3, [pc, #604]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067e8:	4b94      	ldr	r3, [pc, #592]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b0c      	cmp	r3, #12
 80067f6:	d102      	bne.n	80067fe <HAL_RCC_OscConfig+0x3e>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d002      	beq.n	8006804 <HAL_RCC_OscConfig+0x44>
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d10b      	bne.n	800681c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006804:	4b8d      	ldr	r3, [pc, #564]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05b      	beq.n	80068c8 <HAL_RCC_OscConfig+0x108>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d157      	bne.n	80068c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e2d9      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006824:	d106      	bne.n	8006834 <HAL_RCC_OscConfig+0x74>
 8006826:	4b85      	ldr	r3, [pc, #532]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a84      	ldr	r2, [pc, #528]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800682c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e01d      	b.n	8006870 <HAL_RCC_OscConfig+0xb0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800683c:	d10c      	bne.n	8006858 <HAL_RCC_OscConfig+0x98>
 800683e:	4b7f      	ldr	r3, [pc, #508]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7e      	ldr	r2, [pc, #504]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	4b7c      	ldr	r3, [pc, #496]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7b      	ldr	r2, [pc, #492]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e00b      	b.n	8006870 <HAL_RCC_OscConfig+0xb0>
 8006858:	4b78      	ldr	r3, [pc, #480]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a77      	ldr	r2, [pc, #476]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800685e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	4b75      	ldr	r3, [pc, #468]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a74      	ldr	r2, [pc, #464]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800686a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800686e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d013      	beq.n	80068a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fd fe2e 	bl	80044d8 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006880:	f7fd fe2a 	bl	80044d8 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b64      	cmp	r3, #100	; 0x64
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e29e      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006892:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0xc0>
 800689e:	e014      	b.n	80068ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fd fe1a 	bl	80044d8 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a8:	f7fd fe16 	bl	80044d8 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e28a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ba:	4b60      	ldr	r3, [pc, #384]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0xe8>
 80068c6:	e000      	b.n	80068ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d075      	beq.n	80069c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068d6:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 030c 	and.w	r3, r3, #12
 80068de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068e0:	4b56      	ldr	r3, [pc, #344]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	d102      	bne.n	80068f6 <HAL_RCC_OscConfig+0x136>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d002      	beq.n	80068fc <HAL_RCC_OscConfig+0x13c>
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d11f      	bne.n	800693c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fc:	4b4f      	ldr	r3, [pc, #316]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_OscConfig+0x154>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e25d      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006914:	4b49      	ldr	r3, [pc, #292]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	061b      	lsls	r3, r3, #24
 8006922:	4946      	ldr	r1, [pc, #280]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006924:	4313      	orrs	r3, r2
 8006926:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006928:	4b45      	ldr	r3, [pc, #276]	; (8006a40 <HAL_RCC_OscConfig+0x280>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f7fd fd87 	bl	8004440 <HAL_InitTick>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d043      	beq.n	80069c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e249      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d023      	beq.n	800698c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006944:	4b3d      	ldr	r3, [pc, #244]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a3c      	ldr	r2, [pc, #240]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800694a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fd fdc2 	bl	80044d8 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006958:	f7fd fdbe 	bl	80044d8 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e232      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800696a:	4b34      	ldr	r3, [pc, #208]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006976:	4b31      	ldr	r3, [pc, #196]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	061b      	lsls	r3, r3, #24
 8006984:	492d      	ldr	r1, [pc, #180]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006986:	4313      	orrs	r3, r2
 8006988:	604b      	str	r3, [r1, #4]
 800698a:	e01a      	b.n	80069c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698c:	4b2b      	ldr	r3, [pc, #172]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a2a      	ldr	r2, [pc, #168]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fd fd9e 	bl	80044d8 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a0:	f7fd fd9a 	bl	80044d8 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e20e      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069b2:	4b22      	ldr	r3, [pc, #136]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x1e0>
 80069be:	e000      	b.n	80069c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d041      	beq.n	8006a52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01c      	beq.n	8006a10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d6:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80069d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069dc:	4a17      	ldr	r2, [pc, #92]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e6:	f7fd fd77 	bl	80044d8 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ee:	f7fd fd73 	bl	80044d8 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e1e7      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0ef      	beq.n	80069ee <HAL_RCC_OscConfig+0x22e>
 8006a0e:	e020      	b.n	8006a52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a16:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <HAL_RCC_OscConfig+0x27c>)
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a20:	f7fd fd5a 	bl	80044d8 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a26:	e00d      	b.n	8006a44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a28:	f7fd fd56 	bl	80044d8 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d906      	bls.n	8006a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e1ca      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
 8006a3a:	bf00      	nop
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	2000786c 	.word	0x2000786c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a44:	4b8c      	ldr	r3, [pc, #560]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1ea      	bne.n	8006a28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a6 	beq.w	8006bac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a60:	2300      	movs	r3, #0
 8006a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a64:	4b84      	ldr	r3, [pc, #528]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_RCC_OscConfig+0x2b4>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x2b6>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00d      	beq.n	8006a96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a7a:	4b7f      	ldr	r3, [pc, #508]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	4a7e      	ldr	r2, [pc, #504]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6593      	str	r3, [r2, #88]	; 0x58
 8006a86:	4b7c      	ldr	r3, [pc, #496]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a92:	2301      	movs	r3, #1
 8006a94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a96:	4b79      	ldr	r3, [pc, #484]	; (8006c7c <HAL_RCC_OscConfig+0x4bc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d118      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aa2:	4b76      	ldr	r3, [pc, #472]	; (8006c7c <HAL_RCC_OscConfig+0x4bc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a75      	ldr	r2, [pc, #468]	; (8006c7c <HAL_RCC_OscConfig+0x4bc>)
 8006aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aae:	f7fd fd13 	bl	80044d8 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab6:	f7fd fd0f 	bl	80044d8 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e183      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac8:	4b6c      	ldr	r3, [pc, #432]	; (8006c7c <HAL_RCC_OscConfig+0x4bc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d108      	bne.n	8006aee <HAL_RCC_OscConfig+0x32e>
 8006adc:	4b66      	ldr	r3, [pc, #408]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae2:	4a65      	ldr	r2, [pc, #404]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006aec:	e024      	b.n	8006b38 <HAL_RCC_OscConfig+0x378>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d110      	bne.n	8006b18 <HAL_RCC_OscConfig+0x358>
 8006af6:	4b60      	ldr	r3, [pc, #384]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afc:	4a5e      	ldr	r2, [pc, #376]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006afe:	f043 0304 	orr.w	r3, r3, #4
 8006b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b06:	4b5c      	ldr	r3, [pc, #368]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	4a5a      	ldr	r2, [pc, #360]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b16:	e00f      	b.n	8006b38 <HAL_RCC_OscConfig+0x378>
 8006b18:	4b57      	ldr	r3, [pc, #348]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1e:	4a56      	ldr	r2, [pc, #344]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b28:	4b53      	ldr	r3, [pc, #332]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	4a52      	ldr	r2, [pc, #328]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b30:	f023 0304 	bic.w	r3, r3, #4
 8006b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d016      	beq.n	8006b6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b40:	f7fd fcca 	bl	80044d8 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b48:	f7fd fcc6 	bl	80044d8 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e138      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b5e:	4b46      	ldr	r3, [pc, #280]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0ed      	beq.n	8006b48 <HAL_RCC_OscConfig+0x388>
 8006b6c:	e015      	b.n	8006b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6e:	f7fd fcb3 	bl	80044d8 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b76:	f7fd fcaf 	bl	80044d8 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e121      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b8c:	4b3a      	ldr	r3, [pc, #232]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1ed      	bne.n	8006b76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b9a:	7ffb      	ldrb	r3, [r7, #31]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d105      	bne.n	8006bac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba0:	4b35      	ldr	r3, [pc, #212]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba4:	4a34      	ldr	r2, [pc, #208]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006baa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d03c      	beq.n	8006c32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01c      	beq.n	8006bfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bc6:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fd fc82 	bl	80044d8 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bd8:	f7fd fc7e 	bl	80044d8 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e0f2      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bea:	4b23      	ldr	r3, [pc, #140]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0ef      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x418>
 8006bf8:	e01b      	b.n	8006c32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0a:	f7fd fc65 	bl	80044d8 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c12:	f7fd fc61 	bl	80044d8 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0d5      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c24:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1ef      	bne.n	8006c12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 80c9 	beq.w	8006dce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 030c 	and.w	r3, r3, #12
 8006c44:	2b0c      	cmp	r3, #12
 8006c46:	f000 8083 	beq.w	8006d50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d15e      	bne.n	8006d10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <HAL_RCC_OscConfig+0x4b8>)
 8006c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5e:	f7fd fc3b 	bl	80044d8 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c64:	e00c      	b.n	8006c80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c66:	f7fd fc37 	bl	80044d8 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d905      	bls.n	8006c80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e0ab      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c80:	4b55      	ldr	r3, [pc, #340]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1ec      	bne.n	8006c66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c8c:	4b52      	ldr	r3, [pc, #328]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	4b52      	ldr	r3, [pc, #328]	; (8006ddc <HAL_RCC_OscConfig+0x61c>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6a11      	ldr	r1, [r2, #32]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c9c:	3a01      	subs	r2, #1
 8006c9e:	0112      	lsls	r2, r2, #4
 8006ca0:	4311      	orrs	r1, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006ca6:	0212      	lsls	r2, r2, #8
 8006ca8:	4311      	orrs	r1, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006cae:	0852      	lsrs	r2, r2, #1
 8006cb0:	3a01      	subs	r2, #1
 8006cb2:	0552      	lsls	r2, r2, #21
 8006cb4:	4311      	orrs	r1, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cba:	0852      	lsrs	r2, r2, #1
 8006cbc:	3a01      	subs	r2, #1
 8006cbe:	0652      	lsls	r2, r2, #25
 8006cc0:	4311      	orrs	r1, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006cc6:	06d2      	lsls	r2, r2, #27
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	4943      	ldr	r1, [pc, #268]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cd0:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a40      	ldr	r2, [pc, #256]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cdc:	4b3e      	ldr	r3, [pc, #248]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4a3d      	ldr	r2, [pc, #244]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fd fbf6 	bl	80044d8 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf0:	f7fd fbf2 	bl	80044d8 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e066      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d02:	4b35      	ldr	r3, [pc, #212]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x530>
 8006d0e:	e05e      	b.n	8006dce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d10:	4b31      	ldr	r3, [pc, #196]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a30      	ldr	r2, [pc, #192]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1c:	f7fd fbdc 	bl	80044d8 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fd fbd8 	bl	80044d8 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e04c      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d36:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d42:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	4924      	ldr	r1, [pc, #144]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <HAL_RCC_OscConfig+0x620>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	60cb      	str	r3, [r1, #12]
 8006d4e:	e03e      	b.n	8006dce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e039      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d5c:	4b1e      	ldr	r3, [pc, #120]	; (8006dd8 <HAL_RCC_OscConfig+0x618>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f003 0203 	and.w	r2, r3, #3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d12c      	bne.n	8006dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d123      	bne.n	8006dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d11b      	bne.n	8006dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d113      	bne.n	8006dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	085b      	lsrs	r3, r3, #1
 8006dae:	3b01      	subs	r3, #1
 8006db0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d109      	bne.n	8006dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	019f800c 	.word	0x019f800c
 8006de0:	feeefffc 	.word	0xfeeefffc

08006de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e11e      	b.n	800703a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b91      	ldr	r3, [pc, #580]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d910      	bls.n	8006e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b8e      	ldr	r3, [pc, #568]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f023 020f 	bic.w	r2, r3, #15
 8006e12:	498c      	ldr	r1, [pc, #560]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1a:	4b8a      	ldr	r3, [pc, #552]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e106      	b.n	800703a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d073      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d129      	bne.n	8006e94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e40:	4b81      	ldr	r3, [pc, #516]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0f4      	b.n	800703a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e50:	f000 f964 	bl	800711c <RCC_GetSysClockFreqFromPLLSource>
 8006e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	4a7c      	ldr	r2, [pc, #496]	; (800704c <HAL_RCC_ClockConfig+0x268>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d93f      	bls.n	8006ede <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e5e:	4b7a      	ldr	r3, [pc, #488]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d033      	beq.n	8006ede <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d12f      	bne.n	8006ede <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e7e:	4b72      	ldr	r3, [pc, #456]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e86:	4a70      	ldr	r2, [pc, #448]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	e024      	b.n	8006ede <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d107      	bne.n	8006eac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e9c:	4b6a      	ldr	r3, [pc, #424]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0c6      	b.n	800703a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eac:	4b66      	ldr	r3, [pc, #408]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0be      	b.n	800703a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ebc:	f000 f8ce 	bl	800705c <HAL_RCC_GetSysClockFreq>
 8006ec0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	4a61      	ldr	r2, [pc, #388]	; (800704c <HAL_RCC_ClockConfig+0x268>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d909      	bls.n	8006ede <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006eca:	4b5f      	ldr	r3, [pc, #380]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ed2:	4a5d      	ldr	r2, [pc, #372]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ede:	4b5a      	ldr	r3, [pc, #360]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f023 0203 	bic.w	r2, r3, #3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	4957      	ldr	r1, [pc, #348]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ef0:	f7fd faf2 	bl	80044d8 <HAL_GetTick>
 8006ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef6:	e00a      	b.n	8006f0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ef8:	f7fd faee 	bl	80044d8 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e095      	b.n	800703a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0e:	4b4e      	ldr	r3, [pc, #312]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 020c 	and.w	r2, r3, #12
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d1eb      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d023      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f38:	4b43      	ldr	r3, [pc, #268]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	4a42      	ldr	r2, [pc, #264]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f50:	4b3d      	ldr	r3, [pc, #244]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f58:	4a3b      	ldr	r2, [pc, #236]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f60:	4b39      	ldr	r3, [pc, #228]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	4936      	ldr	r1, [pc, #216]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d105      	bne.n	8006f86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f7a:	4b33      	ldr	r3, [pc, #204]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	4a32      	ldr	r2, [pc, #200]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d21d      	bcs.n	8006fd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f94:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f023 020f 	bic.w	r2, r3, #15
 8006f9c:	4929      	ldr	r1, [pc, #164]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006fa4:	f7fd fa98 	bl	80044d8 <HAL_GetTick>
 8006fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fac:	f7fd fa94 	bl	80044d8 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e03b      	b.n	800703a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc2:	4b20      	ldr	r3, [pc, #128]	; (8007044 <HAL_RCC_ClockConfig+0x260>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1ed      	bne.n	8006fac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fdc:	4b1a      	ldr	r3, [pc, #104]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	4917      	ldr	r1, [pc, #92]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ffa:	4b13      	ldr	r3, [pc, #76]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	490f      	ldr	r1, [pc, #60]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 800700a:	4313      	orrs	r3, r2
 800700c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800700e:	f000 f825 	bl	800705c <HAL_RCC_GetSysClockFreq>
 8007012:	4602      	mov	r2, r0
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <HAL_RCC_ClockConfig+0x264>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	490c      	ldr	r1, [pc, #48]	; (8007050 <HAL_RCC_ClockConfig+0x26c>)
 8007020:	5ccb      	ldrb	r3, [r1, r3]
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <HAL_RCC_ClockConfig+0x270>)
 800702c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800702e:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <HAL_RCC_ClockConfig+0x274>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fd fa04 	bl	8004440 <HAL_InitTick>
 8007038:	4603      	mov	r3, r0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	40022000 	.word	0x40022000
 8007048:	40021000 	.word	0x40021000
 800704c:	04c4b400 	.word	0x04c4b400
 8007050:	08008274 	.word	0x08008274
 8007054:	20007868 	.word	0x20007868
 8007058:	2000786c 	.word	0x2000786c

0800705c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007062:	4b2c      	ldr	r3, [pc, #176]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 030c 	and.w	r3, r3, #12
 800706a:	2b04      	cmp	r3, #4
 800706c:	d102      	bne.n	8007074 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800706e:	4b2a      	ldr	r3, [pc, #168]	; (8007118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	e047      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007074:	4b27      	ldr	r3, [pc, #156]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b08      	cmp	r3, #8
 800707e:	d102      	bne.n	8007086 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007080:	4b25      	ldr	r3, [pc, #148]	; (8007118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007082:	613b      	str	r3, [r7, #16]
 8007084:	e03e      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007086:	4b23      	ldr	r3, [pc, #140]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b0c      	cmp	r3, #12
 8007090:	d136      	bne.n	8007100 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007092:	4b20      	ldr	r3, [pc, #128]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	3301      	adds	r3, #1
 80070a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d10c      	bne.n	80070ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070b0:	4a19      	ldr	r2, [pc, #100]	; (8007118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	4a16      	ldr	r2, [pc, #88]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070ba:	68d2      	ldr	r2, [r2, #12]
 80070bc:	0a12      	lsrs	r2, r2, #8
 80070be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070c2:	fb02 f303 	mul.w	r3, r2, r3
 80070c6:	617b      	str	r3, [r7, #20]
      break;
 80070c8:	e00c      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	4a10      	ldr	r2, [pc, #64]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070d4:	68d2      	ldr	r2, [r2, #12]
 80070d6:	0a12      	lsrs	r2, r2, #8
 80070d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070dc:	fb02 f303 	mul.w	r3, r2, r3
 80070e0:	617b      	str	r3, [r7, #20]
      break;
 80070e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	0e5b      	lsrs	r3, r3, #25
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	3301      	adds	r3, #1
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	e001      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007104:	693b      	ldr	r3, [r7, #16]
}
 8007106:	4618      	mov	r0, r3
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40021000 	.word	0x40021000
 8007118:	00f42400 	.word	0x00f42400

0800711c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007122:	4b1e      	ldr	r3, [pc, #120]	; (800719c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800712c:	4b1b      	ldr	r3, [pc, #108]	; (800719c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b03      	cmp	r3, #3
 800713e:	d10c      	bne.n	800715a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007140:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	4a14      	ldr	r2, [pc, #80]	; (800719c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800714a:	68d2      	ldr	r2, [r2, #12]
 800714c:	0a12      	lsrs	r2, r2, #8
 800714e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007152:	fb02 f303 	mul.w	r3, r2, r3
 8007156:	617b      	str	r3, [r7, #20]
    break;
 8007158:	e00c      	b.n	8007174 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800715a:	4a11      	ldr	r2, [pc, #68]	; (80071a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007162:	4a0e      	ldr	r2, [pc, #56]	; (800719c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007164:	68d2      	ldr	r2, [r2, #12]
 8007166:	0a12      	lsrs	r2, r2, #8
 8007168:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800716c:	fb02 f303 	mul.w	r3, r2, r3
 8007170:	617b      	str	r3, [r7, #20]
    break;
 8007172:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007174:	4b09      	ldr	r3, [pc, #36]	; (800719c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	0e5b      	lsrs	r3, r3, #25
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	3301      	adds	r3, #1
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800718e:	687b      	ldr	r3, [r7, #4]
}
 8007190:	4618      	mov	r0, r3
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	40021000 	.word	0x40021000
 80071a0:	00f42400 	.word	0x00f42400

080071a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071ac:	2300      	movs	r3, #0
 80071ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071b0:	2300      	movs	r3, #0
 80071b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8098 	beq.w	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c2:	2300      	movs	r3, #0
 80071c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071c6:	4b43      	ldr	r3, [pc, #268]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10d      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d2:	4b40      	ldr	r3, [pc, #256]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d6:	4a3f      	ldr	r2, [pc, #252]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071dc:	6593      	str	r3, [r2, #88]	; 0x58
 80071de:	4b3d      	ldr	r3, [pc, #244]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ea:	2301      	movs	r3, #1
 80071ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071ee:	4b3a      	ldr	r3, [pc, #232]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a39      	ldr	r2, [pc, #228]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071fa:	f7fd f96d 	bl	80044d8 <HAL_GetTick>
 80071fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007200:	e009      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007202:	f7fd f969 	bl	80044d8 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d902      	bls.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	74fb      	strb	r3, [r7, #19]
        break;
 8007214:	e005      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007216:	4b30      	ldr	r3, [pc, #192]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0ef      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007222:	7cfb      	ldrb	r3, [r7, #19]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d159      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007228:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007232:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01e      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	429a      	cmp	r2, r3
 8007242:	d019      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007244:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007250:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007256:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800725c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007260:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007266:	4a1b      	ldr	r2, [pc, #108]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007270:	4a18      	ldr	r2, [pc, #96]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d016      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fd f929 	bl	80044d8 <HAL_GetTick>
 8007286:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007288:	e00b      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fd f925 	bl	80044d8 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d902      	bls.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	74fb      	strb	r3, [r7, #19]
            break;
 80072a0:	e006      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072a2:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0ec      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c4:	4903      	ldr	r1, [pc, #12]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80072cc:	e008      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072ce:	7cfb      	ldrb	r3, [r7, #19]
 80072d0:	74bb      	strb	r3, [r7, #18]
 80072d2:	e005      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	7cfb      	ldrb	r3, [r7, #19]
 80072de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072e0:	7c7b      	ldrb	r3, [r7, #17]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d105      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e6:	4ba7      	ldr	r3, [pc, #668]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ea:	4aa6      	ldr	r2, [pc, #664]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072fe:	4ba1      	ldr	r3, [pc, #644]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f023 0203 	bic.w	r2, r3, #3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	499d      	ldr	r1, [pc, #628]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800730e:	4313      	orrs	r3, r2
 8007310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007320:	4b98      	ldr	r3, [pc, #608]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007326:	f023 020c 	bic.w	r2, r3, #12
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	4995      	ldr	r1, [pc, #596]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007342:	4b90      	ldr	r3, [pc, #576]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	498c      	ldr	r1, [pc, #560]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007364:	4b87      	ldr	r3, [pc, #540]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	4984      	ldr	r1, [pc, #528]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007386:	4b7f      	ldr	r3, [pc, #508]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	497b      	ldr	r1, [pc, #492]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073a8:	4b76      	ldr	r3, [pc, #472]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	4973      	ldr	r1, [pc, #460]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073ca:	4b6e      	ldr	r3, [pc, #440]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	496a      	ldr	r1, [pc, #424]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073ec:	4b65      	ldr	r3, [pc, #404]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	4962      	ldr	r1, [pc, #392]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800740e:	4b5d      	ldr	r3, [pc, #372]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	4959      	ldr	r1, [pc, #356]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007430:	4b54      	ldr	r3, [pc, #336]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007436:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	4951      	ldr	r1, [pc, #324]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007452:	4b4c      	ldr	r3, [pc, #304]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4948      	ldr	r1, [pc, #288]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007470:	d105      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007472:	4b44      	ldr	r3, [pc, #272]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4a43      	ldr	r2, [pc, #268]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800747c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007486:	2b00      	cmp	r3, #0
 8007488:	d015      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800748a:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	493a      	ldr	r1, [pc, #232]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074a8:	d105      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074aa:	4b36      	ldr	r3, [pc, #216]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	4a35      	ldr	r2, [pc, #212]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d015      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074c2:	4b30      	ldr	r3, [pc, #192]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d0:	492c      	ldr	r1, [pc, #176]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074e0:	d105      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074e2:	4b28      	ldr	r3, [pc, #160]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	4a27      	ldr	r2, [pc, #156]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ec:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d015      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074fa:	4b22      	ldr	r3, [pc, #136]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007500:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	491e      	ldr	r1, [pc, #120]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007518:	d105      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800751a:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	4a19      	ldr	r2, [pc, #100]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007524:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d015      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007540:	4910      	ldr	r1, [pc, #64]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007542:	4313      	orrs	r3, r2
 8007544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007550:	d105      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	4a0b      	ldr	r2, [pc, #44]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800755c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d018      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800756a:	4b06      	ldr	r3, [pc, #24]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007570:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	4902      	ldr	r1, [pc, #8]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	e001      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007584:	40021000 	.word	0x40021000
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800758e:	d105      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007590:	4b21      	ldr	r3, [pc, #132]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	4a20      	ldr	r2, [pc, #128]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800759a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d015      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80075a8:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	4918      	ldr	r1, [pc, #96]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c6:	d105      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075c8:	4b13      	ldr	r3, [pc, #76]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4a12      	ldr	r2, [pc, #72]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d015      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ee:	490a      	ldr	r1, [pc, #40]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075fe:	d105      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4a04      	ldr	r2, [pc, #16]	; (8007618 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800760a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800760c:	7cbb      	ldrb	r3, [r7, #18]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40021000 	.word	0x40021000

0800761c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e049      	b.n	80076c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fc fe18 	bl	8004278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f000 f878 	bl	8007750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80076de:	2302      	movs	r3, #2
 80076e0:	e031      	b.n	8007746 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f8d5 	bl	80078a4 <TIM_SlaveTimer_SetConfig>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e018      	b.n	8007746 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007722:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007732:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a48      	ldr	r2, [pc, #288]	; (8007884 <TIM_Base_SetConfig+0x134>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d013      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d00f      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a45      	ldr	r2, [pc, #276]	; (8007888 <TIM_Base_SetConfig+0x138>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00b      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a44      	ldr	r2, [pc, #272]	; (800788c <TIM_Base_SetConfig+0x13c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d007      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a43      	ldr	r2, [pc, #268]	; (8007890 <TIM_Base_SetConfig+0x140>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a42      	ldr	r2, [pc, #264]	; (8007894 <TIM_Base_SetConfig+0x144>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d108      	bne.n	80077a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a37      	ldr	r2, [pc, #220]	; (8007884 <TIM_Base_SetConfig+0x134>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01f      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b0:	d01b      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a34      	ldr	r2, [pc, #208]	; (8007888 <TIM_Base_SetConfig+0x138>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d017      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a33      	ldr	r2, [pc, #204]	; (800788c <TIM_Base_SetConfig+0x13c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a32      	ldr	r2, [pc, #200]	; (8007890 <TIM_Base_SetConfig+0x140>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00f      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a32      	ldr	r2, [pc, #200]	; (8007898 <TIM_Base_SetConfig+0x148>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00b      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a31      	ldr	r2, [pc, #196]	; (800789c <TIM_Base_SetConfig+0x14c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d007      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a30      	ldr	r2, [pc, #192]	; (80078a0 <TIM_Base_SetConfig+0x150>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a2b      	ldr	r2, [pc, #172]	; (8007894 <TIM_Base_SetConfig+0x144>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a18      	ldr	r2, [pc, #96]	; (8007884 <TIM_Base_SetConfig+0x134>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d013      	beq.n	8007850 <TIM_Base_SetConfig+0x100>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a19      	ldr	r2, [pc, #100]	; (8007890 <TIM_Base_SetConfig+0x140>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00f      	beq.n	8007850 <TIM_Base_SetConfig+0x100>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a19      	ldr	r2, [pc, #100]	; (8007898 <TIM_Base_SetConfig+0x148>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00b      	beq.n	8007850 <TIM_Base_SetConfig+0x100>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a18      	ldr	r2, [pc, #96]	; (800789c <TIM_Base_SetConfig+0x14c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d007      	beq.n	8007850 <TIM_Base_SetConfig+0x100>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a17      	ldr	r2, [pc, #92]	; (80078a0 <TIM_Base_SetConfig+0x150>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d003      	beq.n	8007850 <TIM_Base_SetConfig+0x100>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a12      	ldr	r2, [pc, #72]	; (8007894 <TIM_Base_SetConfig+0x144>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d103      	bne.n	8007858 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d105      	bne.n	8007876 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	611a      	str	r2, [r3, #16]
  }
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40012c00 	.word	0x40012c00
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40013400 	.word	0x40013400
 8007894:	40015000 	.word	0x40015000
 8007898:	40014000 	.word	0x40014000
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800

080078a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4a4e      	ldr	r2, [pc, #312]	; (8007a2c <TIM_SlaveTimer_SetConfig+0x188>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	f000 8092 	beq.w	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 80078fa:	4a4c      	ldr	r2, [pc, #304]	; (8007a2c <TIM_SlaveTimer_SetConfig+0x188>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	f200 808b 	bhi.w	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007902:	4a4b      	ldr	r2, [pc, #300]	; (8007a30 <TIM_SlaveTimer_SetConfig+0x18c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	f000 808a 	beq.w	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 800790a:	4a49      	ldr	r2, [pc, #292]	; (8007a30 <TIM_SlaveTimer_SetConfig+0x18c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	f200 8083 	bhi.w	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007912:	4a48      	ldr	r2, [pc, #288]	; (8007a34 <TIM_SlaveTimer_SetConfig+0x190>)
 8007914:	4293      	cmp	r3, r2
 8007916:	f000 8082 	beq.w	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 800791a:	4a46      	ldr	r2, [pc, #280]	; (8007a34 <TIM_SlaveTimer_SetConfig+0x190>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d87b      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007920:	4a45      	ldr	r2, [pc, #276]	; (8007a38 <TIM_SlaveTimer_SetConfig+0x194>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d07b      	beq.n	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 8007926:	4a44      	ldr	r2, [pc, #272]	; (8007a38 <TIM_SlaveTimer_SetConfig+0x194>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d875      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 800792c:	4a43      	ldr	r2, [pc, #268]	; (8007a3c <TIM_SlaveTimer_SetConfig+0x198>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d075      	beq.n	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 8007932:	4a42      	ldr	r2, [pc, #264]	; (8007a3c <TIM_SlaveTimer_SetConfig+0x198>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d86f      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007938:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800793c:	d06f      	beq.n	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 800793e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007942:	d869      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007944:	2b70      	cmp	r3, #112	; 0x70
 8007946:	d01a      	beq.n	800797e <TIM_SlaveTimer_SetConfig+0xda>
 8007948:	2b70      	cmp	r3, #112	; 0x70
 800794a:	d865      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 800794c:	2b60      	cmp	r3, #96	; 0x60
 800794e:	d059      	beq.n	8007a04 <TIM_SlaveTimer_SetConfig+0x160>
 8007950:	2b60      	cmp	r3, #96	; 0x60
 8007952:	d861      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007954:	2b50      	cmp	r3, #80	; 0x50
 8007956:	d04b      	beq.n	80079f0 <TIM_SlaveTimer_SetConfig+0x14c>
 8007958:	2b50      	cmp	r3, #80	; 0x50
 800795a:	d85d      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d019      	beq.n	8007994 <TIM_SlaveTimer_SetConfig+0xf0>
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d859      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007964:	2b30      	cmp	r3, #48	; 0x30
 8007966:	d05a      	beq.n	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 8007968:	2b30      	cmp	r3, #48	; 0x30
 800796a:	d855      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 800796c:	2b20      	cmp	r3, #32
 800796e:	d056      	beq.n	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 8007970:	2b20      	cmp	r3, #32
 8007972:	d851      	bhi.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d052      	beq.n	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 8007978:	2b10      	cmp	r3, #16
 800797a:	d050      	beq.n	8007a1e <TIM_SlaveTimer_SetConfig+0x17a>
 800797c:	e04c      	b.n	8007a18 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800798e:	f000 f8b6 	bl	8007afe <TIM_ETR_SetConfig>
      break;
 8007992:	e045      	b.n	8007a20 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b05      	cmp	r3, #5
 800799a:	d004      	beq.n	80079a6 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80079a0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80079a4:	d101      	bne.n	80079aa <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e03b      	b.n	8007a22 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6a1a      	ldr	r2, [r3, #32]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0201 	bic.w	r2, r2, #1
 80079c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]
      break;
 80079ee:	e017      	b.n	8007a20 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fc:	461a      	mov	r2, r3
 80079fe:	f000 f81f 	bl	8007a40 <TIM_TI1_ConfigInputStage>
      break;
 8007a02:	e00d      	b.n	8007a20 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a10:	461a      	mov	r2, r3
 8007a12:	f000 f844 	bl	8007a9e <TIM_TI2_ConfigInputStage>
      break;
 8007a16:	e003      	b.n	8007a20 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	e000      	b.n	8007a20 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 8007a1e:	bf00      	nop
  }

  return status;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	00100070 	.word	0x00100070
 8007a30:	00100050 	.word	0x00100050
 8007a34:	00100040 	.word	0x00100040
 8007a38:	00100030 	.word	0x00100030
 8007a3c:	00100020 	.word	0x00100020

08007a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f023 0201 	bic.w	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 030a 	bic.w	r3, r3, #10
 8007a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f023 0210 	bic.w	r2, r3, #16
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	031b      	lsls	r3, r3, #12
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ada:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b087      	sub	sp, #28
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	021a      	lsls	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	609a      	str	r2, [r3, #8]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e06f      	b.n	8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a31      	ldr	r2, [pc, #196]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d009      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a30      	ldr	r2, [pc, #192]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2e      	ldr	r2, [pc, #184]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a1e      	ldr	r2, [pc, #120]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d01d      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd8:	d018      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1c      	ldr	r2, [pc, #112]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d013      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1a      	ldr	r2, [pc, #104]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a16      	ldr	r2, [pc, #88]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d10c      	bne.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	40013400 	.word	0x40013400
 8007c4c:	40015000 	.word	0x40015000
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800
 8007c58:	40014000 	.word	0x40014000

08007c5c <arm_biquad_cascade_df2T_f32>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	7807      	ldrb	r7, [r0, #0]
 8007c62:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8007c66:	6885      	ldr	r5, [r0, #8]
 8007c68:	3514      	adds	r5, #20
 8007c6a:	6846      	ldr	r6, [r0, #4]
 8007c6c:	3608      	adds	r6, #8
 8007c6e:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8007c72:	eb02 0b09 	add.w	fp, r2, r9
 8007c76:	f003 080f 	and.w	r8, r3, #15
 8007c7a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8007c7e:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8007c82:	ed15 7a04 	vldr	s14, [r5, #-16]
 8007c86:	ed55 6a03 	vldr	s13, [r5, #-12]
 8007c8a:	ed15 6a02 	vldr	s12, [r5, #-8]
 8007c8e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8007c92:	46b4      	mov	ip, r6
 8007c94:	ed56 3a02 	vldr	s7, [r6, #-8]
 8007c98:	ed16 4a01 	vldr	s8, [r6, #-4]
 8007c9c:	f1be 0f00 	cmp.w	lr, #0
 8007ca0:	f000 8195 	beq.w	8007fce <arm_biquad_cascade_df2T_f32+0x372>
 8007ca4:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8007ca8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8007cac:	4674      	mov	r4, lr
 8007cae:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007cb2:	ee27 5a83 	vmul.f32	s10, s15, s6
 8007cb6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007cba:	ee67 4a03 	vmul.f32	s9, s14, s6
 8007cbe:	ee34 4a84 	vadd.f32	s8, s9, s8
 8007cc2:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007cc6:	ee34 4a84 	vadd.f32	s8, s9, s8
 8007cca:	ee26 3a83 	vmul.f32	s6, s13, s6
 8007cce:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8007cd2:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8007cd6:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8007cda:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007cde:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007ce2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007ce6:	ee27 4a23 	vmul.f32	s8, s14, s7
 8007cea:	ee35 5a04 	vadd.f32	s10, s10, s8
 8007cee:	ee26 3a24 	vmul.f32	s6, s12, s9
 8007cf2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8007cf6:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8007cfa:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8007cfe:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8007d02:	ee27 5a84 	vmul.f32	s10, s15, s8
 8007d06:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007d0a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8007d0e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007d12:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007d16:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007d1a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8007d1e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007d22:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007d26:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8007d2a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8007d2e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8007d32:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007d36:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007d3a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007d3e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007d42:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007d46:	ee26 3a24 	vmul.f32	s6, s12, s9
 8007d4a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8007d4e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007d52:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8007d56:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8007d5a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8007d5e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007d62:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8007d66:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007d6a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007d6e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007d72:	ee26 3a05 	vmul.f32	s6, s12, s10
 8007d76:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007d7a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007d7e:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8007d82:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8007d86:	ee67 4a84 	vmul.f32	s9, s15, s8
 8007d8a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007d8e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007d92:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007d96:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007d9a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007d9e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8007da2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8007da6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007daa:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8007dae:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8007db2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8007db6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007dba:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8007dbe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007dc2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007dc6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007dca:	ee26 3a05 	vmul.f32	s6, s12, s10
 8007dce:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007dd2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007dd6:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8007dda:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8007dde:	ee67 4a84 	vmul.f32	s9, s15, s8
 8007de2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007de6:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007dea:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007dee:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007df2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007df6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8007dfa:	ee33 3a05 	vadd.f32	s6, s6, s10
 8007dfe:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007e02:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8007e06:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8007e0a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8007e0e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007e12:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8007e16:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007e1a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007e1e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007e22:	ee26 3a05 	vmul.f32	s6, s12, s10
 8007e26:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007e2a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007e2e:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8007e32:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8007e36:	ee67 4a84 	vmul.f32	s9, s15, s8
 8007e3a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007e3e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007e42:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007e46:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007e4a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007e4e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8007e52:	ee33 3a05 	vadd.f32	s6, s6, s10
 8007e56:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007e5a:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8007e5e:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8007e62:	ee27 5a84 	vmul.f32	s10, s15, s8
 8007e66:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007e6a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8007e6e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007e72:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007e76:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007e7a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8007e7e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007e82:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007e86:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8007e8a:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8007e8e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8007e92:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007e96:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007e9a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007e9e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007ea2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007ea6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8007eaa:	ee33 3a05 	vadd.f32	s6, s6, s10
 8007eae:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007eb2:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8007eb6:	ed10 4a04 	vldr	s8, [r0, #-16]
 8007eba:	ee27 5a84 	vmul.f32	s10, s15, s8
 8007ebe:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007ec2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8007ec6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007eca:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007ece:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007ed2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8007ed6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007eda:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007ede:	ed03 5a04 	vstr	s10, [r3, #-16]
 8007ee2:	ed10 4a03 	vldr	s8, [r0, #-12]
 8007ee6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8007eea:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007eee:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007ef2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007ef6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007efa:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007efe:	ee26 3a24 	vmul.f32	s6, s12, s9
 8007f02:	ee33 3a05 	vadd.f32	s6, s6, s10
 8007f06:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007f0a:	ed43 4a03 	vstr	s9, [r3, #-12]
 8007f0e:	ed10 4a02 	vldr	s8, [r0, #-8]
 8007f12:	ee27 5a84 	vmul.f32	s10, s15, s8
 8007f16:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007f1a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8007f1e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007f22:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007f26:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007f2a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8007f2e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007f32:	ee66 3a84 	vmul.f32	s7, s13, s8
 8007f36:	ed03 5a02 	vstr	s10, [r3, #-8]
 8007f3a:	ed10 4a01 	vldr	s8, [r0, #-4]
 8007f3e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8007f42:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007f46:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007f4a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007f4e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8007f52:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007f56:	ee66 3a24 	vmul.f32	s7, s12, s9
 8007f5a:	ee73 3a85 	vadd.f32	s7, s7, s10
 8007f5e:	ee26 5a84 	vmul.f32	s10, s13, s8
 8007f62:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8007f66:	ee34 4a05 	vadd.f32	s8, s8, s10
 8007f6a:	ed43 4a01 	vstr	s9, [r3, #-4]
 8007f6e:	3040      	adds	r0, #64	; 0x40
 8007f70:	3340      	adds	r3, #64	; 0x40
 8007f72:	3c01      	subs	r4, #1
 8007f74:	f47f ae9b 	bne.w	8007cae <arm_biquad_cascade_df2T_f32+0x52>
 8007f78:	4449      	add	r1, r9
 8007f7a:	465b      	mov	r3, fp
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	d019      	beq.n	8007fb6 <arm_biquad_cascade_df2T_f32+0x35a>
 8007f82:	eb01 000a 	add.w	r0, r1, sl
 8007f86:	ecf1 2a01 	vldmia	r1!, {s5}
 8007f8a:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8007f8e:	ee33 3a23 	vadd.f32	s6, s6, s7
 8007f92:	ee67 3a22 	vmul.f32	s7, s14, s5
 8007f96:	ee33 4a84 	vadd.f32	s8, s7, s8
 8007f9a:	ee26 5a03 	vmul.f32	s10, s12, s6
 8007f9e:	ee75 3a04 	vadd.f32	s7, s10, s8
 8007fa2:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8007fa6:	ee25 4a83 	vmul.f32	s8, s11, s6
 8007faa:	ee34 4a22 	vadd.f32	s8, s8, s5
 8007fae:	eca3 3a01 	vstmia	r3!, {s6}
 8007fb2:	4281      	cmp	r1, r0
 8007fb4:	d1e7      	bne.n	8007f86 <arm_biquad_cascade_df2T_f32+0x32a>
 8007fb6:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8007fba:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8007fbe:	3514      	adds	r5, #20
 8007fc0:	3608      	adds	r6, #8
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	3f01      	subs	r7, #1
 8007fc6:	f47f ae5a 	bne.w	8007c7e <arm_biquad_cascade_df2T_f32+0x22>
 8007fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fce:	4613      	mov	r3, r2
 8007fd0:	e7d4      	b.n	8007f7c <arm_biquad_cascade_df2T_f32+0x320>
	...

08007fd4 <arm_biquad_cascade_df2T_init_f32>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	6082      	str	r2, [r0, #8]
 8007fd8:	7001      	strb	r1, [r0, #0]
 8007fda:	4604      	mov	r4, r0
 8007fdc:	00ca      	lsls	r2, r1, #3
 8007fde:	4618      	mov	r0, r3
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	f000 f803 	bl	8007fec <memset>
 8007fe6:	6060      	str	r0, [r4, #4]
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop

08007fec <memset>:
 8007fec:	4402      	add	r2, r0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d100      	bne.n	8007ff6 <memset+0xa>
 8007ff4:	4770      	bx	lr
 8007ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffa:	e7f9      	b.n	8007ff0 <memset+0x4>

08007ffc <__errno>:
 8007ffc:	4b01      	ldr	r3, [pc, #4]	; (8008004 <__errno+0x8>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	200078c0 	.word	0x200078c0

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4d0d      	ldr	r5, [pc, #52]	; (8008040 <__libc_init_array+0x38>)
 800800c:	4c0d      	ldr	r4, [pc, #52]	; (8008044 <__libc_init_array+0x3c>)
 800800e:	1b64      	subs	r4, r4, r5
 8008010:	10a4      	asrs	r4, r4, #2
 8008012:	2600      	movs	r6, #0
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	4d0b      	ldr	r5, [pc, #44]	; (8008048 <__libc_init_array+0x40>)
 800801a:	4c0c      	ldr	r4, [pc, #48]	; (800804c <__libc_init_array+0x44>)
 800801c:	f000 f91e 	bl	800825c <_init>
 8008020:	1b64      	subs	r4, r4, r5
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	2600      	movs	r6, #0
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	08008284 	.word	0x08008284
 8008044:	08008284 	.word	0x08008284
 8008048:	08008284 	.word	0x08008284
 800804c:	08008288 	.word	0x08008288

08008050 <sqrt>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	ed2d 8b02 	vpush	{d8}
 8008056:	ec55 4b10 	vmov	r4, r5, d0
 800805a:	f000 f825 	bl	80080a8 <__ieee754_sqrt>
 800805e:	4622      	mov	r2, r4
 8008060:	462b      	mov	r3, r5
 8008062:	4620      	mov	r0, r4
 8008064:	4629      	mov	r1, r5
 8008066:	eeb0 8a40 	vmov.f32	s16, s0
 800806a:	eef0 8a60 	vmov.f32	s17, s1
 800806e:	f7f8 fd29 	bl	8000ac4 <__aeabi_dcmpun>
 8008072:	b990      	cbnz	r0, 800809a <sqrt+0x4a>
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	4620      	mov	r0, r4
 800807a:	4629      	mov	r1, r5
 800807c:	f7f8 fcfa 	bl	8000a74 <__aeabi_dcmplt>
 8008080:	b158      	cbz	r0, 800809a <sqrt+0x4a>
 8008082:	f7ff ffbb 	bl	8007ffc <__errno>
 8008086:	2321      	movs	r3, #33	; 0x21
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	2300      	movs	r3, #0
 800808e:	4610      	mov	r0, r2
 8008090:	4619      	mov	r1, r3
 8008092:	f7f8 fba7 	bl	80007e4 <__aeabi_ddiv>
 8008096:	ec41 0b18 	vmov	d8, r0, r1
 800809a:	eeb0 0a48 	vmov.f32	s0, s16
 800809e:	eef0 0a68 	vmov.f32	s1, s17
 80080a2:	ecbd 8b02 	vpop	{d8}
 80080a6:	bd38      	pop	{r3, r4, r5, pc}

080080a8 <__ieee754_sqrt>:
 80080a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	ec55 4b10 	vmov	r4, r5, d0
 80080b0:	4e67      	ldr	r6, [pc, #412]	; (8008250 <__ieee754_sqrt+0x1a8>)
 80080b2:	43ae      	bics	r6, r5
 80080b4:	ee10 0a10 	vmov	r0, s0
 80080b8:	ee10 2a10 	vmov	r2, s0
 80080bc:	4629      	mov	r1, r5
 80080be:	462b      	mov	r3, r5
 80080c0:	d10d      	bne.n	80080de <__ieee754_sqrt+0x36>
 80080c2:	f7f8 fa65 	bl	8000590 <__aeabi_dmul>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4620      	mov	r0, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	f7f8 f8a9 	bl	8000224 <__adddf3>
 80080d2:	4604      	mov	r4, r0
 80080d4:	460d      	mov	r5, r1
 80080d6:	ec45 4b10 	vmov	d0, r4, r5
 80080da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	2d00      	cmp	r5, #0
 80080e0:	dc0b      	bgt.n	80080fa <__ieee754_sqrt+0x52>
 80080e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80080e6:	4326      	orrs	r6, r4
 80080e8:	d0f5      	beq.n	80080d6 <__ieee754_sqrt+0x2e>
 80080ea:	b135      	cbz	r5, 80080fa <__ieee754_sqrt+0x52>
 80080ec:	f7f8 f898 	bl	8000220 <__aeabi_dsub>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	f7f8 fb76 	bl	80007e4 <__aeabi_ddiv>
 80080f8:	e7eb      	b.n	80080d2 <__ieee754_sqrt+0x2a>
 80080fa:	1509      	asrs	r1, r1, #20
 80080fc:	f000 808d 	beq.w	800821a <__ieee754_sqrt+0x172>
 8008100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008104:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800810c:	07c9      	lsls	r1, r1, #31
 800810e:	bf5c      	itt	pl
 8008110:	005b      	lslpl	r3, r3, #1
 8008112:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008116:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800811a:	bf58      	it	pl
 800811c:	0052      	lslpl	r2, r2, #1
 800811e:	2500      	movs	r5, #0
 8008120:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008124:	1076      	asrs	r6, r6, #1
 8008126:	0052      	lsls	r2, r2, #1
 8008128:	f04f 0e16 	mov.w	lr, #22
 800812c:	46ac      	mov	ip, r5
 800812e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008132:	eb0c 0001 	add.w	r0, ip, r1
 8008136:	4298      	cmp	r0, r3
 8008138:	bfde      	ittt	le
 800813a:	1a1b      	suble	r3, r3, r0
 800813c:	eb00 0c01 	addle.w	ip, r0, r1
 8008140:	186d      	addle	r5, r5, r1
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	f1be 0e01 	subs.w	lr, lr, #1
 8008148:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800814c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008150:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008154:	d1ed      	bne.n	8008132 <__ieee754_sqrt+0x8a>
 8008156:	4674      	mov	r4, lr
 8008158:	2720      	movs	r7, #32
 800815a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800815e:	4563      	cmp	r3, ip
 8008160:	eb01 000e 	add.w	r0, r1, lr
 8008164:	dc02      	bgt.n	800816c <__ieee754_sqrt+0xc4>
 8008166:	d113      	bne.n	8008190 <__ieee754_sqrt+0xe8>
 8008168:	4290      	cmp	r0, r2
 800816a:	d811      	bhi.n	8008190 <__ieee754_sqrt+0xe8>
 800816c:	2800      	cmp	r0, #0
 800816e:	eb00 0e01 	add.w	lr, r0, r1
 8008172:	da57      	bge.n	8008224 <__ieee754_sqrt+0x17c>
 8008174:	f1be 0f00 	cmp.w	lr, #0
 8008178:	db54      	blt.n	8008224 <__ieee754_sqrt+0x17c>
 800817a:	f10c 0801 	add.w	r8, ip, #1
 800817e:	eba3 030c 	sub.w	r3, r3, ip
 8008182:	4290      	cmp	r0, r2
 8008184:	bf88      	it	hi
 8008186:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800818a:	1a12      	subs	r2, r2, r0
 800818c:	440c      	add	r4, r1
 800818e:	46c4      	mov	ip, r8
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	3f01      	subs	r7, #1
 8008194:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008198:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800819c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80081a0:	d1dd      	bne.n	800815e <__ieee754_sqrt+0xb6>
 80081a2:	4313      	orrs	r3, r2
 80081a4:	d01b      	beq.n	80081de <__ieee754_sqrt+0x136>
 80081a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008254 <__ieee754_sqrt+0x1ac>
 80081aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008258 <__ieee754_sqrt+0x1b0>
 80081ae:	e9da 0100 	ldrd	r0, r1, [sl]
 80081b2:	e9db 2300 	ldrd	r2, r3, [fp]
 80081b6:	f7f8 f833 	bl	8000220 <__aeabi_dsub>
 80081ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4640      	mov	r0, r8
 80081c4:	4649      	mov	r1, r9
 80081c6:	f7f8 fc5f 	bl	8000a88 <__aeabi_dcmple>
 80081ca:	b140      	cbz	r0, 80081de <__ieee754_sqrt+0x136>
 80081cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80081d0:	e9da 0100 	ldrd	r0, r1, [sl]
 80081d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80081d8:	d126      	bne.n	8008228 <__ieee754_sqrt+0x180>
 80081da:	3501      	adds	r5, #1
 80081dc:	463c      	mov	r4, r7
 80081de:	106a      	asrs	r2, r5, #1
 80081e0:	0863      	lsrs	r3, r4, #1
 80081e2:	07e9      	lsls	r1, r5, #31
 80081e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80081e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80081ec:	bf48      	it	mi
 80081ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80081f2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80081f6:	461c      	mov	r4, r3
 80081f8:	e76d      	b.n	80080d6 <__ieee754_sqrt+0x2e>
 80081fa:	0ad3      	lsrs	r3, r2, #11
 80081fc:	3815      	subs	r0, #21
 80081fe:	0552      	lsls	r2, r2, #21
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0fa      	beq.n	80081fa <__ieee754_sqrt+0x152>
 8008204:	02dc      	lsls	r4, r3, #11
 8008206:	d50a      	bpl.n	800821e <__ieee754_sqrt+0x176>
 8008208:	f1c1 0420 	rsb	r4, r1, #32
 800820c:	fa22 f404 	lsr.w	r4, r2, r4
 8008210:	1e4d      	subs	r5, r1, #1
 8008212:	408a      	lsls	r2, r1
 8008214:	4323      	orrs	r3, r4
 8008216:	1b41      	subs	r1, r0, r5
 8008218:	e772      	b.n	8008100 <__ieee754_sqrt+0x58>
 800821a:	4608      	mov	r0, r1
 800821c:	e7f0      	b.n	8008200 <__ieee754_sqrt+0x158>
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	3101      	adds	r1, #1
 8008222:	e7ef      	b.n	8008204 <__ieee754_sqrt+0x15c>
 8008224:	46e0      	mov	r8, ip
 8008226:	e7aa      	b.n	800817e <__ieee754_sqrt+0xd6>
 8008228:	f7f7 fffc 	bl	8000224 <__adddf3>
 800822c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4640      	mov	r0, r8
 8008236:	4649      	mov	r1, r9
 8008238:	f7f8 fc1c 	bl	8000a74 <__aeabi_dcmplt>
 800823c:	b120      	cbz	r0, 8008248 <__ieee754_sqrt+0x1a0>
 800823e:	1ca0      	adds	r0, r4, #2
 8008240:	bf08      	it	eq
 8008242:	3501      	addeq	r5, #1
 8008244:	3402      	adds	r4, #2
 8008246:	e7ca      	b.n	80081de <__ieee754_sqrt+0x136>
 8008248:	3401      	adds	r4, #1
 800824a:	f024 0401 	bic.w	r4, r4, #1
 800824e:	e7c6      	b.n	80081de <__ieee754_sqrt+0x136>
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	200078c8 	.word	0x200078c8
 8008258:	200078d0 	.word	0x200078d0

0800825c <_init>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr

08008268 <_fini>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr
