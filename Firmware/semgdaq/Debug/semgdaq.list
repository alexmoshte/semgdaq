
semgdaq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc2c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013058  0800be08  0800be08  0001be08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee60  0801ee60  00039048  2**0
                  CONTENTS
  4 .ARM          00000000  0801ee60  0801ee60  00039048  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801ee60  0801ee60  00039048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ee60  0801ee60  0002ee60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ee64  0801ee64  0002ee64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00009048  20000000  0801ee68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001233c  20009048  08027eb0  00039048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b384  08027eb0  0003b384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00039048  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00039078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002454e  00000000  00000000  00039130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f2c  00000000  00000000  0005d67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  000625b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001120  00000000  00000000  00063dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d06  00000000  00000000  00064ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002020c  00000000  00000000  00087bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e41a5  00000000  00000000  000a7e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069c8  00000000  00000000  0018bfb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00192978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004cd8  00000000  00000000  00192a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000118  00000000  00000000  001976db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20009048 	.word	0x20009048
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bdec 	.word	0x0800bdec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000904c 	.word	0x2000904c
 8000214:	0800bdec 	.word	0x0800bdec

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <ADC1_IN1_autocorr_calc>:
arm_status StatusCoeffs_5;
arm_status StatusCoeffs_6;

//FUNCTION DEFINITIONS
void ADC1_IN1_autocorr_calc(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e01e      	b.n	8000c2a <ADC1_IN1_autocorr_calc+0x4a>
	{
		float32_t result_1 = 0.0f; // Initializing it to zero before calculation
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag  for the data set*/
		uint32_t Blocksize_1 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000bf2:	23f6      	movs	r3, #246	; 0xf6
 8000bf4:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN1.MA_ADC1_IN1_OutBfr[n]), AR_ADC1_IN1.MA_ADC1_IN1_OutBfr, Blocksize_1, &result_1); // A CMSIS DSP function for computing dot products
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <ADC1_IN1_autocorr_calc+0x5c>)
 8000bfe:	4413      	add	r3, r2
 8000c00:	1d18      	adds	r0, r3, #4
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <ADC1_IN1_autocorr_calc+0x60>)
 8000c08:	f009 fc54 	bl	800a4b4 <arm_dot_prod_f32>

		AutoCorr_1[n] = result_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000c0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c10:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000c44 <ADC1_IN1_autocorr_calc+0x64>
 8000c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <ADC1_IN1_autocorr_calc+0x68>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n = 0; n <= AR_ORDER; n++)  // AR_ORDER is 10, so n runs from 0 to 10 (inclusive)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b0a      	cmp	r3, #10
 8000c2e:	d9dd      	bls.n	8000bec <ADC1_IN1_autocorr_calc+0xc>
	}
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000925c 	.word	0x2000925c
 8000c40:	20009280 	.word	0x20009280
 8000c44:	43800000 	.word	0x43800000
 8000c48:	20009064 	.word	0x20009064

08000c4c <ADC1_IN1_autoreg_coeffs>:

float32_t* ADC1_IN1_autoreg_coeffs(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000c52:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_1 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c5a:	e013      	b.n	8000c84 <ADC1_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_1[n] = AutoCorr_1[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000c5c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a43      	ldr	r2, [pc, #268]	; (8000d70 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000c74:	443b      	add	r3, r7
 8000c76:	3b38      	subs	r3, #56	; 0x38
 8000c78:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000c7a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c7e:	3301      	adds	r3, #1
 8000c80:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000c84:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	d9e7      	bls.n	8000c5c <ADC1_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_1); // Initializes the autocorrelations matrix
 8000c8c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000c90:	2201      	movs	r2, #1
 8000c92:	210a      	movs	r1, #10
 8000c94:	4837      	ldr	r0, [pc, #220]	; (8000d74 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000c96:	f009 fa41 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_1[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000ca0:	e02f      	b.n	8000d02 <ADC1_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000ca8:	e022      	b.n	8000cf0 <ADC1_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_1[r * 10 + c] = AutoCorr_1[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000caa:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000cae:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000cb8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000cbc:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cce:	4413      	add	r3, r2
 8000cd0:	4827      	ldr	r0, [pc, #156]	; (8000d70 <ADC1_IN1_autoreg_coeffs+0x124>)
 8000cd2:	008a      	lsls	r2, r1, #2
 8000cd4:	4402      	add	r2, r0
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000cdc:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ce6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000cf0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000cf4:	2b09      	cmp	r3, #9
 8000cf6:	ddd8      	ble.n	8000caa <ADC1_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000cf8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000d02:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000d06:	2b09      	cmp	r3, #9
 8000d08:	ddcb      	ble.n	8000ca2 <ADC1_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_1); // Initializes the Yule-Walker matrix
 8000d0a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000d0e:	220a      	movs	r2, #10
 8000d10:	210a      	movs	r1, #10
 8000d12:	4819      	ldr	r0, [pc, #100]	; (8000d78 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d14:	f009 fa02 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_1 [AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_1); // Initializes the inverse Yule-Walker matrix
 8000d18:	463b      	mov	r3, r7
 8000d1a:	220a      	movs	r2, #10
 8000d1c:	210a      	movs	r1, #10
 8000d1e:	4817      	ldr	r0, [pc, #92]	; (8000d7c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d20:	f009 f9fc 	bl	800a11c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_1 = arm_mat_inverse_f32(&ADC1_IN1_YW_mtx, &ADC1_IN1_Inv_YW_mtx);
 8000d24:	4915      	ldr	r1, [pc, #84]	; (8000d7c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <ADC1_IN1_autoreg_coeffs+0x12c>)
 8000d28:	f009 f8f2 	bl	8009f10 <arm_mat_inverse_f32>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_1 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000d32:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d113      	bne.n	8000d62 <ADC1_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4810      	ldr	r0, [pc, #64]	; (8000d80 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d40:	f009 fed0 	bl	800aae4 <memset>

		arm_mat_init_f32(&ADC1_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_1); //Initializes the coefficients Matrix
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <ADC1_IN1_autoreg_coeffs+0x134>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	210a      	movs	r1, #10
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d4c:	f009 f9e6 	bl	800a11c <arm_mat_init_f32>

        StatusCoeffs_1 = arm_mat_mult_f32( &ADC1_IN1_Inv_YW_mtx, &ADC1_IN1_AC_mtx, &ADC1_IN1_coeffs_mtx );
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <ADC1_IN1_autoreg_coeffs+0x138>)
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <ADC1_IN1_autoreg_coeffs+0x128>)
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <ADC1_IN1_autoreg_coeffs+0x130>)
 8000d56:	f009 f83b 	bl	8009dd0 <arm_mat_mult_f32>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <ADC1_IN1_autoreg_coeffs+0x13c>)
 8000d60:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_1;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <ADC1_IN1_autoreg_coeffs+0x134>)
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20009064 	.word	0x20009064
 8000d74:	2000ab94 	.word	0x2000ab94
 8000d78:	2000ab34 	.word	0x2000ab34
 8000d7c:	2000ab64 	.word	0x2000ab64
 8000d80:	2000916c 	.word	0x2000916c
 8000d84:	2000abc4 	.word	0x2000abc4
 8000d88:	2000abf4 	.word	0x2000abf4

08000d8c <ADC1_IN2_autocorr_calc>:



void ADC1_IN2_autocorr_calc(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e01e      	b.n	8000dd6 <ADC1_IN2_autocorr_calc+0x4a>
	{
		float32_t result_2 = 0.0f; // Initializing it to zero before calculation
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_2 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000d9e:	23f6      	movs	r3, #246	; 0xf6
 8000da0:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC1_IN2.MA_ADC1_IN2_OutBfr[n]), AR_ADC1_IN2.MA_ADC1_IN2_OutBfr, Blocksize_2, &result_2);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3308      	adds	r3, #8
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <ADC1_IN2_autocorr_calc+0x5c>)
 8000daa:	4413      	add	r3, r2
 8000dac:	1d18      	adds	r0, r3, #4
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <ADC1_IN2_autocorr_calc+0x60>)
 8000db4:	f009 fb7e 	bl	800a4b4 <arm_dot_prod_f32>

		AutoCorr_2[n] = result_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000db8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dbc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000df0 <ADC1_IN2_autocorr_calc+0x64>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <ADC1_IN2_autocorr_calc+0x68>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b09      	cmp	r3, #9
 8000dda:	d9dd      	bls.n	8000d98 <ADC1_IN2_autocorr_calc+0xc>
	}
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20009680 	.word	0x20009680
 8000dec:	200096a4 	.word	0x200096a4
 8000df0:	43800000 	.word	0x43800000
 8000df4:	20009090 	.word	0x20009090

08000df8 <ADC1_IN2_autoreg_coeffs>:

float32_t* ADC1_IN2_autoreg_coeffs(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000dfe:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_2 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e06:	e013      	b.n	8000e30 <ADC1_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_2[n] = AutoCorr_2[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000e08:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a43      	ldr	r2, [pc, #268]	; (8000f1c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000e20:	443b      	add	r3, r7
 8000e22:	3b38      	subs	r3, #56	; 0x38
 8000e24:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000e26:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000e30:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d9e7      	bls.n	8000e08 <ADC1_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC1_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_2); //Initializes the autocorrelations matrix
 8000e38:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	210a      	movs	r1, #10
 8000e40:	4837      	ldr	r0, [pc, #220]	; (8000f20 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000e42:	f009 f96b 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_2[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000e4c:	e02f      	b.n	8000eae <ADC1_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e54:	e022      	b.n	8000e9c <ADC1_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_2[r * 10 + c] = AutoCorr_2[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8000e56:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e64:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e68:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	461a      	mov	r2, r3
 8000e76:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4827      	ldr	r0, [pc, #156]	; (8000f1c <ADC1_IN2_autoreg_coeffs+0x124>)
 8000e7e:	008a      	lsls	r2, r1, #2
 8000e80:	4402      	add	r2, r0
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8000e88:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000e92:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e96:	3301      	adds	r3, #1
 8000e98:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8000e9c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	ddd8      	ble.n	8000e56 <ADC1_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8000ea4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000eae:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000eb2:	2b09      	cmp	r3, #9
 8000eb4:	ddcb      	ble.n	8000e4e <ADC1_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC1_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_2); // Initializes the Yule-Walker matrix
 8000eb6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000eba:	220a      	movs	r2, #10
 8000ebc:	210a      	movs	r1, #10
 8000ebe:	4819      	ldr	r0, [pc, #100]	; (8000f24 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000ec0:	f009 f92c 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_2[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC1_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_2); // Initializes the inverse Yule-Walker matrix
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	220a      	movs	r2, #10
 8000ec8:	210a      	movs	r1, #10
 8000eca:	4817      	ldr	r0, [pc, #92]	; (8000f28 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000ecc:	f009 f926 	bl	800a11c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_2 = arm_mat_inverse_f32(&ADC1_IN2_YW_mtx, &ADC1_IN2_Inv_YW_mtx);
 8000ed0:	4915      	ldr	r1, [pc, #84]	; (8000f28 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <ADC1_IN2_autoreg_coeffs+0x12c>)
 8000ed4:	f009 f81c 	bl	8009f10 <arm_mat_inverse_f32>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_2 == ARM_MATH_SUCCESS) // Check if operation was successful
 8000ede:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d113      	bne.n	8000f0e <ADC1_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_2, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4810      	ldr	r0, [pc, #64]	; (8000f2c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000eec:	f009 fdfa 	bl	800aae4 <memset>

		arm_mat_init_f32(&ADC1_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_2); //Initializes the coefficients Matrix
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <ADC1_IN2_autoreg_coeffs+0x134>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	480e      	ldr	r0, [pc, #56]	; (8000f30 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000ef8:	f009 f910 	bl	800a11c <arm_mat_init_f32>

        StatusCoeffs_2 = arm_mat_mult_f32( &ADC1_IN2_Inv_YW_mtx, &ADC1_IN2_AC_mtx, &ADC1_IN2_coeffs_mtx );
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <ADC1_IN2_autoreg_coeffs+0x138>)
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <ADC1_IN2_autoreg_coeffs+0x128>)
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <ADC1_IN2_autoreg_coeffs+0x130>)
 8000f02:	f008 ff65 	bl	8009dd0 <arm_mat_mult_f32>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <ADC1_IN2_autoreg_coeffs+0x13c>)
 8000f0c:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_2;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <ADC1_IN2_autoreg_coeffs+0x134>)
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20009090 	.word	0x20009090
 8000f20:	2000ab9c 	.word	0x2000ab9c
 8000f24:	2000ab3c 	.word	0x2000ab3c
 8000f28:	2000ab6c 	.word	0x2000ab6c
 8000f2c:	20009194 	.word	0x20009194
 8000f30:	2000abcc 	.word	0x2000abcc
 8000f34:	2000abf5 	.word	0x2000abf5

08000f38 <ADC2_IN3_autocorr_calc>:



void ADC2_IN3_autocorr_calc(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	e01e      	b.n	8000f82 <ADC2_IN3_autocorr_calc+0x4a>
	{
		float32_t result_3 = 0.0f; // Initializing it to zero before calculation
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_3 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8000f4a:	23f6      	movs	r3, #246	; 0xf6
 8000f4c:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN3.MA_ADC2_IN3_OutBfr[n]), AR_ADC2_IN3.MA_ADC2_IN3_OutBfr, Blocksize_3, &result_3);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3308      	adds	r3, #8
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <ADC2_IN3_autocorr_calc+0x5c>)
 8000f56:	4413      	add	r3, r2
 8000f58:	1d18      	adds	r0, r3, #4
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <ADC2_IN3_autocorr_calc+0x60>)
 8000f60:	f009 faa8 	bl	800a4b4 <arm_dot_prod_f32>

		AutoCorr_3[n] = result_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8000f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f68:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000f9c <ADC2_IN3_autocorr_calc+0x64>
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <ADC2_IN3_autocorr_calc+0x68>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b09      	cmp	r3, #9
 8000f86:	d9dd      	bls.n	8000f44 <ADC2_IN3_autocorr_calc+0xc>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20009aa4 	.word	0x20009aa4
 8000f98:	20009ac8 	.word	0x20009ac8
 8000f9c:	43800000 	.word	0x43800000
 8000fa0:	200090bc 	.word	0x200090bc

08000fa4 <ADC2_IN3_autoreg_coeffs>:

float32_t* ADC2_IN3_autoreg_coeffs(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8000faa:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_3 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000fb2:	e013      	b.n	8000fdc <ADC2_IN3_autoreg_coeffs+0x38>
	{
		AC_Matrix_3[n] = AutoCorr_3[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8000fb4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a43      	ldr	r2, [pc, #268]	; (80010c8 <ADC2_IN3_autoreg_coeffs+0x124>)
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8000fcc:	443b      	add	r3, r7
 8000fce:	3b38      	subs	r3, #56	; 0x38
 8000fd0:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 8000fd2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8000fdc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	d9e7      	bls.n	8000fb4 <ADC2_IN3_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN3_AC_mtx, AR_ORDER, 1, AC_Matrix_3); //Initializes the autocorrelations matrix
 8000fe4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000fe8:	2201      	movs	r2, #1
 8000fea:	210a      	movs	r1, #10
 8000fec:	4837      	ldr	r0, [pc, #220]	; (80010cc <ADC2_IN3_autoreg_coeffs+0x128>)
 8000fee:	f009 f895 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_3[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8000ff8:	e02f      	b.n	800105a <ADC2_IN3_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001000:	e022      	b.n	8001048 <ADC2_IN3_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_3[r * 10 + c] = AutoCorr_3[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 8001002:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001006:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001010:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001014:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	461a      	mov	r2, r3
 8001022:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001026:	4413      	add	r3, r2
 8001028:	4827      	ldr	r0, [pc, #156]	; (80010c8 <ADC2_IN3_autoreg_coeffs+0x124>)
 800102a:	008a      	lsls	r2, r1, #2
 800102c:	4402      	add	r2, r0
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8001034:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 800103e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001042:	3301      	adds	r3, #1
 8001044:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001048:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800104c:	2b09      	cmp	r3, #9
 800104e:	ddd8      	ble.n	8001002 <ADC2_IN3_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001050:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001054:	3301      	adds	r3, #1
 8001056:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800105a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800105e:	2b09      	cmp	r3, #9
 8001060:	ddcb      	ble.n	8000ffa <ADC2_IN3_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN3_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_3); // Initializes the Yule-Walker matrix
 8001062:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001066:	220a      	movs	r2, #10
 8001068:	210a      	movs	r1, #10
 800106a:	4819      	ldr	r0, [pc, #100]	; (80010d0 <ADC2_IN3_autoreg_coeffs+0x12c>)
 800106c:	f009 f856 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_3[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN3_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_3); // Initializes the inverse Yule-Walker matrix
 8001070:	463b      	mov	r3, r7
 8001072:	220a      	movs	r2, #10
 8001074:	210a      	movs	r1, #10
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <ADC2_IN3_autoreg_coeffs+0x130>)
 8001078:	f009 f850 	bl	800a11c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_3 = arm_mat_inverse_f32(&ADC2_IN3_YW_mtx, &ADC2_IN3_Inv_YW_mtx);
 800107c:	4915      	ldr	r1, [pc, #84]	; (80010d4 <ADC2_IN3_autoreg_coeffs+0x130>)
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <ADC2_IN3_autoreg_coeffs+0x12c>)
 8001080:	f008 ff46 	bl	8009f10 <arm_mat_inverse_f32>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_3 == ARM_MATH_SUCCESS) // Check if operation was successful
 800108a:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800108e:	2b00      	cmp	r3, #0
 8001090:	d113      	bne.n	80010ba <ADC2_IN3_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_3, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 8001092:	2228      	movs	r2, #40	; 0x28
 8001094:	2100      	movs	r1, #0
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <ADC2_IN3_autoreg_coeffs+0x134>)
 8001098:	f009 fd24 	bl	800aae4 <memset>

		arm_mat_init_f32(&ADC2_IN3_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_3); //Initializes the coefficients Matrix
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <ADC2_IN3_autoreg_coeffs+0x134>)
 800109e:	2201      	movs	r2, #1
 80010a0:	210a      	movs	r1, #10
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <ADC2_IN3_autoreg_coeffs+0x138>)
 80010a4:	f009 f83a 	bl	800a11c <arm_mat_init_f32>

        StatusCoeffs_3 = arm_mat_mult_f32( &ADC2_IN3_Inv_YW_mtx, &ADC2_IN3_AC_mtx, &ADC2_IN3_coeffs_mtx );
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <ADC2_IN3_autoreg_coeffs+0x138>)
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <ADC2_IN3_autoreg_coeffs+0x128>)
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <ADC2_IN3_autoreg_coeffs+0x130>)
 80010ae:	f008 fe8f 	bl	8009dd0 <arm_mat_mult_f32>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <ADC2_IN3_autoreg_coeffs+0x13c>)
 80010b8:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_3;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <ADC2_IN3_autoreg_coeffs+0x134>)
}
 80010bc:	4618      	mov	r0, r3
 80010be:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200090bc 	.word	0x200090bc
 80010cc:	2000aba4 	.word	0x2000aba4
 80010d0:	2000ab44 	.word	0x2000ab44
 80010d4:	2000ab74 	.word	0x2000ab74
 80010d8:	200091bc 	.word	0x200091bc
 80010dc:	2000abd4 	.word	0x2000abd4
 80010e0:	2000abf6 	.word	0x2000abf6

080010e4 <ADC2_IN4_autocorr_calc>:



void ADC2_IN4_autocorr_calc(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e01e      	b.n	800112e <ADC2_IN4_autocorr_calc+0x4a>
	{
		float32_t result_4 = 0.0f; // Initializing it to zero before calculation
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_4 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80010f6:	23f6      	movs	r3, #246	; 0xf6
 80010f8:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC2_IN4.MA_ADC2_IN4_OutBfr[n]), AR_ADC2_IN4.MA_ADC2_IN4_OutBfr, Blocksize_4, &result_4);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3308      	adds	r3, #8
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <ADC2_IN4_autocorr_calc+0x5c>)
 8001102:	4413      	add	r3, r2
 8001104:	1d18      	adds	r0, r3, #4
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <ADC2_IN4_autocorr_calc+0x60>)
 800110c:	f009 f9d2 	bl	800a4b4 <arm_dot_prod_f32>

		AutoCorr_4[n] = result_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8001110:	ed97 7a01 	vldr	s14, [r7, #4]
 8001114:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001148 <ADC2_IN4_autocorr_calc+0x64>
 8001118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <ADC2_IN4_autocorr_calc+0x68>)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b09      	cmp	r3, #9
 8001132:	d9dd      	bls.n	80010f0 <ADC2_IN4_autocorr_calc+0xc>
	}
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20009ec8 	.word	0x20009ec8
 8001144:	20009eec 	.word	0x20009eec
 8001148:	43800000 	.word	0x43800000
 800114c:	200090e8 	.word	0x200090e8

08001150 <ADC2_IN4_autoreg_coeffs>:

float32_t* ADC2_IN4_autoreg_coeffs(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001156:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_4 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800115e:	e013      	b.n	8001188 <ADC2_IN4_autoreg_coeffs+0x38>
	{
		AC_Matrix_4[n] = AutoCorr_4[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 8001160:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001164:	3301      	adds	r3, #1
 8001166:	4a43      	ldr	r2, [pc, #268]	; (8001274 <ADC2_IN4_autoreg_coeffs+0x124>)
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001178:	443b      	add	r3, r7
 800117a:	3b38      	subs	r3, #56	; 0x38
 800117c:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800117e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001182:	3301      	adds	r3, #1
 8001184:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001188:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800118c:	2b09      	cmp	r3, #9
 800118e:	d9e7      	bls.n	8001160 <ADC2_IN4_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC2_IN4_AC_mtx, AR_ORDER, 1, AC_Matrix_4); //Initializes the autocorrelations matrix
 8001190:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001194:	2201      	movs	r2, #1
 8001196:	210a      	movs	r1, #10
 8001198:	4837      	ldr	r0, [pc, #220]	; (8001278 <ADC2_IN4_autoreg_coeffs+0x128>)
 800119a:	f008 ffbf 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_4[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80011a4:	e02f      	b.n	8001206 <ADC2_IN4_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80011ac:	e022      	b.n	80011f4 <ADC2_IN4_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_4[r * 10 + c] = AutoCorr_4[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 80011ae:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80011b2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80011bc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80011c0:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	461a      	mov	r2, r3
 80011ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011d2:	4413      	add	r3, r2
 80011d4:	4827      	ldr	r0, [pc, #156]	; (8001274 <ADC2_IN4_autoreg_coeffs+0x124>)
 80011d6:	008a      	lsls	r2, r1, #2
 80011d8:	4402      	add	r2, r0
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80011e0:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 80011ea:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011ee:	3301      	adds	r3, #1
 80011f0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80011f4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	ddd8      	ble.n	80011ae <ADC2_IN4_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80011fc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001200:	3301      	adds	r3, #1
 8001202:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001206:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800120a:	2b09      	cmp	r3, #9
 800120c:	ddcb      	ble.n	80011a6 <ADC2_IN4_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC2_IN4_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_4); // Initializes the Yule-Walker matrix
 800120e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001212:	220a      	movs	r2, #10
 8001214:	210a      	movs	r1, #10
 8001216:	4819      	ldr	r0, [pc, #100]	; (800127c <ADC2_IN4_autoreg_coeffs+0x12c>)
 8001218:	f008 ff80 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_4[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC2_IN4_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_4); // Initializes the inverse Yule-Walker matrix
 800121c:	463b      	mov	r3, r7
 800121e:	220a      	movs	r2, #10
 8001220:	210a      	movs	r1, #10
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <ADC2_IN4_autoreg_coeffs+0x130>)
 8001224:	f008 ff7a 	bl	800a11c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_4 = arm_mat_inverse_f32(&ADC2_IN4_YW_mtx, &ADC2_IN4_Inv_YW_mtx);
 8001228:	4915      	ldr	r1, [pc, #84]	; (8001280 <ADC2_IN4_autoreg_coeffs+0x130>)
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <ADC2_IN4_autoreg_coeffs+0x12c>)
 800122c:	f008 fe70 	bl	8009f10 <arm_mat_inverse_f32>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_4 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001236:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800123a:	2b00      	cmp	r3, #0
 800123c:	d113      	bne.n	8001266 <ADC2_IN4_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_4, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800123e:	2228      	movs	r2, #40	; 0x28
 8001240:	2100      	movs	r1, #0
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <ADC2_IN4_autoreg_coeffs+0x134>)
 8001244:	f009 fc4e 	bl	800aae4 <memset>

		arm_mat_init_f32(&ADC2_IN4_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_4); //Initializes the coefficients Matrix
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <ADC2_IN4_autoreg_coeffs+0x134>)
 800124a:	2201      	movs	r2, #1
 800124c:	210a      	movs	r1, #10
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001250:	f008 ff64 	bl	800a11c <arm_mat_init_f32>

        StatusCoeffs_4 = arm_mat_mult_f32( &ADC2_IN4_Inv_YW_mtx, &ADC2_IN4_AC_mtx, &ADC2_IN4_coeffs_mtx );
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <ADC2_IN4_autoreg_coeffs+0x138>)
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <ADC2_IN4_autoreg_coeffs+0x128>)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <ADC2_IN4_autoreg_coeffs+0x130>)
 800125a:	f008 fdb9 	bl	8009dd0 <arm_mat_mult_f32>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <ADC2_IN4_autoreg_coeffs+0x13c>)
 8001264:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_4;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <ADC2_IN4_autoreg_coeffs+0x134>)
}
 8001268:	4618      	mov	r0, r3
 800126a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200090e8 	.word	0x200090e8
 8001278:	2000abac 	.word	0x2000abac
 800127c:	2000ab4c 	.word	0x2000ab4c
 8001280:	2000ab7c 	.word	0x2000ab7c
 8001284:	200091e4 	.word	0x200091e4
 8001288:	2000abdc 	.word	0x2000abdc
 800128c:	2000abf7 	.word	0x2000abf7

08001290 <ADC3_IN1_autocorr_calc>:



void ADC3_IN1_autocorr_calc(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e01e      	b.n	80012da <ADC3_IN1_autocorr_calc+0x4a>
	{
		float32_t result_5 = 0.0f; // Initializing it to zero before calculation
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_5 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 80012a2:	23f6      	movs	r3, #246	; 0xf6
 80012a4:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN1.MA_ADC3_IN1_OutBfr[n]), AR_ADC3_IN1.MA_ADC3_IN1_OutBfr, Blocksize_5, &result_5);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3308      	adds	r3, #8
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <ADC3_IN1_autocorr_calc+0x5c>)
 80012ae:	4413      	add	r3, r2
 80012b0:	1d18      	adds	r0, r3, #4
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <ADC3_IN1_autocorr_calc+0x60>)
 80012b8:	f009 f8fc 	bl	800a4b4 <arm_dot_prod_f32>

		AutoCorr_5[n] = result_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80012bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80012f4 <ADC3_IN1_autocorr_calc+0x64>
 80012c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <ADC3_IN1_autocorr_calc+0x68>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3301      	adds	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d9dd      	bls.n	800129c <ADC3_IN1_autocorr_calc+0xc>
	}
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000a2ec 	.word	0x2000a2ec
 80012f0:	2000a310 	.word	0x2000a310
 80012f4:	43800000 	.word	0x43800000
 80012f8:	20009114 	.word	0x20009114

080012fc <ADC3_IN1_autoreg_coeffs>:

float32_t* ADC3_IN1_autoreg_coeffs(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001302:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_5 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800130a:	e013      	b.n	8001334 <ADC3_IN1_autoreg_coeffs+0x38>
	{
		AC_Matrix_5[n] = AutoCorr_5[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 800130c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001310:	3301      	adds	r3, #1
 8001312:	4a43      	ldr	r2, [pc, #268]	; (8001420 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001324:	443b      	add	r3, r7
 8001326:	3b38      	subs	r3, #56	; 0x38
 8001328:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 800132a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800132e:	3301      	adds	r3, #1
 8001330:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001334:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001338:	2b09      	cmp	r3, #9
 800133a:	d9e7      	bls.n	800130c <ADC3_IN1_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN1_AC_mtx, AR_ORDER, 1, AC_Matrix_5); //Initializes the autocorrelations matrix
 800133c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001340:	2201      	movs	r2, #1
 8001342:	210a      	movs	r1, #10
 8001344:	4837      	ldr	r0, [pc, #220]	; (8001424 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001346:	f008 fee9 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_5[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001350:	e02f      	b.n	80013b2 <ADC3_IN1_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001358:	e022      	b.n	80013a0 <ADC3_IN1_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_5[r * 10 + c] = AutoCorr_5[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800135a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800135e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001368:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800136c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	461a      	mov	r2, r3
 800137a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800137e:	4413      	add	r3, r2
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <ADC3_IN1_autoreg_coeffs+0x124>)
 8001382:	008a      	lsls	r2, r1, #2
 8001384:	4402      	add	r2, r0
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800138c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001396:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800139a:	3301      	adds	r3, #1
 800139c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80013a0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	ddd8      	ble.n	800135a <ADC3_IN1_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 80013a8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013ac:	3301      	adds	r3, #1
 80013ae:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80013b2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013b6:	2b09      	cmp	r3, #9
 80013b8:	ddcb      	ble.n	8001352 <ADC3_IN1_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN1_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_5); // Initializes the Yule-Walker matrix
 80013ba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80013be:	220a      	movs	r2, #10
 80013c0:	210a      	movs	r1, #10
 80013c2:	4819      	ldr	r0, [pc, #100]	; (8001428 <ADC3_IN1_autoreg_coeffs+0x12c>)
 80013c4:	f008 feaa 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_5[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN1_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_5); // Initializes the inverse Yule-Walker matrix
 80013c8:	463b      	mov	r3, r7
 80013ca:	220a      	movs	r2, #10
 80013cc:	210a      	movs	r1, #10
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <ADC3_IN1_autoreg_coeffs+0x130>)
 80013d0:	f008 fea4 	bl	800a11c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_5 = arm_mat_inverse_f32(&ADC3_IN1_YW_mtx, &ADC3_IN1_Inv_YW_mtx);
 80013d4:	4915      	ldr	r1, [pc, #84]	; (800142c <ADC3_IN1_autoreg_coeffs+0x130>)
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <ADC3_IN1_autoreg_coeffs+0x12c>)
 80013d8:	f008 fd9a 	bl	8009f10 <arm_mat_inverse_f32>
 80013dc:	4603      	mov	r3, r0
 80013de:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_5 == ARM_MATH_SUCCESS) // Check if operation was successful
 80013e2:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d113      	bne.n	8001412 <ADC3_IN1_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_1, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 80013ea:	2228      	movs	r2, #40	; 0x28
 80013ec:	2100      	movs	r1, #0
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <ADC3_IN1_autoreg_coeffs+0x134>)
 80013f0:	f009 fb78 	bl	800aae4 <memset>

		arm_mat_init_f32(&ADC3_IN1_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_5); //Initializes the coefficients Matrix
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <ADC3_IN1_autoreg_coeffs+0x138>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	210a      	movs	r1, #10
 80013fa:	480f      	ldr	r0, [pc, #60]	; (8001438 <ADC3_IN1_autoreg_coeffs+0x13c>)
 80013fc:	f008 fe8e 	bl	800a11c <arm_mat_init_f32>

        StatusCoeffs_5 = arm_mat_mult_f32( &ADC3_IN1_Inv_YW_mtx, &ADC3_IN1_AC_mtx, &ADC3_IN1_coeffs_mtx );
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <ADC3_IN1_autoreg_coeffs+0x13c>)
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <ADC3_IN1_autoreg_coeffs+0x128>)
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <ADC3_IN1_autoreg_coeffs+0x130>)
 8001406:	f008 fce3 	bl	8009dd0 <arm_mat_mult_f32>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <ADC3_IN1_autoreg_coeffs+0x140>)
 8001410:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_5;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <ADC3_IN1_autoreg_coeffs+0x138>)
}
 8001414:	4618      	mov	r0, r3
 8001416:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20009114 	.word	0x20009114
 8001424:	2000abb4 	.word	0x2000abb4
 8001428:	2000ab54 	.word	0x2000ab54
 800142c:	2000ab84 	.word	0x2000ab84
 8001430:	2000916c 	.word	0x2000916c
 8001434:	2000920c 	.word	0x2000920c
 8001438:	2000abe4 	.word	0x2000abe4
 800143c:	2000abf8 	.word	0x2000abf8

08001440 <ADC3_IN2_autocorr_calc>:



void ADC3_IN2_autocorr_calc(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
	/* Iterate through each lag */
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e01e      	b.n	800148a <ADC3_IN2_autocorr_calc+0x4a>
	{
		float32_t result_6 = 0.0f; // Initializing it to zero before calculation
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	607b      	str	r3, [r7, #4]

		/* Number of valid points for the dot product at this lag */
		uint32_t Blocksize_6 = ADC_DMA_SIXTEENTHBUFFERSIZE - AR_ORDER;
 8001452:	23f6      	movs	r3, #246	; 0xf6
 8001454:	60bb      	str	r3, [r7, #8]

		arm_dot_prod_f32(&(AR_ADC3_IN2.MA_ADC3_IN2_OutBfr[n]), AR_ADC3_IN2.MA_ADC3_IN2_OutBfr, Blocksize_6, &result_6);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3308      	adds	r3, #8
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <ADC3_IN2_autocorr_calc+0x5c>)
 800145e:	4413      	add	r3, r2
 8001460:	1d18      	adds	r0, r3, #4
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <ADC3_IN2_autocorr_calc+0x60>)
 8001468:	f009 f824 	bl	800a4b4 <arm_dot_prod_f32>

		AutoCorr_6[n] = result_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 800146c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001470:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014a4 <ADC3_IN2_autocorr_calc+0x64>
 8001474:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <ADC3_IN2_autocorr_calc+0x68>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0; n<AR_ORDER; n++)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b09      	cmp	r3, #9
 800148e:	d9dd      	bls.n	800144c <ADC3_IN2_autocorr_calc+0xc>
	}
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000a710 	.word	0x2000a710
 80014a0:	2000a734 	.word	0x2000a734
 80014a4:	43800000 	.word	0x43800000
 80014a8:	20009140 	.word	0x20009140

080014ac <ADC3_IN2_autoreg_coeffs>:

float32_t* ADC3_IN2_autoreg_coeffs(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80014b2:	af00      	add	r7, sp, #0
	float32_t AC_Matrix_6 [AR_ORDER];

	for(uint32_t n=0; n < AR_ORDER; n++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80014ba:	e013      	b.n	80014e4 <ADC3_IN2_autoreg_coeffs+0x38>
	{
		AC_Matrix_6[n] = AutoCorr_6[n + 1]; // R1 to R10 corresponds to indices 1 to 10
 80014bc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a43      	ldr	r2, [pc, #268]	; (80015d0 <ADC3_IN2_autoreg_coeffs+0x124>)
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80014d4:	443b      	add	r3, r7
 80014d6:	3b38      	subs	r3, #56	; 0x38
 80014d8:	601a      	str	r2, [r3, #0]
	for(uint32_t n=0; n < AR_ORDER; n++)
 80014da:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80014e4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d9e7      	bls.n	80014bc <ADC3_IN2_autoreg_coeffs+0x10>
	}

	arm_mat_init_f32(&ADC3_IN2_AC_mtx, AR_ORDER, 1, AC_Matrix_6); //Initializes the autocorrelations matrix
 80014ec:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80014f0:	2201      	movs	r2, #1
 80014f2:	210a      	movs	r1, #10
 80014f4:	4837      	ldr	r0, [pc, #220]	; (80015d4 <ADC3_IN2_autoreg_coeffs+0x128>)
 80014f6:	f008 fe11 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_6[AR_ORDER * AR_ORDER]; // Array that hold the matrix data (100 elements) according to the Yule-Walker equations

	/* Filling the Yule-Walker matrix with the appropriate values (100 elements) from the auto-correlations buffer values */
	for (int r = 0; r < AR_ORDER; r++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001500:	e02f      	b.n	8001562 <ADC3_IN2_autoreg_coeffs+0xb6>
	{
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001508:	e022      	b.n	8001550 <ADC3_IN2_autoreg_coeffs+0xa4>
	    {
	        /* Access the autocorrelation buffer using the absolute difference of indices */
	    	Yule_Walker_Matrix_6[r * 10 + c] = AutoCorr_6[abs(r - c)];  // We are placing the elements in a one-dimensional array Yule-Walker matrix as if it represents a 10x10 matrix. This is done by calculating the correct index for each matrix element using (i * 10 + j)
 800150a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 800150e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001518:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800151c:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	461a      	mov	r2, r3
 800152a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800152e:	4413      	add	r3, r2
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <ADC3_IN2_autoreg_coeffs+0x124>)
 8001532:	008a      	lsls	r2, r1, #2
 8001534:	4402      	add	r2, r0
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800153c:	f5a1 71e4 	sub.w	r1, r1, #456	; 0x1c8
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	601a      	str	r2, [r3, #0]
	    for (int32_t c = 0; c < AR_ORDER; c++)
 8001546:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800154a:	3301      	adds	r3, #1
 800154c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001550:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001554:	2b09      	cmp	r3, #9
 8001556:	ddd8      	ble.n	800150a <ADC3_IN2_autoreg_coeffs+0x5e>
	for (int r = 0; r < AR_ORDER; r++)
 8001558:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800155c:	3301      	adds	r3, #1
 800155e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001562:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001566:	2b09      	cmp	r3, #9
 8001568:	ddcb      	ble.n	8001502 <ADC3_IN2_autoreg_coeffs+0x56>
	    }
	}

	arm_mat_init_f32(&ADC3_IN2_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_6); // Initializes the Yule-Walker matrix
 800156a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800156e:	220a      	movs	r2, #10
 8001570:	210a      	movs	r1, #10
 8001572:	4819      	ldr	r0, [pc, #100]	; (80015d8 <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001574:	f008 fdd2 	bl	800a11c <arm_mat_init_f32>


	float32_t Yule_Walker_Matrix_Inv_6[AR_ORDER * AR_ORDER]; // Array that hold the inverse matrix data (100 elements)

	arm_mat_init_f32(&ADC3_IN2_Inv_YW_mtx, AR_ORDER, AR_ORDER, Yule_Walker_Matrix_Inv_6); // Initializes the inverse Yule-Walker matrix
 8001578:	463b      	mov	r3, r7
 800157a:	220a      	movs	r2, #10
 800157c:	210a      	movs	r1, #10
 800157e:	4817      	ldr	r0, [pc, #92]	; (80015dc <ADC3_IN2_autoreg_coeffs+0x130>)
 8001580:	f008 fdcc 	bl	800a11c <arm_mat_init_f32>

	/* Calculate the inverse of the Yule-Walker matrix and return status of the operation */
	arm_status StatusInv_6 = arm_mat_inverse_f32(&ADC3_IN2_YW_mtx, &ADC3_IN2_Inv_YW_mtx);
 8001584:	4915      	ldr	r1, [pc, #84]	; (80015dc <ADC3_IN2_autoreg_coeffs+0x130>)
 8001586:	4814      	ldr	r0, [pc, #80]	; (80015d8 <ADC3_IN2_autoreg_coeffs+0x12c>)
 8001588:	f008 fcc2 	bl	8009f10 <arm_mat_inverse_f32>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b

	if(StatusInv_6 == ARM_MATH_SUCCESS) // Check if operation was successful
 8001592:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001596:	2b00      	cmp	r3, #0
 8001598:	d113      	bne.n	80015c2 <ADC3_IN2_autoreg_coeffs+0x116>
	{
		memset(AR_Coeffs_6, 0, AR_ORDER * sizeof(float32_t)); // Initializes the entire autocorrelations array to values zero
 800159a:	2228      	movs	r2, #40	; 0x28
 800159c:	2100      	movs	r1, #0
 800159e:	4810      	ldr	r0, [pc, #64]	; (80015e0 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015a0:	f009 faa0 	bl	800aae4 <memset>

		arm_mat_init_f32(&ADC3_IN2_coeffs_mtx , AR_ORDER, 1 , AR_Coeffs_6); //Initializes the coefficients Matrix
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <ADC3_IN2_autoreg_coeffs+0x134>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	210a      	movs	r1, #10
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015ac:	f008 fdb6 	bl	800a11c <arm_mat_init_f32>

        StatusCoeffs_6 = arm_mat_mult_f32( &ADC3_IN2_Inv_YW_mtx, &ADC3_IN2_AC_mtx, &ADC3_IN2_coeffs_mtx );
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <ADC3_IN2_autoreg_coeffs+0x138>)
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <ADC3_IN2_autoreg_coeffs+0x128>)
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <ADC3_IN2_autoreg_coeffs+0x130>)
 80015b6:	f008 fc0b 	bl	8009dd0 <arm_mat_mult_f32>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <ADC3_IN2_autoreg_coeffs+0x13c>)
 80015c0:	701a      	strb	r2, [r3, #0]
	else
	{
         // Do something to indicate that the process has failed
	}

    return AR_Coeffs_6;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <ADC3_IN2_autoreg_coeffs+0x134>)
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20009140 	.word	0x20009140
 80015d4:	2000abbc 	.word	0x2000abbc
 80015d8:	2000ab5c 	.word	0x2000ab5c
 80015dc:	2000ab8c 	.word	0x2000ab8c
 80015e0:	20009234 	.word	0x20009234
 80015e4:	2000abec 	.word	0x2000abec
 80015e8:	2000abf9 	.word	0x2000abf9

080015ec <MA_ADC1_IN1_Init>:
//VARIABLES
static float32_t  MA_IMPULSERESPONSE[MA_FILTER_LENGTH] = {0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f, 0.125f}; // Impulse response coefficients

//FUNCTION DEFINITIONS
void MA_ADC1_IN1_Init (ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e00a      	b.n	8001610 <MA_ADC1_IN1_Init+0x24>
	{
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[j]=0.0f; // Clear the moving average buffer
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3304      	adds	r3, #4
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	3301      	adds	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d9f1      	bls.n	80015fa <MA_ADC1_IN1_Init+0xe>
    }


	ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx=0; // Initialize the buffer index
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	e00b      	b.n	800163a <MA_ADC1_IN1_Init+0x4e>
	{
	    ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[i] = 0.0f; // Clear the output buffer
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	3308      	adds	r3, #8
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3301      	adds	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2bff      	cmp	r3, #255	; 0xff
 800163e:	d9f0      	bls.n	8001622 <MA_ADC1_IN1_Init+0x36>
	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <MA_ADC1_IN1_Update>:

void MA_ADC1_IN1_Update(ADC1_IN1_MA *ADC1_IN1_MA_ptr)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e05a      	b.n	8001714 <MA_ADC1_IN1_Update+0xc4>
    {

        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx] = ADC1_IN1_NF_arg._NF_ADC1_IN1_bfr[u]; // Store the current input sample in the circular buffer
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4932      	ldr	r1, [pc, #200]	; (800172c <MA_ADC1_IN1_Update+0xdc>)
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	3212      	adds	r2, #18
 8001668:	0092      	lsls	r2, r2, #2
 800166a:	440a      	add	r2, r1
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3304      	adds	r3, #4
 8001676:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx++;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]

        if (ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b08      	cmp	r3, #8
 8001688:	d102      	bne.n	8001690 <MA_ADC1_IN1_Update+0x40>
        {
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3308      	adds	r3, #8
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3304      	adds	r3, #4
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_1 = ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr_indx; // Set SumIndex_1 to the current buffer index
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e02c      	b.n	8001708 <MA_ADC1_IN1_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_1 > 0)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <MA_ADC1_IN1_Update+0x6c>
            {
                SumIndex_1--;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e001      	b.n	80016c0 <MA_ADC1_IN1_Update+0x70>
            }

            else
            {
                SumIndex_1 = MA_FILTER_LENGTH - 1;
 80016bc:	2307      	movs	r3, #7
 80016be:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC1_IN1_MA_ptr->MA_ADC1_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN1_MA_ptr->MA_ADC1_IN1_bfr[SumIndex_1];
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3308      	adds	r3, #8
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <MA_ADC1_IN1_Update+0xe0>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	edd3 6a00 	vldr	s13, [r3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3308      	adds	r3, #8
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	3304      	adds	r3, #4
 80016fe:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d9cf      	bls.n	80016ae <MA_ADC1_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f240 52db 	movw	r2, #1499	; 0x5db
 800171a:	4293      	cmp	r3, r2
 800171c:	d99f      	bls.n	800165e <MA_ADC1_IN1_Update+0xe>
        }

    }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	20000048 	.word	0x20000048
 8001730:	20000000 	.word	0x20000000

08001734 <MA_ADC1_IN2_Init>:



void MA_ADC1_IN2_Init (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00a      	b.n	8001758 <MA_ADC1_IN2_Init+0x24>
	{
        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[j]=0.0f;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d9f1      	bls.n	8001742 <MA_ADC1_IN2_Init+0xe>
    }


	ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx=0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	e00b      	b.n	8001782 <MA_ADC1_IN2_Init+0x4e>
	{
	    ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[i] = 0.0f;
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3308      	adds	r3, #8
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3304      	adds	r3, #4
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d9f0      	bls.n	800176a <MA_ADC1_IN2_Init+0x36>
	}
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <MA_ADC1_IN2_Update>:

void MA_ADC1_IN2_Update (ADC1_IN2_MA *ADC1_IN2_MA_ptr)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e05a      	b.n	800185c <MA_ADC1_IN2_Update+0xc4>
    {

        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx] = ADC1_IN2_NF_arg._NF_ADC1_IN2_bfr[u];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4932      	ldr	r1, [pc, #200]	; (8001874 <MA_ADC1_IN2_Update+0xdc>)
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	3212      	adds	r2, #18
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	440a      	add	r2, r1
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3304      	adds	r3, #4
 80017be:	601a      	str	r2, [r3, #0]



        ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx++;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	601a      	str	r2, [r3, #0]

        if (ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx == MA_FILTER_LENGTH)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d102      	bne.n	80017d8 <MA_ADC1_IN2_Update+0x40>
        {
            ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
        }


        ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] = 0.0f;
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3308      	adds	r3, #8
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3304      	adds	r3, #4
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_2 = ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr_indx;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e02c      	b.n	8001850 <MA_ADC1_IN2_Update+0xb8>
        {

            if (SumIndex_2 > 0)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <MA_ADC1_IN2_Update+0x6c>
            {
                SumIndex_2--;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	3b01      	subs	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e001      	b.n	8001808 <MA_ADC1_IN2_Update+0x70>
            }

            else
            {
                SumIndex_2 = MA_FILTER_LENGTH - 1;
 8001804:	2307      	movs	r3, #7
 8001806:	613b      	str	r3, [r7, #16]
            }


            ADC1_IN2_MA_ptr->MA_ADC1_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC1_IN2_MA_ptr->MA_ADC1_IN2_bfr[SumIndex_2];
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3308      	adds	r3, #8
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	ed93 7a00 	vldr	s14, [r3]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <MA_ADC1_IN2_Update+0xe0>)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	edd3 6a00 	vldr	s13, [r3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	3304      	adds	r3, #4
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3308      	adds	r3, #8
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3304      	adds	r3, #4
 8001846:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3301      	adds	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b07      	cmp	r3, #7
 8001854:	d9cf      	bls.n	80017f6 <MA_ADC1_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001862:	4293      	cmp	r3, r2
 8001864:	d99f      	bls.n	80017a6 <MA_ADC1_IN2_Update+0xe>
        }

    }
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	2000183c 	.word	0x2000183c
 8001878:	20000000 	.word	0x20000000

0800187c <MA_ADC2_IN3_Init>:



void MA_ADC2_IN3_Init (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e00a      	b.n	80018a0 <MA_ADC2_IN3_Init+0x24>
	{
        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[j]=0.0f;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3304      	adds	r3, #4
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	3301      	adds	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b07      	cmp	r3, #7
 80018a4:	d9f1      	bls.n	800188a <MA_ADC2_IN3_Init+0xe>
    }


	ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx=0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	e00b      	b.n	80018ca <MA_ADC2_IN3_Init+0x4e>
	{
	    ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[i] = 0.0f;
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3308      	adds	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d9f0      	bls.n	80018b2 <MA_ADC2_IN3_Init+0x36>
	}
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <MA_ADC2_IN3_Update>:

void MA_ADC2_IN3_Update (ADC2_IN3_MA *ADC2_IN3_MA_ptr)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e05a      	b.n	80019a4 <MA_ADC2_IN3_Update+0xc4>
    {

        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx] = ADC2_IN3_NF_arg._NF_ADC2_IN3_bfr[u]; // Store the current input sample in the circular buffer
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4932      	ldr	r1, [pc, #200]	; (80019bc <MA_ADC2_IN3_Update+0xdc>)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	3212      	adds	r2, #18
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	440a      	add	r2, r1
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3304      	adds	r3, #4
 8001906:	601a      	str	r2, [r3, #0]



        ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx++;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]

        if (ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx == MA_FILTER_LENGTH)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b08      	cmp	r3, #8
 8001918:	d102      	bne.n	8001920 <MA_ADC2_IN3_Update+0x40>
        {
            ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx = 0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] = 0.0f;
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3308      	adds	r3, #8
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3304      	adds	r3, #4
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_3 = ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr_indx;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e02c      	b.n	8001998 <MA_ADC2_IN3_Update+0xb8>
        {

            if (SumIndex_3 > 0)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <MA_ADC2_IN3_Update+0x6c>
            {
                SumIndex_3--;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	3b01      	subs	r3, #1
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e001      	b.n	8001950 <MA_ADC2_IN3_Update+0x70>
            }

            else
            {
                SumIndex_3 = MA_FILTER_LENGTH - 1;
 800194c:	2307      	movs	r3, #7
 800194e:	613b      	str	r3, [r7, #16]
            }


            ADC2_IN3_MA_ptr->MA_ADC2_IN3_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN3_MA_ptr->MA_ADC2_IN3_bfr[SumIndex_3];
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3308      	adds	r3, #8
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	ed93 7a00 	vldr	s14, [r3]
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <MA_ADC2_IN3_Update+0xe0>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	edd3 6a00 	vldr	s13, [r3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3308      	adds	r3, #8
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b07      	cmp	r3, #7
 800199c:	d9cf      	bls.n	800193e <MA_ADC2_IN3_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f240 52db 	movw	r2, #1499	; 0x5db
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d99f      	bls.n	80018ee <MA_ADC2_IN3_Update+0xe>
        }

    }

}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	20003030 	.word	0x20003030
 80019c0:	20000000 	.word	0x20000000

080019c4 <MA_ADC2_IN4_Init>:



void MA_ADC2_IN4_Init (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e00a      	b.n	80019e8 <MA_ADC2_IN4_Init+0x24>
	{
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[j]=0.0f; // Clear the moving average buffer
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3304      	adds	r3, #4
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	3301      	adds	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	d9f1      	bls.n	80019d2 <MA_ADC2_IN4_Init+0xe>
    }


	ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx=0; // Initialize the buffer index
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	e00b      	b.n	8001a12 <MA_ADC2_IN4_Init+0x4e>
	{
	    ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[i] = 0.0f; // Clear the output buffer
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3308      	adds	r3, #8
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	3304      	adds	r3, #4
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2bff      	cmp	r3, #255	; 0xff
 8001a16:	d9f0      	bls.n	80019fa <MA_ADC2_IN4_Init+0x36>
	}
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <MA_ADC2_IN4_Update>:

void MA_ADC2_IN4_Update (ADC2_IN4_MA *ADC2_IN4_MA_ptr)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e05a      	b.n	8001aec <MA_ADC2_IN4_Update+0xc4>
    {

        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx] = ADC2_IN4_NF_arg._NF_ADC2_IN4_bfr[u]; // Store the current input sample in the circular buffer
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4932      	ldr	r1, [pc, #200]	; (8001b04 <MA_ADC2_IN4_Update+0xdc>)
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	3212      	adds	r2, #18
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	440a      	add	r2, r1
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	601a      	str	r2, [r3, #0]


        /* Increment the buffer index and wrap around if necessary */
        ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx++;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]

        if (ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx == MA_FILTER_LENGTH)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d102      	bne.n	8001a68 <MA_ADC2_IN4_Update+0x40>
        {
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
        }


        ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] = 0.0f; // Initialize the current output sample inside the struct's output buffer
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_4 = ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr_indx; // Set SumIndex_4 to the current buffer index
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]

        /* Perform convolution (dot product) with the impulse response */
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e02c      	b.n	8001ae0 <MA_ADC2_IN4_Update+0xb8>
        {
            /* Decrement index and wrap if necessary (moving backwards in the circular buffer) */
            if (SumIndex_4 > 0)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <MA_ADC2_IN4_Update+0x6c>
            {
                SumIndex_4--;
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e001      	b.n	8001a98 <MA_ADC2_IN4_Update+0x70>
            }

            else
            {
                SumIndex_4 = MA_FILTER_LENGTH - 1;
 8001a94:	2307      	movs	r3, #7
 8001a96:	613b      	str	r3, [r7, #16]
            }

            /* Multiply impulse response with buffer sample and accumulate into output */
            ADC2_IN4_MA_ptr->MA_ADC2_IN4_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC2_IN4_MA_ptr->MA_ADC2_IN4_bfr[SumIndex_4];
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3308      	adds	r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <MA_ADC2_IN4_Update+0xe0>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	edd3 6a00 	vldr	s13, [r3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3304      	adds	r3, #4
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	d9cf      	bls.n	8001a86 <MA_ADC2_IN4_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f240 52db 	movw	r2, #1499	; 0x5db
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d99f      	bls.n	8001a36 <MA_ADC2_IN4_Update+0xe>
        }

    }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20004824 	.word	0x20004824
 8001b08:	20000000 	.word	0x20000000

08001b0c <MA_ADC3_IN1_Init>:




void MA_ADC3_IN1_Init (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e00a      	b.n	8001b30 <MA_ADC3_IN1_Init+0x24>
	{
        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[j]=0.0f;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3304      	adds	r3, #4
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d9f1      	bls.n	8001b1a <MA_ADC3_IN1_Init+0xe>
    }


	ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx=0;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	e00b      	b.n	8001b5a <MA_ADC3_IN1_Init+0x4e>
	{
	    ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[i] = 0.0f;
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3308      	adds	r3, #8
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d9f0      	bls.n	8001b42 <MA_ADC3_IN1_Init+0x36>
	}
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <MA_ADC3_IN1_Update>:

void MA_ADC3_IN1_Update (ADC3_IN1_MA *ADC3_IN1_MA_ptr)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e05a      	b.n	8001c34 <MA_ADC3_IN1_Update+0xc4>
    {

        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx] = ADC3_IN1_NF_arg._NF_ADC3_IN1_bfr[u];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4932      	ldr	r1, [pc, #200]	; (8001c4c <MA_ADC3_IN1_Update+0xdc>)
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	3212      	adds	r2, #18
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	440a      	add	r2, r1
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3304      	adds	r3, #4
 8001b96:	601a      	str	r2, [r3, #0]



        ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx++;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	601a      	str	r2, [r3, #0]

        if (ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx == MA_FILTER_LENGTH)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d102      	bne.n	8001bb0 <MA_ADC3_IN1_Update+0x40>
        {
            ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx = 0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] = 0.0f;
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3304      	adds	r3, #4
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_5 = ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr_indx;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e02c      	b.n	8001c28 <MA_ADC3_IN1_Update+0xb8>
        {

            if (SumIndex_5 > 0)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <MA_ADC3_IN1_Update+0x6c>
            {
                SumIndex_5--;
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e001      	b.n	8001be0 <MA_ADC3_IN1_Update+0x70>
            }

            else
            {
                SumIndex_5 = MA_FILTER_LENGTH - 1;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN1_MA_ptr->MA_ADC3_IN1_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN1_MA_ptr->MA_ADC3_IN1_bfr[SumIndex_5];
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3308      	adds	r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	ed93 7a00 	vldr	s14, [r3]
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <MA_ADC3_IN1_Update+0xe0>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd3 6a00 	vldr	s13, [r3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3308      	adds	r3, #8
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	d9cf      	bls.n	8001bce <MA_ADC3_IN1_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d99f      	bls.n	8001b7e <MA_ADC3_IN1_Update+0xe>
        }
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20006018 	.word	0x20006018
 8001c50:	20000000 	.word	0x20000000

08001c54 <MA_ADC3_IN2_Init>:




void MA_ADC3_IN2_Init (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e00a      	b.n	8001c78 <MA_ADC3_IN2_Init+0x24>
	{
        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[j]=0.0f;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
	for(uint8_t j=0; j< MA_FILTER_LENGTH; j++)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	3301      	adds	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b07      	cmp	r3, #7
 8001c7c:	d9f1      	bls.n	8001c62 <MA_ADC3_IN2_Init+0xe>
    }


	ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx=0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]


	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	e00b      	b.n	8001ca2 <MA_ADC3_IN2_Init+0x4e>
	{
	    ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[i] = 0.0f;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3308      	adds	r3, #8
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i <ADC_DMA_SIXTEENTHBUFFERSIZE; i++)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2bff      	cmp	r3, #255	; 0xff
 8001ca6:	d9f0      	bls.n	8001c8a <MA_ADC3_IN2_Init+0x36>
	}
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <MA_ADC3_IN2_Update>:

void MA_ADC3_IN2_Update (ADC3_IN2_MA *ADC3_IN2_MA_ptr)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e05a      	b.n	8001d7c <MA_ADC3_IN2_Update+0xc4>
    {

        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx] = ADC3_IN2_NF_arg._NF_ADC3_IN2_bfr[u];
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4932      	ldr	r1, [pc, #200]	; (8001d94 <MA_ADC3_IN2_Update+0xdc>)
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	3212      	adds	r2, #18
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	440a      	add	r2, r1
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3304      	adds	r3, #4
 8001cde:	601a      	str	r2, [r3, #0]



        ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx++;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]

        if (ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx == MA_FILTER_LENGTH)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d102      	bne.n	8001cf8 <MA_ADC3_IN2_Update+0x40>
        {
            ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx = 0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
        }


        ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] = 0.0f;
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3308      	adds	r3, #8
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]


        uint32_t SumIndex_6 = ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr_indx;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	613b      	str	r3, [r7, #16]


        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e02c      	b.n	8001d70 <MA_ADC3_IN2_Update+0xb8>
        {

            if (SumIndex_6 > 0)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <MA_ADC3_IN2_Update+0x6c>
            {
                SumIndex_6--;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e001      	b.n	8001d28 <MA_ADC3_IN2_Update+0x70>
            }

            else
            {
                SumIndex_6 = MA_FILTER_LENGTH - 1;
 8001d24:	2307      	movs	r3, #7
 8001d26:	613b      	str	r3, [r7, #16]
            }


            ADC3_IN2_MA_ptr->MA_ADC3_IN2_OutBfr[u] += MA_IMPULSERESPONSE[r] * ADC3_IN2_MA_ptr->MA_ADC3_IN2_bfr[SumIndex_6];
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3304      	adds	r3, #4
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <MA_ADC3_IN2_Update+0xe0>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	edd3 6a00 	vldr	s13, [r3]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t r = 0; r < MA_FILTER_LENGTH; r++)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b07      	cmp	r3, #7
 8001d74:	d9cf      	bls.n	8001d16 <MA_ADC3_IN2_Update+0x5e>
    for (uint32_t u = 0; u < ADC_DMA_HALFBUFFERSIZE; u++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d99f      	bls.n	8001cc6 <MA_ADC3_IN2_Update+0xe>
        }

    }

}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	2000780c 	.word	0x2000780c
 8001d98:	20000000 	.word	0x20000000

08001d9c <init_ADC1_IN1_struct>:


//FUNCTION DEFINITIONS
/*Initializing the struct instance*/
void init_ADC1_IN1_struct(void)
  {
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN1_NF_arg.ADC1_IN1_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN1_bfr);   // Typecasting. Converts the data in IN1 data buffer to floating point values. Assigns the source buffer at runtime
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <init_ADC1_IN1_struct+0x1c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001da8:	3324      	adds	r3, #36	; 0x24
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <init_ADC1_IN1_struct+0x20>)
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	2000d46c 	.word	0x2000d46c
 8001dbc:	20000048 	.word	0x20000048

08001dc0 <init_ADC1_IN1_FO_biquad_filter>:

void init_ADC1_IN1_FO_biquad_filter(void)
  {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001dc6:	7819      	ldrb	r1, [r3, #0]
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <init_ADC1_IN1_FO_biquad_filter+0x1c>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <init_ADC1_IN1_FO_biquad_filter+0x20>)
 8001dd2:	f008 fb63 	bl	800a49c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN1_NF_arg.S1,  // Pointer to the instance
	        ADC1_IN1_NF_arg.ADC1_IN1_numstages, // Number of stages (2 in this case)
	        ADC1_IN1_NF_arg.ADC1_IN1_pcoeffs, // Pointer to coefficients array
	        ADC1_IN1_NF_arg.ADC1_IN1_pState // Pointer to the state buffer
	 );
  }
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000048 	.word	0x20000048
 8001de0:	20001808 	.word	0x20001808

08001de4 <update_ADC1_IN1_FO_biquad_filter>:

void update_ADC1_IN1_FO_biquad_filter(void)
   {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN1_NF_arg.S1, ADC1_IN1_NF_arg.ADC1_IN1_psrc , ADC1_IN1_NF_arg.ADC1_IN1_pdst, ADC1_IN1_NF_arg.ADC1_IN1_Blocksize);
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001dea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <update_ADC1_IN1_FO_biquad_filter+0x28>)
 8001df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfc:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <update_ADC1_IN1_FO_biquad_filter+0x2c>)
 8001e02:	f008 f98f 	bl	800a124 <arm_biquad_cascade_df2T_f32>
   }
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000048 	.word	0x20000048
 8001e10:	20001808 	.word	0x20001808

08001e14 <init_ADC1_IN2_struct>:




void init_ADC1_IN2_struct(void)
  {
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC1_IN2_NF_arg.ADC1_IN2_psrc = (float32_t *)(ADC1_DMA_sort_ptr->ADC1_IN2_bfr);
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <init_ADC1_IN2_struct+0x1c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8001e20:	3358      	adds	r3, #88	; 0x58
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <init_ADC1_IN2_struct+0x20>)
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	2000d46c 	.word	0x2000d46c
 8001e34:	2000183c 	.word	0x2000183c

08001e38 <init_ADC1_IN2_FO_biquad_filter>:

void init_ADC1_IN2_FO_biquad_filter(void)
  {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e3e:	7819      	ldrb	r1, [r3, #0]
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <init_ADC1_IN2_FO_biquad_filter+0x1c>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <init_ADC1_IN2_FO_biquad_filter+0x20>)
 8001e4a:	f008 fb27 	bl	800a49c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC1_IN2_NF_arg.S2,
	        ADC1_IN2_NF_arg.ADC1_IN2_numstages,
	        ADC1_IN2_NF_arg.ADC1_IN2_pcoeffs,
	        ADC1_IN2_NF_arg.ADC1_IN2_pState
	 );
  }
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000183c 	.word	0x2000183c
 8001e58:	20002ffc 	.word	0x20002ffc

08001e5c <update_ADC1_IN2_FO_biquad_filter>:

void update_ADC1_IN2_FO_biquad_filter(void)
   {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC1_IN2_NF_arg.S2, ADC1_IN2_NF_arg.ADC1_IN2_psrc , ADC1_IN2_NF_arg.ADC1_IN2_pdst, ADC1_IN2_NF_arg.ADC1_IN2_Blocksize);
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e62:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <update_ADC1_IN2_FO_biquad_filter+0x28>)
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <update_ADC1_IN2_FO_biquad_filter+0x2c>)
 8001e7a:	f008 f953 	bl	800a124 <arm_biquad_cascade_df2T_f32>
   }
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000183c 	.word	0x2000183c
 8001e88:	20002ffc 	.word	0x20002ffc

08001e8c <init_ADC2_IN3_struct>:




void init_ADC2_IN3_struct(void)
  {
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN3_NF_arg.ADC2_IN3_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN3_bfr);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <init_ADC2_IN3_struct+0x1c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001e98:	3324      	adds	r3, #36	; 0x24
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <init_ADC2_IN3_struct+0x20>)
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	2000d470 	.word	0x2000d470
 8001eac:	20003030 	.word	0x20003030

08001eb0 <init_ADC2_IN3_FO_biquad_filter>:

void init_ADC2_IN3_FO_biquad_filter(void)
  {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001eb6:	7819      	ldrb	r1, [r3, #0]
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <init_ADC2_IN3_FO_biquad_filter+0x1c>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <init_ADC2_IN3_FO_biquad_filter+0x20>)
 8001ec2:	f008 faeb 	bl	800a49c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN3_NF_arg.S3,  // Pointer to the instance
	        ADC2_IN3_NF_arg.ADC2_IN3_numstages, // Number of stages (2 in this case)
	        ADC2_IN3_NF_arg.ADC2_IN3_pcoeffs, // Pointer to coefficients array
	        ADC2_IN3_NF_arg.ADC2_IN3_pState // Pointer to the state buffer
	 );
  }
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20003030 	.word	0x20003030
 8001ed0:	200047f0 	.word	0x200047f0

08001ed4 <update_ADC2_IN3_FO_biquad_filter>:

void update_ADC2_IN3_FO_biquad_filter(void)
   {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN3_NF_arg.S3, ADC2_IN3_NF_arg.ADC2_IN3_psrc , ADC2_IN3_NF_arg.ADC2_IN3_pdst, ADC2_IN3_NF_arg.ADC2_IN3_Blocksize);
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001eda:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <update_ADC2_IN3_FO_biquad_filter+0x28>)
 8001ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eec:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <update_ADC2_IN3_FO_biquad_filter+0x2c>)
 8001ef2:	f008 f917 	bl	800a124 <arm_biquad_cascade_df2T_f32>
   }
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20003030 	.word	0x20003030
 8001f00:	200047f0 	.word	0x200047f0

08001f04 <init_ADC2_IN4_struct>:




void init_ADC2_IN4_struct(void)
  {
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC2_IN4_NF_arg.ADC2_IN4_psrc = (float32_t *)(ADC2_DMA_sort_ptr->ADC2_IN4_bfr);
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <init_ADC2_IN4_struct+0x1c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8001f10:	3358      	adds	r3, #88	; 0x58
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <init_ADC2_IN4_struct+0x20>)
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	2000d470 	.word	0x2000d470
 8001f24:	20004824 	.word	0x20004824

08001f28 <init_ADC2_IN4_FO_biquad_filter>:

void init_ADC2_IN4_FO_biquad_filter(void)
  {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f2e:	7819      	ldrb	r1, [r3, #0]
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <init_ADC2_IN4_FO_biquad_filter+0x1c>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <init_ADC2_IN4_FO_biquad_filter+0x20>)
 8001f3a:	f008 faaf 	bl	800a49c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC2_IN4_NF_arg.S4,
	        ADC2_IN4_NF_arg.ADC2_IN4_numstages,
	        ADC2_IN4_NF_arg.ADC2_IN4_pcoeffs,
	        ADC2_IN4_NF_arg.ADC2_IN4_pState
	 );
  }
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20004824 	.word	0x20004824
 8001f48:	20005fe4 	.word	0x20005fe4

08001f4c <update_ADC2_IN4_FO_biquad_filter>:

void update_ADC2_IN4_FO_biquad_filter(void)
   {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC2_IN4_NF_arg.S4, ADC2_IN4_NF_arg.ADC2_IN4_psrc , ADC2_IN4_NF_arg.ADC2_IN4_pdst, ADC2_IN4_NF_arg.ADC2_IN4_Blocksize);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f52:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5a:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <update_ADC2_IN4_FO_biquad_filter+0x28>)
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <update_ADC2_IN4_FO_biquad_filter+0x2c>)
 8001f6a:	f008 f8db 	bl	800a124 <arm_biquad_cascade_df2T_f32>
   }
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20004824 	.word	0x20004824
 8001f78:	20005fe4 	.word	0x20005fe4

08001f7c <init_ADC3_IN1_struct>:




void init_ADC3_IN1_struct(void)
  {
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN1_NF_arg.ADC3_IN1_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN1_bfr);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <init_ADC3_IN1_struct+0x1c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8001f88:	3324      	adds	r3, #36	; 0x24
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <init_ADC3_IN1_struct+0x20>)
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	2000d474 	.word	0x2000d474
 8001f9c:	20006018 	.word	0x20006018

08001fa0 <init_ADC3_IN1_FO_biquad_filter>:

void init_ADC3_IN1_FO_biquad_filter(void)
  {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001fa6:	7819      	ldrb	r1, [r3, #0]
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <init_ADC3_IN1_FO_biquad_filter+0x1c>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <init_ADC3_IN1_FO_biquad_filter+0x20>)
 8001fb2:	f008 fa73 	bl	800a49c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN1_NF_arg.S5,
	        ADC3_IN1_NF_arg.ADC3_IN1_numstages,
	        ADC3_IN1_NF_arg.ADC3_IN1_pcoeffs,
	        ADC3_IN1_NF_arg.ADC3_IN1_pState
	 );
  }
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20006018 	.word	0x20006018
 8001fc0:	200077d8 	.word	0x200077d8

08001fc4 <update_ADC3_IN1_FO_biquad_filter>:

void update_ADC3_IN1_FO_biquad_filter(void)
   {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN1_NF_arg.S5, ADC3_IN1_NF_arg.ADC3_IN1_psrc, ADC3_IN1_NF_arg.ADC3_IN1_pdst, ADC3_IN1_NF_arg.ADC3_IN1_Blocksize);
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001fca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <update_ADC3_IN1_FO_biquad_filter+0x28>)
 8001fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fdc:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <update_ADC3_IN1_FO_biquad_filter+0x2c>)
 8001fe2:	f008 f89f 	bl	800a124 <arm_biquad_cascade_df2T_f32>
   }
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20006018 	.word	0x20006018
 8001ff0:	200077d8 	.word	0x200077d8

08001ff4 <init_ADC3_IN2_struct>:




void init_ADC3_IN2_struct(void)
  {
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
    //Ensure that ADC1_DMA_sort_ptr is initialized
	ADC3_IN2_NF_arg.ADC3_IN2_psrc = (float32_t *)(ADC3_DMA_sort_ptr->ADC3_IN2_bfr);  // Typecasting. Assigned at runtime
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <init_ADC3_IN2_struct+0x1c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8002000:	3358      	adds	r3, #88	; 0x58
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <init_ADC3_IN2_struct+0x20>)
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
  }
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	2000d474 	.word	0x2000d474
 8002014:	2000780c 	.word	0x2000780c

08002018 <init_ADC3_IN2_FO_biquad_filter>:

void init_ADC3_IN2_FO_biquad_filter(void)
  {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	 arm_biquad_cascade_df2T_init_f32
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 800201e:	7819      	ldrb	r1, [r3, #0]
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <init_ADC3_IN2_FO_biquad_filter+0x1c>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <init_ADC3_IN2_FO_biquad_filter+0x20>)
 800202a:	f008 fa37 	bl	800a49c <arm_biquad_cascade_df2T_init_f32>
	        (arm_biquad_cascade_df2T_instance_f32 *) &ADC3_IN2_NF_arg.S6,  // Pointer to the instance
	        ADC3_IN2_NF_arg.ADC3_IN2_numstages,                                     // Number of stages (2 in this case)
	        ADC3_IN2_NF_arg.ADC3_IN2_pcoeffs,                                       // Pointer to coefficients array
	        ADC3_IN2_NF_arg.ADC3_IN2_pState                                         // Pointer to the state buffer
	 );
  }
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000780c 	.word	0x2000780c
 8002038:	20008fcc 	.word	0x20008fcc

0800203c <update_ADC3_IN2_FO_biquad_filter>:

void update_ADC3_IN2_FO_biquad_filter(void)
   {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	arm_biquad_cascade_df2T_f32(&ADC3_IN2_NF_arg.S6, ADC3_IN2_NF_arg.ADC3_IN2_psrc, ADC3_IN2_NF_arg.ADC3_IN2_pdst, ADC3_IN2_NF_arg.ADC3_IN2_Blocksize);
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002042:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204a:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <update_ADC3_IN2_FO_biquad_filter+0x28>)
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <update_ADC3_IN2_FO_biquad_filter+0x2c>)
 800205a:	f008 f863 	bl	800a124 <arm_biquad_cascade_df2T_f32>
   }
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000780c 	.word	0x2000780c
 8002068:	20008fcc 	.word	0x20008fcc

0800206c <ADC1_IN1_OffsetCalc>:

//INCLUDES
#include "_ADCn_INx_Offset.h"

float32_t  ADC1_IN1_OffsetCalc(ADC1_IN1_MA *ADC1_IN1_Offset_ptr)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	float32_t Sum_1 = 0.0f; // Initialize the sum to zero
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	e010      	b.n	80020a2 <ADC1_IN1_OffsetCalc+0x36>
	{
		Sum_1 += ADC1_IN1_Offset_ptr->MA_ADC1_IN1_OutBfr[h];  // Accumulate the sum of all values in the moving average buffer
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	3308      	adds	r3, #8
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	3304      	adds	r3, #4
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ed97 7a03 	vldr	s14, [r7, #12]
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	3301      	adds	r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2bff      	cmp	r3, #255	; 0xff
 80020a6:	d9eb      	bls.n	8002080 <ADC1_IN1_OffsetCalc+0x14>
	}

	return Sum_1/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 80020a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ac:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020c8 <ADC1_IN1_OffsetCalc+0x5c>
 80020b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020b4:	eef0 7a66 	vmov.f32	s15, s13
}
 80020b8:	eeb0 0a67 	vmov.f32	s0, s15
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	43800000 	.word	0x43800000

080020cc <ADC1_IN2_OffsetCalc>:



float32_t  ADC1_IN2_OffsetCalc(ADC1_IN2_MA *ADC1_IN2_Offset_ptr)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	float32_t Sum_2 = 0.0f;
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	e010      	b.n	8002102 <ADC1_IN2_OffsetCalc+0x36>
	{
		Sum_2 += ADC1_IN2_Offset_ptr->MA_ADC1_IN2_OutBfr[h];
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3308      	adds	r3, #8
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3301      	adds	r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2bff      	cmp	r3, #255	; 0xff
 8002106:	d9eb      	bls.n	80020e0 <ADC1_IN2_OffsetCalc+0x14>
	}

	return Sum_2/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002108:	edd7 7a03 	vldr	s15, [r7, #12]
 800210c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002128 <ADC1_IN2_OffsetCalc+0x5c>
 8002110:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002114:	eef0 7a66 	vmov.f32	s15, s13
}
 8002118:	eeb0 0a67 	vmov.f32	s0, s15
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	43800000 	.word	0x43800000

0800212c <ADC2_IN3_OffsetCalc>:



float32_t  ADC2_IN3_OffsetCalc(ADC2_IN3_MA *ADC2_IN3_Offset_ptr)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	float32_t Sum_3 = 0.0f;
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	e010      	b.n	8002162 <ADC2_IN3_OffsetCalc+0x36>
	{
		Sum_3 += ADC2_IN3_Offset_ptr->MA_ADC2_IN3_OutBfr[h];
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3308      	adds	r3, #8
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ed97 7a03 	vldr	s14, [r7, #12]
 8002154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002158:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3301      	adds	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2bff      	cmp	r3, #255	; 0xff
 8002166:	d9eb      	bls.n	8002140 <ADC2_IN3_OffsetCalc+0x14>
	}

	return Sum_3/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002168:	edd7 7a03 	vldr	s15, [r7, #12]
 800216c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002188 <ADC2_IN3_OffsetCalc+0x5c>
 8002170:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002174:	eef0 7a66 	vmov.f32	s15, s13
}
 8002178:	eeb0 0a67 	vmov.f32	s0, s15
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	43800000 	.word	0x43800000

0800218c <ADC2_IN4_OffsetCalc>:



float32_t  ADC2_IN4_OffsetCalc(ADC2_IN4_MA *ADC2_IN4_Offset_ptr)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	float32_t Sum_4 = 0.0f;
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	e010      	b.n	80021c2 <ADC2_IN4_OffsetCalc+0x36>
	{
		Sum_4 += ADC2_IN4_Offset_ptr->MA_ADC2_IN4_OutBfr[h];
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3308      	adds	r3, #8
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2bff      	cmp	r3, #255	; 0xff
 80021c6:	d9eb      	bls.n	80021a0 <ADC2_IN4_OffsetCalc+0x14>
	}

	return Sum_4/ADC_DMA_SIXTEENTHBUFFERSIZE;
 80021c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021e8 <ADC2_IN4_OffsetCalc+0x5c>
 80021d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	43800000 	.word	0x43800000

080021ec <ADC3_IN1_OffsetCalc>:



float32_t  ADC3_IN1_OffsetCalc(ADC3_IN1_MA *ADC3_IN1_Offset_ptr)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	float32_t Sum_5 = 0.0f; // Initialize the sum to zero
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	e010      	b.n	8002222 <ADC3_IN1_OffsetCalc+0x36>
	{
		Sum_5 += ADC3_IN1_Offset_ptr->MA_ADC3_IN1_OutBfr[h];  // Accumulate the sum of all values in the buffer
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3308      	adds	r3, #8
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ed97 7a03 	vldr	s14, [r7, #12]
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3301      	adds	r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2bff      	cmp	r3, #255	; 0xff
 8002226:	d9eb      	bls.n	8002200 <ADC3_IN1_OffsetCalc+0x14>
	}

	return Sum_5/ADC_DMA_SIXTEENTHBUFFERSIZE; // Return the mean (baseline)
 8002228:	edd7 7a03 	vldr	s15, [r7, #12]
 800222c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002248 <ADC3_IN1_OffsetCalc+0x5c>
 8002230:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002234:	eef0 7a66 	vmov.f32	s15, s13
}
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	43800000 	.word	0x43800000

0800224c <ADC3_IN2_OffsetCalc>:



float32_t  ADC3_IN2_OffsetCalc(ADC3_IN2_MA *ADC3_IN2_Offset_ptr)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	float32_t Sum_6 = 0.0f;
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]

	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	e010      	b.n	8002282 <ADC3_IN2_OffsetCalc+0x36>
	{
		Sum_6 += ADC3_IN2_Offset_ptr->MA_ADC3_IN2_OutBfr[h];
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3308      	adds	r3, #8
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3304      	adds	r3, #4
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ed97 7a03 	vldr	s14, [r7, #12]
 8002274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002278:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2bff      	cmp	r3, #255	; 0xff
 8002286:	d9eb      	bls.n	8002260 <ADC3_IN2_OffsetCalc+0x14>
	}

	return Sum_6/ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002288:	edd7 7a03 	vldr	s15, [r7, #12]
 800228c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022a8 <ADC3_IN2_OffsetCalc+0x5c>
 8002290:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002294:	eef0 7a66 	vmov.f32	s15, s13
}
 8002298:	eeb0 0a67 	vmov.f32	s0, s15
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	43800000 	.word	0x43800000

080022ac <ADC1_IN1_SD_BL>:
//INCLUSIONS
#include "_ADCn_INx_SD_BL.h"

//FUNCTION DEFINITIONS
float32_t  ADC1_IN1_SD_BL(ADC1_IN1_MA *ADC1_IN1_SD_BL_ptr, float32_t Mean_1)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_1 = 0.0f;
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	e01a      	b.n	80022fa <ADC1_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_1 = ADC1_IN1_SD_BL_ptr->MA_ADC1_IN1_OutBfr[q] - Mean_1;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3308      	adds	r3, #8
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	edd7 7a00 	vldr	s15, [r7]
 80022d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022dc:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_1 += Diff_1 * Diff_1;
 80022e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3301      	adds	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2bff      	cmp	r3, #255	; 0xff
 80022fe:	d9e1      	bls.n	80022c4 <ADC1_IN1_SD_BL+0x18>
  }

  Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8002300:	ed97 7a05 	vldr	s14, [r7, #20]
 8002304:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002340 <ADC1_IN1_SD_BL+0x94>
 8002308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230c:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_1); //Square root of variance
 8002310:	6978      	ldr	r0, [r7, #20]
 8002312:	f7fe f8e5 	bl	80004e0 <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	ec43 2b10 	vmov	d0, r2, r3
 800231e:	f008 fccb 	bl	800acb8 <sqrt>
 8002322:	ec53 2b10 	vmov	r2, r3, d0
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fc09 	bl	8000b40 <__aeabi_d2f>
 800232e:	4603      	mov	r3, r0
 8002330:	ee07 3a90 	vmov	s15, r3
}
 8002334:	eeb0 0a67 	vmov.f32	s0, s15
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	43800000 	.word	0x43800000

08002344 <ADC1_IN2_SD_BL>:


float32_t  ADC1_IN2_SD_BL(ADC1_IN2_MA *ADC1_IN2_SD_BL_ptr, float32_t Mean_2)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_2 = 0.0f;
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e01a      	b.n	8002392 <ADC1_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_2 = ADC1_IN2_SD_BL_ptr->MA_ADC1_IN2_OutBfr[s] - Mean_2;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3308      	adds	r3, #8
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3304      	adds	r3, #4
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	edd7 7a00 	vldr	s15, [r7]
 8002370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002374:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_2 += Diff_2 * Diff_2;
 8002378:	edd7 7a03 	vldr	s15, [r7, #12]
 800237c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002380:	ed97 7a05 	vldr	s14, [r7, #20]
 8002384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002388:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  s=0; s<ADC_DMA_SIXTEENTHBUFFERSIZE; s++)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3301      	adds	r3, #1
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2bff      	cmp	r3, #255	; 0xff
 8002396:	d9e1      	bls.n	800235c <ADC1_IN2_SD_BL+0x18>
  }

  Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002398:	ed97 7a05 	vldr	s14, [r7, #20]
 800239c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80023d8 <ADC1_IN2_SD_BL+0x94>
 80023a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a4:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_2);
 80023a8:	6978      	ldr	r0, [r7, #20]
 80023aa:	f7fe f899 	bl	80004e0 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	ec43 2b10 	vmov	d0, r2, r3
 80023b6:	f008 fc7f 	bl	800acb8 <sqrt>
 80023ba:	ec53 2b10 	vmov	r2, r3, d0
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fbbd 	bl	8000b40 <__aeabi_d2f>
 80023c6:	4603      	mov	r3, r0
 80023c8:	ee07 3a90 	vmov	s15, r3

}
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	43800000 	.word	0x43800000

080023dc <ADC2_IN3_SD_BL>:


float32_t  ADC2_IN3_SD_BL(ADC2_IN3_MA *ADC2_IN3_SD_BL_ptr, float32_t Mean_3)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_3 = 0.0f;
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e01a      	b.n	800242a <ADC2_IN3_SD_BL+0x4e>
  {
	  float32_t Diff_3 = ADC2_IN3_SD_BL_ptr->MA_ADC2_IN3_OutBfr[v] - Mean_3;
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3308      	adds	r3, #8
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3304      	adds	r3, #4
 8002400:	ed93 7a00 	vldr	s14, [r3]
 8002404:	edd7 7a00 	vldr	s15, [r7]
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_3 += Diff_3 * Diff_3;
 8002410:	edd7 7a03 	vldr	s15, [r7, #12]
 8002414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002418:	ed97 7a05 	vldr	s14, [r7, #20]
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  v=0; v<ADC_DMA_SIXTEENTHBUFFERSIZE; v++)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	3301      	adds	r3, #1
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2bff      	cmp	r3, #255	; 0xff
 800242e:	d9e1      	bls.n	80023f4 <ADC2_IN3_SD_BL+0x18>
  }

  Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002430:	ed97 7a05 	vldr	s14, [r7, #20]
 8002434:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002470 <ADC2_IN3_SD_BL+0x94>
 8002438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800243c:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_3);
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f7fe f84d 	bl	80004e0 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	ec43 2b10 	vmov	d0, r2, r3
 800244e:	f008 fc33 	bl	800acb8 <sqrt>
 8002452:	ec53 2b10 	vmov	r2, r3, d0
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe fb71 	bl	8000b40 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	ee07 3a90 	vmov	s15, r3

}
 8002464:	eeb0 0a67 	vmov.f32	s0, s15
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	43800000 	.word	0x43800000

08002474 <ADC2_IN4_SD_BL>:


float32_t  ADC2_IN4_SD_BL(ADC2_IN4_MA *ADC2_IN4_SD_BL_ptr, float32_t Mean_4)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_4 = 0.0f;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	e01a      	b.n	80024c2 <ADC2_IN4_SD_BL+0x4e>
  {
	  float32_t Diff_4 = ADC2_IN4_SD_BL_ptr->MA_ADC2_IN4_OutBfr[w] - Mean_4;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	3308      	adds	r3, #8
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	ed93 7a00 	vldr	s14, [r3]
 800249c:	edd7 7a00 	vldr	s15, [r7]
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_4 += Diff_4 * Diff_4;
 80024a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  w=0; w<ADC_DMA_SIXTEENTHBUFFERSIZE; w++)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	3301      	adds	r3, #1
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2bff      	cmp	r3, #255	; 0xff
 80024c6:	d9e1      	bls.n	800248c <ADC2_IN4_SD_BL+0x18>
  }

  Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80024c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024cc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002508 <ADC2_IN4_SD_BL+0x94>
 80024d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d4:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_4);
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f7fe f801 	bl	80004e0 <__aeabi_f2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	ec43 2b10 	vmov	d0, r2, r3
 80024e6:	f008 fbe7 	bl	800acb8 <sqrt>
 80024ea:	ec53 2b10 	vmov	r2, r3, d0
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7fe fb25 	bl	8000b40 <__aeabi_d2f>
 80024f6:	4603      	mov	r3, r0
 80024f8:	ee07 3a90 	vmov	s15, r3

}
 80024fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	43800000 	.word	0x43800000

0800250c <ADC3_IN1_SD_BL>:


float32_t  ADC3_IN1_SD_BL(ADC3_IN1_MA *ADC3_IN1_SD_BL_ptr, float32_t Mean_5)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_5 = 0.0f;
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e01a      	b.n	800255a <ADC3_IN1_SD_BL+0x4e>
  {
	  float32_t Diff_5 = ADC3_IN1_SD_BL_ptr->MA_ADC3_IN1_OutBfr[d] - Mean_5;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	3308      	adds	r3, #8
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3304      	adds	r3, #4
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	edd7 7a00 	vldr	s15, [r7]
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_5 += Diff_5 * Diff_5;
 8002540:	edd7 7a03 	vldr	s15, [r7, #12]
 8002544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002548:	ed97 7a05 	vldr	s14, [r7, #20]
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  d=0; d<ADC_DMA_SIXTEENTHBUFFERSIZE; d++)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	3301      	adds	r3, #1
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2bff      	cmp	r3, #255	; 0xff
 800255e:	d9e1      	bls.n	8002524 <ADC3_IN1_SD_BL+0x18>
  }

  Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8002560:	ed97 7a05 	vldr	s14, [r7, #20]
 8002564:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80025a0 <ADC3_IN1_SD_BL+0x94>
 8002568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256c:	edc7 7a05 	vstr	s15, [r7, #20]

 return sqrt(Variance_5);
 8002570:	6978      	ldr	r0, [r7, #20]
 8002572:	f7fd ffb5 	bl	80004e0 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	ec43 2b10 	vmov	d0, r2, r3
 800257e:	f008 fb9b 	bl	800acb8 <sqrt>
 8002582:	ec53 2b10 	vmov	r2, r3, d0
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fad9 	bl	8000b40 <__aeabi_d2f>
 800258e:	4603      	mov	r3, r0
 8002590:	ee07 3a90 	vmov	s15, r3

}
 8002594:	eeb0 0a67 	vmov.f32	s0, s15
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	43800000 	.word	0x43800000

080025a4 <ADC3_IN2_SD_BL>:


float32_t  ADC3_IN2_SD_BL(ADC3_IN2_MA *ADC3_IN2_SD_BL_ptr, float32_t Mean_6)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	ed87 0a00 	vstr	s0, [r7]
  float32_t Variance_6 = 0.0f;
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	e01a      	b.n	80025f2 <ADC3_IN2_SD_BL+0x4e>
  {
	  float32_t Diff_6 = ADC3_IN2_SD_BL_ptr->MA_ADC3_IN2_OutBfr[c] - Mean_6;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	3308      	adds	r3, #8
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3304      	adds	r3, #4
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	edd7 7a00 	vldr	s15, [r7]
 80025d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d4:	edc7 7a03 	vstr	s15, [r7, #12]
	  Variance_6 += Diff_6 * Diff_6;
 80025d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint32_t  c=0; c<ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	3301      	adds	r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2bff      	cmp	r3, #255	; 0xff
 80025f6:	d9e1      	bls.n	80025bc <ADC3_IN2_SD_BL+0x18>
  }

  Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 80025f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80025fc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002638 <ADC3_IN2_SD_BL+0x94>
 8002600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002604:	edc7 7a05 	vstr	s15, [r7, #20]

  return sqrt(Variance_6); //Square root of variance
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7fd ff69 	bl	80004e0 <__aeabi_f2d>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	ec43 2b10 	vmov	d0, r2, r3
 8002616:	f008 fb4f 	bl	800acb8 <sqrt>
 800261a:	ec53 2b10 	vmov	r2, r3, d0
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fa8d 	bl	8000b40 <__aeabi_d2f>
 8002626:	4603      	mov	r3, r0
 8002628:	ee07 3a90 	vmov	s15, r3

}
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	43800000 	.word	0x43800000

0800263c <ADC1_IN1_SSC>:
//INCLUDES
#include "_ADCn_INx_SSC.h"

//FUNCTION DEFINITIONS
float32_t ADC1_IN1_SSC(ADC1_IN1_MA *ADC1_IN1_SSC_ptr, float32_t Threshold_1)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_1 = 0.0f;
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800264e:	2301      	movs	r3, #1
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e055      	b.n	8002700 <ADC1_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_1 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n-1];
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	3308      	adds	r3, #8
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3304      	adds	r3, #4
 8002660:	ed93 7a00 	vldr	s14, [r3]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	3b01      	subs	r3, #1
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	3308      	adds	r3, #8
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_2 = ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n+1] - ADC1_IN1_SSC_ptr->MA_ADC1_IN1_OutBfr[n];
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3301      	adds	r3, #1
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	3308      	adds	r3, #8
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3308      	adds	r3, #8
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a4:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_1 * SSC_Diff_2 > 0 && (fabs (SSC_Diff_1) > Threshold_1 || fabs (SSC_Diff_2) > Threshold_1) )
 80026a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80026ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80026b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd1d      	ble.n	80026fa <ADC1_IN1_SSC+0xbe>
 80026be:	edd7 7a03 	vldr	s15, [r7, #12]
 80026c2:	eef0 7ae7 	vabs.f32	s15, s15
 80026c6:	ed97 7a00 	vldr	s14, [r7]
 80026ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	d40a      	bmi.n	80026ea <ADC1_IN1_SSC+0xae>
 80026d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d8:	eef0 7ae7 	vabs.f32	s15, s15
 80026dc:	ed97 7a00 	vldr	s14, [r7]
 80026e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	d507      	bpl.n	80026fa <ADC1_IN1_SSC+0xbe>
	{
       SSC_Count_1++;
 80026ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f6:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3301      	adds	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d9a6      	bls.n	8002654 <ADC1_IN1_SSC+0x18>
	}
  }

  return SSC_Count_1;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	ee07 3a90 	vmov	s15, r3
}
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <ADC1_IN2_SSC>:


float32_t ADC1_IN2_SSC(ADC1_IN2_MA *ADC1_IN2_SSC_ptr, float32_t Threshold_2)
{
 800271a:	b480      	push	{r7}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_2 = 0.0f;
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800272c:	2301      	movs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e055      	b.n	80027de <ADC1_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_3 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n-1];
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3308      	adds	r3, #8
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3304      	adds	r3, #4
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3b01      	subs	r3, #1
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	3308      	adds	r3, #8
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002758:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_4 = ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n+1] - ADC1_IN2_SSC_ptr->MA_ADC1_IN2_OutBfr[n];
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	3301      	adds	r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	3308      	adds	r3, #8
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	ed93 7a00 	vldr	s14, [r3]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	3308      	adds	r3, #8
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002782:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_3 * SSC_Diff_4 > 0 && (fabs (SSC_Diff_3) > Threshold_2 || fabs (SSC_Diff_4) > Threshold_2) )
 8002786:	ed97 7a03 	vldr	s14, [r7, #12]
 800278a:	edd7 7a02 	vldr	s15, [r7, #8]
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	dd1d      	ble.n	80027d8 <ADC1_IN2_SSC+0xbe>
 800279c:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a0:	eef0 7ae7 	vabs.f32	s15, s15
 80027a4:	ed97 7a00 	vldr	s14, [r7]
 80027a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	d40a      	bmi.n	80027c8 <ADC1_IN2_SSC+0xae>
 80027b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b6:	eef0 7ae7 	vabs.f32	s15, s15
 80027ba:	ed97 7a00 	vldr	s14, [r7]
 80027be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	d507      	bpl.n	80027d8 <ADC1_IN2_SSC+0xbe>
	{
       SSC_Count_2++;
 80027c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027d4:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	3301      	adds	r3, #1
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2bff      	cmp	r3, #255	; 0xff
 80027e2:	d9a6      	bls.n	8002732 <ADC1_IN2_SSC+0x18>
	}
  }

  return SSC_Count_2;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	ee07 3a90 	vmov	s15, r3
}
 80027ea:	eeb0 0a67 	vmov.f32	s0, s15
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <ADC2_IN3_SSC>:


float32_t ADC2_IN3_SSC(ADC2_IN3_MA *ADC2_IN3_SSC_ptr, float32_t Threshold_3)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_3 = 0.0f;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800280a:	2301      	movs	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e055      	b.n	80028bc <ADC2_IN3_SSC+0xc4>
  {
	float32_t SSC_Diff_5 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n-1];
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3308      	adds	r3, #8
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	ed93 7a00 	vldr	s14, [r3]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	3b01      	subs	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	3308      	adds	r3, #8
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002836:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_6 = ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n+1] - ADC2_IN3_SSC_ptr->MA_ADC2_IN3_OutBfr[n];
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	3301      	adds	r3, #1
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	3308      	adds	r3, #8
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	3308      	adds	r3, #8
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002860:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_5 * SSC_Diff_6 > 0 && (fabs (SSC_Diff_5) > Threshold_3 || fabs (SSC_Diff_6) > Threshold_3) )
 8002864:	ed97 7a03 	vldr	s14, [r7, #12]
 8002868:	edd7 7a02 	vldr	s15, [r7, #8]
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002878:	dd1d      	ble.n	80028b6 <ADC2_IN3_SSC+0xbe>
 800287a:	edd7 7a03 	vldr	s15, [r7, #12]
 800287e:	eef0 7ae7 	vabs.f32	s15, s15
 8002882:	ed97 7a00 	vldr	s14, [r7]
 8002886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	d40a      	bmi.n	80028a6 <ADC2_IN3_SSC+0xae>
 8002890:	edd7 7a02 	vldr	s15, [r7, #8]
 8002894:	eef0 7ae7 	vabs.f32	s15, s15
 8002898:	ed97 7a00 	vldr	s14, [r7]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d507      	bpl.n	80028b6 <ADC2_IN3_SSC+0xbe>
	{
       SSC_Count_3++;
 80028a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028b2:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	3301      	adds	r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2bff      	cmp	r3, #255	; 0xff
 80028c0:	d9a6      	bls.n	8002810 <ADC2_IN3_SSC+0x18>
	}
  }

  return SSC_Count_3;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	ee07 3a90 	vmov	s15, r3
}
 80028c8:	eeb0 0a67 	vmov.f32	s0, s15
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <ADC2_IN4_SSC>:


float32_t ADC2_IN4_SSC(ADC2_IN4_MA *ADC2_IN4_SSC_ptr, float32_t Threshold_4)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b087      	sub	sp, #28
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_4 = 0.0f;
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e055      	b.n	800299a <ADC2_IN4_SSC+0xc4>
  {
	float32_t SSC_Diff_7 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n-1];
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	3308      	adds	r3, #8
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	3b01      	subs	r3, #1
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	3308      	adds	r3, #8
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002914:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_8 = ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n+1] - ADC2_IN4_SSC_ptr->MA_ADC2_IN4_OutBfr[n];
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	3301      	adds	r3, #1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	3308      	adds	r3, #8
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	3308      	adds	r3, #8
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3304      	adds	r3, #4
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_7 * SSC_Diff_8 > 0 && (fabs (SSC_Diff_7) > Threshold_4 || fabs (SSC_Diff_8) > Threshold_4) )
 8002942:	ed97 7a03 	vldr	s14, [r7, #12]
 8002946:	edd7 7a02 	vldr	s15, [r7, #8]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002956:	dd1d      	ble.n	8002994 <ADC2_IN4_SSC+0xbe>
 8002958:	edd7 7a03 	vldr	s15, [r7, #12]
 800295c:	eef0 7ae7 	vabs.f32	s15, s15
 8002960:	ed97 7a00 	vldr	s14, [r7]
 8002964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	d40a      	bmi.n	8002984 <ADC2_IN4_SSC+0xae>
 800296e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002972:	eef0 7ae7 	vabs.f32	s15, s15
 8002976:	ed97 7a00 	vldr	s14, [r7]
 800297a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002982:	d507      	bpl.n	8002994 <ADC2_IN4_SSC+0xbe>
	{
       SSC_Count_4++;
 8002984:	edd7 7a05 	vldr	s15, [r7, #20]
 8002988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800298c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002990:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	3301      	adds	r3, #1
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2bff      	cmp	r3, #255	; 0xff
 800299e:	d9a6      	bls.n	80028ee <ADC2_IN4_SSC+0x18>
	}
  }

  return SSC_Count_4;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	ee07 3a90 	vmov	s15, r3
}
 80029a6:	eeb0 0a67 	vmov.f32	s0, s15
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <ADC3_IN1_SSC>:


float32_t ADC3_IN1_SSC(ADC3_IN1_MA *ADC3_IN1_SSC_ptr, float32_t Threshold_5)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_5 = 0.0f;
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80029c6:	2301      	movs	r3, #1
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	e055      	b.n	8002a78 <ADC3_IN1_SSC+0xc4>
  {
	float32_t SSC_Diff_9 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n-1];
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3308      	adds	r3, #8
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	3b01      	subs	r3, #1
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	3308      	adds	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_10 = ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n+1] - ADC3_IN1_SSC_ptr->MA_ADC3_IN1_OutBfr[n];
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	3301      	adds	r3, #1
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	3308      	adds	r3, #8
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1c:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_9 * SSC_Diff_10 > 0 && (fabs (SSC_Diff_9) > Threshold_5 || fabs (SSC_Diff_10) > Threshold_5) )
 8002a20:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	dd1d      	ble.n	8002a72 <ADC3_IN1_SSC+0xbe>
 8002a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a3a:	eef0 7ae7 	vabs.f32	s15, s15
 8002a3e:	ed97 7a00 	vldr	s14, [r7]
 8002a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4a:	d40a      	bmi.n	8002a62 <ADC3_IN1_SSC+0xae>
 8002a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a50:	eef0 7ae7 	vabs.f32	s15, s15
 8002a54:	ed97 7a00 	vldr	s14, [r7]
 8002a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	d507      	bpl.n	8002a72 <ADC3_IN1_SSC+0xbe>
	{
       SSC_Count_5++;
 8002a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a6e:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	3301      	adds	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2bff      	cmp	r3, #255	; 0xff
 8002a7c:	d9a6      	bls.n	80029cc <ADC3_IN1_SSC+0x18>
	}
  }

  return SSC_Count_5;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	ee07 3a90 	vmov	s15, r3
}
 8002a84:	eeb0 0a67 	vmov.f32	s0, s15
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <ADC3_IN2_SSC>:


float32_t ADC3_IN2_SSC(ADC3_IN2_MA *ADC3_IN2_SSC_ptr, float32_t Threshold_6)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	ed87 0a00 	vstr	s0, [r7]
  float32_t SSC_Count_6 = 0.0f;
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e055      	b.n	8002b56 <ADC3_IN2_SSC+0xc4>
  {
	float32_t SSC_Diff_11 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n-1];
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	ed93 7a00 	vldr	s14, [r3]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t SSC_Diff_12 = ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n+1] - ADC3_IN2_SSC_ptr->MA_ADC3_IN2_OutBfr[n];
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	3308      	adds	r3, #8
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	3308      	adds	r3, #8
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afa:	edc7 7a02 	vstr	s15, [r7, #8]

	if ( SSC_Diff_11 * SSC_Diff_12 > 0 && (fabs (SSC_Diff_11) > Threshold_6 || fabs (SSC_Diff_12) > Threshold_6) )
 8002afe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	dd1d      	ble.n	8002b50 <ADC3_IN2_SSC+0xbe>
 8002b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b18:	eef0 7ae7 	vabs.f32	s15, s15
 8002b1c:	ed97 7a00 	vldr	s14, [r7]
 8002b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	d40a      	bmi.n	8002b40 <ADC3_IN2_SSC+0xae>
 8002b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b32:	ed97 7a00 	vldr	s14, [r7]
 8002b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d507      	bpl.n	8002b50 <ADC3_IN2_SSC+0xbe>
	{
       SSC_Count_6++;
 8002b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b4c:	edc7 7a05 	vstr	s15, [r7, #20]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	3301      	adds	r3, #1
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2bff      	cmp	r3, #255	; 0xff
 8002b5a:	d9a6      	bls.n	8002aaa <ADC3_IN2_SSC+0x18>
	}
  }

  return SSC_Count_6;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	ee07 3a90 	vmov	s15, r3
}
 8002b62:	eeb0 0a67 	vmov.f32	s0, s15
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <ADC1_IN1_STFT_Update>:
float32_t FFT_Mag_Res_6[ADC_DMA_SIXTEENTHBUFFERSIZE / 2];


//FUNCTION DEFINITIONS
float32_t* ADC1_IN1_STFT_Update(ADC1_IN1_STFT_par*ADC1_IN1_STFT_par_ptr, ADC1_IN1_MA*ADC1_IN1_STFT_ptr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	ADC1_IN1_STFT_par_ptr->Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b80:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <ADC1_IN1_STFT_Update+0x1b8>)
 8002b82:	601a      	str	r2, [r3, #0]
	ADC1_IN1_STFT_par_ptr->mu_1 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b8a:	4a68      	ldr	r2, [pc, #416]	; (8002d2c <ADC1_IN1_STFT_Update+0x1bc>)
 8002b8c:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e045      	b.n	8002c20 <ADC1_IN1_STFT_Update+0xb0>
	{
		float32_t exponent_1 = -0.5f*(pow(((n - ADC1_IN1_STFT_par_ptr->mu_1)/ADC1_IN1_STFT_par_ptr->Sigma_1), 2));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bba:	ee16 0a90 	vmov	r0, s13
 8002bbe:	f7fd fc8f 	bl	80004e0 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002d20 <ADC1_IN1_STFT_Update+0x1b0>
 8002bca:	ec43 2b10 	vmov	d0, r2, r3
 8002bce:	f008 f803 	bl	800abd8 <pow>
 8002bd2:	ec51 0b10 	vmov	r0, r1, d0
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <ADC1_IN1_STFT_Update+0x1c0>)
 8002bdc:	f7fd fcd8 	bl	8000590 <__aeabi_dmul>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f7fd ffaa 	bl	8000b40 <__aeabi_d2f>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60bb      	str	r3, [r7, #8]
		ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[n] = exp(exponent_1);
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f7fd fc75 	bl	80004e0 <__aeabi_f2d>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	ec43 2b10 	vmov	d0, r2, r3
 8002bfe:	f007 ffa3 	bl	800ab48 <exp>
 8002c02:	ec53 2b10 	vmov	r2, r3, d0
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ff99 	bl	8000b40 <__aeabi_d2f>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2bff      	cmp	r3, #255	; 0xff
 8002c24:	d9b6      	bls.n	8002b94 <ADC1_IN1_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e01a      	b.n	8002c62 <ADC1_IN1_STFT_Update+0xf2>
	{
		ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1[m] = ADC1_IN1_STFT_ptr->MA_ADC1_IN1_OutBfr[m] * ADC1_IN1_STFT_par_ptr->Gaussian_Win_1[m];
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3308      	adds	r3, #8
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2bff      	cmp	r3, #255	; 0xff
 8002c66:	d9e1      	bls.n	8002c2c <ADC1_IN1_STFT_Update+0xbc>
	}

	arm_status FFT_status_1 = arm_rfft_fast_init_f32 (&ADC1_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c6c:	4831      	ldr	r0, [pc, #196]	; (8002d34 <ADC1_IN1_STFT_Update+0x1c4>)
 8002c6e:	f006 fbed 	bl	800944c <arm_rfft_fast_init_f32>
 8002c72:	4603      	mov	r3, r0
 8002c74:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_1 == ARM_MATH_SUCCESS)
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d149      	bne.n	8002d12 <ADC1_IN1_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC1_IN1_FFT, ADC1_IN1_STFT_par_ptr->Windowed_STFT_bfr_1 , ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr, 0 );
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f603 0208 	addw	r2, r3, #2056	; 0x808
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	4829      	ldr	r0, [pc, #164]	; (8002d34 <ADC1_IN1_STFT_Update+0x1c4>)
 8002c8e:	f006 fcc1 	bl	8009614 <arm_rfft_fast_f32>

		uint32_t mag_indx_1 = 0.0f;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002c96:	e039      	b.n	8002d0c <ADC1_IN1_STFT_Update+0x19c>
		{
			FFT_Mag_Res_1[mag_indx_1] = sqrtf((ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p]) + (ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1] * ADC1_IN1_STFT_par_ptr->ADC1_IN1_FFT_Out_bfr[p+1]));
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	ed93 7a00 	vldr	s14, [r3]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	edd3 6a00 	vldr	s13, [r3]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cec:	f008 f810 	bl	800ad10 <sqrtf>
 8002cf0:	eef0 7a40 	vmov.f32	s15, s0
 8002cf4:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <ADC1_IN1_STFT_Update+0x1c8>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_1++;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2bff      	cmp	r3, #255	; 0xff
 8002d10:	d9c2      	bls.n	8002c98 <ADC1_IN1_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_1;
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <ADC1_IN1_STFT_Update+0x1c8>)
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	f3af 8000 	nop.w
 8002d20:	00000000 	.word	0x00000000
 8002d24:	40000000 	.word	0x40000000
 8002d28:	42280000 	.word	0x42280000
 8002d2c:	42ff0000 	.word	0x42ff0000
 8002d30:	bfe00000 	.word	0xbfe00000
 8002d34:	2000ac5c 	.word	0x2000ac5c
 8002d38:	2000acec 	.word	0x2000acec
 8002d3c:	00000000 	.word	0x00000000

08002d40 <ADC1_IN2_STFT_Update>:

float32_t* ADC1_IN2_STFT_Update(ADC1_IN2_STFT_par*ADC1_IN2_STFT_par_ptr, ADC1_IN2_MA*ADC1_IN2_STFT_ptr)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	ADC1_IN2_STFT_par_ptr->Sigma_2 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d50:	4a69      	ldr	r2, [pc, #420]	; (8002ef8 <ADC1_IN2_STFT_Update+0x1b8>)
 8002d52:	601a      	str	r2, [r3, #0]
	ADC1_IN2_STFT_par_ptr->mu_2 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d5a:	4a68      	ldr	r2, [pc, #416]	; (8002efc <ADC1_IN2_STFT_Update+0x1bc>)
 8002d5c:	601a      	str	r2, [r3, #0]

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e045      	b.n	8002df0 <ADC1_IN2_STFT_Update+0xb0>
	{
		float32_t exponent_2 = -0.5f*(pow(((n - ADC1_IN2_STFT_par_ptr->mu_2)/ADC1_IN2_STFT_par_ptr->Sigma_2), 2));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d8a:	ee16 0a90 	vmov	r0, s13
 8002d8e:	f7fd fba7 	bl	80004e0 <__aeabi_f2d>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8002ef0 <ADC1_IN2_STFT_Update+0x1b0>
 8002d9a:	ec43 2b10 	vmov	d0, r2, r3
 8002d9e:	f007 ff1b 	bl	800abd8 <pow>
 8002da2:	ec51 0b10 	vmov	r0, r1, d0
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <ADC1_IN2_STFT_Update+0x1c0>)
 8002dac:	f7fd fbf0 	bl	8000590 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fd fec2 	bl	8000b40 <__aeabi_d2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60bb      	str	r3, [r7, #8]
		ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[n] = exp(exponent_2);
 8002dc0:	68b8      	ldr	r0, [r7, #8]
 8002dc2:	f7fd fb8d 	bl	80004e0 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	ec43 2b10 	vmov	d0, r2, r3
 8002dce:	f007 febb 	bl	800ab48 <exp>
 8002dd2:	ec53 2b10 	vmov	r2, r3, d0
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd feb1 	bl	8000b40 <__aeabi_d2f>
 8002dde:	4601      	mov	r1, r0
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d9b6      	bls.n	8002d64 <ADC1_IN2_STFT_Update+0x24>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e01a      	b.n	8002e32 <ADC1_IN2_STFT_Update+0xf2>
	{
		ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2[m] = ADC1_IN2_STFT_ptr->MA_ADC1_IN2_OutBfr[m] * ADC1_IN2_STFT_par_ptr->Gaussian_Win_2[m];
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3308      	adds	r3, #8
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2bff      	cmp	r3, #255	; 0xff
 8002e36:	d9e1      	bls.n	8002dfc <ADC1_IN2_STFT_Update+0xbc>
	}

	arm_status FFT_status_2 = arm_rfft_fast_init_f32 (&ADC1_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8002e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e3c:	4831      	ldr	r0, [pc, #196]	; (8002f04 <ADC1_IN2_STFT_Update+0x1c4>)
 8002e3e:	f006 fb05 	bl	800944c <arm_rfft_fast_init_f32>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_2 == ARM_MATH_SUCCESS)
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d149      	bne.n	8002ee2 <ADC1_IN2_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC1_IN2_FFT, ADC1_IN2_STFT_par_ptr->Windowed_STFT_bfr_2 , ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr, 0 );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f603 0208 	addw	r2, r3, #2056	; 0x808
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4829      	ldr	r0, [pc, #164]	; (8002f04 <ADC1_IN2_STFT_Update+0x1c4>)
 8002e5e:	f006 fbd9 	bl	8009614 <arm_rfft_fast_f32>

		uint32_t mag_indx_2 = 0.0f;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002e66:	e039      	b.n	8002edc <ADC1_IN2_STFT_Update+0x19c>
		{
			FFT_Mag_Res_2[mag_indx_2] = sqrtf((ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p]) + (ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1] * ADC1_IN2_STFT_par_ptr->ADC1_IN2_FFT_Out_bfr[p+1]));
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	edd3 6a00 	vldr	s13, [r3]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	f203 2302 	addw	r3, r3, #514	; 0x202
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f007 ff28 	bl	800ad10 <sqrtf>
 8002ec0:	eef0 7a40 	vmov.f32	s15, s0
 8002ec4:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <ADC1_IN2_STFT_Update+0x1c8>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_2++;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	3302      	adds	r3, #2
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2bff      	cmp	r3, #255	; 0xff
 8002ee0:	d9c2      	bls.n	8002e68 <ADC1_IN2_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_2;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <ADC1_IN2_STFT_Update+0x1c8>)
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	f3af 8000 	nop.w
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	40000000 	.word	0x40000000
 8002ef8:	42280000 	.word	0x42280000
 8002efc:	42ff0000 	.word	0x42ff0000
 8002f00:	bfe00000 	.word	0xbfe00000
 8002f04:	2000ac74 	.word	0x2000ac74
 8002f08:	2000aeec 	.word	0x2000aeec
 8002f0c:	00000000 	.word	0x00000000

08002f10 <ADC2_IN3_STFT_Update>:

float32_t* ADC2_IN3_STFT_Update(ADC2_IN3_STFT_par*ADC2_IN3_STFT_par_ptr, ADC2_IN3_MA*ADC2_IN3_STFT_ptr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	ADC2_IN3_STFT_par_ptr->Sigma_3 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f20:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <ADC2_IN3_STFT_Update+0x1b8>)
 8002f22:	601a      	str	r2, [r3, #0]
	ADC2_IN3_STFT_par_ptr->mu_3 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f2a:	4a68      	ldr	r2, [pc, #416]	; (80030cc <ADC2_IN3_STFT_Update+0x1bc>)
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e045      	b.n	8002fc0 <ADC2_IN3_STFT_Update+0xb0>
	{
		float32_t exponent_3 = -0.5f*(pow(((n - ADC2_IN3_STFT_par_ptr->mu_3)/ADC2_IN3_STFT_par_ptr->Sigma_3), 2));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f5a:	ee16 0a90 	vmov	r0, s13
 8002f5e:	f7fd fabf 	bl	80004e0 <__aeabi_f2d>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80030c0 <ADC2_IN3_STFT_Update+0x1b0>
 8002f6a:	ec43 2b10 	vmov	d0, r2, r3
 8002f6e:	f007 fe33 	bl	800abd8 <pow>
 8002f72:	ec51 0b10 	vmov	r0, r1, d0
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <ADC2_IN3_STFT_Update+0x1c0>)
 8002f7c:	f7fd fb08 	bl	8000590 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7fd fdda 	bl	8000b40 <__aeabi_d2f>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	60bb      	str	r3, [r7, #8]
		ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[n] = exp(exponent_3);
 8002f90:	68b8      	ldr	r0, [r7, #8]
 8002f92:	f7fd faa5 	bl	80004e0 <__aeabi_f2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	ec43 2b10 	vmov	d0, r2, r3
 8002f9e:	f007 fdd3 	bl	800ab48 <exp>
 8002fa2:	ec53 2b10 	vmov	r2, r3, d0
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fdc9 	bl	8000b40 <__aeabi_d2f>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2bff      	cmp	r3, #255	; 0xff
 8002fc4:	d9b6      	bls.n	8002f34 <ADC2_IN3_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e01a      	b.n	8003002 <ADC2_IN3_STFT_Update+0xf2>
	{
		ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3[m] = ADC2_IN3_STFT_ptr->MA_ADC2_IN3_OutBfr[m] * ADC2_IN3_STFT_par_ptr->Gaussian_Win_3[m];
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	3301      	adds	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2bff      	cmp	r3, #255	; 0xff
 8003006:	d9e1      	bls.n	8002fcc <ADC2_IN3_STFT_Update+0xbc>
	}

	arm_status FFT_status_3 = arm_rfft_fast_init_f32 (&ADC2_IN3_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300c:	4831      	ldr	r0, [pc, #196]	; (80030d4 <ADC2_IN3_STFT_Update+0x1c4>)
 800300e:	f006 fa1d 	bl	800944c <arm_rfft_fast_init_f32>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_3 == ARM_MATH_SUCCESS)
 8003016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d149      	bne.n	80030b2 <ADC2_IN3_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC2_IN3_FFT, ADC2_IN3_STFT_par_ptr->Windowed_STFT_bfr_3 , ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr, 0 );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f603 0208 	addw	r2, r3, #2056	; 0x808
 800302a:	2300      	movs	r3, #0
 800302c:	4829      	ldr	r0, [pc, #164]	; (80030d4 <ADC2_IN3_STFT_Update+0x1c4>)
 800302e:	f006 faf1 	bl	8009614 <arm_rfft_fast_f32>

		uint32_t mag_indx_3 = 0.0f;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003036:	e039      	b.n	80030ac <ADC2_IN3_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_3] = sqrtf((ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p]) + (ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1] * ADC2_IN3_STFT_par_ptr->ADC2_IN3_FFT_Out_bfr[p+1]));
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3301      	adds	r3, #1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	edd3 6a00 	vldr	s13, [r3]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3301      	adds	r3, #1
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	f007 fe40 	bl	800ad10 <sqrtf>
 8003090:	eef0 7a40 	vmov.f32	s15, s0
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <ADC2_IN3_STFT_Update+0x1c8>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_3++;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3301      	adds	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	3302      	adds	r3, #2
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2bff      	cmp	r3, #255	; 0xff
 80030b0:	d9c2      	bls.n	8003038 <ADC2_IN3_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_3;
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <ADC2_IN3_STFT_Update+0x1c8>)
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f3af 8000 	nop.w
 80030c0:	00000000 	.word	0x00000000
 80030c4:	40000000 	.word	0x40000000
 80030c8:	42280000 	.word	0x42280000
 80030cc:	42ff0000 	.word	0x42ff0000
 80030d0:	bfe00000 	.word	0xbfe00000
 80030d4:	2000ac8c 	.word	0x2000ac8c
 80030d8:	2000b0ec 	.word	0x2000b0ec
 80030dc:	00000000 	.word	0x00000000

080030e0 <ADC2_IN4_STFT_Update>:

float32_t* ADC2_IN4_STFT_Update(ADC2_IN4_STFT_par*ADC2_IN4_STFT_par_ptr, ADC2_IN4_MA*ADC2_IN4_STFT_ptr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	ADC2_IN4_STFT_par_ptr->Sigma_4 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030f0:	4a69      	ldr	r2, [pc, #420]	; (8003298 <ADC2_IN4_STFT_Update+0x1b8>)
 80030f2:	601a      	str	r2, [r3, #0]
	ADC2_IN4_STFT_par_ptr->mu_4 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030fa:	4a68      	ldr	r2, [pc, #416]	; (800329c <ADC2_IN4_STFT_Update+0x1bc>)
 80030fc:	601a      	str	r2, [r3, #0]

	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e045      	b.n	8003190 <ADC2_IN4_STFT_Update+0xb0>
	{
		float32_t exponent_4 = -0.5f*(pow(((n - ADC2_IN4_STFT_par_ptr->mu_4)/ADC2_IN4_STFT_par_ptr->Sigma_4), 2));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800312a:	ee16 0a90 	vmov	r0, s13
 800312e:	f7fd f9d7 	bl	80004e0 <__aeabi_f2d>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8003290 <ADC2_IN4_STFT_Update+0x1b0>
 800313a:	ec43 2b10 	vmov	d0, r2, r3
 800313e:	f007 fd4b 	bl	800abd8 <pow>
 8003142:	ec51 0b10 	vmov	r0, r1, d0
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <ADC2_IN4_STFT_Update+0x1c0>)
 800314c:	f7fd fa20 	bl	8000590 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	f7fd fcf2 	bl	8000b40 <__aeabi_d2f>
 800315c:	4603      	mov	r3, r0
 800315e:	60bb      	str	r3, [r7, #8]
		ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[n] = exp(exponent_4);
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	f7fd f9bd 	bl	80004e0 <__aeabi_f2d>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	ec43 2b10 	vmov	d0, r2, r3
 800316e:	f007 fceb 	bl	800ab48 <exp>
 8003172:	ec53 2b10 	vmov	r2, r3, d0
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f7fd fce1 	bl	8000b40 <__aeabi_d2f>
 800317e:	4601      	mov	r1, r0
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2bff      	cmp	r3, #255	; 0xff
 8003194:	d9b6      	bls.n	8003104 <ADC2_IN4_STFT_Update+0x24>
	}

	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e01a      	b.n	80031d2 <ADC2_IN4_STFT_Update+0xf2>
	{
		ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4[m] = ADC2_IN4_STFT_ptr->MA_ADC2_IN4_OutBfr[m] * ADC2_IN4_STFT_par_ptr->Gaussian_Win_4[m];
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	3308      	adds	r3, #8
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3304      	adds	r3, #4
 80031a8:	ed93 7a00 	vldr	s14, [r3]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3301      	adds	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d9e1      	bls.n	800319c <ADC2_IN4_STFT_Update+0xbc>
	}

	arm_status FFT_status_4 = arm_rfft_fast_init_f32 (&ADC2_IN4_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80031d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031dc:	4831      	ldr	r0, [pc, #196]	; (80032a4 <ADC2_IN4_STFT_Update+0x1c4>)
 80031de:	f006 f935 	bl	800944c <arm_rfft_fast_init_f32>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_4 == ARM_MATH_SUCCESS)
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d149      	bne.n	8003282 <ADC2_IN4_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC2_IN4_FFT, ADC2_IN4_STFT_par_ptr->Windowed_STFT_bfr_4 , ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr, 0 );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f603 0208 	addw	r2, r3, #2056	; 0x808
 80031fa:	2300      	movs	r3, #0
 80031fc:	4829      	ldr	r0, [pc, #164]	; (80032a4 <ADC2_IN4_STFT_Update+0x1c4>)
 80031fe:	f006 fa09 	bl	8009614 <arm_rfft_fast_f32>

		uint32_t mag_indx_4 = 0.0f;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003206:	e039      	b.n	800327c <ADC2_IN4_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_4] = sqrtf((ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p]) + (ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1] * ADC2_IN4_STFT_par_ptr->ADC2_IN4_FFT_Out_bfr[p+1]));
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	ed93 7a00 	vldr	s14, [r3]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	3301      	adds	r3, #1
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	edd3 6a00 	vldr	s13, [r3]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3301      	adds	r3, #1
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	f007 fd58 	bl	800ad10 <sqrtf>
 8003260:	eef0 7a40 	vmov.f32	s15, s0
 8003264:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <ADC2_IN4_STFT_Update+0x1c8>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_4++;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3302      	adds	r3, #2
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2bff      	cmp	r3, #255	; 0xff
 8003280:	d9c2      	bls.n	8003208 <ADC2_IN4_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_4;
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <ADC2_IN4_STFT_Update+0x1cc>)
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	f3af 8000 	nop.w
 8003290:	00000000 	.word	0x00000000
 8003294:	40000000 	.word	0x40000000
 8003298:	42280000 	.word	0x42280000
 800329c:	42ff0000 	.word	0x42ff0000
 80032a0:	bfe00000 	.word	0xbfe00000
 80032a4:	2000aca4 	.word	0x2000aca4
 80032a8:	2000b0ec 	.word	0x2000b0ec
 80032ac:	2000b2ec 	.word	0x2000b2ec

080032b0 <ADC3_IN1_STFT_Update>:

float32_t* ADC3_IN1_STFT_Update(ADC3_IN1_STFT_par*ADC3_IN1_STFT_par_ptr, ADC3_IN1_MA*ADC3_IN1_STFT_ptr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
	ADC3_IN1_STFT_par_ptr->Sigma_5 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032c0:	4a69      	ldr	r2, [pc, #420]	; (8003468 <ADC3_IN1_STFT_Update+0x1b8>)
 80032c2:	601a      	str	r2, [r3, #0]
	ADC3_IN1_STFT_par_ptr->mu_5 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032ca:	4a68      	ldr	r2, [pc, #416]	; (800346c <ADC3_IN1_STFT_Update+0x1bc>)
 80032cc:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e045      	b.n	8003360 <ADC3_IN1_STFT_Update+0xb0>
	{
		float32_t exponent_5 = -0.5f*(pow(((n - ADC3_IN1_STFT_par_ptr->mu_5)/ADC3_IN1_STFT_par_ptr->Sigma_5), 2));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032fa:	ee16 0a90 	vmov	r0, s13
 80032fe:	f7fd f8ef 	bl	80004e0 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8003460 <ADC3_IN1_STFT_Update+0x1b0>
 800330a:	ec43 2b10 	vmov	d0, r2, r3
 800330e:	f007 fc63 	bl	800abd8 <pow>
 8003312:	ec51 0b10 	vmov	r0, r1, d0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <ADC3_IN1_STFT_Update+0x1c0>)
 800331c:	f7fd f938 	bl	8000590 <__aeabi_dmul>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f7fd fc0a 	bl	8000b40 <__aeabi_d2f>
 800332c:	4603      	mov	r3, r0
 800332e:	60bb      	str	r3, [r7, #8]
		ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[n] = exp(exponent_5);
 8003330:	68b8      	ldr	r0, [r7, #8]
 8003332:	f7fd f8d5 	bl	80004e0 <__aeabi_f2d>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	ec43 2b10 	vmov	d0, r2, r3
 800333e:	f007 fc03 	bl	800ab48 <exp>
 8003342:	ec53 2b10 	vmov	r2, r3, d0
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	f7fd fbf9 	bl	8000b40 <__aeabi_d2f>
 800334e:	4601      	mov	r1, r0
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2bff      	cmp	r3, #255	; 0xff
 8003364:	d9b6      	bls.n	80032d4 <ADC3_IN1_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e01a      	b.n	80033a2 <ADC3_IN1_STFT_Update+0xf2>
	{
		ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5[m] = ADC3_IN1_STFT_ptr->MA_ADC3_IN1_OutBfr[m] * ADC3_IN1_STFT_par_ptr->Gaussian_Win_5[m];
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3308      	adds	r3, #8
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	ed93 7a00 	vldr	s14, [r3]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	3301      	adds	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2bff      	cmp	r3, #255	; 0xff
 80033a6:	d9e1      	bls.n	800336c <ADC3_IN1_STFT_Update+0xbc>
	}

	arm_status FFT_status_5 = arm_rfft_fast_init_f32 (&ADC3_IN1_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 80033a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ac:	4831      	ldr	r0, [pc, #196]	; (8003474 <ADC3_IN1_STFT_Update+0x1c4>)
 80033ae:	f006 f84d 	bl	800944c <arm_rfft_fast_init_f32>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_5 == ARM_MATH_SUCCESS)
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d149      	bne.n	8003452 <ADC3_IN1_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC3_IN1_FFT, ADC3_IN1_STFT_par_ptr->Windowed_STFT_bfr_5 , ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr, 0 );
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f603 0208 	addw	r2, r3, #2056	; 0x808
 80033ca:	2300      	movs	r3, #0
 80033cc:	4829      	ldr	r0, [pc, #164]	; (8003474 <ADC3_IN1_STFT_Update+0x1c4>)
 80033ce:	f006 f921 	bl	8009614 <arm_rfft_fast_f32>

		uint32_t mag_indx_5 = 0.0f;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80033d6:	e039      	b.n	800344c <ADC3_IN1_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_5] = sqrtf((ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p]) + (ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1] * ADC3_IN1_STFT_par_ptr->ADC3_IN1_FFT_Out_bfr[p+1]));
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f203 2302 	addw	r3, r3, #514	; 0x202
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	ed93 7a00 	vldr	s14, [r3]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f203 2302 	addw	r3, r3, #514	; 0x202
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	3301      	adds	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	edd3 6a00 	vldr	s13, [r3]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	3301      	adds	r3, #1
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	f203 2302 	addw	r3, r3, #514	; 0x202
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	eeb0 0a67 	vmov.f32	s0, s15
 800342c:	f007 fc70 	bl	800ad10 <sqrtf>
 8003430:	eef0 7a40 	vmov.f32	s15, s0
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <ADC3_IN1_STFT_Update+0x1c8>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_5++;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3301      	adds	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3302      	adds	r3, #2
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2bff      	cmp	r3, #255	; 0xff
 8003450:	d9c2      	bls.n	80033d8 <ADC3_IN1_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_5;
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <ADC3_IN1_STFT_Update+0x1cc>)
}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	f3af 8000 	nop.w
 8003460:	00000000 	.word	0x00000000
 8003464:	40000000 	.word	0x40000000
 8003468:	42280000 	.word	0x42280000
 800346c:	42ff0000 	.word	0x42ff0000
 8003470:	bfe00000 	.word	0xbfe00000
 8003474:	2000acbc 	.word	0x2000acbc
 8003478:	2000b0ec 	.word	0x2000b0ec
 800347c:	2000b4ec 	.word	0x2000b4ec

08003480 <ADC3_IN2_STFT_Update>:

float32_t* ADC3_IN2_STFT_Update(ADC3_IN2_STFT_par*ADC3_IN2_STFT_par_ptr, ADC3_IN2_MA*ADC3_IN2_STFT_ptr)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
	ADC3_IN2_STFT_par_ptr->Sigma_6 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6); // The Gaussian window spans about + or - 3 * Sigma_1 from the mean (center of the window). Setting Sigma_1 = (ADC_DMA_SIXTEENTHBUFFERSIZE / 6) ensures that almost all of the window (99.7%) lies within the buffer
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003490:	4a69      	ldr	r2, [pc, #420]	; (8003638 <ADC3_IN2_STFT_Update+0x1b8>)
 8003492:	601a      	str	r2, [r3, #0]
	ADC3_IN2_STFT_par_ptr->mu_6 = ((ADC_DMA_SIXTEENTHBUFFERSIZE-1)/(2.0f));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800349a:	4a68      	ldr	r2, [pc, #416]	; (800363c <ADC3_IN2_STFT_Update+0x1bc>)
 800349c:	601a      	str	r2, [r3, #0]

    /* Generating the Gaussian window*/
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e045      	b.n	8003530 <ADC3_IN2_STFT_Update+0xb0>
	{
		float32_t exponent_6 = -0.5f*(pow(((n - ADC3_IN2_STFT_par_ptr->mu_6)/ADC3_IN2_STFT_par_ptr->Sigma_6), 2));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034ca:	ee16 0a90 	vmov	r0, s13
 80034ce:	f7fd f807 	bl	80004e0 <__aeabi_f2d>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8003630 <ADC3_IN2_STFT_Update+0x1b0>
 80034da:	ec43 2b10 	vmov	d0, r2, r3
 80034de:	f007 fb7b 	bl	800abd8 <pow>
 80034e2:	ec51 0b10 	vmov	r0, r1, d0
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	4b55      	ldr	r3, [pc, #340]	; (8003640 <ADC3_IN2_STFT_Update+0x1c0>)
 80034ec:	f7fd f850 	bl	8000590 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd fb22 	bl	8000b40 <__aeabi_d2f>
 80034fc:	4603      	mov	r3, r0
 80034fe:	60bb      	str	r3, [r7, #8]
		ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[n] = exp(exponent_6);
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	f7fc ffed 	bl	80004e0 <__aeabi_f2d>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	ec43 2b10 	vmov	d0, r2, r3
 800350e:	f007 fb1b 	bl	800ab48 <exp>
 8003512:	ec53 2b10 	vmov	r2, r3, d0
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f7fd fb11 	bl	8000b40 <__aeabi_d2f>
 800351e:	4601      	mov	r1, r0
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	6019      	str	r1, [r3, #0]
	for(uint32_t n = 0; n < ADC_DMA_SIXTEENTHBUFFERSIZE; n++)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3301      	adds	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2bff      	cmp	r3, #255	; 0xff
 8003534:	d9b6      	bls.n	80034a4 <ADC3_IN2_STFT_Update+0x24>
	}

	/* Windows the moving average output buffer with the Gaussian window */
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e01a      	b.n	8003572 <ADC3_IN2_STFT_Update+0xf2>
	{
		ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6[m] = ADC3_IN2_STFT_ptr->MA_ADC3_IN2_OutBfr[m] * ADC3_IN2_STFT_par_ptr->Gaussian_Win_6[m];
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3308      	adds	r3, #8
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	ed93 7a00 	vldr	s14, [r3]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t m = 0; m < ADC_DMA_SIXTEENTHBUFFERSIZE; m++)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	3301      	adds	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2bff      	cmp	r3, #255	; 0xff
 8003576:	d9e1      	bls.n	800353c <ADC3_IN2_STFT_Update+0xbc>
	}

	arm_status FFT_status_6 = arm_rfft_fast_init_f32 (&ADC3_IN2_FFT, ADC_DMA_SIXTEENTHBUFFERSIZE);
 8003578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800357c:	4831      	ldr	r0, [pc, #196]	; (8003644 <ADC3_IN2_STFT_Update+0x1c4>)
 800357e:	f005 ff65 	bl	800944c <arm_rfft_fast_init_f32>
 8003582:	4603      	mov	r3, r0
 8003584:	73fb      	strb	r3, [r7, #15]

	if (FFT_status_6 == ARM_MATH_SUCCESS)
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d149      	bne.n	8003622 <ADC3_IN2_STFT_Update+0x1a2>
	{
		arm_rfft_fast_f32 (&ADC3_IN2_FFT, ADC3_IN2_STFT_par_ptr->Windowed_STFT_bfr_6 , ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr, 0 );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f603 0208 	addw	r2, r3, #2056	; 0x808
 800359a:	2300      	movs	r3, #0
 800359c:	4829      	ldr	r0, [pc, #164]	; (8003644 <ADC3_IN2_STFT_Update+0x1c4>)
 800359e:	f006 f839 	bl	8009614 <arm_rfft_fast_f32>

		uint32_t mag_indx_6 = 0.0f;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]

		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 80035a6:	e039      	b.n	800361c <ADC3_IN2_STFT_Update+0x19c>
		{
			FFT_Mag_Res_3[mag_indx_6] = sqrtf((ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p]) + (ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1] * ADC3_IN2_STFT_par_ptr->ADC3_IN2_FFT_Out_bfr[p+1]));
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3301      	adds	r3, #1
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	edd3 6a00 	vldr	s13, [r3]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3301      	adds	r3, #1
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	f203 2302 	addw	r3, r3, #514	; 0x202
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f8:	eeb0 0a67 	vmov.f32	s0, s15
 80035fc:	f007 fb88 	bl	800ad10 <sqrtf>
 8003600:	eef0 7a40 	vmov.f32	s15, s0
 8003604:	4a10      	ldr	r2, [pc, #64]	; (8003648 <ADC3_IN2_STFT_Update+0x1c8>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	edc3 7a00 	vstr	s15, [r3]

			mag_indx_6++;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
		for (uint32_t p; p < ADC_DMA_SIXTEENTHBUFFERSIZE; p += 2)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3302      	adds	r3, #2
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2bff      	cmp	r3, #255	; 0xff
 8003620:	d9c2      	bls.n	80035a8 <ADC3_IN2_STFT_Update+0x128>
		}
	}

	return FFT_Mag_Res_6;
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <ADC3_IN2_STFT_Update+0x1cc>)
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f3af 8000 	nop.w
 8003630:	00000000 	.word	0x00000000
 8003634:	40000000 	.word	0x40000000
 8003638:	42280000 	.word	0x42280000
 800363c:	42ff0000 	.word	0x42ff0000
 8003640:	bfe00000 	.word	0xbfe00000
 8003644:	2000acd4 	.word	0x2000acd4
 8003648:	2000b0ec 	.word	0x2000b0ec
 800364c:	2000b6ec 	.word	0x2000b6ec

08003650 <ADC1_IN1_TKEO>:
float32_t ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE];


//FUNCTION DEFINITIONS
uint8_t ADC1_IN1_TKEO(ADC1_IN1_MA *ADC1_IN1_TKEO_ptr, float32_t StnDev_BL_1)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800365c:	2301      	movs	r3, #1
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003660:	e030      	b.n	80036c4 <ADC1_IN1_TKEO+0x74>
  {
	  ADC1_IN1_Tkeo_bfr[n]= (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n]) - (ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n-1] * ADC1_IN1_TKEO_ptr->MA_ADC1_IN1_OutBfr[n+1]);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	3308      	adds	r3, #8
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	ed93 7a00 	vldr	s14, [r3]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	3308      	adds	r3, #8
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3304      	adds	r3, #4
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	3b01      	subs	r3, #1
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	3308      	adds	r3, #8
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	edd3 6a00 	vldr	s13, [r3]
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	3301      	adds	r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	3308      	adds	r3, #8
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b2:	4a47      	ldr	r2, [pc, #284]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	3301      	adds	r3, #1
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	2bfe      	cmp	r3, #254	; 0xfe
 80036c8:	d9cb      	bls.n	8003662 <ADC1_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC1_IN1_Tkeo_bfr[0] = 0.0f;
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
  ADC1_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80036d2:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_1 = 0.0f; // Initialize the sum to zero
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_1 =0.0f; // Initialize the mean to zero
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_1 = 0.0f; // Initialize variance to zero
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_1 = 0.0f; //Initialize standard deviation to zero
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_1 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	e00e      	b.n	800371c <ADC1_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_1 += ADC1_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 80036fe:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	3301      	adds	r3, #1
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2bff      	cmp	r3, #255	; 0xff
 8003720:	d9ed      	bls.n	80036fe <ADC1_IN1_TKEO+0xae>
  }

  Tkeo_mean_1 = Tkeo_Sum_1 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003722:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003726:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80037d4 <ADC1_IN1_TKEO+0x184>
 800372a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800372e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e018      	b.n	800376a <ADC1_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_1 = ADC1_IN1_Tkeo_bfr[q] - Tkeo_mean_1;
 8003738:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <ADC1_IN1_TKEO+0x180>)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	ed93 7a00 	vldr	s14, [r3]
 8003744:	edd7 7a06 	vldr	s15, [r7, #24]
 8003748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_1 += Tkeo_Diff_1 * Tkeo_Diff_1;
 8003750:	edd7 7a03 	vldr	s15, [r7, #12]
 8003754:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003758:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800375c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003760:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2bff      	cmp	r3, #255	; 0xff
 800376e:	d9e3      	bls.n	8003738 <ADC1_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_1 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003770:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003774:	eddf 6a17 	vldr	s13, [pc, #92]	; 80037d4 <ADC1_IN1_TKEO+0x184>
 8003778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800377c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_1 = sqrt(Tkeo_Variance_1);
 8003780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003782:	f7fc fead 	bl	80004e0 <__aeabi_f2d>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	ec43 2b10 	vmov	d0, r2, r3
 800378e:	f007 fa93 	bl	800acb8 <sqrt>
 8003792:	ec53 2b10 	vmov	r2, r3, d0
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	f7fd f9d1 	bl	8000b40 <__aeabi_d2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_1 > 3 * StnDev_BL_1)
 80037a2:	edd7 7a00 	vldr	s15, [r7]
 80037a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80037aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80037b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	dd03      	ble.n	80037c4 <ADC1_IN1_TKEO+0x174>
  {
	  Tkeo_flag_1 = 1;
 80037bc:	2301      	movs	r3, #1
 80037be:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_1;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	e000      	b.n	80037c6 <ADC1_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 80037c4:	2300      	movs	r3, #0
  }


}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3730      	adds	r7, #48	; 0x30
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	2000b8ec 	.word	0x2000b8ec
 80037d4:	43800000 	.word	0x43800000

080037d8 <ADC1_IN2_TKEO>:


uint8_t ADC1_IN2_TKEO(ADC1_IN2_MA *ADC1_IN2_TKEO_ptr, float32_t StnDev_BL_2)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08c      	sub	sp, #48	; 0x30
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80037e4:	2301      	movs	r3, #1
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	e030      	b.n	800384c <ADC1_IN2_TKEO+0x74>
  {
	  ADC1_IN2_Tkeo_bfr[n]= (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n]) - (ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n-1] * ADC1_IN2_TKEO_ptr->MA_ADC1_IN2_OutBfr[n+1]);
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	3308      	adds	r3, #8
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	3308      	adds	r3, #8
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	3304      	adds	r3, #4
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	3b01      	subs	r3, #1
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	3308      	adds	r3, #8
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3304      	adds	r3, #4
 800381c:	edd3 6a00 	vldr	s13, [r3]
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	3301      	adds	r3, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	3308      	adds	r3, #8
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	3304      	adds	r3, #4
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383a:	4a47      	ldr	r2, [pc, #284]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	3301      	adds	r3, #1
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	2bfe      	cmp	r3, #254	; 0xfe
 8003850:	d9cb      	bls.n	80037ea <ADC1_IN2_TKEO+0x12>
  }


  ADC1_IN2_Tkeo_bfr[0] = 0.0f;
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
  ADC1_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_2 = 0.0f;
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_2 =0.0f;
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_2 = 0.0f;
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_2 = 0.0f;
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_2 = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003880:	2300      	movs	r3, #0
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	e00e      	b.n	80038a4 <ADC1_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_2 += ADC1_IN2_Tkeo_bfr[h];
 8003886:	4a34      	ldr	r2, [pc, #208]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	3301      	adds	r3, #1
 80038a2:	623b      	str	r3, [r7, #32]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d9ed      	bls.n	8003886 <ADC1_IN2_TKEO+0xae>
  }

  Tkeo_mean_2 = Tkeo_Sum_2 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 80038aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80038ae:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800395c <ADC1_IN2_TKEO+0x184>
 80038b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e018      	b.n	80038f2 <ADC1_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_2 = ADC1_IN2_Tkeo_bfr[q] - Tkeo_mean_2;
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <ADC1_IN2_TKEO+0x180>)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	ed93 7a00 	vldr	s14, [r3]
 80038cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_2 += Tkeo_Diff_2 * Tkeo_Diff_2;
 80038d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80038e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	d9e3      	bls.n	80038c0 <ADC1_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_2 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 80038f8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038fc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800395c <ADC1_IN2_TKEO+0x184>
 8003900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003904:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_2 = sqrt(Tkeo_Variance_2);
 8003908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800390a:	f7fc fde9 	bl	80004e0 <__aeabi_f2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	ec43 2b10 	vmov	d0, r2, r3
 8003916:	f007 f9cf 	bl	800acb8 <sqrt>
 800391a:	ec53 2b10 	vmov	r2, r3, d0
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	f7fd f90d 	bl	8000b40 <__aeabi_d2f>
 8003926:	4603      	mov	r3, r0
 8003928:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_2 > 3 * StnDev_BL_2)
 800392a:	edd7 7a00 	vldr	s15, [r7]
 800392e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003936:	ed97 7a05 	vldr	s14, [r7, #20]
 800393a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003942:	dd03      	ble.n	800394c <ADC1_IN2_TKEO+0x174>
  {
	  Tkeo_flag_2 = 1;
 8003944:	2301      	movs	r3, #1
 8003946:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_2;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	e000      	b.n	800394e <ADC1_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 800394c:	2300      	movs	r3, #0
  }


}
 800394e:	4618      	mov	r0, r3
 8003950:	3730      	adds	r7, #48	; 0x30
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000bcec 	.word	0x2000bcec
 800395c:	43800000 	.word	0x43800000

08003960 <ADC2_IN3_TKEO>:



uint8_t ADC2_IN3_TKEO(ADC2_IN3_MA *ADC2_IN3_TKEO_ptr, float32_t StnDev_BL_3)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 800396c:	2301      	movs	r3, #1
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003970:	e030      	b.n	80039d4 <ADC2_IN3_TKEO+0x74>
  {
	  ADC2_IN3_Tkeo_bfr[n]= (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n]) - (ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n-1] * ADC2_IN3_TKEO_ptr->MA_ADC2_IN3_OutBfr[n+1]);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	3308      	adds	r3, #8
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	ed93 7a00 	vldr	s14, [r3]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	3308      	adds	r3, #8
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	3b01      	subs	r3, #1
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	3308      	adds	r3, #8
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	edd3 6a00 	vldr	s13, [r3]
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	3301      	adds	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	3308      	adds	r3, #8
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	3304      	adds	r3, #4
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c2:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	3301      	adds	r3, #1
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	2bfe      	cmp	r3, #254	; 0xfe
 80039d8:	d9cb      	bls.n	8003972 <ADC2_IN3_TKEO+0x12>
  }


  ADC2_IN3_Tkeo_bfr[0] = 0.0f;
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
  ADC2_IN3_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 80039e2:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_3 = 0.0f;
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_3 =0.0f;
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_3 = 0.0f;
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_3 = 0.0f;
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_3 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	e00e      	b.n	8003a2c <ADC2_IN3_TKEO+0xcc>
  {
	Tkeo_Sum_3 += ADC2_IN3_Tkeo_bfr[h];
 8003a0e:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a22:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	2bff      	cmp	r3, #255	; 0xff
 8003a30:	d9ed      	bls.n	8003a0e <ADC2_IN3_TKEO+0xae>
  }

  Tkeo_mean_3 = Tkeo_Sum_3 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003a32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a36:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003ae4 <ADC2_IN3_TKEO+0x184>
 8003a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a3e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e018      	b.n	8003a7a <ADC2_IN3_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_3 = ADC2_IN3_Tkeo_bfr[q] - Tkeo_mean_3;
 8003a48:	4a25      	ldr	r2, [pc, #148]	; (8003ae0 <ADC2_IN3_TKEO+0x180>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	ed93 7a00 	vldr	s14, [r3]
 8003a54:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_3 += Tkeo_Diff_3 * Tkeo_Diff_3;
 8003a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a68:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	3301      	adds	r3, #1
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2bff      	cmp	r3, #255	; 0xff
 8003a7e:	d9e3      	bls.n	8003a48 <ADC2_IN3_TKEO+0xe8>
  }

  Tkeo_Variance_3 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003a80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a84:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003ae4 <ADC2_IN3_TKEO+0x184>
 8003a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_3 = sqrt(Tkeo_Variance_3);
 8003a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a92:	f7fc fd25 	bl	80004e0 <__aeabi_f2d>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	ec43 2b10 	vmov	d0, r2, r3
 8003a9e:	f007 f90b 	bl	800acb8 <sqrt>
 8003aa2:	ec53 2b10 	vmov	r2, r3, d0
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7fd f849 	bl	8000b40 <__aeabi_d2f>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_3 > 3 * StnDev_BL_3)
 8003ab2:	edd7 7a00 	vldr	s15, [r7]
 8003ab6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003abe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dd03      	ble.n	8003ad4 <ADC2_IN3_TKEO+0x174>
  {
	  Tkeo_flag_3 = 1;
 8003acc:	2301      	movs	r3, #1
 8003ace:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_3;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	e000      	b.n	8003ad6 <ADC2_IN3_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003ad4:	2300      	movs	r3, #0
  }


}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3730      	adds	r7, #48	; 0x30
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000c0ec 	.word	0x2000c0ec
 8003ae4:	43800000 	.word	0x43800000

08003ae8 <ADC2_IN4_TKEO>:


uint8_t ADC2_IN4_TKEO(ADC2_IN4_MA *ADC2_IN4_TKEO_ptr, float32_t StnDev_BL_4)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003af4:	2301      	movs	r3, #1
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af8:	e030      	b.n	8003b5c <ADC2_IN4_TKEO+0x74>
  {
	  ADC2_IN4_Tkeo_bfr[n]= (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n]) - (ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n-1] * ADC2_IN4_TKEO_ptr->MA_ADC2_IN4_OutBfr[n+1]);
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	3308      	adds	r3, #8
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	ed93 7a00 	vldr	s14, [r3]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	3308      	adds	r3, #8
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	3b01      	subs	r3, #1
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	3308      	adds	r3, #8
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	edd3 6a00 	vldr	s13, [r3]
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	3301      	adds	r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	3308      	adds	r3, #8
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b4a:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	3301      	adds	r3, #1
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2bfe      	cmp	r3, #254	; 0xfe
 8003b60:	d9cb      	bls.n	8003afa <ADC2_IN4_TKEO+0x12>
  }


  ADC2_IN4_Tkeo_bfr[0] = 0.0f;
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
  ADC2_IN4_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_4 = 0.0f;
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_4 =0.0f;
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_4 = 0.0f;
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_4 = 0.0f;
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_4 = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	e00e      	b.n	8003bb4 <ADC2_IN4_TKEO+0xcc>
  {
	Tkeo_Sum_4 += ADC2_IN4_Tkeo_bfr[h];
 8003b96:	4a34      	ldr	r2, [pc, #208]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	edd3 7a00 	vldr	s15, [r3]
 8003ba2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003baa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	d9ed      	bls.n	8003b96 <ADC2_IN4_TKEO+0xae>
  }

  Tkeo_mean_4 = Tkeo_Sum_4 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003bba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003bbe:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003c6c <ADC2_IN4_TKEO+0x184>
 8003bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bc6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e018      	b.n	8003c02 <ADC2_IN4_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_4 = ADC2_IN4_Tkeo_bfr[q] - Tkeo_mean_4;
 8003bd0:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <ADC2_IN4_TKEO+0x180>)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_4 += Tkeo_Diff_4 * Tkeo_Diff_4;
 8003be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bf0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2bff      	cmp	r3, #255	; 0xff
 8003c06:	d9e3      	bls.n	8003bd0 <ADC2_IN4_TKEO+0xe8>
  }

  Tkeo_Variance_4 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003c08:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c0c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003c6c <ADC2_IN4_TKEO+0x184>
 8003c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_4 = sqrt(Tkeo_Variance_4);
 8003c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c1a:	f7fc fc61 	bl	80004e0 <__aeabi_f2d>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	ec43 2b10 	vmov	d0, r2, r3
 8003c26:	f007 f847 	bl	800acb8 <sqrt>
 8003c2a:	ec53 2b10 	vmov	r2, r3, d0
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7fc ff85 	bl	8000b40 <__aeabi_d2f>
 8003c36:	4603      	mov	r3, r0
 8003c38:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_4 > 3 * StnDev_BL_4)
 8003c3a:	edd7 7a00 	vldr	s15, [r7]
 8003c3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c46:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	dd03      	ble.n	8003c5c <ADC2_IN4_TKEO+0x174>
  {
	  Tkeo_flag_4 = 1;
 8003c54:	2301      	movs	r3, #1
 8003c56:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_4;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	e000      	b.n	8003c5e <ADC2_IN4_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003c5c:	2300      	movs	r3, #0
  }


}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3730      	adds	r7, #48	; 0x30
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2000c4ec 	.word	0x2000c4ec
 8003c6c:	43800000 	.word	0x43800000

08003c70 <ADC3_IN1_TKEO>:



uint8_t ADC3_IN1_TKEO(ADC3_IN1_MA *ADC3_IN1_TKEO_ptr, float32_t StnDev_BL_5)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c80:	e030      	b.n	8003ce4 <ADC3_IN1_TKEO+0x74>
  {
	  ADC3_IN1_Tkeo_bfr[n]= (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n]) - (ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n-1] * ADC3_IN1_TKEO_ptr->MA_ADC3_IN1_OutBfr[n+1]);
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	3308      	adds	r3, #8
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	ed93 7a00 	vldr	s14, [r3]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	3308      	adds	r3, #8
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	edd3 7a00 	vldr	s15, [r3]
 8003ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	3308      	adds	r3, #8
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	edd3 6a00 	vldr	s13, [r3]
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	3301      	adds	r3, #1
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd2:	4a47      	ldr	r2, [pc, #284]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2bfe      	cmp	r3, #254	; 0xfe
 8003ce8:	d9cb      	bls.n	8003c82 <ADC3_IN1_TKEO+0x12>
  }

  /* Handling boundary conditions */
  ADC3_IN1_Tkeo_bfr[0] = 0.0f;
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
  ADC3_IN1_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003cf2:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_5 = 0.0f; // Initialize the sum to zero
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_5 =0.0f; // Initialize the mean to zero
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_5 = 0.0f; // Initialize variance to zero
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_5 = 0.0f; //Initialize standard deviation to zero
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_5 = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	e00e      	b.n	8003d3c <ADC3_IN1_TKEO+0xcc>
  {
	Tkeo_Sum_5 += ADC3_IN1_Tkeo_bfr[h];  // Accumulate the sum of all values in the buffer
 8003d1e:	4a34      	ldr	r2, [pc, #208]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d32:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	2bff      	cmp	r3, #255	; 0xff
 8003d40:	d9ed      	bls.n	8003d1e <ADC3_IN1_TKEO+0xae>
  }

  Tkeo_mean_5 = Tkeo_Sum_5 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003d42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d46:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003df4 <ADC3_IN1_TKEO+0x184>
 8003d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d4e:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e018      	b.n	8003d8a <ADC3_IN1_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_5 = ADC3_IN1_Tkeo_bfr[q] - Tkeo_mean_5;
 8003d58:	4a25      	ldr	r2, [pc, #148]	; (8003df0 <ADC3_IN1_TKEO+0x180>)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	ed93 7a00 	vldr	s14, [r3]
 8003d64:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d6c:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_5 += Tkeo_Diff_5 * Tkeo_Diff_5;
 8003d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003d78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2bff      	cmp	r3, #255	; 0xff
 8003d8e:	d9e3      	bls.n	8003d58 <ADC3_IN1_TKEO+0xe8>
  }

  Tkeo_Variance_5 /= ADC_DMA_SIXTEENTHBUFFERSIZE; // Average the squared differences
 8003d90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d94:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003df4 <ADC3_IN1_TKEO+0x184>
 8003d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_5 = sqrt(Tkeo_Variance_5);
 8003da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da2:	f7fc fb9d 	bl	80004e0 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	ec43 2b10 	vmov	d0, r2, r3
 8003dae:	f006 ff83 	bl	800acb8 <sqrt>
 8003db2:	ec53 2b10 	vmov	r2, r3, d0
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	f7fc fec1 	bl	8000b40 <__aeabi_d2f>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_5 > 3 * StnDev_BL_5)
 8003dc2:	edd7 7a00 	vldr	s15, [r7]
 8003dc6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dce:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dda:	dd03      	ble.n	8003de4 <ADC3_IN1_TKEO+0x174>
  {
	  Tkeo_flag_5 = 1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_5;
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	e000      	b.n	8003de6 <ADC3_IN1_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003de4:	2300      	movs	r3, #0
  }


}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3730      	adds	r7, #48	; 0x30
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000c8ec 	.word	0x2000c8ec
 8003df4:	43800000 	.word	0x43800000

08003df8 <ADC3_IN2_TKEO>:



uint8_t ADC3_IN2_TKEO(ADC3_IN2_MA *ADC3_IN2_TKEO_ptr, float32_t StnDev_BL_6)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	ed87 0a00 	vstr	s0, [r7]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003e04:	2301      	movs	r3, #1
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e08:	e030      	b.n	8003e6c <ADC3_IN2_TKEO+0x74>
  {
	  ADC3_IN2_Tkeo_bfr[n]= (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n]) - (ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n-1] * ADC3_IN2_TKEO_ptr->MA_ADC3_IN2_OutBfr[n+1]);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	3308      	adds	r3, #8
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	3304      	adds	r3, #4
 8003e16:	ed93 7a00 	vldr	s14, [r3]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	3308      	adds	r3, #8
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	3b01      	subs	r3, #1
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	3308      	adds	r3, #8
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	edd3 6a00 	vldr	s13, [r3]
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	3301      	adds	r3, #1
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	3308      	adds	r3, #8
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e5a:	4a47      	ldr	r2, [pc, #284]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	edc3 7a00 	vstr	s15, [r3]
  for(uint32_t n=1; n<ADC_DMA_SIXTEENTHBUFFERSIZE-1 ; n++)
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	3301      	adds	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	2bfe      	cmp	r3, #254	; 0xfe
 8003e70:	d9cb      	bls.n	8003e0a <ADC3_IN2_TKEO+0x12>
  }


  ADC3_IN2_Tkeo_bfr[0] = 0.0f;
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
  ADC3_IN2_Tkeo_bfr[ADC_DMA_SIXTEENTHBUFFERSIZE-1] = 0.0f;
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


  float32_t Tkeo_Sum_6 = 0.0f;
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t Tkeo_mean_6 =0.0f;
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
  float32_t Tkeo_Variance_6 = 0.0f;
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t Tkeo_SD_6 = 0.0f;
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  uint8_t Tkeo_flag_6 = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	74fb      	strb	r3, [r7, #19]

  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	e00e      	b.n	8003ec4 <ADC3_IN2_TKEO+0xcc>
  {
	Tkeo_Sum_6 += ADC3_IN2_Tkeo_bfr[h];
 8003ea6:	4a34      	ldr	r2, [pc, #208]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	edd3 7a00 	vldr	s15, [r3]
 8003eb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  for (uint32_t h=0; h<ADC_DMA_SIXTEENTHBUFFERSIZE; h++)
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	623b      	str	r3, [r7, #32]
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2bff      	cmp	r3, #255	; 0xff
 8003ec8:	d9ed      	bls.n	8003ea6 <ADC3_IN2_TKEO+0xae>
  }

  Tkeo_mean_6 = Tkeo_Sum_6 / ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003eca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ece:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003f7c <ADC3_IN2_TKEO+0x184>
 8003ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed6:	edc7 7a06 	vstr	s15, [r7, #24]


  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e018      	b.n	8003f12 <ADC3_IN2_TKEO+0x11a>
  {
  	float32_t Tkeo_Diff_6 = ADC3_IN2_Tkeo_bfr[q] - Tkeo_mean_6;
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <ADC3_IN2_TKEO+0x180>)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	ed93 7a00 	vldr	s14, [r3]
 8003eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef4:	edc7 7a03 	vstr	s15, [r7, #12]
  	Tkeo_Variance_6 += Tkeo_Diff_6 * Tkeo_Diff_6;
 8003ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003efc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f00:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint32_t  q=0; q<ADC_DMA_SIXTEENTHBUFFERSIZE; q++)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2bff      	cmp	r3, #255	; 0xff
 8003f16:	d9e3      	bls.n	8003ee0 <ADC3_IN2_TKEO+0xe8>
  }

  Tkeo_Variance_6 /= ADC_DMA_SIXTEENTHBUFFERSIZE;
 8003f18:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f1c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003f7c <ADC3_IN2_TKEO+0x184>
 8003f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  Tkeo_SD_6 = sqrt(Tkeo_Variance_6);
 8003f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f2a:	f7fc fad9 	bl	80004e0 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	ec43 2b10 	vmov	d0, r2, r3
 8003f36:	f006 febf 	bl	800acb8 <sqrt>
 8003f3a:	ec53 2b10 	vmov	r2, r3, d0
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	f7fc fdfd 	bl	8000b40 <__aeabi_d2f>
 8003f46:	4603      	mov	r3, r0
 8003f48:	617b      	str	r3, [r7, #20]

  if (Tkeo_SD_6 > 3 * StnDev_BL_6)
 8003f4a:	edd7 7a00 	vldr	s15, [r7]
 8003f4e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f56:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f62:	dd03      	ble.n	8003f6c <ADC3_IN2_TKEO+0x174>
  {
	  Tkeo_flag_6 = 1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	74fb      	strb	r3, [r7, #19]

	  return  Tkeo_flag_6;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	e000      	b.n	8003f6e <ADC3_IN2_TKEO+0x176>
  }

  else
  {
	  return 0;
 8003f6c:	2300      	movs	r3, #0
  }


}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3730      	adds	r7, #48	; 0x30
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	2000ccec 	.word	0x2000ccec
 8003f7c:	43800000 	.word	0x43800000

08003f80 <ADC1_DMA_sort_uhb>:
 */

#include "_DMA_Sort.h"

void ADC1_DMA_sort_uhb (void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e039      	b.n	8004000 <ADC1_DMA_sort_uhb+0x80>
	{
		if(m==0 || (m%2==0)) // Checks that the buffer register location is even and loads the data
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <ADC1_DMA_sort_uhb+0x1c>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d117      	bne.n	8003fcc <ADC1_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	e00f      	b.n	8003fc2 <ADC1_DMA_sort_uhb+0x42>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <ADC1_DMA_sort_uhb+0x98>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <ADC1_DMA_sort_uhb+0x98>)
 8003fa8:	6811      	ldr	r1, [r2, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)  // Stores data on the upper half of IN1 channel data buffer
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 8003fc8:	d9eb      	bls.n	8003fa2 <ADC1_DMA_sort_uhb+0x22>
 8003fca:	e016      	b.n	8003ffa <ADC1_DMA_sort_uhb+0x7a>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8003fcc:	2300      	movs	r3, #0
 8003fce:	607b      	str	r3, [r7, #4]
 8003fd0:	e00f      	b.n	8003ff2 <ADC1_DMA_sort_uhb+0x72>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <ADC1_DMA_sort_uhb+0x98>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a10      	ldr	r2, [pc, #64]	; (8004018 <ADC1_DMA_sort_uhb+0x98>)
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	68f9      	ldr	r1, [r7, #12]
 8003fdc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8003fe6:	3316      	adds	r3, #22
 8003fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)  // Stores data on the upper half of IN2 channel data buffer
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 8003ff8:	d9eb      	bls.n	8003fd2 <ADC1_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)  //Scans the upper half of the DMA buffer
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f240 52da 	movw	r2, #1498	; 0x5da
 8004006:	4293      	cmp	r3, r2
 8004008:	d9c0      	bls.n	8003f8c <ADC1_DMA_sort_uhb+0xc>
			}
		}
     }

};
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	2000d46c 	.word	0x2000d46c

0800401c <ADC1_DMA_sort_lhb>:


void ADC1_DMA_sort_lhb (void)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 8004022:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e03d      	b.n	80040a6 <ADC1_DMA_sort_lhb+0x8a>
	{
		if(m==0||(m%2==0)) // Checks that the buffer register location is even and loads the data
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d004      	beq.n	800403a <ADC1_DMA_sort_lhb+0x1e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d119      	bne.n	800406e <ADC1_DMA_sort_lhb+0x52>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800403a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	e00f      	b.n	8004062 <ADC1_DMA_sort_lhb+0x46>
			{
				ADC1_DMA_sort_ptr->ADC1_IN1_bfr[n]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8004042:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <ADC1_DMA_sort_lhb+0xa4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <ADC1_DMA_sort_lhb+0xa4>)
 8004048:	6811      	ldr	r1, [r2, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)  // Stores data on the lower half of IN1 channel data buffer
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	3301      	adds	r3, #1
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f240 52da 	movw	r2, #1498	; 0x5da
 8004068:	4293      	cmp	r3, r2
 800406a:	d9ea      	bls.n	8004042 <ADC1_DMA_sort_lhb+0x26>
 800406c:	e018      	b.n	80040a0 <ADC1_DMA_sort_lhb+0x84>
            }
        }
		else  // Checks that the buffer register location is odd and loads the data
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 800406e:	f240 23ee 	movw	r3, #750	; 0x2ee
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	e00f      	b.n	8004096 <ADC1_DMA_sort_lhb+0x7a>
			{
				ADC1_DMA_sort_ptr->ADC1_IN2_bfr[p]=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[m];
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <ADC1_DMA_sort_lhb+0xa4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <ADC1_DMA_sort_lhb+0xa4>)
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800408a:	3316      	adds	r3, #22
 800408c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)  // Stores data on the lower half of IN2 channel data buffer
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3301      	adds	r3, #1
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f240 52da 	movw	r2, #1498	; 0x5da
 800409c:	4293      	cmp	r3, r2
 800409e:	d9ea      	bls.n	8004076 <ADC1_DMA_sort_lhb+0x5a>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++) // Scans the lower half of the DMA buffer
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f640 32b6 	movw	r2, #2998	; 0xbb6
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d9bc      	bls.n	800402a <ADC1_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	2000d46c 	.word	0x2000d46c

080040c4 <ADC2_DMA_sort_uhb>:


void ADC2_DMA_sort_uhb (void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e039      	b.n	8004144 <ADC2_DMA_sort_uhb+0x80>
	{
		if(m==0 || (m%2==0))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <ADC2_DMA_sort_uhb+0x1c>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d117      	bne.n	8004110 <ADC2_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	e00f      	b.n	8004106 <ADC2_DMA_sort_uhb+0x42>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <ADC2_DMA_sort_uhb+0x98>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1c      	ldr	r2, [pc, #112]	; (800415c <ADC2_DMA_sort_uhb+0x98>)
 80040ec:	6811      	ldr	r1, [r2, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	3301      	adds	r3, #1
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 800410c:	d9eb      	bls.n	80040e6 <ADC2_DMA_sort_uhb+0x22>
 800410e:	e016      	b.n	800413e <ADC2_DMA_sort_uhb+0x7a>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004110:	2300      	movs	r3, #0
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	e00f      	b.n	8004136 <ADC2_DMA_sort_uhb+0x72>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <ADC2_DMA_sort_uhb+0x98>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <ADC2_DMA_sort_uhb+0x98>)
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800412a:	3316      	adds	r3, #22
 800412c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3301      	adds	r3, #1
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 800413c:	d9eb      	bls.n	8004116 <ADC2_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f240 52da 	movw	r2, #1498	; 0x5da
 800414a:	4293      	cmp	r3, r2
 800414c:	d9c0      	bls.n	80040d0 <ADC2_DMA_sort_uhb+0xc>
			}
		}
     }

};
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	2000d470 	.word	0x2000d470

08004160 <ADC2_DMA_sort_lhb>:


void ADC2_DMA_sort_lhb (void)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004166:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e03d      	b.n	80041ea <ADC2_DMA_sort_lhb+0x8a>
	{
		if(m==0||(m%2==0))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <ADC2_DMA_sort_lhb+0x1e>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d119      	bne.n	80041b2 <ADC2_DMA_sort_lhb+0x52>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 800417e:	f240 23ee 	movw	r3, #750	; 0x2ee
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	e00f      	b.n	80041a6 <ADC2_DMA_sort_lhb+0x46>
			{
				ADC2_DMA_sort_ptr->ADC2_IN3_bfr[n]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 8004186:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <ADC2_DMA_sort_lhb+0xa4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <ADC2_DMA_sort_lhb+0xa4>)
 800418c:	6811      	ldr	r1, [r2, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	3301      	adds	r3, #1
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f240 52da 	movw	r2, #1498	; 0x5da
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d9ea      	bls.n	8004186 <ADC2_DMA_sort_lhb+0x26>
 80041b0:	e018      	b.n	80041e4 <ADC2_DMA_sort_lhb+0x84>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80041b2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80041b6:	607b      	str	r3, [r7, #4]
 80041b8:	e00f      	b.n	80041da <ADC2_DMA_sort_lhb+0x7a>
			{
				ADC2_DMA_sort_ptr->ADC2_IN4_bfr[p]=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[m];
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <ADC2_DMA_sort_lhb+0xa4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a11      	ldr	r2, [pc, #68]	; (8004204 <ADC2_DMA_sort_lhb+0xa4>)
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 80041ce:	3316      	adds	r3, #22
 80041d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3301      	adds	r3, #1
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f240 52da 	movw	r2, #1498	; 0x5da
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d9ea      	bls.n	80041ba <ADC2_DMA_sort_lhb+0x5a>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f640 32b6 	movw	r2, #2998	; 0xbb6
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d9bc      	bls.n	800416e <ADC2_DMA_sort_lhb+0xe>
			}
		}
     }

};
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000d470 	.word	0x2000d470

08004208 <ADC3_DMA_sort_uhb>:


void ADC3_DMA_sort_uhb (void)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e039      	b.n	8004288 <ADC3_DMA_sort_uhb+0x80>
	{
		if(m==0 || (m%2==0))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <ADC3_DMA_sort_uhb+0x1c>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d117      	bne.n	8004254 <ADC3_DMA_sort_uhb+0x4c>
		{
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	e00f      	b.n	800424a <ADC3_DMA_sort_uhb+0x42>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 800422a:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <ADC3_DMA_sort_uhb+0x98>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <ADC3_DMA_sort_uhb+0x98>)
 8004230:	6811      	ldr	r1, [r2, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	605a      	str	r2, [r3, #4]
			for(uint32_t n=0; n<ADC_DMA_QUATERBUFFERSIZE-1; n++)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3301      	adds	r3, #1
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 8004250:	d9eb      	bls.n	800422a <ADC3_DMA_sort_uhb+0x22>
 8004252:	e016      	b.n	8004282 <ADC3_DMA_sort_uhb+0x7a>
            }
        }
		else
		{
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004254:	2300      	movs	r3, #0
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	e00f      	b.n	800427a <ADC3_DMA_sort_uhb+0x72>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <ADC3_DMA_sort_uhb+0x98>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <ADC3_DMA_sort_uhb+0x98>)
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800426e:	3316      	adds	r3, #22
 8004270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint32_t p=0; p<ADC_DMA_QUATERBUFFERSIZE-1; p++)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f5b3 7f3b 	cmp.w	r3, #748	; 0x2ec
 8004280:	d9eb      	bls.n	800425a <ADC3_DMA_sort_uhb+0x52>
	for(uint32_t m=0; m<ADC_DMA_HALFBUFFERSIZE-1; m++)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f240 52da 	movw	r2, #1498	; 0x5da
 800428e:	4293      	cmp	r3, r2
 8004290:	d9c0      	bls.n	8004214 <ADC3_DMA_sort_uhb+0xc>
			}
		}
     }

};
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	2000d474 	.word	0x2000d474

080042a4 <ADC3_DMA_sort_lhb>:


void ADC3_DMA_sort_lhb (void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 80042aa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e03d      	b.n	800432e <ADC3_DMA_sort_lhb+0x8a>
	{
		if(m==0||(m%2==0))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d004      	beq.n	80042c2 <ADC3_DMA_sort_lhb+0x1e>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d119      	bne.n	80042f6 <ADC3_DMA_sort_lhb+0x52>
		{
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80042c2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	e00f      	b.n	80042ea <ADC3_DMA_sort_lhb+0x46>
			{
				ADC3_DMA_sort_ptr->ADC3_IN1_bfr[n]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 80042ca:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <ADC3_DMA_sort_lhb+0xa4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <ADC3_DMA_sort_lhb+0xa4>)
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	605a      	str	r2, [r3, #4]
			for(uint32_t n=ADC_DMA_QUATERBUFFERSIZE; n<ADC_DMA_HALFBUFFERSIZE-1; n++)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3301      	adds	r3, #1
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f240 52da 	movw	r2, #1498	; 0x5da
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d9ea      	bls.n	80042ca <ADC3_DMA_sort_lhb+0x26>
 80042f4:	e018      	b.n	8004328 <ADC3_DMA_sort_lhb+0x84>
            }
        }
		else
		{
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 80042f6:	f240 23ee 	movw	r3, #750	; 0x2ee
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	e00f      	b.n	800431e <ADC3_DMA_sort_lhb+0x7a>
			{
				ADC3_DMA_sort_ptr->ADC3_IN2_bfr[p]=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[m];
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <ADC3_DMA_sort_lhb+0xa4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a11      	ldr	r2, [pc, #68]	; (8004348 <ADC3_DMA_sort_lhb+0xa4>)
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8004312:	3316      	adds	r3, #22
 8004314:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint32_t p=ADC_DMA_QUATERBUFFERSIZE; p<ADC_DMA_HALFBUFFERSIZE-1; p++)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3301      	adds	r3, #1
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f240 52da 	movw	r2, #1498	; 0x5da
 8004324:	4293      	cmp	r3, r2
 8004326:	d9ea      	bls.n	80042fe <ADC3_DMA_sort_lhb+0x5a>
	for(uint32_t m=ADC_DMA_HALFBUFFERSIZE; m<ADC_DMA_BUFFERSIZE-1; m++)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3301      	adds	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8004334:	4293      	cmp	r3, r2
 8004336:	d9bc      	bls.n	80042b2 <ADC3_DMA_sort_lhb+0xe>
			}
		}
     }

};
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	2000d474 	.word	0x2000d474

0800434c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b092      	sub	sp, #72	; 0x48
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004352:	f001 fb8c 	bl	8005a6e <HAL_Init>

  /* USER CODE BEGIN Init */
  init_ADC1_IN1_struct(); // Pointer to the source buffer is initialized at runtime
 8004356:	f7fd fd21 	bl	8001d9c <init_ADC1_IN1_struct>
  init_ADC1_IN1_FO_biquad_filter();  // Initializes the filter coefficients and variables
 800435a:	f7fd fd31 	bl	8001dc0 <init_ADC1_IN1_FO_biquad_filter>
  MA_ADC1_IN1_Init(&MovingAverage_ADC1_IN1); // Initializes all the output and moving average buffers to zero and the index to zero
 800435e:	48b4      	ldr	r0, [pc, #720]	; (8004630 <main+0x2e4>)
 8004360:	f7fd f944 	bl	80015ec <MA_ADC1_IN1_Init>

  init_ADC1_IN2_struct();
 8004364:	f7fd fd56 	bl	8001e14 <init_ADC1_IN2_struct>
  init_ADC1_IN2_FO_biquad_filter();
 8004368:	f7fd fd66 	bl	8001e38 <init_ADC1_IN2_FO_biquad_filter>
  MA_ADC1_IN2_Init(&MovingAverage_ADC1_IN2);
 800436c:	48b1      	ldr	r0, [pc, #708]	; (8004634 <main+0x2e8>)
 800436e:	f7fd f9e1 	bl	8001734 <MA_ADC1_IN2_Init>

  init_ADC2_IN3_struct();
 8004372:	f7fd fd8b 	bl	8001e8c <init_ADC2_IN3_struct>
  init_ADC2_IN3_FO_biquad_filter();
 8004376:	f7fd fd9b 	bl	8001eb0 <init_ADC2_IN3_FO_biquad_filter>
  MA_ADC2_IN3_Init(&MovingAverage_ADC2_IN3);
 800437a:	48af      	ldr	r0, [pc, #700]	; (8004638 <main+0x2ec>)
 800437c:	f7fd fa7e 	bl	800187c <MA_ADC2_IN3_Init>

  init_ADC2_IN4_struct();
 8004380:	f7fd fdc0 	bl	8001f04 <init_ADC2_IN4_struct>
  init_ADC2_IN4_FO_biquad_filter();
 8004384:	f7fd fdd0 	bl	8001f28 <init_ADC2_IN4_FO_biquad_filter>
  MA_ADC2_IN4_Init(&MovingAverage_ADC2_IN4);
 8004388:	48ac      	ldr	r0, [pc, #688]	; (800463c <main+0x2f0>)
 800438a:	f7fd fb1b 	bl	80019c4 <MA_ADC2_IN4_Init>

  init_ADC3_IN1_struct();
 800438e:	f7fd fdf5 	bl	8001f7c <init_ADC3_IN1_struct>
  init_ADC3_IN1_FO_biquad_filter();
 8004392:	f7fd fe05 	bl	8001fa0 <init_ADC3_IN1_FO_biquad_filter>
  MA_ADC3_IN1_Init(&MovingAverage_ADC3_IN1);
 8004396:	48aa      	ldr	r0, [pc, #680]	; (8004640 <main+0x2f4>)
 8004398:	f7fd fbb8 	bl	8001b0c <MA_ADC3_IN1_Init>

  init_ADC3_IN2_struct();
 800439c:	f7fd fe2a 	bl	8001ff4 <init_ADC3_IN2_struct>
  init_ADC3_IN2_FO_biquad_filter();
 80043a0:	f7fd fe3a 	bl	8002018 <init_ADC3_IN2_FO_biquad_filter>
  MA_ADC3_IN2_Init(&MovingAverage_ADC3_IN2);
 80043a4:	48a7      	ldr	r0, [pc, #668]	; (8004644 <main+0x2f8>)
 80043a6:	f7fd fc55 	bl	8001c54 <MA_ADC3_IN2_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043aa:	f000 fc85 	bl	8004cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043ae:	f000 ff61 	bl	8005274 <MX_GPIO_Init>
  MX_DMA_Init();
 80043b2:	f000 ff19 	bl	80051e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80043b6:	f000 fcc9 	bl	8004d4c <MX_ADC1_Init>
  MX_ADC2_Init();
 80043ba:	f000 fd51 	bl	8004e60 <MX_ADC2_Init>
  MX_ADC3_Init();
 80043be:	f000 fdc7 	bl	8004f50 <MX_ADC3_Init>
  MX_FMAC_Init();
 80043c2:	f000 fe3d 	bl	8005040 <MX_FMAC_Init>
  MX_TIM6_Init();
 80043c6:	f000 fe4f 	bl	8005068 <MX_TIM6_Init>
  MX_TIM7_Init();
 80043ca:	f000 fe83 	bl	80050d4 <MX_TIM7_Init>
  MX_TIM20_Init();
 80043ce:	f000 feb7 	bl	8005140 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	
  /* ADC1 is started using timer 6 triggered conversions */
  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim6);
    ADC_status=HAL_ADC_Start_DMA(&hadc1, ADC1_DMA_sort_ptr->ADC1_DMA_bfr, ADC_DMA_BUFFERSIZE);
 80043d2:	4b9d      	ldr	r3, [pc, #628]	; (8004648 <main+0x2fc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80043da:	4619      	mov	r1, r3
 80043dc:	489b      	ldr	r0, [pc, #620]	; (800464c <main+0x300>)
 80043de:	f001 ff83 	bl	80062e8 <HAL_ADC_Start_DMA>
 80043e2:	4603      	mov	r3, r0
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b9a      	ldr	r3, [pc, #616]	; (8004650 <main+0x304>)
 80043e8:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
    ADC_status=HAL_ADC_Start_DMA(&hadc2, ADC2_DMA_sort_ptr->ADC2_DMA_bfr, ADC_DMA_BUFFERSIZE);
 80043ea:	4b9a      	ldr	r3, [pc, #616]	; (8004654 <main+0x308>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80043f2:	4619      	mov	r1, r3
 80043f4:	4898      	ldr	r0, [pc, #608]	; (8004658 <main+0x30c>)
 80043f6:	f001 ff77 	bl	80062e8 <HAL_ADC_Start_DMA>
 80043fa:	4603      	mov	r3, r0
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b94      	ldr	r3, [pc, #592]	; (8004650 <main+0x304>)
 8004400:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim20);
    ADC_status=HAL_ADC_Start_DMA(&hadc3, ADC3_DMA_sort_ptr->ADC3_DMA_bfr, ADC_DMA_BUFFERSIZE);
 8004402:	4b96      	ldr	r3, [pc, #600]	; (800465c <main+0x310>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800440a:	4619      	mov	r1, r3
 800440c:	4894      	ldr	r0, [pc, #592]	; (8004660 <main+0x314>)
 800440e:	f001 ff6b 	bl	80062e8 <HAL_ADC_Start_DMA>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	4b8e      	ldr	r3, [pc, #568]	; (8004650 <main+0x304>)
 8004418:	701a      	strb	r2, [r3, #0]

/* Calculating the offset value and standard deviation for the base line signal for all the channels */
if(Offset_1_Calculated==0)
 800441a:	4b92      	ldr	r3, [pc, #584]	; (8004664 <main+0x318>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d13e      	bne.n	80044a0 <main+0x154>
{
  float32_t OffsetSum_1 = 0.0f;
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	647b      	str	r3, [r7, #68]	; 0x44
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e01a      	b.n	8004466 <main+0x11a>
    {
		/* Collects samples to fill the buffer */
		update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8004430:	f7fd fcd8 	bl	8001de4 <update_ADC1_IN1_FO_biquad_filter>
		MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1);  // Fill the buffer with ADC data
 8004434:	487e      	ldr	r0, [pc, #504]	; (8004630 <main+0x2e4>)
 8004436:	f7fd f90b 	bl	8001650 <MA_ADC1_IN1_Update>

		/* Calculate the offset from the filled buffer */
		Offset_1 = ADC1_IN1_OffsetCalc(&OffsetCalc_ADC1_IN1);
 800443a:	488b      	ldr	r0, [pc, #556]	; (8004668 <main+0x31c>)
 800443c:	f7fd fe16 	bl	800206c <ADC1_IN1_OffsetCalc>
 8004440:	eef0 7a40 	vmov.f32	s15, s0
 8004444:	4b89      	ldr	r3, [pc, #548]	; (800466c <main+0x320>)
 8004446:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_1 += Offset_1;
 800444a:	4b88      	ldr	r3, [pc, #544]	; (800466c <main+0x320>)
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004458:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 800445c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004460:	3301      	adds	r3, #1
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004466:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800446a:	2b13      	cmp	r3, #19
 800446c:	d9e0      	bls.n	8004430 <main+0xe4>
    }

  Offset_1 = OffsetSum_1 / NOOFITERATIONS_BL;
 800446e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004472:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004476:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800447a:	4b7c      	ldr	r3, [pc, #496]	; (800466c <main+0x320>)
 800447c:	edc3 7a00 	vstr	s15, [r3]
  Offset_1_Calculated = 1; // Set the flag indicating offset has been calculated
 8004480:	4b78      	ldr	r3, [pc, #480]	; (8004664 <main+0x318>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]

  SD_BL_1 = ADC1_IN1_SD_BL(&SD_BL_ADC1_IN1, Offset_1); // Calculated the standard deviation for the last buffer fill
 8004486:	4b79      	ldr	r3, [pc, #484]	; (800466c <main+0x320>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	eeb0 0a67 	vmov.f32	s0, s15
 8004490:	4877      	ldr	r0, [pc, #476]	; (8004670 <main+0x324>)
 8004492:	f7fd ff0b 	bl	80022ac <ADC1_IN1_SD_BL>
 8004496:	eef0 7a40 	vmov.f32	s15, s0
 800449a:	4b76      	ldr	r3, [pc, #472]	; (8004674 <main+0x328>)
 800449c:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_2_Calculated==0)
 80044a0:	4b75      	ldr	r3, [pc, #468]	; (8004678 <main+0x32c>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d13b      	bne.n	8004520 <main+0x1d4>
{
  float32_t OffsetSum_2;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ae:	e01a      	b.n	80044e6 <main+0x19a>
    {

		update_ADC1_IN2_FO_biquad_filter();
 80044b0:	f7fd fcd4 	bl	8001e5c <update_ADC1_IN2_FO_biquad_filter>
		MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 80044b4:	485f      	ldr	r0, [pc, #380]	; (8004634 <main+0x2e8>)
 80044b6:	f7fd f96f 	bl	8001798 <MA_ADC1_IN2_Update>


		Offset_2 = ADC1_IN2_OffsetCalc(&OffsetCalc_ADC1_IN2);
 80044ba:	4870      	ldr	r0, [pc, #448]	; (800467c <main+0x330>)
 80044bc:	f7fd fe06 	bl	80020cc <ADC1_IN2_OffsetCalc>
 80044c0:	eef0 7a40 	vmov.f32	s15, s0
 80044c4:	4b6e      	ldr	r3, [pc, #440]	; (8004680 <main+0x334>)
 80044c6:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_2 += Offset_2;
 80044ca:	4b6d      	ldr	r3, [pc, #436]	; (8004680 <main+0x334>)
 80044cc:	edd3 7a00 	vldr	s15, [r3]
 80044d0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80044d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80044dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80044e0:	3301      	adds	r3, #1
 80044e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80044ea:	2b13      	cmp	r3, #19
 80044ec:	d9e0      	bls.n	80044b0 <main+0x164>
    }

  Offset_2 = OffsetSum_2 / NOOFITERATIONS_BL;
 80044ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80044f2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80044f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044fa:	4b61      	ldr	r3, [pc, #388]	; (8004680 <main+0x334>)
 80044fc:	edc3 7a00 	vstr	s15, [r3]
  Offset_2_Calculated = 1;
 8004500:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <main+0x32c>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]

  SD_BL_2 = ADC1_IN2_SD_BL(&SD_BL_ADC1_IN2, Offset_2);
 8004506:	4b5e      	ldr	r3, [pc, #376]	; (8004680 <main+0x334>)
 8004508:	edd3 7a00 	vldr	s15, [r3]
 800450c:	eeb0 0a67 	vmov.f32	s0, s15
 8004510:	485c      	ldr	r0, [pc, #368]	; (8004684 <main+0x338>)
 8004512:	f7fd ff17 	bl	8002344 <ADC1_IN2_SD_BL>
 8004516:	eef0 7a40 	vmov.f32	s15, s0
 800451a:	4b5b      	ldr	r3, [pc, #364]	; (8004688 <main+0x33c>)
 800451c:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_3_Calculated==0)
 8004520:	4b5a      	ldr	r3, [pc, #360]	; (800468c <main+0x340>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d13b      	bne.n	80045a0 <main+0x254>
{
  float32_t OffsetSum_3;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452e:	e01a      	b.n	8004566 <main+0x21a>
    {

		update_ADC2_IN3_FO_biquad_filter();
 8004530:	f7fd fcd0 	bl	8001ed4 <update_ADC2_IN3_FO_biquad_filter>
		MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 8004534:	4840      	ldr	r0, [pc, #256]	; (8004638 <main+0x2ec>)
 8004536:	f7fd f9d3 	bl	80018e0 <MA_ADC2_IN3_Update>


		Offset_3 = ADC2_IN3_OffsetCalc(&OffsetCalc_ADC2_IN3);
 800453a:	4855      	ldr	r0, [pc, #340]	; (8004690 <main+0x344>)
 800453c:	f7fd fdf6 	bl	800212c <ADC2_IN3_OffsetCalc>
 8004540:	eef0 7a40 	vmov.f32	s15, s0
 8004544:	4b53      	ldr	r3, [pc, #332]	; (8004694 <main+0x348>)
 8004546:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_3 += Offset_3;
 800454a:	4b52      	ldr	r3, [pc, #328]	; (8004694 <main+0x348>)
 800454c:	edd3 7a00 	vldr	s15, [r3]
 8004550:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004558:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 800455c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004560:	3301      	adds	r3, #1
 8004562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800456a:	2b13      	cmp	r3, #19
 800456c:	d9e0      	bls.n	8004530 <main+0x1e4>
    }

  Offset_3 = OffsetSum_3 / NOOFITERATIONS_BL;
 800456e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004572:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457a:	4b46      	ldr	r3, [pc, #280]	; (8004694 <main+0x348>)
 800457c:	edc3 7a00 	vstr	s15, [r3]
  Offset_3_Calculated = 1;
 8004580:	4b42      	ldr	r3, [pc, #264]	; (800468c <main+0x340>)
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]

  SD_BL_3 = ADC2_IN3_SD_BL(&SD_BL_ADC2_IN3, Offset_3);
 8004586:	4b43      	ldr	r3, [pc, #268]	; (8004694 <main+0x348>)
 8004588:	edd3 7a00 	vldr	s15, [r3]
 800458c:	eeb0 0a67 	vmov.f32	s0, s15
 8004590:	4841      	ldr	r0, [pc, #260]	; (8004698 <main+0x34c>)
 8004592:	f7fd ff23 	bl	80023dc <ADC2_IN3_SD_BL>
 8004596:	eef0 7a40 	vmov.f32	s15, s0
 800459a:	4b40      	ldr	r3, [pc, #256]	; (800469c <main+0x350>)
 800459c:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_4_Calculated==0)
 80045a0:	4b3f      	ldr	r3, [pc, #252]	; (80046a0 <main+0x354>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d13b      	bne.n	8004620 <main+0x2d4>
{
  float32_t OffsetSum_4;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ae:	e01a      	b.n	80045e6 <main+0x29a>
    {

		update_ADC2_IN4_FO_biquad_filter();
 80045b0:	f7fd fccc 	bl	8001f4c <update_ADC2_IN4_FO_biquad_filter>
		MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 80045b4:	4821      	ldr	r0, [pc, #132]	; (800463c <main+0x2f0>)
 80045b6:	f7fd fa37 	bl	8001a28 <MA_ADC2_IN4_Update>


		Offset_4 = ADC2_IN4_OffsetCalc(&OffsetCalc_ADC2_IN4);
 80045ba:	483a      	ldr	r0, [pc, #232]	; (80046a4 <main+0x358>)
 80045bc:	f7fd fde6 	bl	800218c <ADC2_IN4_OffsetCalc>
 80045c0:	eef0 7a40 	vmov.f32	s15, s0
 80045c4:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <main+0x35c>)
 80045c6:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_4 += Offset_4;
 80045ca:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <main+0x35c>)
 80045cc:	edd3 7a00 	vldr	s15, [r3]
 80045d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 80045dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045e0:	3301      	adds	r3, #1
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045ea:	2b13      	cmp	r3, #19
 80045ec:	d9e0      	bls.n	80045b0 <main+0x264>
    }

  Offset_4 = OffsetSum_4 / NOOFITERATIONS_BL;
 80045ee:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80045f2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80045f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045fa:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <main+0x35c>)
 80045fc:	edc3 7a00 	vstr	s15, [r3]
  Offset_4_Calculated = 1;
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <main+0x354>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]

  SD_BL_4 = ADC2_IN4_SD_BL(&SD_BL_ADC2_IN4, Offset_4);
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <main+0x35c>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	eeb0 0a67 	vmov.f32	s0, s15
 8004610:	4826      	ldr	r0, [pc, #152]	; (80046ac <main+0x360>)
 8004612:	f7fd ff2f 	bl	8002474 <ADC2_IN4_SD_BL>
 8004616:	eef0 7a40 	vmov.f32	s15, s0
 800461a:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <main+0x364>)
 800461c:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_5_Calculated==0)
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <main+0x368>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d17f      	bne.n	8004728 <main+0x3dc>
{
  float32_t OffsetSum_5;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 8004628:	2300      	movs	r3, #0
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462e:	e05e      	b.n	80046ee <main+0x3a2>
 8004630:	2000d478 	.word	0x2000d478
 8004634:	2000d89c 	.word	0x2000d89c
 8004638:	2000dcc0 	.word	0x2000dcc0
 800463c:	2000e0e4 	.word	0x2000e0e4
 8004640:	2000e508 	.word	0x2000e508
 8004644:	2000e92c 	.word	0x2000e92c
 8004648:	2000d46c 	.word	0x2000d46c
 800464c:	2000d0ec 	.word	0x2000d0ec
 8004650:	2001b1b8 	.word	0x2001b1b8
 8004654:	2000d470 	.word	0x2000d470
 8004658:	2000d158 	.word	0x2000d158
 800465c:	2000d474 	.word	0x2000d474
 8004660:	2000d1c4 	.word	0x2000d1c4
 8004664:	2001b1d4 	.word	0x2001b1d4
 8004668:	2000ed50 	.word	0x2000ed50
 800466c:	2001b1bc 	.word	0x2001b1bc
 8004670:	20010628 	.word	0x20010628
 8004674:	2001b1dc 	.word	0x2001b1dc
 8004678:	2001b1d5 	.word	0x2001b1d5
 800467c:	2000f174 	.word	0x2000f174
 8004680:	2001b1c0 	.word	0x2001b1c0
 8004684:	20010a4c 	.word	0x20010a4c
 8004688:	2001b1e0 	.word	0x2001b1e0
 800468c:	2001b1d6 	.word	0x2001b1d6
 8004690:	2000f598 	.word	0x2000f598
 8004694:	2001b1c4 	.word	0x2001b1c4
 8004698:	20010e70 	.word	0x20010e70
 800469c:	2001b1e4 	.word	0x2001b1e4
 80046a0:	2001b1d7 	.word	0x2001b1d7
 80046a4:	2000f9bc 	.word	0x2000f9bc
 80046a8:	2001b1c8 	.word	0x2001b1c8
 80046ac:	20011294 	.word	0x20011294
 80046b0:	2001b1e8 	.word	0x2001b1e8
 80046b4:	2001b1d8 	.word	0x2001b1d8
    {
		/* Collects samples to fill the buffer */
		update_ADC3_IN1_FO_biquad_filter();  // Notch filters channel 1 data
 80046b8:	f7fd fc84 	bl	8001fc4 <update_ADC3_IN1_FO_biquad_filter>
		MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);  // Fill the buffer with ADC data
 80046bc:	48b7      	ldr	r0, [pc, #732]	; (800499c <main+0x650>)
 80046be:	f7fd fa57 	bl	8001b70 <MA_ADC3_IN1_Update>

		/* Calculate the offset from the filled buffer */
		Offset_1 = ADC3_IN1_OffsetCalc(&OffsetCalc_ADC3_IN1);
 80046c2:	48b7      	ldr	r0, [pc, #732]	; (80049a0 <main+0x654>)
 80046c4:	f7fd fd92 	bl	80021ec <ADC3_IN1_OffsetCalc>
 80046c8:	eef0 7a40 	vmov.f32	s15, s0
 80046cc:	4bb5      	ldr	r3, [pc, #724]	; (80049a4 <main+0x658>)
 80046ce:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_5 += Offset_5;
 80046d2:	4bb5      	ldr	r3, [pc, #724]	; (80049a8 <main+0x65c>)
 80046d4:	edd3 7a00 	vldr	s15, [r3]
 80046d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80046dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++) // Calculates the mean and standard deviation for the baseline of the signal for the first n buffer fills where n= NOOFITERATIONS_BL
 80046e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e8:	3301      	adds	r3, #1
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046f2:	2b13      	cmp	r3, #19
 80046f4:	d9e0      	bls.n	80046b8 <main+0x36c>
    }

  Offset_5 = OffsetSum_5 / NOOFITERATIONS_BL;
 80046f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80046fa:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80046fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004702:	4ba9      	ldr	r3, [pc, #676]	; (80049a8 <main+0x65c>)
 8004704:	edc3 7a00 	vstr	s15, [r3]
  Offset_5_Calculated = 1; // Set the flag indicating offset has been calculated
 8004708:	4ba8      	ldr	r3, [pc, #672]	; (80049ac <main+0x660>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]

  SD_BL_5 = ADC3_IN1_SD_BL(&SD_BL_ADC3_IN1, Offset_5);
 800470e:	4ba6      	ldr	r3, [pc, #664]	; (80049a8 <main+0x65c>)
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	eeb0 0a67 	vmov.f32	s0, s15
 8004718:	48a5      	ldr	r0, [pc, #660]	; (80049b0 <main+0x664>)
 800471a:	f7fd fef7 	bl	800250c <ADC3_IN1_SD_BL>
 800471e:	eef0 7a40 	vmov.f32	s15, s0
 8004722:	4ba4      	ldr	r3, [pc, #656]	; (80049b4 <main+0x668>)
 8004724:	edc3 7a00 	vstr	s15, [r3]
}


if(Offset_6_Calculated==0)
 8004728:	4ba3      	ldr	r3, [pc, #652]	; (80049b8 <main+0x66c>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d137      	bne.n	80047a0 <main+0x454>
{
  float32_t OffsetSum_6;
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8004730:	2300      	movs	r3, #0
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	e018      	b.n	8004768 <main+0x41c>
    {

		update_ADC3_IN2_FO_biquad_filter();
 8004736:	f7fd fc81 	bl	800203c <update_ADC3_IN2_FO_biquad_filter>
		MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2);
 800473a:	48a0      	ldr	r0, [pc, #640]	; (80049bc <main+0x670>)
 800473c:	f7fd fabc 	bl	8001cb8 <MA_ADC3_IN2_Update>


		Offset_6 = ADC3_IN2_OffsetCalc(&OffsetCalc_ADC3_IN2);
 8004740:	489f      	ldr	r0, [pc, #636]	; (80049c0 <main+0x674>)
 8004742:	f7fd fd83 	bl	800224c <ADC3_IN2_OffsetCalc>
 8004746:	eef0 7a40 	vmov.f32	s15, s0
 800474a:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <main+0x678>)
 800474c:	edc3 7a00 	vstr	s15, [r3]
		OffsetSum_6 += Offset_6;
 8004750:	4b9c      	ldr	r3, [pc, #624]	; (80049c4 <main+0x678>)
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	ed97 7a07 	vldr	s14, [r7, #28]
 800475a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
  for (uint8_t a=0; a< NOOFITERATIONS_BL; a++)
 8004762:	7efb      	ldrb	r3, [r7, #27]
 8004764:	3301      	adds	r3, #1
 8004766:	76fb      	strb	r3, [r7, #27]
 8004768:	7efb      	ldrb	r3, [r7, #27]
 800476a:	2b13      	cmp	r3, #19
 800476c:	d9e3      	bls.n	8004736 <main+0x3ea>
    }

  Offset_6 = OffsetSum_6 / NOOFITERATIONS_BL;
 800476e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004772:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800477a:	4b92      	ldr	r3, [pc, #584]	; (80049c4 <main+0x678>)
 800477c:	edc3 7a00 	vstr	s15, [r3]
  Offset_6_Calculated = 1;
 8004780:	4b8d      	ldr	r3, [pc, #564]	; (80049b8 <main+0x66c>)
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]

  SD_BL_6 = ADC3_IN2_SD_BL(&SD_BL_ADC3_IN2, Offset_6);
 8004786:	4b8f      	ldr	r3, [pc, #572]	; (80049c4 <main+0x678>)
 8004788:	edd3 7a00 	vldr	s15, [r3]
 800478c:	eeb0 0a67 	vmov.f32	s0, s15
 8004790:	488d      	ldr	r0, [pc, #564]	; (80049c8 <main+0x67c>)
 8004792:	f7fd ff07 	bl	80025a4 <ADC3_IN2_SD_BL>
 8004796:	eef0 7a40 	vmov.f32	s15, s0
 800479a:	4b8c      	ldr	r3, [pc, #560]	; (80049cc <main+0x680>)
 800479c:	edc3 7a00 	vstr	s15, [r3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* DSP SECTION */
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 80047a0:	f7fd fb20 	bl	8001de4 <update_ADC1_IN1_FO_biquad_filter>
	  MA_ADC1_IN1_Update(&MovingAverage_ADC1_IN1); // Performs the moving average
 80047a4:	488a      	ldr	r0, [pc, #552]	; (80049d0 <main+0x684>)
 80047a6:	f7fc ff53 	bl	8001650 <MA_ADC1_IN1_Update>
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e017      	b.n	80047e0 <main+0x494>
	  {
		  MovingAverage_ADC1_IN1.MA_ADC1_IN1_OutBfr[y]  -= Offset_1; // Subtract the stored offset
 80047b0:	4a87      	ldr	r2, [pc, #540]	; (80049d0 <main+0x684>)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	3308      	adds	r3, #8
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	3304      	adds	r3, #4
 80047bc:	ed93 7a00 	vldr	s14, [r3]
 80047c0:	4b78      	ldr	r3, [pc, #480]	; (80049a4 <main+0x658>)
 80047c2:	edd3 7a00 	vldr	s15, [r3]
 80047c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ca:	4a81      	ldr	r2, [pc, #516]	; (80049d0 <main+0x684>)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3308      	adds	r3, #8
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	3304      	adds	r3, #4
 80047d6:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t y = 0; y < ADC_DMA_SIXTEENTHBUFFERSIZE; y++)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	3301      	adds	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2bff      	cmp	r3, #255	; 0xff
 80047e4:	d9e4      	bls.n	80047b0 <main+0x464>
	  }
	  /* FEATURE EXCTRACTION SECTION */
      TKEO_1 = ADC1_IN1_TKEO(&TKEO_ADC1_IN1, SD_BL_1); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 80047e6:	4b7b      	ldr	r3, [pc, #492]	; (80049d4 <main+0x688>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	eeb0 0a67 	vmov.f32	s0, s15
 80047f0:	4879      	ldr	r0, [pc, #484]	; (80049d8 <main+0x68c>)
 80047f2:	f7fe ff2d 	bl	8003650 <ADC1_IN1_TKEO>
 80047f6:	4603      	mov	r3, r0
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b78      	ldr	r3, [pc, #480]	; (80049dc <main+0x690>)
 80047fc:	701a      	strb	r2, [r3, #0]

      if(TKEO_1 == 1) // Only runs when there is muscle activation.
 80047fe:	4b77      	ldr	r3, [pc, #476]	; (80049dc <main+0x690>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d11e      	bne.n	8004844 <main+0x4f8>
      {
      /*Slope sign change*/
      SSC_1 = ADC1_IN1_SSC(&SSC_ADC1_IN1, 0.5 * Offset_1); // Calculates slope sign changes for active segments
 8004806:	4b67      	ldr	r3, [pc, #412]	; (80049a4 <main+0x658>)
 8004808:	edd3 7a00 	vldr	s15, [r3]
 800480c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004814:	eeb0 0a67 	vmov.f32	s0, s15
 8004818:	4871      	ldr	r0, [pc, #452]	; (80049e0 <main+0x694>)
 800481a:	f7fd ff0f 	bl	800263c <ADC1_IN1_SSC>
 800481e:	eef0 7a40 	vmov.f32	s15, s0
 8004822:	4b70      	ldr	r3, [pc, #448]	; (80049e4 <main+0x698>)
 8004824:	edc3 7a00 	vstr	s15, [r3]
      /*Computes the autocorrelation values and the autoregression coefficients and returns the latter*/
      ADC1_IN1_autocorr_calc();
 8004828:	f7fc f9da 	bl	8000be0 <ADC1_IN1_autocorr_calc>
      AR_1 = ADC1_IN1_autoreg_coeffs();
 800482c:	f7fc fa0e 	bl	8000c4c <ADC1_IN1_autoreg_coeffs>
 8004830:	4603      	mov	r3, r0
 8004832:	4a6d      	ldr	r2, [pc, #436]	; (80049e8 <main+0x69c>)
 8004834:	6013      	str	r3, [r2, #0]
      /* Computes the short time Fourier transform from the moving average buffer */
      STFT_1 = ADC1_IN1_STFT_Update(&STFT_par_ADC1_IN1, &STFT_ADC1_IN1);
 8004836:	496d      	ldr	r1, [pc, #436]	; (80049ec <main+0x6a0>)
 8004838:	486d      	ldr	r0, [pc, #436]	; (80049f0 <main+0x6a4>)
 800483a:	f7fe f999 	bl	8002b70 <ADC1_IN1_STFT_Update>
 800483e:	4603      	mov	r3, r0
 8004840:	4a6c      	ldr	r2, [pc, #432]	; (80049f4 <main+0x6a8>)
 8004842:	6013      	str	r3, [r2, #0]
      }


	  update_ADC1_IN2_FO_biquad_filter();
 8004844:	f7fd fb0a 	bl	8001e5c <update_ADC1_IN2_FO_biquad_filter>
	  MA_ADC1_IN2_Update(&MovingAverage_ADC1_IN2);
 8004848:	486b      	ldr	r0, [pc, #428]	; (80049f8 <main+0x6ac>)
 800484a:	f7fc ffa5 	bl	8001798 <MA_ADC1_IN2_Update>
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e017      	b.n	8004884 <main+0x538>
	  {
		  MovingAverage_ADC1_IN2.MA_ADC1_IN2_OutBfr[z]  -= Offset_2;
 8004854:	4a68      	ldr	r2, [pc, #416]	; (80049f8 <main+0x6ac>)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3308      	adds	r3, #8
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	3304      	adds	r3, #4
 8004860:	ed93 7a00 	vldr	s14, [r3]
 8004864:	4b65      	ldr	r3, [pc, #404]	; (80049fc <main+0x6b0>)
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800486e:	4a62      	ldr	r2, [pc, #392]	; (80049f8 <main+0x6ac>)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	3308      	adds	r3, #8
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	3304      	adds	r3, #4
 800487a:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t z = 0; z < ADC_DMA_SIXTEENTHBUFFERSIZE; z++)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3301      	adds	r3, #1
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2bff      	cmp	r3, #255	; 0xff
 8004888:	d9e4      	bls.n	8004854 <main+0x508>
	  }
	  TKEO_2 = ADC1_IN2_TKEO(&TKEO_ADC1_IN2, SD_BL_2);
 800488a:	4b5d      	ldr	r3, [pc, #372]	; (8004a00 <main+0x6b4>)
 800488c:	edd3 7a00 	vldr	s15, [r3]
 8004890:	eeb0 0a67 	vmov.f32	s0, s15
 8004894:	485b      	ldr	r0, [pc, #364]	; (8004a04 <main+0x6b8>)
 8004896:	f7fe ff9f 	bl	80037d8 <ADC1_IN2_TKEO>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	4b5a      	ldr	r3, [pc, #360]	; (8004a08 <main+0x6bc>)
 80048a0:	701a      	strb	r2, [r3, #0]

	  if(TKEO_2 == 1)
 80048a2:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <main+0x6bc>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d11e      	bne.n	80048e8 <main+0x59c>
	  {
	  SSC_2 = ADC1_IN2_SSC(&SSC_ADC1_IN2, 0.5 * Offset_2);
 80048aa:	4b54      	ldr	r3, [pc, #336]	; (80049fc <main+0x6b0>)
 80048ac:	edd3 7a00 	vldr	s15, [r3]
 80048b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048b8:	eeb0 0a67 	vmov.f32	s0, s15
 80048bc:	4853      	ldr	r0, [pc, #332]	; (8004a0c <main+0x6c0>)
 80048be:	f7fd ff2c 	bl	800271a <ADC1_IN2_SSC>
 80048c2:	eef0 7a40 	vmov.f32	s15, s0
 80048c6:	4b52      	ldr	r3, [pc, #328]	; (8004a10 <main+0x6c4>)
 80048c8:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_IN2_autocorr_calc();
 80048cc:	f7fc fa5e 	bl	8000d8c <ADC1_IN2_autocorr_calc>
	  AR_2 = ADC1_IN2_autoreg_coeffs();
 80048d0:	f7fc fa92 	bl	8000df8 <ADC1_IN2_autoreg_coeffs>
 80048d4:	4603      	mov	r3, r0
 80048d6:	4a4f      	ldr	r2, [pc, #316]	; (8004a14 <main+0x6c8>)
 80048d8:	6013      	str	r3, [r2, #0]
	  STFT_2 = ADC1_IN2_STFT_Update(&STFT_par_ADC1_IN2, &STFT_ADC1_IN2);
 80048da:	494f      	ldr	r1, [pc, #316]	; (8004a18 <main+0x6cc>)
 80048dc:	484f      	ldr	r0, [pc, #316]	; (8004a1c <main+0x6d0>)
 80048de:	f7fe fa2f 	bl	8002d40 <ADC1_IN2_STFT_Update>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4a4e      	ldr	r2, [pc, #312]	; (8004a20 <main+0x6d4>)
 80048e6:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN3_FO_biquad_filter();
 80048e8:	f7fd faf4 	bl	8001ed4 <update_ADC2_IN3_FO_biquad_filter>
	  MA_ADC2_IN3_Update(&MovingAverage_ADC2_IN3);
 80048ec:	484d      	ldr	r0, [pc, #308]	; (8004a24 <main+0x6d8>)
 80048ee:	f7fc fff7 	bl	80018e0 <MA_ADC2_IN3_Update>
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e017      	b.n	8004928 <main+0x5dc>
	  {
		  MovingAverage_ADC2_IN3.MA_ADC2_IN3_OutBfr[g]  -= Offset_3;
 80048f8:	4a4a      	ldr	r2, [pc, #296]	; (8004a24 <main+0x6d8>)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3308      	adds	r3, #8
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	3304      	adds	r3, #4
 8004904:	ed93 7a00 	vldr	s14, [r3]
 8004908:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <main+0x6dc>)
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004912:	4a44      	ldr	r2, [pc, #272]	; (8004a24 <main+0x6d8>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3308      	adds	r3, #8
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t g = 0; g <ADC_DMA_SIXTEENTHBUFFERSIZE; g++)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3301      	adds	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2bff      	cmp	r3, #255	; 0xff
 800492c:	d9e4      	bls.n	80048f8 <main+0x5ac>
	  }
	  TKEO_3 = ADC2_IN3_TKEO(&TKEO_ADC2_IN3, SD_BL_3);
 800492e:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <main+0x6e0>)
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	eeb0 0a67 	vmov.f32	s0, s15
 8004938:	483d      	ldr	r0, [pc, #244]	; (8004a30 <main+0x6e4>)
 800493a:	f7ff f811 	bl	8003960 <ADC2_IN3_TKEO>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <main+0x6e8>)
 8004944:	701a      	strb	r2, [r3, #0]

	  if(TKEO_3 == 1)
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <main+0x6e8>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d11e      	bne.n	800498c <main+0x640>
	  {
	  SSC_3 = ADC2_IN3_SSC(&SSC_ADC2_IN3, 0.5 * Offset_3);
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <main+0x6dc>)
 8004950:	edd3 7a00 	vldr	s15, [r3]
 8004954:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800495c:	eeb0 0a67 	vmov.f32	s0, s15
 8004960:	4835      	ldr	r0, [pc, #212]	; (8004a38 <main+0x6ec>)
 8004962:	f7fd ff49 	bl	80027f8 <ADC2_IN3_SSC>
 8004966:	eef0 7a40 	vmov.f32	s15, s0
 800496a:	4b34      	ldr	r3, [pc, #208]	; (8004a3c <main+0x6f0>)
 800496c:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN3_autocorr_calc();
 8004970:	f7fc fae2 	bl	8000f38 <ADC2_IN3_autocorr_calc>
	  AR_3 = ADC2_IN3_autoreg_coeffs();
 8004974:	f7fc fb16 	bl	8000fa4 <ADC2_IN3_autoreg_coeffs>
 8004978:	4603      	mov	r3, r0
 800497a:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <main+0x6f4>)
 800497c:	6013      	str	r3, [r2, #0]
	  STFT_3 = ADC2_IN3_STFT_Update(&STFT_par_ADC2_IN3, &STFT_ADC2_IN3);
 800497e:	4931      	ldr	r1, [pc, #196]	; (8004a44 <main+0x6f8>)
 8004980:	4831      	ldr	r0, [pc, #196]	; (8004a48 <main+0x6fc>)
 8004982:	f7fe fac5 	bl	8002f10 <ADC2_IN3_STFT_Update>
 8004986:	4603      	mov	r3, r0
 8004988:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <main+0x700>)
 800498a:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC2_IN4_FO_biquad_filter();
 800498c:	f7fd fade 	bl	8001f4c <update_ADC2_IN4_FO_biquad_filter>
	  MA_ADC2_IN4_Update(&MovingAverage_ADC2_IN4);
 8004990:	482f      	ldr	r0, [pc, #188]	; (8004a50 <main+0x704>)
 8004992:	f7fd f849 	bl	8001a28 <MA_ADC2_IN4_Update>
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	e073      	b.n	8004a84 <main+0x738>
 800499c:	2000e508 	.word	0x2000e508
 80049a0:	2000fde0 	.word	0x2000fde0
 80049a4:	2001b1bc 	.word	0x2001b1bc
 80049a8:	2001b1cc 	.word	0x2001b1cc
 80049ac:	2001b1d8 	.word	0x2001b1d8
 80049b0:	200116b8 	.word	0x200116b8
 80049b4:	2001b1ec 	.word	0x2001b1ec
 80049b8:	2001b1d9 	.word	0x2001b1d9
 80049bc:	2000e92c 	.word	0x2000e92c
 80049c0:	20010204 	.word	0x20010204
 80049c4:	2001b1d0 	.word	0x2001b1d0
 80049c8:	20011adc 	.word	0x20011adc
 80049cc:	2001b1f0 	.word	0x2001b1f0
 80049d0:	2000d478 	.word	0x2000d478
 80049d4:	2001b1dc 	.word	0x2001b1dc
 80049d8:	20011f00 	.word	0x20011f00
 80049dc:	2001b1f4 	.word	0x2001b1f4
 80049e0:	200137d8 	.word	0x200137d8
 80049e4:	2001b1fc 	.word	0x2001b1fc
 80049e8:	2001b214 	.word	0x2001b214
 80049ec:	200150b0 	.word	0x200150b0
 80049f0:	20016988 	.word	0x20016988
 80049f4:	2001b22c 	.word	0x2001b22c
 80049f8:	2000d89c 	.word	0x2000d89c
 80049fc:	2001b1c0 	.word	0x2001b1c0
 8004a00:	2001b1e0 	.word	0x2001b1e0
 8004a04:	20012324 	.word	0x20012324
 8004a08:	2001b1f5 	.word	0x2001b1f5
 8004a0c:	20013bfc 	.word	0x20013bfc
 8004a10:	2001b200 	.word	0x2001b200
 8004a14:	2001b218 	.word	0x2001b218
 8004a18:	200154d4 	.word	0x200154d4
 8004a1c:	20017590 	.word	0x20017590
 8004a20:	2001b230 	.word	0x2001b230
 8004a24:	2000dcc0 	.word	0x2000dcc0
 8004a28:	2001b1c4 	.word	0x2001b1c4
 8004a2c:	2001b1e4 	.word	0x2001b1e4
 8004a30:	20012748 	.word	0x20012748
 8004a34:	2001b1f6 	.word	0x2001b1f6
 8004a38:	20014020 	.word	0x20014020
 8004a3c:	2001b204 	.word	0x2001b204
 8004a40:	2001b21c 	.word	0x2001b21c
 8004a44:	200158f8 	.word	0x200158f8
 8004a48:	20018198 	.word	0x20018198
 8004a4c:	2001b234 	.word	0x2001b234
 8004a50:	2000e0e4 	.word	0x2000e0e4
	  {
		  MovingAverage_ADC2_IN4.MA_ADC2_IN4_OutBfr[e]  -= Offset_4;
 8004a54:	4a77      	ldr	r2, [pc, #476]	; (8004c34 <main+0x8e8>)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3304      	adds	r3, #4
 8004a60:	ed93 7a00 	vldr	s14, [r3]
 8004a64:	4b74      	ldr	r3, [pc, #464]	; (8004c38 <main+0x8ec>)
 8004a66:	edd3 7a00 	vldr	s15, [r3]
 8004a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a6e:	4a71      	ldr	r2, [pc, #452]	; (8004c34 <main+0x8e8>)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3308      	adds	r3, #8
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t e = 0; e < ADC_DMA_SIXTEENTHBUFFERSIZE; e++)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2bff      	cmp	r3, #255	; 0xff
 8004a88:	d9e4      	bls.n	8004a54 <main+0x708>
	  }
	  TKEO_4 = ADC2_IN4_TKEO(&TKEO_ADC2_IN4, SD_BL_4);
 8004a8a:	4b6c      	ldr	r3, [pc, #432]	; (8004c3c <main+0x8f0>)
 8004a8c:	edd3 7a00 	vldr	s15, [r3]
 8004a90:	eeb0 0a67 	vmov.f32	s0, s15
 8004a94:	486a      	ldr	r0, [pc, #424]	; (8004c40 <main+0x8f4>)
 8004a96:	f7ff f827 	bl	8003ae8 <ADC2_IN4_TKEO>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b69      	ldr	r3, [pc, #420]	; (8004c44 <main+0x8f8>)
 8004aa0:	701a      	strb	r2, [r3, #0]

	  if(TKEO_4 == 1)
 8004aa2:	4b68      	ldr	r3, [pc, #416]	; (8004c44 <main+0x8f8>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d11e      	bne.n	8004ae8 <main+0x79c>
	  {
	  SSC_4 = ADC2_IN4_SSC(&SSC_ADC2_IN4, 0.5 * Offset_4);
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <main+0x8ec>)
 8004aac:	edd3 7a00 	vldr	s15, [r3]
 8004ab0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8004abc:	4862      	ldr	r0, [pc, #392]	; (8004c48 <main+0x8fc>)
 8004abe:	f7fd ff0a 	bl	80028d6 <ADC2_IN4_SSC>
 8004ac2:	eef0 7a40 	vmov.f32	s15, s0
 8004ac6:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <main+0x900>)
 8004ac8:	edc3 7a00 	vstr	s15, [r3]
	  ADC2_IN4_autocorr_calc();
 8004acc:	f7fc fb0a 	bl	80010e4 <ADC2_IN4_autocorr_calc>
	  AR_4 = ADC2_IN4_autoreg_coeffs();
 8004ad0:	f7fc fb3e 	bl	8001150 <ADC2_IN4_autoreg_coeffs>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4a5e      	ldr	r2, [pc, #376]	; (8004c50 <main+0x904>)
 8004ad8:	6013      	str	r3, [r2, #0]
	  STFT_4 = ADC2_IN4_STFT_Update(&STFT_par_ADC2_IN4, &STFT_ADC2_IN4);
 8004ada:	495e      	ldr	r1, [pc, #376]	; (8004c54 <main+0x908>)
 8004adc:	485e      	ldr	r0, [pc, #376]	; (8004c58 <main+0x90c>)
 8004ade:	f7fe faff 	bl	80030e0 <ADC2_IN4_STFT_Update>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4a5d      	ldr	r2, [pc, #372]	; (8004c5c <main+0x910>)
 8004ae6:	6013      	str	r3, [r2, #0]
	  }


	  update_ADC3_IN1_FO_biquad_filter();
 8004ae8:	f7fd fa6c 	bl	8001fc4 <update_ADC3_IN1_FO_biquad_filter>
	  MA_ADC3_IN1_Update(&MovingAverage_ADC3_IN1);
 8004aec:	485c      	ldr	r0, [pc, #368]	; (8004c60 <main+0x914>)
 8004aee:	f7fd f83f 	bl	8001b70 <MA_ADC3_IN1_Update>
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	e017      	b.n	8004b28 <main+0x7dc>
	  {
		  MovingAverage_ADC3_IN1.MA_ADC3_IN1_OutBfr[b]  -= Offset_5;
 8004af8:	4a59      	ldr	r2, [pc, #356]	; (8004c60 <main+0x914>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3308      	adds	r3, #8
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	3304      	adds	r3, #4
 8004b04:	ed93 7a00 	vldr	s14, [r3]
 8004b08:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <main+0x918>)
 8004b0a:	edd3 7a00 	vldr	s15, [r3]
 8004b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b12:	4a53      	ldr	r2, [pc, #332]	; (8004c60 <main+0x914>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3308      	adds	r3, #8
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t b = 0; b < ADC_DMA_SIXTEENTHBUFFERSIZE; b++)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3301      	adds	r3, #1
 8004b26:	607b      	str	r3, [r7, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2bff      	cmp	r3, #255	; 0xff
 8004b2c:	d9e4      	bls.n	8004af8 <main+0x7ac>
	  }
	  TKEO_5 = ADC3_IN1_TKEO(&TKEO_ADC3_IN1, SD_BL_5);
 8004b2e:	4b4e      	ldr	r3, [pc, #312]	; (8004c68 <main+0x91c>)
 8004b30:	edd3 7a00 	vldr	s15, [r3]
 8004b34:	eeb0 0a67 	vmov.f32	s0, s15
 8004b38:	484c      	ldr	r0, [pc, #304]	; (8004c6c <main+0x920>)
 8004b3a:	f7ff f899 	bl	8003c70 <ADC3_IN1_TKEO>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b4b      	ldr	r3, [pc, #300]	; (8004c70 <main+0x924>)
 8004b44:	701a      	strb	r2, [r3, #0]

	  if(TKEO_5 == 1)
 8004b46:	4b4a      	ldr	r3, [pc, #296]	; (8004c70 <main+0x924>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d11e      	bne.n	8004b8c <main+0x840>
	  {
	  SSC_5 = ADC3_IN1_SSC(&SSC_ADC3_IN1, 0.5 * Offset_5);
 8004b4e:	4b45      	ldr	r3, [pc, #276]	; (8004c64 <main+0x918>)
 8004b50:	edd3 7a00 	vldr	s15, [r3]
 8004b54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b60:	4844      	ldr	r0, [pc, #272]	; (8004c74 <main+0x928>)
 8004b62:	f7fd ff27 	bl	80029b4 <ADC3_IN1_SSC>
 8004b66:	eef0 7a40 	vmov.f32	s15, s0
 8004b6a:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <main+0x92c>)
 8004b6c:	edc3 7a00 	vstr	s15, [r3]
	  ADC3_IN1_autocorr_calc();
 8004b70:	f7fc fb8e 	bl	8001290 <ADC3_IN1_autocorr_calc>
	  AR_5 = ADC3_IN1_autoreg_coeffs();
 8004b74:	f7fc fbc2 	bl	80012fc <ADC3_IN1_autoreg_coeffs>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4a40      	ldr	r2, [pc, #256]	; (8004c7c <main+0x930>)
 8004b7c:	6013      	str	r3, [r2, #0]
	  STFT_5 = ADC3_IN1_STFT_Update(&STFT_par_ADC3_IN1, &STFT_ADC3_IN1);
 8004b7e:	4940      	ldr	r1, [pc, #256]	; (8004c80 <main+0x934>)
 8004b80:	4840      	ldr	r0, [pc, #256]	; (8004c84 <main+0x938>)
 8004b82:	f7fe fb95 	bl	80032b0 <ADC3_IN1_STFT_Update>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4a3f      	ldr	r2, [pc, #252]	; (8004c88 <main+0x93c>)
 8004b8a:	6013      	str	r3, [r2, #0]
	  }


	  /* DSP SECTION */
	  update_ADC3_IN2_FO_biquad_filter(); // Notch filters channel 2 data
 8004b8c:	f7fd fa56 	bl	800203c <update_ADC3_IN2_FO_biquad_filter>
	  MA_ADC3_IN2_Update(&MovingAverage_ADC3_IN2); // Performs the moving average
 8004b90:	483e      	ldr	r0, [pc, #248]	; (8004c8c <main+0x940>)
 8004b92:	f7fd f891 	bl	8001cb8 <MA_ADC3_IN2_Update>
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	e017      	b.n	8004bcc <main+0x880>
	  {
		  MovingAverage_ADC3_IN2.MA_ADC3_IN2_OutBfr[c]  -= Offset_6;  // Subtract the stored offset
 8004b9c:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <main+0x940>)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	ed93 7a00 	vldr	s14, [r3]
 8004bac:	4b38      	ldr	r3, [pc, #224]	; (8004c90 <main+0x944>)
 8004bae:	edd3 7a00 	vldr	s15, [r3]
 8004bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bb6:	4a35      	ldr	r2, [pc, #212]	; (8004c8c <main+0x940>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	edc3 7a00 	vstr	s15, [r3]
	  for (uint32_t c = 0; c < ADC_DMA_SIXTEENTHBUFFERSIZE; c++)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2bff      	cmp	r3, #255	; 0xff
 8004bd0:	d9e4      	bls.n	8004b9c <main+0x850>
	  }
	  /* FEATURE EXCTRACTION SECTION */
	  TKEO_6 = ADC3_IN2_TKEO(&TKEO_ADC3_IN2, SD_BL_6); // Performs the windowing through the TKEO operator and returns binary data to indicate presence or absence of muscle activation
 8004bd2:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <main+0x948>)
 8004bd4:	edd3 7a00 	vldr	s15, [r3]
 8004bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bdc:	482e      	ldr	r0, [pc, #184]	; (8004c98 <main+0x94c>)
 8004bde:	f7ff f90b 	bl	8003df8 <ADC3_IN2_TKEO>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <main+0x950>)
 8004be8:	701a      	strb	r2, [r3, #0]

	  if(TKEO_6 == 1) // Only runs when there is muscle activation.
 8004bea:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <main+0x950>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	f47f add6 	bne.w	80047a0 <main+0x454>
	  {
	  /*Slope sign change*/
	  SSC_6 = ADC3_IN2_SSC(&SSC_ADC3_IN2, 0.5 * Offset_6); // Calculates slope sign changes for active segments
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <main+0x944>)
 8004bf6:	edd3 7a00 	vldr	s15, [r3]
 8004bfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c02:	eeb0 0a67 	vmov.f32	s0, s15
 8004c06:	4826      	ldr	r0, [pc, #152]	; (8004ca0 <main+0x954>)
 8004c08:	f7fd ff43 	bl	8002a92 <ADC3_IN2_SSC>
 8004c0c:	eef0 7a40 	vmov.f32	s15, s0
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <main+0x958>)
 8004c12:	edc3 7a00 	vstr	s15, [r3]
	  /*Computes the autocorrelation values and the autoregression coefficients and returns the latter*/
	  ADC3_IN2_autocorr_calc();
 8004c16:	f7fc fc13 	bl	8001440 <ADC3_IN2_autocorr_calc>
	  AR_6 = ADC3_IN2_autoreg_coeffs();
 8004c1a:	f7fc fc47 	bl	80014ac <ADC3_IN2_autoreg_coeffs>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <main+0x95c>)
 8004c22:	6013      	str	r3, [r2, #0]
	  /* Computes the short time Fourier transform from the moving average buffer */
	  STFT_6 = ADC3_IN2_STFT_Update(&STFT_par_ADC3_IN2, &STFT_ADC3_IN2);
 8004c24:	4921      	ldr	r1, [pc, #132]	; (8004cac <main+0x960>)
 8004c26:	4822      	ldr	r0, [pc, #136]	; (8004cb0 <main+0x964>)
 8004c28:	f7fe fc2a 	bl	8003480 <ADC3_IN2_STFT_Update>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <main+0x968>)
 8004c30:	6013      	str	r3, [r2, #0]
	  update_ADC1_IN1_FO_biquad_filter();  // Filters channel 1 data
 8004c32:	e5b5      	b.n	80047a0 <main+0x454>
 8004c34:	2000e0e4 	.word	0x2000e0e4
 8004c38:	2001b1c8 	.word	0x2001b1c8
 8004c3c:	2001b1e8 	.word	0x2001b1e8
 8004c40:	20012b6c 	.word	0x20012b6c
 8004c44:	2001b1f7 	.word	0x2001b1f7
 8004c48:	20014444 	.word	0x20014444
 8004c4c:	2001b208 	.word	0x2001b208
 8004c50:	2001b220 	.word	0x2001b220
 8004c54:	20015d1c 	.word	0x20015d1c
 8004c58:	20018da0 	.word	0x20018da0
 8004c5c:	2001b238 	.word	0x2001b238
 8004c60:	2000e508 	.word	0x2000e508
 8004c64:	2001b1cc 	.word	0x2001b1cc
 8004c68:	2001b1ec 	.word	0x2001b1ec
 8004c6c:	20012f90 	.word	0x20012f90
 8004c70:	2001b1f8 	.word	0x2001b1f8
 8004c74:	20014868 	.word	0x20014868
 8004c78:	2001b20c 	.word	0x2001b20c
 8004c7c:	2001b224 	.word	0x2001b224
 8004c80:	20016140 	.word	0x20016140
 8004c84:	200199a8 	.word	0x200199a8
 8004c88:	2001b23c 	.word	0x2001b23c
 8004c8c:	2000e92c 	.word	0x2000e92c
 8004c90:	2001b1d0 	.word	0x2001b1d0
 8004c94:	2001b1f0 	.word	0x2001b1f0
 8004c98:	200133b4 	.word	0x200133b4
 8004c9c:	2001b1f9 	.word	0x2001b1f9
 8004ca0:	20014c8c 	.word	0x20014c8c
 8004ca4:	2001b210 	.word	0x2001b210
 8004ca8:	2001b228 	.word	0x2001b228
 8004cac:	20016564 	.word	0x20016564
 8004cb0:	2001a5b0 	.word	0x2001a5b0
 8004cb4:	2001b240 	.word	0x2001b240

08004cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b094      	sub	sp, #80	; 0x50
 8004cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cbe:	f107 0318 	add.w	r3, r7, #24
 8004cc2:	2238      	movs	r2, #56	; 0x38
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f005 ff0c 	bl	800aae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	609a      	str	r2, [r3, #8]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004cde:	f002 ffeb 	bl	8007cb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cec:	2302      	movs	r3, #2
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004d00:	2302      	movs	r3, #2
 8004d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d04:	2302      	movs	r3, #2
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d08:	f107 0318 	add.w	r3, r7, #24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f003 f887 	bl	8007e20 <HAL_RCC_OscConfig>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8004d18:	f000 fc06 	bl	8005528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d20:	2303      	movs	r3, #3
 8004d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d30:	1d3b      	adds	r3, r7, #4
 8004d32:	2102      	movs	r1, #2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f003 fb85 	bl	8008444 <HAL_RCC_ClockConfig>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004d40:	f000 fbf2 	bl	8005528 <Error_Handler>
  }
}
 8004d44:	bf00      	nop
 8004d46:	3750      	adds	r7, #80	; 0x50
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	; 0x30
 8004d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	2220      	movs	r2, #32
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f005 febd 	bl	800aae4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004d6a:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004d70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004d72:	4b38      	ldr	r3, [pc, #224]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004d7a:	4b36      	ldr	r3, [pc, #216]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d80:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004d86:	4b33      	ldr	r3, [pc, #204]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004d8c:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d94:	2204      	movs	r2, #4
 8004d96:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004d98:	4b2e      	ldr	r3, [pc, #184]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004d9e:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004da6:	2202      	movs	r2, #2
 8004da8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004daa:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8004db2:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004db4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8004db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004dba:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004dca:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004dd0:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004dd8:	481e      	ldr	r0, [pc, #120]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004dda:	f001 f8d7 	bl	8005f8c <HAL_ADC_Init>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8004de4:	f000 fba0 	bl	8005528 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df0:	4619      	mov	r1, r3
 8004df2:	4818      	ldr	r0, [pc, #96]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004df4:	f002 f8c8 	bl	8006f88 <HAL_ADCEx_MultiModeConfigChannel>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8004dfe:	f000 fb93 	bl	8005528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004e02:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <MX_ADC1_Init+0x10c>)
 8004e04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e06:	2306      	movs	r3, #6
 8004e08:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004e0a:	2305      	movs	r3, #5
 8004e0c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004e0e:	237f      	movs	r3, #127	; 0x7f
 8004e10:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004e12:	2304      	movs	r3, #4
 8004e14:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	480d      	ldr	r0, [pc, #52]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004e20:	f001 fb36 	bl	8006490 <HAL_ADC_ConfigChannel>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8004e2a:	f000 fb7d 	bl	8005528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <MX_ADC1_Init+0x110>)
 8004e30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e32:	230c      	movs	r3, #12
 8004e34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4806      	ldr	r0, [pc, #24]	; (8004e54 <MX_ADC1_Init+0x108>)
 8004e3c:	f001 fb28 	bl	8006490 <HAL_ADC_ConfigChannel>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8004e46:	f000 fb6f 	bl	8005528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004e4a:	bf00      	nop
 8004e4c:	3730      	adds	r7, #48	; 0x30
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2000d0ec 	.word	0x2000d0ec
 8004e58:	04300002 	.word	0x04300002
 8004e5c:	08600004 	.word	0x08600004

08004e60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e66:	463b      	mov	r3, r7
 8004e68:	2220      	movs	r2, #32
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f005 fe39 	bl	800aae4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004e72:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004e74:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <MX_ADC2_Init+0xe4>)
 8004e76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004e78:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004e80:	4b2f      	ldr	r3, [pc, #188]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e86:	4b2e      	ldr	r3, [pc, #184]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004e8c:	4b2c      	ldr	r3, [pc, #176]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004e92:	4b2b      	ldr	r3, [pc, #172]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e98:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004e9e:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004ea4:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004eac:	2202      	movs	r2, #2
 8004eae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004eb0:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8004eb8:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004eba:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004ede:	4818      	ldr	r0, [pc, #96]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004ee0:	f001 f854 	bl	8005f8c <HAL_ADC_Init>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8004eea:	f000 fb1d 	bl	8005528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004eee:	4b16      	ldr	r3, [pc, #88]	; (8004f48 <MX_ADC2_Init+0xe8>)
 8004ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004efa:	237f      	movs	r3, #127	; 0x7f
 8004efc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004efe:	2304      	movs	r3, #4
 8004f00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f06:	463b      	mov	r3, r7
 8004f08:	4619      	mov	r1, r3
 8004f0a:	480d      	ldr	r0, [pc, #52]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004f0c:	f001 fac0 	bl	8006490 <HAL_ADC_ConfigChannel>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8004f16:	f000 fb07 	bl	8005528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <MX_ADC2_Init+0xec>)
 8004f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f1e:	230c      	movs	r3, #12
 8004f20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f22:	463b      	mov	r3, r7
 8004f24:	4619      	mov	r1, r3
 8004f26:	4806      	ldr	r0, [pc, #24]	; (8004f40 <MX_ADC2_Init+0xe0>)
 8004f28:	f001 fab2 	bl	8006490 <HAL_ADC_ConfigChannel>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8004f32:	f000 faf9 	bl	8005528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004f36:	bf00      	nop
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000d158 	.word	0x2000d158
 8004f44:	50000100 	.word	0x50000100
 8004f48:	0c900008 	.word	0x0c900008
 8004f4c:	10c00010 	.word	0x10c00010

08004f50 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f56:	463b      	mov	r3, r7
 8004f58:	2220      	movs	r2, #32
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 fdc1 	bl	800aae4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8004f62:	4b33      	ldr	r3, [pc, #204]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <MX_ADC3_Init+0xe4>)
 8004f66:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004f68:	4b31      	ldr	r3, [pc, #196]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f6e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f76:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8004f7c:	4b2c      	ldr	r3, [pc, #176]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004f82:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f88:	4b29      	ldr	r3, [pc, #164]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004f8e:	4b28      	ldr	r3, [pc, #160]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8004f9a:	4b25      	ldr	r3, [pc, #148]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004fa0:	4b23      	ldr	r3, [pc, #140]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T20_TRGO;
 8004fa8:	4b21      	ldr	r3, [pc, #132]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004faa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004fb0:	4b1f      	ldr	r3, [pc, #124]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8004fc6:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004fce:	4818      	ldr	r0, [pc, #96]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004fd0:	f000 ffdc 	bl	8005f8c <HAL_ADC_Init>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004fda:	f000 faa5 	bl	8005528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004fde:	4b16      	ldr	r3, [pc, #88]	; (8005038 <MX_ADC3_Init+0xe8>)
 8004fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004fe2:	2306      	movs	r3, #6
 8004fe4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004fe6:	2305      	movs	r3, #5
 8004fe8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004fea:	237f      	movs	r3, #127	; 0x7f
 8004fec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004fee:	2304      	movs	r3, #4
 8004ff0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	480d      	ldr	r0, [pc, #52]	; (8005030 <MX_ADC3_Init+0xe0>)
 8004ffc:	f001 fa48 	bl	8006490 <HAL_ADC_ConfigChannel>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8005006:	f000 fa8f 	bl	8005528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800500a:	4b0c      	ldr	r3, [pc, #48]	; (800503c <MX_ADC3_Init+0xec>)
 800500c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800500e:	230c      	movs	r3, #12
 8005010:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005012:	463b      	mov	r3, r7
 8005014:	4619      	mov	r1, r3
 8005016:	4806      	ldr	r0, [pc, #24]	; (8005030 <MX_ADC3_Init+0xe0>)
 8005018:	f001 fa3a 	bl	8006490 <HAL_ADC_ConfigChannel>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_ADC3_Init+0xd6>
  {
    Error_Handler();
 8005022:	f000 fa81 	bl	8005528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8005026:	bf00      	nop
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2000d1c4 	.word	0x2000d1c4
 8005034:	50000400 	.word	0x50000400
 8005038:	04300002 	.word	0x04300002
 800503c:	08600004 	.word	0x08600004

08005040 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <MX_FMAC_Init+0x20>)
 8005046:	4a07      	ldr	r2, [pc, #28]	; (8005064 <MX_FMAC_Init+0x24>)
 8005048:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800504a:	4805      	ldr	r0, [pc, #20]	; (8005060 <MX_FMAC_Init+0x20>)
 800504c:	f002 fc06 	bl	800785c <HAL_FMAC_Init>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8005056:	f000 fa67 	bl	8005528 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	2000d350 	.word	0x2000d350
 8005064:	40021400 	.word	0x40021400

08005068 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <MX_TIM6_Init+0x64>)
 800507a:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <MX_TIM6_Init+0x68>)
 800507c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <MX_TIM6_Init+0x64>)
 8005080:	2207      	movs	r2, #7
 8005082:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <MX_TIM6_Init+0x64>)
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7;
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <MX_TIM6_Init+0x64>)
 800508c:	2207      	movs	r2, #7
 800508e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <MX_TIM6_Init+0x64>)
 8005092:	2200      	movs	r2, #0
 8005094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005096:	480d      	ldr	r0, [pc, #52]	; (80050cc <MX_TIM6_Init+0x64>)
 8005098:	f003 fdf0 	bl	8008c7c <HAL_TIM_Base_Init>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80050a2:	f000 fa41 	bl	8005528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80050a6:	2320      	movs	r3, #32
 80050a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80050ae:	1d3b      	adds	r3, r7, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4806      	ldr	r0, [pc, #24]	; (80050cc <MX_TIM6_Init+0x64>)
 80050b4:	f004 f874 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80050be:	f000 fa33 	bl	8005528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000d388 	.word	0x2000d388
 80050d0:	40001000 	.word	0x40001000

080050d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050da:	1d3b      	adds	r3, r7, #4
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <MX_TIM7_Init+0x64>)
 80050e6:	4a15      	ldr	r2, [pc, #84]	; (800513c <MX_TIM7_Init+0x68>)
 80050e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8-1;
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <MX_TIM7_Init+0x64>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050f0:	4b11      	ldr	r3, [pc, #68]	; (8005138 <MX_TIM7_Init+0x64>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 7;
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <MX_TIM7_Init+0x64>)
 80050f8:	2207      	movs	r2, #7
 80050fa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <MX_TIM7_Init+0x64>)
 80050fe:	2200      	movs	r2, #0
 8005100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005102:	480d      	ldr	r0, [pc, #52]	; (8005138 <MX_TIM7_Init+0x64>)
 8005104:	f003 fdba 	bl	8008c7c <HAL_TIM_Base_Init>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800510e:	f000 fa0b 	bl	8005528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005112:	2320      	movs	r3, #32
 8005114:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4806      	ldr	r0, [pc, #24]	; (8005138 <MX_TIM7_Init+0x64>)
 8005120:	f004 f83e 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800512a:	f000 f9fd 	bl	8005528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	2000d3d4 	.word	0x2000d3d4
 800513c:	40001400 	.word	0x40001400

08005140 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005146:	f107 030c 	add.w	r3, r7, #12
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	609a      	str	r2, [r3, #8]
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005156:	463b      	mov	r3, r7
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005160:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <MX_TIM20_Init+0xa0>)
 8005162:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <MX_TIM20_Init+0xa4>)
 8005164:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 8-1;
 8005166:	4b1e      	ldr	r3, [pc, #120]	; (80051e0 <MX_TIM20_Init+0xa0>)
 8005168:	2207      	movs	r2, #7
 800516a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800516c:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <MX_TIM20_Init+0xa0>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 7;
 8005172:	4b1b      	ldr	r3, [pc, #108]	; (80051e0 <MX_TIM20_Init+0xa0>)
 8005174:	2207      	movs	r2, #7
 8005176:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005178:	4b19      	ldr	r3, [pc, #100]	; (80051e0 <MX_TIM20_Init+0xa0>)
 800517a:	2200      	movs	r2, #0
 800517c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800517e:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <MX_TIM20_Init+0xa0>)
 8005180:	2200      	movs	r2, #0
 8005182:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005184:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <MX_TIM20_Init+0xa0>)
 8005186:	2200      	movs	r2, #0
 8005188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 800518a:	4815      	ldr	r0, [pc, #84]	; (80051e0 <MX_TIM20_Init+0xa0>)
 800518c:	f003 fd76 	bl	8008c7c <HAL_TIM_Base_Init>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <MX_TIM20_Init+0x5a>
  {
    Error_Handler();
 8005196:	f000 f9c7 	bl	8005528 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 80051a2:	f107 030c 	add.w	r3, r7, #12
 80051a6:	4619      	mov	r1, r3
 80051a8:	480d      	ldr	r0, [pc, #52]	; (80051e0 <MX_TIM20_Init+0xa0>)
 80051aa:	f003 fdbe 	bl	8008d2a <HAL_TIM_SlaveConfigSynchro>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_TIM20_Init+0x78>
  {
    Error_Handler();
 80051b4:	f000 f9b8 	bl	8005528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80051b8:	2320      	movs	r3, #32
 80051ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80051bc:	2300      	movs	r3, #0
 80051be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80051c4:	463b      	mov	r3, r7
 80051c6:	4619      	mov	r1, r3
 80051c8:	4805      	ldr	r0, [pc, #20]	; (80051e0 <MX_TIM20_Init+0xa0>)
 80051ca:	f003 ffe9 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80051d4:	f000 f9a8 	bl	8005528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 80051d8:	bf00      	nop
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000d420 	.word	0x2000d420
 80051e4:	40015000 	.word	0x40015000

080051e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <MX_DMA_Init+0x88>)
 80051f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f2:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <MX_DMA_Init+0x88>)
 80051f4:	f043 0304 	orr.w	r3, r3, #4
 80051f8:	6493      	str	r3, [r2, #72]	; 0x48
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <MX_DMA_Init+0x88>)
 80051fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005206:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <MX_DMA_Init+0x88>)
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	4a19      	ldr	r2, [pc, #100]	; (8005270 <MX_DMA_Init+0x88>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6493      	str	r3, [r2, #72]	; 0x48
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <MX_DMA_Init+0x88>)
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <MX_DMA_Init+0x88>)
 8005220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005222:	4a13      	ldr	r2, [pc, #76]	; (8005270 <MX_DMA_Init+0x88>)
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	6493      	str	r3, [r2, #72]	; 0x48
 800522a:	4b11      	ldr	r3, [pc, #68]	; (8005270 <MX_DMA_Init+0x88>)
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	200b      	movs	r0, #11
 800523c:	f002 f867 	bl	800730e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005240:	200b      	movs	r0, #11
 8005242:	f002 f87e 	bl	8007342 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005246:	2200      	movs	r2, #0
 8005248:	2100      	movs	r1, #0
 800524a:	2010      	movs	r0, #16
 800524c:	f002 f85f 	bl	800730e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005250:	2010      	movs	r0, #16
 8005252:	f002 f876 	bl	8007342 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8005256:	2200      	movs	r2, #0
 8005258:	2100      	movs	r1, #0
 800525a:	2038      	movs	r0, #56	; 0x38
 800525c:	f002 f857 	bl	800730e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005260:	2038      	movs	r0, #56	; 0x38
 8005262:	f002 f86e 	bl	8007342 <HAL_NVIC_EnableIRQ>

}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000

08005274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <MX_GPIO_Init+0x74>)
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <MX_GPIO_Init+0x74>)
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <MX_GPIO_Init+0x74>)
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <MX_GPIO_Init+0x74>)
 8005294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005296:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <MX_GPIO_Init+0x74>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <MX_GPIO_Init+0x74>)
 80052a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <MX_GPIO_Init+0x74>)
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <MX_GPIO_Init+0x74>)
 80052b0:	f043 0302 	orr.w	r3, r3, #2
 80052b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <MX_GPIO_Init+0x74>)
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <MX_GPIO_Init+0x74>)
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <MX_GPIO_Init+0x74>)
 80052c8:	f043 0310 	orr.w	r3, r3, #16
 80052cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <MX_GPIO_Init+0x74>)
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000

080052ec <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void                    HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)   // Fires when the upper half of the DMA buffer is filled
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052fc:	d123      	bne.n	8005346 <HAL_ADC_ConvHalfCpltCallback+0x5a>
	   {
	        ADC1_DMA_sort_uhb(); // Handles the upper half of the DMA buffer
 80052fe:	f7fe fe3f 	bl	8003f80 <ADC1_DMA_sort_uhb>

	        ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];  // Monitors one of the DMA buffer registers in the upper half of the buffer
 8005302:	4b3c      	ldr	r3, [pc, #240]	; (80053f4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3b      	ldr	r2, [pc, #236]	; (80053f4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	f8d3 3bb8 	ldr.w	r3, [r3, #3000]	; 0xbb8
 800530e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005312:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
	        ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the upper half of the buffer
 8005316:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a36      	ldr	r2, [pc, #216]	; (80053f4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005322:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8005326:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800532a:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
	        ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the upper half of the buffer
 800532e:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a30      	ldr	r2, [pc, #192]	; (80053f4 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800533a:	f8d3 3c34 	ldr.w	r3, [r3, #3124]	; 0xc34
 800533e:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8005342:	f8c2 3dc8 	str.w	r3, [r2, #3528]	; 0xdc8
	   }


	 if (hadc->Instance == ADC2)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2b      	ldr	r2, [pc, #172]	; (80053f8 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d123      	bne.n	8005398 <HAL_ADC_ConvHalfCpltCallback+0xac>

	   {
		    ADC2_DMA_sort_uhb(); 
 8005350:	f7fe feb8 	bl	80040c4 <ADC2_DMA_sort_uhb>

		    ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 8005354:	4b29      	ldr	r3, [pc, #164]	; (80053fc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a28      	ldr	r2, [pc, #160]	; (80053fc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	f8d3 3bb8 	ldr.w	r3, [r3, #3000]	; 0xbb8
 8005360:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005364:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
		    ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a23      	ldr	r2, [pc, #140]	; (80053fc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005374:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 8005378:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800537c:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
		    ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 8005380:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800538c:	f8d3 3c34 	ldr.w	r3, [r3, #3124]	; 0xc34
 8005390:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8005394:	f8c2 3dc8 	str.w	r3, [r2, #3528]	; 0xdc8
	   }

	 if (hadc->Instance == ADC3)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d123      	bne.n	80053ea <HAL_ADC_ConvHalfCpltCallback+0xfe>

	   {
		    ADC3_DMA_sort_uhb(); 
 80053a2:	f7fe ff31 	bl	8004208 <ADC3_DMA_sort_uhb>

		    ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_QUATERBUFFERSIZE];
 80053a6:	4b17      	ldr	r3, [pc, #92]	; (8005404 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a16      	ldr	r2, [pc, #88]	; (8005404 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	f8d3 3bb8 	ldr.w	r3, [r3, #3000]	; 0xbb8
 80053b2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053b6:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
		    ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a11      	ldr	r2, [pc, #68]	; (8005404 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80053c6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
 80053ca:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80053ce:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
		    ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_EIGHTHBUFFERSIZE];
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a0b      	ldr	r2, [pc, #44]	; (8005404 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80053de:	f8d3 3c34 	ldr.w	r3, [r3, #3124]	; 0xc34
 80053e2:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 80053e6:	f8c2 3dc8 	str.w	r3, [r2, #3528]	; 0xdc8
	   }
};
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	2000d46c 	.word	0x2000d46c
 80053f8:	50000100 	.word	0x50000100
 80053fc:	2000d470 	.word	0x2000d470
 8005400:	50000400 	.word	0x50000400
 8005404:	2000d474 	.word	0x2000d474

08005408 <HAL_ADC_ConvCpltCallback>:

void                    HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)  // Fires when the lower half of the DMA buffer is filled
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	  if (hadc->Instance == ADC1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005418:	d124      	bne.n	8005464 <HAL_ADC_ConvCpltCallback+0x5c>
		{
			ADC1_DMA_sort_lhb(); // Handles the lower half of the DMA buffer
 800541a:	f7fe fdff 	bl	800401c <ADC1_DMA_sort_lhb>

			ADC1_DMA_sort_ptr->ADC1_DMA_mon=ADC1_DMA_sort_ptr->ADC1_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE]; // Monitors one of the DMA buffer registers in the lower half of the buffer
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <HAL_ADC_ConvCpltCallback+0x10c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3c      	ldr	r2, [pc, #240]	; (8005514 <HAL_ADC_ConvCpltCallback+0x10c>)
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800542a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800542e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005432:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
			ADC1_DMA_sort_ptr->ADC1_IN1_mon=ADC1_DMA_sort_ptr->ADC1_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN1 data buffer registers in the lower half of the buffer
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_ADC_ConvCpltCallback+0x10c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a36      	ldr	r2, [pc, #216]	; (8005514 <HAL_ADC_ConvCpltCallback+0x10c>)
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005444:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8005448:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
			ADC1_DMA_sort_ptr->ADC1_IN2_mon=ADC1_DMA_sort_ptr->ADC1_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];  // Monitors one of the IN2 data buffer registers in the lower half of the buffer
 800544c:	4b31      	ldr	r3, [pc, #196]	; (8005514 <HAL_ADC_ConvCpltCallback+0x10c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a30      	ldr	r2, [pc, #192]	; (8005514 <HAL_ADC_ConvCpltCallback+0x10c>)
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005458:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
 800545c:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8005460:	f8c2 3dc8 	str.w	r3, [r2, #3528]	; 0xdc8
		}


	  if (hadc->Instance == ADC2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <HAL_ADC_ConvCpltCallback+0x110>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d124      	bne.n	80054b8 <HAL_ADC_ConvCpltCallback+0xb0>

		{
		     ADC2_DMA_sort_lhb();
 800546e:	f7fe fe77 	bl	8004160 <ADC2_DMA_sort_lhb>

		     ADC2_DMA_sort_ptr->ADC2_DMA_mon=ADC2_DMA_sort_ptr->ADC2_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HAL_ADC_ConvCpltCallback+0x114>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a29      	ldr	r2, [pc, #164]	; (800551c <HAL_ADC_ConvCpltCallback+0x114>)
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800547e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8005482:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005486:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
		     ADC2_DMA_sort_ptr->ADC2_IN3_mon=ADC2_DMA_sort_ptr->ADC2_IN3_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 800548a:	4b24      	ldr	r3, [pc, #144]	; (800551c <HAL_ADC_ConvCpltCallback+0x114>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a23      	ldr	r2, [pc, #140]	; (800551c <HAL_ADC_ConvCpltCallback+0x114>)
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8005496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005498:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800549c:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
			 ADC2_DMA_sort_ptr->ADC2_IN4_mon=ADC2_DMA_sort_ptr->ADC2_IN4_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <HAL_ADC_ConvCpltCallback+0x114>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1d      	ldr	r2, [pc, #116]	; (800551c <HAL_ADC_ConvCpltCallback+0x114>)
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80054ac:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
 80054b0:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 80054b4:	f8c2 3dc8 	str.w	r3, [r2, #3528]	; 0xdc8
		}

	   if (hadc->Instance == ADC3)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a18      	ldr	r2, [pc, #96]	; (8005520 <HAL_ADC_ConvCpltCallback+0x118>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d124      	bne.n	800550c <HAL_ADC_ConvCpltCallback+0x104>

		{
		     ADC3_DMA_sort_lhb();
 80054c2:	f7fe feef 	bl	80042a4 <ADC3_DMA_sort_lhb>

			 ADC3_DMA_sort_ptr->ADC3_DMA_mon=ADC3_DMA_sort_ptr->ADC3_DMA_bfr[ADC_DMA_HALFBUFFERSIZE + ADC_DMA_QUATERBUFFERSIZE];
 80054c6:	4b17      	ldr	r3, [pc, #92]	; (8005524 <HAL_ADC_ConvCpltCallback+0x11c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_ADC_ConvCpltCallback+0x11c>)
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054d2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80054d6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80054da:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
			 ADC3_DMA_sort_ptr->ADC3_IN1_mon=ADC3_DMA_sort_ptr->ADC3_IN1_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80054de:	4b11      	ldr	r3, [pc, #68]	; (8005524 <HAL_ADC_ConvCpltCallback+0x11c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a10      	ldr	r2, [pc, #64]	; (8005524 <HAL_ADC_ConvCpltCallback+0x11c>)
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80054ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ec:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80054f0:	f8c2 3654 	str.w	r3, [r2, #1620]	; 0x654
			 ADC3_DMA_sort_ptr->ADC3_IN2_mon=ADC3_DMA_sort_ptr->ADC3_IN2_bfr[ADC_DMA_QUATERBUFFERSIZE + ADC_DMA_EIGHTHBUFFERSIZE];
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_ADC_ConvCpltCallback+0x11c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_ADC_ConvCpltCallback+0x11c>)
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005500:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
 8005504:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8005508:	f8c2 3dc8 	str.w	r3, [r2, #3528]	; 0xdc8
		}

};
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	2000d46c 	.word	0x2000d46c
 8005518:	50000100 	.word	0x50000100
 800551c:	2000d470 	.word	0x2000d470
 8005520:	50000400 	.word	0x50000400
 8005524:	2000d474 	.word	0x2000d474

08005528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800552c:	b672      	cpsid	i
}
 800552e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005530:	e7fe      	b.n	8005530 <Error_Handler+0x8>
	...

08005534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_MspInit+0x44>)
 800553c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <HAL_MspInit+0x44>)
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6613      	str	r3, [r2, #96]	; 0x60
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <HAL_MspInit+0x44>)
 8005548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <HAL_MspInit+0x44>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	4a08      	ldr	r2, [pc, #32]	; (8005578 <HAL_MspInit+0x44>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555c:	6593      	str	r3, [r2, #88]	; 0x58
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_MspInit+0x44>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800556a:	f002 fc49 	bl	8007e00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b0a2      	sub	sp, #136	; 0x88
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005584:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	609a      	str	r2, [r3, #8]
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005598:	2250      	movs	r2, #80	; 0x50
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f005 faa1 	bl	800aae4 <memset>
  if(hadc->Instance==ADC1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055aa:	d169      	bne.n	8005680 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80055ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80055b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80055b6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055bc:	4618      	mov	r0, r3
 80055be:	f003 f921 	bl	8008804 <HAL_RCCEx_PeriphCLKConfig>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80055c8:	f7ff ffae 	bl	8005528 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80055cc:	4b64      	ldr	r3, [pc, #400]	; (8005760 <HAL_ADC_MspInit+0x1e4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a63      	ldr	r2, [pc, #396]	; (8005760 <HAL_ADC_MspInit+0x1e4>)
 80055d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80055d6:	4b62      	ldr	r3, [pc, #392]	; (8005760 <HAL_ADC_MspInit+0x1e4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10b      	bne.n	80055f6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80055de:	4b61      	ldr	r3, [pc, #388]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80055e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e2:	4a60      	ldr	r2, [pc, #384]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80055e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055ea:	4b5e      	ldr	r3, [pc, #376]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80055ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f6:	4b5b      	ldr	r3, [pc, #364]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	4a5a      	ldr	r2, [pc, #360]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005602:	4b58      	ldr	r3, [pc, #352]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800560e:	2303      	movs	r3, #3
 8005610:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005612:	2303      	movs	r3, #3
 8005614:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005616:	2300      	movs	r3, #0
 8005618:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800561e:	4619      	mov	r1, r3
 8005620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005624:	f002 f9c6 	bl	80079b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005628:	4b4f      	ldr	r3, [pc, #316]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 800562a:	4a50      	ldr	r2, [pc, #320]	; (800576c <HAL_ADC_MspInit+0x1f0>)
 800562c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800562e:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005630:	2205      	movs	r2, #5
 8005632:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005634:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800563a:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 800563c:	2200      	movs	r2, #0
 800563e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005640:	4b49      	ldr	r3, [pc, #292]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005642:	2280      	movs	r2, #128	; 0x80
 8005644:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005646:	4b48      	ldr	r3, [pc, #288]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800564e:	4b46      	ldr	r3, [pc, #280]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005654:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005656:	4b44      	ldr	r3, [pc, #272]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005658:	2220      	movs	r2, #32
 800565a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800565c:	4b42      	ldr	r3, [pc, #264]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 800565e:	2200      	movs	r2, #0
 8005660:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005662:	4841      	ldr	r0, [pc, #260]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005664:	f001 fe88 	bl	8007378 <HAL_DMA_Init>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800566e:	f7ff ff5b 	bl	8005528 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a3c      	ldr	r2, [pc, #240]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 8005676:	655a      	str	r2, [r3, #84]	; 0x54
 8005678:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <HAL_ADC_MspInit+0x1ec>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800567e:	e0fa      	b.n	8005876 <HAL_ADC_MspInit+0x2fa>
  else if(hadc->Instance==ADC2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a3a      	ldr	r2, [pc, #232]	; (8005770 <HAL_ADC_MspInit+0x1f4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d178      	bne.n	800577c <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005690:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005694:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800569a:	4618      	mov	r0, r3
 800569c:	f003 f8b2 	bl	8008804 <HAL_RCCEx_PeriphCLKConfig>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80056a6:	f7ff ff3f 	bl	8005528 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80056aa:	4b2d      	ldr	r3, [pc, #180]	; (8005760 <HAL_ADC_MspInit+0x1e4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <HAL_ADC_MspInit+0x1e4>)
 80056b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80056b4:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <HAL_ADC_MspInit+0x1e4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10b      	bne.n	80056d4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80056bc:	4b29      	ldr	r3, [pc, #164]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80056be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c0:	4a28      	ldr	r2, [pc, #160]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80056c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056c8:	4b26      	ldr	r3, [pc, #152]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80056ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d4:	4b23      	ldr	r3, [pc, #140]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	4a22      	ldr	r2, [pc, #136]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056e0:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_ADC_MspInit+0x1e8>)
 80056e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80056ec:	23c0      	movs	r3, #192	; 0xc0
 80056ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056f0:	2303      	movs	r3, #3
 80056f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80056fc:	4619      	mov	r1, r3
 80056fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005702:	f002 f957 	bl	80079b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel6;
 8005706:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005708:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <HAL_ADC_MspInit+0x1fc>)
 800570a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800570c:	4b19      	ldr	r3, [pc, #100]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 800570e:	2224      	movs	r2, #36	; 0x24
 8005710:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005712:	4b18      	ldr	r3, [pc, #96]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005714:	2200      	movs	r2, #0
 8005716:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005718:	4b16      	ldr	r3, [pc, #88]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 800571a:	2200      	movs	r2, #0
 800571c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800571e:	4b15      	ldr	r3, [pc, #84]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005724:	4b13      	ldr	r3, [pc, #76]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800572c:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 800572e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005732:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005736:	2220      	movs	r2, #32
 8005738:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800573a:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005740:	480c      	ldr	r0, [pc, #48]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005742:	f001 fe19 	bl	8007378 <HAL_DMA_Init>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 800574c:	f7ff feec 	bl	8005528 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a08      	ldr	r2, [pc, #32]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
 8005756:	4a07      	ldr	r2, [pc, #28]	; (8005774 <HAL_ADC_MspInit+0x1f8>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800575c:	e08b      	b.n	8005876 <HAL_ADC_MspInit+0x2fa>
 800575e:	bf00      	nop
 8005760:	2001b244 	.word	0x2001b244
 8005764:	40021000 	.word	0x40021000
 8005768:	2000d230 	.word	0x2000d230
 800576c:	40020008 	.word	0x40020008
 8005770:	50000100 	.word	0x50000100
 8005774:	2000d290 	.word	0x2000d290
 8005778:	4002006c 	.word	0x4002006c
  else if(hadc->Instance==ADC3)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <HAL_ADC_MspInit+0x304>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d177      	bne.n	8005876 <HAL_ADC_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8005786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800578c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005790:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005796:	4618      	mov	r0, r3
 8005798:	f003 f834 	bl	8008804 <HAL_RCCEx_PeriphCLKConfig>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 80057a2:	f7ff fec1 	bl	8005528 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80057a6:	4b37      	ldr	r3, [pc, #220]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057aa:	4a36      	ldr	r2, [pc, #216]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	4a30      	ldr	r2, [pc, #192]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057d6:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057da:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057dc:	f043 0310 	orr.w	r3, r3, #16
 80057e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057e2:	4b28      	ldr	r3, [pc, #160]	; (8005884 <HAL_ADC_MspInit+0x308>)
 80057e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80057ee:	2302      	movs	r3, #2
 80057f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057f2:	2303      	movs	r3, #3
 80057f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057fe:	4619      	mov	r1, r3
 8005800:	4821      	ldr	r0, [pc, #132]	; (8005888 <HAL_ADC_MspInit+0x30c>)
 8005802:	f002 f8d7 	bl	80079b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800580a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800580c:	2303      	movs	r3, #3
 800580e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005810:	2300      	movs	r3, #0
 8005812:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005814:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005818:	4619      	mov	r1, r3
 800581a:	481c      	ldr	r0, [pc, #112]	; (800588c <HAL_ADC_MspInit+0x310>)
 800581c:	f002 f8ca 	bl	80079b4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel1;
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <HAL_ADC_MspInit+0x318>)
 8005824:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005828:	2225      	movs	r2, #37	; 0x25
 800582a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800582c:	4b18      	ldr	r3, [pc, #96]	; (8005890 <HAL_ADC_MspInit+0x314>)
 800582e:	2200      	movs	r2, #0
 8005830:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005834:	2200      	movs	r2, #0
 8005836:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005838:	4b15      	ldr	r3, [pc, #84]	; (8005890 <HAL_ADC_MspInit+0x314>)
 800583a:	2280      	movs	r2, #128	; 0x80
 800583c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005844:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005850:	2220      	movs	r2, #32
 8005852:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8005854:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005856:	2200      	movs	r2, #0
 8005858:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800585a:	480d      	ldr	r0, [pc, #52]	; (8005890 <HAL_ADC_MspInit+0x314>)
 800585c:	f001 fd8c 	bl	8007378 <HAL_DMA_Init>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_ADC_MspInit+0x2ee>
      Error_Handler();
 8005866:	f7ff fe5f 	bl	8005528 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a08      	ldr	r2, [pc, #32]	; (8005890 <HAL_ADC_MspInit+0x314>)
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
 8005870:	4a07      	ldr	r2, [pc, #28]	; (8005890 <HAL_ADC_MspInit+0x314>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005876:	bf00      	nop
 8005878:	3788      	adds	r7, #136	; 0x88
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	50000400 	.word	0x50000400
 8005884:	40021000 	.word	0x40021000
 8005888:	48000400 	.word	0x48000400
 800588c:	48001000 	.word	0x48001000
 8005890:	2000d2f0 	.word	0x2000d2f0
 8005894:	40020408 	.word	0x40020408

08005898 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <HAL_FMAC_MspInit+0x38>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10b      	bne.n	80058c2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <HAL_FMAC_MspInit+0x3c>)
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <HAL_FMAC_MspInit+0x3c>)
 80058b0:	f043 0310 	orr.w	r3, r3, #16
 80058b4:	6493      	str	r3, [r2, #72]	; 0x48
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_FMAC_MspInit+0x3c>)
 80058b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40021400 	.word	0x40021400
 80058d4:	40021000 	.word	0x40021000

080058d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_TIM_Base_MspInit+0x80>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10c      	bne.n	8005904 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 80058f0:	f043 0310 	orr.w	r3, r3, #16
 80058f4:	6593      	str	r3, [r2, #88]	; 0x58
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8005902:	e022      	b.n	800594a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM7)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <HAL_TIM_Base_MspInit+0x88>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800590e:	4b13      	ldr	r3, [pc, #76]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005912:	4a12      	ldr	r2, [pc, #72]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	6593      	str	r3, [r2, #88]	; 0x58
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	693b      	ldr	r3, [r7, #16]
}
 8005926:	e010      	b.n	800594a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <HAL_TIM_Base_MspInit+0x8c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10b      	bne.n	800594a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 8005934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005936:	4a09      	ldr	r2, [pc, #36]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 8005938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800593c:	6613      	str	r3, [r2, #96]	; 0x60
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <HAL_TIM_Base_MspInit+0x84>)
 8005940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40001000 	.word	0x40001000
 800595c:	40021000 	.word	0x40021000
 8005960:	40001400 	.word	0x40001400
 8005964:	40015000 	.word	0x40015000

08005968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800596c:	e7fe      	b.n	800596c <NMI_Handler+0x4>

0800596e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800596e:	b480      	push	{r7}
 8005970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005972:	e7fe      	b.n	8005972 <HardFault_Handler+0x4>

08005974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005978:	e7fe      	b.n	8005978 <MemManage_Handler+0x4>

0800597a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800597a:	b480      	push	{r7}
 800597c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800597e:	e7fe      	b.n	800597e <BusFault_Handler+0x4>

08005980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005984:	e7fe      	b.n	8005984 <UsageFault_Handler+0x4>

08005986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800598a:	bf00      	nop
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059a2:	b480      	push	{r7}
 80059a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059b4:	f000 f8ae 	bl	8005b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}

080059bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80059c0:	4802      	ldr	r0, [pc, #8]	; (80059cc <DMA1_Channel1_IRQHandler+0x10>)
 80059c2:	f001 fdfc 	bl	80075be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000d230 	.word	0x2000d230

080059d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80059d4:	4802      	ldr	r0, [pc, #8]	; (80059e0 <DMA1_Channel6_IRQHandler+0x10>)
 80059d6:	f001 fdf2 	bl	80075be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80059da:	bf00      	nop
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	2000d290 	.word	0x2000d290

080059e4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80059e8:	4802      	ldr	r0, [pc, #8]	; (80059f4 <DMA2_Channel1_IRQHandler+0x10>)
 80059ea:	f001 fde8 	bl	80075be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	2000d2f0 	.word	0x2000d2f0

080059f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <SystemInit+0x20>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <SystemInit+0x20>)
 8005a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	e000ed00 	.word	0xe000ed00

08005a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a1c:	480d      	ldr	r0, [pc, #52]	; (8005a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a20:	f7ff ffea 	bl	80059f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a24:	480c      	ldr	r0, [pc, #48]	; (8005a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a26:	490d      	ldr	r1, [pc, #52]	; (8005a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a28:	4a0d      	ldr	r2, [pc, #52]	; (8005a60 <LoopForever+0xe>)
  movs r3, #0
 8005a2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005a2c:	e002      	b.n	8005a34 <LoopCopyDataInit>

08005a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a32:	3304      	adds	r3, #4

08005a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a38:	d3f9      	bcc.n	8005a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a3c:	4c0a      	ldr	r4, [pc, #40]	; (8005a68 <LoopForever+0x16>)
  movs r3, #0
 8005a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a40:	e001      	b.n	8005a46 <LoopFillZerobss>

08005a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a44:	3204      	adds	r2, #4

08005a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a48:	d3fb      	bcc.n	8005a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a4a:	f005 f859 	bl	800ab00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005a4e:	f7fe fc7d 	bl	800434c <main>

08005a52 <LoopForever>:

LoopForever:
    b LoopForever
 8005a52:	e7fe      	b.n	8005a52 <LoopForever>
  ldr   r0, =_estack
 8005a54:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a5c:	20009048 	.word	0x20009048
  ldr r2, =_sidata
 8005a60:	0801ee68 	.word	0x0801ee68
  ldr r2, =_sbss
 8005a64:	20009048 	.word	0x20009048
  ldr r4, =_ebss
 8005a68:	2001b384 	.word	0x2001b384

08005a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a6c:	e7fe      	b.n	8005a6c <ADC1_2_IRQHandler>

08005a6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a78:	2003      	movs	r0, #3
 8005a7a:	f001 fc3d 	bl	80072f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a7e:	200f      	movs	r0, #15
 8005a80:	f000 f80e 	bl	8005aa0 <HAL_InitTick>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	71fb      	strb	r3, [r7, #7]
 8005a8e:	e001      	b.n	8005a94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a90:	f7ff fd50 	bl	8005534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a94:	79fb      	ldrb	r3, [r7, #7]

}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005aac:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <HAL_InitTick+0x68>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d022      	beq.n	8005afa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <HAL_InitTick+0x6c>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <HAL_InitTick+0x68>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 fc48 	bl	800735e <HAL_SYSTICK_Config>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10f      	bne.n	8005af4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d809      	bhi.n	8005aee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ada:	2200      	movs	r2, #0
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae2:	f001 fc14 	bl	800730e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ae6:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <HAL_InitTick+0x70>)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e007      	b.n	8005afe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
 8005af2:	e004      	b.n	8005afe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
 8005af8:	e001      	b.n	8005afe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20008fe0 	.word	0x20008fe0
 8005b0c:	20008fd8 	.word	0x20008fd8
 8005b10:	20008fdc 	.word	0x20008fdc

08005b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_IncTick+0x1c>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <HAL_IncTick+0x20>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4413      	add	r3, r2
 8005b22:	4a03      	ldr	r2, [pc, #12]	; (8005b30 <HAL_IncTick+0x1c>)
 8005b24:	6013      	str	r3, [r2, #0]
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	2001b248 	.word	0x2001b248
 8005b34:	20008fe0 	.word	0x20008fe0

08005b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <HAL_GetTick+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	2001b248 	.word	0x2001b248

08005b50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	609a      	str	r2, [r3, #8]
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3360      	adds	r3, #96	; 0x60
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <LL_ADC_SetOffset+0x44>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005bf0:	bf00      	nop
 8005bf2:	371c      	adds	r7, #28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	03fff000 	.word	0x03fff000

08005c00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3360      	adds	r3, #96	; 0x60
 8005c0e:	461a      	mov	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3360      	adds	r3, #96	; 0x60
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b087      	sub	sp, #28
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3360      	adds	r3, #96	; 0x60
 8005c72:	461a      	mov	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3360      	adds	r3, #96	; 0x60
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	615a      	str	r2, [r3, #20]
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b087      	sub	sp, #28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3330      	adds	r3, #48	; 0x30
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	4413      	add	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	211f      	movs	r1, #31
 8005d46:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	401a      	ands	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	0e9b      	lsrs	r3, r3, #26
 8005d52:	f003 011f 	and.w	r1, r3, #31
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	431a      	orrs	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b087      	sub	sp, #28
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3314      	adds	r3, #20
 8005d82:	461a      	mov	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	0e5b      	lsrs	r3, r3, #25
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	4413      	add	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	0d1b      	lsrs	r3, r3, #20
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2107      	movs	r1, #7
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	0d1b      	lsrs	r3, r3, #20
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	fa01 f303 	lsl.w	r3, r1, r3
 8005db6:	431a      	orrs	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de0:	43db      	mvns	r3, r3
 8005de2:	401a      	ands	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0318 	and.w	r3, r3, #24
 8005dea:	4908      	ldr	r1, [pc, #32]	; (8005e0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005dec:	40d9      	lsrs	r1, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	400b      	ands	r3, r1
 8005df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	0007ffff 	.word	0x0007ffff

08005e10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6093      	str	r3, [r2, #8]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	d101      	bne.n	8005e6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eb4:	d101      	bne.n	8005eba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005edc:	f043 0201 	orr.w	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <LL_ADC_IsEnabled+0x18>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <LL_ADC_IsEnabled+0x1a>
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d101      	bne.n	8005f56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d101      	bne.n	8005f7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e19b      	b.n	80062de <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fae1 	bl	800557c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff ff3f 	bl	8005e50 <LL_ADC_IsDeepPowerDownEnabled>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff ff25 	bl	8005e2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff ff5a 	bl	8005ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d115      	bne.n	800601e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff ff3e 	bl	8005e78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ffc:	4b97      	ldr	r3, [pc, #604]	; (800625c <HAL_ADC_Init+0x2d0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	099b      	lsrs	r3, r3, #6
 8006002:	4a97      	ldr	r2, [pc, #604]	; (8006260 <HAL_ADC_Init+0x2d4>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	099b      	lsrs	r3, r3, #6
 800600a:	3301      	adds	r3, #1
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006010:	e002      	b.n	8006018 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3b01      	subs	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f9      	bne.n	8006012 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff ff3c 	bl	8005ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10d      	bne.n	800604a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	f043 0210 	orr.w	r2, r3, #16
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603e:	f043 0201 	orr.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff ff75 	bl	8005f3e <LL_ADC_REG_IsConversionOngoing>
 8006054:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 8134 	bne.w	80062cc <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 8130 	bne.w	80062cc <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006074:	f043 0202 	orr.w	r2, r3, #2
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff ff35 	bl	8005ef0 <LL_ADC_IsEnabled>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d137      	bne.n	80060fc <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006094:	d004      	beq.n	80060a0 <HAL_ADC_Init+0x114>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a72      	ldr	r2, [pc, #456]	; (8006264 <HAL_ADC_Init+0x2d8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10f      	bne.n	80060c0 <HAL_ADC_Init+0x134>
 80060a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80060a4:	f7ff ff24 	bl	8005ef0 <LL_ADC_IsEnabled>
 80060a8:	4604      	mov	r4, r0
 80060aa:	486e      	ldr	r0, [pc, #440]	; (8006264 <HAL_ADC_Init+0x2d8>)
 80060ac:	f7ff ff20 	bl	8005ef0 <LL_ADC_IsEnabled>
 80060b0:	4603      	mov	r3, r0
 80060b2:	4323      	orrs	r3, r4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e008      	b.n	80060d2 <HAL_ADC_Init+0x146>
 80060c0:	4869      	ldr	r0, [pc, #420]	; (8006268 <HAL_ADC_Init+0x2dc>)
 80060c2:	f7ff ff15 	bl	8005ef0 <LL_ADC_IsEnabled>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d012      	beq.n	80060fc <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060de:	d004      	beq.n	80060ea <HAL_ADC_Init+0x15e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a5f      	ldr	r2, [pc, #380]	; (8006264 <HAL_ADC_Init+0x2d8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <HAL_ADC_Init+0x162>
 80060ea:	4a60      	ldr	r2, [pc, #384]	; (800626c <HAL_ADC_Init+0x2e0>)
 80060ec:	e000      	b.n	80060f0 <HAL_ADC_Init+0x164>
 80060ee:	4a60      	ldr	r2, [pc, #384]	; (8006270 <HAL_ADC_Init+0x2e4>)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f7ff fd2a 	bl	8005b50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	7f5b      	ldrb	r3, [r3, #29]
 8006100:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006106:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800610c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006112:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800611a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006126:	2b01      	cmp	r3, #1
 8006128:	d106      	bne.n	8006138 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	3b01      	subs	r3, #1
 8006130:	045b      	lsls	r3, r3, #17
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4313      	orrs	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	4b46      	ldr	r3, [pc, #280]	; (8006274 <HAL_ADC_Init+0x2e8>)
 800615c:	4013      	ands	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	69b9      	ldr	r1, [r7, #24]
 8006164:	430b      	orrs	r3, r1
 8006166:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff feee 	bl	8005f64 <LL_ADC_INJ_IsConversionOngoing>
 8006188:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d17b      	bne.n	8006288 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d178      	bne.n	8006288 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800619a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b2:	f023 0302 	bic.w	r3, r3, #2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	430b      	orrs	r3, r1
 80061be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d017      	beq.n	80061f8 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80061e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80061e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6911      	ldr	r1, [r2, #16]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	430b      	orrs	r3, r1
 80061f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80061f6:	e013      	b.n	8006220 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006206:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800621c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006226:	2b01      	cmp	r3, #1
 8006228:	d126      	bne.n	8006278 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006234:	f023 0304 	bic.w	r3, r3, #4
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006240:	4311      	orrs	r1, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006246:	4311      	orrs	r1, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800624c:	430a      	orrs	r2, r1
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0201 	orr.w	r2, r2, #1
 8006258:	611a      	str	r2, [r3, #16]
 800625a:	e015      	b.n	8006288 <HAL_ADC_Init+0x2fc>
 800625c:	20008fd8 	.word	0x20008fd8
 8006260:	053e2d63 	.word	0x053e2d63
 8006264:	50000100 	.word	0x50000100
 8006268:	50000400 	.word	0x50000400
 800626c:	50000300 	.word	0x50000300
 8006270:	50000700 	.word	0x50000700
 8006274:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0201 	bic.w	r2, r2, #1
 8006286:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10c      	bne.n	80062aa <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	f023 010f 	bic.w	r1, r3, #15
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
 80062a8:	e007      	b.n	80062ba <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 020f 	bic.w	r2, r2, #15
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80062ca:	e007      	b.n	80062dc <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f043 0210 	orr.w	r2, r3, #16
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80062dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	bf00      	nop

080062e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062fc:	d004      	beq.n	8006308 <HAL_ADC_Start_DMA+0x20>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a57      	ldr	r2, [pc, #348]	; (8006460 <HAL_ADC_Start_DMA+0x178>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d101      	bne.n	800630c <HAL_ADC_Start_DMA+0x24>
 8006308:	4b56      	ldr	r3, [pc, #344]	; (8006464 <HAL_ADC_Start_DMA+0x17c>)
 800630a:	e000      	b.n	800630e <HAL_ADC_Start_DMA+0x26>
 800630c:	4b56      	ldr	r3, [pc, #344]	; (8006468 <HAL_ADC_Start_DMA+0x180>)
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fd7e 	bl	8005e10 <LL_ADC_GetMultimode>
 8006314:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fe0f 	bl	8005f3e <LL_ADC_REG_IsConversionOngoing>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 8094 	bne.w	8006450 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_ADC_Start_DMA+0x4e>
 8006332:	2302      	movs	r3, #2
 8006334:	e08f      	b.n	8006456 <HAL_ADC_Start_DMA+0x16e>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4a      	ldr	r2, [pc, #296]	; (800646c <HAL_ADC_Start_DMA+0x184>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d008      	beq.n	800635a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b05      	cmp	r3, #5
 8006352:	d002      	beq.n	800635a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b09      	cmp	r3, #9
 8006358:	d173      	bne.n	8006442 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fcc4 	bl	8006ce8 <ADC_Enable>
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d166      	bne.n	8006438 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006372:	f023 0301 	bic.w	r3, r3, #1
 8006376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a37      	ldr	r2, [pc, #220]	; (8006460 <HAL_ADC_Start_DMA+0x178>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d002      	beq.n	800638e <HAL_ADC_Start_DMA+0xa6>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	e001      	b.n	8006392 <HAL_ADC_Start_DMA+0xaa>
 800638e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	4293      	cmp	r3, r2
 8006398:	d002      	beq.n	80063a0 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063bc:	f023 0206 	bic.w	r2, r3, #6
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60
 80063c4:	e002      	b.n	80063cc <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	4a27      	ldr	r2, [pc, #156]	; (8006470 <HAL_ADC_Start_DMA+0x188>)
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	4a26      	ldr	r2, [pc, #152]	; (8006474 <HAL_ADC_Start_DMA+0x18c>)
 80063da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	4a25      	ldr	r2, [pc, #148]	; (8006478 <HAL_ADC_Start_DMA+0x190>)
 80063e2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	221c      	movs	r2, #28
 80063ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0210 	orr.w	r2, r2, #16
 8006402:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3340      	adds	r3, #64	; 0x40
 800641e:	4619      	mov	r1, r3
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f001 f850 	bl	80074c8 <HAL_DMA_Start_IT>
 8006428:	4603      	mov	r3, r0
 800642a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fd70 	bl	8005f16 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006436:	e00d      	b.n	8006454 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006440:	e008      	b.n	8006454 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800644e:	e001      	b.n	8006454 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006450:	2302      	movs	r3, #2
 8006452:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	50000100 	.word	0x50000100
 8006464:	50000300 	.word	0x50000300
 8006468:	50000700 	.word	0x50000700
 800646c:	50000400 	.word	0x50000400
 8006470:	08006e15 	.word	0x08006e15
 8006474:	08006eed 	.word	0x08006eed
 8006478:	08006f09 	.word	0x08006f09

0800647c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b0b6      	sub	sp, #216	; 0xd8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d102      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x24>
 80064ae:	2302      	movs	r3, #2
 80064b0:	f000 bc04 	b.w	8006cbc <HAL_ADC_ConfigChannel+0x82c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fd3c 	bl	8005f3e <LL_ADC_REG_IsConversionOngoing>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 83e8 	bne.w	8006c9e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f7ff fc1d 	bl	8005d1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fd2a 	bl	8005f3e <LL_ADC_REG_IsConversionOngoing>
 80064ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fd36 	bl	8005f64 <LL_ADC_INJ_IsConversionOngoing>
 80064f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 81d9 	bne.w	80068b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 81d4 	bne.w	80068b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006518:	d10f      	bne.n	800653a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	4619      	mov	r1, r3
 8006526:	f7ff fc24 	bl	8005d72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fbcb 	bl	8005cce <LL_ADC_SetSamplingTimeCommonConfig>
 8006538:	e00e      	b.n	8006558 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6819      	ldr	r1, [r3, #0]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	461a      	mov	r2, r3
 8006548:	f7ff fc13 	bl	8005d72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fbbb 	bl	8005cce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	08db      	lsrs	r3, r3, #3
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b04      	cmp	r3, #4
 8006578:	d022      	beq.n	80065c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6919      	ldr	r1, [r3, #16]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800658a:	f7ff fb15 	bl	8005bb8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6919      	ldr	r1, [r3, #16]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	461a      	mov	r2, r3
 800659c:	f7ff fb61 	bl	8005c62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d102      	bne.n	80065b6 <HAL_ADC_ConfigChannel+0x126>
 80065b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065b4:	e000      	b.n	80065b8 <HAL_ADC_ConfigChannel+0x128>
 80065b6:	2300      	movs	r3, #0
 80065b8:	461a      	mov	r2, r3
 80065ba:	f7ff fb6d 	bl	8005c98 <LL_ADC_SetOffsetSaturation>
 80065be:	e17b      	b.n	80068b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fb1a 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <HAL_ADC_ConfigChannel+0x15c>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fb0f 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 80065e2:	4603      	mov	r3, r0
 80065e4:	0e9b      	lsrs	r3, r3, #26
 80065e6:	f003 021f 	and.w	r2, r3, #31
 80065ea:	e01e      	b.n	800662a <HAL_ADC_ConfigChannel+0x19a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fb04 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006602:	fa93 f3a3 	rbit	r3, r3
 8006606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800660a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800660e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800661a:	2320      	movs	r3, #32
 800661c:	e004      	b.n	8006628 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800661e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006622:	fab3 f383 	clz	r3, r3
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006632:	2b00      	cmp	r3, #0
 8006634:	d105      	bne.n	8006642 <HAL_ADC_ConfigChannel+0x1b2>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	0e9b      	lsrs	r3, r3, #26
 800663c:	f003 031f 	and.w	r3, r3, #31
 8006640:	e018      	b.n	8006674 <HAL_ADC_ConfigChannel+0x1e4>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800664e:	fa93 f3a3 	rbit	r3, r3
 8006652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800665a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800665e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006666:	2320      	movs	r3, #32
 8006668:	e004      	b.n	8006674 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800666a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800666e:	fab3 f383 	clz	r3, r3
 8006672:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006674:	429a      	cmp	r2, r3
 8006676:	d106      	bne.n	8006686 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2200      	movs	r2, #0
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fad3 	bl	8005c2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2101      	movs	r1, #1
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fab7 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 8006692:	4603      	mov	r3, r0
 8006694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <HAL_ADC_ConfigChannel+0x222>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2101      	movs	r1, #1
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff faac 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 80066a8:	4603      	mov	r3, r0
 80066aa:	0e9b      	lsrs	r3, r3, #26
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	e01e      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x260>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2101      	movs	r1, #1
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff faa1 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 80066be:	4603      	mov	r3, r0
 80066c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066c8:	fa93 f3a3 	rbit	r3, r3
 80066cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80066d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80066d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80066e0:	2320      	movs	r3, #32
 80066e2:	e004      	b.n	80066ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80066e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066e8:	fab3 f383 	clz	r3, r3
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x278>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	0e9b      	lsrs	r3, r3, #26
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	e018      	b.n	800673a <HAL_ADC_ConfigChannel+0x2aa>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006714:	fa93 f3a3 	rbit	r3, r3
 8006718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800671c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800672c:	2320      	movs	r3, #32
 800672e:	e004      	b.n	800673a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006734:	fab3 f383 	clz	r3, r3
 8006738:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800673a:	429a      	cmp	r2, r3
 800673c:	d106      	bne.n	800674c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	2101      	movs	r1, #1
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fa70 	bl	8005c2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fa54 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 8006758:	4603      	mov	r3, r0
 800675a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <HAL_ADC_ConfigChannel+0x2e8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2102      	movs	r1, #2
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff fa49 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 800676e:	4603      	mov	r3, r0
 8006770:	0e9b      	lsrs	r3, r3, #26
 8006772:	f003 021f 	and.w	r2, r3, #31
 8006776:	e01e      	b.n	80067b6 <HAL_ADC_ConfigChannel+0x326>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2102      	movs	r1, #2
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff fa3e 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 8006784:	4603      	mov	r3, r0
 8006786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800678e:	fa93 f3a3 	rbit	r3, r3
 8006792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006796:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800679a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800679e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80067a6:	2320      	movs	r3, #32
 80067a8:	e004      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80067aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067ae:	fab3 f383 	clz	r3, r3
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <HAL_ADC_ConfigChannel+0x33e>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	0e9b      	lsrs	r3, r3, #26
 80067c8:	f003 031f 	and.w	r3, r3, #31
 80067cc:	e016      	b.n	80067fc <HAL_ADC_ConfigChannel+0x36c>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067da:	fa93 f3a3 	rbit	r3, r3
 80067de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80067e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80067e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80067ee:	2320      	movs	r3, #32
 80067f0:	e004      	b.n	80067fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80067f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067f6:	fab3 f383 	clz	r3, r3
 80067fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d106      	bne.n	800680e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2200      	movs	r2, #0
 8006806:	2102      	movs	r1, #2
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fa0f 	bl	8005c2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2103      	movs	r1, #3
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff f9f3 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 800681a:	4603      	mov	r3, r0
 800681c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <HAL_ADC_ConfigChannel+0x3aa>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2103      	movs	r1, #3
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff f9e8 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 8006830:	4603      	mov	r3, r0
 8006832:	0e9b      	lsrs	r3, r3, #26
 8006834:	f003 021f 	and.w	r2, r3, #31
 8006838:	e017      	b.n	800686a <HAL_ADC_ConfigChannel+0x3da>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2103      	movs	r1, #3
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff f9dd 	bl	8005c00 <LL_ADC_GetOffsetChannel>
 8006846:	4603      	mov	r3, r0
 8006848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800684c:	fa93 f3a3 	rbit	r3, r3
 8006850:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006854:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800685c:	2320      	movs	r3, #32
 800685e:	e003      	b.n	8006868 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006862:	fab3 f383 	clz	r3, r3
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006872:	2b00      	cmp	r3, #0
 8006874:	d105      	bne.n	8006882 <HAL_ADC_ConfigChannel+0x3f2>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	0e9b      	lsrs	r3, r3, #26
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	e011      	b.n	80068a6 <HAL_ADC_ConfigChannel+0x416>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800688a:	fa93 f3a3 	rbit	r3, r3
 800688e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006892:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800689a:	2320      	movs	r3, #32
 800689c:	e003      	b.n	80068a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800689e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a0:	fab3 f383 	clz	r3, r3
 80068a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d106      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2200      	movs	r2, #0
 80068b0:	2103      	movs	r1, #3
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff f9ba 	bl	8005c2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff fb17 	bl	8005ef0 <LL_ADC_IsEnabled>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 813d 	bne.w	8006b44 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6819      	ldr	r1, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7ff fa76 	bl	8005dc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4aa2      	ldr	r2, [pc, #648]	; (8006b6c <HAL_ADC_ConfigChannel+0x6dc>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	f040 812e 	bne.w	8006b44 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10b      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x480>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	0e9b      	lsrs	r3, r3, #26
 80068fe:	3301      	adds	r3, #1
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	2b09      	cmp	r3, #9
 8006906:	bf94      	ite	ls
 8006908:	2301      	movls	r3, #1
 800690a:	2300      	movhi	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e019      	b.n	8006944 <HAL_ADC_ConfigChannel+0x4b4>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006918:	fa93 f3a3 	rbit	r3, r3
 800691c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800691e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006920:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006928:	2320      	movs	r3, #32
 800692a:	e003      	b.n	8006934 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800692c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800692e:	fab3 f383 	clz	r3, r3
 8006932:	b2db      	uxtb	r3, r3
 8006934:	3301      	adds	r3, #1
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2b09      	cmp	r3, #9
 800693c:	bf94      	ite	ls
 800693e:	2301      	movls	r3, #1
 8006940:	2300      	movhi	r3, #0
 8006942:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006944:	2b00      	cmp	r3, #0
 8006946:	d079      	beq.n	8006a3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006950:	2b00      	cmp	r3, #0
 8006952:	d107      	bne.n	8006964 <HAL_ADC_ConfigChannel+0x4d4>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	0e9b      	lsrs	r3, r3, #26
 800695a:	3301      	adds	r3, #1
 800695c:	069b      	lsls	r3, r3, #26
 800695e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006962:	e015      	b.n	8006990 <HAL_ADC_ConfigChannel+0x500>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696c:	fa93 f3a3 	rbit	r3, r3
 8006970:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006974:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800697c:	2320      	movs	r3, #32
 800697e:	e003      	b.n	8006988 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006982:	fab3 f383 	clz	r3, r3
 8006986:	b2db      	uxtb	r3, r3
 8006988:	3301      	adds	r3, #1
 800698a:	069b      	lsls	r3, r3, #26
 800698c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_ADC_ConfigChannel+0x520>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	0e9b      	lsrs	r3, r3, #26
 80069a2:	3301      	adds	r3, #1
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2101      	movs	r1, #1
 80069aa:	fa01 f303 	lsl.w	r3, r1, r3
 80069ae:	e017      	b.n	80069e0 <HAL_ADC_ConfigChannel+0x550>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b8:	fa93 f3a3 	rbit	r3, r3
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80069c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80069c8:	2320      	movs	r3, #32
 80069ca:	e003      	b.n	80069d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80069cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ce:	fab3 f383 	clz	r3, r3
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	3301      	adds	r3, #1
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2101      	movs	r1, #1
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	ea42 0103 	orr.w	r1, r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <HAL_ADC_ConfigChannel+0x576>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	0e9b      	lsrs	r3, r3, #26
 80069f6:	3301      	adds	r3, #1
 80069f8:	f003 021f 	and.w	r2, r3, #31
 80069fc:	4613      	mov	r3, r2
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	4413      	add	r3, r2
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	e018      	b.n	8006a38 <HAL_ADC_ConfigChannel+0x5a8>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	fa93 f3a3 	rbit	r3, r3
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006a1e:	2320      	movs	r3, #32
 8006a20:	e003      	b.n	8006a2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a24:	fab3 f383 	clz	r3, r3
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f003 021f 	and.w	r2, r3, #31
 8006a30:	4613      	mov	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4413      	add	r3, r2
 8006a36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	e07e      	b.n	8006b3a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <HAL_ADC_ConfigChannel+0x5c8>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	0e9b      	lsrs	r3, r3, #26
 8006a4e:	3301      	adds	r3, #1
 8006a50:	069b      	lsls	r3, r3, #26
 8006a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a56:	e015      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x5f4>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	fa93 f3a3 	rbit	r3, r3
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006a70:	2320      	movs	r3, #32
 8006a72:	e003      	b.n	8006a7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	fab3 f383 	clz	r3, r3
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	069b      	lsls	r3, r3, #26
 8006a80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <HAL_ADC_ConfigChannel+0x614>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	0e9b      	lsrs	r3, r3, #26
 8006a96:	3301      	adds	r3, #1
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa2:	e017      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x644>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	fa93 f3a3 	rbit	r3, r3
 8006ab0:	61fb      	str	r3, [r7, #28]
  return result;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006abc:	2320      	movs	r3, #32
 8006abe:	e003      	b.n	8006ac8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	fab3 f383 	clz	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2101      	movs	r1, #1
 8006ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad4:	ea42 0103 	orr.w	r1, r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <HAL_ADC_ConfigChannel+0x670>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	0e9b      	lsrs	r3, r3, #26
 8006aea:	3301      	adds	r3, #1
 8006aec:	f003 021f 	and.w	r2, r3, #31
 8006af0:	4613      	mov	r3, r2
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	4413      	add	r3, r2
 8006af6:	3b1e      	subs	r3, #30
 8006af8:	051b      	lsls	r3, r3, #20
 8006afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006afe:	e01b      	b.n	8006b38 <HAL_ADC_ConfigChannel+0x6a8>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	fa93 f3a3 	rbit	r3, r3
 8006b0c:	613b      	str	r3, [r7, #16]
  return result;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006b18:	2320      	movs	r3, #32
 8006b1a:	e003      	b.n	8006b24 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	fab3 f383 	clz	r3, r3
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	3301      	adds	r3, #1
 8006b26:	f003 021f 	and.w	r2, r3, #31
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	3b1e      	subs	r3, #30
 8006b32:	051b      	lsls	r3, r3, #20
 8006b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7ff f917 	bl	8005d72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <HAL_ADC_ConfigChannel+0x6e0>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80af 	beq.w	8006cb0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5a:	d004      	beq.n	8006b66 <HAL_ADC_ConfigChannel+0x6d6>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <HAL_ADC_ConfigChannel+0x6e4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d10a      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x6ec>
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <HAL_ADC_ConfigChannel+0x6e8>)
 8006b68:	e009      	b.n	8006b7e <HAL_ADC_ConfigChannel+0x6ee>
 8006b6a:	bf00      	nop
 8006b6c:	407f0000 	.word	0x407f0000
 8006b70:	80080000 	.word	0x80080000
 8006b74:	50000100 	.word	0x50000100
 8006b78:	50000300 	.word	0x50000300
 8006b7c:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <HAL_ADC_ConfigChannel+0x834>)
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f80c 	bl	8005b9c <LL_ADC_GetCommonPathInternalCh>
 8006b84:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a4e      	ldr	r2, [pc, #312]	; (8006cc8 <HAL_ADC_ConfigChannel+0x838>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_ADC_ConfigChannel+0x70c>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a4d      	ldr	r2, [pc, #308]	; (8006ccc <HAL_ADC_ConfigChannel+0x83c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d134      	bne.n	8006c06 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d12e      	bne.n	8006c06 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bb0:	d17e      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bba:	d004      	beq.n	8006bc6 <HAL_ADC_ConfigChannel+0x736>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a43      	ldr	r2, [pc, #268]	; (8006cd0 <HAL_ADC_ConfigChannel+0x840>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d101      	bne.n	8006bca <HAL_ADC_ConfigChannel+0x73a>
 8006bc6:	4a43      	ldr	r2, [pc, #268]	; (8006cd4 <HAL_ADC_ConfigChannel+0x844>)
 8006bc8:	e000      	b.n	8006bcc <HAL_ADC_ConfigChannel+0x73c>
 8006bca:	4a3e      	ldr	r2, [pc, #248]	; (8006cc4 <HAL_ADC_ConfigChannel+0x834>)
 8006bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f7fe ffcd 	bl	8005b76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006bdc:	4b3e      	ldr	r3, [pc, #248]	; (8006cd8 <HAL_ADC_ConfigChannel+0x848>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	099b      	lsrs	r3, r3, #6
 8006be2:	4a3e      	ldr	r2, [pc, #248]	; (8006cdc <HAL_ADC_ConfigChannel+0x84c>)
 8006be4:	fba2 2303 	umull	r2, r3, r2, r3
 8006be8:	099b      	lsrs	r3, r3, #6
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	4613      	mov	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bf6:	e002      	b.n	8006bfe <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f9      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c04:	e054      	b.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a35      	ldr	r2, [pc, #212]	; (8006ce0 <HAL_ADC_ConfigChannel+0x850>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d120      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11a      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c24:	d144      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c2e:	d004      	beq.n	8006c3a <HAL_ADC_ConfigChannel+0x7aa>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <HAL_ADC_ConfigChannel+0x840>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d101      	bne.n	8006c3e <HAL_ADC_ConfigChannel+0x7ae>
 8006c3a:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <HAL_ADC_ConfigChannel+0x844>)
 8006c3c:	e000      	b.n	8006c40 <HAL_ADC_ConfigChannel+0x7b0>
 8006c3e:	4a21      	ldr	r2, [pc, #132]	; (8006cc4 <HAL_ADC_ConfigChannel+0x834>)
 8006c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f7fe ff93 	bl	8005b76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c50:	e02e      	b.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a23      	ldr	r2, [pc, #140]	; (8006ce4 <HAL_ADC_ConfigChannel+0x854>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d129      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d123      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <HAL_ADC_ConfigChannel+0x840>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d01e      	beq.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c7a:	d004      	beq.n	8006c86 <HAL_ADC_ConfigChannel+0x7f6>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <HAL_ADC_ConfigChannel+0x840>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d101      	bne.n	8006c8a <HAL_ADC_ConfigChannel+0x7fa>
 8006c86:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <HAL_ADC_ConfigChannel+0x844>)
 8006c88:	e000      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x7fc>
 8006c8a:	4a0e      	ldr	r2, [pc, #56]	; (8006cc4 <HAL_ADC_ConfigChannel+0x834>)
 8006c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7fe ff6d 	bl	8005b76 <LL_ADC_SetCommonPathInternalCh>
 8006c9c:	e008      	b.n	8006cb0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca2:	f043 0220 	orr.w	r2, r3, #32
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006cb8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	37d8      	adds	r7, #216	; 0xd8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	50000700 	.word	0x50000700
 8006cc8:	c3210000 	.word	0xc3210000
 8006ccc:	90c00010 	.word	0x90c00010
 8006cd0:	50000100 	.word	0x50000100
 8006cd4:	50000300 	.word	0x50000300
 8006cd8:	20008fd8 	.word	0x20008fd8
 8006cdc:	053e2d63 	.word	0x053e2d63
 8006ce0:	c7520000 	.word	0xc7520000
 8006ce4:	cb840000 	.word	0xcb840000

08006ce8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff f8f9 	bl	8005ef0 <LL_ADC_IsEnabled>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d176      	bne.n	8006df2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	4b3c      	ldr	r3, [pc, #240]	; (8006dfc <ADC_Enable+0x114>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00d      	beq.n	8006d2e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	f043 0210 	orr.w	r2, r3, #16
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d22:	f043 0201 	orr.w	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e062      	b.n	8006df4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff f8c8 	bl	8005ec8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d40:	d004      	beq.n	8006d4c <ADC_Enable+0x64>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2e      	ldr	r2, [pc, #184]	; (8006e00 <ADC_Enable+0x118>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d101      	bne.n	8006d50 <ADC_Enable+0x68>
 8006d4c:	4b2d      	ldr	r3, [pc, #180]	; (8006e04 <ADC_Enable+0x11c>)
 8006d4e:	e000      	b.n	8006d52 <ADC_Enable+0x6a>
 8006d50:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <ADC_Enable+0x120>)
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe ff22 	bl	8005b9c <LL_ADC_GetCommonPathInternalCh>
 8006d58:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d013      	beq.n	8006d8a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d62:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <ADC_Enable+0x124>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <ADC_Enable+0x128>)
 8006d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6e:	099b      	lsrs	r3, r3, #6
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	4613      	mov	r3, r2
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006d7c:	e002      	b.n	8006d84 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f9      	bne.n	8006d7e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006d8a:	f7fe fed5 	bl	8005b38 <HAL_GetTick>
 8006d8e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d90:	e028      	b.n	8006de4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff f8aa 	bl	8005ef0 <LL_ADC_IsEnabled>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d104      	bne.n	8006dac <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff f88e 	bl	8005ec8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006dac:	f7fe fec4 	bl	8005b38 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d914      	bls.n	8006de4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d00d      	beq.n	8006de4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dcc:	f043 0210 	orr.w	r2, r3, #16
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd8:	f043 0201 	orr.w	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e007      	b.n	8006df4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d1cf      	bne.n	8006d92 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	8000003f 	.word	0x8000003f
 8006e00:	50000100 	.word	0x50000100
 8006e04:	50000300 	.word	0x50000300
 8006e08:	50000700 	.word	0x50000700
 8006e0c:	20008fd8 	.word	0x20008fd8
 8006e10:	053e2d63 	.word	0x053e2d63

08006e14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d14b      	bne.n	8006ec6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d021      	beq.n	8006e8c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe ff51 	bl	8005cf4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d032      	beq.n	8006ebe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d12b      	bne.n	8006ebe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d11f      	bne.n	8006ebe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e82:	f043 0201 	orr.w	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e8a:	e018      	b.n	8006ebe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d111      	bne.n	8006ebe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d105      	bne.n	8006ebe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb6:	f043 0201 	orr.w	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7fe faa2 	bl	8005408 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ec4:	e00e      	b.n	8006ee4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fad2 	bl	800647c <HAL_ADC_ErrorCallback>
}
 8006ed8:	e004      	b.n	8006ee4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4798      	blx	r3
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7fe f9f6 	bl	80052ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7ff faa4 	bl	800647c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <LL_ADC_IsEnabled>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <LL_ADC_IsEnabled+0x18>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <LL_ADC_IsEnabled+0x1a>
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <LL_ADC_REG_IsConversionOngoing>:
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d101      	bne.n	8006f7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006f88:	b590      	push	{r4, r7, lr}
 8006f8a:	b0a1      	sub	sp, #132	; 0x84
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e0cb      	b.n	800713e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fbe:	d102      	bne.n	8006fc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006fc0:	4b61      	ldr	r3, [pc, #388]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	e001      	b.n	8006fca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10b      	bne.n	8006fe8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd4:	f043 0220 	orr.w	r2, r3, #32
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0aa      	b.n	800713e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff ffb9 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 8006ff0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff ffb3 	bl	8006f62 <LL_ADC_REG_IsConversionOngoing>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 808c 	bne.w	800711c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007006:	2b00      	cmp	r3, #0
 8007008:	f040 8088 	bne.w	800711c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007014:	d004      	beq.n	8007020 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a4b      	ldr	r2, [pc, #300]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d101      	bne.n	8007024 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8007020:	4b4a      	ldr	r3, [pc, #296]	; (800714c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8007022:	e000      	b.n	8007026 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007024:	4b4a      	ldr	r3, [pc, #296]	; (8007150 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8007026:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d041      	beq.n	80070b4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6859      	ldr	r1, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007042:	035b      	lsls	r3, r3, #13
 8007044:	430b      	orrs	r3, r1
 8007046:	431a      	orrs	r2, r3
 8007048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800704a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007054:	d004      	beq.n	8007060 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a3b      	ldr	r2, [pc, #236]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10f      	bne.n	8007080 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8007060:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007064:	f7ff ff6a 	bl	8006f3c <LL_ADC_IsEnabled>
 8007068:	4604      	mov	r4, r0
 800706a:	4837      	ldr	r0, [pc, #220]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800706c:	f7ff ff66 	bl	8006f3c <LL_ADC_IsEnabled>
 8007070:	4603      	mov	r3, r0
 8007072:	4323      	orrs	r3, r4
 8007074:	2b00      	cmp	r3, #0
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	e008      	b.n	8007092 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8007080:	4834      	ldr	r0, [pc, #208]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007082:	f7ff ff5b 	bl	8006f3c <LL_ADC_IsEnabled>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d04c      	beq.n	8007130 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800709e:	f023 030f 	bic.w	r3, r3, #15
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	6892      	ldr	r2, [r2, #8]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	431a      	orrs	r2, r3
 80070ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80070b2:	e03d      	b.n	8007130 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80070b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070c8:	d004      	beq.n	80070d4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d10f      	bne.n	80070f4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80070d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80070d8:	f7ff ff30 	bl	8006f3c <LL_ADC_IsEnabled>
 80070dc:	4604      	mov	r4, r0
 80070de:	481a      	ldr	r0, [pc, #104]	; (8007148 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80070e0:	f7ff ff2c 	bl	8006f3c <LL_ADC_IsEnabled>
 80070e4:	4603      	mov	r3, r0
 80070e6:	4323      	orrs	r3, r4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bf0c      	ite	eq
 80070ec:	2301      	moveq	r3, #1
 80070ee:	2300      	movne	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	e008      	b.n	8007106 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80070f4:	4817      	ldr	r0, [pc, #92]	; (8007154 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80070f6:	f7ff ff21 	bl	8006f3c <LL_ADC_IsEnabled>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d012      	beq.n	8007130 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800710a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007112:	f023 030f 	bic.w	r3, r3, #15
 8007116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007118:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800711a:	e009      	b.n	8007130 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800712e:	e000      	b.n	8007132 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007130:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800713a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800713e:	4618      	mov	r0, r3
 8007140:	3784      	adds	r7, #132	; 0x84
 8007142:	46bd      	mov	sp, r7
 8007144:	bd90      	pop	{r4, r7, pc}
 8007146:	bf00      	nop
 8007148:	50000100 	.word	0x50000100
 800714c:	50000300 	.word	0x50000300
 8007150:	50000700 	.word	0x50000700
 8007154:	50000400 	.word	0x50000400

08007158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <__NVIC_SetPriorityGrouping+0x44>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007174:	4013      	ands	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800718a:	4a04      	ldr	r2, [pc, #16]	; (800719c <__NVIC_SetPriorityGrouping+0x44>)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	60d3      	str	r3, [r2, #12]
}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	e000ed00 	.word	0xe000ed00

080071a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <__NVIC_GetPriorityGrouping+0x18>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 0307 	and.w	r3, r3, #7
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	e000ed00 	.word	0xe000ed00

080071bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	db0b      	blt.n	80071e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	f003 021f 	and.w	r2, r3, #31
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <__NVIC_EnableIRQ+0x38>)
 80071d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2001      	movs	r0, #1
 80071de:	fa00 f202 	lsl.w	r2, r0, r2
 80071e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	e000e100 	.word	0xe000e100

080071f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	6039      	str	r1, [r7, #0]
 8007202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007208:	2b00      	cmp	r3, #0
 800720a:	db0a      	blt.n	8007222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	490c      	ldr	r1, [pc, #48]	; (8007244 <__NVIC_SetPriority+0x4c>)
 8007212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007216:	0112      	lsls	r2, r2, #4
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	440b      	add	r3, r1
 800721c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007220:	e00a      	b.n	8007238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	4908      	ldr	r1, [pc, #32]	; (8007248 <__NVIC_SetPriority+0x50>)
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	3b04      	subs	r3, #4
 8007230:	0112      	lsls	r2, r2, #4
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	440b      	add	r3, r1
 8007236:	761a      	strb	r2, [r3, #24]
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	e000e100 	.word	0xe000e100
 8007248:	e000ed00 	.word	0xe000ed00

0800724c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	f1c3 0307 	rsb	r3, r3, #7
 8007266:	2b04      	cmp	r3, #4
 8007268:	bf28      	it	cs
 800726a:	2304      	movcs	r3, #4
 800726c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3304      	adds	r3, #4
 8007272:	2b06      	cmp	r3, #6
 8007274:	d902      	bls.n	800727c <NVIC_EncodePriority+0x30>
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3b03      	subs	r3, #3
 800727a:	e000      	b.n	800727e <NVIC_EncodePriority+0x32>
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007280:	f04f 32ff 	mov.w	r2, #4294967295
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43da      	mvns	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	401a      	ands	r2, r3
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007294:	f04f 31ff 	mov.w	r1, #4294967295
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	fa01 f303 	lsl.w	r3, r1, r3
 800729e:	43d9      	mvns	r1, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a4:	4313      	orrs	r3, r2
         );
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3724      	adds	r7, #36	; 0x24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3b01      	subs	r3, #1
 80072c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072c4:	d301      	bcc.n	80072ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072c6:	2301      	movs	r3, #1
 80072c8:	e00f      	b.n	80072ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072ca:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <SysTick_Config+0x40>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072d2:	210f      	movs	r1, #15
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	f7ff ff8e 	bl	80071f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <SysTick_Config+0x40>)
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <SysTick_Config+0x40>)
 80072e4:	2207      	movs	r2, #7
 80072e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	e000e010 	.word	0xe000e010

080072f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff ff29 	bl	8007158 <__NVIC_SetPriorityGrouping>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b086      	sub	sp, #24
 8007312:	af00      	add	r7, sp, #0
 8007314:	4603      	mov	r3, r0
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800731c:	f7ff ff40 	bl	80071a0 <__NVIC_GetPriorityGrouping>
 8007320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f7ff ff90 	bl	800724c <NVIC_EncodePriority>
 800732c:	4602      	mov	r2, r0
 800732e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007332:	4611      	mov	r1, r2
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff ff5f 	bl	80071f8 <__NVIC_SetPriority>
}
 800733a:	bf00      	nop
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	4603      	mov	r3, r0
 800734a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800734c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff ff33 	bl	80071bc <__NVIC_EnableIRQ>
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ffa4 	bl	80072b4 <SysTick_Config>
 800736c:	4603      	mov	r3, r0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e08d      	b.n	80074a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	4b47      	ldr	r3, [pc, #284]	; (80074b0 <HAL_DMA_Init+0x138>)
 8007392:	429a      	cmp	r2, r3
 8007394:	d80f      	bhi.n	80073b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	4b45      	ldr	r3, [pc, #276]	; (80074b4 <HAL_DMA_Init+0x13c>)
 800739e:	4413      	add	r3, r2
 80073a0:	4a45      	ldr	r2, [pc, #276]	; (80074b8 <HAL_DMA_Init+0x140>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	091b      	lsrs	r3, r3, #4
 80073a8:	009a      	lsls	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a42      	ldr	r2, [pc, #264]	; (80074bc <HAL_DMA_Init+0x144>)
 80073b2:	641a      	str	r2, [r3, #64]	; 0x40
 80073b4:	e00e      	b.n	80073d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	4b40      	ldr	r3, [pc, #256]	; (80074c0 <HAL_DMA_Init+0x148>)
 80073be:	4413      	add	r3, r2
 80073c0:	4a3d      	ldr	r2, [pc, #244]	; (80074b8 <HAL_DMA_Init+0x140>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	009a      	lsls	r2, r3, #2
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a3c      	ldr	r2, [pc, #240]	; (80074c4 <HAL_DMA_Init+0x14c>)
 80073d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9b6 	bl	8007798 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007434:	d102      	bne.n	800743c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007450:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d010      	beq.n	800747c <HAL_DMA_Init+0x104>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b04      	cmp	r3, #4
 8007460:	d80c      	bhi.n	800747c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f9d6 	bl	8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	e008      	b.n	800748e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40020407 	.word	0x40020407
 80074b4:	bffdfff8 	.word	0xbffdfff8
 80074b8:	cccccccd 	.word	0xcccccccd
 80074bc:	40020000 	.word	0x40020000
 80074c0:	bffdfbf8 	.word	0xbffdfbf8
 80074c4:	40020400 	.word	0x40020400

080074c8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_DMA_Start_IT+0x20>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e066      	b.n	80075b6 <HAL_DMA_Start_IT+0xee>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d155      	bne.n	80075a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 f8fb 	bl	800771c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f042 020e 	orr.w	r2, r2, #14
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e00f      	b.n	8007560 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0204 	bic.w	r2, r2, #4
 800754e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 020a 	orr.w	r2, r2, #10
 800755e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800757c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007594:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0201 	orr.w	r2, r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e005      	b.n	80075b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
 80075b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	2204      	movs	r2, #4
 80075e0:	409a      	lsls	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4013      	ands	r3, r2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d026      	beq.n	8007638 <HAL_DMA_IRQHandler+0x7a>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d021      	beq.n	8007638 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d107      	bne.n	8007612 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0204 	bic.w	r2, r2, #4
 8007610:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	f003 021f 	and.w	r2, r3, #31
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	2104      	movs	r1, #4
 8007620:	fa01 f202 	lsl.w	r2, r1, r2
 8007624:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	2b00      	cmp	r3, #0
 800762c:	d071      	beq.n	8007712 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007636:	e06c      	b.n	8007712 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	2202      	movs	r2, #2
 8007642:	409a      	lsls	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4013      	ands	r3, r2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02e      	beq.n	80076aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d029      	beq.n	80076aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10b      	bne.n	800767c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 020a 	bic.w	r2, r2, #10
 8007672:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007680:	f003 021f 	and.w	r2, r3, #31
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	2102      	movs	r1, #2
 800768a:	fa01 f202 	lsl.w	r2, r1, r2
 800768e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d038      	beq.n	8007712 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80076a8:	e033      	b.n	8007712 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	2208      	movs	r2, #8
 80076b4:	409a      	lsls	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d02a      	beq.n	8007714 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d025      	beq.n	8007714 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 020e 	bic.w	r2, r2, #14
 80076d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076dc:	f003 021f 	and.w	r2, r3, #31
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	2101      	movs	r1, #1
 80076e6:	fa01 f202 	lsl.w	r2, r1, r2
 80076ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007712:	bf00      	nop
 8007714:	bf00      	nop
}
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007732:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007744:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	f003 021f 	and.w	r2, r3, #31
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	2101      	movs	r1, #1
 8007754:	fa01 f202 	lsl.w	r2, r1, r2
 8007758:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2b10      	cmp	r3, #16
 8007768:	d108      	bne.n	800777c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800777a:	e007      	b.n	800778c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	60da      	str	r2, [r3, #12]
}
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	4b16      	ldr	r3, [pc, #88]	; (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d802      	bhi.n	80077b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80077ac:	4b15      	ldr	r3, [pc, #84]	; (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	e001      	b.n	80077b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80077b4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	3b08      	subs	r3, #8
 80077c2:	4a12      	ldr	r2, [pc, #72]	; (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80077c4:	fba2 2303 	umull	r2, r3, r2, r3
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d0:	089b      	lsrs	r3, r3, #2
 80077d2:	009a      	lsls	r2, r3, #2
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	461a      	mov	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a0b      	ldr	r2, [pc, #44]	; (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80077e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2201      	movs	r2, #1
 80077ec:	409a      	lsls	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40020407 	.word	0x40020407
 8007804:	40020800 	.word	0x40020800
 8007808:	40020820 	.word	0x40020820
 800780c:	cccccccd 	.word	0xcccccccd
 8007810:	40020880 	.word	0x40020880

08007814 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	461a      	mov	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a08      	ldr	r2, [pc, #32]	; (8007858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007836:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3b01      	subs	r3, #1
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2201      	movs	r2, #1
 8007842:	409a      	lsls	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	1000823f 	.word	0x1000823f
 8007858:	40020940 	.word	0x40020940

0800785c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e033      	b.n	80078d6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fe f808 	bl	8005898 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f854 	bl	800793c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f822 	bl	80078de <FMAC_Reset>
 800789a:	4603      	mov	r3, r0
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10c      	bne.n	80078ba <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a4:	f043 0210 	orr.w	r2, r3, #16
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	22a0      	movs	r2, #160	; 0xa0
 80078b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
 80078b8:	e008      	b.n	80078cc <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078e6:	f7fe f927 	bl	8005b38 <HAL_GetTick>
 80078ea:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80078fa:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80078fc:	e00f      	b.n	800791e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80078fe:	f7fe f91b 	bl	8005b38 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800790c:	d907      	bls.n	800791e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007912:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e00a      	b.n	8007934 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e8      	bne.n	80078fe <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f807 	bl	8007958 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f81b 	bl	8007986 <FMAC_ResetOutputStateAndDataPointers>
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80079c2:	e15a      	b.n	8007c7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	2101      	movs	r1, #1
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	fa01 f303 	lsl.w	r3, r1, r3
 80079d0:	4013      	ands	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 814c 	beq.w	8007c74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d005      	beq.n	80079f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d130      	bne.n	8007a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2203      	movs	r2, #3
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43db      	mvns	r3, r3
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4013      	ands	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	f003 0201 	and.w	r2, r3, #1
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d017      	beq.n	8007a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43db      	mvns	r3, r3
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4013      	ands	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d123      	bne.n	8007ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	08da      	lsrs	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3208      	adds	r2, #8
 8007aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	220f      	movs	r2, #15
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	08da      	lsrs	r2, r3, #3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3208      	adds	r2, #8
 8007ae0:	6939      	ldr	r1, [r7, #16]
 8007ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	2203      	movs	r2, #3
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	43db      	mvns	r3, r3
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4013      	ands	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f003 0203 	and.w	r2, r3, #3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80a6 	beq.w	8007c74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b28:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2c:	4a5a      	ldr	r2, [pc, #360]	; (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b2e:	f043 0301 	orr.w	r3, r3, #1
 8007b32:	6613      	str	r3, [r2, #96]	; 0x60
 8007b34:	4b58      	ldr	r3, [pc, #352]	; (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	60bb      	str	r3, [r7, #8]
 8007b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b40:	4a56      	ldr	r2, [pc, #344]	; (8007c9c <HAL_GPIO_Init+0x2e8>)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	089b      	lsrs	r3, r3, #2
 8007b46:	3302      	adds	r3, #2
 8007b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	220f      	movs	r2, #15
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4013      	ands	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b6a:	d01f      	beq.n	8007bac <HAL_GPIO_Init+0x1f8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a4c      	ldr	r2, [pc, #304]	; (8007ca0 <HAL_GPIO_Init+0x2ec>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d019      	beq.n	8007ba8 <HAL_GPIO_Init+0x1f4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a4b      	ldr	r2, [pc, #300]	; (8007ca4 <HAL_GPIO_Init+0x2f0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <HAL_GPIO_Init+0x1f0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a4a      	ldr	r2, [pc, #296]	; (8007ca8 <HAL_GPIO_Init+0x2f4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00d      	beq.n	8007ba0 <HAL_GPIO_Init+0x1ec>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a49      	ldr	r2, [pc, #292]	; (8007cac <HAL_GPIO_Init+0x2f8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <HAL_GPIO_Init+0x1e8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a48      	ldr	r2, [pc, #288]	; (8007cb0 <HAL_GPIO_Init+0x2fc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d101      	bne.n	8007b98 <HAL_GPIO_Init+0x1e4>
 8007b94:	2305      	movs	r3, #5
 8007b96:	e00a      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007b98:	2306      	movs	r3, #6
 8007b9a:	e008      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	e006      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e004      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e002      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007bac:	2300      	movs	r3, #0
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	f002 0203 	and.w	r2, r2, #3
 8007bb4:	0092      	lsls	r2, r2, #2
 8007bb6:	4093      	lsls	r3, r2
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bbe:	4937      	ldr	r1, [pc, #220]	; (8007c9c <HAL_GPIO_Init+0x2e8>)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bcc:	4b39      	ldr	r3, [pc, #228]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007bf0:	4a30      	ldr	r2, [pc, #192]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007bf6:	4b2f      	ldr	r3, [pc, #188]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4013      	ands	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c1a:	4a26      	ldr	r2, [pc, #152]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007c20:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007c44:	4a1b      	ldr	r2, [pc, #108]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	43db      	mvns	r3, r3
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4013      	ands	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c6e:	4a11      	ldr	r2, [pc, #68]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	3301      	adds	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f47f ae9d 	bne.w	80079c4 <HAL_GPIO_Init+0x10>
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	48000400 	.word	0x48000400
 8007ca4:	48000800 	.word	0x48000800
 8007ca8:	48000c00 	.word	0x48000c00
 8007cac:	48001000 	.word	0x48001000
 8007cb0:	48001400 	.word	0x48001400
 8007cb4:	40010400 	.word	0x40010400

08007cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d141      	bne.n	8007d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cc6:	4b4b      	ldr	r3, [pc, #300]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d131      	bne.n	8007d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cd4:	4b47      	ldr	r3, [pc, #284]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cda:	4a46      	ldr	r2, [pc, #280]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ce4:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007cec:	4a41      	ldr	r2, [pc, #260]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007cf4:	4b40      	ldr	r3, [pc, #256]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2232      	movs	r2, #50	; 0x32
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
 8007cfe:	4a3f      	ldr	r2, [pc, #252]	; (8007dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d00:	fba2 2303 	umull	r2, r3, r2, r3
 8007d04:	0c9b      	lsrs	r3, r3, #18
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d0a:	e002      	b.n	8007d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d12:	4b38      	ldr	r3, [pc, #224]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d1e:	d102      	bne.n	8007d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f2      	bne.n	8007d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d26:	4b33      	ldr	r3, [pc, #204]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d32:	d158      	bne.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e057      	b.n	8007de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d38:	4b2e      	ldr	r3, [pc, #184]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d3e:	4a2d      	ldr	r2, [pc, #180]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d48:	e04d      	b.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d50:	d141      	bne.n	8007dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d52:	4b28      	ldr	r3, [pc, #160]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d5e:	d131      	bne.n	8007dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d60:	4b24      	ldr	r3, [pc, #144]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d66:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d70:	4b20      	ldr	r3, [pc, #128]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d78:	4a1e      	ldr	r2, [pc, #120]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d80:	4b1d      	ldr	r3, [pc, #116]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2232      	movs	r2, #50	; 0x32
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
 8007d8a:	4a1c      	ldr	r2, [pc, #112]	; (8007dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d90:	0c9b      	lsrs	r3, r3, #18
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d96:	e002      	b.n	8007d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d9e:	4b15      	ldr	r3, [pc, #84]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007daa:	d102      	bne.n	8007db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f2      	bne.n	8007d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007db2:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dbe:	d112      	bne.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e011      	b.n	8007de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dca:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007dd4:	e007      	b.n	8007de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dd6:	4b07      	ldr	r3, [pc, #28]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007dde:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007de4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	40007000 	.word	0x40007000
 8007df8:	20008fd8 	.word	0x20008fd8
 8007dfc:	431bde83 	.word	0x431bde83

08007e00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e04:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	4a04      	ldr	r2, [pc, #16]	; (8007e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e0e:	6093      	str	r3, [r2, #8]
}
 8007e10:	bf00      	nop
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40007000 	.word	0x40007000

08007e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e2fe      	b.n	8008430 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d075      	beq.n	8007f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e3e:	4b97      	ldr	r3, [pc, #604]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
 8007e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e48:	4b94      	ldr	r3, [pc, #592]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b0c      	cmp	r3, #12
 8007e56:	d102      	bne.n	8007e5e <HAL_RCC_OscConfig+0x3e>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d002      	beq.n	8007e64 <HAL_RCC_OscConfig+0x44>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d10b      	bne.n	8007e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e64:	4b8d      	ldr	r3, [pc, #564]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d05b      	beq.n	8007f28 <HAL_RCC_OscConfig+0x108>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d157      	bne.n	8007f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e2d9      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e84:	d106      	bne.n	8007e94 <HAL_RCC_OscConfig+0x74>
 8007e86:	4b85      	ldr	r3, [pc, #532]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a84      	ldr	r2, [pc, #528]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	e01d      	b.n	8007ed0 <HAL_RCC_OscConfig+0xb0>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x98>
 8007e9e:	4b7f      	ldr	r3, [pc, #508]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a7e      	ldr	r2, [pc, #504]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	4b7c      	ldr	r3, [pc, #496]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a7b      	ldr	r2, [pc, #492]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	e00b      	b.n	8007ed0 <HAL_RCC_OscConfig+0xb0>
 8007eb8:	4b78      	ldr	r3, [pc, #480]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a77      	ldr	r2, [pc, #476]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	4b75      	ldr	r3, [pc, #468]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a74      	ldr	r2, [pc, #464]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d013      	beq.n	8007f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7fd fe2e 	bl	8005b38 <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee0:	f7fd fe2a 	bl	8005b38 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b64      	cmp	r3, #100	; 0x64
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e29e      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ef2:	4b6a      	ldr	r3, [pc, #424]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCC_OscConfig+0xc0>
 8007efe:	e014      	b.n	8007f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fd fe1a 	bl	8005b38 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f08:	f7fd fe16 	bl	8005b38 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b64      	cmp	r3, #100	; 0x64
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e28a      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f1a:	4b60      	ldr	r3, [pc, #384]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f0      	bne.n	8007f08 <HAL_RCC_OscConfig+0xe8>
 8007f26:	e000      	b.n	8007f2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d075      	beq.n	8008022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f36:	4b59      	ldr	r3, [pc, #356]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 030c 	and.w	r3, r3, #12
 8007f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f40:	4b56      	ldr	r3, [pc, #344]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b0c      	cmp	r3, #12
 8007f4e:	d102      	bne.n	8007f56 <HAL_RCC_OscConfig+0x136>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d002      	beq.n	8007f5c <HAL_RCC_OscConfig+0x13c>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d11f      	bne.n	8007f9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f5c:	4b4f      	ldr	r3, [pc, #316]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <HAL_RCC_OscConfig+0x154>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e25d      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f74:	4b49      	ldr	r3, [pc, #292]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	061b      	lsls	r3, r3, #24
 8007f82:	4946      	ldr	r1, [pc, #280]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f88:	4b45      	ldr	r3, [pc, #276]	; (80080a0 <HAL_RCC_OscConfig+0x280>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fd fd87 	bl	8005aa0 <HAL_InitTick>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d043      	beq.n	8008020 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e249      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d023      	beq.n	8007fec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fa4:	4b3d      	ldr	r3, [pc, #244]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a3c      	ldr	r2, [pc, #240]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7fd fdc2 	bl	8005b38 <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fb8:	f7fd fdbe 	bl	8005b38 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e232      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fca:	4b34      	ldr	r3, [pc, #208]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f0      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd6:	4b31      	ldr	r3, [pc, #196]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	061b      	lsls	r3, r3, #24
 8007fe4:	492d      	ldr	r1, [pc, #180]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	604b      	str	r3, [r1, #4]
 8007fea:	e01a      	b.n	8008022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fec:	4b2b      	ldr	r3, [pc, #172]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a2a      	ldr	r2, [pc, #168]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8007ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff8:	f7fd fd9e 	bl	8005b38 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ffe:	e008      	b.n	8008012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008000:	f7fd fd9a 	bl	8005b38 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e20e      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008012:	4b22      	ldr	r3, [pc, #136]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f0      	bne.n	8008000 <HAL_RCC_OscConfig+0x1e0>
 800801e:	e000      	b.n	8008022 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d041      	beq.n	80080b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01c      	beq.n	8008070 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008036:	4b19      	ldr	r3, [pc, #100]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8008038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800803c:	4a17      	ldr	r2, [pc, #92]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008046:	f7fd fd77 	bl	8005b38 <HAL_GetTick>
 800804a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800804c:	e008      	b.n	8008060 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800804e:	f7fd fd73 	bl	8005b38 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e1e7      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008060:	4b0e      	ldr	r3, [pc, #56]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8008062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0ef      	beq.n	800804e <HAL_RCC_OscConfig+0x22e>
 800806e:	e020      	b.n	80080b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008070:	4b0a      	ldr	r3, [pc, #40]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8008072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008076:	4a09      	ldr	r2, [pc, #36]	; (800809c <HAL_RCC_OscConfig+0x27c>)
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008080:	f7fd fd5a 	bl	8005b38 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008086:	e00d      	b.n	80080a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008088:	f7fd fd56 	bl	8005b38 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d906      	bls.n	80080a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e1ca      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
 800809a:	bf00      	nop
 800809c:	40021000 	.word	0x40021000
 80080a0:	20008fdc 	.word	0x20008fdc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080a4:	4b8c      	ldr	r3, [pc, #560]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1ea      	bne.n	8008088 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80a6 	beq.w	800820c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c0:	2300      	movs	r3, #0
 80080c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080c4:	4b84      	ldr	r3, [pc, #528]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_RCC_OscConfig+0x2b4>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e000      	b.n	80080d6 <HAL_RCC_OscConfig+0x2b6>
 80080d4:	2300      	movs	r3, #0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00d      	beq.n	80080f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080da:	4b7f      	ldr	r3, [pc, #508]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080de:	4a7e      	ldr	r2, [pc, #504]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e4:	6593      	str	r3, [r2, #88]	; 0x58
 80080e6:	4b7c      	ldr	r3, [pc, #496]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80080f2:	2301      	movs	r3, #1
 80080f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080f6:	4b79      	ldr	r3, [pc, #484]	; (80082dc <HAL_RCC_OscConfig+0x4bc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d118      	bne.n	8008134 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008102:	4b76      	ldr	r3, [pc, #472]	; (80082dc <HAL_RCC_OscConfig+0x4bc>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a75      	ldr	r2, [pc, #468]	; (80082dc <HAL_RCC_OscConfig+0x4bc>)
 8008108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800810e:	f7fd fd13 	bl	8005b38 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008116:	f7fd fd0f 	bl	8005b38 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e183      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008128:	4b6c      	ldr	r3, [pc, #432]	; (80082dc <HAL_RCC_OscConfig+0x4bc>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d108      	bne.n	800814e <HAL_RCC_OscConfig+0x32e>
 800813c:	4b66      	ldr	r3, [pc, #408]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008142:	4a65      	ldr	r2, [pc, #404]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800814c:	e024      	b.n	8008198 <HAL_RCC_OscConfig+0x378>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b05      	cmp	r3, #5
 8008154:	d110      	bne.n	8008178 <HAL_RCC_OscConfig+0x358>
 8008156:	4b60      	ldr	r3, [pc, #384]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815c:	4a5e      	ldr	r2, [pc, #376]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800815e:	f043 0304 	orr.w	r3, r3, #4
 8008162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008166:	4b5c      	ldr	r3, [pc, #368]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816c:	4a5a      	ldr	r2, [pc, #360]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800816e:	f043 0301 	orr.w	r3, r3, #1
 8008172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008176:	e00f      	b.n	8008198 <HAL_RCC_OscConfig+0x378>
 8008178:	4b57      	ldr	r3, [pc, #348]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	4a56      	ldr	r2, [pc, #344]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008188:	4b53      	ldr	r3, [pc, #332]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	4a52      	ldr	r2, [pc, #328]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008190:	f023 0304 	bic.w	r3, r3, #4
 8008194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d016      	beq.n	80081ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a0:	f7fd fcca 	bl	8005b38 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081a6:	e00a      	b.n	80081be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a8:	f7fd fcc6 	bl	8005b38 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e138      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081be:	4b46      	ldr	r3, [pc, #280]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80081c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0ed      	beq.n	80081a8 <HAL_RCC_OscConfig+0x388>
 80081cc:	e015      	b.n	80081fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ce:	f7fd fcb3 	bl	8005b38 <HAL_GetTick>
 80081d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081d4:	e00a      	b.n	80081ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081d6:	f7fd fcaf 	bl	8005b38 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e121      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081ec:	4b3a      	ldr	r3, [pc, #232]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1ed      	bne.n	80081d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081fa:	7ffb      	ldrb	r3, [r7, #31]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d105      	bne.n	800820c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008200:	4b35      	ldr	r3, [pc, #212]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008204:	4a34      	ldr	r2, [pc, #208]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800820a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b00      	cmp	r3, #0
 8008216:	d03c      	beq.n	8008292 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01c      	beq.n	800825a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008220:	4b2d      	ldr	r3, [pc, #180]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008226:	4a2c      	ldr	r2, [pc, #176]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008230:	f7fd fc82 	bl	8005b38 <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008238:	f7fd fc7e 	bl	8005b38 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e0f2      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800824a:	4b23      	ldr	r3, [pc, #140]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800824c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0ef      	beq.n	8008238 <HAL_RCC_OscConfig+0x418>
 8008258:	e01b      	b.n	8008292 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800825a:	4b1f      	ldr	r3, [pc, #124]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800825c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008260:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826a:	f7fd fc65 	bl	8005b38 <HAL_GetTick>
 800826e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008272:	f7fd fc61 	bl	8005b38 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e0d5      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008284:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 8008286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1ef      	bne.n	8008272 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80c9 	beq.w	800842e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800829c:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 030c 	and.w	r3, r3, #12
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	f000 8083 	beq.w	80083b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d15e      	bne.n	8008370 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b2:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a08      	ldr	r2, [pc, #32]	; (80082d8 <HAL_RCC_OscConfig+0x4b8>)
 80082b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7fd fc3b 	bl	8005b38 <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082c4:	e00c      	b.n	80082e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c6:	f7fd fc37 	bl	8005b38 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d905      	bls.n	80082e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e0ab      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
 80082d8:	40021000 	.word	0x40021000
 80082dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082e0:	4b55      	ldr	r3, [pc, #340]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1ec      	bne.n	80082c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082ec:	4b52      	ldr	r3, [pc, #328]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	4b52      	ldr	r3, [pc, #328]	; (800843c <HAL_RCC_OscConfig+0x61c>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6a11      	ldr	r1, [r2, #32]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082fc:	3a01      	subs	r2, #1
 80082fe:	0112      	lsls	r2, r2, #4
 8008300:	4311      	orrs	r1, r2
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008306:	0212      	lsls	r2, r2, #8
 8008308:	4311      	orrs	r1, r2
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800830e:	0852      	lsrs	r2, r2, #1
 8008310:	3a01      	subs	r2, #1
 8008312:	0552      	lsls	r2, r2, #21
 8008314:	4311      	orrs	r1, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800831a:	0852      	lsrs	r2, r2, #1
 800831c:	3a01      	subs	r2, #1
 800831e:	0652      	lsls	r2, r2, #25
 8008320:	4311      	orrs	r1, r2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008326:	06d2      	lsls	r2, r2, #27
 8008328:	430a      	orrs	r2, r1
 800832a:	4943      	ldr	r1, [pc, #268]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 800832c:	4313      	orrs	r3, r2
 800832e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008330:	4b41      	ldr	r3, [pc, #260]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a40      	ldr	r2, [pc, #256]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 8008336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800833a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800833c:	4b3e      	ldr	r3, [pc, #248]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	4a3d      	ldr	r2, [pc, #244]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 8008342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008348:	f7fd fbf6 	bl	8005b38 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008350:	f7fd fbf2 	bl	8005b38 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e066      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008362:	4b35      	ldr	r3, [pc, #212]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f0      	beq.n	8008350 <HAL_RCC_OscConfig+0x530>
 800836e:	e05e      	b.n	800842e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008370:	4b31      	ldr	r3, [pc, #196]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a30      	ldr	r2, [pc, #192]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 8008376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800837a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fd fbdc 	bl	8005b38 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008384:	f7fd fbd8 	bl	8005b38 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e04c      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008396:	4b28      	ldr	r3, [pc, #160]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f0      	bne.n	8008384 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80083a2:	4b25      	ldr	r3, [pc, #148]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	4924      	ldr	r1, [pc, #144]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 80083a8:	4b25      	ldr	r3, [pc, #148]	; (8008440 <HAL_RCC_OscConfig+0x620>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	60cb      	str	r3, [r1, #12]
 80083ae:	e03e      	b.n	800842e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e039      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80083bc:	4b1e      	ldr	r3, [pc, #120]	; (8008438 <HAL_RCC_OscConfig+0x618>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f003 0203 	and.w	r2, r3, #3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d12c      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	3b01      	subs	r3, #1
 80083dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083de:	429a      	cmp	r2, r3
 80083e0:	d123      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d11b      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083fe:	429a      	cmp	r2, r3
 8008400:	d113      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	3b01      	subs	r3, #1
 8008410:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008412:	429a      	cmp	r2, r3
 8008414:	d109      	bne.n	800842a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008420:	085b      	lsrs	r3, r3, #1
 8008422:	3b01      	subs	r3, #1
 8008424:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008426:	429a      	cmp	r2, r3
 8008428:	d001      	beq.n	800842e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40021000 	.word	0x40021000
 800843c:	019f800c 	.word	0x019f800c
 8008440:	feeefffc 	.word	0xfeeefffc

08008444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e11e      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800845c:	4b91      	ldr	r3, [pc, #580]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d910      	bls.n	800848c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846a:	4b8e      	ldr	r3, [pc, #568]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f023 020f 	bic.w	r2, r3, #15
 8008472:	498c      	ldr	r1, [pc, #560]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	4313      	orrs	r3, r2
 8008478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800847a:	4b8a      	ldr	r3, [pc, #552]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d001      	beq.n	800848c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e106      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d073      	beq.n	8008580 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d129      	bne.n	80084f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a0:	4b81      	ldr	r3, [pc, #516]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e0f4      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80084b0:	f000 f964 	bl	800877c <RCC_GetSysClockFreqFromPLLSource>
 80084b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	4a7c      	ldr	r2, [pc, #496]	; (80086ac <HAL_RCC_ClockConfig+0x268>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d93f      	bls.n	800853e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084be:	4b7a      	ldr	r3, [pc, #488]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d033      	beq.n	800853e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d12f      	bne.n	800853e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084de:	4b72      	ldr	r3, [pc, #456]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084e6:	4a70      	ldr	r2, [pc, #448]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80084ee:	2380      	movs	r3, #128	; 0x80
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e024      	b.n	800853e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d107      	bne.n	800850c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084fc:	4b6a      	ldr	r3, [pc, #424]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0c6      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800850c:	4b66      	ldr	r3, [pc, #408]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e0be      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800851c:	f000 f8ce 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 8008520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	4a61      	ldr	r2, [pc, #388]	; (80086ac <HAL_RCC_ClockConfig+0x268>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d909      	bls.n	800853e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800852a:	4b5f      	ldr	r3, [pc, #380]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008532:	4a5d      	ldr	r2, [pc, #372]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008538:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800853a:	2380      	movs	r3, #128	; 0x80
 800853c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800853e:	4b5a      	ldr	r3, [pc, #360]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f023 0203 	bic.w	r2, r3, #3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	4957      	ldr	r1, [pc, #348]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800854c:	4313      	orrs	r3, r2
 800854e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008550:	f7fd faf2 	bl	8005b38 <HAL_GetTick>
 8008554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008556:	e00a      	b.n	800856e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008558:	f7fd faee 	bl	8005b38 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f241 3288 	movw	r2, #5000	; 0x1388
 8008566:	4293      	cmp	r3, r2
 8008568:	d901      	bls.n	800856e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e095      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800856e:	4b4e      	ldr	r3, [pc, #312]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 020c 	and.w	r2, r3, #12
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	429a      	cmp	r2, r3
 800857e:	d1eb      	bne.n	8008558 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d023      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008598:	4b43      	ldr	r3, [pc, #268]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	4a42      	ldr	r2, [pc, #264]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800859e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80085b0:	4b3d      	ldr	r3, [pc, #244]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085b8:	4a3b      	ldr	r2, [pc, #236]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085c0:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4936      	ldr	r1, [pc, #216]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	608b      	str	r3, [r1, #8]
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d105      	bne.n	80085e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085da:	4b33      	ldr	r3, [pc, #204]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	4a32      	ldr	r2, [pc, #200]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 80085e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085e6:	4b2f      	ldr	r3, [pc, #188]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d21d      	bcs.n	8008630 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f4:	4b2b      	ldr	r3, [pc, #172]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f023 020f 	bic.w	r2, r3, #15
 80085fc:	4929      	ldr	r1, [pc, #164]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	4313      	orrs	r3, r2
 8008602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008604:	f7fd fa98 	bl	8005b38 <HAL_GetTick>
 8008608:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800860a:	e00a      	b.n	8008622 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800860c:	f7fd fa94 	bl	8005b38 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	f241 3288 	movw	r2, #5000	; 0x1388
 800861a:	4293      	cmp	r3, r2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e03b      	b.n	800869a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008622:	4b20      	ldr	r3, [pc, #128]	; (80086a4 <HAL_RCC_ClockConfig+0x260>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d1ed      	bne.n	800860c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d008      	beq.n	800864e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800863c:	4b1a      	ldr	r3, [pc, #104]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	4917      	ldr	r1, [pc, #92]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0308 	and.w	r3, r3, #8
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800865a:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	490f      	ldr	r1, [pc, #60]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 800866a:	4313      	orrs	r3, r2
 800866c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800866e:	f000 f825 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 8008672:	4602      	mov	r2, r0
 8008674:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <HAL_RCC_ClockConfig+0x264>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	091b      	lsrs	r3, r3, #4
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	490c      	ldr	r1, [pc, #48]	; (80086b0 <HAL_RCC_ClockConfig+0x26c>)
 8008680:	5ccb      	ldrb	r3, [r1, r3]
 8008682:	f003 031f 	and.w	r3, r3, #31
 8008686:	fa22 f303 	lsr.w	r3, r2, r3
 800868a:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <HAL_RCC_ClockConfig+0x270>)
 800868c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800868e:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <HAL_RCC_ClockConfig+0x274>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f7fd fa04 	bl	8005aa0 <HAL_InitTick>
 8008698:	4603      	mov	r3, r0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40022000 	.word	0x40022000
 80086a8:	40021000 	.word	0x40021000
 80086ac:	04c4b400 	.word	0x04c4b400
 80086b0:	0800be08 	.word	0x0800be08
 80086b4:	20008fd8 	.word	0x20008fd8
 80086b8:	20008fdc 	.word	0x20008fdc

080086bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80086c2:	4b2c      	ldr	r3, [pc, #176]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d102      	bne.n	80086d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	e047      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086d4:	4b27      	ldr	r3, [pc, #156]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 030c 	and.w	r3, r3, #12
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d102      	bne.n	80086e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086e0:	4b25      	ldr	r3, [pc, #148]	; (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	e03e      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80086e6:	4b23      	ldr	r3, [pc, #140]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	d136      	bne.n	8008760 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086f2:	4b20      	ldr	r3, [pc, #128]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086fc:	4b1d      	ldr	r3, [pc, #116]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	091b      	lsrs	r3, r3, #4
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	3301      	adds	r3, #1
 8008708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b03      	cmp	r3, #3
 800870e:	d10c      	bne.n	800872a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008710:	4a19      	ldr	r2, [pc, #100]	; (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	fbb2 f3f3 	udiv	r3, r2, r3
 8008718:	4a16      	ldr	r2, [pc, #88]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800871a:	68d2      	ldr	r2, [r2, #12]
 800871c:	0a12      	lsrs	r2, r2, #8
 800871e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008722:	fb02 f303 	mul.w	r3, r2, r3
 8008726:	617b      	str	r3, [r7, #20]
      break;
 8008728:	e00c      	b.n	8008744 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800872a:	4a13      	ldr	r2, [pc, #76]	; (8008778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008732:	4a10      	ldr	r2, [pc, #64]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008734:	68d2      	ldr	r2, [r2, #12]
 8008736:	0a12      	lsrs	r2, r2, #8
 8008738:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	617b      	str	r3, [r7, #20]
      break;
 8008742:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008744:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	0e5b      	lsrs	r3, r3, #25
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	3301      	adds	r3, #1
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	fbb2 f3f3 	udiv	r3, r2, r3
 800875c:	613b      	str	r3, [r7, #16]
 800875e:	e001      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008764:	693b      	ldr	r3, [r7, #16]
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	40021000 	.word	0x40021000
 8008778:	00f42400 	.word	0x00f42400

0800877c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008782:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800878c:	4b1b      	ldr	r3, [pc, #108]	; (80087fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	091b      	lsrs	r3, r3, #4
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	3301      	adds	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b03      	cmp	r3, #3
 800879e:	d10c      	bne.n	80087ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087a0:	4a17      	ldr	r2, [pc, #92]	; (8008800 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a8:	4a14      	ldr	r2, [pc, #80]	; (80087fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087aa:	68d2      	ldr	r2, [r2, #12]
 80087ac:	0a12      	lsrs	r2, r2, #8
 80087ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087b2:	fb02 f303 	mul.w	r3, r2, r3
 80087b6:	617b      	str	r3, [r7, #20]
    break;
 80087b8:	e00c      	b.n	80087d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087ba:	4a11      	ldr	r2, [pc, #68]	; (8008800 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c2:	4a0e      	ldr	r2, [pc, #56]	; (80087fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087c4:	68d2      	ldr	r2, [r2, #12]
 80087c6:	0a12      	lsrs	r2, r2, #8
 80087c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087cc:	fb02 f303 	mul.w	r3, r2, r3
 80087d0:	617b      	str	r3, [r7, #20]
    break;
 80087d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	0e5b      	lsrs	r3, r3, #25
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	3301      	adds	r3, #1
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80087ee:	687b      	ldr	r3, [r7, #4]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	40021000 	.word	0x40021000
 8008800:	00f42400 	.word	0x00f42400

08008804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800880c:	2300      	movs	r3, #0
 800880e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008810:	2300      	movs	r3, #0
 8008812:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8098 	beq.w	8008952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008822:	2300      	movs	r3, #0
 8008824:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008826:	4b43      	ldr	r3, [pc, #268]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10d      	bne.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008832:	4b40      	ldr	r3, [pc, #256]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008836:	4a3f      	ldr	r2, [pc, #252]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883c:	6593      	str	r3, [r2, #88]	; 0x58
 800883e:	4b3d      	ldr	r3, [pc, #244]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008846:	60bb      	str	r3, [r7, #8]
 8008848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800884a:	2301      	movs	r3, #1
 800884c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800884e:	4b3a      	ldr	r3, [pc, #232]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a39      	ldr	r2, [pc, #228]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008858:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800885a:	f7fd f96d 	bl	8005b38 <HAL_GetTick>
 800885e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008860:	e009      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008862:	f7fd f969 	bl	8005b38 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d902      	bls.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	74fb      	strb	r3, [r7, #19]
        break;
 8008874:	e005      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008876:	4b30      	ldr	r3, [pc, #192]	; (8008938 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0ef      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008882:	7cfb      	ldrb	r3, [r7, #19]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d159      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008888:	4b2a      	ldr	r3, [pc, #168]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800888a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800888e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008892:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d01e      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d019      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088a4:	4b23      	ldr	r3, [pc, #140]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088b0:	4b20      	ldr	r3, [pc, #128]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b6:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088c0:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c6:	4a1b      	ldr	r2, [pc, #108]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088d0:	4a18      	ldr	r2, [pc, #96]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d016      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e2:	f7fd f929 	bl	8005b38 <HAL_GetTick>
 80088e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088e8:	e00b      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ea:	f7fd f925 	bl	8005b38 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d902      	bls.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	74fb      	strb	r3, [r7, #19]
            break;
 8008900:	e006      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008902:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0ec      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008910:	7cfb      	ldrb	r3, [r7, #19]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008916:	4b07      	ldr	r3, [pc, #28]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008924:	4903      	ldr	r1, [pc, #12]	; (8008934 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008926:	4313      	orrs	r3, r2
 8008928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800892c:	e008      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800892e:	7cfb      	ldrb	r3, [r7, #19]
 8008930:	74bb      	strb	r3, [r7, #18]
 8008932:	e005      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008934:	40021000 	.word	0x40021000
 8008938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893c:	7cfb      	ldrb	r3, [r7, #19]
 800893e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008940:	7c7b      	ldrb	r3, [r7, #17]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d105      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008946:	4ba7      	ldr	r3, [pc, #668]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894a:	4aa6      	ldr	r2, [pc, #664]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800894c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008950:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800895e:	4ba1      	ldr	r3, [pc, #644]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008964:	f023 0203 	bic.w	r2, r3, #3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	499d      	ldr	r1, [pc, #628]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00a      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008980:	4b98      	ldr	r3, [pc, #608]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008986:	f023 020c 	bic.w	r2, r3, #12
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	4995      	ldr	r1, [pc, #596]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008990:	4313      	orrs	r3, r2
 8008992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80089a2:	4b90      	ldr	r3, [pc, #576]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	498c      	ldr	r1, [pc, #560]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0308 	and.w	r3, r3, #8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00a      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089c4:	4b87      	ldr	r3, [pc, #540]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	4984      	ldr	r1, [pc, #528]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0310 	and.w	r3, r3, #16
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80089e6:	4b7f      	ldr	r3, [pc, #508]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	497b      	ldr	r1, [pc, #492]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00a      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a08:	4b76      	ldr	r3, [pc, #472]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	4973      	ldr	r1, [pc, #460]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a2a:	4b6e      	ldr	r3, [pc, #440]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	496a      	ldr	r1, [pc, #424]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a4c:	4b65      	ldr	r3, [pc, #404]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	4962      	ldr	r1, [pc, #392]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a6e:	4b5d      	ldr	r3, [pc, #372]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	4959      	ldr	r1, [pc, #356]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a90:	4b54      	ldr	r3, [pc, #336]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a96:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9e:	4951      	ldr	r1, [pc, #324]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d015      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ab2:	4b4c      	ldr	r3, [pc, #304]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	4948      	ldr	r1, [pc, #288]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ad0:	d105      	bne.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ad2:	4b44      	ldr	r3, [pc, #272]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	4a43      	ldr	r2, [pc, #268]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008adc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d015      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008aea:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	493a      	ldr	r1, [pc, #232]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b08:	d105      	bne.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b0a:	4b36      	ldr	r3, [pc, #216]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	4a35      	ldr	r2, [pc, #212]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b14:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d015      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b22:	4b30      	ldr	r3, [pc, #192]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b30:	492c      	ldr	r1, [pc, #176]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b40:	d105      	bne.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b42:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	4a27      	ldr	r2, [pc, #156]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b4c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d015      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b5a:	4b22      	ldr	r3, [pc, #136]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	491e      	ldr	r1, [pc, #120]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b78:	d105      	bne.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b7a:	4b1a      	ldr	r3, [pc, #104]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	4a19      	ldr	r2, [pc, #100]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b84:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d015      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b92:	4b14      	ldr	r3, [pc, #80]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba0:	4910      	ldr	r1, [pc, #64]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bb0:	d105      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	4a0b      	ldr	r2, [pc, #44]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bbc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d018      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd8:	4902      	ldr	r1, [pc, #8]	; (8008be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	e001      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008be4:	40021000 	.word	0x40021000
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bee:	d105      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008bf0:	4b21      	ldr	r3, [pc, #132]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	4a20      	ldr	r2, [pc, #128]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bfa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d015      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008c08:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c16:	4918      	ldr	r1, [pc, #96]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d105      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c28:	4b13      	ldr	r3, [pc, #76]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d015      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c40:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4e:	490a      	ldr	r1, [pc, #40]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c5e:	d105      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40021000 	.word	0x40021000

08008c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e049      	b.n	8008d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7fc fe18 	bl	80058d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 f878 	bl	8008db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e031      	b.n	8008da6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f8d5 	bl	8008f04 <TIM_SlaveTimer_SetConfig>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e018      	b.n	8008da6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d82:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d92:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a48      	ldr	r2, [pc, #288]	; (8008ee4 <TIM_Base_SetConfig+0x134>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d013      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dce:	d00f      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a45      	ldr	r2, [pc, #276]	; (8008ee8 <TIM_Base_SetConfig+0x138>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a44      	ldr	r2, [pc, #272]	; (8008eec <TIM_Base_SetConfig+0x13c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a43      	ldr	r2, [pc, #268]	; (8008ef0 <TIM_Base_SetConfig+0x140>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_Base_SetConfig+0x40>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a42      	ldr	r2, [pc, #264]	; (8008ef4 <TIM_Base_SetConfig+0x144>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d108      	bne.n	8008e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a37      	ldr	r2, [pc, #220]	; (8008ee4 <TIM_Base_SetConfig+0x134>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d01f      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e10:	d01b      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a34      	ldr	r2, [pc, #208]	; (8008ee8 <TIM_Base_SetConfig+0x138>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d017      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a33      	ldr	r2, [pc, #204]	; (8008eec <TIM_Base_SetConfig+0x13c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a32      	ldr	r2, [pc, #200]	; (8008ef0 <TIM_Base_SetConfig+0x140>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00f      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a32      	ldr	r2, [pc, #200]	; (8008ef8 <TIM_Base_SetConfig+0x148>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00b      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a31      	ldr	r2, [pc, #196]	; (8008efc <TIM_Base_SetConfig+0x14c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d007      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a30      	ldr	r2, [pc, #192]	; (8008f00 <TIM_Base_SetConfig+0x150>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d003      	beq.n	8008e4a <TIM_Base_SetConfig+0x9a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a2b      	ldr	r2, [pc, #172]	; (8008ef4 <TIM_Base_SetConfig+0x144>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d108      	bne.n	8008e5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	689a      	ldr	r2, [r3, #8]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a18      	ldr	r2, [pc, #96]	; (8008ee4 <TIM_Base_SetConfig+0x134>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d013      	beq.n	8008eb0 <TIM_Base_SetConfig+0x100>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <TIM_Base_SetConfig+0x140>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00f      	beq.n	8008eb0 <TIM_Base_SetConfig+0x100>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a19      	ldr	r2, [pc, #100]	; (8008ef8 <TIM_Base_SetConfig+0x148>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00b      	beq.n	8008eb0 <TIM_Base_SetConfig+0x100>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a18      	ldr	r2, [pc, #96]	; (8008efc <TIM_Base_SetConfig+0x14c>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d007      	beq.n	8008eb0 <TIM_Base_SetConfig+0x100>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a17      	ldr	r2, [pc, #92]	; (8008f00 <TIM_Base_SetConfig+0x150>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d003      	beq.n	8008eb0 <TIM_Base_SetConfig+0x100>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <TIM_Base_SetConfig+0x144>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d103      	bne.n	8008eb8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	691a      	ldr	r2, [r3, #16]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d105      	bne.n	8008ed6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f023 0201 	bic.w	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	611a      	str	r2, [r3, #16]
  }
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40012c00 	.word	0x40012c00
 8008ee8:	40000400 	.word	0x40000400
 8008eec:	40000800 	.word	0x40000800
 8008ef0:	40013400 	.word	0x40013400
 8008ef4:	40015000 	.word	0x40015000
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40014400 	.word	0x40014400
 8008f00:	40014800 	.word	0x40014800

08008f04 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f24:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f36:	f023 0307 	bic.w	r3, r3, #7
 8008f3a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	4a4e      	ldr	r2, [pc, #312]	; (800908c <TIM_SlaveTimer_SetConfig+0x188>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	f000 8092 	beq.w	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008f5a:	4a4c      	ldr	r2, [pc, #304]	; (800908c <TIM_SlaveTimer_SetConfig+0x188>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	f200 808b 	bhi.w	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008f62:	4a4b      	ldr	r2, [pc, #300]	; (8009090 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	f000 808a 	beq.w	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008f6a:	4a49      	ldr	r2, [pc, #292]	; (8009090 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	f200 8083 	bhi.w	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008f72:	4a48      	ldr	r2, [pc, #288]	; (8009094 <TIM_SlaveTimer_SetConfig+0x190>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	f000 8082 	beq.w	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008f7a:	4a46      	ldr	r2, [pc, #280]	; (8009094 <TIM_SlaveTimer_SetConfig+0x190>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d87b      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008f80:	4a45      	ldr	r2, [pc, #276]	; (8009098 <TIM_SlaveTimer_SetConfig+0x194>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d07b      	beq.n	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008f86:	4a44      	ldr	r2, [pc, #272]	; (8009098 <TIM_SlaveTimer_SetConfig+0x194>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d875      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008f8c:	4a43      	ldr	r2, [pc, #268]	; (800909c <TIM_SlaveTimer_SetConfig+0x198>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d075      	beq.n	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008f92:	4a42      	ldr	r2, [pc, #264]	; (800909c <TIM_SlaveTimer_SetConfig+0x198>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d86f      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008f98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f9c:	d06f      	beq.n	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008f9e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008fa2:	d869      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008fa4:	2b70      	cmp	r3, #112	; 0x70
 8008fa6:	d01a      	beq.n	8008fde <TIM_SlaveTimer_SetConfig+0xda>
 8008fa8:	2b70      	cmp	r3, #112	; 0x70
 8008faa:	d865      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008fac:	2b60      	cmp	r3, #96	; 0x60
 8008fae:	d059      	beq.n	8009064 <TIM_SlaveTimer_SetConfig+0x160>
 8008fb0:	2b60      	cmp	r3, #96	; 0x60
 8008fb2:	d861      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008fb4:	2b50      	cmp	r3, #80	; 0x50
 8008fb6:	d04b      	beq.n	8009050 <TIM_SlaveTimer_SetConfig+0x14c>
 8008fb8:	2b50      	cmp	r3, #80	; 0x50
 8008fba:	d85d      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008fbc:	2b40      	cmp	r3, #64	; 0x40
 8008fbe:	d019      	beq.n	8008ff4 <TIM_SlaveTimer_SetConfig+0xf0>
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d859      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008fc4:	2b30      	cmp	r3, #48	; 0x30
 8008fc6:	d05a      	beq.n	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008fc8:	2b30      	cmp	r3, #48	; 0x30
 8008fca:	d855      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	d056      	beq.n	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d851      	bhi.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d052      	beq.n	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d050      	beq.n	800907e <TIM_SlaveTimer_SetConfig+0x17a>
 8008fdc:	e04c      	b.n	8009078 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008fee:	f000 f8b6 	bl	800915e <TIM_ETR_SetConfig>
      break;
 8008ff2:	e045      	b.n	8009080 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b05      	cmp	r3, #5
 8008ffa:	d004      	beq.n	8009006 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009000:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009004:	d101      	bne.n	800900a <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e03b      	b.n	8009082 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6a1a      	ldr	r2, [r3, #32]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0201 	bic.w	r2, r2, #1
 8009020:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009030:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	4313      	orrs	r3, r2
 800903c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	621a      	str	r2, [r3, #32]
      break;
 800904e:	e017      	b.n	8009080 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800905c:	461a      	mov	r2, r3
 800905e:	f000 f81f 	bl	80090a0 <TIM_TI1_ConfigInputStage>
      break;
 8009062:	e00d      	b.n	8009080 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009070:	461a      	mov	r2, r3
 8009072:	f000 f844 	bl	80090fe <TIM_TI2_ConfigInputStage>
      break;
 8009076:	e003      	b.n	8009080 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	75fb      	strb	r3, [r7, #23]
      break;
 800907c:	e000      	b.n	8009080 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800907e:	bf00      	nop
  }

  return status;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	00100070 	.word	0x00100070
 8009090:	00100050 	.word	0x00100050
 8009094:	00100040 	.word	0x00100040
 8009098:	00100030 	.word	0x00100030
 800909c:	00100020 	.word	0x00100020

080090a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f023 0201 	bic.w	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f023 030a 	bic.w	r3, r3, #10
 80090dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	621a      	str	r2, [r3, #32]
}
 80090f2:	bf00      	nop
 80090f4:	371c      	adds	r7, #28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090fe:	b480      	push	{r7}
 8009100:	b087      	sub	sp, #28
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	f023 0210 	bic.w	r2, r3, #16
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	031b      	lsls	r3, r3, #12
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800913a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800915e:	b480      	push	{r7}
 8009160:	b087      	sub	sp, #28
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	021a      	lsls	r2, r3, #8
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	431a      	orrs	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	4313      	orrs	r3, r2
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	609a      	str	r2, [r3, #8]
}
 8009192:	bf00      	nop
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
	...

080091a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e06f      	b.n	8009298 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a31      	ldr	r2, [pc, #196]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d009      	beq.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a30      	ldr	r2, [pc, #192]	; (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d004      	beq.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a2e      	ldr	r2, [pc, #184]	; (80092ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d108      	bne.n	8009208 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800920e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1e      	ldr	r2, [pc, #120]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d01d      	beq.n	800926c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009238:	d018      	beq.n	800926c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a1c      	ldr	r2, [pc, #112]	; (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d013      	beq.n	800926c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1a      	ldr	r2, [pc, #104]	; (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d00e      	beq.n	800926c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a15      	ldr	r2, [pc, #84]	; (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d009      	beq.n	800926c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a16      	ldr	r2, [pc, #88]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d004      	beq.n	800926c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a11      	ldr	r2, [pc, #68]	; (80092ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d10c      	bne.n	8009286 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	4313      	orrs	r3, r2
 800927c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	40012c00 	.word	0x40012c00
 80092a8:	40013400 	.word	0x40013400
 80092ac:	40015000 	.word	0x40015000
 80092b0:	40000400 	.word	0x40000400
 80092b4:	40000800 	.word	0x40000800
 80092b8:	40014000 	.word	0x40014000

080092bc <arm_rfft_32_fast_init_f32>:
 80092bc:	b178      	cbz	r0, 80092de <arm_rfft_32_fast_init_f32+0x22>
 80092be:	b430      	push	{r4, r5}
 80092c0:	4908      	ldr	r1, [pc, #32]	; (80092e4 <arm_rfft_32_fast_init_f32+0x28>)
 80092c2:	4a09      	ldr	r2, [pc, #36]	; (80092e8 <arm_rfft_32_fast_init_f32+0x2c>)
 80092c4:	2310      	movs	r3, #16
 80092c6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80092ca:	8003      	strh	r3, [r0, #0]
 80092cc:	2520      	movs	r5, #32
 80092ce:	2414      	movs	r4, #20
 80092d0:	4b06      	ldr	r3, [pc, #24]	; (80092ec <arm_rfft_32_fast_init_f32+0x30>)
 80092d2:	8205      	strh	r5, [r0, #16]
 80092d4:	8184      	strh	r4, [r0, #12]
 80092d6:	6143      	str	r3, [r0, #20]
 80092d8:	bc30      	pop	{r4, r5}
 80092da:	2000      	movs	r0, #0
 80092dc:	4770      	bx	lr
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	4770      	bx	lr
 80092e4:	0800cdc8 	.word	0x0800cdc8
 80092e8:	08011700 	.word	0x08011700
 80092ec:	0801a480 	.word	0x0801a480

080092f0 <arm_rfft_64_fast_init_f32>:
 80092f0:	b178      	cbz	r0, 8009312 <arm_rfft_64_fast_init_f32+0x22>
 80092f2:	b430      	push	{r4, r5}
 80092f4:	4908      	ldr	r1, [pc, #32]	; (8009318 <arm_rfft_64_fast_init_f32+0x28>)
 80092f6:	4a09      	ldr	r2, [pc, #36]	; (800931c <arm_rfft_64_fast_init_f32+0x2c>)
 80092f8:	2320      	movs	r3, #32
 80092fa:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80092fe:	8003      	strh	r3, [r0, #0]
 8009300:	2540      	movs	r5, #64	; 0x40
 8009302:	2430      	movs	r4, #48	; 0x30
 8009304:	4b06      	ldr	r3, [pc, #24]	; (8009320 <arm_rfft_64_fast_init_f32+0x30>)
 8009306:	8205      	strh	r5, [r0, #16]
 8009308:	8184      	strh	r4, [r0, #12]
 800930a:	6143      	str	r3, [r0, #20]
 800930c:	bc30      	pop	{r4, r5}
 800930e:	2000      	movs	r0, #0
 8009310:	4770      	bx	lr
 8009312:	f04f 30ff 	mov.w	r0, #4294967295
 8009316:	4770      	bx	lr
 8009318:	0800ef20 	.word	0x0800ef20
 800931c:	08015f80 	.word	0x08015f80
 8009320:	0801ed00 	.word	0x0801ed00

08009324 <arm_rfft_256_fast_init_f32>:
 8009324:	b180      	cbz	r0, 8009348 <arm_rfft_256_fast_init_f32+0x24>
 8009326:	b430      	push	{r4, r5}
 8009328:	4909      	ldr	r1, [pc, #36]	; (8009350 <arm_rfft_256_fast_init_f32+0x2c>)
 800932a:	4a0a      	ldr	r2, [pc, #40]	; (8009354 <arm_rfft_256_fast_init_f32+0x30>)
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009332:	8003      	strh	r3, [r0, #0]
 8009334:	f44f 7580 	mov.w	r5, #256	; 0x100
 8009338:	24d0      	movs	r4, #208	; 0xd0
 800933a:	4b07      	ldr	r3, [pc, #28]	; (8009358 <arm_rfft_256_fast_init_f32+0x34>)
 800933c:	8205      	strh	r5, [r0, #16]
 800933e:	8184      	strh	r4, [r0, #12]
 8009340:	6143      	str	r3, [r0, #20]
 8009342:	bc30      	pop	{r4, r5}
 8009344:	2000      	movs	r0, #0
 8009346:	4770      	bx	lr
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	0800cc28 	.word	0x0800cc28
 8009354:	08011300 	.word	0x08011300
 8009358:	0801a080 	.word	0x0801a080

0800935c <arm_rfft_512_fast_init_f32>:
 800935c:	b190      	cbz	r0, 8009384 <arm_rfft_512_fast_init_f32+0x28>
 800935e:	b430      	push	{r4, r5}
 8009360:	490a      	ldr	r1, [pc, #40]	; (800938c <arm_rfft_512_fast_init_f32+0x30>)
 8009362:	4a0b      	ldr	r2, [pc, #44]	; (8009390 <arm_rfft_512_fast_init_f32+0x34>)
 8009364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009368:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800936c:	8003      	strh	r3, [r0, #0]
 800936e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8009372:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8009376:	4b07      	ldr	r3, [pc, #28]	; (8009394 <arm_rfft_512_fast_init_f32+0x38>)
 8009378:	8205      	strh	r5, [r0, #16]
 800937a:	8184      	strh	r4, [r0, #12]
 800937c:	6143      	str	r3, [r0, #20]
 800937e:	bc30      	pop	{r4, r5}
 8009380:	2000      	movs	r0, #0
 8009382:	4770      	bx	lr
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	0800ebb0 	.word	0x0800ebb0
 8009390:	08015780 	.word	0x08015780
 8009394:	0801e500 	.word	0x0801e500

08009398 <arm_rfft_1024_fast_init_f32>:
 8009398:	b190      	cbz	r0, 80093c0 <arm_rfft_1024_fast_init_f32+0x28>
 800939a:	b430      	push	{r4, r5}
 800939c:	490a      	ldr	r1, [pc, #40]	; (80093c8 <arm_rfft_1024_fast_init_f32+0x30>)
 800939e:	4a0b      	ldr	r2, [pc, #44]	; (80093cc <arm_rfft_1024_fast_init_f32+0x34>)
 80093a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093a4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80093a8:	8003      	strh	r3, [r0, #0]
 80093aa:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80093ae:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <arm_rfft_1024_fast_init_f32+0x38>)
 80093b4:	8205      	strh	r5, [r0, #16]
 80093b6:	8184      	strh	r4, [r0, #12]
 80093b8:	6143      	str	r3, [r0, #20]
 80093ba:	bc30      	pop	{r4, r5}
 80093bc:	2000      	movs	r0, #0
 80093be:	4770      	bx	lr
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	0800ef80 	.word	0x0800ef80
 80093cc:	08016080 	.word	0x08016080
 80093d0:	08017080 	.word	0x08017080

080093d4 <arm_rfft_2048_fast_init_f32>:
 80093d4:	b190      	cbz	r0, 80093fc <arm_rfft_2048_fast_init_f32+0x28>
 80093d6:	b430      	push	{r4, r5}
 80093d8:	490a      	ldr	r1, [pc, #40]	; (8009404 <arm_rfft_2048_fast_init_f32+0x30>)
 80093da:	4a0b      	ldr	r2, [pc, #44]	; (8009408 <arm_rfft_2048_fast_init_f32+0x34>)
 80093dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80093e4:	8003      	strh	r3, [r0, #0]
 80093e6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80093ea:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80093ee:	4b07      	ldr	r3, [pc, #28]	; (800940c <arm_rfft_2048_fast_init_f32+0x38>)
 80093f0:	8205      	strh	r5, [r0, #16]
 80093f2:	8184      	strh	r4, [r0, #12]
 80093f4:	6143      	str	r3, [r0, #20]
 80093f6:	bc30      	pop	{r4, r5}
 80093f8:	2000      	movs	r0, #0
 80093fa:	4770      	bx	lr
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	0800be18 	.word	0x0800be18
 8009408:	0800f300 	.word	0x0800f300
 800940c:	08018080 	.word	0x08018080

08009410 <arm_rfft_4096_fast_init_f32>:
 8009410:	b190      	cbz	r0, 8009438 <arm_rfft_4096_fast_init_f32+0x28>
 8009412:	b430      	push	{r4, r5}
 8009414:	490a      	ldr	r1, [pc, #40]	; (8009440 <arm_rfft_4096_fast_init_f32+0x30>)
 8009416:	4a0b      	ldr	r2, [pc, #44]	; (8009444 <arm_rfft_4096_fast_init_f32+0x34>)
 8009418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800941c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009420:	8003      	strh	r3, [r0, #0]
 8009422:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8009426:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800942a:	4b07      	ldr	r3, [pc, #28]	; (8009448 <arm_rfft_4096_fast_init_f32+0x38>)
 800942c:	8205      	strh	r5, [r0, #16]
 800942e:	8184      	strh	r4, [r0, #12]
 8009430:	6143      	str	r3, [r0, #20]
 8009432:	bc30      	pop	{r4, r5}
 8009434:	2000      	movs	r0, #0
 8009436:	4770      	bx	lr
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	0800cdf0 	.word	0x0800cdf0
 8009444:	08011780 	.word	0x08011780
 8009448:	0801a500 	.word	0x0801a500

0800944c <arm_rfft_fast_init_f32>:
 800944c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009450:	d01f      	beq.n	8009492 <arm_rfft_fast_init_f32+0x46>
 8009452:	d90b      	bls.n	800946c <arm_rfft_fast_init_f32+0x20>
 8009454:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009458:	d019      	beq.n	800948e <arm_rfft_fast_init_f32+0x42>
 800945a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800945e:	d012      	beq.n	8009486 <arm_rfft_fast_init_f32+0x3a>
 8009460:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009464:	d00d      	beq.n	8009482 <arm_rfft_fast_init_f32+0x36>
 8009466:	f04f 30ff 	mov.w	r0, #4294967295
 800946a:	4770      	bx	lr
 800946c:	2940      	cmp	r1, #64	; 0x40
 800946e:	d00c      	beq.n	800948a <arm_rfft_fast_init_f32+0x3e>
 8009470:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009474:	d003      	beq.n	800947e <arm_rfft_fast_init_f32+0x32>
 8009476:	2920      	cmp	r1, #32
 8009478:	d1f5      	bne.n	8009466 <arm_rfft_fast_init_f32+0x1a>
 800947a:	4b07      	ldr	r3, [pc, #28]	; (8009498 <arm_rfft_fast_init_f32+0x4c>)
 800947c:	4718      	bx	r3
 800947e:	4b07      	ldr	r3, [pc, #28]	; (800949c <arm_rfft_fast_init_f32+0x50>)
 8009480:	4718      	bx	r3
 8009482:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <arm_rfft_fast_init_f32+0x54>)
 8009484:	4718      	bx	r3
 8009486:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <arm_rfft_fast_init_f32+0x58>)
 8009488:	4718      	bx	r3
 800948a:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <arm_rfft_fast_init_f32+0x5c>)
 800948c:	e7f6      	b.n	800947c <arm_rfft_fast_init_f32+0x30>
 800948e:	4b07      	ldr	r3, [pc, #28]	; (80094ac <arm_rfft_fast_init_f32+0x60>)
 8009490:	e7f4      	b.n	800947c <arm_rfft_fast_init_f32+0x30>
 8009492:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <arm_rfft_fast_init_f32+0x64>)
 8009494:	e7f2      	b.n	800947c <arm_rfft_fast_init_f32+0x30>
 8009496:	bf00      	nop
 8009498:	080092bd 	.word	0x080092bd
 800949c:	08009325 	.word	0x08009325
 80094a0:	08009399 	.word	0x08009399
 80094a4:	08009411 	.word	0x08009411
 80094a8:	080092f1 	.word	0x080092f1
 80094ac:	080093d5 	.word	0x080093d5
 80094b0:	0800935d 	.word	0x0800935d

080094b4 <stage_rfft_f32>:
 80094b4:	b410      	push	{r4}
 80094b6:	edd1 7a00 	vldr	s15, [r1]
 80094ba:	ed91 7a01 	vldr	s14, [r1, #4]
 80094be:	8804      	ldrh	r4, [r0, #0]
 80094c0:	6940      	ldr	r0, [r0, #20]
 80094c2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80094c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80094ca:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80094ce:	ee77 6a87 	vadd.f32	s13, s15, s14
 80094d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094d6:	3c01      	subs	r4, #1
 80094d8:	ee26 7a84 	vmul.f32	s14, s13, s8
 80094dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80094e0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80094e4:	ed82 7a00 	vstr	s14, [r2]
 80094e8:	edc2 7a01 	vstr	s15, [r2, #4]
 80094ec:	3010      	adds	r0, #16
 80094ee:	3210      	adds	r2, #16
 80094f0:	3b08      	subs	r3, #8
 80094f2:	3110      	adds	r1, #16
 80094f4:	ed11 5a02 	vldr	s10, [r1, #-8]
 80094f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80094fc:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009500:	edd3 4a03 	vldr	s9, [r3, #12]
 8009504:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009508:	ed10 6a01 	vldr	s12, [r0, #-4]
 800950c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8009510:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009514:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009518:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800951c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009520:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009524:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009528:	ee66 6a85 	vmul.f32	s13, s13, s10
 800952c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009530:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009534:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009538:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800953c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009540:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009544:	3c01      	subs	r4, #1
 8009546:	ed02 7a02 	vstr	s14, [r2, #-8]
 800954a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800954e:	f1a3 0308 	sub.w	r3, r3, #8
 8009552:	f101 0108 	add.w	r1, r1, #8
 8009556:	f100 0008 	add.w	r0, r0, #8
 800955a:	f102 0208 	add.w	r2, r2, #8
 800955e:	d1c9      	bne.n	80094f4 <stage_rfft_f32+0x40>
 8009560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop

08009568 <merge_rfft_f32>:
 8009568:	b410      	push	{r4}
 800956a:	edd1 7a00 	vldr	s15, [r1]
 800956e:	edd1 6a01 	vldr	s13, [r1, #4]
 8009572:	8804      	ldrh	r4, [r0, #0]
 8009574:	6940      	ldr	r0, [r0, #20]
 8009576:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800957a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800957e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009582:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009586:	ee67 7a84 	vmul.f32	s15, s15, s8
 800958a:	3c01      	subs	r4, #1
 800958c:	ed82 7a00 	vstr	s14, [r2]
 8009590:	edc2 7a01 	vstr	s15, [r2, #4]
 8009594:	b3dc      	cbz	r4, 800960e <merge_rfft_f32+0xa6>
 8009596:	00e3      	lsls	r3, r4, #3
 8009598:	3b08      	subs	r3, #8
 800959a:	440b      	add	r3, r1
 800959c:	3010      	adds	r0, #16
 800959e:	3210      	adds	r2, #16
 80095a0:	3110      	adds	r1, #16
 80095a2:	ed11 5a02 	vldr	s10, [r1, #-8]
 80095a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80095aa:	ed50 6a02 	vldr	s13, [r0, #-8]
 80095ae:	edd3 4a03 	vldr	s9, [r3, #12]
 80095b2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80095b6:	ed10 6a01 	vldr	s12, [r0, #-4]
 80095ba:	ee75 5a47 	vsub.f32	s11, s10, s14
 80095be:	ee37 7a05 	vadd.f32	s14, s14, s10
 80095c2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80095c6:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80095ca:	ee66 5a25 	vmul.f32	s11, s12, s11
 80095ce:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80095d2:	ee37 7a63 	vsub.f32	s14, s14, s7
 80095d6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80095da:	ee26 6a05 	vmul.f32	s12, s12, s10
 80095de:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80095e2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80095e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80095ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 80095ee:	ee67 7a84 	vmul.f32	s15, s15, s8
 80095f2:	3c01      	subs	r4, #1
 80095f4:	ed02 7a02 	vstr	s14, [r2, #-8]
 80095f8:	ed42 7a01 	vstr	s15, [r2, #-4]
 80095fc:	f1a3 0308 	sub.w	r3, r3, #8
 8009600:	f101 0108 	add.w	r1, r1, #8
 8009604:	f100 0008 	add.w	r0, r0, #8
 8009608:	f102 0208 	add.w	r2, r2, #8
 800960c:	d1c9      	bne.n	80095a2 <merge_rfft_f32+0x3a>
 800960e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009612:	4770      	bx	lr

08009614 <arm_rfft_fast_f32>:
 8009614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009618:	8a05      	ldrh	r5, [r0, #16]
 800961a:	086d      	lsrs	r5, r5, #1
 800961c:	8005      	strh	r5, [r0, #0]
 800961e:	4604      	mov	r4, r0
 8009620:	4616      	mov	r6, r2
 8009622:	461d      	mov	r5, r3
 8009624:	b14b      	cbz	r3, 800963a <arm_rfft_fast_f32+0x26>
 8009626:	f7ff ff9f 	bl	8009568 <merge_rfft_f32>
 800962a:	462a      	mov	r2, r5
 800962c:	4631      	mov	r1, r6
 800962e:	4620      	mov	r0, r4
 8009630:	2301      	movs	r3, #1
 8009632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009636:	f000 bb33 	b.w	8009ca0 <arm_cfft_f32>
 800963a:	460f      	mov	r7, r1
 800963c:	461a      	mov	r2, r3
 800963e:	2301      	movs	r3, #1
 8009640:	f000 fb2e 	bl	8009ca0 <arm_cfft_f32>
 8009644:	4632      	mov	r2, r6
 8009646:	4639      	mov	r1, r7
 8009648:	4620      	mov	r0, r4
 800964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	f7ff bf31 	b.w	80094b4 <stage_rfft_f32>
 8009652:	bf00      	nop

08009654 <arm_cfft_radix8by2_f32>:
 8009654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	ed2d 8b08 	vpush	{d8-d11}
 800965c:	4607      	mov	r7, r0
 800965e:	4608      	mov	r0, r1
 8009660:	f8b7 c000 	ldrh.w	ip, [r7]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800966a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800966e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009672:	f000 80b0 	beq.w	80097d6 <arm_cfft_radix8by2_f32+0x182>
 8009676:	008c      	lsls	r4, r1, #2
 8009678:	3410      	adds	r4, #16
 800967a:	f100 0310 	add.w	r3, r0, #16
 800967e:	1906      	adds	r6, r0, r4
 8009680:	3210      	adds	r2, #16
 8009682:	4444      	add	r4, r8
 8009684:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009688:	f108 0510 	add.w	r5, r8, #16
 800968c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009690:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009694:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009698:	ed14 4a03 	vldr	s8, [r4, #-12]
 800969c:	ed14 6a02 	vldr	s12, [r4, #-8]
 80096a0:	ed54 5a01 	vldr	s11, [r4, #-4]
 80096a4:	ed53 3a04 	vldr	s7, [r3, #-16]
 80096a8:	ed15 0a02 	vldr	s0, [r5, #-8]
 80096ac:	ed55 0a01 	vldr	s1, [r5, #-4]
 80096b0:	ed56 6a04 	vldr	s13, [r6, #-16]
 80096b4:	ed16 3a03 	vldr	s6, [r6, #-12]
 80096b8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80096bc:	ed13 5a02 	vldr	s10, [r3, #-8]
 80096c0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80096c4:	ed16 1a02 	vldr	s2, [r6, #-8]
 80096c8:	ed56 1a01 	vldr	s3, [r6, #-4]
 80096cc:	ee73 ba82 	vadd.f32	s23, s7, s4
 80096d0:	ee37 ba22 	vadd.f32	s22, s14, s5
 80096d4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80096d8:	ee33 9a04 	vadd.f32	s18, s6, s8
 80096dc:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80096e0:	ee75 aa00 	vadd.f32	s21, s10, s0
 80096e4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80096e8:	ee71 8a06 	vadd.f32	s17, s2, s12
 80096ec:	ed43 ba04 	vstr	s23, [r3, #-16]
 80096f0:	ed03 ba03 	vstr	s22, [r3, #-12]
 80096f4:	ed43 aa02 	vstr	s21, [r3, #-8]
 80096f8:	ed03 aa01 	vstr	s20, [r3, #-4]
 80096fc:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009700:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009704:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009708:	ed46 8a02 	vstr	s17, [r6, #-8]
 800970c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009710:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009714:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009718:	ed52 6a03 	vldr	s13, [r2, #-12]
 800971c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009720:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009724:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009728:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800972c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009730:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009734:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009738:	ee27 7a03 	vmul.f32	s14, s14, s6
 800973c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009740:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009744:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009748:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800974c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009750:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009754:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009758:	ed05 3a04 	vstr	s6, [r5, #-16]
 800975c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009760:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009764:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009768:	ee76 6a41 	vsub.f32	s13, s12, s2
 800976c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009770:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009774:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009778:	ed52 5a02 	vldr	s11, [r2, #-8]
 800977c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009780:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009784:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009788:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800978c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009790:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009794:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009798:	ee26 6a25 	vmul.f32	s12, s12, s11
 800979c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80097a0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80097a4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80097a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80097ac:	3310      	adds	r3, #16
 80097ae:	4563      	cmp	r3, ip
 80097b0:	ed45 5a02 	vstr	s11, [r5, #-8]
 80097b4:	f106 0610 	add.w	r6, r6, #16
 80097b8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80097bc:	f102 0210 	add.w	r2, r2, #16
 80097c0:	ed04 6a02 	vstr	s12, [r4, #-8]
 80097c4:	ed04 7a01 	vstr	s14, [r4, #-4]
 80097c8:	f105 0510 	add.w	r5, r5, #16
 80097cc:	f104 0410 	add.w	r4, r4, #16
 80097d0:	f47f af5c 	bne.w	800968c <arm_cfft_radix8by2_f32+0x38>
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	b28c      	uxth	r4, r1
 80097d8:	4621      	mov	r1, r4
 80097da:	2302      	movs	r3, #2
 80097dc:	f000 fec2 	bl	800a564 <arm_radix8_butterfly_f32>
 80097e0:	ecbd 8b08 	vpop	{d8-d11}
 80097e4:	4621      	mov	r1, r4
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4640      	mov	r0, r8
 80097ea:	2302      	movs	r3, #2
 80097ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f0:	f000 beb8 	b.w	800a564 <arm_radix8_butterfly_f32>

080097f4 <arm_cfft_radix8by4_f32>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	ed2d 8b0a 	vpush	{d8-d12}
 80097fc:	b08d      	sub	sp, #52	; 0x34
 80097fe:	460d      	mov	r5, r1
 8009800:	910b      	str	r1, [sp, #44]	; 0x2c
 8009802:	8801      	ldrh	r1, [r0, #0]
 8009804:	6842      	ldr	r2, [r0, #4]
 8009806:	900a      	str	r0, [sp, #40]	; 0x28
 8009808:	0849      	lsrs	r1, r1, #1
 800980a:	008b      	lsls	r3, r1, #2
 800980c:	18ee      	adds	r6, r5, r3
 800980e:	18f0      	adds	r0, r6, r3
 8009810:	edd0 5a00 	vldr	s11, [r0]
 8009814:	edd5 7a00 	vldr	s15, [r5]
 8009818:	ed96 7a00 	vldr	s14, [r6]
 800981c:	edd0 3a01 	vldr	s7, [r0, #4]
 8009820:	ed96 4a01 	vldr	s8, [r6, #4]
 8009824:	ed95 5a01 	vldr	s10, [r5, #4]
 8009828:	9008      	str	r0, [sp, #32]
 800982a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800982e:	18c7      	adds	r7, r0, r3
 8009830:	edd7 4a00 	vldr	s9, [r7]
 8009834:	ed97 3a01 	vldr	s6, [r7, #4]
 8009838:	9701      	str	r7, [sp, #4]
 800983a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800983e:	462c      	mov	r4, r5
 8009840:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009844:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009848:	ee16 ca90 	vmov	ip, s13
 800984c:	f844 cb08 	str.w	ip, [r4], #8
 8009850:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009854:	edd6 5a01 	vldr	s11, [r6, #4]
 8009858:	edd7 2a01 	vldr	s5, [r7, #4]
 800985c:	9404      	str	r4, [sp, #16]
 800985e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009862:	ee74 3a27 	vadd.f32	s7, s8, s15
 8009866:	ee36 6a47 	vsub.f32	s12, s12, s14
 800986a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800986e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8009872:	0849      	lsrs	r1, r1, #1
 8009874:	f102 0e08 	add.w	lr, r2, #8
 8009878:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800987c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009880:	9109      	str	r1, [sp, #36]	; 0x24
 8009882:	ee35 4a47 	vsub.f32	s8, s10, s14
 8009886:	f1a1 0902 	sub.w	r9, r1, #2
 800988a:	f8cd e00c 	str.w	lr, [sp, #12]
 800988e:	4631      	mov	r1, r6
 8009890:	ee13 ea90 	vmov	lr, s7
 8009894:	ee36 6a64 	vsub.f32	s12, s12, s9
 8009898:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800989c:	4604      	mov	r4, r0
 800989e:	edc5 5a01 	vstr	s11, [r5, #4]
 80098a2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80098a6:	f841 eb08 	str.w	lr, [r1], #8
 80098aa:	ee34 5a24 	vadd.f32	s10, s8, s9
 80098ae:	ee16 ea10 	vmov	lr, s12
 80098b2:	ed86 5a01 	vstr	s10, [r6, #4]
 80098b6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80098ba:	f844 eb08 	str.w	lr, [r4], #8
 80098be:	ee77 7a83 	vadd.f32	s15, s15, s6
 80098c2:	edc0 6a01 	vstr	s13, [r0, #4]
 80098c6:	9405      	str	r4, [sp, #20]
 80098c8:	4604      	mov	r4, r0
 80098ca:	ee17 0a90 	vmov	r0, s15
 80098ce:	9106      	str	r1, [sp, #24]
 80098d0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80098d4:	f102 0110 	add.w	r1, r2, #16
 80098d8:	46bc      	mov	ip, r7
 80098da:	9100      	str	r1, [sp, #0]
 80098dc:	f847 0b08 	str.w	r0, [r7], #8
 80098e0:	f102 0118 	add.w	r1, r2, #24
 80098e4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80098e8:	9102      	str	r1, [sp, #8]
 80098ea:	ed8c 7a01 	vstr	s14, [ip, #4]
 80098ee:	9007      	str	r0, [sp, #28]
 80098f0:	f000 8134 	beq.w	8009b5c <arm_cfft_radix8by4_f32+0x368>
 80098f4:	f102 0920 	add.w	r9, r2, #32
 80098f8:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80098fc:	9a01      	ldr	r2, [sp, #4]
 80098fe:	f8dd a000 	ldr.w	sl, [sp]
 8009902:	3b0c      	subs	r3, #12
 8009904:	4683      	mov	fp, r0
 8009906:	4463      	add	r3, ip
 8009908:	f105 0e10 	add.w	lr, r5, #16
 800990c:	f1a4 010c 	sub.w	r1, r4, #12
 8009910:	f104 0510 	add.w	r5, r4, #16
 8009914:	f1a6 0c0c 	sub.w	ip, r6, #12
 8009918:	f1a2 040c 	sub.w	r4, r2, #12
 800991c:	f106 0010 	add.w	r0, r6, #16
 8009920:	3210      	adds	r2, #16
 8009922:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8009926:	ed55 5a02 	vldr	s11, [r5, #-8]
 800992a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800992e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8009932:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009936:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800993a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800993e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8009942:	ee35 4a25 	vadd.f32	s8, s10, s11
 8009946:	ee30 6a26 	vadd.f32	s12, s0, s13
 800994a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800994e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009952:	ee37 7a21 	vadd.f32	s14, s14, s3
 8009956:	ee75 5a65 	vsub.f32	s11, s10, s11
 800995a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800995e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8009962:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009966:	ee36 7a07 	vadd.f32	s14, s12, s14
 800996a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800996e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009972:	ee70 3a67 	vsub.f32	s7, s0, s15
 8009976:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800997a:	ed94 7a02 	vldr	s14, [r4, #8]
 800997e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8009982:	ed91 ba02 	vldr	s22, [r1, #8]
 8009986:	edd3 9a02 	vldr	s19, [r3, #8]
 800998a:	edd4 2a01 	vldr	s5, [r4, #4]
 800998e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8009992:	ed93 5a01 	vldr	s10, [r3, #4]
 8009996:	edd1 0a01 	vldr	s1, [r1, #4]
 800999a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800999e:	ee32 2a47 	vsub.f32	s4, s4, s14
 80099a2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80099a6:	ee79 4a22 	vadd.f32	s9, s18, s5
 80099aa:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80099ae:	ee79 2a62 	vsub.f32	s5, s18, s5
 80099b2:	ed8c 7a02 	vstr	s14, [ip, #8]
 80099b6:	ed91 7a01 	vldr	s14, [r1, #4]
 80099ba:	edd3 8a01 	vldr	s17, [r3, #4]
 80099be:	ee34 7a87 	vadd.f32	s14, s9, s14
 80099c2:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80099c6:	ee37 7a28 	vadd.f32	s14, s14, s17
 80099ca:	ee32 9a60 	vsub.f32	s18, s4, s1
 80099ce:	ed8c 7a01 	vstr	s14, [ip, #4]
 80099d2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80099d6:	ed1a aa02 	vldr	s20, [sl, #-8]
 80099da:	ee73 8a22 	vadd.f32	s17, s6, s5
 80099de:	ee39 9a05 	vadd.f32	s18, s18, s10
 80099e2:	ee7a aac1 	vsub.f32	s21, s21, s2
 80099e6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80099ea:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80099ee:	ee69 ba07 	vmul.f32	s23, s18, s14
 80099f2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80099f6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80099fa:	ee63 ca87 	vmul.f32	s25, s7, s14
 80099fe:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8009a02:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8009a06:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009a0a:	ee73 3aea 	vsub.f32	s7, s7, s21
 8009a0e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009a12:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8009a16:	ee3b aaca 	vsub.f32	s20, s23, s20
 8009a1a:	ee34 4a67 	vsub.f32	s8, s8, s15
 8009a1e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8009a22:	ee36 6a48 	vsub.f32	s12, s12, s16
 8009a26:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8009a2a:	ed00 7a02 	vstr	s14, [r0, #-8]
 8009a2e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8009a32:	edc1 8a01 	vstr	s17, [r1, #4]
 8009a36:	ed81 aa02 	vstr	s20, [r1, #8]
 8009a3a:	ed59 3a04 	vldr	s7, [r9, #-16]
 8009a3e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8009a42:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8009a46:	ed59 6a03 	vldr	s13, [r9, #-12]
 8009a4a:	ee34 4a61 	vsub.f32	s8, s8, s3
 8009a4e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8009a52:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8009a56:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009a5a:	ee24 9a23 	vmul.f32	s18, s8, s7
 8009a5e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8009a62:	ee24 4a26 	vmul.f32	s8, s8, s13
 8009a66:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009a6a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009a6e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8009a72:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009a76:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009a7a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8009a7e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8009a82:	ee75 6a60 	vsub.f32	s13, s10, s1
 8009a86:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8009a8a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009a8e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8009a92:	ed05 6a01 	vstr	s12, [r5, #-4]
 8009a96:	ed84 7a01 	vstr	s14, [r4, #4]
 8009a9a:	ed84 4a02 	vstr	s8, [r4, #8]
 8009a9e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8009aa2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8009aa6:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8009aaa:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8009aae:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009ab2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8009ab6:	ee67 2a26 	vmul.f32	s5, s14, s13
 8009aba:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8009abe:	ee26 5a25 	vmul.f32	s10, s12, s11
 8009ac2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ac6:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009aca:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009ace:	ee63 6a26 	vmul.f32	s13, s6, s13
 8009ad2:	ee23 3a25 	vmul.f32	s6, s6, s11
 8009ad6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009ada:	ee75 5a24 	vadd.f32	s11, s10, s9
 8009ade:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8009ae2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009ae6:	f1bb 0b01 	subs.w	fp, fp, #1
 8009aea:	ed42 5a02 	vstr	s11, [r2, #-8]
 8009aee:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009af2:	f10e 0e08 	add.w	lr, lr, #8
 8009af6:	ed83 3a02 	vstr	s6, [r3, #8]
 8009afa:	ed83 7a01 	vstr	s14, [r3, #4]
 8009afe:	f1ac 0c08 	sub.w	ip, ip, #8
 8009b02:	f10a 0a08 	add.w	sl, sl, #8
 8009b06:	f100 0008 	add.w	r0, r0, #8
 8009b0a:	f1a1 0108 	sub.w	r1, r1, #8
 8009b0e:	f109 0910 	add.w	r9, r9, #16
 8009b12:	f105 0508 	add.w	r5, r5, #8
 8009b16:	f1a4 0408 	sub.w	r4, r4, #8
 8009b1a:	f108 0818 	add.w	r8, r8, #24
 8009b1e:	f102 0208 	add.w	r2, r2, #8
 8009b22:	f1a3 0308 	sub.w	r3, r3, #8
 8009b26:	f47f aefc 	bne.w	8009922 <arm_cfft_radix8by4_f32+0x12e>
 8009b2a:	9907      	ldr	r1, [sp, #28]
 8009b2c:	9800      	ldr	r0, [sp, #0]
 8009b2e:	00cb      	lsls	r3, r1, #3
 8009b30:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009b34:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009b38:	9100      	str	r1, [sp, #0]
 8009b3a:	9904      	ldr	r1, [sp, #16]
 8009b3c:	4419      	add	r1, r3
 8009b3e:	9104      	str	r1, [sp, #16]
 8009b40:	9903      	ldr	r1, [sp, #12]
 8009b42:	4419      	add	r1, r3
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	9906      	ldr	r1, [sp, #24]
 8009b48:	4419      	add	r1, r3
 8009b4a:	9106      	str	r1, [sp, #24]
 8009b4c:	9905      	ldr	r1, [sp, #20]
 8009b4e:	441f      	add	r7, r3
 8009b50:	4419      	add	r1, r3
 8009b52:	9b02      	ldr	r3, [sp, #8]
 8009b54:	9105      	str	r1, [sp, #20]
 8009b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b5a:	9302      	str	r3, [sp, #8]
 8009b5c:	9904      	ldr	r1, [sp, #16]
 8009b5e:	9805      	ldr	r0, [sp, #20]
 8009b60:	ed91 4a00 	vldr	s8, [r1]
 8009b64:	edd0 6a00 	vldr	s13, [r0]
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	ed97 3a00 	vldr	s6, [r7]
 8009b6e:	edd3 7a00 	vldr	s15, [r3]
 8009b72:	edd0 4a01 	vldr	s9, [r0, #4]
 8009b76:	edd1 3a01 	vldr	s7, [r1, #4]
 8009b7a:	ed97 2a01 	vldr	s4, [r7, #4]
 8009b7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009b82:	9a03      	ldr	r2, [sp, #12]
 8009b84:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8009b88:	ee34 6a26 	vadd.f32	s12, s8, s13
 8009b8c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8009b90:	ee37 5a86 	vadd.f32	s10, s15, s12
 8009b94:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8009b98:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009b9c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009ba0:	ed81 5a00 	vstr	s10, [r1]
 8009ba4:	ed93 5a01 	vldr	s10, [r3, #4]
 8009ba8:	edd7 4a01 	vldr	s9, [r7, #4]
 8009bac:	ee35 5a85 	vadd.f32	s10, s11, s10
 8009bb0:	ee37 4a26 	vadd.f32	s8, s14, s13
 8009bb4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009bb8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8009bbc:	ed81 5a01 	vstr	s10, [r1, #4]
 8009bc0:	edd2 1a00 	vldr	s3, [r2]
 8009bc4:	edd2 2a01 	vldr	s5, [r2, #4]
 8009bc8:	ee34 5a83 	vadd.f32	s10, s9, s6
 8009bcc:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009bd0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009bd4:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009bd8:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009bdc:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009be0:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009be4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009be8:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009bec:	edc3 2a00 	vstr	s5, [r3]
 8009bf0:	ed83 5a01 	vstr	s10, [r3, #4]
 8009bf4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8009bf8:	9b00      	ldr	r3, [sp, #0]
 8009bfa:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009bfe:	ed93 4a01 	vldr	s8, [r3, #4]
 8009c02:	ed93 5a00 	vldr	s10, [r3]
 8009c06:	9b02      	ldr	r3, [sp, #8]
 8009c08:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009c0c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009c10:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009c14:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009c18:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009c1c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009c20:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009c24:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009c28:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009c2c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009c30:	edc0 5a00 	vstr	s11, [r0]
 8009c34:	edd3 5a01 	vldr	s11, [r3, #4]
 8009c38:	edd3 6a00 	vldr	s13, [r3]
 8009c3c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009c40:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009c44:	ee27 6a26 	vmul.f32	s12, s14, s13
 8009c48:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009c4c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009c50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009c54:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009c58:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009c5c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009c60:	edc7 7a00 	vstr	s15, [r7]
 8009c64:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8009c68:	4621      	mov	r1, r4
 8009c6a:	686a      	ldr	r2, [r5, #4]
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	f000 fc79 	bl	800a564 <arm_radix8_butterfly_f32>
 8009c72:	4630      	mov	r0, r6
 8009c74:	4621      	mov	r1, r4
 8009c76:	686a      	ldr	r2, [r5, #4]
 8009c78:	2304      	movs	r3, #4
 8009c7a:	f000 fc73 	bl	800a564 <arm_radix8_butterfly_f32>
 8009c7e:	9808      	ldr	r0, [sp, #32]
 8009c80:	686a      	ldr	r2, [r5, #4]
 8009c82:	4621      	mov	r1, r4
 8009c84:	2304      	movs	r3, #4
 8009c86:	f000 fc6d 	bl	800a564 <arm_radix8_butterfly_f32>
 8009c8a:	686a      	ldr	r2, [r5, #4]
 8009c8c:	9801      	ldr	r0, [sp, #4]
 8009c8e:	4621      	mov	r1, r4
 8009c90:	2304      	movs	r3, #4
 8009c92:	b00d      	add	sp, #52	; 0x34
 8009c94:	ecbd 8b0a 	vpop	{d8-d12}
 8009c98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	f000 bc62 	b.w	800a564 <arm_radix8_butterfly_f32>

08009ca0 <arm_cfft_f32>:
 8009ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca4:	2a01      	cmp	r2, #1
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	4617      	mov	r7, r2
 8009caa:	460c      	mov	r4, r1
 8009cac:	4698      	mov	r8, r3
 8009cae:	8805      	ldrh	r5, [r0, #0]
 8009cb0:	d056      	beq.n	8009d60 <arm_cfft_f32+0xc0>
 8009cb2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009cb6:	d063      	beq.n	8009d80 <arm_cfft_f32+0xe0>
 8009cb8:	d916      	bls.n	8009ce8 <arm_cfft_f32+0x48>
 8009cba:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009cbe:	d01a      	beq.n	8009cf6 <arm_cfft_f32+0x56>
 8009cc0:	d947      	bls.n	8009d52 <arm_cfft_f32+0xb2>
 8009cc2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009cc6:	d05b      	beq.n	8009d80 <arm_cfft_f32+0xe0>
 8009cc8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009ccc:	d105      	bne.n	8009cda <arm_cfft_f32+0x3a>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	6872      	ldr	r2, [r6, #4]
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 fc45 	bl	800a564 <arm_radix8_butterfly_f32>
 8009cda:	f1b8 0f00 	cmp.w	r8, #0
 8009cde:	d111      	bne.n	8009d04 <arm_cfft_f32+0x64>
 8009ce0:	2f01      	cmp	r7, #1
 8009ce2:	d016      	beq.n	8009d12 <arm_cfft_f32+0x72>
 8009ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce8:	2d20      	cmp	r5, #32
 8009cea:	d049      	beq.n	8009d80 <arm_cfft_f32+0xe0>
 8009cec:	d935      	bls.n	8009d5a <arm_cfft_f32+0xba>
 8009cee:	2d40      	cmp	r5, #64	; 0x40
 8009cf0:	d0ed      	beq.n	8009cce <arm_cfft_f32+0x2e>
 8009cf2:	2d80      	cmp	r5, #128	; 0x80
 8009cf4:	d1f1      	bne.n	8009cda <arm_cfft_f32+0x3a>
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff fcab 	bl	8009654 <arm_cfft_radix8by2_f32>
 8009cfe:	f1b8 0f00 	cmp.w	r8, #0
 8009d02:	d0ed      	beq.n	8009ce0 <arm_cfft_f32+0x40>
 8009d04:	68b2      	ldr	r2, [r6, #8]
 8009d06:	89b1      	ldrh	r1, [r6, #12]
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f000 f841 	bl	8009d90 <arm_bitreversal_32>
 8009d0e:	2f01      	cmp	r7, #1
 8009d10:	d1e8      	bne.n	8009ce4 <arm_cfft_f32+0x44>
 8009d12:	ee07 5a90 	vmov	s15, r5
 8009d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	d0de      	beq.n	8009ce4 <arm_cfft_f32+0x44>
 8009d26:	f104 0108 	add.w	r1, r4, #8
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	f101 0108 	add.w	r1, r1, #8
 8009d34:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009d38:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009d3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009d40:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009d44:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009d48:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009d4c:	d1ee      	bne.n	8009d2c <arm_cfft_f32+0x8c>
 8009d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d52:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009d56:	d0ba      	beq.n	8009cce <arm_cfft_f32+0x2e>
 8009d58:	e7bf      	b.n	8009cda <arm_cfft_f32+0x3a>
 8009d5a:	2d10      	cmp	r5, #16
 8009d5c:	d0cb      	beq.n	8009cf6 <arm_cfft_f32+0x56>
 8009d5e:	e7bc      	b.n	8009cda <arm_cfft_f32+0x3a>
 8009d60:	b19d      	cbz	r5, 8009d8a <arm_cfft_f32+0xea>
 8009d62:	f101 030c 	add.w	r3, r1, #12
 8009d66:	2200      	movs	r2, #0
 8009d68:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009d6c:	3201      	adds	r2, #1
 8009d6e:	eef1 7a67 	vneg.f32	s15, s15
 8009d72:	4295      	cmp	r5, r2
 8009d74:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009d78:	f103 0308 	add.w	r3, r3, #8
 8009d7c:	d1f4      	bne.n	8009d68 <arm_cfft_f32+0xc8>
 8009d7e:	e798      	b.n	8009cb2 <arm_cfft_f32+0x12>
 8009d80:	4621      	mov	r1, r4
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff fd36 	bl	80097f4 <arm_cfft_radix8by4_f32>
 8009d88:	e7a7      	b.n	8009cda <arm_cfft_f32+0x3a>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0aa      	beq.n	8009ce4 <arm_cfft_f32+0x44>
 8009d8e:	e7b9      	b.n	8009d04 <arm_cfft_f32+0x64>

08009d90 <arm_bitreversal_32>:
 8009d90:	b1e9      	cbz	r1, 8009dce <arm_bitreversal_32+0x3e>
 8009d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d94:	2500      	movs	r5, #0
 8009d96:	f102 0e02 	add.w	lr, r2, #2
 8009d9a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009d9e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8009da2:	08a4      	lsrs	r4, r4, #2
 8009da4:	089b      	lsrs	r3, r3, #2
 8009da6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8009daa:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009dae:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009db2:	00a6      	lsls	r6, r4, #2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	1d34      	adds	r4, r6, #4
 8009dbe:	3502      	adds	r5, #2
 8009dc0:	58c6      	ldr	r6, [r0, r3]
 8009dc2:	5907      	ldr	r7, [r0, r4]
 8009dc4:	50c7      	str	r7, [r0, r3]
 8009dc6:	428d      	cmp	r5, r1
 8009dc8:	5106      	str	r6, [r0, r4]
 8009dca:	d3e6      	bcc.n	8009d9a <arm_bitreversal_32+0xa>
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	4770      	bx	lr

08009dd0 <arm_mat_mult_f32>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	8845      	ldrh	r5, [r0, #2]
 8009dd6:	880b      	ldrh	r3, [r1, #0]
 8009dd8:	8806      	ldrh	r6, [r0, #0]
 8009dda:	6847      	ldr	r7, [r0, #4]
 8009ddc:	6854      	ldr	r4, [r2, #4]
 8009dde:	6848      	ldr	r0, [r1, #4]
 8009de0:	b08b      	sub	sp, #44	; 0x2c
 8009de2:	42ab      	cmp	r3, r5
 8009de4:	9109      	str	r1, [sp, #36]	; 0x24
 8009de6:	9604      	str	r6, [sp, #16]
 8009de8:	8849      	ldrh	r1, [r1, #2]
 8009dea:	f040 808a 	bne.w	8009f02 <arm_mat_mult_f32+0x132>
 8009dee:	8815      	ldrh	r5, [r2, #0]
 8009df0:	42b5      	cmp	r5, r6
 8009df2:	f040 8086 	bne.w	8009f02 <arm_mat_mult_f32+0x132>
 8009df6:	8852      	ldrh	r2, [r2, #2]
 8009df8:	428a      	cmp	r2, r1
 8009dfa:	f040 8082 	bne.w	8009f02 <arm_mat_mult_f32+0x132>
 8009dfe:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8009e02:	1d01      	adds	r1, r0, #4
 8009e04:	0116      	lsls	r6, r2, #4
 8009e06:	9108      	str	r1, [sp, #32]
 8009e08:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8009e0c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8009e10:	9101      	str	r1, [sp, #4]
 8009e12:	fb06 f108 	mul.w	r1, r6, r8
 8009e16:	0095      	lsls	r5, r2, #2
 8009e18:	9103      	str	r1, [sp, #12]
 8009e1a:	00d2      	lsls	r2, r2, #3
 8009e1c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8009e20:	f003 0903 	and.w	r9, r3, #3
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	f107 0b10 	add.w	fp, r7, #16
 8009e2a:	eb04 0a05 	add.w	sl, r4, r5
 8009e2e:	9107      	str	r1, [sp, #28]
 8009e30:	9202      	str	r2, [sp, #8]
 8009e32:	9306      	str	r3, [sp, #24]
 8009e34:	f1ab 0310 	sub.w	r3, fp, #16
 8009e38:	9305      	str	r3, [sp, #20]
 8009e3a:	9b07      	ldr	r3, [sp, #28]
 8009e3c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8009e40:	eb03 0c0a 	add.w	ip, r3, sl
 8009e44:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009f0c <arm_mat_mult_f32+0x13c>
 8009e48:	f1b8 0f00 	cmp.w	r8, #0
 8009e4c:	d053      	beq.n	8009ef6 <arm_mat_mult_f32+0x126>
 8009e4e:	9b02      	ldr	r3, [sp, #8]
 8009e50:	4644      	mov	r4, r8
 8009e52:	18c1      	adds	r1, r0, r3
 8009e54:	4602      	mov	r2, r0
 8009e56:	465b      	mov	r3, fp
 8009e58:	ed92 6a00 	vldr	s12, [r2]
 8009e5c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8009e60:	ed53 4a03 	vldr	s9, [r3, #-12]
 8009e64:	ed53 6a02 	vldr	s13, [r3, #-8]
 8009e68:	ed91 5a00 	vldr	s10, [r1]
 8009e6c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009e70:	1957      	adds	r7, r2, r5
 8009e72:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009e76:	ed97 6a00 	vldr	s12, [r7]
 8009e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e7e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009e82:	194f      	adds	r7, r1, r5
 8009e84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009e88:	ee26 7a85 	vmul.f32	s14, s13, s10
 8009e8c:	edd7 7a00 	vldr	s15, [r7]
 8009e90:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009e94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009e98:	3c01      	subs	r4, #1
 8009e9a:	4432      	add	r2, r6
 8009e9c:	4431      	add	r1, r6
 8009e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ea2:	f103 0310 	add.w	r3, r3, #16
 8009ea6:	d1d7      	bne.n	8009e58 <arm_mat_mult_f32+0x88>
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	9a01      	ldr	r2, [sp, #4]
 8009eac:	4418      	add	r0, r3
 8009eae:	f1b9 0f00 	cmp.w	r9, #0
 8009eb2:	d00b      	beq.n	8009ecc <arm_mat_mult_f32+0xfc>
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	edd0 6a00 	vldr	s13, [r0]
 8009eba:	ecb2 7a01 	vldmia	r2!, {s14}
 8009ebe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	4428      	add	r0, r5
 8009ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009eca:	d1f4      	bne.n	8009eb6 <arm_mat_mult_f32+0xe6>
 8009ecc:	ecec 7a01 	vstmia	ip!, {s15}
 8009ed0:	45d4      	cmp	ip, sl
 8009ed2:	4670      	mov	r0, lr
 8009ed4:	f10e 0e04 	add.w	lr, lr, #4
 8009ed8:	d1b4      	bne.n	8009e44 <arm_mat_mult_f32+0x74>
 8009eda:	9a01      	ldr	r2, [sp, #4]
 8009edc:	9b06      	ldr	r3, [sp, #24]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4419      	add	r1, r3
 8009ee2:	449b      	add	fp, r3
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	9101      	str	r1, [sp, #4]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	44aa      	add	sl, r5
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	d004      	beq.n	8009efa <arm_mat_mult_f32+0x12a>
 8009ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef2:	6858      	ldr	r0, [r3, #4]
 8009ef4:	e79e      	b.n	8009e34 <arm_mat_mult_f32+0x64>
 8009ef6:	9a05      	ldr	r2, [sp, #20]
 8009ef8:	e7d9      	b.n	8009eae <arm_mat_mult_f32+0xde>
 8009efa:	4618      	mov	r0, r3
 8009efc:	b00b      	add	sp, #44	; 0x2c
 8009efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f02:	f06f 0002 	mvn.w	r0, #2
 8009f06:	b00b      	add	sp, #44	; 0x2c
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	00000000 	.word	0x00000000

08009f10 <arm_mat_inverse_f32>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	8843      	ldrh	r3, [r0, #2]
 8009f16:	8804      	ldrh	r4, [r0, #0]
 8009f18:	684e      	ldr	r6, [r1, #4]
 8009f1a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009f1e:	b087      	sub	sp, #28
 8009f20:	429c      	cmp	r4, r3
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	9603      	str	r6, [sp, #12]
 8009f26:	f040 80ea 	bne.w	800a0fe <arm_mat_inverse_f32+0x1ee>
 8009f2a:	880a      	ldrh	r2, [r1, #0]
 8009f2c:	884b      	ldrh	r3, [r1, #2]
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	f040 80e5 	bne.w	800a0fe <arm_mat_inverse_f32+0x1ee>
 8009f34:	429c      	cmp	r4, r3
 8009f36:	f040 80e2 	bne.w	800a0fe <arm_mat_inverse_f32+0x1ee>
 8009f3a:	9005      	str	r0, [sp, #20]
 8009f3c:	b30c      	cbz	r4, 8009f82 <arm_mat_inverse_f32+0x72>
 8009f3e:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8009f42:	1e67      	subs	r7, r4, #1
 8009f44:	f846 bb04 	str.w	fp, [r6], #4
 8009f48:	d01b      	beq.n	8009f82 <arm_mat_inverse_f32+0x72>
 8009f4a:	f04f 0801 	mov.w	r8, #1
 8009f4e:	00ba      	lsls	r2, r7, #2
 8009f50:	eb06 0a02 	add.w	sl, r6, r2
 8009f54:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8009f58:	4630      	mov	r0, r6
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	f000 fdc2 	bl	800aae4 <memset>
 8009f60:	eb0a 0605 	add.w	r6, sl, r5
 8009f64:	462a      	mov	r2, r5
 8009f66:	2100      	movs	r1, #0
 8009f68:	4650      	mov	r0, sl
 8009f6a:	f1b8 0f00 	cmp.w	r8, #0
 8009f6e:	f000 80cb 	beq.w	800a108 <arm_mat_inverse_f32+0x1f8>
 8009f72:	f000 fdb7 	bl	800aae4 <memset>
 8009f76:	3f01      	subs	r7, #1
 8009f78:	f108 0801 	add.w	r8, r8, #1
 8009f7c:	f846 bb04 	str.w	fp, [r6], #4
 8009f80:	d1e5      	bne.n	8009f4e <arm_mat_inverse_f32+0x3e>
 8009f82:	9b01      	ldr	r3, [sp, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 80b5 	beq.w	800a0f4 <arm_mat_inverse_f32+0x1e4>
 8009f8a:	009d      	lsls	r5, r3, #2
 8009f8c:	eb09 0205 	add.w	r2, r9, r5
 8009f90:	46cc      	mov	ip, r9
 8009f92:	9202      	str	r2, [sp, #8]
 8009f94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009f98:	1d2a      	adds	r2, r5, #4
 8009f9a:	9204      	str	r2, [sp, #16]
 8009f9c:	462f      	mov	r7, r5
 8009f9e:	469e      	mov	lr, r3
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	9b02      	ldr	r3, [sp, #8]
 8009fa4:	eddc 6a00 	vldr	s13, [ip]
 8009fa8:	42b4      	cmp	r4, r6
 8009faa:	eba3 0b07 	sub.w	fp, r3, r7
 8009fae:	f000 80a1 	beq.w	800a0f4 <arm_mat_inverse_f32+0x1e4>
 8009fb2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a118 <arm_mat_inverse_f32+0x208>
 8009fb6:	4632      	mov	r2, r6
 8009fb8:	4663      	mov	r3, ip
 8009fba:	e00b      	b.n	8009fd4 <arm_mat_inverse_f32+0xc4>
 8009fbc:	eef4 7a47 	vcmp.f32	s15, s14
 8009fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc4:	f102 0201 	add.w	r2, r2, #1
 8009fc8:	bfc8      	it	gt
 8009fca:	eeb0 7a67 	vmovgt.f32	s14, s15
 8009fce:	42a2      	cmp	r2, r4
 8009fd0:	442b      	add	r3, r5
 8009fd2:	d014      	beq.n	8009ffe <arm_mat_inverse_f32+0xee>
 8009fd4:	edd3 7a00 	vldr	s15, [r3]
 8009fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe0:	eeb1 6a67 	vneg.f32	s12, s15
 8009fe4:	dcea      	bgt.n	8009fbc <arm_mat_inverse_f32+0xac>
 8009fe6:	eeb4 6a47 	vcmp.f32	s12, s14
 8009fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fee:	f102 0201 	add.w	r2, r2, #1
 8009ff2:	bfc8      	it	gt
 8009ff4:	eeb0 7a46 	vmovgt.f32	s14, s12
 8009ff8:	42a2      	cmp	r2, r4
 8009ffa:	442b      	add	r3, r5
 8009ffc:	d1ea      	bne.n	8009fd4 <arm_mat_inverse_f32+0xc4>
 8009ffe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a006:	d075      	beq.n	800a0f4 <arm_mat_inverse_f32+0x1e4>
 800a008:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a010:	d070      	beq.n	800a0f4 <arm_mat_inverse_f32+0x1e4>
 800a012:	4672      	mov	r2, lr
 800a014:	4663      	mov	r3, ip
 800a016:	ed93 7a00 	vldr	s14, [r3]
 800a01a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a01e:	3a01      	subs	r2, #1
 800a020:	ece3 7a01 	vstmia	r3!, {s15}
 800a024:	d1f7      	bne.n	800a016 <arm_mat_inverse_f32+0x106>
 800a026:	9901      	ldr	r1, [sp, #4]
 800a028:	464b      	mov	r3, r9
 800a02a:	ed93 7a00 	vldr	s14, [r3]
 800a02e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a032:	3901      	subs	r1, #1
 800a034:	ece3 7a01 	vstmia	r3!, {s15}
 800a038:	d1f7      	bne.n	800a02a <arm_mat_inverse_f32+0x11a>
 800a03a:	9803      	ldr	r0, [sp, #12]
 800a03c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800a040:	42b1      	cmp	r1, r6
 800a042:	d039      	beq.n	800a0b8 <arm_mat_inverse_f32+0x1a8>
 800a044:	eddb 6a00 	vldr	s13, [fp]
 800a048:	465a      	mov	r2, fp
 800a04a:	4673      	mov	r3, lr
 800a04c:	46e2      	mov	sl, ip
 800a04e:	ecba 7a01 	vldmia	sl!, {s14}
 800a052:	edd2 7a00 	vldr	s15, [r2]
 800a056:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a05a:	3b01      	subs	r3, #1
 800a05c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a060:	ece2 7a01 	vstmia	r2!, {s15}
 800a064:	d1f3      	bne.n	800a04e <arm_mat_inverse_f32+0x13e>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	44bb      	add	fp, r7
 800a06a:	4602      	mov	r2, r0
 800a06c:	46ca      	mov	sl, r9
 800a06e:	ecba 7a01 	vldmia	sl!, {s14}
 800a072:	edd2 7a00 	vldr	s15, [r2]
 800a076:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a07a:	3b01      	subs	r3, #1
 800a07c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a080:	ece2 7a01 	vstmia	r2!, {s15}
 800a084:	d1f3      	bne.n	800a06e <arm_mat_inverse_f32+0x15e>
 800a086:	4428      	add	r0, r5
 800a088:	3101      	adds	r1, #1
 800a08a:	428c      	cmp	r4, r1
 800a08c:	44c3      	add	fp, r8
 800a08e:	d1d7      	bne.n	800a040 <arm_mat_inverse_f32+0x130>
 800a090:	9b04      	ldr	r3, [sp, #16]
 800a092:	f1be 0e01 	subs.w	lr, lr, #1
 800a096:	f106 0601 	add.w	r6, r6, #1
 800a09a:	449c      	add	ip, r3
 800a09c:	f1a7 0704 	sub.w	r7, r7, #4
 800a0a0:	44a9      	add	r9, r5
 800a0a2:	f47f af7e 	bne.w	8009fa2 <arm_mat_inverse_f32+0x92>
 800a0a6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ae:	d006      	beq.n	800a0be <arm_mat_inverse_f32+0x1ae>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	b007      	add	sp, #28
 800a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b8:	44bb      	add	fp, r7
 800a0ba:	4428      	add	r0, r5
 800a0bc:	e7e4      	b.n	800a088 <arm_mat_inverse_f32+0x178>
 800a0be:	9b05      	ldr	r3, [sp, #20]
 800a0c0:	9a01      	ldr	r2, [sp, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	edd3 7a00 	vldr	s15, [r3]
 800a0c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a0cc:	fb02 f204 	mul.w	r2, r2, r4
 800a0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	bf08      	it	eq
 800a0d8:	3304      	addeq	r3, #4
 800a0da:	d007      	beq.n	800a0ec <arm_mat_inverse_f32+0x1dc>
 800a0dc:	e7e8      	b.n	800a0b0 <arm_mat_inverse_f32+0x1a0>
 800a0de:	ecf3 7a01 	vldmia	r3!, {s15}
 800a0e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ea:	d1e1      	bne.n	800a0b0 <arm_mat_inverse_f32+0x1a0>
 800a0ec:	f10e 0e01 	add.w	lr, lr, #1
 800a0f0:	4574      	cmp	r4, lr
 800a0f2:	d1f4      	bne.n	800a0de <arm_mat_inverse_f32+0x1ce>
 800a0f4:	f06f 0004 	mvn.w	r0, #4
 800a0f8:	b007      	add	sp, #28
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	f06f 0002 	mvn.w	r0, #2
 800a102:	b007      	add	sp, #28
 800a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a108:	4656      	mov	r6, sl
 800a10a:	3f01      	subs	r7, #1
 800a10c:	f846 bb04 	str.w	fp, [r6], #4
 800a110:	f47f af1b 	bne.w	8009f4a <arm_mat_inverse_f32+0x3a>
 800a114:	e735      	b.n	8009f82 <arm_mat_inverse_f32+0x72>
 800a116:	bf00      	nop
 800a118:	00000000 	.word	0x00000000

0800a11c <arm_mat_init_f32>:
 800a11c:	8001      	strh	r1, [r0, #0]
 800a11e:	8042      	strh	r2, [r0, #2]
 800a120:	6043      	str	r3, [r0, #4]
 800a122:	4770      	bx	lr

0800a124 <arm_biquad_cascade_df2T_f32>:
 800a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	7807      	ldrb	r7, [r0, #0]
 800a12a:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800a12e:	6885      	ldr	r5, [r0, #8]
 800a130:	3514      	adds	r5, #20
 800a132:	6846      	ldr	r6, [r0, #4]
 800a134:	3608      	adds	r6, #8
 800a136:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800a13a:	eb02 0b09 	add.w	fp, r2, r9
 800a13e:	f003 080f 	and.w	r8, r3, #15
 800a142:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 800a146:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800a14a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800a14e:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a152:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a156:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a15a:	46b4      	mov	ip, r6
 800a15c:	ed56 3a02 	vldr	s7, [r6, #-8]
 800a160:	ed16 4a01 	vldr	s8, [r6, #-4]
 800a164:	f1be 0f00 	cmp.w	lr, #0
 800a168:	f000 8195 	beq.w	800a496 <arm_biquad_cascade_df2T_f32+0x372>
 800a16c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800a170:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800a174:	4674      	mov	r4, lr
 800a176:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800a17a:	ee27 5a83 	vmul.f32	s10, s15, s6
 800a17e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a182:	ee67 4a03 	vmul.f32	s9, s14, s6
 800a186:	ee34 4a84 	vadd.f32	s8, s9, s8
 800a18a:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a18e:	ee34 4a84 	vadd.f32	s8, s9, s8
 800a192:	ee26 3a83 	vmul.f32	s6, s13, s6
 800a196:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800a19a:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 800a19e:	ee67 4aa3 	vmul.f32	s9, s15, s7
 800a1a2:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a1a6:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a1aa:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a1ae:	ee27 4a23 	vmul.f32	s8, s14, s7
 800a1b2:	ee35 5a04 	vadd.f32	s10, s10, s8
 800a1b6:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a1ba:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a1be:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800a1c2:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 800a1c6:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800a1ca:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a1ce:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a1d2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a1d6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a1da:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a1de:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a1e2:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a1e6:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a1ea:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a1ee:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 800a1f2:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800a1f6:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a1fa:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a1fe:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a202:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a206:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a20a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a20e:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a212:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a216:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a21a:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800a21e:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 800a222:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a226:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a22a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a22e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a232:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a236:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a23a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a23e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a242:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a246:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800a24a:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800a24e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a252:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a256:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a25a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a25e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a262:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a266:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a26a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a26e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a272:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 800a276:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800a27a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a27e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a282:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a286:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a28a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a28e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a292:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a296:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a29a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a29e:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 800a2a2:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 800a2a6:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a2aa:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a2ae:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a2b2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a2b6:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a2ba:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a2be:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a2c2:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a2c6:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a2ca:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800a2ce:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 800a2d2:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a2d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a2da:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a2de:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a2e2:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a2e6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a2ea:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a2ee:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a2f2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a2f6:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800a2fa:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800a2fe:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a302:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a306:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a30a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a30e:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a312:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a316:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a31a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a31e:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a322:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800a326:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800a32a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a32e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a332:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a336:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a33a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a33e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a342:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a346:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a34a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a34e:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 800a352:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 800a356:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a35a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a35e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a362:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a366:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a36a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a36e:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a372:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a376:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a37a:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800a37e:	ed10 4a04 	vldr	s8, [r0, #-16]
 800a382:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a386:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a38a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a38e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a392:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a396:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a39a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a39e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a3a2:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a3a6:	ed03 5a04 	vstr	s10, [r3, #-16]
 800a3aa:	ed10 4a03 	vldr	s8, [r0, #-12]
 800a3ae:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a3b2:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a3b6:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a3ba:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a3be:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a3c2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a3c6:	ee26 3a24 	vmul.f32	s6, s12, s9
 800a3ca:	ee33 3a05 	vadd.f32	s6, s6, s10
 800a3ce:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a3d2:	ed43 4a03 	vstr	s9, [r3, #-12]
 800a3d6:	ed10 4a02 	vldr	s8, [r0, #-8]
 800a3da:	ee27 5a84 	vmul.f32	s10, s15, s8
 800a3de:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a3e2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800a3e6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a3ea:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a3ee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800a3f2:	ee26 3a05 	vmul.f32	s6, s12, s10
 800a3f6:	ee33 3a24 	vadd.f32	s6, s6, s9
 800a3fa:	ee66 3a84 	vmul.f32	s7, s13, s8
 800a3fe:	ed03 5a02 	vstr	s10, [r3, #-8]
 800a402:	ed10 4a01 	vldr	s8, [r0, #-4]
 800a406:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a40a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a40e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a412:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a416:	ee67 3a04 	vmul.f32	s7, s14, s8
 800a41a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a41e:	ee66 3a24 	vmul.f32	s7, s12, s9
 800a422:	ee73 3a85 	vadd.f32	s7, s7, s10
 800a426:	ee26 5a84 	vmul.f32	s10, s13, s8
 800a42a:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800a42e:	ee34 4a05 	vadd.f32	s8, s8, s10
 800a432:	ed43 4a01 	vstr	s9, [r3, #-4]
 800a436:	3040      	adds	r0, #64	; 0x40
 800a438:	3340      	adds	r3, #64	; 0x40
 800a43a:	3c01      	subs	r4, #1
 800a43c:	f47f ae9b 	bne.w	800a176 <arm_biquad_cascade_df2T_f32+0x52>
 800a440:	4449      	add	r1, r9
 800a442:	465b      	mov	r3, fp
 800a444:	f1b8 0f00 	cmp.w	r8, #0
 800a448:	d019      	beq.n	800a47e <arm_biquad_cascade_df2T_f32+0x35a>
 800a44a:	eb01 000a 	add.w	r0, r1, sl
 800a44e:	ecf1 2a01 	vldmia	r1!, {s5}
 800a452:	ee27 3aa2 	vmul.f32	s6, s15, s5
 800a456:	ee33 3a23 	vadd.f32	s6, s6, s7
 800a45a:	ee67 3a22 	vmul.f32	s7, s14, s5
 800a45e:	ee33 4a84 	vadd.f32	s8, s7, s8
 800a462:	ee26 5a03 	vmul.f32	s10, s12, s6
 800a466:	ee75 3a04 	vadd.f32	s7, s10, s8
 800a46a:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800a46e:	ee25 4a83 	vmul.f32	s8, s11, s6
 800a472:	ee34 4a22 	vadd.f32	s8, s8, s5
 800a476:	eca3 3a01 	vstmia	r3!, {s6}
 800a47a:	4281      	cmp	r1, r0
 800a47c:	d1e7      	bne.n	800a44e <arm_biquad_cascade_df2T_f32+0x32a>
 800a47e:	ed4c 3a02 	vstr	s7, [ip, #-8]
 800a482:	ed0c 4a01 	vstr	s8, [ip, #-4]
 800a486:	3514      	adds	r5, #20
 800a488:	3608      	adds	r6, #8
 800a48a:	4611      	mov	r1, r2
 800a48c:	3f01      	subs	r7, #1
 800a48e:	f47f ae5a 	bne.w	800a146 <arm_biquad_cascade_df2T_f32+0x22>
 800a492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a496:	4613      	mov	r3, r2
 800a498:	e7d4      	b.n	800a444 <arm_biquad_cascade_df2T_f32+0x320>
	...

0800a49c <arm_biquad_cascade_df2T_init_f32>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	6082      	str	r2, [r0, #8]
 800a4a0:	7001      	strb	r1, [r0, #0]
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	00ca      	lsls	r2, r1, #3
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	f000 fb1b 	bl	800aae4 <memset>
 800a4ae:	6060      	str	r0, [r4, #4]
 800a4b0:	bd10      	pop	{r4, pc}
 800a4b2:	bf00      	nop

0800a4b4 <arm_dot_prod_f32>:
 800a4b4:	b4f0      	push	{r4, r5, r6, r7}
 800a4b6:	0897      	lsrs	r7, r2, #2
 800a4b8:	eddf 5a29 	vldr	s11, [pc, #164]	; 800a560 <arm_dot_prod_f32+0xac>
 800a4bc:	d02d      	beq.n	800a51a <arm_dot_prod_f32+0x66>
 800a4be:	f100 0510 	add.w	r5, r0, #16
 800a4c2:	f101 0410 	add.w	r4, r1, #16
 800a4c6:	463e      	mov	r6, r7
 800a4c8:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a4cc:	ed54 3a04 	vldr	s7, [r4, #-16]
 800a4d0:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a4d4:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a4d8:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a4dc:	ed54 4a02 	vldr	s9, [r4, #-8]
 800a4e0:	ed15 6a01 	vldr	s12, [r5, #-4]
 800a4e4:	ed14 5a01 	vldr	s10, [r4, #-4]
 800a4e8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a4ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a4f0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a4f4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a4f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a4fc:	ee66 6a05 	vmul.f32	s13, s12, s10
 800a500:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a504:	3e01      	subs	r6, #1
 800a506:	f105 0510 	add.w	r5, r5, #16
 800a50a:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800a50e:	f104 0410 	add.w	r4, r4, #16
 800a512:	d1d9      	bne.n	800a4c8 <arm_dot_prod_f32+0x14>
 800a514:	013f      	lsls	r7, r7, #4
 800a516:	4438      	add	r0, r7
 800a518:	4439      	add	r1, r7
 800a51a:	f012 0203 	ands.w	r2, r2, #3
 800a51e:	d01b      	beq.n	800a558 <arm_dot_prod_f32+0xa4>
 800a520:	edd1 7a00 	vldr	s15, [r1]
 800a524:	ed90 7a00 	vldr	s14, [r0]
 800a528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a52c:	3a01      	subs	r2, #1
 800a52e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a532:	d011      	beq.n	800a558 <arm_dot_prod_f32+0xa4>
 800a534:	edd1 7a01 	vldr	s15, [r1, #4]
 800a538:	ed90 7a01 	vldr	s14, [r0, #4]
 800a53c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a540:	2a01      	cmp	r2, #1
 800a542:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a546:	d007      	beq.n	800a558 <arm_dot_prod_f32+0xa4>
 800a548:	edd0 7a02 	vldr	s15, [r0, #8]
 800a54c:	ed91 7a02 	vldr	s14, [r1, #8]
 800a550:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a554:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a558:	edc3 5a00 	vstr	s11, [r3]
 800a55c:	bcf0      	pop	{r4, r5, r6, r7}
 800a55e:	4770      	bx	lr
 800a560:	00000000 	.word	0x00000000

0800a564 <arm_radix8_butterfly_f32>:
 800a564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a568:	ed2d 8b10 	vpush	{d8-d15}
 800a56c:	b095      	sub	sp, #84	; 0x54
 800a56e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a572:	4603      	mov	r3, r0
 800a574:	3304      	adds	r3, #4
 800a576:	ed9f bab9 	vldr	s22, [pc, #740]	; 800a85c <arm_radix8_butterfly_f32+0x2f8>
 800a57a:	9012      	str	r0, [sp, #72]	; 0x48
 800a57c:	468b      	mov	fp, r1
 800a57e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a580:	4689      	mov	r9, r1
 800a582:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800a586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a588:	960f      	str	r6, [sp, #60]	; 0x3c
 800a58a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800a58e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800a592:	eb03 0508 	add.w	r5, r3, r8
 800a596:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a59a:	eb05 040e 	add.w	r4, r5, lr
 800a59e:	0137      	lsls	r7, r6, #4
 800a5a0:	eba6 030a 	sub.w	r3, r6, sl
 800a5a4:	eb04 000e 	add.w	r0, r4, lr
 800a5a8:	44b2      	add	sl, r6
 800a5aa:	1d3a      	adds	r2, r7, #4
 800a5ac:	9702      	str	r7, [sp, #8]
 800a5ae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a5b2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800a5b6:	ebae 0c06 	sub.w	ip, lr, r6
 800a5ba:	9703      	str	r7, [sp, #12]
 800a5bc:	eb03 0708 	add.w	r7, r3, r8
 800a5c0:	9701      	str	r7, [sp, #4]
 800a5c2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800a5c6:	9706      	str	r7, [sp, #24]
 800a5c8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a5ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a5ce:	f10e 0104 	add.w	r1, lr, #4
 800a5d2:	4439      	add	r1, r7
 800a5d4:	443a      	add	r2, r7
 800a5d6:	0137      	lsls	r7, r6, #4
 800a5d8:	00f6      	lsls	r6, r6, #3
 800a5da:	9704      	str	r7, [sp, #16]
 800a5dc:	9605      	str	r6, [sp, #20]
 800a5de:	9f01      	ldr	r7, [sp, #4]
 800a5e0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a5e2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800a5e6:	f04f 0c00 	mov.w	ip, #0
 800a5ea:	edd4 6a00 	vldr	s13, [r4]
 800a5ee:	edd7 1a00 	vldr	s3, [r7]
 800a5f2:	ed16 aa01 	vldr	s20, [r6, #-4]
 800a5f6:	edd5 5a00 	vldr	s11, [r5]
 800a5fa:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a5fe:	ed90 6a00 	vldr	s12, [r0]
 800a602:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a606:	ed93 3a00 	vldr	s6, [r3]
 800a60a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800a60e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800a612:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800a616:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800a61a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800a61e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800a622:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a626:	ee74 6a07 	vadd.f32	s13, s8, s14
 800a62a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a62e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800a632:	ed85 4a00 	vstr	s8, [r5]
 800a636:	edd1 6a00 	vldr	s13, [r1]
 800a63a:	ed94 9a01 	vldr	s18, [r4, #4]
 800a63e:	edd3 2a01 	vldr	s5, [r3, #4]
 800a642:	edd7 8a01 	vldr	s17, [r7, #4]
 800a646:	edd6 0a00 	vldr	s1, [r6]
 800a64a:	edd5 3a01 	vldr	s7, [r5, #4]
 800a64e:	ed90 8a01 	vldr	s16, [r0, #4]
 800a652:	ed92 7a00 	vldr	s14, [r2]
 800a656:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a65a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800a65e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800a662:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800a666:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800a66a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a66e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800a672:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800a676:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800a67a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800a67e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800a682:	ee77 0a08 	vadd.f32	s1, s14, s16
 800a686:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800a68a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a68e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800a692:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800a696:	ee76 6a89 	vadd.f32	s13, s13, s18
 800a69a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800a69e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a6a2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a6a6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a6aa:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800a6ae:	ee33 2a20 	vadd.f32	s4, s6, s1
 800a6b2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a6b6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a6ba:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800a6be:	ee77 0a01 	vadd.f32	s1, s14, s2
 800a6c2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800a6c6:	ee37 7a41 	vsub.f32	s14, s14, s2
 800a6ca:	ee73 1a84 	vadd.f32	s3, s7, s8
 800a6ce:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a6d2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a6d6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a6da:	ee32 8a00 	vadd.f32	s16, s4, s0
 800a6de:	ee33 1a45 	vsub.f32	s2, s6, s10
 800a6e2:	ee32 2a40 	vsub.f32	s4, s4, s0
 800a6e6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a6ea:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800a6ee:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800a6f2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a6f6:	ee34 6a67 	vsub.f32	s12, s8, s15
 800a6fa:	ee75 4a87 	vadd.f32	s9, s11, s14
 800a6fe:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800a702:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a706:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a70a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800a70e:	44dc      	add	ip, fp
 800a710:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a714:	45e1      	cmp	r9, ip
 800a716:	ed86 8a00 	vstr	s16, [r6]
 800a71a:	ed85 2a01 	vstr	s4, [r5, #4]
 800a71e:	4456      	add	r6, sl
 800a720:	ed02 0a01 	vstr	s0, [r2, #-4]
 800a724:	4455      	add	r5, sl
 800a726:	edc0 6a00 	vstr	s13, [r0]
 800a72a:	ed82 1a00 	vstr	s2, [r2]
 800a72e:	ed80 5a01 	vstr	s10, [r0, #4]
 800a732:	4452      	add	r2, sl
 800a734:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a738:	4450      	add	r0, sl
 800a73a:	edc7 2a00 	vstr	s5, [r7]
 800a73e:	edc4 4a00 	vstr	s9, [r4]
 800a742:	ed83 7a00 	vstr	s14, [r3]
 800a746:	edc1 5a00 	vstr	s11, [r1]
 800a74a:	edc7 3a01 	vstr	s7, [r7, #4]
 800a74e:	4451      	add	r1, sl
 800a750:	ed84 6a01 	vstr	s12, [r4, #4]
 800a754:	4457      	add	r7, sl
 800a756:	edc3 7a01 	vstr	s15, [r3, #4]
 800a75a:	4454      	add	r4, sl
 800a75c:	4453      	add	r3, sl
 800a75e:	f63f af44 	bhi.w	800a5ea <arm_radix8_butterfly_f32+0x86>
 800a762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a764:	2b07      	cmp	r3, #7
 800a766:	f240 81b7 	bls.w	800aad8 <arm_radix8_butterfly_f32+0x574>
 800a76a:	9b06      	ldr	r3, [sp, #24]
 800a76c:	9903      	ldr	r1, [sp, #12]
 800a76e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a770:	9e05      	ldr	r6, [sp, #20]
 800a772:	9a04      	ldr	r2, [sp, #16]
 800a774:	f103 0c08 	add.w	ip, r3, #8
 800a778:	9b02      	ldr	r3, [sp, #8]
 800a77a:	3108      	adds	r1, #8
 800a77c:	f108 0808 	add.w	r8, r8, #8
 800a780:	1841      	adds	r1, r0, r1
 800a782:	3608      	adds	r6, #8
 800a784:	330c      	adds	r3, #12
 800a786:	4604      	mov	r4, r0
 800a788:	4444      	add	r4, r8
 800a78a:	18c3      	adds	r3, r0, r3
 800a78c:	9109      	str	r1, [sp, #36]	; 0x24
 800a78e:	1981      	adds	r1, r0, r6
 800a790:	f10e 0e08 	add.w	lr, lr, #8
 800a794:	3208      	adds	r2, #8
 800a796:	940b      	str	r4, [sp, #44]	; 0x2c
 800a798:	9107      	str	r1, [sp, #28]
 800a79a:	4604      	mov	r4, r0
 800a79c:	4601      	mov	r1, r0
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	f100 030c 	add.w	r3, r0, #12
 800a7a4:	4474      	add	r4, lr
 800a7a6:	f04f 0801 	mov.w	r8, #1
 800a7aa:	1882      	adds	r2, r0, r2
 800a7ac:	4461      	add	r1, ip
 800a7ae:	9305      	str	r3, [sp, #20]
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	940a      	str	r4, [sp, #40]	; 0x28
 800a7b4:	46c1      	mov	r9, r8
 800a7b6:	9208      	str	r2, [sp, #32]
 800a7b8:	46d8      	mov	r8, fp
 800a7ba:	9106      	str	r1, [sp, #24]
 800a7bc:	f04f 0e00 	mov.w	lr, #0
 800a7c0:	469b      	mov	fp, r3
 800a7c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7c6:	449e      	add	lr, r3
 800a7c8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800a7cc:	441a      	add	r2, r3
 800a7ce:	920e      	str	r2, [sp, #56]	; 0x38
 800a7d0:	441a      	add	r2, r3
 800a7d2:	18d4      	adds	r4, r2, r3
 800a7d4:	18e5      	adds	r5, r4, r3
 800a7d6:	18ee      	adds	r6, r5, r3
 800a7d8:	18f7      	adds	r7, r6, r3
 800a7da:	eb07 0c03 	add.w	ip, r7, r3
 800a7de:	920d      	str	r2, [sp, #52]	; 0x34
 800a7e0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800a7e4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800a7e8:	910c      	str	r1, [sp, #48]	; 0x30
 800a7ea:	4419      	add	r1, r3
 800a7ec:	9103      	str	r1, [sp, #12]
 800a7ee:	4419      	add	r1, r3
 800a7f0:	18ca      	adds	r2, r1, r3
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	18d0      	adds	r0, r2, r3
 800a7f8:	ed92 ea01 	vldr	s28, [r2, #4]
 800a7fc:	9a02      	ldr	r2, [sp, #8]
 800a7fe:	edd4 7a00 	vldr	s15, [r4]
 800a802:	edd2 da01 	vldr	s27, [r2, #4]
 800a806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a808:	ed91 da01 	vldr	s26, [r1, #4]
 800a80c:	ed92 ca01 	vldr	s24, [r2, #4]
 800a810:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a812:	9903      	ldr	r1, [sp, #12]
 800a814:	edcd 7a03 	vstr	s15, [sp, #12]
 800a818:	edd2 7a00 	vldr	s15, [r2]
 800a81c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a81e:	edcd 7a02 	vstr	s15, [sp, #8]
 800a822:	edd2 7a00 	vldr	s15, [r2]
 800a826:	edd0 ea01 	vldr	s29, [r0, #4]
 800a82a:	edd1 ca01 	vldr	s25, [r1, #4]
 800a82e:	eddc ba00 	vldr	s23, [ip]
 800a832:	edd7 aa00 	vldr	s21, [r7]
 800a836:	ed96 aa00 	vldr	s20, [r6]
 800a83a:	edd5 9a00 	vldr	s19, [r5]
 800a83e:	edcd 7a01 	vstr	s15, [sp, #4]
 800a842:	4403      	add	r3, r0
 800a844:	ed93 fa01 	vldr	s30, [r3, #4]
 800a848:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800a84c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800a850:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a858:	46cc      	mov	ip, r9
 800a85a:	e001      	b.n	800a860 <arm_radix8_butterfly_f32+0x2fc>
 800a85c:	3f3504f3 	.word	0x3f3504f3
 800a860:	ed91 6a00 	vldr	s12, [r1]
 800a864:	ed93 5a00 	vldr	s10, [r3]
 800a868:	edd0 fa00 	vldr	s31, [r0]
 800a86c:	edd4 7a00 	vldr	s15, [r4]
 800a870:	ed95 7a00 	vldr	s14, [r5]
 800a874:	ed56 3a01 	vldr	s7, [r6, #-4]
 800a878:	ed17 3a01 	vldr	s6, [r7, #-4]
 800a87c:	ed92 2a00 	vldr	s4, [r2]
 800a880:	ed96 0a00 	vldr	s0, [r6]
 800a884:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a888:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a88c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800a890:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a894:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a898:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a89c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a8a0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a8a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8a8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800a8ac:	edd4 8a01 	vldr	s17, [r4, #4]
 800a8b0:	ed92 9a01 	vldr	s18, [r2, #4]
 800a8b4:	edd7 0a00 	vldr	s1, [r7]
 800a8b8:	edd1 2a01 	vldr	s5, [r1, #4]
 800a8bc:	ed95 7a01 	vldr	s14, [r5, #4]
 800a8c0:	ed93 6a01 	vldr	s12, [r3, #4]
 800a8c4:	edd0 5a01 	vldr	s11, [r0, #4]
 800a8c8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a8cc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800a8d0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a8d4:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a8d8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a8dc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a8e0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a8e4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a8e8:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a8ec:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a8f0:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a8f4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a8f8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a8fc:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a900:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a904:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a908:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a90c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a910:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a914:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a918:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a91c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a920:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a924:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a928:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a92c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a930:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a934:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a938:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a93c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a940:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a944:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a948:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a94c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a950:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a954:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a958:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a95c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a960:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a964:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a968:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a96c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a970:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a974:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a978:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a97c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a980:	eddd 1a02 	vldr	s3, [sp, #8]
 800a984:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a988:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a98c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a990:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a994:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a998:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a99c:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a9a0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a9a4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a9a8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a9ac:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a9b0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a9b4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a9b8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a9bc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a9c0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a9c4:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a9c8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a9cc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a9d0:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a9d4:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a9d8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a9dc:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a9e0:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a9e4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a9e8:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a9ec:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a9f0:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a9f4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a9f8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a9fc:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800aa00:	eddd 5a03 	vldr	s11, [sp, #12]
 800aa04:	edc6 fa00 	vstr	s31, [r6]
 800aa08:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800aa0c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800aa10:	ee30 0a45 	vsub.f32	s0, s0, s10
 800aa14:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800aa18:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800aa1c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800aa20:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800aa24:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800aa28:	ee25 6a86 	vmul.f32	s12, s11, s12
 800aa2c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800aa30:	ee34 3a43 	vsub.f32	s6, s8, s6
 800aa34:	ee78 8a85 	vadd.f32	s17, s17, s10
 800aa38:	ee36 6a67 	vsub.f32	s12, s12, s15
 800aa3c:	44c4      	add	ip, r8
 800aa3e:	45e3      	cmp	fp, ip
 800aa40:	edc3 3a00 	vstr	s7, [r3]
 800aa44:	edc3 6a01 	vstr	s13, [r3, #4]
 800aa48:	4456      	add	r6, sl
 800aa4a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800aa4e:	edc7 0a00 	vstr	s1, [r7]
 800aa52:	4453      	add	r3, sl
 800aa54:	ed80 2a00 	vstr	s4, [r0]
 800aa58:	edc0 2a01 	vstr	s5, [r0, #4]
 800aa5c:	4457      	add	r7, sl
 800aa5e:	edc2 1a00 	vstr	s3, [r2]
 800aa62:	ed82 7a01 	vstr	s14, [r2, #4]
 800aa66:	4450      	add	r0, sl
 800aa68:	ed85 8a00 	vstr	s16, [r5]
 800aa6c:	ed85 0a01 	vstr	s0, [r5, #4]
 800aa70:	4452      	add	r2, sl
 800aa72:	edc1 4a00 	vstr	s9, [r1]
 800aa76:	4455      	add	r5, sl
 800aa78:	ed81 3a01 	vstr	s6, [r1, #4]
 800aa7c:	edc4 8a00 	vstr	s17, [r4]
 800aa80:	ed84 6a01 	vstr	s12, [r4, #4]
 800aa84:	4451      	add	r1, sl
 800aa86:	4454      	add	r4, sl
 800aa88:	f63f aeea 	bhi.w	800a860 <arm_radix8_butterfly_f32+0x2fc>
 800aa8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8e:	3308      	adds	r3, #8
 800aa90:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa94:	3308      	adds	r3, #8
 800aa96:	930a      	str	r3, [sp, #40]	; 0x28
 800aa98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa9a:	3308      	adds	r3, #8
 800aa9c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9e:	9b08      	ldr	r3, [sp, #32]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	9308      	str	r3, [sp, #32]
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	9307      	str	r3, [sp, #28]
 800aaaa:	9b06      	ldr	r3, [sp, #24]
 800aaac:	3308      	adds	r3, #8
 800aaae:	9306      	str	r3, [sp, #24]
 800aab0:	9b05      	ldr	r3, [sp, #20]
 800aab2:	3308      	adds	r3, #8
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	3308      	adds	r3, #8
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aabe:	f109 0901 	add.w	r9, r9, #1
 800aac2:	454b      	cmp	r3, r9
 800aac4:	f47f ae7d 	bne.w	800a7c2 <arm_radix8_butterfly_f32+0x25e>
 800aac8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	b29b      	uxth	r3, r3
 800aace:	46d9      	mov	r9, fp
 800aad0:	9310      	str	r3, [sp, #64]	; 0x40
 800aad2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800aad6:	e554      	b.n	800a582 <arm_radix8_butterfly_f32+0x1e>
 800aad8:	b015      	add	sp, #84	; 0x54
 800aada:	ecbd 8b10 	vpop	{d8-d15}
 800aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae2:	bf00      	nop

0800aae4 <memset>:
 800aae4:	4402      	add	r2, r0
 800aae6:	4603      	mov	r3, r0
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d100      	bne.n	800aaee <memset+0xa>
 800aaec:	4770      	bx	lr
 800aaee:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf2:	e7f9      	b.n	800aae8 <memset+0x4>

0800aaf4 <__errno>:
 800aaf4:	4b01      	ldr	r3, [pc, #4]	; (800aafc <__errno+0x8>)
 800aaf6:	6818      	ldr	r0, [r3, #0]
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	20009030 	.word	0x20009030

0800ab00 <__libc_init_array>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	4d0d      	ldr	r5, [pc, #52]	; (800ab38 <__libc_init_array+0x38>)
 800ab04:	4c0d      	ldr	r4, [pc, #52]	; (800ab3c <__libc_init_array+0x3c>)
 800ab06:	1b64      	subs	r4, r4, r5
 800ab08:	10a4      	asrs	r4, r4, #2
 800ab0a:	2600      	movs	r6, #0
 800ab0c:	42a6      	cmp	r6, r4
 800ab0e:	d109      	bne.n	800ab24 <__libc_init_array+0x24>
 800ab10:	4d0b      	ldr	r5, [pc, #44]	; (800ab40 <__libc_init_array+0x40>)
 800ab12:	4c0c      	ldr	r4, [pc, #48]	; (800ab44 <__libc_init_array+0x44>)
 800ab14:	f001 f96a 	bl	800bdec <_init>
 800ab18:	1b64      	subs	r4, r4, r5
 800ab1a:	10a4      	asrs	r4, r4, #2
 800ab1c:	2600      	movs	r6, #0
 800ab1e:	42a6      	cmp	r6, r4
 800ab20:	d105      	bne.n	800ab2e <__libc_init_array+0x2e>
 800ab22:	bd70      	pop	{r4, r5, r6, pc}
 800ab24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab28:	4798      	blx	r3
 800ab2a:	3601      	adds	r6, #1
 800ab2c:	e7ee      	b.n	800ab0c <__libc_init_array+0xc>
 800ab2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab32:	4798      	blx	r3
 800ab34:	3601      	adds	r6, #1
 800ab36:	e7f2      	b.n	800ab1e <__libc_init_array+0x1e>
 800ab38:	0801ee60 	.word	0x0801ee60
 800ab3c:	0801ee60 	.word	0x0801ee60
 800ab40:	0801ee60 	.word	0x0801ee60
 800ab44:	0801ee64 	.word	0x0801ee64

0800ab48 <exp>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	ed2d 8b02 	vpush	{d8}
 800ab4e:	ec55 4b10 	vmov	r4, r5, d0
 800ab52:	f000 f9e5 	bl	800af20 <__ieee754_exp>
 800ab56:	eeb0 8a40 	vmov.f32	s16, s0
 800ab5a:	eef0 8a60 	vmov.f32	s17, s1
 800ab5e:	ec45 4b10 	vmov	d0, r4, r5
 800ab62:	f000 f8f3 	bl	800ad4c <finite>
 800ab66:	b168      	cbz	r0, 800ab84 <exp+0x3c>
 800ab68:	a317      	add	r3, pc, #92	; (adr r3, 800abc8 <exp+0x80>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	4620      	mov	r0, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f5 ff9d 	bl	8000ab0 <__aeabi_dcmpgt>
 800ab76:	b160      	cbz	r0, 800ab92 <exp+0x4a>
 800ab78:	f7ff ffbc 	bl	800aaf4 <__errno>
 800ab7c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800abb8 <exp+0x70>
 800ab80:	2322      	movs	r3, #34	; 0x22
 800ab82:	6003      	str	r3, [r0, #0]
 800ab84:	eeb0 0a48 	vmov.f32	s0, s16
 800ab88:	eef0 0a68 	vmov.f32	s1, s17
 800ab8c:	ecbd 8b02 	vpop	{d8}
 800ab90:	bd38      	pop	{r3, r4, r5, pc}
 800ab92:	a30f      	add	r3, pc, #60	; (adr r3, 800abd0 <exp+0x88>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	f7f5 ff6a 	bl	8000a74 <__aeabi_dcmplt>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d0ef      	beq.n	800ab84 <exp+0x3c>
 800aba4:	f7ff ffa6 	bl	800aaf4 <__errno>
 800aba8:	2322      	movs	r3, #34	; 0x22
 800abaa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800abc0 <exp+0x78>
 800abae:	6003      	str	r3, [r0, #0]
 800abb0:	e7e8      	b.n	800ab84 <exp+0x3c>
 800abb2:	bf00      	nop
 800abb4:	f3af 8000 	nop.w
 800abb8:	00000000 	.word	0x00000000
 800abbc:	7ff00000 	.word	0x7ff00000
	...
 800abc8:	fefa39ef 	.word	0xfefa39ef
 800abcc:	40862e42 	.word	0x40862e42
 800abd0:	d52d3051 	.word	0xd52d3051
 800abd4:	c0874910 	.word	0xc0874910

0800abd8 <pow>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	ed2d 8b02 	vpush	{d8}
 800abde:	eeb0 8a40 	vmov.f32	s16, s0
 800abe2:	eef0 8a60 	vmov.f32	s17, s1
 800abe6:	ec55 4b11 	vmov	r4, r5, d1
 800abea:	f000 fb1d 	bl	800b228 <__ieee754_pow>
 800abee:	4622      	mov	r2, r4
 800abf0:	462b      	mov	r3, r5
 800abf2:	4620      	mov	r0, r4
 800abf4:	4629      	mov	r1, r5
 800abf6:	ec57 6b10 	vmov	r6, r7, d0
 800abfa:	f7f5 ff63 	bl	8000ac4 <__aeabi_dcmpun>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d13b      	bne.n	800ac7a <pow+0xa2>
 800ac02:	ec51 0b18 	vmov	r0, r1, d8
 800ac06:	2200      	movs	r2, #0
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f7f5 ff29 	bl	8000a60 <__aeabi_dcmpeq>
 800ac0e:	b1b8      	cbz	r0, 800ac40 <pow+0x68>
 800ac10:	2200      	movs	r2, #0
 800ac12:	2300      	movs	r3, #0
 800ac14:	4620      	mov	r0, r4
 800ac16:	4629      	mov	r1, r5
 800ac18:	f7f5 ff22 	bl	8000a60 <__aeabi_dcmpeq>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d146      	bne.n	800acae <pow+0xd6>
 800ac20:	ec45 4b10 	vmov	d0, r4, r5
 800ac24:	f000 f892 	bl	800ad4c <finite>
 800ac28:	b338      	cbz	r0, 800ac7a <pow+0xa2>
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 ff1f 	bl	8000a74 <__aeabi_dcmplt>
 800ac36:	b300      	cbz	r0, 800ac7a <pow+0xa2>
 800ac38:	f7ff ff5c 	bl	800aaf4 <__errno>
 800ac3c:	2322      	movs	r3, #34	; 0x22
 800ac3e:	e01b      	b.n	800ac78 <pow+0xa0>
 800ac40:	ec47 6b10 	vmov	d0, r6, r7
 800ac44:	f000 f882 	bl	800ad4c <finite>
 800ac48:	b9e0      	cbnz	r0, 800ac84 <pow+0xac>
 800ac4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ac4e:	eef0 0a68 	vmov.f32	s1, s17
 800ac52:	f000 f87b 	bl	800ad4c <finite>
 800ac56:	b1a8      	cbz	r0, 800ac84 <pow+0xac>
 800ac58:	ec45 4b10 	vmov	d0, r4, r5
 800ac5c:	f000 f876 	bl	800ad4c <finite>
 800ac60:	b180      	cbz	r0, 800ac84 <pow+0xac>
 800ac62:	4632      	mov	r2, r6
 800ac64:	463b      	mov	r3, r7
 800ac66:	4630      	mov	r0, r6
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7f5 ff2b 	bl	8000ac4 <__aeabi_dcmpun>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0e2      	beq.n	800ac38 <pow+0x60>
 800ac72:	f7ff ff3f 	bl	800aaf4 <__errno>
 800ac76:	2321      	movs	r3, #33	; 0x21
 800ac78:	6003      	str	r3, [r0, #0]
 800ac7a:	ecbd 8b02 	vpop	{d8}
 800ac7e:	ec47 6b10 	vmov	d0, r6, r7
 800ac82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 fee8 	bl	8000a60 <__aeabi_dcmpeq>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d0f2      	beq.n	800ac7a <pow+0xa2>
 800ac94:	eeb0 0a48 	vmov.f32	s0, s16
 800ac98:	eef0 0a68 	vmov.f32	s1, s17
 800ac9c:	f000 f856 	bl	800ad4c <finite>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d0ea      	beq.n	800ac7a <pow+0xa2>
 800aca4:	ec45 4b10 	vmov	d0, r4, r5
 800aca8:	f000 f850 	bl	800ad4c <finite>
 800acac:	e7c3      	b.n	800ac36 <pow+0x5e>
 800acae:	4f01      	ldr	r7, [pc, #4]	; (800acb4 <pow+0xdc>)
 800acb0:	2600      	movs	r6, #0
 800acb2:	e7e2      	b.n	800ac7a <pow+0xa2>
 800acb4:	3ff00000 	.word	0x3ff00000

0800acb8 <sqrt>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	ed2d 8b02 	vpush	{d8}
 800acbe:	ec55 4b10 	vmov	r4, r5, d0
 800acc2:	f000 f84f 	bl	800ad64 <__ieee754_sqrt>
 800acc6:	4622      	mov	r2, r4
 800acc8:	462b      	mov	r3, r5
 800acca:	4620      	mov	r0, r4
 800accc:	4629      	mov	r1, r5
 800acce:	eeb0 8a40 	vmov.f32	s16, s0
 800acd2:	eef0 8a60 	vmov.f32	s17, s1
 800acd6:	f7f5 fef5 	bl	8000ac4 <__aeabi_dcmpun>
 800acda:	b990      	cbnz	r0, 800ad02 <sqrt+0x4a>
 800acdc:	2200      	movs	r2, #0
 800acde:	2300      	movs	r3, #0
 800ace0:	4620      	mov	r0, r4
 800ace2:	4629      	mov	r1, r5
 800ace4:	f7f5 fec6 	bl	8000a74 <__aeabi_dcmplt>
 800ace8:	b158      	cbz	r0, 800ad02 <sqrt+0x4a>
 800acea:	f7ff ff03 	bl	800aaf4 <__errno>
 800acee:	2321      	movs	r3, #33	; 0x21
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	2300      	movs	r3, #0
 800acf6:	4610      	mov	r0, r2
 800acf8:	4619      	mov	r1, r3
 800acfa:	f7f5 fd73 	bl	80007e4 <__aeabi_ddiv>
 800acfe:	ec41 0b18 	vmov	d8, r0, r1
 800ad02:	eeb0 0a48 	vmov.f32	s0, s16
 800ad06:	eef0 0a68 	vmov.f32	s1, s17
 800ad0a:	ecbd 8b02 	vpop	{d8}
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}

0800ad10 <sqrtf>:
 800ad10:	b508      	push	{r3, lr}
 800ad12:	ed2d 8b02 	vpush	{d8}
 800ad16:	eeb0 8a40 	vmov.f32	s16, s0
 800ad1a:	f000 f8fd 	bl	800af18 <__ieee754_sqrtf>
 800ad1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ad22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad26:	d60c      	bvs.n	800ad42 <sqrtf+0x32>
 800ad28:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ad48 <sqrtf+0x38>
 800ad2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ad30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad34:	d505      	bpl.n	800ad42 <sqrtf+0x32>
 800ad36:	f7ff fedd 	bl	800aaf4 <__errno>
 800ad3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ad3e:	2321      	movs	r3, #33	; 0x21
 800ad40:	6003      	str	r3, [r0, #0]
 800ad42:	ecbd 8b02 	vpop	{d8}
 800ad46:	bd08      	pop	{r3, pc}
 800ad48:	00000000 	.word	0x00000000

0800ad4c <finite>:
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	ed8d 0b00 	vstr	d0, [sp]
 800ad52:	9801      	ldr	r0, [sp, #4]
 800ad54:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ad58:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad5c:	0fc0      	lsrs	r0, r0, #31
 800ad5e:	b002      	add	sp, #8
 800ad60:	4770      	bx	lr
	...

0800ad64 <__ieee754_sqrt>:
 800ad64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	ec55 4b10 	vmov	r4, r5, d0
 800ad6c:	4e67      	ldr	r6, [pc, #412]	; (800af0c <__ieee754_sqrt+0x1a8>)
 800ad6e:	43ae      	bics	r6, r5
 800ad70:	ee10 0a10 	vmov	r0, s0
 800ad74:	ee10 2a10 	vmov	r2, s0
 800ad78:	4629      	mov	r1, r5
 800ad7a:	462b      	mov	r3, r5
 800ad7c:	d10d      	bne.n	800ad9a <__ieee754_sqrt+0x36>
 800ad7e:	f7f5 fc07 	bl	8000590 <__aeabi_dmul>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	4620      	mov	r0, r4
 800ad88:	4629      	mov	r1, r5
 800ad8a:	f7f5 fa4b 	bl	8000224 <__adddf3>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	ec45 4b10 	vmov	d0, r4, r5
 800ad96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9a:	2d00      	cmp	r5, #0
 800ad9c:	dc0b      	bgt.n	800adb6 <__ieee754_sqrt+0x52>
 800ad9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ada2:	4326      	orrs	r6, r4
 800ada4:	d0f5      	beq.n	800ad92 <__ieee754_sqrt+0x2e>
 800ada6:	b135      	cbz	r5, 800adb6 <__ieee754_sqrt+0x52>
 800ada8:	f7f5 fa3a 	bl	8000220 <__aeabi_dsub>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	f7f5 fd18 	bl	80007e4 <__aeabi_ddiv>
 800adb4:	e7eb      	b.n	800ad8e <__ieee754_sqrt+0x2a>
 800adb6:	1509      	asrs	r1, r1, #20
 800adb8:	f000 808d 	beq.w	800aed6 <__ieee754_sqrt+0x172>
 800adbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adc0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800adc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adc8:	07c9      	lsls	r1, r1, #31
 800adca:	bf5c      	itt	pl
 800adcc:	005b      	lslpl	r3, r3, #1
 800adce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800add2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800add6:	bf58      	it	pl
 800add8:	0052      	lslpl	r2, r2, #1
 800adda:	2500      	movs	r5, #0
 800addc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ade0:	1076      	asrs	r6, r6, #1
 800ade2:	0052      	lsls	r2, r2, #1
 800ade4:	f04f 0e16 	mov.w	lr, #22
 800ade8:	46ac      	mov	ip, r5
 800adea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adee:	eb0c 0001 	add.w	r0, ip, r1
 800adf2:	4298      	cmp	r0, r3
 800adf4:	bfde      	ittt	le
 800adf6:	1a1b      	suble	r3, r3, r0
 800adf8:	eb00 0c01 	addle.w	ip, r0, r1
 800adfc:	186d      	addle	r5, r5, r1
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	f1be 0e01 	subs.w	lr, lr, #1
 800ae04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ae08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ae0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ae10:	d1ed      	bne.n	800adee <__ieee754_sqrt+0x8a>
 800ae12:	4674      	mov	r4, lr
 800ae14:	2720      	movs	r7, #32
 800ae16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ae1a:	4563      	cmp	r3, ip
 800ae1c:	eb01 000e 	add.w	r0, r1, lr
 800ae20:	dc02      	bgt.n	800ae28 <__ieee754_sqrt+0xc4>
 800ae22:	d113      	bne.n	800ae4c <__ieee754_sqrt+0xe8>
 800ae24:	4290      	cmp	r0, r2
 800ae26:	d811      	bhi.n	800ae4c <__ieee754_sqrt+0xe8>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	eb00 0e01 	add.w	lr, r0, r1
 800ae2e:	da57      	bge.n	800aee0 <__ieee754_sqrt+0x17c>
 800ae30:	f1be 0f00 	cmp.w	lr, #0
 800ae34:	db54      	blt.n	800aee0 <__ieee754_sqrt+0x17c>
 800ae36:	f10c 0801 	add.w	r8, ip, #1
 800ae3a:	eba3 030c 	sub.w	r3, r3, ip
 800ae3e:	4290      	cmp	r0, r2
 800ae40:	bf88      	it	hi
 800ae42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ae46:	1a12      	subs	r2, r2, r0
 800ae48:	440c      	add	r4, r1
 800ae4a:	46c4      	mov	ip, r8
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	3f01      	subs	r7, #1
 800ae50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ae54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ae58:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ae5c:	d1dd      	bne.n	800ae1a <__ieee754_sqrt+0xb6>
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	d01b      	beq.n	800ae9a <__ieee754_sqrt+0x136>
 800ae62:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800af10 <__ieee754_sqrt+0x1ac>
 800ae66:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800af14 <__ieee754_sqrt+0x1b0>
 800ae6a:	e9da 0100 	ldrd	r0, r1, [sl]
 800ae6e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae72:	f7f5 f9d5 	bl	8000220 <__aeabi_dsub>
 800ae76:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4640      	mov	r0, r8
 800ae80:	4649      	mov	r1, r9
 800ae82:	f7f5 fe01 	bl	8000a88 <__aeabi_dcmple>
 800ae86:	b140      	cbz	r0, 800ae9a <__ieee754_sqrt+0x136>
 800ae88:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ae8c:	e9da 0100 	ldrd	r0, r1, [sl]
 800ae90:	e9db 2300 	ldrd	r2, r3, [fp]
 800ae94:	d126      	bne.n	800aee4 <__ieee754_sqrt+0x180>
 800ae96:	3501      	adds	r5, #1
 800ae98:	463c      	mov	r4, r7
 800ae9a:	106a      	asrs	r2, r5, #1
 800ae9c:	0863      	lsrs	r3, r4, #1
 800ae9e:	07e9      	lsls	r1, r5, #31
 800aea0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aea4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aea8:	bf48      	it	mi
 800aeaa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aeae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	e76d      	b.n	800ad92 <__ieee754_sqrt+0x2e>
 800aeb6:	0ad3      	lsrs	r3, r2, #11
 800aeb8:	3815      	subs	r0, #21
 800aeba:	0552      	lsls	r2, r2, #21
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0fa      	beq.n	800aeb6 <__ieee754_sqrt+0x152>
 800aec0:	02dc      	lsls	r4, r3, #11
 800aec2:	d50a      	bpl.n	800aeda <__ieee754_sqrt+0x176>
 800aec4:	f1c1 0420 	rsb	r4, r1, #32
 800aec8:	fa22 f404 	lsr.w	r4, r2, r4
 800aecc:	1e4d      	subs	r5, r1, #1
 800aece:	408a      	lsls	r2, r1
 800aed0:	4323      	orrs	r3, r4
 800aed2:	1b41      	subs	r1, r0, r5
 800aed4:	e772      	b.n	800adbc <__ieee754_sqrt+0x58>
 800aed6:	4608      	mov	r0, r1
 800aed8:	e7f0      	b.n	800aebc <__ieee754_sqrt+0x158>
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	3101      	adds	r1, #1
 800aede:	e7ef      	b.n	800aec0 <__ieee754_sqrt+0x15c>
 800aee0:	46e0      	mov	r8, ip
 800aee2:	e7aa      	b.n	800ae3a <__ieee754_sqrt+0xd6>
 800aee4:	f7f5 f99e 	bl	8000224 <__adddf3>
 800aee8:	e9da 8900 	ldrd	r8, r9, [sl]
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4640      	mov	r0, r8
 800aef2:	4649      	mov	r1, r9
 800aef4:	f7f5 fdbe 	bl	8000a74 <__aeabi_dcmplt>
 800aef8:	b120      	cbz	r0, 800af04 <__ieee754_sqrt+0x1a0>
 800aefa:	1ca0      	adds	r0, r4, #2
 800aefc:	bf08      	it	eq
 800aefe:	3501      	addeq	r5, #1
 800af00:	3402      	adds	r4, #2
 800af02:	e7ca      	b.n	800ae9a <__ieee754_sqrt+0x136>
 800af04:	3401      	adds	r4, #1
 800af06:	f024 0401 	bic.w	r4, r4, #1
 800af0a:	e7c6      	b.n	800ae9a <__ieee754_sqrt+0x136>
 800af0c:	7ff00000 	.word	0x7ff00000
 800af10:	20009038 	.word	0x20009038
 800af14:	20009040 	.word	0x20009040

0800af18 <__ieee754_sqrtf>:
 800af18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af1c:	4770      	bx	lr
	...

0800af20 <__ieee754_exp>:
 800af20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af24:	ec55 4b10 	vmov	r4, r5, d0
 800af28:	49b5      	ldr	r1, [pc, #724]	; (800b200 <__ieee754_exp+0x2e0>)
 800af2a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800af2e:	428a      	cmp	r2, r1
 800af30:	ed2d 8b04 	vpush	{d8-d9}
 800af34:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800af38:	d93b      	bls.n	800afb2 <__ieee754_exp+0x92>
 800af3a:	49b2      	ldr	r1, [pc, #712]	; (800b204 <__ieee754_exp+0x2e4>)
 800af3c:	428a      	cmp	r2, r1
 800af3e:	d916      	bls.n	800af6e <__ieee754_exp+0x4e>
 800af40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800af44:	4323      	orrs	r3, r4
 800af46:	ee10 2a10 	vmov	r2, s0
 800af4a:	d007      	beq.n	800af5c <__ieee754_exp+0x3c>
 800af4c:	462b      	mov	r3, r5
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 f967 	bl	8000224 <__adddf3>
 800af56:	4604      	mov	r4, r0
 800af58:	460d      	mov	r5, r1
 800af5a:	e002      	b.n	800af62 <__ieee754_exp+0x42>
 800af5c:	b10e      	cbz	r6, 800af62 <__ieee754_exp+0x42>
 800af5e:	2400      	movs	r4, #0
 800af60:	2500      	movs	r5, #0
 800af62:	ecbd 8b04 	vpop	{d8-d9}
 800af66:	ec45 4b10 	vmov	d0, r4, r5
 800af6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6e:	a38e      	add	r3, pc, #568	; (adr r3, 800b1a8 <__ieee754_exp+0x288>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	ee10 0a10 	vmov	r0, s0
 800af78:	4629      	mov	r1, r5
 800af7a:	f7f5 fd99 	bl	8000ab0 <__aeabi_dcmpgt>
 800af7e:	4607      	mov	r7, r0
 800af80:	b130      	cbz	r0, 800af90 <__ieee754_exp+0x70>
 800af82:	ecbd 8b04 	vpop	{d8-d9}
 800af86:	2000      	movs	r0, #0
 800af88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	f000 bf25 	b.w	800bdda <__math_oflow>
 800af90:	a387      	add	r3, pc, #540	; (adr r3, 800b1b0 <__ieee754_exp+0x290>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	4620      	mov	r0, r4
 800af98:	4629      	mov	r1, r5
 800af9a:	f7f5 fd6b 	bl	8000a74 <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f000 808b 	beq.w	800b0ba <__ieee754_exp+0x19a>
 800afa4:	ecbd 8b04 	vpop	{d8-d9}
 800afa8:	4638      	mov	r0, r7
 800afaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afae:	f000 bf0b 	b.w	800bdc8 <__math_uflow>
 800afb2:	4b95      	ldr	r3, [pc, #596]	; (800b208 <__ieee754_exp+0x2e8>)
 800afb4:	429a      	cmp	r2, r3
 800afb6:	f240 80ac 	bls.w	800b112 <__ieee754_exp+0x1f2>
 800afba:	4b94      	ldr	r3, [pc, #592]	; (800b20c <__ieee754_exp+0x2ec>)
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d87c      	bhi.n	800b0ba <__ieee754_exp+0x19a>
 800afc0:	4b93      	ldr	r3, [pc, #588]	; (800b210 <__ieee754_exp+0x2f0>)
 800afc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	ee10 0a10 	vmov	r0, s0
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 f926 	bl	8000220 <__aeabi_dsub>
 800afd4:	4b8f      	ldr	r3, [pc, #572]	; (800b214 <__ieee754_exp+0x2f4>)
 800afd6:	00f7      	lsls	r7, r6, #3
 800afd8:	443b      	add	r3, r7
 800afda:	ed93 7b00 	vldr	d7, [r3]
 800afde:	f1c6 0a01 	rsb	sl, r6, #1
 800afe2:	4680      	mov	r8, r0
 800afe4:	4689      	mov	r9, r1
 800afe6:	ebaa 0a06 	sub.w	sl, sl, r6
 800afea:	eeb0 8a47 	vmov.f32	s16, s14
 800afee:	eef0 8a67 	vmov.f32	s17, s15
 800aff2:	ec53 2b18 	vmov	r2, r3, d8
 800aff6:	4640      	mov	r0, r8
 800aff8:	4649      	mov	r1, r9
 800affa:	f7f5 f911 	bl	8000220 <__aeabi_dsub>
 800affe:	4604      	mov	r4, r0
 800b000:	460d      	mov	r5, r1
 800b002:	4622      	mov	r2, r4
 800b004:	462b      	mov	r3, r5
 800b006:	4620      	mov	r0, r4
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 fac1 	bl	8000590 <__aeabi_dmul>
 800b00e:	a36a      	add	r3, pc, #424	; (adr r3, 800b1b8 <__ieee754_exp+0x298>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	f7f5 faba 	bl	8000590 <__aeabi_dmul>
 800b01c:	a368      	add	r3, pc, #416	; (adr r3, 800b1c0 <__ieee754_exp+0x2a0>)
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f7f5 f8fd 	bl	8000220 <__aeabi_dsub>
 800b026:	4632      	mov	r2, r6
 800b028:	463b      	mov	r3, r7
 800b02a:	f7f5 fab1 	bl	8000590 <__aeabi_dmul>
 800b02e:	a366      	add	r3, pc, #408	; (adr r3, 800b1c8 <__ieee754_exp+0x2a8>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 f8f6 	bl	8000224 <__adddf3>
 800b038:	4632      	mov	r2, r6
 800b03a:	463b      	mov	r3, r7
 800b03c:	f7f5 faa8 	bl	8000590 <__aeabi_dmul>
 800b040:	a363      	add	r3, pc, #396	; (adr r3, 800b1d0 <__ieee754_exp+0x2b0>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	f7f5 f8eb 	bl	8000220 <__aeabi_dsub>
 800b04a:	4632      	mov	r2, r6
 800b04c:	463b      	mov	r3, r7
 800b04e:	f7f5 fa9f 	bl	8000590 <__aeabi_dmul>
 800b052:	a361      	add	r3, pc, #388	; (adr r3, 800b1d8 <__ieee754_exp+0x2b8>)
 800b054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b058:	f7f5 f8e4 	bl	8000224 <__adddf3>
 800b05c:	4632      	mov	r2, r6
 800b05e:	463b      	mov	r3, r7
 800b060:	f7f5 fa96 	bl	8000590 <__aeabi_dmul>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4620      	mov	r0, r4
 800b06a:	4629      	mov	r1, r5
 800b06c:	f7f5 f8d8 	bl	8000220 <__aeabi_dsub>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4606      	mov	r6, r0
 800b076:	460f      	mov	r7, r1
 800b078:	4620      	mov	r0, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7f5 fa88 	bl	8000590 <__aeabi_dmul>
 800b080:	ec41 0b19 	vmov	d9, r0, r1
 800b084:	f1ba 0f00 	cmp.w	sl, #0
 800b088:	d15d      	bne.n	800b146 <__ieee754_exp+0x226>
 800b08a:	2200      	movs	r2, #0
 800b08c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b090:	4630      	mov	r0, r6
 800b092:	4639      	mov	r1, r7
 800b094:	f7f5 f8c4 	bl	8000220 <__aeabi_dsub>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	ec51 0b19 	vmov	r0, r1, d9
 800b0a0:	f7f5 fba0 	bl	80007e4 <__aeabi_ddiv>
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	f7f5 f8ba 	bl	8000220 <__aeabi_dsub>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	4959      	ldr	r1, [pc, #356]	; (800b218 <__ieee754_exp+0x2f8>)
 800b0b4:	f7f5 f8b4 	bl	8000220 <__aeabi_dsub>
 800b0b8:	e74d      	b.n	800af56 <__ieee754_exp+0x36>
 800b0ba:	4b58      	ldr	r3, [pc, #352]	; (800b21c <__ieee754_exp+0x2fc>)
 800b0bc:	4620      	mov	r0, r4
 800b0be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	a346      	add	r3, pc, #280	; (adr r3, 800b1e0 <__ieee754_exp+0x2c0>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f7f5 fa61 	bl	8000590 <__aeabi_dmul>
 800b0ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0d2:	f7f5 f8a7 	bl	8000224 <__adddf3>
 800b0d6:	f7f5 fd0b 	bl	8000af0 <__aeabi_d2iz>
 800b0da:	4682      	mov	sl, r0
 800b0dc:	f7f5 f9ee 	bl	80004bc <__aeabi_i2d>
 800b0e0:	a341      	add	r3, pc, #260	; (adr r3, 800b1e8 <__ieee754_exp+0x2c8>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	460f      	mov	r7, r1
 800b0ea:	f7f5 fa51 	bl	8000590 <__aeabi_dmul>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	f7f5 f893 	bl	8000220 <__aeabi_dsub>
 800b0fa:	a33d      	add	r3, pc, #244	; (adr r3, 800b1f0 <__ieee754_exp+0x2d0>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	4680      	mov	r8, r0
 800b102:	4689      	mov	r9, r1
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fa42 	bl	8000590 <__aeabi_dmul>
 800b10c:	ec41 0b18 	vmov	d8, r0, r1
 800b110:	e76f      	b.n	800aff2 <__ieee754_exp+0xd2>
 800b112:	4b43      	ldr	r3, [pc, #268]	; (800b220 <__ieee754_exp+0x300>)
 800b114:	429a      	cmp	r2, r3
 800b116:	d811      	bhi.n	800b13c <__ieee754_exp+0x21c>
 800b118:	a337      	add	r3, pc, #220	; (adr r3, 800b1f8 <__ieee754_exp+0x2d8>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	ee10 0a10 	vmov	r0, s0
 800b122:	4629      	mov	r1, r5
 800b124:	f7f5 f87e 	bl	8000224 <__adddf3>
 800b128:	4b3b      	ldr	r3, [pc, #236]	; (800b218 <__ieee754_exp+0x2f8>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	f7f5 fcc0 	bl	8000ab0 <__aeabi_dcmpgt>
 800b130:	b138      	cbz	r0, 800b142 <__ieee754_exp+0x222>
 800b132:	4b39      	ldr	r3, [pc, #228]	; (800b218 <__ieee754_exp+0x2f8>)
 800b134:	2200      	movs	r2, #0
 800b136:	4620      	mov	r0, r4
 800b138:	4629      	mov	r1, r5
 800b13a:	e70a      	b.n	800af52 <__ieee754_exp+0x32>
 800b13c:	f04f 0a00 	mov.w	sl, #0
 800b140:	e75f      	b.n	800b002 <__ieee754_exp+0xe2>
 800b142:	4682      	mov	sl, r0
 800b144:	e75d      	b.n	800b002 <__ieee754_exp+0xe2>
 800b146:	4632      	mov	r2, r6
 800b148:	463b      	mov	r3, r7
 800b14a:	2000      	movs	r0, #0
 800b14c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b150:	f7f5 f866 	bl	8000220 <__aeabi_dsub>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	ec51 0b19 	vmov	r0, r1, d9
 800b15c:	f7f5 fb42 	bl	80007e4 <__aeabi_ddiv>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	ec51 0b18 	vmov	r0, r1, d8
 800b168:	f7f5 f85a 	bl	8000220 <__aeabi_dsub>
 800b16c:	4642      	mov	r2, r8
 800b16e:	464b      	mov	r3, r9
 800b170:	f7f5 f856 	bl	8000220 <__aeabi_dsub>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	2000      	movs	r0, #0
 800b17a:	4927      	ldr	r1, [pc, #156]	; (800b218 <__ieee754_exp+0x2f8>)
 800b17c:	f7f5 f850 	bl	8000220 <__aeabi_dsub>
 800b180:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800b184:	4592      	cmp	sl, r2
 800b186:	db02      	blt.n	800b18e <__ieee754_exp+0x26e>
 800b188:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b18c:	e6e3      	b.n	800af56 <__ieee754_exp+0x36>
 800b18e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800b192:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b196:	2200      	movs	r2, #0
 800b198:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800b19c:	f7f5 f9f8 	bl	8000590 <__aeabi_dmul>
 800b1a0:	e6d9      	b.n	800af56 <__ieee754_exp+0x36>
 800b1a2:	bf00      	nop
 800b1a4:	f3af 8000 	nop.w
 800b1a8:	fefa39ef 	.word	0xfefa39ef
 800b1ac:	40862e42 	.word	0x40862e42
 800b1b0:	d52d3051 	.word	0xd52d3051
 800b1b4:	c0874910 	.word	0xc0874910
 800b1b8:	72bea4d0 	.word	0x72bea4d0
 800b1bc:	3e663769 	.word	0x3e663769
 800b1c0:	c5d26bf1 	.word	0xc5d26bf1
 800b1c4:	3ebbbd41 	.word	0x3ebbbd41
 800b1c8:	af25de2c 	.word	0xaf25de2c
 800b1cc:	3f11566a 	.word	0x3f11566a
 800b1d0:	16bebd93 	.word	0x16bebd93
 800b1d4:	3f66c16c 	.word	0x3f66c16c
 800b1d8:	5555553e 	.word	0x5555553e
 800b1dc:	3fc55555 	.word	0x3fc55555
 800b1e0:	652b82fe 	.word	0x652b82fe
 800b1e4:	3ff71547 	.word	0x3ff71547
 800b1e8:	fee00000 	.word	0xfee00000
 800b1ec:	3fe62e42 	.word	0x3fe62e42
 800b1f0:	35793c76 	.word	0x35793c76
 800b1f4:	3dea39ef 	.word	0x3dea39ef
 800b1f8:	8800759c 	.word	0x8800759c
 800b1fc:	7e37e43c 	.word	0x7e37e43c
 800b200:	40862e41 	.word	0x40862e41
 800b204:	7fefffff 	.word	0x7fefffff
 800b208:	3fd62e42 	.word	0x3fd62e42
 800b20c:	3ff0a2b1 	.word	0x3ff0a2b1
 800b210:	0801ee10 	.word	0x0801ee10
 800b214:	0801ee20 	.word	0x0801ee20
 800b218:	3ff00000 	.word	0x3ff00000
 800b21c:	0801ee00 	.word	0x0801ee00
 800b220:	3defffff 	.word	0x3defffff
 800b224:	00000000 	.word	0x00000000

0800b228 <__ieee754_pow>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	ed2d 8b06 	vpush	{d8-d10}
 800b230:	b089      	sub	sp, #36	; 0x24
 800b232:	ed8d 1b00 	vstr	d1, [sp]
 800b236:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b23a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b23e:	ea58 0102 	orrs.w	r1, r8, r2
 800b242:	ec57 6b10 	vmov	r6, r7, d0
 800b246:	d115      	bne.n	800b274 <__ieee754_pow+0x4c>
 800b248:	19b3      	adds	r3, r6, r6
 800b24a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b24e:	4152      	adcs	r2, r2
 800b250:	4299      	cmp	r1, r3
 800b252:	4b89      	ldr	r3, [pc, #548]	; (800b478 <__ieee754_pow+0x250>)
 800b254:	4193      	sbcs	r3, r2
 800b256:	f080 84d1 	bcs.w	800bbfc <__ieee754_pow+0x9d4>
 800b25a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	f7f4 ffdf 	bl	8000224 <__adddf3>
 800b266:	ec41 0b10 	vmov	d0, r0, r1
 800b26a:	b009      	add	sp, #36	; 0x24
 800b26c:	ecbd 8b06 	vpop	{d8-d10}
 800b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b274:	4b81      	ldr	r3, [pc, #516]	; (800b47c <__ieee754_pow+0x254>)
 800b276:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b27a:	429c      	cmp	r4, r3
 800b27c:	ee10 aa10 	vmov	sl, s0
 800b280:	463d      	mov	r5, r7
 800b282:	dc06      	bgt.n	800b292 <__ieee754_pow+0x6a>
 800b284:	d101      	bne.n	800b28a <__ieee754_pow+0x62>
 800b286:	2e00      	cmp	r6, #0
 800b288:	d1e7      	bne.n	800b25a <__ieee754_pow+0x32>
 800b28a:	4598      	cmp	r8, r3
 800b28c:	dc01      	bgt.n	800b292 <__ieee754_pow+0x6a>
 800b28e:	d10f      	bne.n	800b2b0 <__ieee754_pow+0x88>
 800b290:	b172      	cbz	r2, 800b2b0 <__ieee754_pow+0x88>
 800b292:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b296:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b29a:	ea55 050a 	orrs.w	r5, r5, sl
 800b29e:	d1dc      	bne.n	800b25a <__ieee754_pow+0x32>
 800b2a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b2a4:	18db      	adds	r3, r3, r3
 800b2a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b2aa:	4152      	adcs	r2, r2
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	e7d0      	b.n	800b252 <__ieee754_pow+0x2a>
 800b2b0:	2d00      	cmp	r5, #0
 800b2b2:	da3b      	bge.n	800b32c <__ieee754_pow+0x104>
 800b2b4:	4b72      	ldr	r3, [pc, #456]	; (800b480 <__ieee754_pow+0x258>)
 800b2b6:	4598      	cmp	r8, r3
 800b2b8:	dc51      	bgt.n	800b35e <__ieee754_pow+0x136>
 800b2ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b2be:	4598      	cmp	r8, r3
 800b2c0:	f340 84ab 	ble.w	800bc1a <__ieee754_pow+0x9f2>
 800b2c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b2c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2cc:	2b14      	cmp	r3, #20
 800b2ce:	dd0f      	ble.n	800b2f0 <__ieee754_pow+0xc8>
 800b2d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b2d4:	fa22 f103 	lsr.w	r1, r2, r3
 800b2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	f040 849c 	bne.w	800bc1a <__ieee754_pow+0x9f2>
 800b2e2:	f001 0101 	and.w	r1, r1, #1
 800b2e6:	f1c1 0302 	rsb	r3, r1, #2
 800b2ea:	9304      	str	r3, [sp, #16]
 800b2ec:	b182      	cbz	r2, 800b310 <__ieee754_pow+0xe8>
 800b2ee:	e05f      	b.n	800b3b0 <__ieee754_pow+0x188>
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	d15b      	bne.n	800b3ac <__ieee754_pow+0x184>
 800b2f4:	f1c3 0314 	rsb	r3, r3, #20
 800b2f8:	fa48 f103 	asr.w	r1, r8, r3
 800b2fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b300:	4543      	cmp	r3, r8
 800b302:	f040 8487 	bne.w	800bc14 <__ieee754_pow+0x9ec>
 800b306:	f001 0101 	and.w	r1, r1, #1
 800b30a:	f1c1 0302 	rsb	r3, r1, #2
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	4b5c      	ldr	r3, [pc, #368]	; (800b484 <__ieee754_pow+0x25c>)
 800b312:	4598      	cmp	r8, r3
 800b314:	d132      	bne.n	800b37c <__ieee754_pow+0x154>
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	f280 8477 	bge.w	800bc0c <__ieee754_pow+0x9e4>
 800b31e:	4959      	ldr	r1, [pc, #356]	; (800b484 <__ieee754_pow+0x25c>)
 800b320:	4632      	mov	r2, r6
 800b322:	463b      	mov	r3, r7
 800b324:	2000      	movs	r0, #0
 800b326:	f7f5 fa5d 	bl	80007e4 <__aeabi_ddiv>
 800b32a:	e79c      	b.n	800b266 <__ieee754_pow+0x3e>
 800b32c:	2300      	movs	r3, #0
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	2a00      	cmp	r2, #0
 800b332:	d13d      	bne.n	800b3b0 <__ieee754_pow+0x188>
 800b334:	4b51      	ldr	r3, [pc, #324]	; (800b47c <__ieee754_pow+0x254>)
 800b336:	4598      	cmp	r8, r3
 800b338:	d1ea      	bne.n	800b310 <__ieee754_pow+0xe8>
 800b33a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b33e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b342:	ea53 030a 	orrs.w	r3, r3, sl
 800b346:	f000 8459 	beq.w	800bbfc <__ieee754_pow+0x9d4>
 800b34a:	4b4f      	ldr	r3, [pc, #316]	; (800b488 <__ieee754_pow+0x260>)
 800b34c:	429c      	cmp	r4, r3
 800b34e:	dd08      	ble.n	800b362 <__ieee754_pow+0x13a>
 800b350:	f1b9 0f00 	cmp.w	r9, #0
 800b354:	f2c0 8456 	blt.w	800bc04 <__ieee754_pow+0x9dc>
 800b358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b35c:	e783      	b.n	800b266 <__ieee754_pow+0x3e>
 800b35e:	2302      	movs	r3, #2
 800b360:	e7e5      	b.n	800b32e <__ieee754_pow+0x106>
 800b362:	f1b9 0f00 	cmp.w	r9, #0
 800b366:	f04f 0000 	mov.w	r0, #0
 800b36a:	f04f 0100 	mov.w	r1, #0
 800b36e:	f6bf af7a 	bge.w	800b266 <__ieee754_pow+0x3e>
 800b372:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b376:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b37a:	e774      	b.n	800b266 <__ieee754_pow+0x3e>
 800b37c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b380:	d106      	bne.n	800b390 <__ieee754_pow+0x168>
 800b382:	4632      	mov	r2, r6
 800b384:	463b      	mov	r3, r7
 800b386:	4630      	mov	r0, r6
 800b388:	4639      	mov	r1, r7
 800b38a:	f7f5 f901 	bl	8000590 <__aeabi_dmul>
 800b38e:	e76a      	b.n	800b266 <__ieee754_pow+0x3e>
 800b390:	4b3e      	ldr	r3, [pc, #248]	; (800b48c <__ieee754_pow+0x264>)
 800b392:	4599      	cmp	r9, r3
 800b394:	d10c      	bne.n	800b3b0 <__ieee754_pow+0x188>
 800b396:	2d00      	cmp	r5, #0
 800b398:	db0a      	blt.n	800b3b0 <__ieee754_pow+0x188>
 800b39a:	ec47 6b10 	vmov	d0, r6, r7
 800b39e:	b009      	add	sp, #36	; 0x24
 800b3a0:	ecbd 8b06 	vpop	{d8-d10}
 800b3a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	f7ff bcdc 	b.w	800ad64 <__ieee754_sqrt>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	ec47 6b10 	vmov	d0, r6, r7
 800b3b4:	f000 fc62 	bl	800bc7c <fabs>
 800b3b8:	ec51 0b10 	vmov	r0, r1, d0
 800b3bc:	f1ba 0f00 	cmp.w	sl, #0
 800b3c0:	d129      	bne.n	800b416 <__ieee754_pow+0x1ee>
 800b3c2:	b124      	cbz	r4, 800b3ce <__ieee754_pow+0x1a6>
 800b3c4:	4b2f      	ldr	r3, [pc, #188]	; (800b484 <__ieee754_pow+0x25c>)
 800b3c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d123      	bne.n	800b416 <__ieee754_pow+0x1ee>
 800b3ce:	f1b9 0f00 	cmp.w	r9, #0
 800b3d2:	da05      	bge.n	800b3e0 <__ieee754_pow+0x1b8>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	2000      	movs	r0, #0
 800b3da:	492a      	ldr	r1, [pc, #168]	; (800b484 <__ieee754_pow+0x25c>)
 800b3dc:	f7f5 fa02 	bl	80007e4 <__aeabi_ddiv>
 800b3e0:	2d00      	cmp	r5, #0
 800b3e2:	f6bf af40 	bge.w	800b266 <__ieee754_pow+0x3e>
 800b3e6:	9b04      	ldr	r3, [sp, #16]
 800b3e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b3ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3f0:	431c      	orrs	r4, r3
 800b3f2:	d108      	bne.n	800b406 <__ieee754_pow+0x1de>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	f7f4 ff10 	bl	8000220 <__aeabi_dsub>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	e78f      	b.n	800b326 <__ieee754_pow+0xfe>
 800b406:	9b04      	ldr	r3, [sp, #16]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	f47f af2c 	bne.w	800b266 <__ieee754_pow+0x3e>
 800b40e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b412:	4619      	mov	r1, r3
 800b414:	e727      	b.n	800b266 <__ieee754_pow+0x3e>
 800b416:	0feb      	lsrs	r3, r5, #31
 800b418:	3b01      	subs	r3, #1
 800b41a:	9306      	str	r3, [sp, #24]
 800b41c:	9a06      	ldr	r2, [sp, #24]
 800b41e:	9b04      	ldr	r3, [sp, #16]
 800b420:	4313      	orrs	r3, r2
 800b422:	d102      	bne.n	800b42a <__ieee754_pow+0x202>
 800b424:	4632      	mov	r2, r6
 800b426:	463b      	mov	r3, r7
 800b428:	e7e6      	b.n	800b3f8 <__ieee754_pow+0x1d0>
 800b42a:	4b19      	ldr	r3, [pc, #100]	; (800b490 <__ieee754_pow+0x268>)
 800b42c:	4598      	cmp	r8, r3
 800b42e:	f340 80fb 	ble.w	800b628 <__ieee754_pow+0x400>
 800b432:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b436:	4598      	cmp	r8, r3
 800b438:	4b13      	ldr	r3, [pc, #76]	; (800b488 <__ieee754_pow+0x260>)
 800b43a:	dd0c      	ble.n	800b456 <__ieee754_pow+0x22e>
 800b43c:	429c      	cmp	r4, r3
 800b43e:	dc0f      	bgt.n	800b460 <__ieee754_pow+0x238>
 800b440:	f1b9 0f00 	cmp.w	r9, #0
 800b444:	da0f      	bge.n	800b466 <__ieee754_pow+0x23e>
 800b446:	2000      	movs	r0, #0
 800b448:	b009      	add	sp, #36	; 0x24
 800b44a:	ecbd 8b06 	vpop	{d8-d10}
 800b44e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b452:	f000 bcc2 	b.w	800bdda <__math_oflow>
 800b456:	429c      	cmp	r4, r3
 800b458:	dbf2      	blt.n	800b440 <__ieee754_pow+0x218>
 800b45a:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <__ieee754_pow+0x25c>)
 800b45c:	429c      	cmp	r4, r3
 800b45e:	dd19      	ble.n	800b494 <__ieee754_pow+0x26c>
 800b460:	f1b9 0f00 	cmp.w	r9, #0
 800b464:	dcef      	bgt.n	800b446 <__ieee754_pow+0x21e>
 800b466:	2000      	movs	r0, #0
 800b468:	b009      	add	sp, #36	; 0x24
 800b46a:	ecbd 8b06 	vpop	{d8-d10}
 800b46e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b472:	f000 bca9 	b.w	800bdc8 <__math_uflow>
 800b476:	bf00      	nop
 800b478:	fff00000 	.word	0xfff00000
 800b47c:	7ff00000 	.word	0x7ff00000
 800b480:	433fffff 	.word	0x433fffff
 800b484:	3ff00000 	.word	0x3ff00000
 800b488:	3fefffff 	.word	0x3fefffff
 800b48c:	3fe00000 	.word	0x3fe00000
 800b490:	41e00000 	.word	0x41e00000
 800b494:	4b60      	ldr	r3, [pc, #384]	; (800b618 <__ieee754_pow+0x3f0>)
 800b496:	2200      	movs	r2, #0
 800b498:	f7f4 fec2 	bl	8000220 <__aeabi_dsub>
 800b49c:	a354      	add	r3, pc, #336	; (adr r3, 800b5f0 <__ieee754_pow+0x3c8>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	460d      	mov	r5, r1
 800b4a6:	f7f5 f873 	bl	8000590 <__aeabi_dmul>
 800b4aa:	a353      	add	r3, pc, #332	; (adr r3, 800b5f8 <__ieee754_pow+0x3d0>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	460f      	mov	r7, r1
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f7f5 f86a 	bl	8000590 <__aeabi_dmul>
 800b4bc:	4b57      	ldr	r3, [pc, #348]	; (800b61c <__ieee754_pow+0x3f4>)
 800b4be:	4682      	mov	sl, r0
 800b4c0:	468b      	mov	fp, r1
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f5 f862 	bl	8000590 <__aeabi_dmul>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	a14b      	add	r1, pc, #300	; (adr r1, 800b600 <__ieee754_pow+0x3d8>)
 800b4d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4d6:	f7f4 fea3 	bl	8000220 <__aeabi_dsub>
 800b4da:	4622      	mov	r2, r4
 800b4dc:	462b      	mov	r3, r5
 800b4de:	f7f5 f857 	bl	8000590 <__aeabi_dmul>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	494d      	ldr	r1, [pc, #308]	; (800b620 <__ieee754_pow+0x3f8>)
 800b4ea:	f7f4 fe99 	bl	8000220 <__aeabi_dsub>
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4689      	mov	r9, r1
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f7f5 f849 	bl	8000590 <__aeabi_dmul>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4640      	mov	r0, r8
 800b504:	4649      	mov	r1, r9
 800b506:	f7f5 f843 	bl	8000590 <__aeabi_dmul>
 800b50a:	a33f      	add	r3, pc, #252	; (adr r3, 800b608 <__ieee754_pow+0x3e0>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f5 f83e 	bl	8000590 <__aeabi_dmul>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4650      	mov	r0, sl
 800b51a:	4659      	mov	r1, fp
 800b51c:	f7f4 fe80 	bl	8000220 <__aeabi_dsub>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4680      	mov	r8, r0
 800b526:	4689      	mov	r9, r1
 800b528:	4630      	mov	r0, r6
 800b52a:	4639      	mov	r1, r7
 800b52c:	f7f4 fe7a 	bl	8000224 <__adddf3>
 800b530:	2000      	movs	r0, #0
 800b532:	4632      	mov	r2, r6
 800b534:	463b      	mov	r3, r7
 800b536:	4604      	mov	r4, r0
 800b538:	460d      	mov	r5, r1
 800b53a:	f7f4 fe71 	bl	8000220 <__aeabi_dsub>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4640      	mov	r0, r8
 800b544:	4649      	mov	r1, r9
 800b546:	f7f4 fe6b 	bl	8000220 <__aeabi_dsub>
 800b54a:	9b04      	ldr	r3, [sp, #16]
 800b54c:	9a06      	ldr	r2, [sp, #24]
 800b54e:	3b01      	subs	r3, #1
 800b550:	4313      	orrs	r3, r2
 800b552:	4682      	mov	sl, r0
 800b554:	468b      	mov	fp, r1
 800b556:	f040 81e7 	bne.w	800b928 <__ieee754_pow+0x700>
 800b55a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b610 <__ieee754_pow+0x3e8>
 800b55e:	eeb0 8a47 	vmov.f32	s16, s14
 800b562:	eef0 8a67 	vmov.f32	s17, s15
 800b566:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b56a:	2600      	movs	r6, #0
 800b56c:	4632      	mov	r2, r6
 800b56e:	463b      	mov	r3, r7
 800b570:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b574:	f7f4 fe54 	bl	8000220 <__aeabi_dsub>
 800b578:	4622      	mov	r2, r4
 800b57a:	462b      	mov	r3, r5
 800b57c:	f7f5 f808 	bl	8000590 <__aeabi_dmul>
 800b580:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b584:	4680      	mov	r8, r0
 800b586:	4689      	mov	r9, r1
 800b588:	4650      	mov	r0, sl
 800b58a:	4659      	mov	r1, fp
 800b58c:	f7f5 f800 	bl	8000590 <__aeabi_dmul>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4640      	mov	r0, r8
 800b596:	4649      	mov	r1, r9
 800b598:	f7f4 fe44 	bl	8000224 <__adddf3>
 800b59c:	4632      	mov	r2, r6
 800b59e:	463b      	mov	r3, r7
 800b5a0:	4680      	mov	r8, r0
 800b5a2:	4689      	mov	r9, r1
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f7f4 fff2 	bl	8000590 <__aeabi_dmul>
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	f7f4 fe34 	bl	8000224 <__adddf3>
 800b5bc:	4b19      	ldr	r3, [pc, #100]	; (800b624 <__ieee754_pow+0x3fc>)
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	ec45 4b19 	vmov	d9, r4, r5
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	460f      	mov	r7, r1
 800b5c8:	468b      	mov	fp, r1
 800b5ca:	f340 82f0 	ble.w	800bbae <__ieee754_pow+0x986>
 800b5ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b5d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b5d6:	4303      	orrs	r3, r0
 800b5d8:	f000 81e4 	beq.w	800b9a4 <__ieee754_pow+0x77c>
 800b5dc:	ec51 0b18 	vmov	r0, r1, d8
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f7f5 fa46 	bl	8000a74 <__aeabi_dcmplt>
 800b5e8:	3800      	subs	r0, #0
 800b5ea:	bf18      	it	ne
 800b5ec:	2001      	movne	r0, #1
 800b5ee:	e72b      	b.n	800b448 <__ieee754_pow+0x220>
 800b5f0:	60000000 	.word	0x60000000
 800b5f4:	3ff71547 	.word	0x3ff71547
 800b5f8:	f85ddf44 	.word	0xf85ddf44
 800b5fc:	3e54ae0b 	.word	0x3e54ae0b
 800b600:	55555555 	.word	0x55555555
 800b604:	3fd55555 	.word	0x3fd55555
 800b608:	652b82fe 	.word	0x652b82fe
 800b60c:	3ff71547 	.word	0x3ff71547
 800b610:	00000000 	.word	0x00000000
 800b614:	bff00000 	.word	0xbff00000
 800b618:	3ff00000 	.word	0x3ff00000
 800b61c:	3fd00000 	.word	0x3fd00000
 800b620:	3fe00000 	.word	0x3fe00000
 800b624:	408fffff 	.word	0x408fffff
 800b628:	4bd5      	ldr	r3, [pc, #852]	; (800b980 <__ieee754_pow+0x758>)
 800b62a:	402b      	ands	r3, r5
 800b62c:	2200      	movs	r2, #0
 800b62e:	b92b      	cbnz	r3, 800b63c <__ieee754_pow+0x414>
 800b630:	4bd4      	ldr	r3, [pc, #848]	; (800b984 <__ieee754_pow+0x75c>)
 800b632:	f7f4 ffad 	bl	8000590 <__aeabi_dmul>
 800b636:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b63a:	460c      	mov	r4, r1
 800b63c:	1523      	asrs	r3, r4, #20
 800b63e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b642:	4413      	add	r3, r2
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	4bd0      	ldr	r3, [pc, #832]	; (800b988 <__ieee754_pow+0x760>)
 800b648:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b64c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b650:	429c      	cmp	r4, r3
 800b652:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b656:	dd08      	ble.n	800b66a <__ieee754_pow+0x442>
 800b658:	4bcc      	ldr	r3, [pc, #816]	; (800b98c <__ieee754_pow+0x764>)
 800b65a:	429c      	cmp	r4, r3
 800b65c:	f340 8162 	ble.w	800b924 <__ieee754_pow+0x6fc>
 800b660:	9b05      	ldr	r3, [sp, #20]
 800b662:	3301      	adds	r3, #1
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b66a:	2400      	movs	r4, #0
 800b66c:	00e3      	lsls	r3, r4, #3
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	4bc7      	ldr	r3, [pc, #796]	; (800b990 <__ieee754_pow+0x768>)
 800b672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b676:	ed93 7b00 	vldr	d7, [r3]
 800b67a:	4629      	mov	r1, r5
 800b67c:	ec53 2b17 	vmov	r2, r3, d7
 800b680:	eeb0 9a47 	vmov.f32	s18, s14
 800b684:	eef0 9a67 	vmov.f32	s19, s15
 800b688:	4682      	mov	sl, r0
 800b68a:	f7f4 fdc9 	bl	8000220 <__aeabi_dsub>
 800b68e:	4652      	mov	r2, sl
 800b690:	4606      	mov	r6, r0
 800b692:	460f      	mov	r7, r1
 800b694:	462b      	mov	r3, r5
 800b696:	ec51 0b19 	vmov	r0, r1, d9
 800b69a:	f7f4 fdc3 	bl	8000224 <__adddf3>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	49bb      	ldr	r1, [pc, #748]	; (800b994 <__ieee754_pow+0x76c>)
 800b6a6:	f7f5 f89d 	bl	80007e4 <__aeabi_ddiv>
 800b6aa:	ec41 0b1a 	vmov	d10, r0, r1
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f4 ff6b 	bl	8000590 <__aeabi_dmul>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6c0:	9302      	str	r3, [sp, #8]
 800b6c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b6c6:	46ab      	mov	fp, r5
 800b6c8:	106d      	asrs	r5, r5, #1
 800b6ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b6ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b6d2:	ec41 0b18 	vmov	d8, r0, r1
 800b6d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4640      	mov	r0, r8
 800b6de:	4649      	mov	r1, r9
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	461d      	mov	r5, r3
 800b6e4:	f7f4 ff54 	bl	8000590 <__aeabi_dmul>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	f7f4 fd96 	bl	8000220 <__aeabi_dsub>
 800b6f4:	ec53 2b19 	vmov	r2, r3, d9
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	460f      	mov	r7, r1
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	4629      	mov	r1, r5
 800b700:	f7f4 fd8e 	bl	8000220 <__aeabi_dsub>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4650      	mov	r0, sl
 800b70a:	4659      	mov	r1, fp
 800b70c:	f7f4 fd88 	bl	8000220 <__aeabi_dsub>
 800b710:	4642      	mov	r2, r8
 800b712:	464b      	mov	r3, r9
 800b714:	f7f4 ff3c 	bl	8000590 <__aeabi_dmul>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4630      	mov	r0, r6
 800b71e:	4639      	mov	r1, r7
 800b720:	f7f4 fd7e 	bl	8000220 <__aeabi_dsub>
 800b724:	ec53 2b1a 	vmov	r2, r3, d10
 800b728:	f7f4 ff32 	bl	8000590 <__aeabi_dmul>
 800b72c:	ec53 2b18 	vmov	r2, r3, d8
 800b730:	ec41 0b19 	vmov	d9, r0, r1
 800b734:	ec51 0b18 	vmov	r0, r1, d8
 800b738:	f7f4 ff2a 	bl	8000590 <__aeabi_dmul>
 800b73c:	a37c      	add	r3, pc, #496	; (adr r3, 800b930 <__ieee754_pow+0x708>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	4604      	mov	r4, r0
 800b744:	460d      	mov	r5, r1
 800b746:	f7f4 ff23 	bl	8000590 <__aeabi_dmul>
 800b74a:	a37b      	add	r3, pc, #492	; (adr r3, 800b938 <__ieee754_pow+0x710>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fd68 	bl	8000224 <__adddf3>
 800b754:	4622      	mov	r2, r4
 800b756:	462b      	mov	r3, r5
 800b758:	f7f4 ff1a 	bl	8000590 <__aeabi_dmul>
 800b75c:	a378      	add	r3, pc, #480	; (adr r3, 800b940 <__ieee754_pow+0x718>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f4 fd5f 	bl	8000224 <__adddf3>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f4 ff11 	bl	8000590 <__aeabi_dmul>
 800b76e:	a376      	add	r3, pc, #472	; (adr r3, 800b948 <__ieee754_pow+0x720>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f4 fd56 	bl	8000224 <__adddf3>
 800b778:	4622      	mov	r2, r4
 800b77a:	462b      	mov	r3, r5
 800b77c:	f7f4 ff08 	bl	8000590 <__aeabi_dmul>
 800b780:	a373      	add	r3, pc, #460	; (adr r3, 800b950 <__ieee754_pow+0x728>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 fd4d 	bl	8000224 <__adddf3>
 800b78a:	4622      	mov	r2, r4
 800b78c:	462b      	mov	r3, r5
 800b78e:	f7f4 feff 	bl	8000590 <__aeabi_dmul>
 800b792:	a371      	add	r3, pc, #452	; (adr r3, 800b958 <__ieee754_pow+0x730>)
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	f7f4 fd44 	bl	8000224 <__adddf3>
 800b79c:	4622      	mov	r2, r4
 800b79e:	4606      	mov	r6, r0
 800b7a0:	460f      	mov	r7, r1
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 fef2 	bl	8000590 <__aeabi_dmul>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	f7f4 feec 	bl	8000590 <__aeabi_dmul>
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	460d      	mov	r5, r1
 800b7be:	464b      	mov	r3, r9
 800b7c0:	ec51 0b18 	vmov	r0, r1, d8
 800b7c4:	f7f4 fd2e 	bl	8000224 <__adddf3>
 800b7c8:	ec53 2b19 	vmov	r2, r3, d9
 800b7cc:	f7f4 fee0 	bl	8000590 <__aeabi_dmul>
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	f7f4 fd26 	bl	8000224 <__adddf3>
 800b7d8:	4642      	mov	r2, r8
 800b7da:	4682      	mov	sl, r0
 800b7dc:	468b      	mov	fp, r1
 800b7de:	464b      	mov	r3, r9
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	4649      	mov	r1, r9
 800b7e4:	f7f4 fed4 	bl	8000590 <__aeabi_dmul>
 800b7e8:	4b6b      	ldr	r3, [pc, #428]	; (800b998 <__ieee754_pow+0x770>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	f7f4 fd18 	bl	8000224 <__adddf3>
 800b7f4:	4652      	mov	r2, sl
 800b7f6:	465b      	mov	r3, fp
 800b7f8:	f7f4 fd14 	bl	8000224 <__adddf3>
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	4604      	mov	r4, r0
 800b800:	460d      	mov	r5, r1
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f4 fec1 	bl	8000590 <__aeabi_dmul>
 800b80e:	4b62      	ldr	r3, [pc, #392]	; (800b998 <__ieee754_pow+0x770>)
 800b810:	4680      	mov	r8, r0
 800b812:	4689      	mov	r9, r1
 800b814:	2200      	movs	r2, #0
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f4 fd01 	bl	8000220 <__aeabi_dsub>
 800b81e:	4632      	mov	r2, r6
 800b820:	463b      	mov	r3, r7
 800b822:	f7f4 fcfd 	bl	8000220 <__aeabi_dsub>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4650      	mov	r0, sl
 800b82c:	4659      	mov	r1, fp
 800b82e:	f7f4 fcf7 	bl	8000220 <__aeabi_dsub>
 800b832:	ec53 2b18 	vmov	r2, r3, d8
 800b836:	f7f4 feab 	bl	8000590 <__aeabi_dmul>
 800b83a:	4622      	mov	r2, r4
 800b83c:	4606      	mov	r6, r0
 800b83e:	460f      	mov	r7, r1
 800b840:	462b      	mov	r3, r5
 800b842:	ec51 0b19 	vmov	r0, r1, d9
 800b846:	f7f4 fea3 	bl	8000590 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fce7 	bl	8000224 <__adddf3>
 800b856:	4606      	mov	r6, r0
 800b858:	460f      	mov	r7, r1
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4640      	mov	r0, r8
 800b860:	4649      	mov	r1, r9
 800b862:	f7f4 fcdf 	bl	8000224 <__adddf3>
 800b866:	a33e      	add	r3, pc, #248	; (adr r3, 800b960 <__ieee754_pow+0x738>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	2000      	movs	r0, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	460d      	mov	r5, r1
 800b872:	f7f4 fe8d 	bl	8000590 <__aeabi_dmul>
 800b876:	4642      	mov	r2, r8
 800b878:	ec41 0b18 	vmov	d8, r0, r1
 800b87c:	464b      	mov	r3, r9
 800b87e:	4620      	mov	r0, r4
 800b880:	4629      	mov	r1, r5
 800b882:	f7f4 fccd 	bl	8000220 <__aeabi_dsub>
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	4630      	mov	r0, r6
 800b88c:	4639      	mov	r1, r7
 800b88e:	f7f4 fcc7 	bl	8000220 <__aeabi_dsub>
 800b892:	a335      	add	r3, pc, #212	; (adr r3, 800b968 <__ieee754_pow+0x740>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f7f4 fe7a 	bl	8000590 <__aeabi_dmul>
 800b89c:	a334      	add	r3, pc, #208	; (adr r3, 800b970 <__ieee754_pow+0x748>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7f4 fe71 	bl	8000590 <__aeabi_dmul>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	f7f4 fcb5 	bl	8000224 <__adddf3>
 800b8ba:	9a07      	ldr	r2, [sp, #28]
 800b8bc:	4b37      	ldr	r3, [pc, #220]	; (800b99c <__ieee754_pow+0x774>)
 800b8be:	4413      	add	r3, r2
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	f7f4 fcae 	bl	8000224 <__adddf3>
 800b8c8:	4682      	mov	sl, r0
 800b8ca:	9805      	ldr	r0, [sp, #20]
 800b8cc:	468b      	mov	fp, r1
 800b8ce:	f7f4 fdf5 	bl	80004bc <__aeabi_i2d>
 800b8d2:	9a07      	ldr	r2, [sp, #28]
 800b8d4:	4b32      	ldr	r3, [pc, #200]	; (800b9a0 <__ieee754_pow+0x778>)
 800b8d6:	4413      	add	r3, r2
 800b8d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8dc:	4606      	mov	r6, r0
 800b8de:	460f      	mov	r7, r1
 800b8e0:	4652      	mov	r2, sl
 800b8e2:	465b      	mov	r3, fp
 800b8e4:	ec51 0b18 	vmov	r0, r1, d8
 800b8e8:	f7f4 fc9c 	bl	8000224 <__adddf3>
 800b8ec:	4642      	mov	r2, r8
 800b8ee:	464b      	mov	r3, r9
 800b8f0:	f7f4 fc98 	bl	8000224 <__adddf3>
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	f7f4 fc94 	bl	8000224 <__adddf3>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	4632      	mov	r2, r6
 800b900:	463b      	mov	r3, r7
 800b902:	4604      	mov	r4, r0
 800b904:	460d      	mov	r5, r1
 800b906:	f7f4 fc8b 	bl	8000220 <__aeabi_dsub>
 800b90a:	4642      	mov	r2, r8
 800b90c:	464b      	mov	r3, r9
 800b90e:	f7f4 fc87 	bl	8000220 <__aeabi_dsub>
 800b912:	ec53 2b18 	vmov	r2, r3, d8
 800b916:	f7f4 fc83 	bl	8000220 <__aeabi_dsub>
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	4650      	mov	r0, sl
 800b920:	4659      	mov	r1, fp
 800b922:	e610      	b.n	800b546 <__ieee754_pow+0x31e>
 800b924:	2401      	movs	r4, #1
 800b926:	e6a1      	b.n	800b66c <__ieee754_pow+0x444>
 800b928:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b978 <__ieee754_pow+0x750>
 800b92c:	e617      	b.n	800b55e <__ieee754_pow+0x336>
 800b92e:	bf00      	nop
 800b930:	4a454eef 	.word	0x4a454eef
 800b934:	3fca7e28 	.word	0x3fca7e28
 800b938:	93c9db65 	.word	0x93c9db65
 800b93c:	3fcd864a 	.word	0x3fcd864a
 800b940:	a91d4101 	.word	0xa91d4101
 800b944:	3fd17460 	.word	0x3fd17460
 800b948:	518f264d 	.word	0x518f264d
 800b94c:	3fd55555 	.word	0x3fd55555
 800b950:	db6fabff 	.word	0xdb6fabff
 800b954:	3fdb6db6 	.word	0x3fdb6db6
 800b958:	33333303 	.word	0x33333303
 800b95c:	3fe33333 	.word	0x3fe33333
 800b960:	e0000000 	.word	0xe0000000
 800b964:	3feec709 	.word	0x3feec709
 800b968:	dc3a03fd 	.word	0xdc3a03fd
 800b96c:	3feec709 	.word	0x3feec709
 800b970:	145b01f5 	.word	0x145b01f5
 800b974:	be3e2fe0 	.word	0xbe3e2fe0
 800b978:	00000000 	.word	0x00000000
 800b97c:	3ff00000 	.word	0x3ff00000
 800b980:	7ff00000 	.word	0x7ff00000
 800b984:	43400000 	.word	0x43400000
 800b988:	0003988e 	.word	0x0003988e
 800b98c:	000bb679 	.word	0x000bb679
 800b990:	0801ee30 	.word	0x0801ee30
 800b994:	3ff00000 	.word	0x3ff00000
 800b998:	40080000 	.word	0x40080000
 800b99c:	0801ee50 	.word	0x0801ee50
 800b9a0:	0801ee40 	.word	0x0801ee40
 800b9a4:	a3b3      	add	r3, pc, #716	; (adr r3, 800bc74 <__ieee754_pow+0xa4c>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	f7f4 fc39 	bl	8000224 <__adddf3>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	ec41 0b1a 	vmov	d10, r0, r1
 800b9b8:	462b      	mov	r3, r5
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4639      	mov	r1, r7
 800b9be:	f7f4 fc2f 	bl	8000220 <__aeabi_dsub>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	ec51 0b1a 	vmov	r0, r1, d10
 800b9ca:	f7f5 f871 	bl	8000ab0 <__aeabi_dcmpgt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	f47f ae04 	bne.w	800b5dc <__ieee754_pow+0x3b4>
 800b9d4:	4aa2      	ldr	r2, [pc, #648]	; (800bc60 <__ieee754_pow+0xa38>)
 800b9d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	f340 8107 	ble.w	800bbee <__ieee754_pow+0x9c6>
 800b9e0:	151b      	asrs	r3, r3, #20
 800b9e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b9e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b9ea:	fa4a fa03 	asr.w	sl, sl, r3
 800b9ee:	44da      	add	sl, fp
 800b9f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b9f4:	489b      	ldr	r0, [pc, #620]	; (800bc64 <__ieee754_pow+0xa3c>)
 800b9f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b9fa:	4108      	asrs	r0, r1
 800b9fc:	ea00 030a 	and.w	r3, r0, sl
 800ba00:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ba04:	f1c1 0114 	rsb	r1, r1, #20
 800ba08:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ba0c:	fa4a fa01 	asr.w	sl, sl, r1
 800ba10:	f1bb 0f00 	cmp.w	fp, #0
 800ba14:	f04f 0200 	mov.w	r2, #0
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	bfb8      	it	lt
 800ba1e:	f1ca 0a00 	rsblt	sl, sl, #0
 800ba22:	f7f4 fbfd 	bl	8000220 <__aeabi_dsub>
 800ba26:	ec41 0b19 	vmov	d9, r0, r1
 800ba2a:	4642      	mov	r2, r8
 800ba2c:	464b      	mov	r3, r9
 800ba2e:	ec51 0b19 	vmov	r0, r1, d9
 800ba32:	f7f4 fbf7 	bl	8000224 <__adddf3>
 800ba36:	a37a      	add	r3, pc, #488	; (adr r3, 800bc20 <__ieee754_pow+0x9f8>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	460d      	mov	r5, r1
 800ba42:	f7f4 fda5 	bl	8000590 <__aeabi_dmul>
 800ba46:	ec53 2b19 	vmov	r2, r3, d9
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	460f      	mov	r7, r1
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4629      	mov	r1, r5
 800ba52:	f7f4 fbe5 	bl	8000220 <__aeabi_dsub>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4640      	mov	r0, r8
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	f7f4 fbdf 	bl	8000220 <__aeabi_dsub>
 800ba62:	a371      	add	r3, pc, #452	; (adr r3, 800bc28 <__ieee754_pow+0xa00>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f7f4 fd92 	bl	8000590 <__aeabi_dmul>
 800ba6c:	a370      	add	r3, pc, #448	; (adr r3, 800bc30 <__ieee754_pow+0xa08>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	4680      	mov	r8, r0
 800ba74:	4689      	mov	r9, r1
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f4 fd89 	bl	8000590 <__aeabi_dmul>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4640      	mov	r0, r8
 800ba84:	4649      	mov	r1, r9
 800ba86:	f7f4 fbcd 	bl	8000224 <__adddf3>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4630      	mov	r0, r6
 800ba94:	4639      	mov	r1, r7
 800ba96:	f7f4 fbc5 	bl	8000224 <__adddf3>
 800ba9a:	4632      	mov	r2, r6
 800ba9c:	463b      	mov	r3, r7
 800ba9e:	4680      	mov	r8, r0
 800baa0:	4689      	mov	r9, r1
 800baa2:	f7f4 fbbd 	bl	8000220 <__aeabi_dsub>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	4620      	mov	r0, r4
 800baac:	4629      	mov	r1, r5
 800baae:	f7f4 fbb7 	bl	8000220 <__aeabi_dsub>
 800bab2:	4642      	mov	r2, r8
 800bab4:	4606      	mov	r6, r0
 800bab6:	460f      	mov	r7, r1
 800bab8:	464b      	mov	r3, r9
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f4 fd67 	bl	8000590 <__aeabi_dmul>
 800bac2:	a35d      	add	r3, pc, #372	; (adr r3, 800bc38 <__ieee754_pow+0xa10>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	f7f4 fd60 	bl	8000590 <__aeabi_dmul>
 800bad0:	a35b      	add	r3, pc, #364	; (adr r3, 800bc40 <__ieee754_pow+0xa18>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	f7f4 fba3 	bl	8000220 <__aeabi_dsub>
 800bada:	4622      	mov	r2, r4
 800badc:	462b      	mov	r3, r5
 800bade:	f7f4 fd57 	bl	8000590 <__aeabi_dmul>
 800bae2:	a359      	add	r3, pc, #356	; (adr r3, 800bc48 <__ieee754_pow+0xa20>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	f7f4 fb9c 	bl	8000224 <__adddf3>
 800baec:	4622      	mov	r2, r4
 800baee:	462b      	mov	r3, r5
 800baf0:	f7f4 fd4e 	bl	8000590 <__aeabi_dmul>
 800baf4:	a356      	add	r3, pc, #344	; (adr r3, 800bc50 <__ieee754_pow+0xa28>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f7f4 fb91 	bl	8000220 <__aeabi_dsub>
 800bafe:	4622      	mov	r2, r4
 800bb00:	462b      	mov	r3, r5
 800bb02:	f7f4 fd45 	bl	8000590 <__aeabi_dmul>
 800bb06:	a354      	add	r3, pc, #336	; (adr r3, 800bc58 <__ieee754_pow+0xa30>)
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f7f4 fb8a 	bl	8000224 <__adddf3>
 800bb10:	4622      	mov	r2, r4
 800bb12:	462b      	mov	r3, r5
 800bb14:	f7f4 fd3c 	bl	8000590 <__aeabi_dmul>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fb7e 	bl	8000220 <__aeabi_dsub>
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f4 fd2e 	bl	8000590 <__aeabi_dmul>
 800bb34:	2200      	movs	r2, #0
 800bb36:	ec41 0b19 	vmov	d9, r0, r1
 800bb3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fb6d 	bl	8000220 <__aeabi_dsub>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	ec51 0b19 	vmov	r0, r1, d9
 800bb4e:	f7f4 fe49 	bl	80007e4 <__aeabi_ddiv>
 800bb52:	4632      	mov	r2, r6
 800bb54:	4604      	mov	r4, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	463b      	mov	r3, r7
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	f7f4 fd17 	bl	8000590 <__aeabi_dmul>
 800bb62:	4632      	mov	r2, r6
 800bb64:	463b      	mov	r3, r7
 800bb66:	f7f4 fb5d 	bl	8000224 <__adddf3>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4620      	mov	r0, r4
 800bb70:	4629      	mov	r1, r5
 800bb72:	f7f4 fb55 	bl	8000220 <__aeabi_dsub>
 800bb76:	4642      	mov	r2, r8
 800bb78:	464b      	mov	r3, r9
 800bb7a:	f7f4 fb51 	bl	8000220 <__aeabi_dsub>
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4602      	mov	r2, r0
 800bb82:	4939      	ldr	r1, [pc, #228]	; (800bc68 <__ieee754_pow+0xa40>)
 800bb84:	2000      	movs	r0, #0
 800bb86:	f7f4 fb4b 	bl	8000220 <__aeabi_dsub>
 800bb8a:	ec41 0b10 	vmov	d0, r0, r1
 800bb8e:	ee10 3a90 	vmov	r3, s1
 800bb92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb9a:	da2b      	bge.n	800bbf4 <__ieee754_pow+0x9cc>
 800bb9c:	4650      	mov	r0, sl
 800bb9e:	f000 f877 	bl	800bc90 <scalbn>
 800bba2:	ec51 0b10 	vmov	r0, r1, d0
 800bba6:	ec53 2b18 	vmov	r2, r3, d8
 800bbaa:	f7ff bbee 	b.w	800b38a <__ieee754_pow+0x162>
 800bbae:	4b2f      	ldr	r3, [pc, #188]	; (800bc6c <__ieee754_pow+0xa44>)
 800bbb0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bbb4:	429e      	cmp	r6, r3
 800bbb6:	f77f af0d 	ble.w	800b9d4 <__ieee754_pow+0x7ac>
 800bbba:	4b2d      	ldr	r3, [pc, #180]	; (800bc70 <__ieee754_pow+0xa48>)
 800bbbc:	440b      	add	r3, r1
 800bbbe:	4303      	orrs	r3, r0
 800bbc0:	d009      	beq.n	800bbd6 <__ieee754_pow+0x9ae>
 800bbc2:	ec51 0b18 	vmov	r0, r1, d8
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f7f4 ff53 	bl	8000a74 <__aeabi_dcmplt>
 800bbce:	3800      	subs	r0, #0
 800bbd0:	bf18      	it	ne
 800bbd2:	2001      	movne	r0, #1
 800bbd4:	e448      	b.n	800b468 <__ieee754_pow+0x240>
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	462b      	mov	r3, r5
 800bbda:	f7f4 fb21 	bl	8000220 <__aeabi_dsub>
 800bbde:	4642      	mov	r2, r8
 800bbe0:	464b      	mov	r3, r9
 800bbe2:	f7f4 ff5b 	bl	8000a9c <__aeabi_dcmpge>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f aef4 	beq.w	800b9d4 <__ieee754_pow+0x7ac>
 800bbec:	e7e9      	b.n	800bbc2 <__ieee754_pow+0x99a>
 800bbee:	f04f 0a00 	mov.w	sl, #0
 800bbf2:	e71a      	b.n	800ba2a <__ieee754_pow+0x802>
 800bbf4:	ec51 0b10 	vmov	r0, r1, d0
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	e7d4      	b.n	800bba6 <__ieee754_pow+0x97e>
 800bbfc:	491a      	ldr	r1, [pc, #104]	; (800bc68 <__ieee754_pow+0xa40>)
 800bbfe:	2000      	movs	r0, #0
 800bc00:	f7ff bb31 	b.w	800b266 <__ieee754_pow+0x3e>
 800bc04:	2000      	movs	r0, #0
 800bc06:	2100      	movs	r1, #0
 800bc08:	f7ff bb2d 	b.w	800b266 <__ieee754_pow+0x3e>
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	4639      	mov	r1, r7
 800bc10:	f7ff bb29 	b.w	800b266 <__ieee754_pow+0x3e>
 800bc14:	9204      	str	r2, [sp, #16]
 800bc16:	f7ff bb7b 	b.w	800b310 <__ieee754_pow+0xe8>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f7ff bb65 	b.w	800b2ea <__ieee754_pow+0xc2>
 800bc20:	00000000 	.word	0x00000000
 800bc24:	3fe62e43 	.word	0x3fe62e43
 800bc28:	fefa39ef 	.word	0xfefa39ef
 800bc2c:	3fe62e42 	.word	0x3fe62e42
 800bc30:	0ca86c39 	.word	0x0ca86c39
 800bc34:	be205c61 	.word	0xbe205c61
 800bc38:	72bea4d0 	.word	0x72bea4d0
 800bc3c:	3e663769 	.word	0x3e663769
 800bc40:	c5d26bf1 	.word	0xc5d26bf1
 800bc44:	3ebbbd41 	.word	0x3ebbbd41
 800bc48:	af25de2c 	.word	0xaf25de2c
 800bc4c:	3f11566a 	.word	0x3f11566a
 800bc50:	16bebd93 	.word	0x16bebd93
 800bc54:	3f66c16c 	.word	0x3f66c16c
 800bc58:	5555553e 	.word	0x5555553e
 800bc5c:	3fc55555 	.word	0x3fc55555
 800bc60:	3fe00000 	.word	0x3fe00000
 800bc64:	fff00000 	.word	0xfff00000
 800bc68:	3ff00000 	.word	0x3ff00000
 800bc6c:	4090cbff 	.word	0x4090cbff
 800bc70:	3f6f3400 	.word	0x3f6f3400
 800bc74:	652b82fe 	.word	0x652b82fe
 800bc78:	3c971547 	.word	0x3c971547

0800bc7c <fabs>:
 800bc7c:	ec51 0b10 	vmov	r0, r1, d0
 800bc80:	ee10 2a10 	vmov	r2, s0
 800bc84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc88:	ec43 2b10 	vmov	d0, r2, r3
 800bc8c:	4770      	bx	lr
	...

0800bc90 <scalbn>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	ec55 4b10 	vmov	r4, r5, d0
 800bc96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	462b      	mov	r3, r5
 800bc9e:	b999      	cbnz	r1, 800bcc8 <scalbn+0x38>
 800bca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bca4:	4323      	orrs	r3, r4
 800bca6:	d03f      	beq.n	800bd28 <scalbn+0x98>
 800bca8:	4b35      	ldr	r3, [pc, #212]	; (800bd80 <scalbn+0xf0>)
 800bcaa:	4629      	mov	r1, r5
 800bcac:	ee10 0a10 	vmov	r0, s0
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f7f4 fc6d 	bl	8000590 <__aeabi_dmul>
 800bcb6:	4b33      	ldr	r3, [pc, #204]	; (800bd84 <scalbn+0xf4>)
 800bcb8:	429e      	cmp	r6, r3
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	da10      	bge.n	800bce2 <scalbn+0x52>
 800bcc0:	a327      	add	r3, pc, #156	; (adr r3, 800bd60 <scalbn+0xd0>)
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	e01f      	b.n	800bd08 <scalbn+0x78>
 800bcc8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bccc:	4291      	cmp	r1, r2
 800bcce:	d10c      	bne.n	800bcea <scalbn+0x5a>
 800bcd0:	ee10 2a10 	vmov	r2, s0
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	f7f4 faa4 	bl	8000224 <__adddf3>
 800bcdc:	4604      	mov	r4, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	e022      	b.n	800bd28 <scalbn+0x98>
 800bce2:	460b      	mov	r3, r1
 800bce4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bce8:	3936      	subs	r1, #54	; 0x36
 800bcea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bcee:	4296      	cmp	r6, r2
 800bcf0:	dd0d      	ble.n	800bd0e <scalbn+0x7e>
 800bcf2:	2d00      	cmp	r5, #0
 800bcf4:	a11c      	add	r1, pc, #112	; (adr r1, 800bd68 <scalbn+0xd8>)
 800bcf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcfa:	da02      	bge.n	800bd02 <scalbn+0x72>
 800bcfc:	a11c      	add	r1, pc, #112	; (adr r1, 800bd70 <scalbn+0xe0>)
 800bcfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd02:	a319      	add	r3, pc, #100	; (adr r3, 800bd68 <scalbn+0xd8>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	f7f4 fc42 	bl	8000590 <__aeabi_dmul>
 800bd0c:	e7e6      	b.n	800bcdc <scalbn+0x4c>
 800bd0e:	1872      	adds	r2, r6, r1
 800bd10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd14:	428a      	cmp	r2, r1
 800bd16:	dcec      	bgt.n	800bcf2 <scalbn+0x62>
 800bd18:	2a00      	cmp	r2, #0
 800bd1a:	dd08      	ble.n	800bd2e <scalbn+0x9e>
 800bd1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd28:	ec45 4b10 	vmov	d0, r4, r5
 800bd2c:	bd70      	pop	{r4, r5, r6, pc}
 800bd2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bd32:	da08      	bge.n	800bd46 <scalbn+0xb6>
 800bd34:	2d00      	cmp	r5, #0
 800bd36:	a10a      	add	r1, pc, #40	; (adr r1, 800bd60 <scalbn+0xd0>)
 800bd38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd3c:	dac0      	bge.n	800bcc0 <scalbn+0x30>
 800bd3e:	a10e      	add	r1, pc, #56	; (adr r1, 800bd78 <scalbn+0xe8>)
 800bd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd44:	e7bc      	b.n	800bcc0 <scalbn+0x30>
 800bd46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd4a:	3236      	adds	r2, #54	; 0x36
 800bd4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bd54:	4620      	mov	r0, r4
 800bd56:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <scalbn+0xf8>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	e7d5      	b.n	800bd08 <scalbn+0x78>
 800bd5c:	f3af 8000 	nop.w
 800bd60:	c2f8f359 	.word	0xc2f8f359
 800bd64:	01a56e1f 	.word	0x01a56e1f
 800bd68:	8800759c 	.word	0x8800759c
 800bd6c:	7e37e43c 	.word	0x7e37e43c
 800bd70:	8800759c 	.word	0x8800759c
 800bd74:	fe37e43c 	.word	0xfe37e43c
 800bd78:	c2f8f359 	.word	0xc2f8f359
 800bd7c:	81a56e1f 	.word	0x81a56e1f
 800bd80:	43500000 	.word	0x43500000
 800bd84:	ffff3cb0 	.word	0xffff3cb0
 800bd88:	3c900000 	.word	0x3c900000

0800bd8c <with_errno>:
 800bd8c:	b570      	push	{r4, r5, r6, lr}
 800bd8e:	4604      	mov	r4, r0
 800bd90:	460d      	mov	r5, r1
 800bd92:	4616      	mov	r6, r2
 800bd94:	f7fe feae 	bl	800aaf4 <__errno>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	6006      	str	r6, [r0, #0]
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}

0800bda0 <xflow>:
 800bda0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bda2:	4614      	mov	r4, r2
 800bda4:	461d      	mov	r5, r3
 800bda6:	b108      	cbz	r0, 800bdac <xflow+0xc>
 800bda8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bdac:	e9cd 2300 	strd	r2, r3, [sp]
 800bdb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	f7f4 fbea 	bl	8000590 <__aeabi_dmul>
 800bdbc:	2222      	movs	r2, #34	; 0x22
 800bdbe:	b003      	add	sp, #12
 800bdc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdc4:	f7ff bfe2 	b.w	800bd8c <with_errno>

0800bdc8 <__math_uflow>:
 800bdc8:	b508      	push	{r3, lr}
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bdd0:	f7ff ffe6 	bl	800bda0 <xflow>
 800bdd4:	ec41 0b10 	vmov	d0, r0, r1
 800bdd8:	bd08      	pop	{r3, pc}

0800bdda <__math_oflow>:
 800bdda:	b508      	push	{r3, lr}
 800bddc:	2200      	movs	r2, #0
 800bdde:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bde2:	f7ff ffdd 	bl	800bda0 <xflow>
 800bde6:	ec41 0b10 	vmov	d0, r0, r1
 800bdea:	bd08      	pop	{r3, pc}

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
